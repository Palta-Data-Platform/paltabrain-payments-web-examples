/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={293:function(e){e.exports=function(){var e={162:function(e,t,n){e.exports=n(47)},854:function(){},63:function(){},681:function(){},291:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=n(244),i=n(418),a=n(361),s=n(551),c=n(228),l={},u={VISA:"visa",MASTERCARD:"mastercard",AMERICAN_EXPRESS:"american-express",DINERS_CLUB:"diners-club",DISCOVER:"discover",JCB:"jcb",UNIONPAY:"unionpay",MAESTRO:"maestro",ELO:"elo",MIR:"mir",HIPER:"hiper",HIPERCARD:"hipercard"},d=[u.VISA,u.MASTERCARD,u.AMERICAN_EXPRESS,u.DINERS_CLUB,u.DISCOVER,u.JCB,u.UNIONPAY,u.MAESTRO,u.ELO,u.MIR,u.HIPER,u.HIPERCARD],p=c.clone(d);function f(e){return l[e]||o[e]}function h(e,t){void 0===t&&(t=!1);var n=p.indexOf(e);if(!t&&-1===n)throw new Error('"'+e+'" is not a supported card type.');return n}function _(e){var t=[];if(!a.isValidInputType(e))return t;if(0===e.length)return p.map((function(e){return c.clone(f(e))}));p.forEach((function(n){var r=f(n);i.addMatchingCardsToResults(e,r,t)}));var n=s.findBestMatch(t);return n?[n]:t}_.getTypeInfo=function(e){return c.clone(f(e))},_.removeCard=function(e){var t=h(e);p.splice(t,1)},_.addCard=function(e){var t=h(e.type,!0);l[e.type]=e,-1===t&&p.push(e.type)},_.updateCard=function(e,t){var n=l[e]||o[e];if(!n)throw new Error('"'+e+"\" is not a recognized type. Use `addCard` instead.'");if(t.type&&n.type!==t.type)throw new Error("Cannot overwrite type parameter.");var i=c.clone(n);i=r(r({},i),t),l[i.type]=i},_.changeOrder=function(e,t){var n=h(e);p.splice(n,1),p.splice(t,0,e)},_.resetModifications=function(){p=c.clone(d),l={}},_.types=u,e.exports=_},418:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addMatchingCardsToResults=void 0;var r=n(228),o=n(318);t.addMatchingCardsToResults=function(e,t,n){var i,a;for(i=0;i<t.patterns.length;i++){var s=t.patterns[i];if(o.matches(e,s)){var c=r.clone(t);a=Array.isArray(s)?String(s[0]).length:String(s).length,e.length>=a&&(c.matchStrength=a),n.push(c);break}}}},244:function(e){"use strict";e.exports={visa:{niceType:"Visa",type:"visa",patterns:[4],gaps:[4,8,12],lengths:[16,18,19],code:{name:"CVV",size:3}},mastercard:{niceType:"Mastercard",type:"mastercard",patterns:[[51,55],[2221,2229],[223,229],[23,26],[270,271],2720],gaps:[4,8,12],lengths:[16],code:{name:"CVC",size:3}},"american-express":{niceType:"American Express",type:"american-express",patterns:[34,37],gaps:[4,10],lengths:[15],code:{name:"CID",size:4}},"diners-club":{niceType:"Diners Club",type:"diners-club",patterns:[[300,305],36,38,39],gaps:[4,10],lengths:[14,16,19],code:{name:"CVV",size:3}},discover:{niceType:"Discover",type:"discover",patterns:[6011,[644,649],65],gaps:[4,8,12],lengths:[16,19],code:{name:"CID",size:3}},jcb:{niceType:"JCB",type:"jcb",patterns:[2131,1800,[3528,3589]],gaps:[4,8,12],lengths:[16,17,18,19],code:{name:"CVV",size:3}},unionpay:{niceType:"UnionPay",type:"unionpay",patterns:[620,[624,626],[62100,62182],[62184,62187],[62185,62197],[62200,62205],[622010,622999],622018,[622019,622999],[62207,62209],[622126,622925],[623,626],6270,6272,6276,[627700,627779],[627781,627799],[6282,6289],6291,6292,810,[8110,8131],[8132,8151],[8152,8163],[8164,8171]],gaps:[4,8,12],lengths:[14,15,16,17,18,19],code:{name:"CVN",size:3}},maestro:{niceType:"Maestro",type:"maestro",patterns:[493698,[5e5,504174],[504176,506698],[506779,508999],[56,59],63,67,6],gaps:[4,8,12],lengths:[12,13,14,15,16,17,18,19],code:{name:"CVC",size:3}},elo:{niceType:"Elo",type:"elo",patterns:[401178,401179,438935,457631,457632,431274,451416,457393,504175,[506699,506778],[509e3,509999],627780,636297,636368,[650031,650033],[650035,650051],[650405,650439],[650485,650538],[650541,650598],[650700,650718],[650720,650727],[650901,650978],[651652,651679],[655e3,655019],[655021,655058]],gaps:[4,8,12],lengths:[16],code:{name:"CVE",size:3}},mir:{niceType:"Mir",type:"mir",patterns:[[2200,2204]],gaps:[4,8,12],lengths:[16,17,18,19],code:{name:"CVP2",size:3}},hiper:{niceType:"Hiper",type:"hiper",patterns:[637095,63737423,63743358,637568,637599,637609,637612],gaps:[4,8,12],lengths:[16],code:{name:"CVC",size:3}},hipercard:{niceType:"Hipercard",type:"hipercard",patterns:[606282],gaps:[4,8,12],lengths:[16],code:{name:"CVC",size:3}}}},228:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clone=void 0,t.clone=function(e){return e?JSON.parse(JSON.stringify(e)):null}},551:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findBestMatch=void 0,t.findBestMatch=function(e){return function(e){var t=e.filter((function(e){return e.matchStrength})).length;return t>0&&t===e.length}(e)?e.reduce((function(e,t){return e?Number(e.matchStrength)<Number(t.matchStrength)?t:e:t})):null}},361:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isValidInputType=void 0,t.isValidInputType=function(e){return"string"==typeof e||e instanceof String}},318:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.matches=void 0,t.matches=function(e,t){return Array.isArray(t)?function(e,t,n){var r=String(t).length,o=e.substr(0,r),i=parseInt(o,10);return t=parseInt(String(t).substr(0,o.length),10),n=parseInt(String(n).substr(0,o.length),10),i>=t&&i<=n}(e,t[0],t[1]):function(e,t){return(t=String(t)).substring(0,e.length)===e.substring(0,t.length)}(e,t)}},47:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function l(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),a=new C(r||[]);return i._invoke=function(e,t,n){var r=d;return function(o,i){if(r===f)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return R()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=I(a,n);if(s){if(s===_)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=f;var c=u(e,t,n);if("normal"===c.type){if(r=n.done?h:p,c.arg===_)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=h,n.method="throw",n.arg=c.arg)}}}(e,n,a),i}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var d="suspendedStart",p="suspendedYield",f="executing",h="completed",_={};function m(){}function E(){}function y(){}var g={};g[i]=function(){return this};var v=Object.getPrototypeOf,A=v&&v(v(S([])));A&&A!==n&&r.call(A,i)&&(g=A);var b=y.prototype=m.prototype=Object.create(g);function T(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function N(e,t){function n(o,i,a,s){var c=u(e[o],e,i);if("throw"!==c.type){var l=c.arg,d=l.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,a,s)}),(function(e){n("throw",e,a,s)})):t.resolve(d).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,s)}))}s(c.arg)}var o;this._invoke=function(e,r){function i(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(i,i):i()}}function I(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,I(e,n),"throw"===n.method))return _;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return _}var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,_;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,_):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,_)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function S(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:R}}function R(){return{value:t,done:!0}}return E.prototype=b.constructor=y,y.constructor=E,E.displayName=c(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===E||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,c(e,s,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},T(N.prototype),N.prototype[a]=function(){return this},e.AsyncIterator=N,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new N(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},T(b),c(b,s,"Generator"),b[i]=function(){return this},b.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=S,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(P),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),l=r.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,_):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),_},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),_}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:S(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),_}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return function(){"use strict";n.r(r),n.d(r,{CheckoutUXFlow:function(){return ht},CvvInput:function(){return e.CvvInput},ErrorCode:function(){return bt},EventTypes:function(){return It},HeadlessManagerType:function(){return Ot},PaymentFlow:function(){return _t},PaymentInstrumentType:function(){return yt},PaymentMethodData:function(){return Pt.PaymentMethodData},PaymentMethodType:function(){return gt},Primer:function(){return Ct},SuccessScreenType:function(){return Nt},ThreeDSecureStatus:function(){return Et},TokenType:function(){return At},preloadPrimer:function(){return Tt}});var e={};n.r(e);var t,o,i,a=n(162),s=n.n(a);function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e,t){if(e){if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(e,t):void 0}}function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||l(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e){return function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||l(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function f(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){p(i,r,o,a,s,"next",e)}function s(e){p(i,r,o,a,s,"throw",e)}a(void 0)}))}}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n(854),n(63),function(e){e.REQUEST_START="REQUEST_START",e.REQUEST_END="REQUEST_END"}(t||(t={})),function(e){e.START="START",e.END="END"}(o||(o={})),function(e){e.NETWORK_CALL_EVENT="NETWORK_CALL_EVENT",e.CRASH_EVENT="CRASH_EVENT",e.TIMER_EVENT="TIMER_EVENT",e.MESSAGE_EVENT="MESSAGE_EVENT",e.V1_EVENT="V1_EVENT",e.SDK_FUNCTION_EVENT="SDK_FUNCTION_EVENT"}(i||(i={}));var m;function E(){return y.apply(this,arguments)}function y(){return(y=f(s().mark((function e(){var t,n,r,o,i,a;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("undefined"!=typeof navigator){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,null===(t=(n=navigator).getBattery)||void 0===t?void 0:t.call(n);case 4:return a=e.sent,e.abrupt("return",{memoryFootprint:null===(r=performance.memory)||void 0===r?void 0:r.usedJSHeapSize,screen:{height:null===(o=screen)||void 0===o?void 0:o.height,width:null===(i=screen)||void 0===i?void 0:i.width},platformVersion:navigator.platform,userAgent:navigator.userAgent,locale:navigator.language,batteryLevel:null==a?void 0:a.level,batteryStatus:null!=a&&a.charging?m.CHARGING:m.NOT_CHARGING});case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}!function(e){e.CHARGING="CHARGING",e.NOT_CHARGING="NOT_CHARGING"}(m||(m={}));var A=function(e,t){var n;try{switch(e){case"PRIMER_SDK_VERSION":n="v2.33.4";break;case"PRIMER_ASSETS_URL":n=process.env.PRIMER_ASSETS_URL;break;case"PRIMER_CORE_API_URL":n=process.env.PRIMER_CORE_API_URL;break;case"PRIMER_PCI_API_URL":n=process.env.PRIMER_PCI_API_URL;break;case"PRIMER_MODULES_URL":n=process.env.PRIMER_MODULES_URL;break;case"PRIMER_BUILD_INTEGRATION_BUILDER":n=process.env.PRIMER_BUILD_INTEGRATION_BUILDER;break;case"SENTRY_DSN":n=process.env.SENTRY_DSN}}catch(e){}return n||t}("PRIMER_SDK_VERSION");function b(e,t,n){return T.apply(this,arguments)}function T(){return(T=f(s().mark((function e(t,n,r){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=v,e.t1=v({},r),e.t2={},e.t3=Date.now(),e.next=6,E();case 6:return e.t4=e.sent,e.t5=t,e.t6=n,e.t7=A,e.t8="WEB",e.t9={createdAt:e.t3,device:e.t4,eventType:e.t5,properties:e.t6,sdkVersion:e.t7,sdkType:e.t8},e.abrupt("return",(0,e.t0)(e.t1,e.t2,e.t9));case 13:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var N="https://analytics.production.data.primer.io/sdk-logs",I=function(e){return"@primer/analytics/".concat(e)};function O(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.url,n=void 0===t?N:t,r=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["url"]);"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){"hidden"===document.visibilityState&&function(e){var t=I(e),n=sessionStorage.getItem(t);sessionStorage.removeItem(t),n&&navigator.sendBeacon(e,n)}(n)}));var o=function(e){return function(){var t=f(s().mark((function t(o){var i,a;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("undefined"!=typeof navigator){t.next=2;break}return t.abrupt("return");case 2:return t.next=4,b(e,o,r);case 4:i=t.sent,a=C(i,(function(e){return S(R(e))})),P(n,a);case 8:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()};return{crashEvent:o(i.CRASH_EVENT),messageEvent:o(i.MESSAGE_EVENT),networkCallEvent:o(i.NETWORK_CALL_EVENT),sdkFunctionEvent:o(i.SDK_FUNCTION_EVENT),timerEvent:o(i.TIMER_EVENT),v1Event:o(i.V1_EVENT)}}function P(e,t){var n,r=I(e);sessionStorage.setItem(r,"[".concat([null===(n=sessionStorage.getItem(r))||void 0===n?void 0:n.slice(1,-1),JSON.stringify(t)].filter(Boolean).join(","),"]"))}function C(e,t){var n=function(e){return"object"===h(e)&&null!==e?C(e,t):t(e)};return Array.isArray(e)?e.map(n):Object.fromEntries(Object.entries(e).map((function(e){var t=u(e,2),r=t[0],o=t[1];return[r,n(o)]})))}function S(e){return"string"==typeof e&&e.length>5120?"".concat(e.substring(0,5120),"..."):e}function R(e){return"function"==typeof e?e.name||"function":e}function w(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(e,t,n){return t&&D(e.prototype,t),n&&D(e,n),e}function k(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function U(e){return(U=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var x=function(){function e(t,n){w(this,e),_(this,"type",void 0),_(this,"displayName",void 0),_(this,"container",void 0),_(this,"remoteConfig",void 0),_(this,"options",void 0),this.type=t,this.displayName=n}return L(e,[{key:"specs",get:function(){return this.constructor.specs}},{key:"setOption",value:function(e,t){this.options&&(this.options[e]=t)}},{key:"setupAndValidate",value:function(){return Promise.resolve(!0)}},{key:"mount",value:function(){return Promise.resolve(!0)}},{key:"tokenize",value:function(e){return Promise.resolve()}},{key:"validate",value:function(){return Promise.resolve({valid:!0,validationErrors:[]})}},{key:"setDisabled",value:function(e){return Promise.resolve()}},{key:"focus",value:function(){}},{key:"blur",value:function(){}},{key:"getPaymentElement",value:function(){return null}},{key:"getStore",value:function(){}}]),e}();function F(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=U(e);if(t){var o=U(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return function(e,t){if(t&&("object"===h(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return k(e)}(this,n)}}_(x,"specs",{key:"__none__",canVault:!1,buttonManagedByPaymentMethod:!1,hasExportedButtonOptions:!1}),_(x,"create",(function(e,t,n,r){throw new Error("Cannot instantiate BasePaymentMethod")})),function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(r,e);var t,n=F(r);function r(){var e;w(this,r);for(var t=arguments.length,o=new Array(t),i=0;i<t;i++)o[i]=arguments[i];return _(k(e=n.call.apply(n,[this].concat(o))),"remoteConfig",void 0),e}L(r,[{key:"tokenize",value:(t=f(s().mark((function e(t){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)}))),function(e){return t.apply(this,arguments)})}])}(x),Map,Set;var Y=function(){var e;return(null===(e=z.randomUUID)||void 0===e?void 0:e.call(z))||V()},V=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^H()>>e/4).toString(16)}))},H=function(){var e,t;return 15&(null!==(e=null===(t=z.getRandomValues)||void 0===t?void 0:t.call(z,new Uint8Array(1))[0])&&void 0!==e?e:16*Math.random())},z="undefined"!=typeof crypto?crypto:{};new Set(["post","get","delete"]),new Set(["post"]);var B=function(e,n,r){return{callType:r?t.REQUEST_END:t.REQUEST_START,id:e,errorBody:(null==r?void 0:r.error)&&JSON.stringify(r.error),method:n.method,responseCode:null==r?void 0:r.status,url:n.url}};const K="function"==typeof atob,j="function"==typeof btoa,W="function"==typeof Buffer,G="function"==typeof TextDecoder?new TextDecoder:void 0,Q="function"==typeof TextEncoder?new TextEncoder:void 0,q=[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="],Z=(e=>{let t={};return e.forEach(((e,n)=>t[e]=n)),t})(q),X=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,$=String.fromCharCode.bind(String),J="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):(e,t=(e=>e))=>new Uint8Array(Array.prototype.slice.call(e,0).map(t)),ee=e=>e.replace(/[+\/]/g,(e=>"+"==e?"-":"_")).replace(/=+$/m,""),te=e=>e.replace(/[^A-Za-z0-9\+\/]/g,""),ne=e=>{let t,n,r,o,i="";const a=e.length%3;for(let a=0;a<e.length;){if((n=e.charCodeAt(a++))>255||(r=e.charCodeAt(a++))>255||(o=e.charCodeAt(a++))>255)throw new TypeError("invalid character found");t=n<<16|r<<8|o,i+=q[t>>18&63]+q[t>>12&63]+q[t>>6&63]+q[63&t]}return a?i.slice(0,a-3)+"===".substring(a):i},re=j?e=>btoa(e):W?e=>Buffer.from(e,"binary").toString("base64"):ne,oe=W?e=>Buffer.from(e).toString("base64"):e=>{let t=[];for(let n=0,r=e.length;n<r;n+=4096)t.push($.apply(null,e.subarray(n,n+4096)));return re(t.join(""))},ie=(e,t=!1)=>t?ee(oe(e)):oe(e),ae=e=>{if(e.length<2)return(t=e.charCodeAt(0))<128?e:t<2048?$(192|t>>>6)+$(128|63&t):$(224|t>>>12&15)+$(128|t>>>6&63)+$(128|63&t);var t=65536+1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320);return $(240|t>>>18&7)+$(128|t>>>12&63)+$(128|t>>>6&63)+$(128|63&t)},se=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,ce=e=>e.replace(se,ae),le=W?e=>Buffer.from(e,"utf8").toString("base64"):Q?e=>oe(Q.encode(e)):e=>re(ce(e)),ue=(e,t=!1)=>t?ee(le(e)):le(e),de=e=>ue(e,!0),pe=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,fe=e=>{switch(e.length){case 4:var t=((7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3))-65536;return $(55296+(t>>>10))+$(56320+(1023&t));case 3:return $((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return $((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},he=e=>e.replace(pe,fe),_e=e=>{if(e=e.replace(/\s+/g,""),!X.test(e))throw new TypeError("malformed base64.");e+="==".slice(2-(3&e.length));let t,n,r,o="";for(let i=0;i<e.length;)t=Z[e.charAt(i++)]<<18|Z[e.charAt(i++)]<<12|(n=Z[e.charAt(i++)])<<6|(r=Z[e.charAt(i++)]),o+=64===n?$(t>>16&255):64===r?$(t>>16&255,t>>8&255):$(t>>16&255,t>>8&255,255&t);return o},me=K?e=>atob(te(e)):W?e=>Buffer.from(e,"base64").toString("binary"):_e,Ee=W?e=>J(Buffer.from(e,"base64")):e=>J(me(e),(e=>e.charCodeAt(0))),ye=e=>Ee(ve(e)),ge=W?e=>Buffer.from(e,"base64").toString("utf8"):G?e=>G.decode(Ee(e)):e=>he(me(e)),ve=e=>te(e.replace(/[-_]/g,(e=>"-"==e?"+":"/"))),Ae=e=>ge(ve(e)),be=e=>({value:e,enumerable:!1,writable:!0,configurable:!0}),Te=function(){const e=(e,t)=>Object.defineProperty(String.prototype,e,be(t));e("fromBase64",(function(){return Ae(this)})),e("toBase64",(function(e){return ue(this,e)})),e("toBase64URI",(function(){return ue(this,!0)})),e("toBase64URL",(function(){return ue(this,!0)})),e("toUint8Array",(function(){return ye(this)}))},Ne=function(){const e=(e,t)=>Object.defineProperty(Uint8Array.prototype,e,be(t));e("toBase64",(function(e){return ie(this,e)})),e("toBase64URI",(function(){return ie(this,!0)})),e("toBase64URL",(function(){return ie(this,!0)}))},Ie={version:"3.6.1",VERSION:"3.6.1",atob:me,atobPolyfill:_e,btoa:re,btoaPolyfill:ne,fromBase64:Ae,toBase64:ue,encode:ue,encodeURI:de,encodeURL:de,utob:ce,btou:he,decode:Ae,isValid:e=>{if("string"!=typeof e)return!1;const t=e.replace(/\s+/g,"").replace(/=+$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(t)||!/[^\s0-9a-zA-Z\-_]/.test(t)},fromUint8Array:ie,toUint8Array:ye,extendString:Te,extendUint8Array:Ne,extendBuiltins:()=>{Te(),Ne()}};var Oe={encode:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).urlSafe;return Ie.encode(e,void 0!==t&&t)},decode:Ie.decode};function Pe(e){var t=function(e){try{var t=u(e.split("."),2),n=t[0],r=t[1]||n;return JSON.parse(Oe.decode(r))}catch(e){throw new Error(Re)}}(e),n=1e3*t.exp;if(Date.now()>n)throw new Error("".concat(Se,". Expiration date: ").concat(new Date(n).toISOString()));return t}var Ce="The provided `clientToken`",Se="".concat(Ce," has expired"),Re="".concat(Ce," is malformed");function we(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function De(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?we(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):we(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Le=function(e,t){return Me("get",e,t)},ke={"content-type":"application/json"},Me=function(e,t,n,r){return fetch(t,{body:r,method:e,headers:De(De({},ke),n)}).then((function(e){return e.json().catch((function(){}))}))};function Ue(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var xe=function(e,t,n){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ue(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ue(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({"primer-client-token":e,"primer-sdk-client":"WEB","primer-sdk-version":"v2.33.4","primer-sdk-checkout-session-id":t},n&&{"x-api-version":n})};function Fe(e,t,n){return Ye.apply(this,arguments)}function Ye(){return(Ye=f(s().mark((function e(t,n,r){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Le("".concat(n,"/?withDisplayMetadata=true"),xe(t,r,"2.2"));case 3:return e.abrupt("return",e.sent);case 6:throw e.prev=6,e.t0=e.catch(0),new Error(["Failed to initialize client",JSON.stringify(e.t0||void 0,void 0,2)].filter(Boolean).join(": "));case 9:case"end":return e.stop()}}),e,null,[[0,6]])})))).apply(this,arguments)}var Ve=function(e,t){return n=function(e,t){var n=document.createElement(e);return Object.entries(t).forEach((function(e){var t=u(e,2),r=t[0],o=t[1];return n.setAttribute(r,o)})),n}(e,t),document.head.appendChild(n);var n},He=function(e,t,n){return e.addEventListener(t,n)};function ze(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Be(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ze(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ze(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ke,je="Can't load Primer SDK",We="".concat(je,"'s Stylesheet"),Ge=function(e,t,n,r,o){return new Promise((function(i,a){var s=Qe(e,n,t)||Ve(e,Be(Be({},r),{},_({},n,t)));He(s,"load",(function(){return i()})),He(s,"error",(function(){null==s||s.remove(),a(new Error(o))}))}))},Qe=function(e,t,n){return r="".concat(e,"[").concat(t,'^="').concat(n,'"]'),document.querySelector(r);var r};function qe(){return Ze.apply(this,arguments)}function Ze(){return(Ze=f(s().mark((function e(){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!Ke){e.next=2;break}return e.abrupt("return",Ke);case 2:return Ke=Promise.all([et(),Je()]).then((function(e){return u(e,1)[0]})),e.abrupt("return",Ke);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var Xe,$e,Je=function(){return e="https://sdk.primer.io/web/v2.33.4/Checkout.css",Array.from(document.styleSheets).find((function(t){return t.href===e}))?Promise.resolve():Ge("link",e,"href",{rel:"stylesheet"},We);var e},et=function(){return(e="https://sdk.primer.io/web/v2.33.4/PrimerCoreSDK.min.js",t="script",Qe(t,"src",e)&&window.__Primer?Promise.resolve():Ge(t,e,"src",{async:"",crossorigin:"anonymous"},je)).then((function(){var e=window.__Primer;return delete window.__Primer,e})).catch((function(e){throw Ke=void 0,e}));var e,t},tt=ct("createHeadless"),nt=ct("showExpressCheckout"),rt=ct("showUniversalCheckout"),ot=ct("showVaultManager"),it="LOAD_PERFORMANCE",at=Y(),st=O({checkoutSessionId:at});function ct(e){return f(s().mark((function t(){var n,r,o,i,a,c,l,p,f,h,_,m,E=arguments;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(o=E.length,i=new Array(o),a=0;a<o;a++)i[a]=E[a];return c=i[0],l=i[1],p=i.slice(2),st.sdkFunctionEvent({name:e,params:[c,l].concat(d(p))}),st.messageEvent({message:"create",messageType:it,now:null===(n=(r=performance).now)||void 0===n?void 0:n.call(r)}),t.next=6,Promise.all([lt(c),qe()]);case 6:return f=t.sent,h=u(f,2),_=h[0],m=h[1],t.abrupt("return",m[e](_,at,c,l));case 11:case"end":return t.stop()}}),t)})))}function lt(e){return ut.apply(this,arguments)}function ut(){return(ut=f(s().mark((function e(t){var n,r,o,i,a,c,l,u,d,p;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=Pe(t),r=n.accessToken,o=n.configurationUrl,i=n.analyticsUrlV2,st=O({checkoutSessionId:at,url:i}),a="".concat(o,"/?withDisplayMetadata=true"),c=Y(),l={method:"get",url:a},st.networkCallEvent(B(c,l)),e.next=8,Fe(r,o,at);case 8:return u=e.sent,d=u.primerAccountId,p=u.clientSession.clientSessionId,(st=O({checkoutSessionId:at,clientSessionId:p,primerAccountId:d,url:i})).networkCallEvent(B(c,l,{data:u})),e.abrupt("return",u);case 14:case"end":return e.stop()}}),e)})))).apply(this,arguments)}st.messageEvent({message:"parsed",messageType:it,now:null===(Xe=($e=performance).now)||void 0===Xe?void 0:Xe.call($e)});var dt,pt,ft,ht,_t,mt,Et,yt,gt,vt,At,bt,Tt=function(){return qe().then((function(){}))};!function(e){e.LOADING="Loading",e.THREE_DS="UniversalCheckout/3ds",e.CHOOSE_PAYMENT_METHOD="UniversalCheckout/Home",e.MANAGE_PAYMENT_METHODS="VaultManager/Home",e.DIRECT_DEBIT_FORM="DirectDebit/Form",e.DIRECT_DEBIT_MANDATE="DirectDebit/Mandate",e.CREDIT_CARD_FORM="CreditCard/Form",e.SUCCESS_PAYMENT_METHOD="UniversalCheckout/Success/PaymentMethod",e.SUCCESS_CHECK="UniversalCheckout/Success/Check"}(dt||(dt={})),function(e){e.ROOT="primer-checkout",e.ROOT_CONTENT="primer-checkout-content",e.SUBMIT_BUTTON="primer-checkout-submit-button",e.THREE_DS_MODAL="primer-checkout-3ds-modal",e.VAULT="primer-checkout-vault",e.VAULT_INLINE="primer-checkout-vault-inline",e.NAVIGATE_PAYMENT_METHODS="primer-checkout-navigate-to-payment-methods",e.DIVIDER="primer-checkout-payment-method-divider",e.APM_BUTTONS="primer-checkout-apm-button-container",e.CARDHOLDER_NAME="primer-checkout-cardholder-name",e.CARDHOLDER_NAME_INPUT="primer-checkout-card-cardholder-name-input",e.ACTIONS="primer-checkout-actions",e.ACTIONS_MENU="primer-checkout-actions-menu",e.SAVE_PAYMENT_METHOD_CHECKBOX="primer-checkout-save-payment-method-input",e.SAVE_PAYMENT_METHOD_FIELD="primer-checkout-save-payment-method-field",e.SAVED_PAYMENT_METHODS_EMPTY="primer-checkout-saved-payment-methods-empty-text",e.CARD_FORM="primer-checkout-card-form",e.DD_SWITCH="primer-checkout-switch-dd-inputs",e.DD_IBAN_FIELD="primer-checkout-dd-iban-field",e.DD_LOCAL_FIELD="primer-checkout-dd-local-fields",e.DD_CUSTOMER_NAME_INPUT="primer-checkout-dd-customer-name-input",e.DD_CUSTOMER_EMAIL_INPUT="primer-checkout-dd-customer-email-input",e.DD_CUSTOMER_ADDRESS_LINE1="primer-checkout-dd-customer-address-input",e.DD_CUSTOMER_ADDRESS_LINE2="primer-checkout-dd-customer-address-line2-input",e.DD_CUSTOMER_ADDRESS_CITY="primer-checkout-dd-customer-city-input",e.DD_CUSTOMER_ADDRESS_POSTAL_CODE="primer-checkout-dd-customer-postal-code-input",e.DD_IBAN_INPUT="primer-checkout-dd-iban-input",e.DD_ACCOUNT_NUMBER_INPUT="primer-checkout-dd-account-number-input",e.DD_BANK_CODE_INPUT="primer-checkout-dd-bank-code-input",e.DD_BRANCH_CODE_INPUT="primer-checkout-dd-branch-code-input",e.DD_MANDATE_SMALL_PRINT="primer-checkout-small-print",e.ERROR_MESSAGE="primer-checkout-error-message"}(pt||(pt={})),function(e){e.TOKEN="PrimerCheckout__token",e.HIDDEN="PrimerCheckout--hidden",e.FOCUSED="PrimerCheckout--focused",e.SELECTED="PrimerCheckout--selected",e.LOADING="PrimerCheckout--loading",e.ERROR="PrimerCheckout--error",e.CARD_TYPE="PrimerCheckout__cardType",e.SAVED_PAYMENT_METHOD="PrimerCheckout__savedPaymentMethod",e.SAVED_PAYMENT_METHOD_CONTAINER="PrimerCheckout__savedPaymentMethodContainer",e.APM_BUTTON="PrimerCheckout__apmButton",e.EDIT_BUTTON="PrimerCheckout__editButton",e.MENU="PrimerCheckout__dropDownMenu",e.MENU_ITEM="PrimerCheckout__dropDownMenuItem",e.PAYMENT_METHOD_MENU_ITEM="PrimerCheckout__paymentMethodDropDownMenuItem",e.DELETE_PAYMENT_METHOD_BUTTON="PrimerCheckout__paymentMethodDropDownMenuItem__deleteButton",e.ENTER="PrimerCheckout--enter",e.ENTERING="PrimerCheckout--entering",e.ENTERED="PrimerCheckout--entered",e.EXIT="PrimerCheckout--exit",e.EXITING="PrimerCheckout--exiting",e.EXITED="PrimerCheckout--exited"}(ft||(ft={})),function(e){e.CHECKOUT="CHECKOUT",e.EXPRESS_CHECKOUT="EXPRESS_CHECKOUT",e.HEADLESS_CHECKOUT="HEADLESS_CHECKOUT",e.MANAGE_PAYMENT_METHODS="MANAGE_PAYMENT_METHODS",e.SINGLE_PAYMENT_METHOD_CHECKOUT="SINGLE_PAYMENT_METHOD_CHECKOUT"}(ht||(ht={})),function(e){e.DEFAULT="DEFAULT",e.PREFER_VAULT="PREFER_VAULT"}(_t||(_t={})),function(e){e.TOKENIZE_STARTED="tokenize-started",e.TOKENIZE_ERROR="tokenize-error",e.TOKENIZE_SUCCESS="tokenize-success",e.TOKENIZE_DID_NOT_START="tokenize-did-not-start"}(mt||(mt={})),function(e){e.SUCCESS="AUTH_SUCCESS",e.FAILED="AUTH_FAILED",e.SKIPPED="SKIPPED",e.CHALLENGE="CHALLENGE"}(Et||(Et={})),function(e){e.WORLDPAY_IDEAL="WORLDPAY_IDEAL",e.ADYEN_KLARNA="ADYEN_KLARNA",e.ADYEN_BANCONTACT_CARD="ADYEN_BANCONTACT_CARD",e.PAY_NL_KAARTDIRECT="PAY_NL_KAARTDIRECT",e.ADYEN_EPS="ADYEN_EPS",e.ADYEN_BANCONTACT_PAYCONIQ="ADYEN_BANCONTACT_PAYCONIQ",e.OMISE_PROMPTPAY="OMISE_PROMPTPAY",e.OMISE_TRUEMONEY="OMISE_TRUEMONEY",e.ADYEN_MULTIBANCO="ADYEN_MULTIBANCO",e.PACYPAY_WECHAT="PACYPAY_WECHAT",e.PACYPAY_ALIPAY="PACYPAY_ALIPAY",e.ADYEN_MBWAY="ADYEN_MBWAY",e.XENDIT_DANA="XENDIT_DANA",e.XENDIT_SHOPEEPAY="XENDIT_SHOPEEPAY",e.ADYEN_PAYSHOP="ADYEN_PAYSHOP",e.ADYEN_PAYTRAIL="ADYEN_PAYTRAIL",e.CLEARPAY="CLEARPAY",e.RAPYD_FAST="RAPYD_FAST",e.RAPYD_PROMPTPAY="RAPYD_PROMPTPAY",e.RAPYD_GCASH="RAPYD_GCASH",e.RAPYD_POLI="RAPYD_POLI",e.RAPYD_GRABPAY="RAPYD_GRABPAY",e.PRIMER_PAYPAL="PRIMER_PAYPAL",e.TWOC2P="TWOC2P",e.NETS="NETS",e.STRIPE_GIROPAY="STRIPE_GIROPAY",e.MOLLIE_GIROPAY="MOLLIE_GIROPAY",e.MOLLIE_EPS="MOLLIE_EPS",e.PAY_NL_EPS="PAY_NL_EPS",e.PAY_NL_P24="PAY_NL_P24",e.MOLLIE_P24="MOLLIE_P24",e.MOLLIE_SOFORT="MOLLIE_SOFORT",e.COINBASE="COINBASE",e.OPENNODE="OPENNODE",e.MOLLIE_GIFT_CARD="MOLLIE_GIFTCARD",e.XFERS_PAYNOW="XFERS_PAYNOW",e.CARD="PAYMENT_CARD",e.APPLE_PAY="APPLE_PAY",e.GOOGLE_PAY="GOOGLE_PAY",e.PAYPAL="PAYPAL_ORDER",e.PAYPAL_VAULTED="PAYPAL_BILLING_AGREEMENT",e.GO_CARDLESS="GOCARDLESS",e.PAY_NL_IDEAL="PAY_NL_IDEAL",e.PAY_NL_SOFORT_BANKING="PAY_NL_SOFORT_BANKING",e.PAY_NL_BANCONTACT="PAY_NL_BANCONTACT",e.PAY_NL_PAYPAL="PAY_NL_PAYPAL",e.PAY_NL_CREDIT_TRANSFER="PAY_NL_CREDIT_TRANSFER",e.PAY_NL_DIRECT_DEBIT="PAY_NL_DIRECT_DEBIT",e.PAY_NL_GIROPAY="PAY_NL_GIROPAY",e.PAY_NL_PAYCONIQ="PAY_NL_PAYCONIQ",e.HOOLAH="HOOLAH",e.ADYEN_BLIK="ADYEN_BLIK",e.ADYEN_VIPPS="ADYEN_VIPPS",e.ADYEN_GIROPAY="ADYEN_GIROPAY",e.ADYEN_SOFORT="ADYEN_SOFORT",e.ADYEN_TRUSTLY="ADYEN_TRUSTLY",e.ADYEN_ALIPAY="ADYEN_ALIPAY",e.ADYEN_TWINT="ADYEN_TWINT",e.ADYEN_MOBILEPAY="ADYEN_MOBILEPAY",e.MOLLIE_BANCONTACT="MOLLIE_BANCONTACT",e.MOLLIE_IDEAL="MOLLIE_IDEAL",e.BUCKAROO_GIROPAY="BUCKAROO_GIROPAY",e.BUCKAROO_EPS="BUCKAROO_EPS",e.BUCKAROO_SOFORT="BUCKAROO_SOFORT",e.BUCKAROO_BANCONTACT="BUCKAROO_BANCONTACT",e.BUCKAROO_IDEAL="BUCKAROO_IDEAL",e.ATOME="ATOME"}(yt||(yt={})),function(e){e.WORLDPAY_IDEAL="WORLDPAY_IDEAL",e.ADYEN_KLARNA="ADYEN_KLARNA",e.ADYEN_BANCONTACT_CARD="ADYEN_BANCONTACT_CARD",e.PAY_NL_KAARTDIRECT="PAY_NL_KAARTDIRECT",e.ADYEN_EPS="ADYEN_EPS",e.ADYEN_BANCONTACT_PAYCONIQ="ADYEN_BANCONTACT_PAYCONIQ",e.OMISE_PROMPTPAY="OMISE_PROMPTPAY",e.OMISE_TRUEMONEY="OMISE_TRUEMONEY",e.ADYEN_MULTIBANCO="ADYEN_MULTIBANCO",e.PACYPAY_WECHAT="PACYPAY_WECHAT",e.PACYPAY_ALIPAY="PACYPAY_ALIPAY",e.ADYEN_MBWAY="ADYEN_MBWAY",e.XENDIT_DANA="XENDIT_DANA",e.XENDIT_SHOPEEPAY="XENDIT_SHOPEEPAY",e.ADYEN_PAYSHOP="ADYEN_PAYSHOP",e.ADYEN_PAYTRAIL="ADYEN_PAYTRAIL",e.CLEARPAY="CLEARPAY",e.RAPYD_FAST="RAPYD_FAST",e.RAPYD_PROMPTPAY="RAPYD_PROMPTPAY",e.RAPYD_GCASH="RAPYD_GCASH",e.RAPYD_POLI="RAPYD_POLI",e.RAPYD_GRABPAY="RAPYD_GRABPAY",e.PRIMER_PAYPAL="PRIMER_PAYPAL",e.TWOC2P="TWOC2P",e.NETS="NETS",e.STRIPE_GIROPAY="STRIPE_GIROPAY",e.MOLLIE_GIROPAY="MOLLIE_GIROPAY",e.MOLLIE_EPS="MOLLIE_EPS",e.PAY_NL_EPS="PAY_NL_EPS",e.PAY_NL_P24="PAY_NL_P24",e.MOLLIE_P24="MOLLIE_P24",e.MOLLIE_SOFORT="MOLLIE_SOFORT",e.COINBASE="COINBASE",e.OPENNODE="OPENNODE",e.MOLLIE_GIFT_CARD="MOLLIE_GIFTCARD",e.XFERS_PAYNOW="XFERS_PAYNOW",e.PAYMENT_CARD="PAYMENT_CARD",e.APPLE_PAY="APPLE_PAY",e.GOOGLE_PAY="GOOGLE_PAY",e.PAYPAL="PAYPAL",e.GO_CARDLESS="GOCARDLESS",e.KLARNA="KLARNA",e.PAY_NL_IDEAL="PAY_NL_IDEAL",e.PAY_NL_SOFORT_BANKING="PAY_NL_SOFORT_BANKING",e.PAY_NL_BANCONTACT="PAY_NL_BANCONTACT",e.PAY_NL_PAYPAL="PAY_NL_PAYPAL",e.PAY_NL_CREDIT_TRANSFER="PAY_NL_CREDIT_TRANSFER",e.PAY_NL_DIRECT_DEBIT="PAY_NL_DIRECT_DEBIT",e.PAY_NL_GIROPAY="PAY_NL_GIROPAY",e.PAY_NL_PAYCONIQ="PAY_NL_PAYCONIQ",e.HOOLAH="HOOLAH",e.ADYEN_BLIK="ADYEN_BLIK",e.ADYEN_MOBILEPAY="ADYEN_MOBILEPAY",e.ADYEN_VIPPS="ADYEN_VIPPS",e.ADYEN_GIROPAY="ADYEN_GIROPAY",e.ADYEN_SOFORT="ADYEN_SOFORT",e.ADYEN_TRUSTLY="ADYEN_TRUSTLY",e.ADYEN_ALIPAY="ADYEN_ALIPAY",e.ADYEN_TWINT="ADYEN_TWINT",e.ADYEN_BANK_TRANSFER="ADYEN_BANK_TRANSFER",e.MOLLIE_BANCONTACT="MOLLIE_BANCONTACT",e.MOLLIE_IDEAL="MOLLIE_IDEAL",e.BUCKAROO_GIROPAY="BUCKAROO_GIROPAY",e.BUCKAROO_EPS="BUCKAROO_EPS",e.BUCKAROO_SOFORT="BUCKAROO_SOFORT",e.BUCKAROO_BANCONTACT="BUCKAROO_BANCONTACT",e.BUCKAROO_IDEAL="BUCKAROO_IDEAL",e.ATOME="ATOME"}(gt||(gt={})),function(e){e.PAYMENT_CARD="PAYMENT_CARD",e.ADYEN_BANCONTACT_CARD="ADYEN_BANCONTACT_CARD"}(vt||(vt={})),function(e){e.SINGLE_USE="SINGLE_USE",e.MULTI_USE="MULTI_USE"}(At||(At={})),_({},yt.PAYPAL_VAULTED,gt.PAYPAL),function(e){e.INITIALIZATION_ERROR="INITIALIZATION_ERROR",e.NO_PAYMENT_METHODS="NO_PAYMENT_METHODS",e.PRIMER_TEARDOWN="PRIMER_TEARDOWN",e.PRIMER_SERVER_ERROR="PRIMER_SERVER_ERROR",e.THREE_DS_SETUP_ERROR="THREE_DS_SETUP_ERROR",e.THREE_DS_AUTH_FAILED="THREE_DS_AUTH_FAILED",e.THREE_DS_NEGOTIATION_ERROR="THREE_DS_NEGOTIATION_ERROR",e.TOKENIZATION_ERROR="TOKENIZATION_ERROR",e.DUPLICATE_PAYMENT_METHOD_ERROR="DUPLICATE_PAYMENT_METHOD_ERROR",e.CARD_NUMBER_ERROR="CARD_NUMBER_ERROR",e.PAYMENT_METHOD_NOT_SETUP="PAYMENT_METHOD_NOT_SETUP",e.PAYMENT_METHOD_NOT_PROVIDED="PAYMENT_METHOD_NOT_SETUP",e.PAYMENT_METHOD_NOT_COMPATIBLE="PAYMENT_METHOD_NOT_COMPATIBLE",e.RESUME_ERROR="RESUME_ERROR",e.TAX_ERROR="TAX_ERROR",e.VALIDATION_ERROR="VALIDATION_ERROR",e.PAYMENT_FAILED="PAYMENT_FAILED",e.PAYMENT_CREATION_ABORTED="PAYMENT_CREATION_ABORTED",e.PAYMENT_CREATION_DISABLED="PAYMENT_CREATION_DISABLED",e.CLIENT_SESSION_UPDATE_ERROR="CLIENT_SESSION_UPDATE_ERROR",e.INVALID_ARGUMENT="INVALID_ARGUMENT",e.VAULT_FETCH="VAULT_FETCH",e.VAULT_DELETE="VAULT_DELETE",e.HEADLESS_VAULT_MANAGER_VALIDATION="HEADLESS_VAULT_MANAGER_VALIDATION",e.CARD_FORM_VALIDATION_UNEXPECTED_FIELD="CARD_FORM_VALIDATION_UNEXPECTED_FIELD"}(bt||(bt={})),Error;var Nt,It,Ot,Pt=n(681);n(291),new Set(["change","blur","focus"]),function(e){e.PAYMENT_METHOD="PAYMENT_METHOD",e.CHECK="CHECK"}(Nt||(Nt={})),function(e){e.CHANGE="change",e.ERROR="error",e.FOCUS="focus",e.BLUR="blur",e.CLICK="click",e.CLOSE="close"}(It||(It={})),function(e){e.CARD="CARD",e.NATIVE="NATIVE",e.REDIRECT="REDIRECT"}(Ot||(Ot={}));var Ct={SDK_VERSION:"v2.33.4",createHeadless:tt,showExpressCheckout:nt,showUniversalCheckout:rt,showVaultManager:ot}}(),r}()},74:e=>{e.exports=function e(t,n,r){function o(a,s){if(!n[a]){if(!t[a]){if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};t[a][0].call(l.exports,(function(e){return o(t[a][1][e]||e)}),l,l.exports,e,t,n,r)}return n[a].exports}for(var i=void 0,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.PromiseGlobal=void 0;var o=r(e("promise-polyfill")),i="undefined"!=typeof Promise?Promise:o.default;n.PromiseGlobal=i},{"promise-polyfill":68}],2:[function(e,t,n){"use strict";var r=e("./lib/promise"),o={};function i(e){var t,n=JSON.stringify(e);if(!e.forceScriptReload&&(t=o[n]))return t;var i=document.createElement("script"),a=e.dataAttributes||{},s=e.container||document.head;return i.src=e.src,i.id=e.id||"",i.async=!0,e.crossorigin&&i.setAttribute("crossorigin",""+e.crossorigin),Object.keys(a).forEach((function(e){i.setAttribute("data-"+e,""+a[e])})),t=new r.PromiseGlobal((function(t,n){i.addEventListener("load",(function(){t(i)})),i.addEventListener("error",(function(){n(new Error(e.src+" failed to load."))})),i.addEventListener("abort",(function(){n(new Error(e.src+" has aborted."))})),s.appendChild(i)})),o[n]=t,t}i.clearCache=function(){o={}},t.exports=i},{"./lib/promise":1}],3:[function(e,t,n){t.exports=e("./dist/load-script")},{"./dist/load-script":2}],4:[function(e,t,n){"use strict";t.exports=function(e){return e=e||window.navigator.userAgent,/Android/i.test(e)}},{}],5:[function(e,t,n){"use strict";t.exports=function(e){return e=e||window.navigator.userAgent,/CrOS/i.test(e)}},{}],6:[function(e,t,n){"use strict";var r=e("./is-edge"),o=e("./is-samsung"),i=e("./is-duckduckgo"),a=e("./is-opera"),s=e("./is-silk");t.exports=function(e){return!(-1===(e=e||window.navigator.userAgent).indexOf("Chrome")&&-1===e.indexOf("CriOS")||r(e)||o(e)||i(e)||a(e)||s(e))}},{"./is-duckduckgo":7,"./is-edge":8,"./is-opera":18,"./is-samsung":19,"./is-silk":20}],7:[function(e,t,n){"use strict";t.exports=function(e){return-1!==(e=e||window.navigator.userAgent).indexOf("DuckDuckGo/")}},{}],8:[function(e,t,n){"use strict";t.exports=function(e){return-1!==(e=e||window.navigator.userAgent).indexOf("Edge/")}},{}],9:[function(e,t,n){"use strict";t.exports=function(e){return e=e||window.navigator.userAgent,/Firefox/i.test(e)}},{}],10:[function(e,t,n){"use strict";t.exports=function(e){return-1!==(e=e||window.navigator.userAgent).indexOf("MSIE 9")}},{}],11:[function(e,t,n){"use strict";t.exports=function(e){return e=e||window.navigator.userAgent,/FxiOS/i.test(e)}},{}],12:[function(e,t,n){"use strict";var r=e("./is-ios");t.exports=function(e){return e=e||window.navigator.userAgent,r(e)&&function(e){return/\bGSA\b/.test(e)}(e)}},{"./is-ios":16}],13:[function(e,t,n){"use strict";var r=e("./is-ios"),o=e("./is-ios-firefox"),i=/webkit/i;t.exports=function(e){return e=e||window.navigator.userAgent,r(e)&&function(e){return i.test(e)}(e)&&!function(e){return e.indexOf("CriOS")>-1}(e)&&!o(e)&&!function(e){return e.indexOf("FBAN")>-1}(e)}},{"./is-ios":16,"./is-ios-firefox":11}],14:[function(e,t,n){"use strict";var r=e("./is-ios"),o=e("./is-ios-google-search-app");t.exports=function(e){return e=e||window.navigator.userAgent,!!r(e)&&(!!o(e)||/.+AppleWebKit(?!.*Safari)/i.test(e))}},{"./is-ios":16,"./is-ios-google-search-app":12}],15:[function(e,t,n){"use strict";var r=e("./is-ios-webview");t.exports=function(e,t){return t=void 0!==t?t:window.statusbar.visible,r(e)&&t}},{"./is-ios-webview":14}],16:[function(e,t,n){"use strict";var r=e("./is-ipados");t.exports=function(e,t,n){void 0===t&&(t=!0),e=e||window.navigator.userAgent;var o=/iPhone|iPod|iPad/i.test(e);return t?o||r(e,n):o}},{"./is-ipados":17}],17:[function(e,t,n){"use strict";t.exports=function(e,t){return e=e||window.navigator.userAgent,t=t||window.document,/Mac|iPad/i.test(e)&&"ontouchend"in t}},{}],18:[function(e,t,n){"use strict";t.exports=function(e){return-1!==(e=e||window.navigator.userAgent).indexOf("OPR/")||-1!==e.indexOf("Opera/")||-1!==e.indexOf("OPT/")}},{}],19:[function(e,t,n){"use strict";t.exports=function(e){return e=e||window.navigator.userAgent,/SamsungBrowser/i.test(e)}},{}],20:[function(e,t,n){"use strict";t.exports=function(e){return-1!==(e=e||window.navigator.userAgent).indexOf("Silk/")}},{}],21:[function(e,t,n){"use strict";var r=e("./is-android"),o=e("./is-ios-firefox"),i=e("./is-ios-webview"),a=e("./is-chrome"),s=e("./is-samsung"),c=e("./is-duckduckgo");function l(e){return(e=e||window.navigator.userAgent).indexOf("Opera Mini")>-1}t.exports=function(e){return e=e||window.navigator.userAgent,!(i(e)||o(e)||function(e){return e=e||window.navigator.userAgent,!!r(e)&&/Version\/[\d.]+/i.test(e)&&!l(e)&&!c(e)}(e)||l(e)||function(e){var t=(e=e||window.navigator.userAgent).match(/CriOS\/(\d+)\./);return!!t&&parseInt(t[1],10)<48}(e)||function(e){return!a(e)&&!s(e)&&/samsung/i.test(e)}(e))}},{"./is-android":4,"./is-chrome":6,"./is-duckduckgo":7,"./is-ios-firefox":11,"./is-ios-webview":14,"./is-samsung":19}],22:[function(e,t,n){t.exports=e("./dist/is-android")},{"./dist/is-android":4}],23:[function(e,t,n){t.exports=e("./dist/is-chrome-os")},{"./dist/is-chrome-os":5}],24:[function(e,t,n){t.exports=e("./dist/is-chrome")},{"./dist/is-chrome":6}],25:[function(e,t,n){t.exports=e("./dist/is-firefox")},{"./dist/is-firefox":9}],26:[function(e,t,n){t.exports=e("./dist/is-ie9")},{"./dist/is-ie9":10}],27:[function(e,t,n){t.exports=e("./dist/is-ios-safari")},{"./dist/is-ios-safari":13}],28:[function(e,t,n){t.exports=e("./dist/is-ios-webview")},{"./dist/is-ios-webview":14}],29:[function(e,t,n){t.exports=e("./dist/is-ios-wkwebview")},{"./dist/is-ios-wkwebview":15}],30:[function(e,t,n){t.exports=e("./dist/is-ios")},{"./dist/is-ios":16}],31:[function(e,t,n){t.exports=e("./dist/is-samsung")},{"./dist/is-samsung":19}],32:[function(e,t,n){t.exports=e("./dist/supports-popups")},{"./dist/supports-popups":21}],33:[function(e,t,n){"use strict";var r=function(){function e(){this._events={}}return e.prototype.on=function(e,t){this._events[e]?this._events[e].push(t):this._events[e]=[t]},e.prototype.off=function(e,t){var n=this._events[e];if(n){var r=n.indexOf(t);n.splice(r,1)}},e.prototype._emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this._events[e];r&&r.forEach((function(e){e.apply(void 0,t)}))},e.prototype.hasListener=function(e){var t=this._events[e];return!!t&&t.length>0},e.createChild=function(t){t.prototype=Object.create(e.prototype,{constructor:t})},e}();t.exports=r},{}],34:[function(e,t,n){"use strict";var r="undefined"!=typeof Promise?Promise:null,o=function(){function e(t){var n=this;"function"!=typeof t?(this._promise=new e.Promise((function(e,t){n._resolveFunction=e,n._rejectFunction=t})),t=t||{},this._onResolve=t.onResolve||e.defaultOnResolve,this._onReject=t.onReject||e.defaultOnReject,e.shouldCatchExceptions(t)&&this._promise.catch((function(){})),this._resetState()):this._promise=new e.Promise(t)}return e.defaultOnResolve=function(t){return e.Promise.resolve(t)},e.defaultOnReject=function(t){return e.Promise.reject(t)},e.setPromise=function(t){e.Promise=t},e.shouldCatchExceptions=function(t){return t.hasOwnProperty("suppressUnhandledPromiseMessage")?Boolean(t.suppressUnhandledPromiseMessage):Boolean(e.suppressUnhandledPromiseMessage)},e.all=function(t){return e.Promise.all(t)},e.allSettled=function(t){return e.Promise.allSettled(t)},e.race=function(t){return e.Promise.race(t)},e.reject=function(t){return e.Promise.reject(t)},e.resolve=function(t){return e.Promise.resolve(t)},e.prototype.then=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(e=this._promise).then.apply(e,t)},e.prototype.catch=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(e=this._promise).catch.apply(e,t)},e.prototype.resolve=function(t){var n=this;return this.isFulfilled||(this._setResolved(),e.Promise.resolve().then((function(){return n._onResolve(t)})).then((function(e){n._resolveFunction(e)})).catch((function(e){n._resetState(),n.reject(e)}))),this},e.prototype.reject=function(t){var n=this;return this.isFulfilled||(this._setRejected(),e.Promise.resolve().then((function(){return n._onReject(t)})).then((function(e){n._setResolved(),n._resolveFunction(e)})).catch((function(e){return n._rejectFunction(e)}))),this},e.prototype._resetState=function(){this.isFulfilled=!1,this.isResolved=!1,this.isRejected=!1},e.prototype._setResolved=function(){this.isFulfilled=!0,this.isResolved=!0,this.isRejected=!1},e.prototype._setRejected=function(){this.isFulfilled=!0,this.isResolved=!1,this.isRejected=!0},e.Promise=r,e}();t.exports=o},{}],35:[function(e,t,n){"use strict";var r=e("./lib/set-attributes"),o=e("./lib/default-attributes"),i=e("./lib/assign");t.exports=function(e){void 0===e&&(e={});var t=document.createElement("iframe"),n=i.assign({},o.defaultAttributes,e);return n.style&&"string"!=typeof n.style&&(i.assign(t.style,n.style),delete n.style),r.setAttributes(t,n),t.getAttribute("id")||(t.id=t.name),t}},{"./lib/assign":36,"./lib/default-attributes":37,"./lib/set-attributes":38}],36:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.assign=void 0,n.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach((function(t){"object"==typeof t&&Object.keys(t).forEach((function(n){e[n]=t[n]}))})),e}},{}],37:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.defaultAttributes=void 0,n.defaultAttributes={src:"about:blank",frameBorder:0,allowtransparency:!0,scrolling:"no"}},{}],38:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.setAttributes=void 0,n.setAttributes=function(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];null==r?e.removeAttribute(n):e.setAttribute(n,r)}}},{}],39:[function(e,t,n){"use strict";t.exports=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}},{}],40:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.deferred=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];setTimeout((function(){try{e.apply(void 0,t)}catch(e){console.log("Error in callback function"),console.log(e)}}),1)}}},{}],41:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.once=function(e){var t=!1;return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];t||(t=!0,e.apply(void 0,n))}}},{}],42:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.promiseOrCallback=function(e,t){if(!t)return e;e.then((function(e){return t(null,e)})).catch((function(e){return t(e)}))}},{}],43:[function(e,t,n){"use strict";var r=e("./lib/deferred"),o=e("./lib/once"),i=e("./lib/promise-or-callback");function a(e){return function(){for(var t,n=[],a=0;a<arguments.length;a++)n[a]=arguments[a];return"function"==typeof n[n.length-1]&&(t=n.pop(),t=o.once(r.deferred(t))),i.promiseOrCallback(e.apply(this,n),t)}}a.wrapPrototype=function(e,t){void 0===t&&(t={});var n=t.ignoreMethods||[],r=!0===t.transformPrivateMethods;return Object.getOwnPropertyNames(e.prototype).filter((function(t){var o,i="constructor"!==t&&"function"==typeof e.prototype[t],a=-1===n.indexOf(t);return o=!!r||"_"!==t.charAt(0),i&&o&&a})).forEach((function(t){var n=e.prototype[t];e.prototype[t]=a(n)})),e},t.exports=a},{"./lib/deferred":40,"./lib/once":41,"./lib/promise-or-callback":42}],44:[function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=e("./lib/card-types"),i=e("./lib/add-matching-cards-to-results"),a=e("./lib/is-valid-input-type"),s=e("./lib/find-best-match"),c=e("./lib/clone"),l={},u={VISA:"visa",MASTERCARD:"mastercard",AMERICAN_EXPRESS:"american-express",DINERS_CLUB:"diners-club",DISCOVER:"discover",JCB:"jcb",UNIONPAY:"unionpay",MAESTRO:"maestro",ELO:"elo",MIR:"mir",HIPER:"hiper",HIPERCARD:"hipercard"},d=[u.VISA,u.MASTERCARD,u.AMERICAN_EXPRESS,u.DINERS_CLUB,u.DISCOVER,u.JCB,u.UNIONPAY,u.MAESTRO,u.ELO,u.MIR,u.HIPER,u.HIPERCARD],p=c.clone(d);function f(e){return l[e]||o[e]}function h(e,t){void 0===t&&(t=!1);var n=p.indexOf(e);if(!t&&-1===n)throw new Error('"'+e+'" is not a supported card type.');return n}function _(e){var t=[];if(!a.isValidInputType(e))return t;if(0===e.length)return p.map((function(e){return c.clone(f(e))}));p.forEach((function(n){var r=f(n);i.addMatchingCardsToResults(e,r,t)}));var n=s.findBestMatch(t);return n?[n]:t}_.getTypeInfo=function(e){return c.clone(f(e))},_.removeCard=function(e){var t=h(e);p.splice(t,1)},_.addCard=function(e){var t=h(e.type,!0);l[e.type]=e,-1===t&&p.push(e.type)},_.updateCard=function(e,t){var n=l[e]||o[e];if(!n)throw new Error('"'+e+"\" is not a recognized type. Use `addCard` instead.'");if(t.type&&n.type!==t.type)throw new Error("Cannot overwrite type parameter.");var i=c.clone(n);i=r(r({},i),t),l[i.type]=i},_.changeOrder=function(e,t){var n=h(e);p.splice(n,1),p.splice(t,0,e)},_.resetModifications=function(){p=c.clone(d),l={}},_.types=u,t.exports=_},{"./lib/add-matching-cards-to-results":45,"./lib/card-types":46,"./lib/clone":47,"./lib/find-best-match":48,"./lib/is-valid-input-type":49}],45:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addMatchingCardsToResults=void 0;var r=e("./clone"),o=e("./matches");n.addMatchingCardsToResults=function(e,t,n){var i,a;for(i=0;i<t.patterns.length;i++){var s=t.patterns[i];if(o.matches(e,s)){var c=r.clone(t);a=Array.isArray(s)?String(s[0]).length:String(s).length,e.length>=a&&(c.matchStrength=a),n.push(c);break}}}},{"./clone":47,"./matches":50}],46:[function(e,t,n){"use strict";t.exports={visa:{niceType:"Visa",type:"visa",patterns:[4],gaps:[4,8,12],lengths:[16,18,19],code:{name:"CVV",size:3}},mastercard:{niceType:"Mastercard",type:"mastercard",patterns:[[51,55],[2221,2229],[223,229],[23,26],[270,271],2720],gaps:[4,8,12],lengths:[16],code:{name:"CVC",size:3}},"american-express":{niceType:"American Express",type:"american-express",patterns:[34,37],gaps:[4,10],lengths:[15],code:{name:"CID",size:4}},"diners-club":{niceType:"Diners Club",type:"diners-club",patterns:[[300,305],36,38,39],gaps:[4,10],lengths:[14,16,19],code:{name:"CVV",size:3}},discover:{niceType:"Discover",type:"discover",patterns:[6011,[644,649],65],gaps:[4,8,12],lengths:[16,19],code:{name:"CID",size:3}},jcb:{niceType:"JCB",type:"jcb",patterns:[2131,1800,[3528,3589]],gaps:[4,8,12],lengths:[16,17,18,19],code:{name:"CVV",size:3}},unionpay:{niceType:"UnionPay",type:"unionpay",patterns:[620,[624,626],[62100,62182],[62184,62187],[62185,62197],[62200,62205],[622010,622999],622018,[622019,622999],[62207,62209],[622126,622925],[623,626],6270,6272,6276,[627700,627779],[627781,627799],[6282,6289],6291,6292,810,[8110,8131],[8132,8151],[8152,8163],[8164,8171]],gaps:[4,8,12],lengths:[14,15,16,17,18,19],code:{name:"CVN",size:3}},maestro:{niceType:"Maestro",type:"maestro",patterns:[493698,[5e5,504174],[504176,506698],[506779,508999],[56,59],63,67,6],gaps:[4,8,12],lengths:[12,13,14,15,16,17,18,19],code:{name:"CVC",size:3}},elo:{niceType:"Elo",type:"elo",patterns:[401178,401179,438935,457631,457632,431274,451416,457393,504175,[506699,506778],[509e3,509999],627780,636297,636368,[650031,650033],[650035,650051],[650405,650439],[650485,650538],[650541,650598],[650700,650718],[650720,650727],[650901,650978],[651652,651679],[655e3,655019],[655021,655058]],gaps:[4,8,12],lengths:[16],code:{name:"CVE",size:3}},mir:{niceType:"Mir",type:"mir",patterns:[[2200,2204]],gaps:[4,8,12],lengths:[16,17,18,19],code:{name:"CVP2",size:3}},hiper:{niceType:"Hiper",type:"hiper",patterns:[637095,63737423,63743358,637568,637599,637609,637612],gaps:[4,8,12],lengths:[16],code:{name:"CVC",size:3}},hipercard:{niceType:"Hipercard",type:"hipercard",patterns:[606282],gaps:[4,8,12],lengths:[16],code:{name:"CVC",size:3}}}},{}],47:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.clone=void 0,n.clone=function(e){return e?JSON.parse(JSON.stringify(e)):null}},{}],48:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.findBestMatch=void 0,n.findBestMatch=function(e){return function(e){var t=e.filter((function(e){return e.matchStrength})).length;return t>0&&t===e.length}(e)?e.reduce((function(e,t){return e?Number(e.matchStrength)<Number(t.matchStrength)?t:e:t})):null}},{}],49:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.isValidInputType=void 0,n.isValidInputType=function(e){return"string"==typeof e||e instanceof String}},{}],50:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.matches=void 0,n.matches=function(e,t){return Array.isArray(t)?function(e,t,n){var r=String(t).length,o=e.substr(0,r),i=parseInt(o,10);return t=parseInt(String(t).substr(0,o.length),10),n=parseInt(String(n).substr(0,o.length),10),i>=t&&i<=n}(e,t[0],t[1]):function(e,t){return(t=String(t)).substring(0,e.length)===e.substring(0,t.length)}(e,t)}},{}],51:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Framebus=void 0;var r=e("./lib"),o="undefined"!=typeof window&&window.Promise,i=function(){function e(e){void 0===e&&(e={}),this.origin=e.origin||"*",this.channel=e.channel||"",this.verifyDomain=e.verifyDomain,this.targetFrames=e.targetFrames||[],this.limitBroadcastToFramesArray=Boolean(e.targetFrames),this.isDestroyed=!1,this.listeners=[],this.hasAdditionalChecksForOnListeners=Boolean(this.verifyDomain||this.limitBroadcastToFramesArray)}return e.setPromise=function(t){e.Promise=t},e.target=function(t){return new e(t)},e.prototype.addTargetFrame=function(e){this.limitBroadcastToFramesArray&&this.targetFrames.push(e)},e.prototype.include=function(e){return null!=e&&null!=e.Window&&e.constructor===e.Window&&(r.childWindows.push(e),!0)},e.prototype.target=function(t){return e.target(t)},e.prototype.emit=function(e,t,n){if(this.isDestroyed)return!1;var o=this.origin;if(e=this.namespaceEvent(e),(0,r.isntString)(e))return!1;if((0,r.isntString)(o))return!1;"function"==typeof t&&(n=t,t=void 0);var i=(0,r.packagePayload)(e,o,t,n);return!!i&&(this.limitBroadcastToFramesArray?this.targetFramesAsWindows().forEach((function(e){(0,r.sendMessage)(e,i,o)})):(0,r.broadcast)(i,{origin:o,frame:window.top||window.self}),!0)},e.prototype.emitAsPromise=function(t,n){var r=this;return new e.Promise((function(e,o){r.emit(t,n,(function(t){e(t)}))||o(new Error('Listener not added for "'.concat(t,'"')))}))},e.prototype.on=function(e,t){if(this.isDestroyed)return!1;var n=this,o=this.origin,i=t;return e=this.namespaceEvent(e),!(0,r.subscriptionArgsInvalid)(e,i,o)&&(this.hasAdditionalChecksForOnListeners&&(i=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];n.passesVerifyDomainCheck(this&&this.origin)&&n.hasMatchingTargetFrame(this&&this.source)&&t.apply(void 0,e)}),this.listeners.push({eventName:e,handler:i,originalHandler:t}),r.subscribers[o]=r.subscribers[o]||{},r.subscribers[o][e]=r.subscribers[o][e]||[],r.subscribers[o][e].push(i),!0)},e.prototype.off=function(e,t){var n=t;if(this.isDestroyed)return!1;if(this.verifyDomain)for(var o=0;o<this.listeners.length;o++){var i=this.listeners[o];i.originalHandler===t&&(n=i.handler)}e=this.namespaceEvent(e);var a=this.origin;if((0,r.subscriptionArgsInvalid)(e,n,a))return!1;var s=r.subscribers[a]&&r.subscribers[a][e];if(!s)return!1;for(o=0;o<s.length;o++)if(s[o]===n)return s.splice(o,1),!0;return!1},e.prototype.teardown=function(){if(!this.isDestroyed){this.isDestroyed=!0;for(var e=0;e<this.listeners.length;e++){var t=this.listeners[e];this.off(t.eventName,t.handler)}this.listeners.length=0}},e.prototype.passesVerifyDomainCheck=function(e){return!this.verifyDomain||this.checkOrigin(e)},e.prototype.targetFramesAsWindows=function(){return this.limitBroadcastToFramesArray?this.targetFrames.map((function(e){return e instanceof HTMLIFrameElement?e.contentWindow:e})).filter((function(e){return e})):[]},e.prototype.hasMatchingTargetFrame=function(e){if(!this.limitBroadcastToFramesArray)return!0;var t=this.targetFramesAsWindows().find((function(t){return t===e}));return Boolean(t)},e.prototype.checkOrigin=function(e){var t,n=document.createElement("a");return n.href=location.href,t="https:"===n.protocol?n.host.replace(/:443$/,""):"http:"===n.protocol?n.host.replace(/:80$/,""):n.host,n.protocol+"//"+t===e||!this.verifyDomain||this.verifyDomain(e)},e.prototype.namespaceEvent=function(e){return this.channel?"".concat(this.channel,":").concat(e):e},e.Promise=o,e}();n.Framebus=i},{"./lib":59}],52:[function(e,t,n){"use strict";var r=e("./lib"),o=e("./framebus");(0,r.attach)(),t.exports=o.Framebus},{"./framebus":51,"./lib":59}],53:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.detach=n.attach=void 0;var r=e("./"),o=!1;n.attach=function(){o||"undefined"==typeof window||(o=!0,window.addEventListener("message",r.onMessage,!1))},n.detach=function(){o=!1,window.removeEventListener("message",r.onMessage,!1)}},{"./":59}],54:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.broadcastToChildWindows=void 0;var r=e("./");n.broadcastToChildWindows=function(e,t,n){for(var o=r.childWindows.length-1;o>=0;o--){var i=r.childWindows[o];i.closed?r.childWindows.splice(o,1):n!==i&&(0,r.broadcast)(e,{origin:t,frame:i.top})}}},{"./":59}],55:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.broadcast=void 0;var r=e("./");n.broadcast=function e(t,n){var o,i=0,a=n.origin,s=n.frame;try{for(s.postMessage(t,a),(0,r.hasOpener)(s)&&s.opener.top!==window.top&&e(t,{origin:a,frame:s.opener.top});o=s.frames[i];)e(t,{origin:a,frame:o}),i++}catch(e){}}},{"./":59}],56:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.subscribers=n.childWindows=n.prefix=void 0,n.prefix="/*framebus*/",n.childWindows=[],n.subscribers={}},{}],57:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.dispatch=void 0;var r=e("./");n.dispatch=function(e,t,n,o,i){if(r.subscribers[e]&&r.subscribers[e][t]){var a=[];n&&a.push(n),o&&a.push(o);for(var s=0;s<r.subscribers[e][t].length;s++)r.subscribers[e][t][s].apply(i,a)}}},{"./":59}],58:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.hasOpener=void 0,n.hasOpener=function(e){return e.top===e&&null!=e.opener&&e.opener!==e&&!0!==e.opener.closed}},{}],59:[function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),o(e("./attach"),n),o(e("./broadcast-to-child-windows"),n),o(e("./broadcast"),n),o(e("./constants"),n),o(e("./dispatch"),n),o(e("./has-opener"),n),o(e("./is-not-string"),n),o(e("./message"),n),o(e("./package-payload"),n),o(e("./send-message"),n),o(e("./subscribe-replier"),n),o(e("./subscription-args-invalid"),n),o(e("./types"),n),o(e("./unpack-payload"),n)},{"./attach":53,"./broadcast":55,"./broadcast-to-child-windows":54,"./constants":56,"./dispatch":57,"./has-opener":58,"./is-not-string":60,"./message":61,"./package-payload":62,"./send-message":63,"./subscribe-replier":64,"./subscription-args-invalid":65,"./types":66,"./unpack-payload":67}],60:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.isntString=void 0,n.isntString=function(e){return"string"!=typeof e}},{}],61:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.onMessage=void 0;var r=e("./");n.onMessage=function(e){if(!(0,r.isntString)(e.data)){var t=(0,r.unpackPayload)(e);if(t){var n=t.eventData,o=t.reply;(0,r.dispatch)("*",t.event,n,o,e),(0,r.dispatch)(e.origin,t.event,n,o,e),(0,r.broadcastToChildWindows)(e.data,t.origin,e.source)}}}},{"./":59}],62:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.packagePayload=void 0;var r=e("./");n.packagePayload=function(e,t,n,o){var i,a={event:e,origin:t};"function"==typeof o&&(a.reply=(0,r.subscribeReplier)(o,t)),a.eventData=n;try{i=r.prefix+JSON.stringify(a)}catch(e){throw new Error("Could not stringify event: ".concat(e.message))}return i}},{"./":59}],63:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sendMessage=void 0,n.sendMessage=function(e,t,n){try{e.postMessage(t,n)}catch(e){}}},{}],64:[function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.subscribeReplier=void 0;var o=e("../framebus"),i=r(e("@braintree/uuid"));n.subscribeReplier=function(e,t){var n=(0,i.default)();return o.Framebus.target({origin:t}).on(n,(function r(i,a){e(i,a),o.Framebus.target({origin:t}).off(n,r)})),n}},{"../framebus":51,"@braintree/uuid":39}],65:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.subscriptionArgsInvalid=void 0;var r=e("./");n.subscriptionArgsInvalid=function(e,t,n){return!!(0,r.isntString)(e)||"function"!=typeof t||(0,r.isntString)(n)}},{"./":59}],66:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0})},{}],67:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.unpackPayload=void 0;var r=e("./");n.unpackPayload=function(e){var t;if(e.data.slice(0,r.prefix.length)!==r.prefix)return!1;try{t=JSON.parse(e.data.slice(r.prefix.length))}catch(e){return!1}if(t.reply){var n=e.origin,o=e.source,i=t.reply;t.reply=function(e){if(o){var t=(0,r.packagePayload)(i,n,e);t&&o.postMessage(t,n)}}}return t}},{"./":59}],68:[function(e,t,n){"use strict";var r=setTimeout;function o(e){return Boolean(e&&void 0!==e.length)}function i(){}function a(e){if(!(this instanceof a))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],p(e,this)}function s(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,a._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var r;try{r=n(e._value)}catch(e){return void l(t.promise,e)}c(t.promise,r)}else(1===e._state?c:l)(t.promise,e._value)}))):e._deferreds.push(t)}function c(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof a)return e._state=3,e._value=t,void u(e);if("function"==typeof n)return void p((r=n,o=t,function(){r.apply(o,arguments)}),e)}e._state=1,e._value=t,u(e)}catch(t){l(e,t)}var r,o}function l(e,t){e._state=2,e._value=t,u(e)}function u(e){2===e._state&&0===e._deferreds.length&&a._immediateFn((function(){e._handled||a._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;t<n;t++)s(e,e._deferreds[t]);e._deferreds=null}function d(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function p(e,t){var n=!1;try{e((function(e){n||(n=!0,c(t,e))}),(function(e){n||(n=!0,l(t,e))}))}catch(e){if(n)return;n=!0,l(t,e)}}a.prototype.catch=function(e){return this.then(null,e)},a.prototype.then=function(e,t){var n=new this.constructor(i);return s(this,new d(e,t,n)),n},a.prototype.finally=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))},a.all=function(e){return new a((function(t,n){if(!o(e))return n(new TypeError("Promise.all accepts an array"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var i=r.length;function a(e,o){try{if(o&&("object"==typeof o||"function"==typeof o)){var s=o.then;if("function"==typeof s)return void s.call(o,(function(t){a(e,t)}),n)}r[e]=o,0==--i&&t(r)}catch(e){n(e)}}for(var s=0;s<r.length;s++)a(s,r[s])}))},a.allSettled=function(e){return new this((function(t,n){if(!e||void 0===e.length)return n(new TypeError(typeof e+" "+e+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function i(e,n){if(n&&("object"==typeof n||"function"==typeof n)){var a=n.then;if("function"==typeof a)return void a.call(n,(function(t){i(e,t)}),(function(n){r[e]={status:"rejected",reason:n},0==--o&&t(r)}))}r[e]={status:"fulfilled",value:n},0==--o&&t(r)}for(var a=0;a<r.length;a++)i(a,r[a])}))},a.resolve=function(e){return e&&"object"==typeof e&&e.constructor===a?e:new a((function(t){t(e)}))},a.reject=function(e){return new a((function(t,n){n(e)}))},a.race=function(e){return new a((function(t,n){if(!o(e))return n(new TypeError("Promise.race accepts an array"));for(var r=0,i=e.length;r<i;r++)a.resolve(e[r]).then(t,n)}))},a._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){r(e,0)},a._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},t.exports=a},{}],69:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.isIos=n.isIE9=n.isSamsungBrowser=n.isAndroidChrome=n.isKitKatWebview=void 0;var r="undefined"!=typeof window&&window.navigator&&window.navigator.userAgent,o=e("@braintree/browser-detection/is-android"),i=e("@braintree/browser-detection/is-chrome-os"),a=e("@braintree/browser-detection/is-chrome"),s=e("@braintree/browser-detection/is-ios");n.isIos=s;var c=e("@braintree/browser-detection/is-ie9");n.isIE9=c;var l=/Version\/\d\.\d* Chrome\/\d*\.0\.0\.0/;n.isKitKatWebview=function(e){return void 0===e&&(e=r),o(e)&&l.test(e)},n.isAndroidChrome=function(e){return void 0===e&&(e=r),(o(e)||i(e))&&a(e)},n.isSamsungBrowser=function(e){return void 0===e&&(e=r),/SamsungBrowser/.test(e)||function(e){return!a(e)&&e.indexOf("Samsung")>-1}(e)}},{"@braintree/browser-detection/is-android":22,"@braintree/browser-detection/is-chrome":24,"@braintree/browser-detection/is-chrome-os":23,"@braintree/browser-detection/is-ie9":26,"@braintree/browser-detection/is-ios":30}],70:[function(e,t,n){"use strict";var r=e("./lib/device");t.exports=function(){return!(0,r.isSamsungBrowser)()}},{"./lib/device":69}],71:[function(e,t,n){t.exports=e("./dist/supports-input-formatting")},{"./dist/supports-input-formatting":70}],72:[function(e,t,n){"use strict";var r=e("../lib/braintree-error"),o=e("./errors"),i=e("../lib/assign").assign,a=e("../lib/methods"),s=e("../lib/convert-methods-to-error"),c=e("@braintree/wrap-promise");function l(e){this._client=e.client}l.prototype.getRewardsBalance=function(e){var t,n=e.nonce;return n?(delete(t=i({_meta:{source:"american-express"},paymentMethodNonce:n},e)).nonce,this._client.request({method:"get",endpoint:"payment_methods/amex_rewards_balance",data:t}).catch((function(e){return Promise.reject(new r({type:o.AMEX_NETWORK_ERROR.type,code:o.AMEX_NETWORK_ERROR.code,message:"A network error occurred when getting the American Express rewards balance.",details:{originalError:e}}))}))):Promise.reject(new r({type:o.AMEX_NONCE_REQUIRED.type,code:o.AMEX_NONCE_REQUIRED.code,message:"getRewardsBalance must be called with a nonce."}))},l.prototype.getExpressCheckoutProfile=function(e){return e.nonce?this._client.request({method:"get",endpoint:"payment_methods/amex_express_checkout_cards/"+e.nonce,data:{_meta:{source:"american-express"},paymentMethodNonce:e.nonce}}).catch((function(e){return Promise.reject(new r({type:o.AMEX_NETWORK_ERROR.type,code:o.AMEX_NETWORK_ERROR.code,message:"A network error occurred when getting the American Express Checkout nonce profile.",details:{originalError:e}}))})):Promise.reject(new r({type:o.AMEX_NONCE_REQUIRED.type,code:o.AMEX_NONCE_REQUIRED.code,message:"getExpressCheckoutProfile must be called with a nonce."}))},l.prototype.teardown=function(){return s(this,a(l.prototype)),Promise.resolve()},t.exports=c.wrapPrototype(l)},{"../lib/assign":121,"../lib/braintree-error":124,"../lib/convert-methods-to-error":127,"../lib/methods":155,"./errors":73,"@braintree/wrap-promise":43}],73:[function(e,t,n){"use strict";var r=e("../lib/braintree-error");t.exports={AMEX_NONCE_REQUIRED:{type:r.types.MERCHANT,code:"AMEX_NONCE_REQUIRED"},AMEX_NETWORK_ERROR:{type:r.types.NETWORK,code:"AMEX_NETWORK_ERROR"}}},{"../lib/braintree-error":124}],74:[function(e,t,n){"use strict";var r=e("./american-express"),o=e("../lib/basic-component-verification"),i=e("../lib/create-deferred-client"),a=e("../lib/create-assets-url"),s=e("@braintree/wrap-promise");t.exports={create:s((function(e){var t="American Express";return o.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){return i.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:a.create(e.authorization),name:t})})).then((function(t){return e.client=t,new r(e)}))})),VERSION:"3.100.0"}},{"../lib/basic-component-verification":122,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./american-express":72,"@braintree/wrap-promise":43}],75:[function(e,t,n){"use strict";var r=e("../lib/braintree-error"),o=e("../lib/analytics"),i=e("./errors"),a=e("../lib/methods"),s=e("../lib/convert-methods-to-error"),c=e("@braintree/wrap-promise");function l(e){this._instantiatedWithClient=Boolean(!e.useDeferredClient),this._client=e.client,this._createPromise=e.createPromise,this._client&&this._setMerchantIdentifier()}l.prototype._waitForClient=function(){return this._client?Promise.resolve():this._createPromise.then(function(e){this._client=e,this._setMerchantIdentifier()}.bind(this))},l.prototype._setMerchantIdentifier=function(){var e=this._client.getConfiguration().gatewayConfiguration.applePayWeb;e&&Object.defineProperty(this,"merchantIdentifier",{value:e.merchantIdentifier,configurable:!1,writable:!1})},l.prototype.createPaymentRequest=function(e){return this._instantiatedWithClient?this._createPaymentRequestSynchronously(e):this._waitForClient().then(function(){return this._createPaymentRequestSynchronously(e)}.bind(this))},l.prototype._createPaymentRequestSynchronously=function(e){var t=this._client.getConfiguration().gatewayConfiguration.applePayWeb,n={countryCode:t.countryCode,currencyCode:t.currencyCode,merchantCapabilities:t.merchantCapabilities||["supports3DS"],supportedNetworks:t.supportedNetworks.map((function(e){return"mastercard"===e?"masterCard":e}))};return Object.assign({},n,e)},l.prototype.performValidation=function(e){var t=this;return e&&e.validationURL?this._waitForClient().then((function(){var n={validationUrl:e.validationURL,domainName:e.domainName||window.location.hostname,merchantIdentifier:e.merchantIdentifier||t.merchantIdentifier};return null!=e.displayName&&(n.displayName=e.displayName),t._client.request({method:"post",endpoint:"apple_pay_web/sessions",data:{_meta:{source:"apple-pay"},applePayWebSession:n}})})).then((function(e){return o.sendEvent(t._client,"applepay.performValidation.succeeded"),Promise.resolve(e)})).catch((function(e){return o.sendEvent(t._client,"applepay.performValidation.failed"),"CLIENT_REQUEST_ERROR"===e.code?Promise.reject(new r({type:i.APPLE_PAY_MERCHANT_VALIDATION_FAILED.type,code:i.APPLE_PAY_MERCHANT_VALIDATION_FAILED.code,message:i.APPLE_PAY_MERCHANT_VALIDATION_FAILED.message,details:{originalError:e.details.originalError}})):Promise.reject(new r({type:i.APPLE_PAY_MERCHANT_VALIDATION_NETWORK.type,code:i.APPLE_PAY_MERCHANT_VALIDATION_NETWORK.code,message:i.APPLE_PAY_MERCHANT_VALIDATION_NETWORK.message,details:{originalError:e}}))})):Promise.reject(new r(i.APPLE_PAY_VALIDATION_URL_REQUIRED))},l.prototype.tokenize=function(e){var t=this;return e.token?this._waitForClient().then((function(){return t._client.request({method:"post",endpoint:"payment_methods/apple_payment_tokens",data:{_meta:{source:"apple-pay"},applePaymentToken:Object.assign({},e.token,{paymentData:btoa(JSON.stringify(e.token.paymentData))})}})})).then((function(e){return o.sendEvent(t._client,"applepay.tokenize.succeeded"),Promise.resolve(e.applePayCards[0])})).catch((function(e){return o.sendEvent(t._client,"applepay.tokenize.failed"),Promise.reject(new r({type:i.APPLE_PAY_TOKENIZATION.type,code:i.APPLE_PAY_TOKENIZATION.code,message:i.APPLE_PAY_TOKENIZATION.message,details:{originalError:e}}))})):Promise.reject(new r(i.APPLE_PAY_PAYMENT_TOKEN_REQUIRED))},l.prototype.teardown=function(){return s(this,a(l.prototype)),Promise.resolve()},t.exports=c.wrapPrototype(l)},{"../lib/analytics":119,"../lib/braintree-error":124,"../lib/convert-methods-to-error":127,"../lib/methods":155,"./errors":76,"@braintree/wrap-promise":43}],76:[function(e,t,n){"use strict";var r=e("../lib/braintree-error");t.exports={APPLE_PAY_NOT_ENABLED:{type:r.types.MERCHANT,code:"APPLE_PAY_NOT_ENABLED",message:"Apple Pay is not enabled for this merchant."},APPLE_PAY_VALIDATION_URL_REQUIRED:{type:r.types.MERCHANT,code:"APPLE_PAY_VALIDATION_URL_REQUIRED",message:"performValidation must be called with a validationURL."},APPLE_PAY_MERCHANT_VALIDATION_NETWORK:{type:r.types.NETWORK,code:"APPLE_PAY_MERCHANT_VALIDATION_NETWORK",message:"A network error occurred when validating the Apple Pay merchant."},APPLE_PAY_MERCHANT_VALIDATION_FAILED:{type:r.types.MERCHANT,code:"APPLE_PAY_MERCHANT_VALIDATION_FAILED",message:"Make sure you have registered your domain name in the Braintree Control Panel."},APPLE_PAY_PAYMENT_TOKEN_REQUIRED:{type:r.types.MERCHANT,code:"APPLE_PAY_PAYMENT_TOKEN_REQUIRED",message:"tokenize must be called with a payment token."},APPLE_PAY_TOKENIZATION:{type:r.types.NETWORK,code:"APPLE_PAY_TOKENIZATION",message:"A network error occurred when processing the Apple Pay payment."}}},{"../lib/braintree-error":124}],77:[function(e,t,n){"use strict";var r=e("./apple-pay"),o=e("../lib/analytics"),i=e("../lib/braintree-error"),a=e("../lib/basic-component-verification"),s=e("../lib/create-assets-url"),c=e("../lib/create-deferred-client"),l=e("./errors"),u=e("@braintree/wrap-promise");t.exports={create:u((function(e){var t="Apple Pay";return a.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){var n,a=c.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:s.create(e.authorization),name:t}).then((function(e){return e.getConfiguration().gatewayConfiguration.applePayWeb?(o.sendEvent(e,"applepay.initialized"),e):Promise.reject(new i(l.APPLE_PAY_NOT_ENABLED))}));return e.createPromise=a,n=new r(e),e.useDeferredClient?n:a.then((function(e){return n._client=e,n}))}))})),VERSION:"3.100.0"}},{"../lib/analytics":119,"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./apple-pay":75,"./errors":76,"@braintree/wrap-promise":43}],78:[function(e,t,n){"use strict";var r=e("./constants").BRAINTREE_VERSION,o=e("./request/graphql"),i=e("./request"),a=e("../lib/is-verified-domain"),s=e("../lib/braintree-error"),c=e("../lib/convert-to-braintree-error"),l=e("./get-configuration").getConfiguration,u=e("../lib/create-authorization-data"),d=e("../lib/add-metadata"),p=e("@braintree/wrap-promise"),f=e("../lib/once"),h=e("../lib/deferred"),_=e("../lib/assign").assign,m=e("../lib/analytics"),E=e("./errors"),y=e("../lib/constants").VERSION,g=e("../lib/constants").GRAPHQL_URLS,v=e("../lib/methods"),A=e("../lib/convert-methods-to-error"),b=e("../lib/assets"),T=e("../lib/constants").FRAUDNET_FNCLS,N=e("../lib/constants").FRAUDNET_SOURCE,I=e("../lib/constants").FRAUDNET_URL,O={};function P(e){var t,n;if(e=e||{},t=JSON.stringify(e),!(n=e.gatewayConfiguration))throw new s(E.CLIENT_MISSING_GATEWAY_CONFIGURATION);if(["assetsUrl","clientApiUrl","configUrl"].forEach((function(e){if(e in n&&!a(n[e]))throw new s({type:E.CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN.type,code:E.CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN.code,message:e+" property is on an invalid domain."})})),this.getConfiguration=function(){return JSON.parse(t)},this._request=i,this._configuration=this.getConfiguration(),this._clientApiBaseUrl=n.clientApiUrl+"/v1/",n.graphQL){if(!a(n.graphQL.url))throw new s({type:E.CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN.type,code:E.CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN.code,message:"graphQL.url property is on an invalid domain."});this._graphQL=new o({graphQL:n.graphQL})}}P.initialize=function(e){var t,n,r=O[e.authorization];if(r)return m.sendEvent(r,"custom.client.load.cached"),r;try{n=u(e.authorization)}catch(e){return Promise.reject(new s(E.CLIENT_INVALID_AUTHORIZATION))}return r=l(n).then((function(n){return e.debug&&(n.isDebug=!0),n.authorization=e.authorization,t=new P(n)})),O[e.authorization]=r,m.sendEvent(r,"custom.client.load.initialized"),r.then((function(e){return m.sendEvent(t,"custom.client.load.succeeded"),e})).catch((function(t){return delete O[e.authorization],Promise.reject(t)}))},P.clearCache=function(){O={}},P.prototype._findOrCreateFraudnetJSON=function(e){var t,n,r,o,i=document.querySelector('script[fncls="'+T+'"]');i||((i=document.body.appendChild(document.createElement("script"))).type="application/json",i.setAttribute("fncls",T)),t=this.getConfiguration(),n={rda_tenant:"bt_card",mid:t.gatewayConfiguration.merchantId},(r=t.authorizationFingerprint)&&r.split("&").forEach((function(e){var t=e.split("=");"customer_id"===t[0]&&t.length>1&&(n.cid=t[1])})),o={f:e.substr(0,32),fp:n,bu:!1,s:N},i.text=JSON.stringify(o)},P.prototype.request=function(e,t){var n=this,o=new Promise((function(t,o){var i,a,l,u,p,f=Boolean("payment_methods/credit_cards"===e.endpoint&&n.getConfiguration().gatewayConfiguration.creditCards.collectDeviceData);if("graphQLApi"!==e.api&&(e.method?e.endpoint||(i="options.endpoint"):i="options.method"),i)throw new s({type:E.CLIENT_OPTION_REQUIRED.type,code:E.CLIENT_OPTION_REQUIRED.code,message:i+" is required when making a request."});if(a="api"in e?e.api:"clientApi",u={method:e.method,graphQL:n._graphQL,timeout:e.timeout,metadata:n._configuration.analyticsMetadata},"clientApi"===a)l=n._clientApiBaseUrl,u.data=d(n._configuration,e.data);else{if("graphQLApi"!==a)throw new s({type:E.CLIENT_OPTION_INVALID.type,code:E.CLIENT_OPTION_INVALID.code,message:"options.api is invalid."});l=g[n._configuration.gatewayConfiguration.environment],e.endpoint="",u.method="post",u.data=_({clientSdkMetadata:{platform:n._configuration.analyticsMetadata.platform,source:n._configuration.analyticsMetadata.source,integration:n._configuration.analyticsMetadata.integration,sessionId:n._configuration.analyticsMetadata.sessionId,version:y}},e.data),u.headers={Authorization:"Bearer "+((p=n._configuration).authorizationFingerprint||p.authorization),"Braintree-Version":r}}u.url=l+e.endpoint,u.sendAnalyticsEvent=function(e){m.sendEvent(n,e)},n._request(u,(function(e,r,i){var l,u;(u=function(e,t){var n;if(-1===e?n=new s(E.CLIENT_REQUEST_TIMEOUT):401===e?n=new s(E.CLIENT_AUTHORIZATION_INVALID):403===e?n=new s(E.CLIENT_AUTHORIZATION_INSUFFICIENT):429===e?n=new s(E.CLIENT_RATE_LIMITED):e>=500?n=new s(E.CLIENT_GATEWAY_NETWORK):(e<200||e>=400)&&(n=c(t,{type:E.CLIENT_REQUEST_ERROR.type,code:E.CLIENT_REQUEST_ERROR.code,message:E.CLIENT_REQUEST_ERROR.message})),n)return n.details=n.details||{},n.details.httpStatus=e,n}(i,e))?o(u):"graphQLApi"===a&&r.errors?o(c(r.errors,{type:E.CLIENT_GRAPHQL_REQUEST_ERROR.type,code:E.CLIENT_GRAPHQL_REQUEST_ERROR.code,message:E.CLIENT_GRAPHQL_REQUEST_ERROR.message})):(l=_({_httpStatus:i},r),f&&l.creditCards&&l.creditCards.length>0&&(n._findOrCreateFraudnetJSON(l.creditCards[0].nonce),b.loadScript({src:I,forceScriptReload:!0})),t(l))}))}));return"function"==typeof t?(t=f(h(t)),void o.then((function(e){t(null,e,e._httpStatus)})).catch((function(e){var n=e&&e.details&&e.details.httpStatus;t(e,null,n)}))):o},P.prototype.toJSON=function(){return this.getConfiguration()},P.prototype.getVersion=function(){return y},P.prototype.teardown=p((function(){return delete O[this.getConfiguration().authorization],A(this,v(P.prototype)),Promise.resolve()})),t.exports=P},{"../lib/add-metadata":118,"../lib/analytics":119,"../lib/assets":120,"../lib/assign":121,"../lib/braintree-error":124,"../lib/constants":126,"../lib/convert-methods-to-error":127,"../lib/convert-to-braintree-error":128,"../lib/create-authorization-data":130,"../lib/deferred":132,"../lib/is-verified-domain":153,"../lib/methods":155,"../lib/once":156,"./constants":79,"./errors":80,"./get-configuration":81,"./request":92,"./request/graphql":90,"@braintree/wrap-promise":43}],79:[function(e,t,n){"use strict";t.exports={BRAINTREE_VERSION:"2018-05-10"}},{}],80:[function(e,t,n){"use strict";var r=e("../lib/braintree-error");t.exports={CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN:{type:r.types.MERCHANT,code:"CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN"},CLIENT_OPTION_REQUIRED:{type:r.types.MERCHANT,code:"CLIENT_OPTION_REQUIRED"},CLIENT_OPTION_INVALID:{type:r.types.MERCHANT,code:"CLIENT_OPTION_INVALID"},CLIENT_MISSING_GATEWAY_CONFIGURATION:{type:r.types.INTERNAL,code:"CLIENT_MISSING_GATEWAY_CONFIGURATION",message:"Missing gatewayConfiguration."},CLIENT_INVALID_AUTHORIZATION:{type:r.types.MERCHANT,code:"CLIENT_INVALID_AUTHORIZATION",message:"Authorization is invalid. Make sure your client token or tokenization key is valid."},CLIENT_GATEWAY_NETWORK:{type:r.types.NETWORK,code:"CLIENT_GATEWAY_NETWORK",message:"Cannot contact the gateway at this time."},CLIENT_REQUEST_TIMEOUT:{type:r.types.NETWORK,code:"CLIENT_REQUEST_TIMEOUT",message:"Request timed out waiting for a reply."},CLIENT_REQUEST_ERROR:{type:r.types.NETWORK,code:"CLIENT_REQUEST_ERROR",message:"There was a problem with your request."},CLIENT_GRAPHQL_REQUEST_ERROR:{type:r.types.NETWORK,code:"CLIENT_GRAPHQL_REQUEST_ERROR",message:"There was a problem with your request."},CLIENT_RATE_LIMITED:{type:r.types.MERCHANT,code:"CLIENT_RATE_LIMITED",message:"You are being rate-limited; please try again in a few minutes."},CLIENT_AUTHORIZATION_INSUFFICIENT:{type:r.types.MERCHANT,code:"CLIENT_AUTHORIZATION_INSUFFICIENT",message:"The authorization used has insufficient privileges."},CLIENT_AUTHORIZATION_INVALID:{type:r.types.MERCHANT,code:"CLIENT_AUTHORIZATION_INVALID",message:"Either the client token has expired and a new one should be generated or the tokenization key has been deactivated or deleted."}}},{"../lib/braintree-error":124}],81:[function(e,t,n){"use strict";var r=e("../lib/braintree-error"),o=e("@braintree/wrap-promise"),i=e("./request"),a=e("@braintree/uuid"),s=e("../lib/constants"),c=e("./errors"),l=e("./request/graphql"),u=e("../lib/constants").GRAPHQL_URLS,d=e("../lib/is-date-string-before-or-on"),p=e("./constants").BRAINTREE_VERSION;t.exports={getConfiguration:o((function(e){return new Promise((function(t,n){var o,f,h,_,m=a(),E={merchantAppId:window.location.host,platform:s.PLATFORM,sdkVersion:s.VERSION,source:s.SOURCE,integration:s.INTEGRATION,integrationType:s.INTEGRATION,sessionId:m};f=e.attrs,h=e.configUrl,f._meta=E,f.braintreeLibraryVersion=s.BRAINTREE_LIBRARY_VERSION,f.configVersion="3",_={url:h,method:"GET",data:f},f.authorizationFingerprint&&e.graphQL?(d(e.graphQL.date,p)&&(_.graphQL=new l({graphQL:{url:e.graphQL.url,features:["configuration"]}})),_.metadata=E):f.tokenizationKey&&(_.graphQL=new l({graphQL:{url:u[e.environment],features:["configuration"]}}),_.metadata=E),i(_,(function(e,i,a){var s;if(e)return s=403===a?c.CLIENT_AUTHORIZATION_INSUFFICIENT:401===a?c.CLIENT_AUTHORIZATION_INVALID:c.CLIENT_GATEWAY_NETWORK,void n(new r({type:s.type,code:s.code,message:s.message,details:{originalError:e}}));o={authorizationType:f.tokenizationKey?"TOKENIZATION_KEY":"CLIENT_TOKEN",authorizationFingerprint:f.authorizationFingerprint,analyticsMetadata:E,gatewayConfiguration:i},t(o)}))}))}))}},{"../lib/braintree-error":124,"../lib/constants":126,"../lib/is-date-string-before-or-on":151,"./constants":79,"./errors":80,"./request":92,"./request/graphql":90,"@braintree/uuid":39,"@braintree/wrap-promise":43}],82:[function(e,t,n){"use strict";var r=e("../lib/braintree-error"),o=e("./client"),i=e("@braintree/wrap-promise"),a=e("../lib/errors");t.exports={create:i((function(e){return e.authorization?o.initialize(e):Promise.reject(new r({type:a.INSTANTIATION_OPTION_REQUIRED.type,code:a.INSTANTIATION_OPTION_REQUIRED.code,message:"options.authorization is required when instantiating a client."}))})),VERSION:"3.100.0"}},{"../lib/braintree-error":124,"../lib/errors":135,"./client":78,"@braintree/wrap-promise":43}],83:[function(e,t,n){"use strict";var r=e("../../lib/querystring"),o=e("../../lib/assign").assign,i=e("./prep-body"),a=e("./parse-body"),s=e("./xhr"),c=s.isAvailable,l=e("./graphql/request"),u=e("./default-request"),d=1,p=408;function f(e,t,n){var h,_,m,E,y,g,v,A=e.url,b=e.graphQL,T=e.timeout,N=s.getRequestObject(),I=n,O=Boolean(b&&b.isGraphQLRequest(A,e.data));e.headers=o({"Content-Type":"application/json"},e.headers),A=(m=O?new l(e):new u(e)).getUrl(),E=m.getBody(),y=m.getMethod(),g=m.getHeaders(),"GET"===y&&(A=r.queryify(A,E),E=null),c?N.onreadystatechange=function(){if(4===N.readyState){if(0===N.status&&O)return delete e.graphQL,void f(e,t,n);if(v=a(N.responseText),_=m.adaptResponseBody(v),(h=m.determineStatus(N.status,v))>=400||h<200){if(O&&function(e){var t=!e.data&&e.errors&&e.errors[0]&&e.errors[0].extensions&&e.errors[0].extensions.errorClass;return"UNKNOWN"===t||"INTERNAL"===t}(v))return delete e.graphQL,void f(e,t,n);if(t<d&&function(e){return!e||e===p}(h))return t++,void f(e,t,n);I(_||"error",null,h||500)}else I(null,_,h)}}:(e.headers&&(A=r.queryify(A,g)),N.onload=function(){I(null,a(N.responseText),N.status)},N.onerror=function(){I("error",null,500)},N.onprogress=function(){},N.ontimeout=function(){I("timeout",null,-1)});try{N.open(y,A,!0)}catch(r){if(!O)throw r;return delete e.graphQL,void f(e,t,n)}N.timeout=T,c&&Object.keys(g).forEach((function(e){N.setRequestHeader(e,g[e])}));try{N.send(i(y,E))}catch(e){}}t.exports={request:function(e,t){f(e,0,t)}}},{"../../lib/assign":121,"../../lib/querystring":157,"./default-request":84,"./graphql/request":91,"./parse-body":93,"./prep-body":94,"./xhr":95}],84:[function(e,t,n){"use strict";function r(e){this._url=e.url,this._data=e.data,this._method=e.method,this._headers=e.headers}r.prototype.getUrl=function(){return this._url},r.prototype.getBody=function(){return this._data},r.prototype.getMethod=function(){return this._method},r.prototype.getHeaders=function(){return this._headers},r.prototype.adaptResponseBody=function(e){return e},r.prototype.determineStatus=function(e){return e},t.exports=r},{}],85:[function(e,t,n){"use strict";var r=e("./error"),o=e("../../../../lib/assign").assign,i={creditCard:{AMERICAN_EXPRESS:"American Express",DISCOVER:"Discover",INTERNATIONAL_MAESTRO:"Maestro",JCB:"JCB",MASTERCARD:"MasterCard",SOLO:"Solo",UK_MAESTRO:"UK Maestro",UNION_PAY:"UnionPay",VISA:"Visa",ELO:"Elo",HIPER:"Hiper",HIPERCARD:"Hipercard"},applePayWeb:{VISA:"visa",MASTERCARD:"mastercard",DISCOVER:"discover",AMERICAN_EXPRESS:"amex",INTERNATIONAL_MAESTRO:"maestro",ELO:"elo"},visaCheckout:{VISA:"Visa",MASTERCARD:"MasterCard",DISCOVER:"Discover",AMERICAN_EXPRESS:"American Express"},googlePay:{VISA:"visa",MASTERCARD:"mastercard",DISCOVER:"discover",AMERICAN_EXPRESS:"amex",INTERNATIONAL_MAESTRO:"maestro",ELO:"elo"},masterpass:{VISA:"visa",MASTERCARD:"master",DISCOVER:"discover",AMERICAN_EXPRESS:"amex",DINERS:"diners",INTERNATIONAL_MAESTRO:"maestro",JCB:"jcb"}};function a(e,t){return e.reduce((function(e,n){return t.hasOwnProperty(n)?e.concat(t[n]):e}),[])}t.exports=function(e,t){return e.data&&!e.errors?function(e,t){var n,r=e.data.clientConfiguration;return n={environment:r.environment.toLowerCase(),clientApiUrl:r.clientApiUrl,assetsUrl:r.assetsUrl,analytics:{url:r.analyticsUrl},merchantId:r.merchantId,venmo:"off"},r.supportedFeatures&&(n.graphQL={url:t._graphQL._config.url,features:r.supportedFeatures.map((function(e){return e.toLowerCase()}))}),r.braintreeApi&&(n.braintreeApi=r.braintreeApi),r.applePayWeb&&(n.applePayWeb=r.applePayWeb,n.applePayWeb.supportedNetworks=a(r.applePayWeb.supportedCardBrands,i.applePayWeb),delete n.applePayWeb.supportedCardBrands),r.ideal&&(n.ideal=r.ideal),r.kount&&(n.kount={kountMerchantId:r.kount.merchantId}),r.creditCard?(n.challenges=r.creditCard.challenges.map((function(e){return e.toLowerCase()})),n.creditCards={supportedCardTypes:a(r.creditCard.supportedCardBrands,i.creditCard)},n.threeDSecureEnabled=r.creditCard.threeDSecureEnabled,n.threeDSecure=r.creditCard.threeDSecure):(n.challenges=[],n.creditCards={supportedCardTypes:[]},n.threeDSecureEnabled=!1),r.googlePay&&(n.androidPay={displayName:r.googlePay.displayName,enabled:!0,environment:r.googlePay.environment.toLowerCase(),googleAuthorizationFingerprint:r.googlePay.googleAuthorization,paypalClientId:r.googlePay.paypalClientId,supportedNetworks:a(r.googlePay.supportedCardBrands,i.googlePay)}),r.venmo&&(n.payWithVenmo={merchantId:r.venmo.merchantId,accessToken:r.venmo.accessToken,environment:r.venmo.environment.toLowerCase(),enrichedCustomerDataEnabled:r.venmo.enrichedCustomerDataEnabled}),r.paypal?(n.paypalEnabled=!0,n.paypal=o({},r.paypal),n.paypal.currencyIsoCode=n.paypal.currencyCode,n.paypal.environment=n.paypal.environment.toLowerCase(),delete n.paypal.currencyCode):n.paypalEnabled=!1,r.unionPay&&(n.unionPay={enabled:!0,merchantAccountId:r.unionPay.merchantAccountId}),r.visaCheckout&&(n.visaCheckout={apikey:r.visaCheckout.apiKey,encryptionKey:r.visaCheckout.encryptionKey,externalClientId:r.visaCheckout.externalClientId,supportedCardTypes:a(r.visaCheckout.supportedCardBrands,i.visaCheckout)}),r.masterpass&&(n.masterpass={merchantCheckoutId:r.masterpass.merchantCheckoutId,supportedNetworks:a(r.masterpass.supportedCardBrands,i.masterpass)}),r.usBankAccount&&(n.usBankAccount={routeId:r.usBankAccount.routeId,plaid:{publicKey:r.usBankAccount.plaidPublicKey}}),n}(e,t):r(e)}},{"../../../../lib/assign":121,"./error":87}],86:[function(e,t,n){"use strict";var r=e("./error"),o={AMERICAN_EXPRESS:"American Express",DINERS:"Discover",DISCOVER:"Discover",ELO:"Elo",HIPER:"Hiper",HIPERCARD:"Hipercard",INTERNATIONAL_MAESTRO:"Maestro",JCB:"JCB",MASTERCARD:"MasterCard",UK_MAESTRO:"Maestro",UNION_PAY:"UnionPay",VISA:"Visa"},i={YES:"Yes",NO:"No",UNKNOWN:"Unknown"},a={PSDTWO:"psd2"};t.exports=function(e){return e.data&&!e.errors?(s=e.data.tokenizeCreditCard,c=s.creditCard,l=c.last4?c.last4.substr(2,4):"",(u=c.binData)&&(["commercial","debit","durbinRegulated","healthcare","payroll","prepaid"].forEach((function(e){u[e]?u[e]=i[u[e]]:u[e]="Unknown"})),["issuingBank","countryOfIssuance","productId"].forEach((function(e){u[e]||(u[e]="Unknown")}))),t={creditCards:[{binData:u,consumed:!1,description:l?"ending in "+l:"",nonce:s.token,details:{cardholderName:c.cardholderName,expirationMonth:c.expirationMonth,expirationYear:c.expirationYear,bin:c.bin||"",cardType:o[c.brandCode]||"Unknown",lastFour:c.last4||"",lastTwo:l},type:"CreditCard",threeDSecureInfo:null}]},s.authenticationInsight&&(n=s.authenticationInsight.customerAuthenticationRegulationEnvironment,t.creditCards[0].authenticationInsight={regulationEnvironment:a[n]||n.toLowerCase()}),t):r(e);var t,n,s,c,l,u}},{"./error":87}],87:[function(e,t,n){"use strict";function r(e,t,n){var o,i=t.extensions.legacyCode,a=e[0];1!==e.length?(n.forEach((function(e){e.field===a&&(o=e)})),o||(o={field:a,fieldErrors:[]},n.push(o)),r(e.slice(1),t,o.fieldErrors)):n.push({code:i,field:a,message:t.message})}function o(e){return{creditCard:"Credit card is invalid"}[e[0].field]}t.exports=function(e){var t=e.errors&&e.errors[0]&&e.errors[0].extensions&&e.errors[0].extensions.errorClass;return"VALIDATION"===t?function(e){var t=function(e){var t=[];return e.forEach((function(e){e.extensions&&e.extensions.inputPath&&r(e.extensions.inputPath.slice(1),e,t)})),t}(e.errors);return 0===t.length?{error:{message:e.errors[0].message}}:{error:{message:o(t)},fieldErrors:t}}(e):t?function(e){return{error:{message:e.errors[0].message},fieldErrors:[]}}(e):{error:{message:"There was a problem serving your request"},fieldErrors:[]}}},{}],88:[function(e,t,n){"use strict";t.exports=function(){return{query:"query ClientConfiguration {   clientConfiguration {     analyticsUrl     environment     merchantId     assetsUrl     clientApiUrl     creditCard {       supportedCardBrands       challenges       threeDSecureEnabled       threeDSecure {         cardinalAuthenticationJWT       }     }     applePayWeb {       countryCode       currencyCode       merchantIdentifier       supportedCardBrands     }     googlePay {       displayName       supportedCardBrands       environment       googleAuthorization       paypalClientId     }     ideal {       routeId       assetsUrl     }     kount {       merchantId     }     masterpass {       merchantCheckoutId       supportedCardBrands     }     paypal {       displayName       clientId       assetsUrl       environment       environmentNoNetwork       unvettedMerchant       braintreeClientId       billingAgreementsEnabled       merchantAccountId       currencyCode       payeeEmail     }     unionPay {       merchantAccountId     }     usBankAccount {       routeId       plaidPublicKey     }     venmo {       merchantId       accessToken       environment       enrichedCustomerDataEnabled    }     visaCheckout {       apiKey       externalClientId       supportedCardBrands     }     braintreeApi {       accessToken       url     }     supportedFeatures   } }",operationName:"ClientConfiguration"}}},{}],89:[function(e,t,n){"use strict";var r=e("../../../../lib/assign").assign;function o(e,t){var n=e.creditCard,o=n&&n.billingAddress,i=n&&n.expirationDate,a=n&&(n.expirationMonth||i&&i.split("/")[0].trim()),s=n&&(n.expirationYear||i&&i.split("/")[1].trim()),c={input:{creditCard:{number:n&&n.number,expirationMonth:a,expirationYear:s,cvv:n&&n.cvv,cardholderName:n&&n.cardholderName},options:{}}};return t.hasAuthenticationInsight&&(c.authenticationInsightInput={merchantAccountId:e.merchantAccountId}),o&&(c.input.creditCard.billingAddress=o),c.input=function(e,t){var n;return e.creditCard&&e.creditCard.options&&"boolean"==typeof e.creditCard.options.validate?n=e.creditCard.options.validate:e.authorizationFingerprint&&e.tokenizationKey||e.authorizationFingerprint?n=!0:e.tokenizationKey&&(n=!1),"boolean"==typeof n&&(t.options=r({validate:n},t.options)),t}(e,c.input),c}t.exports=function(e){var t,n,r,i={hasAuthenticationInsight:Boolean(e.authenticationInsight&&e.merchantAccountId)};return{query:(t=i,n=t.hasAuthenticationInsight,r="mutation TokenizeCreditCard($input: TokenizeCreditCardInput!",n&&(r+=", $authenticationInsightInput: AuthenticationInsightInput!"),r+=") {   tokenizeCreditCard(input: $input) {     token     creditCard {       bin       brandCode       last4       cardholderName       expirationMonth      expirationYear      binData {         prepaid         healthcare         debit         durbinRegulated         commercial         payroll         issuingBank         countryOfIssuance         productId       }     } ",n&&(r+="    authenticationInsight(input: $authenticationInsightInput) {      customerAuthenticationRegulationEnvironment    }"),r+"  } }"),variables:o(e,i),operationName:"TokenizeCreditCard"}}},{"../../../../lib/assign":121}],90:[function(e,t,n){"use strict";var r={tokenize_credit_cards:"payment_methods/credit_cards",configuration:"configuration"},o=["creditCard.options.unionPayEnrollment"];function i(e){this._config=e.graphQL}i.prototype.getGraphQLEndpoint=function(){return this._config.url},i.prototype.isGraphQLRequest=function(e,t){var n,i=this.getClientApiPath(e);return!(!this._isGraphQLEnabled()||!i)&&(n=this._config.features.some((function(e){return r[e]===i})),!function(e){return o.some((function(t){return void 0!==t.split(".").reduce((function(e,t){return e&&e[t]}),e)}))}(t)&&n)},i.prototype.getClientApiPath=function(e){var t,n=e.split("/client_api/v1/");return n.length>1&&(t=n[1].split("?")[0]),t},i.prototype._isGraphQLEnabled=function(){return Boolean(this._config)},t.exports=i},{}],91:[function(e,t,n){"use strict";var r=e("../../constants").BRAINTREE_VERSION,o=e("../../../lib/assign").assign,i=e("../../../lib/snake-case-to-camel-case"),a=e("./generators/credit-card-tokenization"),s=e("./adapters/credit-card-tokenization"),c=e("./generators/configuration"),l=e("./adapters/configuration"),u={"payment_methods/credit_cards":a,configuration:c},d={"payment_methods/credit_cards":s,configuration:l};function p(e){var t=e.graphQL.getClientApiPath(e.url);this._graphQL=e.graphQL,this._data=e.data,this._method=e.method,this._headers=e.headers,this._clientSdkMetadata={source:e.metadata.source,integration:e.metadata.integration,sessionId:e.metadata.sessionId},this._sendAnalyticsEvent=e.sendAnalyticsEvent||Function.prototype,this._generator=u[t],this._adapter=d[t],this._sendAnalyticsEvent("graphql.init")}function f(e){var t={};return Object.keys(e).forEach((function(n){var r=i(n);"object"==typeof e[n]?t[r]=f(e[n]):"number"==typeof e[n]?t[r]=String(e[n]):t[r]=e[n]})),t}p.prototype.getUrl=function(){return this._graphQL.getGraphQLEndpoint()},p.prototype.getBody=function(){var e=f(this._data),t=this._generator(e),n=o({clientSdkMetadata:this._clientSdkMetadata},t);return JSON.stringify(n)},p.prototype.getMethod=function(){return"POST"},p.prototype.getHeaders=function(){var e,t;return this._data.authorizationFingerprint?(this._sendAnalyticsEvent("graphql.authorization-fingerprint"),e=this._data.authorizationFingerprint):(this._sendAnalyticsEvent("graphql.tokenization-key"),e=this._data.tokenizationKey),t={Authorization:"Bearer "+e,"Braintree-Version":r},o({},this._headers,t)},p.prototype.adaptResponseBody=function(e){return this._adapter(e,this)},p.prototype.determineStatus=function(e,t){var n,r;return 200===e?(r=t.errors&&t.errors[0]&&t.errors[0].extensions&&t.errors[0].extensions.errorClass,n=t.data&&!t.errors?200:"VALIDATION"===r?422:"AUTHORIZATION"===r?403:"AUTHENTICATION"===r?401:function(e,t){return!e&&t.errors[0].message}(r,t)?403:500):n=e||500,this._sendAnalyticsEvent("graphql.status."+e),this._sendAnalyticsEvent("graphql.determinedStatus."+n),n},t.exports=p},{"../../../lib/assign":121,"../../../lib/snake-case-to-camel-case":159,"../../constants":79,"./adapters/configuration":85,"./adapters/credit-card-tokenization":86,"./generators/configuration":88,"./generators/credit-card-tokenization":89}],92:[function(e,t,n){"use strict";var r=e("../../lib/once"),o=e("./ajax-driver");t.exports=function(e,t){t=r(t||Function.prototype),e.method=(e.method||"GET").toUpperCase(),e.timeout=null==e.timeout?6e4:e.timeout,e.data=e.data||{},o.request(e,t)}},{"../../lib/once":156,"./ajax-driver":83}],93:[function(e,t,n){"use strict";t.exports=function(e){try{e=JSON.parse(e)}catch(e){}return e}},{}],94:[function(e,t,n){"use strict";t.exports=function(e,t){if("string"!=typeof e)throw new Error("Method must be a string");return"get"!==e.toLowerCase()&&null!=t&&(t="string"==typeof t?t:JSON.stringify(t)),t}},{}],95:[function(e,t,n){"use strict";var r="undefined"!=typeof window&&window.XMLHttpRequest&&"withCredentials"in new window.XMLHttpRequest;t.exports={isAvailable:r,getRequestObject:function(){return r?new window.XMLHttpRequest:new window.XDomainRequest}}},{}],96:[function(e,t,n){"use strict";var r=e("../lib/braintree-error");t.exports={DATA_COLLECTOR_KOUNT_NOT_ENABLED:{type:r.types.MERCHANT,code:"DATA_COLLECTOR_KOUNT_NOT_ENABLED",message:"Kount is not enabled for this merchant."},DATA_COLLECTOR_KOUNT_ERROR:{type:r.types.MERCHANT,code:"DATA_COLLECTOR_KOUNT_ERROR"},DATA_COLLECTOR_REQUIRES_CREATE_OPTIONS:{type:r.types.MERCHANT,code:"DATA_COLLECTOR_REQUIRES_CREATE_OPTIONS",message:"Data Collector must be created with Kount and/or PayPal."}}},{"../lib/braintree-error":124}],97:[function(e,t,n){"use strict";var r,o=e("../lib/constants").FRAUDNET_FNCLS,i=e("../lib/constants").FRAUDNET_SOURCE,a=e("../lib/constants").FRAUDNET_URL,s=e("../lib/assets").loadScript;function c(){}function l(e){e&&e.parentNode&&e.parentNode.removeChild(e)}c.prototype.initialize=function(e){var t=e.environment,n=this;return this.sessionId=e.sessionId||function(){var e,t="";for(e=0;e<32;e++)t+=Math.floor(16*Math.random()).toString(16);return t}(),e.sessionId||(r=this.sessionId),this._beaconId="https://b.stats.paypal.com/counter.cgi?i=127.0.0.1&p="+this.sessionId+"&t="+(new Date).getTime()/1e3+"&a=14",this._parameterBlock=function(e,t,n){var r=document.body.appendChild(document.createElement("script")),a={f:e,s:i,b:t};return"production"!==n&&(a.sandbox=!0),r.type="application/json",r.setAttribute("fncls",o),r.text=JSON.stringify(a),r}(this.sessionId,this._beaconId,t),s({src:a}).then((function(e){return n._thirdPartyBlock=e,n})).catch((function(){return null}))},c.prototype.teardown=function(){l(document.querySelector('iframe[title="ppfniframe"]')),l(document.querySelector('iframe[title="pbf"]')),l(this._parameterBlock),l(this._thirdPartyBlock)},t.exports={setup:function(e){var t=new c;return!(e=e||{}).sessionId&&r?(t.sessionId=r,Promise.resolve(t)):t.initialize(e)},clearSessionIdCache:function(){r=null}}},{"../lib/assets":120,"../lib/constants":126}],98:[function(e,t,n){"use strict";var r=e("./kount"),o=e("./fraudnet"),i=e("../lib/braintree-error"),a=e("../lib/basic-component-verification"),s=e("../lib/create-deferred-client"),c=e("../lib/create-assets-url"),l=e("../lib/methods"),u=e("../lib/convert-methods-to-error"),d=e("@braintree/wrap-promise"),p=e("./errors");t.exports={create:d((function(e){var t,n="Data Collector",f={_instances:[]};return a.verify({name:n,client:e.client,authorization:e.authorization}).then((function(){return f._instantiatedWithAClient=!e.useDeferredClient,f._createPromise=s.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:c.create(e.authorization),name:n}).then((function(n){var o,a=n.getConfiguration();if(!0===e.kount&&a.gatewayConfiguration.kount){try{o=r.setup({environment:a.gatewayConfiguration.environment,merchantId:a.gatewayConfiguration.kount.kountMerchantId})}catch(e){return Promise.reject(new i({type:p.DATA_COLLECTOR_KOUNT_ERROR.type,code:p.DATA_COLLECTOR_KOUNT_ERROR.code,message:e.message}))}t=o.deviceData,f._instances.push(o)}else t={};return Promise.resolve(n)})).then((function(n){return o.setup({sessionId:e.riskCorrelationId||e.clientMetadataId||e.correlationId,environment:n.getConfiguration().gatewayConfiguration.environment}).then((function(e){e&&(t.correlation_id=e.sessionId,f._instances.push(e))}))})).then((function(){return 0===f._instances.length?Promise.reject(new i(p.DATA_COLLECTOR_REQUIRES_CREATE_OPTIONS)):(f.deviceData=JSON.stringify(t),f.rawDeviceData=t,f)})),f.teardown=function(e){return d((function(){return e._createPromise.then((function(){e._instances.forEach((function(e){e&&e.teardown()})),u(e,l(e))}))}))}(f),f.getDeviceData=function(e){return d((function(t){return t=t||{},e._createPromise.then((function(){return t.raw?Promise.resolve(e.rawDeviceData):Promise.resolve(e.deviceData)}))}))}(f),f._instantiatedWithAClient?f._createPromise:f}))})),VERSION:"3.100.0"}},{"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/convert-methods-to-error":127,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"../lib/methods":155,"./errors":96,"./fraudnet":97,"./kount":99,"@braintree/wrap-promise":43}],99:[function(e,t,n){"use strict";var r=e("./vendor/sjcl"),o=e("../lib/camel-case-to-snake-case"),i="https://assets.qa.braintreepayments.com/data",a={development:i,qa:i,sandbox:"https://assets.braintreegateway.com/sandbox/data",production:"https://assets.braintreegateway.com/data"},s={};function c(e){var t=c.getCachedDeviceData(e.merchantId);if(t)return this.deviceData=t,void(this._isCached=!0);this._currentEnvironment=this._initializeEnvironment(e),r.random.startCollectors(),this._deviceSessionId=this._generateDeviceSessionId(),this.deviceData=this._getDeviceData(),c.setCachedDeviceData(e.merchantId,this.deviceData),this._iframe=this._setupIFrame()}c.getCachedDeviceData=function(e){return s[e]},c.setCachedDeviceData=function(e,t){s[e]=t},c.prototype.teardown=function(){this._isCached||(r.random.stopCollectors(),this._removeIframe())},c.prototype._removeIframe=function(){this._iframe.parentNode.removeChild(this._iframe)},c.prototype._getDeviceData=function(){return o({deviceSessionId:this._deviceSessionId,fraudMerchantId:this._currentEnvironment.id})},c.prototype._generateDeviceSessionId=function(){var e;return e=r.random.randomWords(4,0),r.codec.hex.fromBits(e)},c.prototype._setupIFrame=function(){var e,t,n=this;return e="?m="+this._currentEnvironment.id+"&s="+this._deviceSessionId,(t=document.createElement("iframe")).width=1,t.id="braintreeDataFrame-"+this._deviceSessionId,t.height=1,t.frameBorder=0,t.scrolling="no",t.style.position="fixed",t.style.left="-999999px",t.style.top="-999999px",t.title="Braintree-Kount-iframe",t.setAttribute("aria-hidden","true"),document.body.appendChild(t),setTimeout((function(){t.src=n._currentEnvironment.url+"/logo.htm"+e,t.innerHTML='<img src="'+n._currentEnvironment.url+"/logo.gif"+e+'" alt="" />'}),10),t},c.prototype._initializeEnvironment=function(e){var t=a[e.environment];if(null==t)throw new Error(e.environment+" is not a valid environment for kount.environment");return{url:t,name:e.environment,id:e.merchantId}},t.exports={setup:function(e){return new c(null!=e?e:{})},Kount:c,environmentUrls:a}},{"../lib/camel-case-to-snake-case":125,"./vendor/sjcl":100}],100:[function(e,t,n){"use strict";var r={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(e){this.toString=function(){return"CORRUPT: "+this.message},this.message=e},invalid:function(e){this.toString=function(){return"INVALID: "+this.message},this.message=e},bug:function(e){this.toString=function(){return"BUG: "+this.message},this.message=e},notReady:function(e){this.toString=function(){return"NOT READY: "+this.message},this.message=e}}};function o(e,t,n){if(4!==t.length)throw new r.exception.invalid("invalid aes block size");var o=e.b[n],i=t[0]^o[0],a=t[n?3:1]^o[1],s=t[2]^o[2];t=t[n?1:3]^o[3];var c,l,u,d,p=o.length/4-2,f=4,h=[0,0,0,0];e=(c=e.l[n])[0];var _=c[1],m=c[2],E=c[3],y=c[4];for(d=0;d<p;d++)c=e[i>>>24]^_[a>>16&255]^m[s>>8&255]^E[255&t]^o[f],l=e[a>>>24]^_[s>>16&255]^m[t>>8&255]^E[255&i]^o[f+1],u=e[s>>>24]^_[t>>16&255]^m[i>>8&255]^E[255&a]^o[f+2],t=e[t>>>24]^_[i>>16&255]^m[a>>8&255]^E[255&s]^o[f+3],f+=4,i=c,a=l,s=u;for(d=0;4>d;d++)h[n?3&-d:d]=y[i>>>24]<<24^y[a>>16&255]<<16^y[s>>8&255]<<8^y[255&t]^o[f++],c=i,i=a,a=s,s=t,t=c;return h}function i(e,t){var n,r,o,i=e.u,a=e.b,s=i[0],c=i[1],l=i[2],u=i[3],d=i[4],p=i[5],f=i[6],h=i[7];for(n=0;64>n;n++)16>n?r=t[n]:(r=t[n+1&15],o=t[n+14&15],r=t[15&n]=(r>>>7^r>>>18^r>>>3^r<<25^r<<14)+(o>>>17^o>>>19^o>>>10^o<<15^o<<13)+t[15&n]+t[n+9&15]|0),r=r+h+(d>>>6^d>>>11^d>>>25^d<<26^d<<21^d<<7)+(f^d&(p^f))+a[n],h=f,f=p,p=d,d=u+r|0,u=l,l=c,s=r+((c=s)&l^u&(c^l))+(c>>>2^c>>>13^c>>>22^c<<30^c<<19^c<<10)|0;i[0]=i[0]+s|0,i[1]=i[1]+c|0,i[2]=i[2]+l|0,i[3]=i[3]+u|0,i[4]=i[4]+d|0,i[5]=i[5]+p|0,i[6]=i[6]+f|0,i[7]=i[7]+h|0}function a(e,t){var n,o=r.random.B[e],i=[];for(n in o)o.hasOwnProperty(n)&&i.push(o[n]);for(n=0;n<i.length;n++)i[n](t)}function s(e,t){"undefined"!=typeof window&&window.performance&&"function"==typeof window.performance.now?e.addEntropy(window.performance.now(),t,"loadtime"):e.addEntropy((new Date).valueOf(),t,"loadtime")}function c(e){e.b=l(e).concat(l(e)),e.C=new r.cipher.aes(e.b)}function l(e){for(var t=0;4>t&&(e.g[t]=e.g[t]+1|0,!e.g[t]);t++);return e.C.encrypt(e.g)}function u(e,t){return function(){t.apply(e,arguments)}}r.cipher.aes=function(e){this.l[0][0][0]||this.G();var t,n,o,i,a=this.l[0][4],s=this.l[1],c=1;if(4!==(t=e.length)&&6!==t&&8!==t)throw new r.exception.invalid("invalid aes key size");for(this.b=[o=e.slice(0),i=[]],e=t;e<4*t+28;e++)n=o[e-1],(0==e%t||8===t&&4==e%t)&&(n=a[n>>>24]<<24^a[n>>16&255]<<16^a[n>>8&255]<<8^a[255&n],0==e%t&&(n=n<<8^n>>>24^c<<24,c=c<<1^283*(c>>7))),o[e]=o[e-t]^n;for(t=0;e;t++,e--)n=o[3&t?e:e-4],i[t]=4>=e||4>t?n:s[0][a[n>>>24]]^s[1][a[n>>16&255]]^s[2][a[n>>8&255]]^s[3][a[255&n]]},r.cipher.aes.prototype={encrypt:function(e){return o(this,e,0)},decrypt:function(e){return o(this,e,1)},l:[[[],[],[],[],[]],[[],[],[],[],[]]],G:function(){var e,t,n,r,o,i,a,s=this.l[0],c=this.l[1],l=s[4],u=c[4],d=[],p=[];for(e=0;256>e;e++)p[(d[e]=e<<1^283*(e>>7))^e]=e;for(t=n=0;!l[t];t^=r||1,n=p[n]||1)for(i=(i=n^n<<1^n<<2^n<<3^n<<4)>>8^255&i^99,l[t]=i,u[i]=t,a=16843009*(o=d[e=d[r=d[t]]])^65537*e^257*r^16843008*t,o=257*d[i]^16843008*i,e=0;4>e;e++)s[e][t]=o=o<<24^o>>>8,c[e][i]=a=a<<24^a>>>8;for(e=0;5>e;e++)s[e]=s[e].slice(0),c[e]=c[e].slice(0)}},r.bitArray={bitSlice:function(e,t,n){return e=r.bitArray.M(e.slice(t/32),32-(31&t)).slice(1),void 0===n?e:r.bitArray.clamp(e,n-t)},extract:function(e,t,n){var r=Math.floor(-t-n&31);return(-32&(t+n-1^t)?e[t/32|0]<<32-r^e[t/32+1|0]>>>r:e[t/32|0]>>>r)&(1<<n)-1},concat:function(e,t){if(0===e.length||0===t.length)return e.concat(t);var n=e[e.length-1],o=r.bitArray.getPartial(n);return 32===o?e.concat(t):r.bitArray.M(t,o,0|n,e.slice(0,e.length-1))},bitLength:function(e){var t=e.length;return 0===t?0:32*(t-1)+r.bitArray.getPartial(e[t-1])},clamp:function(e,t){if(32*e.length<t)return e;var n=(e=e.slice(0,Math.ceil(t/32))).length;return t&=31,0<n&&t&&(e[n-1]=r.bitArray.partial(t,e[n-1]&2147483648>>t-1,1)),e},partial:function(e,t,n){return 32===e?t:(n?0|t:t<<32-e)+1099511627776*e},getPartial:function(e){return Math.round(e/1099511627776)||32},equal:function(e,t){if(r.bitArray.bitLength(e)!==r.bitArray.bitLength(t))return!1;var n,o=0;for(n=0;n<e.length;n++)o|=e[n]^t[n];return 0===o},M:function(e,t,n,o){var i;for(i=0,void 0===o&&(o=[]);32<=t;t-=32)o.push(n),n=0;if(0===t)return o.concat(e);for(i=0;i<e.length;i++)o.push(n|e[i]>>>t),n=e[i]<<32-t;return i=e.length?e[e.length-1]:0,e=r.bitArray.getPartial(i),o.push(r.bitArray.partial(t+e&31,32<t+e?n:o.pop(),1)),o},Y:function(e,t){return[e[0]^t[0],e[1]^t[1],e[2]^t[2],e[3]^t[3]]},byteswapM:function(e){var t,n;for(t=0;t<e.length;++t)n=e[t],e[t]=n>>>24|n>>>8&65280|(65280&n)<<8|n<<24;return e}},r.codec.utf8String={fromBits:function(e){var t,n,o="",i=r.bitArray.bitLength(e);for(t=0;t<i/8;t++)0==(3&t)&&(n=e[t/4]),o+=String.fromCharCode(n>>>8>>>8>>>8),n<<=8;return decodeURIComponent(escape(o))},toBits:function(e){e=unescape(encodeURIComponent(e));var t,n=[],o=0;for(t=0;t<e.length;t++)o=o<<8|e.charCodeAt(t),3==(3&t)&&(n.push(o),o=0);return 3&t&&n.push(r.bitArray.partial(8*(3&t),o)),n}},r.codec.hex={fromBits:function(e){var t,n="";for(t=0;t<e.length;t++)n+=(0xf00000000000+(0|e[t])).toString(16).substr(4);return n.substr(0,r.bitArray.bitLength(e)/4)},toBits:function(e){var t,n,o=[];for(n=(e=e.replace(/\s|0x/g,"")).length,e+="00000000",t=0;t<e.length;t+=8)o.push(0^parseInt(e.substr(t,8),16));return r.bitArray.clamp(o,4*n)}},r.hash.sha256=function(e){this.b[0]||this.G(),e?(this.u=e.u.slice(0),this.o=e.o.slice(0),this.h=e.h):this.reset()},r.hash.sha256.hash=function(e){return(new r.hash.sha256).update(e).finalize()},r.hash.sha256.prototype={blockSize:512,reset:function(){return this.u=this.K.slice(0),this.o=[],this.h=0,this},update:function(e){"string"==typeof e&&(e=r.codec.utf8String.toBits(e));var t,n=this.o=r.bitArray.concat(this.o,e);if(t=this.h,9007199254740991<(e=this.h=t+r.bitArray.bitLength(e)))throw new r.exception.invalid("Cannot hash more than 2^53 - 1 bits");if("undefined"!=typeof Uint32Array){var o=new Uint32Array(n),a=0;for(t=512+t-(512+t&511);t<=e;t+=512)i(this,o.subarray(16*a,16*(a+1))),a+=1;n.splice(0,16*a)}else for(t=512+t-(512+t&511);t<=e;t+=512)i(this,n.splice(0,16));return this},finalize:function(){var e,t=this.o,n=this.u;for(e=(t=r.bitArray.concat(t,[r.bitArray.partial(1,1)])).length+2;15&e;e++)t.push(0);for(t.push(Math.floor(this.h/4294967296)),t.push(0|this.h);t.length;)i(this,t.splice(0,16));return this.reset(),n},K:[],b:[],G:function(){function e(e){return 4294967296*(e-Math.floor(e))|0}for(var t,n,r=0,o=2;64>r;o++){for(n=!0,t=2;t*t<=o;t++)if(0==o%t){n=!1;break}n&&(8>r&&(this.K[r]=e(Math.pow(o,.5))),this.b[r]=e(Math.pow(o,1/3)),r++)}}},r.prng=function(e){this.c=[new r.hash.sha256],this.i=[0],this.H=0,this.v={},this.F=0,this.J={},this.L=this.f=this.j=this.T=0,this.b=[0,0,0,0,0,0,0,0],this.g=[0,0,0,0],this.C=void 0,this.D=e,this.s=!1,this.B={progress:{},seeded:{}},this.m=this.S=0,this.w=1,this.A=2,this.O=65536,this.I=[0,48,64,96,128,192,256,384,512,768,1024],this.P=3e4,this.N=80},r.prng.prototype={randomWords:function(e,t){var n,o,i=[];if((n=this.isReady(t))===this.m)throw new r.exception.notReady("generator isn't seeded");if(n&this.A){n=!(n&this.w),o=[];var a,s=0;for(this.L=o[0]=(new Date).valueOf()+this.P,a=0;16>a;a++)o.push(4294967296*Math.random()|0);for(a=0;a<this.c.length&&(o=o.concat(this.c[a].finalize()),s+=this.i[a],this.i[a]=0,n||!(this.H&1<<a));a++);for(this.H>=1<<this.c.length&&(this.c.push(new r.hash.sha256),this.i.push(0)),this.f-=s,s>this.j&&(this.j=s),this.H++,this.b=r.hash.sha256.hash(this.b.concat(o)),this.C=new r.cipher.aes(this.b),n=0;4>n&&(this.g[n]=this.g[n]+1|0,!this.g[n]);n++);}for(n=0;n<e;n+=4)0==(n+1)%this.O&&c(this),o=l(this),i.push(o[0],o[1],o[2],o[3]);return c(this),i.slice(0,e)},setDefaultParanoia:function(e,t){if(0===e&&"Setting paranoia=0 will ruin your security; use it only for testing"!==t)throw new r.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");this.D=e},addEntropy:function(e,t,n){n=n||"user";var o,i,s=(new Date).valueOf(),c=this.v[n],l=this.isReady(),u=0;switch(void 0===(o=this.J[n])&&(o=this.J[n]=this.T++),void 0===c&&(c=this.v[n]=0),this.v[n]=(this.v[n]+1)%this.c.length,typeof e){case"number":void 0===t&&(t=1),this.c[c].update([o,this.F++,1,t,s,1,0|e]);break;case"object":if("[object Uint32Array]"===(n=Object.prototype.toString.call(e))){for(i=[],n=0;n<e.length;n++)i.push(e[n]);e=i}else for("[object Array]"!==n&&(u=1),n=0;n<e.length&&!u;n++)"number"!=typeof e[n]&&(u=1);if(!u){if(void 0===t)for(n=t=0;n<e.length;n++)for(i=e[n];0<i;)t++,i>>>=1;this.c[c].update([o,this.F++,2,t,s,e.length].concat(e))}break;case"string":void 0===t&&(t=e.length),this.c[c].update([o,this.F++,3,t,s,e.length]),this.c[c].update(e);break;default:u=1}if(u)throw new r.exception.bug("random: addEntropy only supports number, array of numbers or string");this.i[c]+=t,this.f+=t,l===this.m&&(this.isReady()!==this.m&&a("seeded",Math.max(this.j,this.f)),a("progress",this.getProgress()))},isReady:function(e){return e=this.I[void 0!==e?e:this.D],this.j&&this.j>=e?this.i[0]>this.N&&(new Date).valueOf()>this.L?this.A|this.w:this.w:this.f>=e?this.A|this.m:this.m},getProgress:function(e){return e=this.I[e||this.D],this.j>=e||this.f>e?1:this.f/e},startCollectors:function(){if(!this.s){if(this.a={loadTimeCollector:u(this,this.V),mouseCollector:u(this,this.W),keyboardCollector:u(this,this.U),accelerometerCollector:u(this,this.R),touchCollector:u(this,this.X)},window.addEventListener)window.addEventListener("load",this.a.loadTimeCollector,!1),window.addEventListener("mousemove",this.a.mouseCollector,!1),window.addEventListener("keypress",this.a.keyboardCollector,!1),window.addEventListener("devicemotion",this.a.accelerometerCollector,!1),window.addEventListener("touchmove",this.a.touchCollector,!1);else{if(!document.attachEvent)throw new r.exception.bug("can't attach event");document.attachEvent("onload",this.a.loadTimeCollector),document.attachEvent("onmousemove",this.a.mouseCollector),document.attachEvent("keypress",this.a.keyboardCollector)}this.s=!0}},stopCollectors:function(){this.s&&(window.removeEventListener?(window.removeEventListener("load",this.a.loadTimeCollector,!1),window.removeEventListener("mousemove",this.a.mouseCollector,!1),window.removeEventListener("keypress",this.a.keyboardCollector,!1),window.removeEventListener("devicemotion",this.a.accelerometerCollector,!1),window.removeEventListener("touchmove",this.a.touchCollector,!1)):document.detachEvent&&(document.detachEvent("onload",this.a.loadTimeCollector),document.detachEvent("onmousemove",this.a.mouseCollector),document.detachEvent("keypress",this.a.keyboardCollector)),this.s=!1)},addEventListener:function(e,t){this.B[e][this.S++]=t},removeEventListener:function(e,t){var n,r,o=this.B[e],i=[];for(r in o)o.hasOwnProperty(r)&&o[r]===t&&i.push(r);for(n=0;n<i.length;n++)delete o[r=i[n]]},U:function(){s(this,1)},W:function(e){var t,n;try{t=e.x||e.clientX||e.offsetX||0,n=e.y||e.clientY||e.offsetY||0}catch(e){n=t=0}0!=t&&0!=n&&this.addEntropy([t,n],2,"mouse"),s(this,0)},X:function(e){e=e.touches[0]||e.changedTouches[0],this.addEntropy([e.pageX||e.clientX,e.pageY||e.clientY],1,"touch"),s(this,0)},V:function(){s(this,2)},R:function(e){if(e=e.accelerationIncludingGravity.x||e.accelerationIncludingGravity.y||e.accelerationIncludingGravity.z,window.orientation){var t=window.orientation;"number"==typeof t&&this.addEntropy(t,1,"accelerometer")}e&&this.addEntropy(e,2,"accelerometer"),s(this,0)}},r.random=new r.prng(6);e:try{var d,p,f,h;if(h=void 0!==t&&t.exports){var _;try{_=e("crypto")}catch(e){_=null}h=p=_}if(h&&p.randomBytes)d=p.randomBytes(128),d=new Uint32Array(new Uint8Array(d).buffer),r.random.addEntropy(d,1024,"crypto['randomBytes']");else if("undefined"!=typeof window&&"undefined"!=typeof Uint32Array){if(f=new Uint32Array(32),window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(f);else{if(!window.msCrypto||!window.msCrypto.getRandomValues)break e;window.msCrypto.getRandomValues(f)}r.random.addEntropy(f,1024,"crypto['getRandomValues']")}}catch(e){"undefined"!=typeof window&&window.console&&(console.log("There was an error collecting entropy from the browser:"),console.log(e))}void 0!==t&&t.exports&&(t.exports=r)},{crypto:void 0}],101:[function(e,t,n){"use strict";var r=e("../lib/braintree-error");t.exports={GOOGLE_PAYMENT_NOT_ENABLED:{type:r.types.MERCHANT,code:"GOOGLE_PAYMENT_NOT_ENABLED",message:"Google Pay is not enabled for this merchant."},GOOGLE_PAYMENT_GATEWAY_ERROR:{code:"GOOGLE_PAYMENT_GATEWAY_ERROR",message:"There was an error when tokenizing the Google Pay payment method.",type:r.types.UNKNOWN},GOOGLE_PAYMENT_UNSUPPORTED_VERSION:{code:"GOOGLE_PAYMENT_UNSUPPORTED_VERSION",type:r.types.MERCHANT}}},{"../lib/braintree-error":124}],102:[function(e,t,n){"use strict";var r=e("../lib/analytics"),o=e("../lib/assign").assign,i=e("../lib/convert-methods-to-error"),a=e("../lib/find"),s=e("../lib/generate-google-pay-configuration"),c=e("../lib/braintree-error"),l=e("./errors"),u=e("../lib/methods"),d=e("@braintree/wrap-promise"),p={1:"_createV1PaymentDataRequest",2:"_createV2PaymentDataRequest"};function f(e){if(this._createPromise=e.createPromise,this._client=e.client,this._useDeferredClient=e.useDeferredClient,this._googlePayVersion=e.googlePayVersion||1,this._googleMerchantId=e.googleMerchantId,this._isUnsupportedGooglePayAPIVersion())throw new c({code:l.GOOGLE_PAYMENT_UNSUPPORTED_VERSION.code,message:"The Braintree SDK does not support Google Pay version "+this._googlePayVersion+". Please upgrade the version of your Braintree SDK and contact support if this error persists.",type:l.GOOGLE_PAYMENT_UNSUPPORTED_VERSION.type})}f.prototype._waitForClient=function(){return this._client?Promise.resolve():this._createPromise.then(function(e){this._client=e}.bind(this))},f.prototype._isUnsupportedGooglePayAPIVersion=function(){return!(this._googlePayVersion in p)},f.prototype._getDefaultConfig=function(){return this._defaultConfig||(this._defaultConfig=s(this._client.getConfiguration(),this._googlePayVersion,this._googleMerchantId)),this._defaultConfig},f.prototype._createV1PaymentDataRequest=function(e){var t=this._getDefaultConfig(),n=e.cardRequirements&&e.cardRequirements.allowedCardNetworks,r=t.cardRequirements.allowedCardNetworks,i=n||r;return(e=o({},t,e)).cardRequirements.allowedCardNetworks=i,e},f.prototype._createV2PaymentDataRequest=function(e){var t=this._getDefaultConfig();return e.allowedPaymentMethods&&e.allowedPaymentMethods.forEach((function(e){var n=a(t.allowedPaymentMethods,"type",e.type);n&&function(e,t){Object.keys(t).forEach((function(n){"object"==typeof t[n]?e[n]=o({},t[n],e[n]):e[n]=e[n]||t[n]}))}(e,n)})),o({},t,e)},f.prototype.createPaymentDataRequest=function(e){return this._useDeferredClient?this._waitForClient().then(function(){return this._createPaymentDataRequestSyncronously(e)}.bind(this)):this._createPaymentDataRequestSyncronously(e)},f.prototype._createPaymentDataRequestSyncronously=function(e){var t=o({},e),n=this._googlePayVersion,i=p[n];return r.sendEvent(this._createPromise,"google-payment.v"+n+".createPaymentDataRequest"),this[i](t)},f.prototype.parseResponse=function(e){var t=this;return Promise.resolve().then((function(){var n,o=2===e.apiVersion?e.paymentMethodData.tokenizationData.token:e.paymentMethodToken.token,i=JSON.parse(o),a=i.error;return a?Promise.reject(a):(r.sendEvent(t._createPromise,"google-payment.parseResponse.succeeded"),i.paypalAccounts?(n=i.paypalAccounts[0],r.sendEvent(t._createPromise,"google-payment.parseResponse.succeeded.paypal"),Promise.resolve({nonce:n.nonce,type:n.type,description:n.description})):(n=i.androidPayCards[0],r.sendEvent(t._createPromise,"google-payment.parseResponse.succeeded.google-payment"),Promise.resolve({nonce:n.nonce,type:n.type,description:n.description,details:{cardType:n.details.cardType,lastFour:n.details.lastFour,lastTwo:n.details.lastTwo,isNetworkTokenized:n.details.isNetworkTokenized,bin:n.details.bin},binData:n.binData})))})).catch((function(e){return r.sendEvent(t._createPromise,"google-payment.parseResponse.failed"),Promise.reject(new c({code:l.GOOGLE_PAYMENT_GATEWAY_ERROR.code,message:l.GOOGLE_PAYMENT_GATEWAY_ERROR.message,type:l.GOOGLE_PAYMENT_GATEWAY_ERROR.type,details:{originalError:e}}))}))},f.prototype.teardown=function(){return i(this,u(f.prototype)),Promise.resolve()},t.exports=d.wrapPrototype(f)},{"../lib/analytics":119,"../lib/assign":121,"../lib/braintree-error":124,"../lib/convert-methods-to-error":127,"../lib/find":137,"../lib/generate-google-pay-configuration":149,"../lib/methods":155,"./errors":101,"@braintree/wrap-promise":43}],103:[function(e,t,n){"use strict";var r=e("./google-payment"),o=e("../lib/braintree-error"),i=e("../lib/create-assets-url"),a=e("../lib/create-deferred-client"),s=e("../lib/basic-component-verification"),c=e("@braintree/wrap-promise"),l=e("./errors");t.exports={create:c((function(e){var t="Google Pay";return s.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){var n,s;return n=a.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:i.create(e.authorization),name:t}).then((function(t){var n=t.getConfiguration();return e.client=t,n.gatewayConfiguration.androidPay?t:Promise.reject(new o(l.GOOGLE_PAYMENT_NOT_ENABLED))})),e.createPromise=n,s=new r(e),e.useDeferredClient?s:n.then((function(e){return s._client=e,s}))}))})),VERSION:"3.100.0"}},{"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./errors":101,"./google-payment":102,"@braintree/wrap-promise":43}],104:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error"),o=e("../shared/errors"),i=e("../shared/constants").allowedAttributes;t.exports=function(e,t){var n;return i.hasOwnProperty(e)?null==t||function(e,t){return"string"===i[e]?"string"==typeof t||"number"==typeof t:"boolean"===i[e]&&("true"===String(t)||"false"===String(t))}(e,t)||(n=new r({type:o.HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED.type,code:o.HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED.code,message:'Value "'+t+'" is not allowed for "'+e+'" attribute.'})):n=new r({type:o.HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED.type,code:o.HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED.code,message:'The "'+e+'" attribute is not supported in Hosted Fields.'}),n}},{"../../lib/braintree-error":124,"../shared/constants":112,"../shared/errors":113}],105:[function(e,t,n){"use strict";var r=e("../shared/constants"),o=e("../../lib/use-min");t.exports=function(e,t,n){return e+"/web/"+r.VERSION+"/html/hosted-fields-frame"+o(n)+".html#"+t}},{"../../lib/use-min":160,"../shared/constants":112}],106:[function(e,t,n){"use strict";var r=e("../shared/constants").navigationDirections,o=e("../shared/browser-detection"),i=e("../shared/focus-intercept"),a=e("../shared/find-parent-tags"),s=["INPUT","SELECT","TEXTAREA"],c=["hidden","button","reset","submit","checkbox","radio","file"];function l(e){return o.hasSoftwareKeyboard()?s.indexOf(e.tagName)>-1&&c.indexOf(e.type)<0:"hidden"!==e.type}function u(e){var t,n;for(t=0;t<e.length;t++)if(l(n=e[t]))return n;return null}t.exports={removeExtraFocusElements:function(e,t){var n=Array.prototype.slice.call(e.elements);[u(n),u(n.reverse())].forEach((function(e){e&&i.matchFocusElement(e.getAttribute("id"))&&t(e.getAttribute("id"))}))},createFocusChangeHandler:function(e,t){return function(n){var o,s,c,u,d=document.getElementById("bt-"+n.field+"-"+n.direction+"-"+e);if(d)if(c=a(d,"form")[0],document.forms.length<1||!c)t.onRemoveFocusIntercepts();else{o=(c=[].slice.call(c.elements)).indexOf(d),u=function(e,t){switch(e){case r.BACK:return{checkIndexBounds:function(e){return e<0},indexChange:-1};case r.FORWARD:return{checkIndexBounds:function(e){return e>t-1},indexChange:1}}return{}}(n.direction,c.length);do{if(o+=u.indexChange,u.checkIndexBounds(o))return;s=c[o]}while(!l(s));i.matchFocusElement(s.getAttribute("id"))?t.onTriggerInputFocus(s.getAttribute("data-braintree-type")):s.focus()}}}}},{"../shared/browser-detection":111,"../shared/constants":112,"../shared/find-parent-tags":114,"../shared/focus-intercept":115}],107:[function(e,t,n){"use strict";var r=e("../shared/constants").allowedStyles;t.exports=function(e){var t,n=document.createElement("input"),o={};return"."===e[0]&&(e=e.substring(1)),n.className=e,n.style.display="none !important",n.style.position="fixed !important",n.style.left="-99999px !important",n.style.top="-99999px !important",document.body.appendChild(n),t=window.getComputedStyle(n),r.forEach((function(e){var n=t[e];n&&(o[e]=n)})),document.body.removeChild(n),o}},{"../shared/constants":112}],108:[function(e,t,n){"use strict";var r=e("../../lib/assign").assign,o=e("../../lib/create-assets-url"),i=e("../../lib/is-verified-domain"),a=e("../../lib/destructor"),s=e("@braintree/iframer"),c=e("framebus"),l=e("../../lib/create-deferred-client"),u=e("../../lib/braintree-error"),d=e("./compose-url"),p=e("./get-styles-from-class"),f=e("../shared/constants"),h=e("../shared/errors"),_=e("../../lib/constants").INTEGRATION_TIMEOUT_MS,m=e("@braintree/uuid"),E=e("../shared/find-parent-tags"),y=e("../shared/browser-detection"),g=f.events,v=e("@braintree/event-emitter"),A=e("./inject-frame"),b=e("../../lib/analytics"),T=f.allowedFields,N=e("../../lib/methods"),I=e("../../lib/shadow"),O=e("../../lib/find-root-node"),P=e("../../lib/convert-methods-to-error"),C=e("../../lib/errors"),S=e("../shared/get-card-types"),R=e("./attribute-validation-error"),w=e("@braintree/wrap-promise"),D=e("./focus-change"),L=e("../shared/focus-intercept").destroy;function k(e){var t,n,E,y,T,O=this,R={},w={},M=[],U=m();if(this._merchantConfigurationOptions=r({},e),e.client?(E=(n=e.client.getConfiguration()).gatewayConfiguration.assetsUrl,y=n.isDebug):(E=o.create(e.authorization),y=Boolean(e.isDebug)),this._clientPromise=l.create({client:e.client,authorization:e.authorization,debug:y,assetsUrl:E,name:"Hosted Fields"}),T=d(E,U,y),!e.fields||0===Object.keys(e.fields).length)throw new u({type:C.INSTANTIATION_OPTION_REQUIRED.type,code:C.INSTANTIATION_OPTION_REQUIRED.code,message:"options.fields is required when instantiating Hosted Fields."});v.call(this),this._injectedNodes=[],this._destructor=new a,this._fields=R,this._state={fields:{},cards:S("")},this._bus=new c({channel:U,verifyDomain:i,targetFrames:[window]}),this._destructor.registerFunctionForTeardown((function(){O._bus.teardown()})),e.client?b.sendEvent(this._clientPromise,"custom.hosted-fields.initialized"):b.sendEvent(this._clientPromise,"custom.hosted-fields.initialized.deferred-client"),Object.keys(e.fields).forEach(function(t){var n,r,o,i,a;if(!f.allowedFields.hasOwnProperty(t))throw new u({type:h.HOSTED_FIELDS_INVALID_FIELD_KEY.type,code:h.HOSTED_FIELDS_INVALID_FIELD_KEY.code,message:'"'+t+'" is not a valid field.'});if("string"==typeof(r=(n=e.fields[t]).container||n.selector)&&(r=document.querySelector(r)),!r||1!==r.nodeType)throw new u({type:h.HOSTED_FIELDS_INVALID_FIELD_SELECTOR.type,code:h.HOSTED_FIELDS_INVALID_FIELD_SELECTOR.code,message:h.HOSTED_FIELDS_INVALID_FIELD_SELECTOR.message,details:{fieldSelector:n.selector,fieldContainer:n.container,fieldKey:t}});if(r.querySelector('iframe[name^="braintree-"]'))throw new u({type:h.HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME.type,code:h.HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME.code,message:h.HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME.message,details:{fieldSelector:n.selector,fieldContainer:n.container,fieldKey:t}});if(o=r,I.isShadowElement(o)&&(o=I.transformToSlot(o,"height: 100%")),n.maxlength&&"number"!=typeof n.maxlength)throw new u({type:h.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.type,code:h.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.code,message:"The value for maxlength must be a number.",details:{fieldKey:t}});if(n.minlength&&"number"!=typeof n.minlength)throw new u({type:h.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.type,code:h.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.code,message:"The value for minlength must be a number.",details:{fieldKey:t}});i=s({type:t,name:"braintree-hosted-field-"+t,style:f.defaultIFrameStyle,title:n.iframeTitle||"Secure Credit Card Frame - "+f.allowedFields[t].label}),this._bus.addTargetFrame(i),this._injectedNodes.push.apply(this._injectedNodes,A(U,i,o,(function(){O.focus(t)}))),this._setupLabelFocus(t,r),R[t]={frameElement:i,containerElement:r},a=new Promise((function(e){w[t]=e})),M.push(a),this._state.fields[t]={isEmpty:!0,isValid:!1,isPotentiallyValid:!0,isFocused:!1,container:r},setTimeout((function(){i.src=T}),0)}.bind(this)),this._merchantConfigurationOptions.styles&&Object.keys(this._merchantConfigurationOptions.styles).forEach((function(e){var t=O._merchantConfigurationOptions.styles[e];"string"==typeof t&&(O._merchantConfigurationOptions.styles[e]=p(t))})),this._bus.on(g.REMOVE_FOCUS_INTERCEPTS,(function(e){L(e&&e.id)})),this._bus.on(g.TRIGGER_FOCUS_CHANGE,D.createFocusChangeHandler(U,{onRemoveFocusIntercepts:function(e){O._bus.emit(g.REMOVE_FOCUS_INTERCEPTS,{id:e})},onTriggerInputFocus:function(e){O.focus(e)}})),this._bus.on(g.READY_FOR_CLIENT,(function(e){O._clientPromise.then((function(t){e(t)}))})),this._bus.on(g.CARD_FORM_ENTRY_HAS_BEGUN,(function(){b.sendEvent(O._clientPromise,"hosted-fields.input.started")})),this._bus.on(g.BIN_AVAILABLE,(function(e){O._emit("binAvailable",{bin:e})})),t=setTimeout((function(){b.sendEvent(O._clientPromise,"custom.hosted-fields.load.timed-out"),O._emit("timeout")}),_),Promise.all(M).then((function(e){var n,o,i=e[0];clearTimeout(t),i((n=O._merchantConfigurationOptions,(o=r({},n)).fields=r({},o.fields),Object.keys(o.fields).forEach((function(e){o.fields[e]=r({},o.fields[e]),delete o.fields[e].container})),o)),O._cleanUpFocusIntercepts(),O._emit("ready")})),this._bus.on(g.FRAME_READY,(function(e,t){w[e.field](t)})),this._bus.on(g.INPUT_EVENT,function(e){return function(t){var n,r=t.merchantPayload,o=r.emittedBy,i=e[o].containerElement;Object.keys(r.fields).forEach((function(t){r.fields[t].container=e[t].containerElement})),n=r.fields[o],i.classList.toggle(f.externalClasses.FOCUSED,n.isFocused),i.classList.toggle(f.externalClasses.VALID,n.isValid),i.classList.toggle(f.externalClasses.INVALID,!n.isPotentiallyValid),this._state={cards:r.cards,fields:r.fields},this._emit(t.type,r)}}(R).bind(this)),this._destructor.registerFunctionForTeardown((function(){var e,t,n;for(e=0;e<O._injectedNodes.length;e++)(n=(t=O._injectedNodes[e]).parentNode).removeChild(t),n.classList.remove(f.externalClasses.FOCUSED,f.externalClasses.INVALID,f.externalClasses.VALID)})),this._destructor.registerFunctionForTeardown((function(){L()})),this._destructor.registerFunctionForTeardown((function(){var e=N(k.prototype).concat(N(v.prototype));P(O,e)}))}v.createChild(k),k.prototype._setupLabelFocus=function(e,t){var n,r,o=this,i=O(t);if(null!=t.id){for(n=Array.prototype.slice.call(document.querySelectorAll('label[for="'+t.id+'"]')),i!==document&&(n=n.concat(Array.prototype.slice.call(i.querySelectorAll('label[for="'+t.id+'"]')))),n=(n=n.concat(E(t,"label"))).filter((function(e,t,n){return n.indexOf(e)===t})),r=0;r<n.length;r++)n[r].addEventListener("click",a,!1);this._destructor.registerFunctionForTeardown((function(){for(r=0;r<n.length;r++)n[r].removeEventListener("click",a,!1)}))}function a(){o.focus(e)}},k.prototype._getAnyFieldContainer=function(){var e=this;return Object.keys(this._fields).reduce((function(t,n){return t||e._fields[n].containerElement}),null)},k.prototype._cleanUpFocusIntercepts=function(){var e,t;document.forms.length<1?this._bus.emit(g.REMOVE_FOCUS_INTERCEPTS):(e=this._getAnyFieldContainer(),(t=E(e,"form")[0])?D.removeExtraFocusElements(t,function(e){this._bus.emit(g.REMOVE_FOCUS_INTERCEPTS,{id:e})}.bind(this)):this._bus.emit(g.REMOVE_FOCUS_INTERCEPTS))},k.prototype._attachInvalidFieldContainersToError=function(e){e.details&&e.details.invalidFieldKeys&&e.details.invalidFieldKeys.length>0&&(e.details.invalidFields={},e.details.invalidFieldKeys.forEach(function(t){e.details.invalidFields[t]=this._fields[t].containerElement}.bind(this)))},k.prototype.getChallenges=function(){return this._clientPromise.then((function(e){return e.getConfiguration().gatewayConfiguration.challenges}))},k.prototype.getSupportedCardTypes=function(){return this._clientPromise.then((function(e){return e.getConfiguration().gatewayConfiguration.creditCards.supportedCardTypes.map((function(e){return"MasterCard"===e?"Mastercard":e}))}))},k.prototype.teardown=function(){var e=this;return new Promise((function(t,n){e._destructor.teardown((function(r){b.sendEvent(e._clientPromise,"custom.hosted-fields.teardown-completed"),r?n(r):t()}))}))},k.prototype.tokenize=function(e){var t=this;return e||(e={}),new Promise((function(n,r){t._bus.emit(g.TOKENIZATION_REQUEST,e,(function(e){var o=e[0],i=e[1];o?(t._attachInvalidFieldContainersToError(o),r(new u(o))):n(i)}))}))},k.prototype.addClass=function(e,t){var n;return T.hasOwnProperty(e)?this._fields.hasOwnProperty(e)?this._bus.emit(g.ADD_CLASS,{field:e,classname:t}):n=new u({type:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,code:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,message:'Cannot add class to "'+e+'" field because it is not part of the current Hosted Fields options.'}):n=new u({type:h.HOSTED_FIELDS_FIELD_INVALID.type,code:h.HOSTED_FIELDS_FIELD_INVALID.code,message:'"'+e+'" is not a valid field. You must use a valid field option when adding a class.'}),n?Promise.reject(n):Promise.resolve()},k.prototype.removeClass=function(e,t){var n;return T.hasOwnProperty(e)?this._fields.hasOwnProperty(e)?this._bus.emit(g.REMOVE_CLASS,{field:e,classname:t}):n=new u({type:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,code:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,message:'Cannot remove class from "'+e+'" field because it is not part of the current Hosted Fields options.'}):n=new u({type:h.HOSTED_FIELDS_FIELD_INVALID.type,code:h.HOSTED_FIELDS_FIELD_INVALID.code,message:'"'+e+'" is not a valid field. You must use a valid field option when removing a class.'}),n?Promise.reject(n):Promise.resolve()},k.prototype.setAttribute=function(e){var t,n;return T.hasOwnProperty(e.field)?this._fields.hasOwnProperty(e.field)?(t=R(e.attribute,e.value))?n=t:this._bus.emit(g.SET_ATTRIBUTE,{field:e.field,attribute:e.attribute,value:e.value}):n=new u({type:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,code:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,message:'Cannot set attribute for "'+e.field+'" field because it is not part of the current Hosted Fields options.'}):n=new u({type:h.HOSTED_FIELDS_FIELD_INVALID.type,code:h.HOSTED_FIELDS_FIELD_INVALID.code,message:'"'+e.field+'" is not a valid field. You must use a valid field option when setting an attribute.'}),n?Promise.reject(n):Promise.resolve()},k.prototype.setMonthOptions=function(e){var t,n=this,r=this._merchantConfigurationOptions.fields;return r.expirationMonth?r.expirationMonth.select||(t="Expiration month field must be a select element."):t="Expiration month field must exist to use setMonthOptions.",t?Promise.reject(new u({type:h.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.type,code:h.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.code,message:t})):new Promise((function(t){n._bus.emit(g.SET_MONTH_OPTIONS,e,t)}))},k.prototype.setMessage=function(e){this._bus.emit(g.SET_MESSAGE,{field:e.field,message:e.message})},k.prototype.removeAttribute=function(e){var t,n;return T.hasOwnProperty(e.field)?this._fields.hasOwnProperty(e.field)?(t=R(e.attribute))?n=t:this._bus.emit(g.REMOVE_ATTRIBUTE,{field:e.field,attribute:e.attribute}):n=new u({type:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,code:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,message:'Cannot remove attribute for "'+e.field+'" field because it is not part of the current Hosted Fields options.'}):n=new u({type:h.HOSTED_FIELDS_FIELD_INVALID.type,code:h.HOSTED_FIELDS_FIELD_INVALID.code,message:'"'+e.field+'" is not a valid field. You must use a valid field option when removing an attribute.'}),n?Promise.reject(n):Promise.resolve()},k.prototype.setPlaceholder=function(e,t){return this.setAttribute({field:e,attribute:"placeholder",value:t})},k.prototype.clear=function(e){var t;return T.hasOwnProperty(e)?this._fields.hasOwnProperty(e)?this._bus.emit(g.CLEAR_FIELD,{field:e}):t=new u({type:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,code:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,message:'Cannot clear "'+e+'" field because it is not part of the current Hosted Fields options.'}):t=new u({type:h.HOSTED_FIELDS_FIELD_INVALID.type,code:h.HOSTED_FIELDS_FIELD_INVALID.code,message:'"'+e+'" is not a valid field. You must use a valid field option when clearing a field.'}),t?Promise.reject(t):Promise.resolve()},k.prototype.focus=function(e){var t,n=this._fields[e];return T.hasOwnProperty(e)?this._fields.hasOwnProperty(e)?(n.frameElement.focus(),this._bus.emit(g.TRIGGER_INPUT_FOCUS,{field:e}),y.isIos()&&setTimeout((function(){var e,t,r,o;e=n.containerElement,t=e.getBoundingClientRect(),r=Math.floor(t.height/2),o=Math.floor(t.width/2),t.top<(window.innerHeight-r||document.documentElement.clientHeight-r)&&t.right>o&&t.bottom>r&&t.left<(window.innerWidth-o||document.documentElement.clientWidth-o)||n.containerElement.scrollIntoView()}),5)):t=new u({type:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,code:h.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,message:'Cannot focus "'+e+'" field because it is not part of the current Hosted Fields options.'}):t=new u({type:h.HOSTED_FIELDS_FIELD_INVALID.type,code:h.HOSTED_FIELDS_FIELD_INVALID.code,message:'"'+e+'" is not a valid field. You must use a valid field option when focusing a field.'}),t?Promise.reject(t):Promise.resolve()},k.prototype.getState=function(){return this._state},t.exports=w.wrapPrototype(k)},{"../../lib/analytics":119,"../../lib/assign":121,"../../lib/braintree-error":124,"../../lib/constants":126,"../../lib/convert-methods-to-error":127,"../../lib/create-assets-url":129,"../../lib/create-deferred-client":131,"../../lib/destructor":133,"../../lib/errors":135,"../../lib/find-root-node":136,"../../lib/is-verified-domain":153,"../../lib/methods":155,"../../lib/shadow":158,"../shared/browser-detection":111,"../shared/constants":112,"../shared/errors":113,"../shared/find-parent-tags":114,"../shared/focus-intercept":115,"../shared/get-card-types":116,"./attribute-validation-error":104,"./compose-url":105,"./focus-change":106,"./get-styles-from-class":107,"./inject-frame":109,"@braintree/event-emitter":33,"@braintree/iframer":35,"@braintree/uuid":39,"@braintree/wrap-promise":43,framebus:52}],109:[function(e,t,n){"use strict";var r=e("../shared/focus-intercept"),o=e("../shared/constants").navigationDirections;t.exports=function(e,t,n,i){var a=t.getAttribute("type"),s=document.createElement("div"),c=document.createDocumentFragment(),l=r.generate(e,a,o.BACK,i),u=r.generate(e,a,o.FORWARD,i);return s.style.clear="both",c.appendChild(l),c.appendChild(t),c.appendChild(u),c.appendChild(s),n.appendChild(c),[t,s]}},{"../shared/constants":112,"../shared/focus-intercept":115}],110:[function(e,t,n){"use strict";var r=e("./external/hosted-fields"),o=e("../lib/basic-component-verification"),i=e("./shared/errors"),a=e("restricted-input/supports-input-formatting"),s=e("@braintree/wrap-promise"),c=e("../lib/braintree-error");t.exports={supportsInputFormatting:a,create:s((function(e){return o.verify({name:"Hosted Fields",authorization:e.authorization,client:e.client}).then((function(){var t=new r(e);return new Promise((function(e,n){t.on("ready",(function(){e(t)})),t.on("timeout",(function(){n(new c(i.HOSTED_FIELDS_TIMEOUT))}))}))}))})),VERSION:"3.100.0"}},{"../lib/basic-component-verification":122,"../lib/braintree-error":124,"./external/hosted-fields":108,"./shared/errors":113,"@braintree/wrap-promise":43,"restricted-input/supports-input-formatting":71}],111:[function(e,t,n){"use strict";var r=e("@braintree/browser-detection/is-android"),o=e("@braintree/browser-detection/is-chrome-os"),i=e("@braintree/browser-detection/is-ios"),a=e("@braintree/browser-detection/is-chrome");t.exports={isAndroid:r,isChromeOS:o,isChromeIos:function(){return a()&&i()},isFirefox:e("@braintree/browser-detection/is-firefox"),isIos:i,isIosWebview:e("@braintree/browser-detection/is-ios-webview"),hasSoftwareKeyboard:function(){return r()||o()||i()}}},{"@braintree/browser-detection/is-android":22,"@braintree/browser-detection/is-chrome":24,"@braintree/browser-detection/is-chrome-os":23,"@braintree/browser-detection/is-firefox":25,"@braintree/browser-detection/is-ios":30,"@braintree/browser-detection/is-ios-webview":28}],112:[function(e,t,n){"use strict";var r=e("../../lib/enumerate"),o=e("./errors"),i={VERSION:"3.100.0",maxExpirationYearAge:19,externalEvents:{FOCUS:"focus",BLUR:"blur",EMPTY:"empty",NOT_EMPTY:"notEmpty",VALIDITY_CHANGE:"validityChange",CARD_TYPE_CHANGE:"cardTypeChange"},defaultMaxLengths:{number:19,postalCode:8,expirationDate:7,expirationMonth:2,expirationYear:4,cvv:3},externalClasses:{FOCUSED:"braintree-hosted-fields-focused",INVALID:"braintree-hosted-fields-invalid",VALID:"braintree-hosted-fields-valid"},navigationDirections:{BACK:"before",FORWARD:"after"},defaultIFrameStyle:{border:"none",width:"100%",height:"100%",float:"left"},tokenizationErrorCodes:{81724:o.HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE,81736:o.HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED},allowedStyles:["-moz-appearance","-moz-box-shadow","-moz-osx-font-smoothing","-moz-tap-highlight-color","-moz-transition","-webkit-appearance","-webkit-box-shadow","-webkit-font-smoothing","-webkit-tap-highlight-color","-webkit-transition","appearance","box-shadow","color","direction","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-variant-alternates","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-weight","letter-spacing","line-height","margin","margin-top","margin-right","margin-bottom","margin-left","opacity","outline","padding","padding-top","padding-right","padding-bottom","padding-left","text-align","text-shadow","transition"],allowedFields:{cardholderName:{name:"cardholder-name",label:"Cardholder Name"},number:{name:"credit-card-number",label:"Credit Card Number"},cvv:{name:"cvv",label:"CVV"},expirationDate:{name:"expiration",label:"Expiration Date"},expirationMonth:{name:"expiration-month",label:"Expiration Month"},expirationYear:{name:"expiration-year",label:"Expiration Year"},postalCode:{name:"postal-code",label:"Postal Code"}},allowedAttributes:{"aria-invalid":"boolean","aria-required":"boolean",disabled:"boolean",placeholder:"string"},autocompleteMappings:{"cardholder-name":"cc-name","credit-card-number":"cc-number",expiration:"cc-exp","expiration-month":"cc-exp-month","expiration-year":"cc-exp-year",cvv:"cc-csc","postal-code":"billing postal-code"}};i.events=r(["ADD_CLASS","AUTOFILL_DATA_AVAILABLE","BIN_AVAILABLE","CARD_FORM_ENTRY_HAS_BEGUN","CLEAR_FIELD","CONFIGURATION","FRAME_READY","INPUT_EVENT","READY_FOR_CLIENT","REMOVE_ATTRIBUTE","REMOVE_CLASS","REMOVE_FOCUS_INTERCEPTS","SET_ATTRIBUTE","SET_MESSAGE","SET_MONTH_OPTIONS","TOKENIZATION_REQUEST","TRIGGER_FOCUS_CHANGE","TRIGGER_INPUT_FOCUS","VALIDATE_STRICT"],"hosted-fields:"),t.exports=i},{"../../lib/enumerate":134,"./errors":113}],113:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error");t.exports={HOSTED_FIELDS_TIMEOUT:{type:r.types.UNKNOWN,code:"HOSTED_FIELDS_TIMEOUT",message:"Hosted Fields timed out when attempting to set up."},HOSTED_FIELDS_INVALID_FIELD_KEY:{type:r.types.MERCHANT,code:"HOSTED_FIELDS_INVALID_FIELD_KEY"},HOSTED_FIELDS_INVALID_FIELD_SELECTOR:{type:r.types.MERCHANT,code:"HOSTED_FIELDS_INVALID_FIELD_SELECTOR",message:"Selector does not reference a valid DOM node."},HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME:{type:r.types.MERCHANT,code:"HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME",message:"Element already contains a Braintree iframe."},HOSTED_FIELDS_FIELD_INVALID:{type:r.types.MERCHANT,code:"HOSTED_FIELDS_FIELD_INVALID"},HOSTED_FIELDS_FIELD_NOT_PRESENT:{type:r.types.MERCHANT,code:"HOSTED_FIELDS_FIELD_NOT_PRESENT"},HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR:{type:r.types.NETWORK,code:"HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR",message:"A tokenization network error occurred."},HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE:{type:r.types.CUSTOMER,code:"HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE",message:"This credit card already exists in the merchant's vault."},HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED:{type:r.types.CUSTOMER,code:"HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED",message:"CVV verification failed during tokenization."},HOSTED_FIELDS_FAILED_TOKENIZATION:{type:r.types.CUSTOMER,code:"HOSTED_FIELDS_FAILED_TOKENIZATION",message:"The supplied card data failed tokenization."},HOSTED_FIELDS_FIELDS_EMPTY:{type:r.types.CUSTOMER,code:"HOSTED_FIELDS_FIELDS_EMPTY",message:"All fields are empty. Cannot tokenize empty card fields."},HOSTED_FIELDS_FIELDS_INVALID:{type:r.types.CUSTOMER,code:"HOSTED_FIELDS_FIELDS_INVALID",message:"Some payment input fields are invalid. Cannot tokenize invalid card fields."},HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED:{type:r.types.MERCHANT,code:"HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED"},HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED:{type:r.types.MERCHANT,code:"HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED"},HOSTED_FIELDS_FIELD_PROPERTY_INVALID:{type:r.types.MERCHANT,code:"HOSTED_FIELDS_FIELD_PROPERTY_INVALID"}}},{"../../lib/braintree-error":124}],114:[function(e,t,n){"use strict";t.exports=function(e,t){for(var n=e.parentNode,r=[];null!=n;)null!=n.tagName&&n.tagName.toLowerCase()===t&&r.push(n),n=n.parentNode;return r}},{}],115:[function(e,t,n){"use strict";var r=e("./browser-detection"),o=e("./constants"),i=Object.keys(o.allowedFields),a=o.navigationDirections,s={generate:function(e,t,n,o){var i=document.createElement("input");return r.hasSoftwareKeyboard()||r.isFirefox()?(i.setAttribute("aria-hidden","true"),i.setAttribute("autocomplete","off"),i.setAttribute("data-braintree-direction",n),i.setAttribute("data-braintree-type",t),i.setAttribute("id","bt-"+t+"-"+n+"-"+e),i.setAttribute("style",JSON.stringify({border:"none !important",display:"block !important",height:"1px !important",left:"-1px !important",opacity:"0 !important",position:"absolute !important",top:"-1px !important",width:"1px !important"}).replace(/[{}"]/g,"").replace(/,/g,";")),i.classList.add("focus-intercept"),i.addEventListener("focus",(function(e){o(e),r.hasSoftwareKeyboard()||i.blur()})),i):document.createDocumentFragment()},destroy:function(e){var t;e?t=[document.getElementById(e)]:(t=document.querySelectorAll("[data-braintree-direction]"),t=[].slice.call(t)),t.forEach((function(e){e&&1===e.nodeType&&s.matchFocusElement(e.getAttribute("id"))&&e.parentNode.removeChild(e)}))},matchFocusElement:function(e){var t,n,r,o;return!!e&&!((t=e.split("-")).length<4)&&(n="bt"===t[0],r=i.indexOf(t[1])>-1,o=t[2]===a.BACK||t[2]===a.FORWARD,Boolean(n&&r&&o))}};t.exports=s},{"./browser-detection":111,"./constants":112}],116:[function(e,t,n){"use strict";var r=e("credit-card-type");t.exports=function(e){var t=r(e);return t.forEach((function(e){"mastercard"===e.type&&(e.type="master-card")})),t}},{"credit-card-type":44}],117:[function(e,t,n){"use strict";var r=e("./american-express"),o=e("./apple-pay"),i=e("./client"),a=e("./data-collector"),s=e("./hosted-fields"),c=e("./local-payment"),l=e("./masterpass"),u=e("./payment-request"),d=e("./paypal"),p=e("./paypal-checkout"),f=e("./google-payment"),h=e("./sepa"),_=e("./three-d-secure"),m=e("./unionpay"),E=e("./us-bank-account"),y=e("./vault-manager"),g=e("./venmo"),v=e("./visa-checkout"),A=e("./preferred-payment-methods");t.exports={americanExpress:r,applePay:o,client:i,dataCollector:a,hostedFields:s,localPayment:c,masterpass:l,googlePayment:f,paymentRequest:u,paypal:d,paypalCheckout:p,threeDSecure:_,unionpay:m,usBankAccount:E,vaultManager:y,venmo:g,visaCheckout:v,sepa:h,preferredPaymentMethods:A,VERSION:"3.100.0"}},{"./american-express":74,"./apple-pay":77,"./client":82,"./data-collector":98,"./google-payment":103,"./hosted-fields":110,"./local-payment":164,"./masterpass":167,"./payment-request":172,"./paypal":179,"./paypal-checkout":176,"./preferred-payment-methods":182,"./sepa":186,"./three-d-secure":198,"./unionpay":202,"./us-bank-account":208,"./vault-manager":211,"./venmo":216,"./visa-checkout":226}],118:[function(e,t,n){"use strict";var r=e("./create-authorization-data"),o=e("./json-clone"),i=e("./constants");t.exports=function(e,t){var n,a=t?o(t):{},s=r(e.authorization).attrs,c=o(e.analyticsMetadata);for(n in a.braintreeLibraryVersion=i.BRAINTREE_LIBRARY_VERSION,a._meta)a._meta.hasOwnProperty(n)&&(c[n]=a._meta[n]);return a._meta=c,s.tokenizationKey?a.tokenizationKey=s.tokenizationKey:a.authorizationFingerprint=s.authorizationFingerprint,a}},{"./constants":126,"./create-authorization-data":130,"./json-clone":154}],119:[function(e,t,n){"use strict";var r=e("./constants"),o=e("./add-metadata");t.exports={sendEvent:function(e,t,n){var i=Date.now();return Promise.resolve(e).then((function(e){var a=Date.now(),s=e.getConfiguration(),c=e._request,l=s.gatewayConfiguration.analytics.url,u={analytics:[{kind:r.ANALYTICS_PREFIX+t,isAsync:Math.floor(a/1e3)!==Math.floor(i/1e3),timestamp:i}]};c({url:l,method:"post",data:o(s,u),timeout:r.ANALYTICS_REQUEST_TIMEOUT_MS},n)})).catch((function(e){n&&n(e)}))}}},{"./add-metadata":118,"./constants":126}],120:[function(e,t,n){"use strict";var r=e("@braintree/asset-loader/load-script");t.exports={loadScript:r}},{"@braintree/asset-loader/load-script":3}],121:[function(e,t,n){"use strict";var r="function"==typeof Object.assign?Object.assign:o;function o(e){var t,n,r;for(t=1;t<arguments.length;t++)for(r in n=arguments[t])n.hasOwnProperty(r)&&(e[r]=n[r]);return e}t.exports={assign:r,_assign:o}},{}],122:[function(e,t,n){"use strict";var r=e("./braintree-error"),o=e("./errors"),i="3.100.0";t.exports={verify:function(e){var t,n,a;return e?(a=e.name,t=e.client,n=e.authorization,t||n?n||t.getVersion()===i?Promise.resolve():Promise.reject(new r({type:o.INCOMPATIBLE_VERSIONS.type,code:o.INCOMPATIBLE_VERSIONS.code,message:"Client (version "+t.getVersion()+") and "+a+" (version "+i+") components must be from the same SDK version."})):Promise.reject(new r({type:o.INSTANTIATION_OPTION_REQUIRED.type,code:o.INSTANTIATION_OPTION_REQUIRED.code,message:"options.client is required when instantiating "+a+"."}))):Promise.reject(new r({type:o.INVALID_USE_OF_INTERNAL_FUNCTION.type,code:o.INVALID_USE_OF_INTERNAL_FUNCTION.code,message:"Options must be passed to basicComponentVerification function."}))}}},{"./braintree-error":124,"./errors":135}],123:[function(e,t,n){"use strict";var r=e("./once");function o(e,t){0===e.length?(e(),t(null)):e(t)}t.exports=function(e,t){var n,i=e.length,a=i,s=r(t);if(0!==i)for(n=0;n<i;n++)o(e[n],c);else s(null);function c(e){e?s(e):0==(a-=1)&&s(null)}}},{"./once":156}],124:[function(e,t,n){"use strict";var r=e("./enumerate");function o(e){if(!o.types.hasOwnProperty(e.type))throw new Error(e.type+" is not a valid type.");if(!e.code)throw new Error("Error code required.");if(!e.message)throw new Error("Error message required.");this.name="BraintreeError",this.code=e.code,this.message=e.message,this.type=e.type,this.details=e.details}o.prototype=Object.create(Error.prototype),o.prototype.constructor=o,o.types=r(["CUSTOMER","MERCHANT","NETWORK","INTERNAL","UNKNOWN"]),o.findRootError=function(e){return e instanceof o&&e.details&&e.details.originalError?o.findRootError(e.details.originalError):e},t.exports=o},{"./enumerate":134}],125:[function(e,t,n){"use strict";t.exports=function(e){return Object.keys(e).reduce((function(t,n){return t[function(e){return e.replace(/([a-z\d])([A-Z])/g,"$1_$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g,"$1_$2").toLowerCase()}(n)]=e[n],t}),{})}},{}],126:[function(e,t,n){"use strict";var r="3.100.0",o="web";t.exports={ANALYTICS_PREFIX:o+".",ANALYTICS_REQUEST_TIMEOUT_MS:2e3,ASSETS_URLS:{production:"https://assets.braintreegateway.com",sandbox:"https://assets.braintreegateway.com"},CLIENT_API_URLS:{production:"https://api.braintreegateway.com:443",sandbox:"https://api.sandbox.braintreegateway.com:443"},FRAUDNET_SOURCE:"BRAINTREE_SIGNIN",FRAUDNET_FNCLS:"fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99",FRAUDNET_URL:"https://c.paypal.com/da/r/fb.js",BUS_CONFIGURATION_REQUEST_EVENT:"BUS_CONFIGURATION_REQUEST",GRAPHQL_URLS:{production:"https://payments.braintree-api.com/graphql",sandbox:"https://payments.sandbox.braintree-api.com/graphql"},INTEGRATION_TIMEOUT_MS:6e4,VERSION:r,INTEGRATION:"custom",SOURCE:"client",PLATFORM:o,BRAINTREE_LIBRARY_VERSION:"braintree/web/"+r}},{}],127:[function(e,t,n){"use strict";var r=e("./braintree-error"),o=e("./errors");t.exports=function(e,t){t.forEach((function(t){e[t]=function(){throw new r({type:o.METHOD_CALLED_AFTER_TEARDOWN.type,code:o.METHOD_CALLED_AFTER_TEARDOWN.code,message:t+" cannot be called after teardown."})}}))}},{"./braintree-error":124,"./errors":135}],128:[function(e,t,n){"use strict";var r=e("./braintree-error");t.exports=function(e,t){return e instanceof r?e:new r({type:t.type,code:t.code,message:t.message,details:{originalError:e}})}},{"./braintree-error":124}],129:[function(e,t,n){"use strict";var r=e("./constants").ASSETS_URLS;t.exports={create:function(e){return r.production}}},{"./constants":126}],130:[function(e,t,n){"use strict";var r=e("../lib/vendor/polyfill").atob,o=e("../lib/constants").CLIENT_API_URLS;t.exports=function(e){var t,n,i,a,s={attrs:{},configUrl:""};return/^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9_]+$/.test(e)?(i=e.split("_"),a=i[0],n={merchantId:i.slice(2).join("_"),environment:a},s.environment=n.environment,s.attrs.tokenizationKey=e,s.configUrl=o[n.environment]+"/merchants/"+n.merchantId+"/client_api/v1/configuration"):(t=JSON.parse(r(e)),s.environment=t.environment,s.attrs.authorizationFingerprint=t.authorizationFingerprint,s.configUrl=t.configUrl,s.graphQL=t.graphQL),s}},{"../lib/constants":126,"../lib/vendor/polyfill":161}],131:[function(e,t,n){"use strict";var r=e("./braintree-error"),o=e("./assets"),i=e("./errors"),a="3.100.0";t.exports={create:function(e){var t=Promise.resolve();return e.client?Promise.resolve(e.client):(window.braintree&&window.braintree.client||(t=o.loadScript({src:e.assetsUrl+"/web/"+a+"/js/client.min.js"}).catch((function(e){return Promise.reject(new r({type:i.CLIENT_SCRIPT_FAILED_TO_LOAD.type,code:i.CLIENT_SCRIPT_FAILED_TO_LOAD.code,message:i.CLIENT_SCRIPT_FAILED_TO_LOAD.message,details:{originalError:e}}))}))),t.then((function(){return window.braintree.client.VERSION!==a?Promise.reject(new r({type:i.INCOMPATIBLE_VERSIONS.type,code:i.INCOMPATIBLE_VERSIONS.code,message:"Client (version "+window.braintree.client.VERSION+") and "+e.name+" (version "+a+") components must be from the same SDK version."})):window.braintree.client.create({authorization:e.authorization,debug:e.debug})})))}}},{"./assets":120,"./braintree-error":124,"./errors":135}],132:[function(e,t,n){"use strict";t.exports=function(e){return function(){var t=arguments;setTimeout((function(){e.apply(null,t)}),1)}}},{}],133:[function(e,t,n){"use strict";var r=e("./batch-execute-functions");function o(){this._teardownRegistry=[],this._isTearingDown=!1}o.prototype.registerFunctionForTeardown=function(e){"function"==typeof e&&this._teardownRegistry.push(e)},o.prototype.teardown=function(e){this._isTearingDown?e(new Error("Destructor is already tearing down")):(this._isTearingDown=!0,r(this._teardownRegistry,function(t){this._teardownRegistry=[],this._isTearingDown=!1,"function"==typeof e&&e(t)}.bind(this)))},t.exports=o},{"./batch-execute-functions":123}],134:[function(e,t,n){"use strict";t.exports=function(e,t){return t=null==t?"":t,e.reduce((function(e,n){return e[n]=t+n,e}),{})}},{}],135:[function(e,t,n){"use strict";var r=e("./braintree-error");t.exports={INVALID_USE_OF_INTERNAL_FUNCTION:{type:r.types.INTERNAL,code:"INVALID_USE_OF_INTERNAL_FUNCTION"},INSTANTIATION_OPTION_REQUIRED:{type:r.types.MERCHANT,code:"INSTANTIATION_OPTION_REQUIRED"},INCOMPATIBLE_VERSIONS:{type:r.types.MERCHANT,code:"INCOMPATIBLE_VERSIONS"},CLIENT_SCRIPT_FAILED_TO_LOAD:{type:r.types.NETWORK,code:"CLIENT_SCRIPT_FAILED_TO_LOAD",message:"Braintree client script could not be loaded."},METHOD_CALLED_AFTER_TEARDOWN:{type:r.types.MERCHANT,code:"METHOD_CALLED_AFTER_TEARDOWN"}}},{"./braintree-error":124}],136:[function(e,t,n){"use strict";t.exports=function(e){for(;e.parentNode;)e=e.parentNode;return e}},{}],137:[function(e,t,n){"use strict";t.exports=function(e,t,n){var r;for(r=0;r<e.length;r++)if(e[r].hasOwnProperty(t)&&e[r][t]===n)return e[r];return null}},{}],138:[function(e,t,n){"use strict";var r=e("./strategies/popup"),o=e("./strategies/popup-bridge"),i=e("./strategies/modal"),a=e("framebus"),s=e("../shared/events"),c=e("../shared/errors"),l=e("../shared/constants"),u=e("@braintree/uuid"),d=e("@braintree/iframer"),p=e("../../braintree-error"),f=e("../shared/browser-detection"),h=e("./../../assign").assign,_=e("../../constants").BUS_CONFIGURATION_REQUEST_EVENT,m=["name","dispatchFrameUrl","openFrameUrl"];function E(){}function y(e){(function(e){if(!e)throw new Error("Valid configuration is required");if(m.forEach((function(t){if(!e.hasOwnProperty(t))throw new Error("A valid frame "+t+" must be provided")})),!/^[\w_]+$/.test(e.name))throw new Error("A valid frame name must be provided")})(e),this._serviceId=u().replace(/-/g,""),this._options={name:e.name+"_"+this._serviceId,dispatchFrameUrl:e.dispatchFrameUrl,openFrameUrl:e.openFrameUrl,height:e.height,width:e.width,top:e.top,left:e.left},this.state=e.state||{},this._bus=new a({channel:this._serviceId}),this._setBusEvents()}y.prototype.initialize=function(e){var t=function(){e(),this._bus.off(s.DISPATCH_FRAME_READY,t)}.bind(this);this._bus.on(s.DISPATCH_FRAME_READY,t),this._writeDispatchFrame()},y.prototype._writeDispatchFrame=function(){var e=l.DISPATCH_FRAME_NAME+"_"+this._serviceId,t=this._options.dispatchFrameUrl;this._dispatchFrame=d({"aria-hidden":!0,name:e,title:e,src:t,class:l.DISPATCH_FRAME_CLASS,height:0,width:0,style:{position:"absolute",left:"-9999px"}}),document.body.appendChild(this._dispatchFrame)},y.prototype._setBusEvents=function(){this._bus.on(s.DISPATCH_FRAME_REPORT,function(e,t){this._onCompleteCallback&&this._onCompleteCallback.call(null,e.err,e.payload),this._frame.close(),this._onCompleteCallback=null,t&&t()}.bind(this)),this._bus.on(_,function(e){e(this.state)}.bind(this))},y.prototype.open=function(e,t){if(e=e||{},this._frame=this._getFrameForEnvironment(e),this._frame.initialize(t),!(this._frame instanceof o)){if(h(this.state,e.state),this._onCompleteCallback=t,this._frame.open(),this.isFrameClosed())return this._cleanupFrame(),void(t&&t(new p(c.FRAME_SERVICE_FRAME_OPEN_FAILED)));this._pollForPopupClose()}},y.prototype.redirect=function(e){this._frame&&!this.isFrameClosed()&&this._frame.redirect(e)},y.prototype.close=function(){this.isFrameClosed()||this._frame.close()},y.prototype.focus=function(){this.isFrameClosed()||this._frame.focus()},y.prototype.createHandler=function(e){return e=e||{},{close:function(){e.beforeClose&&e.beforeClose(),this.close()}.bind(this),focus:function(){e.beforeFocus&&e.beforeFocus(),this.focus()}.bind(this)}},y.prototype.createNoopHandler=function(){return{close:E,focus:E}},y.prototype.teardown=function(){this.close(),this._dispatchFrame.parentNode.removeChild(this._dispatchFrame),this._dispatchFrame=null,this._cleanupFrame()},y.prototype.isFrameClosed=function(){return null==this._frame||this._frame.isClosed()},y.prototype._cleanupFrame=function(){this._frame=null,clearInterval(this._popupInterval),this._popupInterval=null},y.prototype._pollForPopupClose=function(){return this._popupInterval=setInterval(function(){this.isFrameClosed()&&(this._cleanupFrame(),this._onCompleteCallback&&this._onCompleteCallback(new p(c.FRAME_SERVICE_FRAME_CLOSED)))}.bind(this),l.POPUP_POLL_INTERVAL),this._popupInterval},y.prototype._getFrameForEnvironment=function(e){var t=f.supportsPopups(),n=Boolean(window.popupBridge),a=h({},this._options,e);return n?new o(a):t?new r(a):new i(a)},t.exports=y},{"../../braintree-error":124,"../../constants":126,"../shared/browser-detection":145,"../shared/constants":146,"../shared/errors":147,"../shared/events":148,"./../../assign":121,"./strategies/modal":140,"./strategies/popup":143,"./strategies/popup-bridge":141,"@braintree/iframer":35,"@braintree/uuid":39,framebus:52}],139:[function(e,t,n){"use strict";var r=e("./frame-service");t.exports={create:function(e,t){var n=new r(e);n.initialize((function(){t(n)}))}}},{"./frame-service":138}],140:[function(e,t,n){"use strict";var r=e("@braintree/iframer"),o=e("../../../assign").assign,i=e("../../shared/browser-detection"),a={position:"fixed",top:0,left:0,bottom:0,padding:0,margin:0,border:0,outline:"none",zIndex:20001,background:"#FFFFFF"};function s(){}function c(e){this._closed=null,this._frame=null,this._options=e||{},this._container=this._options.container||document.body}c.prototype.initialize=s,c.prototype.open=function(){var e={src:this._options.openFrameUrl,name:this._options.name,scrolling:"yes",height:"100%",width:"100%",style:o({},a),title:"Lightbox Frame"};i.isIos()?(i.isIosWKWebview()&&(this._lockScrolling(),e.style={}),this._el=document.createElement("div"),o(this._el.style,a,{height:"100%",width:"100%",overflow:"auto","-webkit-overflow-scrolling":"touch"}),this._frame=r(e),this._el.appendChild(this._frame)):this._el=this._frame=r(e),this._closed=!1,this._container.appendChild(this._el)},c.prototype.focus=s,c.prototype.close=function(){this._container.removeChild(this._el),this._frame=null,this._closed=!0,i.isIosWKWebview()&&this._unlockScrolling()},c.prototype.isClosed=function(){return Boolean(this._closed)},c.prototype.redirect=function(e){this._frame.src=e},c.prototype._unlockScrolling=function(){document.body.style.overflow=this._savedBodyProperties.overflowStyle,document.body.style.position=this._savedBodyProperties.positionStyle,window.scrollTo(this._savedBodyProperties.left,this._savedBodyProperties.top),delete this._savedBodyProperties},c.prototype._lockScrolling=function(){var e=document.documentElement;this._savedBodyProperties={left:(window.pageXOffset||e.scrollLeft)-(e.clientLeft||0),top:(window.pageYOffset||e.scrollTop)-(e.clientTop||0),overflowStyle:document.body.style.overflow,positionStyle:document.body.style.position},document.body.style.overflow="hidden",document.body.style.position="fixed",window.scrollTo(0,0)},t.exports=c},{"../../../assign":121,"../../shared/browser-detection":145,"@braintree/iframer":35}],141:[function(e,t,n){"use strict";var r=e("../../../braintree-error"),o=e("../../shared/errors");function i(){}function a(e){this._closed=null,this._options=e}a.prototype.initialize=function(e){var t=this;window.popupBridge.onComplete=function(n,i){var a=!i&&!n;t._closed=!0,n||a?e(new r(o.FRAME_SERVICE_FRAME_CLOSED)):e(null,i)}},a.prototype.open=function(e){var t;t=(e=e||{}).openFrameUrl||this._options.openFrameUrl,this._closed=!1,window.popupBridge.open(t)},a.prototype.focus=i,a.prototype.close=i,a.prototype.isClosed=function(){return Boolean(this._closed)},a.prototype.redirect=function(e){this.open({openFrameUrl:e})},t.exports=a},{"../../../braintree-error":124,"../../shared/errors":147}],142:[function(e,t,n){"use strict";var r=e("../../../shared/constants"),o=e("./position");function i(e,t,n){return void 0!==t?t:o[e](n)}t.exports=function(e){var t=e.height||r.DEFAULT_POPUP_HEIGHT,n=e.width||r.DEFAULT_POPUP_WIDTH,o=i("top",e.top,t),a=i("left",e.left,n);return[r.POPUP_BASE_OPTIONS,"height="+t,"width="+n,"top="+o,"left="+a].join(",")}},{"../../../shared/constants":146,"./position":144}],143:[function(e,t,n){"use strict";var r=e("./compose-options");function o(e){this._frame=null,this._options=e||{}}o.prototype.initialize=function(){},o.prototype.open=function(){this._frame=window.open(this._options.openFrameUrl,this._options.name,r(this._options))},o.prototype.focus=function(){this._frame.focus()},o.prototype.close=function(){this._frame.closed||this._frame.close()},o.prototype.isClosed=function(){return!this._frame||Boolean(this._frame.closed)},o.prototype.redirect=function(e){this._frame.location.href=e},t.exports=o},{"./compose-options":142}],144:[function(e,t,n){"use strict";function r(e,t,n){return(e-t)/2+n}t.exports={top:function(e){return r(window.outerHeight||document.documentElement.clientHeight,e,null==window.screenY?window.screenTop:window.screenY)},left:function(e){return r(window.outerWidth||document.documentElement.clientWidth,e,null==window.screenX?window.screenLeft:window.screenX)},center:r}},{}],145:[function(e,t,n){"use strict";t.exports={isIos:e("@braintree/browser-detection/is-ios"),isIosWKWebview:e("@braintree/browser-detection/is-ios-wkwebview"),supportsPopups:e("@braintree/browser-detection/supports-popups")}},{"@braintree/browser-detection/is-ios":30,"@braintree/browser-detection/is-ios-wkwebview":29,"@braintree/browser-detection/supports-popups":32}],146:[function(e,t,n){"use strict";t.exports={DISPATCH_FRAME_NAME:"dispatch",DISPATCH_FRAME_CLASS:"braintree-dispatch-frame",POPUP_BASE_OPTIONS:"resizable,scrollbars",DEFAULT_POPUP_WIDTH:450,DEFAULT_POPUP_HEIGHT:535,POPUP_POLL_INTERVAL:100,POPUP_CLOSE_TIMEOUT:100}},{}],147:[function(e,t,n){"use strict";var r=e("../../braintree-error");t.exports={FRAME_SERVICE_FRAME_CLOSED:{type:r.types.INTERNAL,code:"FRAME_SERVICE_FRAME_CLOSED",message:"Frame closed before tokenization could occur."},FRAME_SERVICE_FRAME_OPEN_FAILED:{type:r.types.INTERNAL,code:"FRAME_SERVICE_FRAME_OPEN_FAILED",message:"Frame failed to open."}}},{"../../braintree-error":124}],148:[function(e,t,n){"use strict";var r=e("../../enumerate");t.exports=r(["DISPATCH_FRAME_READY","DISPATCH_FRAME_REPORT"],"frameService:")},{"../../enumerate":134}],149:[function(e,t,n){"use strict";var r="3.100.0",o=e("./assign").assign;function i(e,t){var n=e.analyticsMetadata,i={gateway:"braintree","braintree:merchantId":e.gatewayConfiguration.merchantId,"braintree:apiVersion":"v1","braintree:sdkVersion":r,"braintree:metadata":JSON.stringify({source:n.source,integration:n.integration,sessionId:n.sessionId,version:r,platform:n.platform})};return o({},i,t)}t.exports=function(e,t,n){var r,o,a=e.gatewayConfiguration.androidPay,s="production"===e.gatewayConfiguration.environment?"PRODUCTION":"TEST";return 2===t?(r={apiVersion:2,apiVersionMinor:0,environment:s,allowedPaymentMethods:[{type:"CARD",parameters:{allowedAuthMethods:["PAN_ONLY","CRYPTOGRAM_3DS"],allowedCardNetworks:a.supportedNetworks.map((function(e){return e.toUpperCase()}))},tokenizationSpecification:{type:"PAYMENT_GATEWAY",parameters:i(e,{"braintree:authorizationFingerprint":a.googleAuthorizationFingerprint})}}]},n&&(r.merchantInfo={merchantId:n}),a.paypalClientId&&(o={type:"PAYPAL",parameters:{purchase_context:{purchase_units:[{payee:{client_id:a.paypalClientId},recurring_payment:!0}]}},tokenizationSpecification:{type:"PAYMENT_GATEWAY",parameters:i(e,{"braintree:paypalClientId":a.paypalClientId})}},r.allowedPaymentMethods.push(o))):(r={environment:s,allowedPaymentMethods:["CARD","TOKENIZED_CARD"],paymentMethodTokenizationParameters:{tokenizationType:"PAYMENT_GATEWAY",parameters:i(e,{"braintree:authorizationFingerprint":a.googleAuthorizationFingerprint})},cardRequirements:{allowedCardNetworks:a.supportedNetworks.map((function(e){return e.toUpperCase()}))}},"TOKENIZATION_KEY"===e.authorizationType&&(r.paymentMethodTokenizationParameters.parameters["braintree:clientKey"]=e.authorization),n&&(r.merchantId=n),t&&(r.apiVersion=t)),r}},{"./assign":121}],150:[function(e,t,n){"use strict";t.exports=function(e){e=e||window;try{return e.self!==e.top}catch(e){return!0}}},{}],151:[function(e,t,n){"use strict";function r(e){var t=e.split("-");return new Date(t[0],t[1],t[2])}t.exports=function(e,t){return r(e)<=r(t)}},{}],152:[function(e,t,n){"use strict";t.exports={isHTTPS:function(e){return"https:"===(e||window.location.protocol)}}},{}],153:[function(e,t,n){"use strict";var r,o={"paypal.com":1,"braintreepayments.com":1,"braintreegateway.com":1,"braintree-api.com":1};t.exports=function(e){var t;return e=e.toLowerCase(),!!/^https:/.test(e)&&((r=r||document.createElement("a")).href=e,t=r.hostname.split(".").slice(-2).join("."),o.hasOwnProperty(t))}},{}],154:[function(e,t,n){"use strict";t.exports=function(e){return JSON.parse(JSON.stringify(e))}},{}],155:[function(e,t,n){"use strict";t.exports=function(e){return Object.keys(e).filter((function(t){return"function"==typeof e[t]}))}},{}],156:[function(e,t,n){"use strict";t.exports=function(e){var t=!1;return function(){t||(t=!0,e.apply(null,arguments))}}},{}],157:[function(e,t,n){"use strict";function r(e){return e=e||window.location.href,/\?/.test(e)}function o(e,t){var n,r,i,a,s=[];for(i in e)e.hasOwnProperty(i)&&(r=e[i],n=t?(a=e)&&"object"==typeof a&&"number"==typeof a.length&&"[object Array]"===Object.prototype.toString.call(a)?t+"[]":t+"["+i+"]":i,"object"==typeof r?s.push(o(r,n)):s.push(encodeURIComponent(n)+"="+encodeURIComponent(r)));return s.join("&")}t.exports={parse:function(e){return r(e=e||window.location.href)?(e.split("?")[1]||"").replace(/#.*$/,"").split("&").reduce((function(e,t){var n=t.split("="),r=decodeURIComponent(n[0]),o=decodeURIComponent(n[1]);return e[r]=o,e}),{}):{}},stringify:o,queryify:function(e,t){return e=e||"",null!=t&&"object"==typeof t&&function(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}(t)&&(e+=-1===e.indexOf("?")?"?":"",e+=-1!==e.indexOf("=")?"&":"",e+=o(t)),e},hasQueryParams:r}},{}],158:[function(e,t,n){"use strict";var r=e("@braintree/uuid"),o=e("./find-root-node");function i(e){return"[object ShadowRoot]"===(e=o(e)).toString()}function a(e){return i(e=o(e))?e.host:null}t.exports={isShadowElement:i,getShadowHost:a,transformToSlot:function e(t,n){var s=o(t).querySelector("style"),c=a(t),l="shadow-slot-"+r(),u=document.createElement("slot"),d=document.createElement("div");return u.setAttribute("name",l),t.appendChild(u),d.setAttribute("slot",l),c.appendChild(d),n&&(s||(s=document.createElement("style"),t.appendChild(s)),s.sheet.insertRule('::slotted([slot="'+l+'"]) { '+n+" }")),i(c)?e(d,n):d}}},{"./find-root-node":136,"@braintree/uuid":39}],159:[function(e,t,n){"use strict";t.exports=function(e){return-1===e.indexOf("_")?e:e.toLowerCase().replace(/(\_\w)/g,(function(e){return e[1].toUpperCase()}))}},{}],160:[function(e,t,n){"use strict";t.exports=function(e){return e?"":".min"}},{}],161:[function(e,t,n){"use strict";var r="function"==typeof atob?atob:o;function o(e){var t,n,r,o,i,a,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",c="";if(!new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})([=]{1,2})?$").test(e))throw new Error("Non base64 encoded input passed to window.atob polyfill");a=0;do{t=(63&s.indexOf(e.charAt(a++)))<<2|(o=s.indexOf(e.charAt(a++)))>>4&3,n=(15&o)<<4|(i=s.indexOf(e.charAt(a++)))>>2&15,r=(3&i)<<6|63&s.indexOf(e.charAt(a++)),c+=String.fromCharCode(t)+(n?String.fromCharCode(n):"")+(r?String.fromCharCode(r):"")}while(a<e.length);return c}t.exports={atob:function(e){return r.call(window,e)},_atob:o}},{}],162:[function(e,t,n){"use strict";t.exports={REQUIRED_OPTIONS_FOR_START_PAYMENT:["givenName","surname","currencyCode","onPaymentStart","paymentType","amount","fallback"],REQUIRED_OPTIONS_FOR_PAY_UPON_INVOICE_PAYMENT_TYPE:["givenName","surname","currencyCode","onPaymentStart","paymentType","amount","address","billingAddress","birthDate","email","locale","customerServiceInstructions","correlationId","phone","phoneCountryCode","lineItems"],REQUIRED_OPTIONS_FOR_ADDRESS:["streetAddress","locality","postalCode","countryCode"],REQUIRED_OPTIONS_FOR_LINE_ITEMS:["category","name","quantity","unitAmount","unitTaxAmount"],REQUIRED_OPTIONS_FOR_BLIK_SEAMLESS_PAYMENT_TYPE:["givenName","surname","currencyCode","onPaymentStart","paymentType","amount"],REQUIRED_OPTIONS_FOR_BLIK_OPTIONS_LEVEL_0:["authCode"],REQUIRED_OPTIONS_FOR_BLIK_OPTIONS_ONE_CLICK_FIRST:["authCode","consumerReference","aliasLabel"],REQUIRED_OPTIONS_FOR_BLIK_OPTIONS_ONE_CLICK_SUBSEQUENT:["consumerReference","aliasKey"]}},{}],163:[function(e,t,n){"use strict";var r=e("../../lib/frame-service/external"),o=e("../../lib/braintree-error"),i=e("../../lib/use-min"),a=e("../../lib/constants").INTEGRATION_TIMEOUT_MS,s=e("../../lib/analytics"),c=e("../../lib/methods"),l=e("../../lib/convert-methods-to-error"),u=e("../../lib/convert-to-braintree-error"),d=e("@braintree/extended-promise"),p=e("../../lib/querystring"),f=e("@braintree/wrap-promise"),h=e("./constants"),_=e("../shared/errors");function m(e){this._client=e.client,this._assetsUrl=e.client.getConfiguration().gatewayConfiguration.assetsUrl+"/web/3.100.0",this._isDebug=e.client.getConfiguration().isDebug,this._loadingFrameUrl=this._assetsUrl+"/html/local-payment-landing-frame"+i(this._isDebug)+".html",this._authorizationInProgress=!1,this._paymentType="unknown",this._merchantAccountId=e.merchantAccountId}function E(e){var t=e.blikOptions||{},n="string"==typeof e.paymentType?e.paymentType.toLowerCase():e.paymentType;return"pay_upon_invoice"===n||"blik"===n&&(t.hasOwnProperty("level_0")||t.hasOwnProperty("oneClick"))}function y(e){var t,n;for(t=0;t<h.REQUIRED_OPTIONS_FOR_ADDRESS.length;t++)if(n=h.REQUIRED_OPTIONS_FOR_ADDRESS[t],!e.hasOwnProperty(n))return n;return!1}function g(e){var t,n,r,o;for(n=0;n<e.length;n++)for(r=e[n],t=0;t<h.REQUIRED_OPTIONS_FOR_LINE_ITEMS.length;t++)if(o=h.REQUIRED_OPTIONS_FOR_LINE_ITEMS[t],!r.hasOwnProperty(o))return o;return!1}function v(e){var t,n,r,o,i;if(!e)return!0;if(E(e)){if("pay_upon_invoice"===(i=e.paymentType||"").toLowerCase())for(t=0;t<h.REQUIRED_OPTIONS_FOR_PAY_UPON_INVOICE_PAYMENT_TYPE.length;t++){if(n=h.REQUIRED_OPTIONS_FOR_PAY_UPON_INVOICE_PAYMENT_TYPE[t],!e.hasOwnProperty(n))return n;if("address"===n||"billingAddress"===n){if(r=y(e[n]))return n+"."+r}else if("lineItems"===n&&(o=g(e[n])))return n+"."+o}else if("blik"===i.toLowerCase())return function(e){var t,n,r,o=e.blikOptions||{};for(t=0;t<h.REQUIRED_OPTIONS_FOR_BLIK_SEAMLESS_PAYMENT_TYPE.length;t++)if(n=h.REQUIRED_OPTIONS_FOR_BLIK_SEAMLESS_PAYMENT_TYPE[t],!e.hasOwnProperty(n))return n;if(o.hasOwnProperty("level_0")){for(t=0;t<h.REQUIRED_OPTIONS_FOR_BLIK_OPTIONS_LEVEL_0.length;t++)if(n=h.REQUIRED_OPTIONS_FOR_BLIK_OPTIONS_LEVEL_0[t],!o.level_0.hasOwnProperty(n))return"blikOptions.level_0."+n}else if(o.hasOwnProperty("oneClick"))if((r=o.oneClick||{}).hasOwnProperty("aliasKey")){for(t=0;t<h.REQUIRED_OPTIONS_FOR_BLIK_OPTIONS_ONE_CLICK_SUBSEQUENT.length;t++)if(n=h.REQUIRED_OPTIONS_FOR_BLIK_OPTIONS_ONE_CLICK_SUBSEQUENT[t],!r.hasOwnProperty(n))return"blikOptions.oneClick."+n}else for(t=0;t<h.REQUIRED_OPTIONS_FOR_BLIK_OPTIONS_ONE_CLICK_FIRST.length;t++)if(n=h.REQUIRED_OPTIONS_FOR_BLIK_OPTIONS_ONE_CLICK_FIRST[t],!r.hasOwnProperty(n))return"blikOptions.oneClick."+n;return!1}(e)}else{for(t=0;t<h.REQUIRED_OPTIONS_FOR_START_PAYMENT.length;t++)if(n=h.REQUIRED_OPTIONS_FOR_START_PAYMENT[t],!e.hasOwnProperty(n))return n;if(!e.fallback.url)return"fallback.url";if(!e.fallback.buttonText)return"fallback.buttonText";if(!0===e.recurrent&&!e.customerId)return"customerId"}return!1}d.suppressUnhandledPromiseMessage=!0,m.prototype._initialize=function(){var e=this,t=this._client,n=setTimeout((function(){s.sendEvent(t,"local-payment.load.timed-out")}),a);return new Promise((function(o){r.create({name:"localpaymentlandingpage",dispatchFrameUrl:e._assetsUrl+"/html/dispatch-frame"+i(e._isDebug)+".html",openFrameUrl:e._loadingFrameUrl},(function(r){e._frameService=r,clearTimeout(n),s.sendEvent(t,"local-payment.load.succeeded"),o(e)}))}))},m.prototype.startPayment=function(e){var t,n,r,a,c,l,f,h,m,y=this,g=this._frameService._serviceId;return(t=v(e))?(n=new o(_.LOCAL_PAYMENT_START_PAYMENT_MISSING_REQUIRED_OPTION),"string"==typeof t&&(n.details="Missing required '"+t+"' option."),Promise.reject(n)):(h=e.windowOptions||{},r=e.address||{},a=e.fallback||{},f=e.billingAddress||{},c={amount:e.amount,bic:e.bic,billingAddress:{line1:f.streetAddress,line2:f.extendedAddress,city:f.locality,state:f.region,postalCode:f.postalCode,countryCode:f.countryCode},birthDate:e.birthDate,blikOptions:e.blikOptions,cancelUrl:p.queryify(y._assetsUrl+"/html/local-payment-redirect-frame"+i(y._isDebug)+".html",{channel:g,r:a.cancelUrl||a.url,t:a.cancelButtonText||a.buttonText,c:1}),city:r.locality,correlationId:e.correlationId,countryCode:r.countryCode,currencyIsoCode:e.currencyCode,discountAmount:e.discountAmount,experienceProfile:{brandName:e.displayName,customerServiceInstructions:e.customerServiceInstructions,locale:e.locale,noShipping:!e.shippingAddressRequired},firstName:e.givenName,fundingSource:e.paymentType,intent:"sale",lastName:e.surname,line1:r.streetAddress,line2:r.extendedAddress,lineItems:e.lineItems,merchantAccountId:y._merchantAccountId,merchantOrPartnerCustomerId:e.customerId,payerEmail:e.email,paymentTypeCountryCode:e.paymentTypeCountryCode,phone:e.phone,phoneCountryCode:e.phoneCountryCode,postalCode:r.postalCode,recurrent:e.recurrent,returnUrl:p.queryify(y._assetsUrl+"/html/local-payment-redirect-frame"+i(y._isDebug)+".html",{channel:g,r:a.url,t:a.buttonText}),shippingAmount:e.shippingAmount,state:r.region},y._paymentType=e.paymentType.toLowerCase(),y._authorizationInProgress?(s.sendEvent(y._client,y._paymentType+".local-payment.start-payment.error.already-opened"),Promise.reject(new o(_.LOCAL_PAYMENT_ALREADY_IN_PROGRESS))):(y._authorizationInProgress=!0,l=new d,E(e)||(y._startPaymentCallback=y._createStartPaymentCallback((function(e){l.resolve(e)}),(function(e){l.reject(e)})),y._frameService.open({width:h.width||1282,height:h.height||720},y._startPaymentCallback)),y._client.request({method:"post",endpoint:"local_payments/create",data:c}).then((function(t){var n=t.paymentResource.redirectUrl;s.sendEvent(y._client,y._paymentType+".local-payment.start-payment.opened"),y._startPaymentOptions=e,E(e)?(y._authorizationInProgress=!1,"string"==typeof n&&n.length?l.reject(new o(_.LOCAL_PAYMENT_START_PAYMENT_DEFERRED_PAYMENT_FAILED)):(m=e.onPaymentStart({paymentId:t.paymentResource.paymentToken}))instanceof Promise?m.then((function(){l.resolve()})):l.resolve()):e.onPaymentStart({paymentId:t.paymentResource.paymentToken},(function(){y._frameService.redirect(t.paymentResource.redirectUrl)}))})).catch((function(e){var t=e.details&&e.details.httpStatus;y._frameService.close(),y._authorizationInProgress=!1,422!==t?l.reject(u(e,{type:_.LOCAL_PAYMENT_START_PAYMENT_FAILED.type,code:_.LOCAL_PAYMENT_START_PAYMENT_FAILED.code,message:_.LOCAL_PAYMENT_START_PAYMENT_FAILED.message})):l.reject(new o({type:_.LOCAL_PAYMENT_INVALID_PAYMENT_OPTION.type,code:_.LOCAL_PAYMENT_INVALID_PAYMENT_OPTION.code,message:_.LOCAL_PAYMENT_INVALID_PAYMENT_OPTION.message,details:{originalError:e}}))})),l))},m.prototype.tokenize=function(e){var t=this,n=this._client;return(e=e||p.parse()).queryItems&&(e=e.queryItems),e.c||e.wasCanceled?Promise.reject(new o({type:_.LOCAL_PAYMENT_CANCELED.type,code:_.LOCAL_PAYMENT_CANCELED.code,message:_.LOCAL_PAYMENT_CANCELED.message,details:{originalError:{errorcode:e.errorcode,token:e.btLpToken}}})):e.errorcode?Promise.reject(new o({type:_.LOCAL_PAYMENT_START_PAYMENT_FAILED.type,code:_.LOCAL_PAYMENT_START_PAYMENT_FAILED.code,message:_.LOCAL_PAYMENT_START_PAYMENT_FAILED.message,details:{originalError:{errorcode:e.errorcode,token:e.btLpToken}}})):n.request({endpoint:"payment_methods/paypal_accounts",method:"post",data:this._formatTokenizeData(e)}).then((function(e){var r=t._formatTokenizePayload(e);return window.popupBridge?s.sendEvent(n,t._paymentType+".local-payment.tokenization.success-popupbridge"):s.sendEvent(n,t._paymentType+".local-payment.tokenization.success"),r})).catch((function(e){return s.sendEvent(n,t._paymentType+".local-payment.tokenization.failed"),Promise.reject(u(e,{type:_.LOCAL_PAYMENT_TOKENIZATION_FAILED.type,code:_.LOCAL_PAYMENT_TOKENIZATION_FAILED.code,message:_.LOCAL_PAYMENT_TOKENIZATION_FAILED.message}))}))},m.prototype.closeWindow=function(){this._authoriztionInProgress&&s.sendEvent(this._client,this._paymentType+".local-payment.start-payment.closed.by-merchant"),this._frameService.close()},m.prototype.focusWindow=function(){this._frameService.focus()},m.prototype._createStartPaymentCallback=function(e,t){var n=this,r=this._client;return function(i,a){if(n._authorizationInProgress=!1,i)if("FRAME_SERVICE_FRAME_CLOSED"===i.code){if(a&&"processing_error"===a.errorcode)return s.sendEvent(r,n._paymentType+".local-payment.failed-in-window"),void t(new o(_.LOCAL_PAYMENT_START_PAYMENT_FAILED));s.sendEvent(r,n._paymentType+".local-payment.tokenization.closed.by-user"),t(new o(_.LOCAL_PAYMENT_WINDOW_CLOSED))}else i.code&&i.code.indexOf("FRAME_SERVICE_FRAME_OPEN_FAILED")>-1&&t(new o({code:_.LOCAL_PAYMENT_WINDOW_OPEN_FAILED.code,type:_.LOCAL_PAYMENT_WINDOW_OPEN_FAILED.type,message:_.LOCAL_PAYMENT_WINDOW_OPEN_FAILED.message,details:{originalError:i}}));else a&&(window.popupBridge||n._frameService.redirect(n._loadingFrameUrl),n.tokenize(a).then(e).catch(t).then((function(){n._frameService.close()})))}},m.prototype._formatTokenizePayload=function(e){var t,n={};return e.paypalAccounts&&(n=e.paypalAccounts[0]),t={nonce:n.nonce,details:{},type:n.type},n.details&&(n.details.payerInfo&&(t.details=n.details.payerInfo),n.details.correlationId&&(t.correlationId=n.details.correlationId)),t},m.prototype.hasTokenizationParams=function(){var e=p.parse();return!!e.errorcode||Boolean(e.btLpToken&&e.btLpPaymentId&&e.btLpPayerId)},m.prototype._formatTokenizeData=function(e){var t=this._client.getConfiguration().gatewayConfiguration;return{merchantAccountId:this._merchantAccountId,paypalAccount:{correlationId:e.btLpToken||e.token,paymentToken:e.btLpPaymentId||e.paymentId,payerId:e.btLpPayerId||e.PayerID,unilateral:t.paypal.unvettedMerchant,intent:"sale"}}},m.prototype.teardown=function(){var e=this;return e._frameService.teardown(),l(e,c(m.prototype)),s.sendEvent(e._client,"local-payment.teardown-completed"),Promise.resolve()},t.exports=f.wrapPrototype(m)},{"../../lib/analytics":119,"../../lib/braintree-error":124,"../../lib/constants":126,"../../lib/convert-methods-to-error":127,"../../lib/convert-to-braintree-error":128,"../../lib/frame-service/external":139,"../../lib/methods":155,"../../lib/querystring":157,"../../lib/use-min":160,"../shared/errors":165,"./constants":162,"@braintree/extended-promise":34,"@braintree/wrap-promise":43}],164:[function(e,t,n){"use strict";var r=e("../lib/analytics"),o=e("../lib/basic-component-verification"),i=e("../lib/create-deferred-client"),a=e("../lib/create-assets-url"),s=e("./external/local-payment"),c=e("@braintree/wrap-promise"),l=e("../lib/braintree-error"),u=e("./shared/errors");t.exports={create:c((function(e){var t="Local Payment";return o.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){return i.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:a.create(e.authorization),name:t})})).then((function(t){var n=t.getConfiguration();return e.client=t,!0!==n.gatewayConfiguration.paypalEnabled?Promise.reject(new l(u.LOCAL_PAYMENT_NOT_ENABLED)):(r.sendEvent(t,"local-payment.initialized"),new s(e)._initialize())}))})),VERSION:"3.100.0"}},{"../lib/analytics":119,"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./external/local-payment":163,"./shared/errors":165,"@braintree/wrap-promise":43}],165:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error");t.exports={LOCAL_PAYMENT_NOT_ENABLED:{type:r.types.MERCHANT,code:"LOCAL_PAYMENT_NOT_ENABLED",message:"LocalPayment is not enabled for this merchant."},LOCAL_PAYMENT_ALREADY_IN_PROGRESS:{type:r.types.MERCHANT,code:"LOCAL_PAYMENT_ALREADY_IN_PROGRESS",message:"LocalPayment payment is already in progress."},LOCAL_PAYMENT_CANCELED:{type:r.types.CUSTOMER,code:"LOCAL_PAYMENT_CANCELED",message:"Customer canceled the LocalPayment before authorizing."},LOCAL_PAYMENT_WINDOW_CLOSED:{type:r.types.CUSTOMER,code:"LOCAL_PAYMENT_WINDOW_CLOSED",message:"Customer closed LocalPayment window before authorizing."},LOCAL_PAYMENT_WINDOW_OPEN_FAILED:{type:r.types.MERCHANT,code:"LOCAL_PAYMENT_WINDOW_OPEN_FAILED",message:"LocalPayment window failed to open; make sure startPayment was called in response to a user action."},LOCAL_PAYMENT_START_PAYMENT_FAILED:{type:r.types.NETWORK,code:"LOCAL_PAYMENT_START_PAYMENT_FAILED",message:"LocalPayment startPayment failed."},LOCAL_PAYMENT_START_PAYMENT_MISSING_REQUIRED_OPTION:{type:r.types.MERCHANT,code:"LOCAL_PAYMENT_START_PAYMENT_MISSING_REQUIRED_OPTION",message:"Missing required option for startPayment."},LOCAL_PAYMENT_START_PAYMENT_DEFERRED_PAYMENT_FAILED:{type:r.types.UNKNOWN,code:"LOCAL_PAYMENT_START_PAYMENT_DEFERRED_PAYMENT_FAILED",message:"LocalPayment startPayment deferred payment failed."},LOCAL_PAYMENT_TOKENIZATION_FAILED:{type:r.types.NETWORK,code:"LOCAL_PAYMENT_TOKENIZATION_FAILED",message:"Could not tokenize user's local payment method."},LOCAL_PAYMENT_INVALID_PAYMENT_OPTION:{type:r.types.MERCHANT,code:"LOCAL_PAYMENT_INVALID_PAYMENT_OPTION",message:"Local payment options are invalid."}}},{"../../lib/braintree-error":124}],166:[function(e,t,n){"use strict";var r=e("../../lib/frame-service/external"),o=e("../../lib/braintree-error"),i=e("../shared/errors"),a=e("../../lib/methods"),s=e("@braintree/wrap-promise"),c=e("../../lib/analytics"),l=e("../../lib/convert-methods-to-error"),u=e("../../lib/convert-to-braintree-error"),d=e("../shared/constants"),p=e("../../lib/constants").INTEGRATION_TIMEOUT_MS;function f(e){var t=e.client.getConfiguration();this._client=e.client,this._assetsUrl=t.gatewayConfiguration.assetsUrl+"/web/3.100.0",this._isDebug=t.isDebug,this._authInProgress=!1,window.popupBridge&&"function"==typeof window.popupBridge.getReturnUrlPrefix?this._callbackUrl=window.popupBridge.getReturnUrlPrefix()+"return":this._callbackUrl=this._assetsUrl+"/html/redirect-frame"+(this._isDebug?"":".min")+".html"}f.prototype._initialize=function(){var e=this;return new Promise((function(t){var n=setTimeout((function(){c.sendEvent(e._client,"masterpass.load.timed-out")}),p);r.create({name:d.LANDING_FRAME_NAME,height:d.POPUP_HEIGHT,width:d.POPUP_WIDTH,dispatchFrameUrl:e._assetsUrl+"/html/dispatch-frame"+(e._isDebug?"":".min")+".html",openFrameUrl:e._assetsUrl+"/html/masterpass-landing-frame"+(e._isDebug?"":".min")+".html"},(function(r){e._frameService=r,clearTimeout(n),c.sendEvent(e._client,"masterpass.load.succeeded"),t(e)}))}))},f.prototype.tokenize=function(e){var t=this;return!e||function(e){var t,n;for(t=0;t<d.REQUIRED_OPTIONS_FOR_TOKENIZE.length;t++)if(n=d.REQUIRED_OPTIONS_FOR_TOKENIZE[t],!e.hasOwnProperty(n))return!0;return!1}(e)?Promise.reject(new o(i.MASTERPASS_TOKENIZE_MISSING_REQUIRED_OPTION)):t._authInProgress?Promise.reject(new o(i.MASTERPASS_TOKENIZATION_ALREADY_IN_PROGRESS)):new Promise((function(n,r){t._navigateFrameToLoadingPage(e).catch(r),t._frameService.open(e.frameOptions,t._createFrameOpenHandler(n,r))}))},f.prototype._navigateFrameToLoadingPage=function(e){var t=this;return this._authInProgress=!0,this._client.request({method:"post",endpoint:"masterpass/request_token",data:{requestToken:{originUrl:window.location.protocol+"//"+window.location.hostname,subtotal:e.subtotal,currencyCode:e.currencyCode,callbackUrl:this._callbackUrl}}}).then((function(n){var r,o=t._assetsUrl+"/html/masterpass-loading-frame"+(t._isDebug?"":".min")+".html?",i=t._client.getConfiguration().gatewayConfiguration,a=e.config||{};r={environment:i.environment,requestToken:n.requestToken,callbackUrl:t._callbackUrl,merchantCheckoutId:i.masterpass.merchantCheckoutId,allowedCardTypes:i.masterpass.supportedNetworks,version:d.MASTERPASS_VERSION},Object.keys(a).forEach((function(e){"function"!=typeof a[e]&&(r[e]=a[e])})),o+=Object.keys(r).map((function(e){return e+"="+r[e]})).join("&"),t._frameService.redirect(o)})).catch((function(e){var n=e.details&&e.details.httpStatus;return t._closeWindow(),422===n?Promise.reject(u(e,i.MASTERPASS_INVALID_PAYMENT_OPTION)):Promise.reject(u(e,i.MASTERPASS_FLOW_FAILED))}))},f.prototype._createFrameOpenHandler=function(e,t){var n=this;return window.popupBridge?function(r,a){return n._authInProgress=!1,r?(c.sendEvent(n._client,"masterpass.tokenization.closed-popupbridge.by-user"),void t(u(r,i.MASTERPASS_POPUP_CLOSED))):a.queryItems?void n._tokenizeMasterpass(a.queryItems).then(e).catch(t):(c.sendEvent(n._client,"masterpass.tokenization.failed-popupbridge"),void t(new o(i.MASTERPASS_FLOW_FAILED)))}:function(r,a){if(r)return n._authInProgress=!1,"FRAME_SERVICE_FRAME_CLOSED"===r.code?(c.sendEvent(n._client,"masterpass.tokenization.closed.by-user"),void t(new o(i.MASTERPASS_POPUP_CLOSED))):r.code&&r.code.indexOf("FRAME_SERVICE_FRAME_OPEN_FAILED")>-1?(c.sendEvent(n._client,"masterpass.tokenization.failed.to-open"),void t(new o({code:i.MASTERPASS_POPUP_OPEN_FAILED.code,type:i.MASTERPASS_POPUP_OPEN_FAILED.type,message:i.MASTERPASS_POPUP_OPEN_FAILED.message,details:{originalError:r}}))):(c.sendEvent(n._client,"masterpass.tokenization.failed"),n._closeWindow(),void t(u(r,i.MASTERPASS_FLOW_FAILED)));n._tokenizeMasterpass(a).then(e).catch(t)}},f.prototype._tokenizeMasterpass=function(e){var t=this;return"success"!==e.mpstatus?(c.sendEvent(t._client,"masterpass.tokenization.closed.by-user"),t._closeWindow(),Promise.reject(new o(i.MASTERPASS_POPUP_CLOSED))):function(e){return[e.oauth_verifier,e.oauth_token,e.checkout_resource_url].some((function(e){return null==e||"null"===e}))}(e)?(c.sendEvent(t._client,"masterpass.tokenization.closed.missing-payload"),t._closeWindow(),Promise.reject(new o(i.MASTERPASS_POPUP_MISSING_REQUIRED_PARAMETERS))):t._client.request({endpoint:"payment_methods/masterpass_cards",method:"post",data:{masterpassCard:{checkoutResourceUrl:e.checkout_resource_url,requestToken:e.oauth_token,verifierToken:e.oauth_verifier}}}).then((function(e){return t._closeWindow(),window.popupBridge?c.sendEvent(t._client,"masterpass.tokenization.success-popupbridge"):c.sendEvent(t._client,"masterpass.tokenization.success"),e.masterpassCards[0]})).catch((function(e){return t._closeWindow(),window.popupBridge?c.sendEvent(t._client,"masterpass.tokenization.failed-popupbridge"):c.sendEvent(t._client,"masterpass.tokenization.failed"),Promise.reject(u(e,i.MASTERPASS_ACCOUNT_TOKENIZATION_FAILED))}))},f.prototype._closeWindow=function(){this._authInProgress=!1,this._frameService.close()},f.prototype.teardown=function(){var e=this;return new Promise((function(t){e._frameService.teardown(),l(e,a(f.prototype)),c.sendEvent(e._client,"masterpass.teardown-completed"),t()}))},t.exports=s.wrapPrototype(f)},{"../../lib/analytics":119,"../../lib/braintree-error":124,"../../lib/constants":126,"../../lib/convert-methods-to-error":127,"../../lib/convert-to-braintree-error":128,"../../lib/frame-service/external":139,"../../lib/methods":155,"../shared/constants":169,"../shared/errors":170,"@braintree/wrap-promise":43}],167:[function(e,t,n){"use strict";var r=e("../lib/braintree-error"),o=e("../lib/basic-component-verification"),i=e("./shared/browser-detection"),a=e("./external/masterpass"),s=e("../lib/create-deferred-client"),c=e("../lib/create-assets-url"),l=e("./shared/errors"),u=e("@braintree/wrap-promise");function d(){return Boolean(window.popupBridge||i.supportsPopups())}t.exports={create:u((function(e){var t="Masterpass";return o.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){return d()?Promise.resolve():Promise.reject(new r(l.MASTERPASS_BROWSER_NOT_SUPPORTED))})).then((function(){return s.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:c.create(e.authorization),name:t})})).then((function(t){return e.client=t,e.client.getConfiguration().gatewayConfiguration.masterpass?new a(e)._initialize():Promise.reject(new r(l.MASTERPASS_NOT_ENABLED))}))})),isSupported:d,VERSION:"3.100.0"}},{"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./external/masterpass":166,"./shared/browser-detection":168,"./shared/errors":170,"@braintree/wrap-promise":43}],168:[function(e,t,n){"use strict";t.exports={supportsPopups:e("@braintree/browser-detection/supports-popups")}},{"@braintree/browser-detection/supports-popups":32}],169:[function(e,t,n){"use strict";t.exports={LANDING_FRAME_NAME:"braintreemasterpasslanding",POPUP_WIDTH:450,POPUP_HEIGHT:660,MASTERPASS_VERSION:"v6",REQUIRED_OPTIONS_FOR_TOKENIZE:["subtotal","currencyCode"]}},{}],170:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error");t.exports={MASTERPASS_BROWSER_NOT_SUPPORTED:{type:r.types.CUSTOMER,code:"MASTERPASS_BROWSER_NOT_SUPPORTED",message:"Browser is not supported."},MASTERPASS_NOT_ENABLED:{type:r.types.MERCHANT,code:"MASTERPASS_NOT_ENABLED",message:"Masterpass is not enabled for this merchant."},MASTERPASS_TOKENIZE_MISSING_REQUIRED_OPTION:{type:r.types.MERCHANT,code:"MASTERPASS_TOKENIZE_MISSING_REQUIRED_OPTION",message:"Missing required option for tokenize."},MASTERPASS_TOKENIZATION_ALREADY_IN_PROGRESS:{type:r.types.MERCHANT,code:"MASTERPASS_TOKENIZATION_ALREADY_IN_PROGRESS",message:"Masterpass tokenization is already in progress."},MASTERPASS_ACCOUNT_TOKENIZATION_FAILED:{type:r.types.NETWORK,code:"MASTERPASS_ACCOUNT_TOKENIZATION_FAILED",message:"Could not tokenize user's Masterpass account."},MASTERPASS_POPUP_OPEN_FAILED:{type:r.types.MERCHANT,code:"MASTERPASS_POPUP_OPEN_FAILED",message:"Masterpass popup failed to open. Make sure to tokenize in response to a user action, such as a click."},MASTERPASS_POPUP_MISSING_REQUIRED_PARAMETERS:{type:r.types.MERCHANT,code:"MASTERPASS_POPUP_MISSING_REQUIRED_PARAMETERS",message:"Masterpass popup failed to return all required parameters needed to continue tokenization."},MASTERPASS_POPUP_CLOSED:{type:r.types.CUSTOMER,code:"MASTERPASS_POPUP_CLOSED",message:"Customer closed Masterpass popup before authorizing."},MASTERPASS_INVALID_PAYMENT_OPTION:{type:r.types.MERCHANT,code:"MASTERPASS_INVALID_PAYMENT_OPTION",message:"Masterpass payment options are invalid."},MASTERPASS_FLOW_FAILED:{type:r.types.NETWORK,code:"MASTERPASS_FLOW_FAILED",message:"Could not initialize Masterpass flow."}}},{"../../lib/braintree-error":124}],171:[function(e,t,n){"use strict";var r=e("../../lib/analytics"),o=e("../../lib/assign").assign,i=e("framebus"),a=e("../../lib/convert-methods-to-error"),s=e("../../lib/generate-google-pay-configuration"),c=e("@braintree/iframer"),l=e("@braintree/uuid"),u=e("../../lib/use-min"),d=e("../../lib/methods"),p=e("@braintree/event-emitter"),f=e("../../lib/braintree-error"),h=e("../shared/constants"),_=h.events,m=h.errors,E=e("@braintree/wrap-promise"),y={Visa:"visa",MasterCard:"mastercard","American Express":"amex","Diners Club":"diners",Discover:"discover",JCB:"jcb",UnionPay:"unionpay",Maestro:"maestro"};function g(e){var t=e.enabledPaymentMethods||{};p.call(this),this._componentId=l(),this._client=e.client,this._enabledPaymentMethods={basicCard:!1!==t.basicCard,googlePay:!1!==t.googlePay},this._googlePayVersion=2===e.googlePayVersion?2:1,this._googleMerchantId="18278000977346790994",this._supportedPaymentMethods=this._constructDefaultSupportedPaymentMethods(),this._defaultSupportedPaymentMethods=Object.keys(this._supportedPaymentMethods).map(function(e){return this._supportedPaymentMethods[e]}.bind(this)),this._bus=new i({channel:this._componentId})}p.createChild(g),g.prototype._constructDefaultSupportedPaymentMethods=function(){var e=this._client.getConfiguration(),t=e.gatewayConfiguration.androidPay,n=e.gatewayConfiguration.creditCards,r={};return this._enabledPaymentMethods.basicCard&&n&&n.supportedCardTypes.length>0&&(r.basicCard={supportedMethods:"basic-card",data:{supportedNetworks:n.supportedCardTypes.reduce((function(e,t){return t in y&&e.push(y[t]),e}),[])}}),this._enabledPaymentMethods.googlePay&&t&&t.enabled&&(r.googlePay={supportedMethods:"https://google.com/pay",data:s(e,this._googlePayVersion,this._googleMerchantId)}),r},g.prototype.initialize=function(){var e=this._client.getConfiguration(),t=this;return this._frame=c({allowPaymentRequest:!0,name:"braintree-payment-request-frame",class:"braintree-payment-request-frame",height:0,width:0,style:{position:"absolute",left:"-9999px"},title:"Secure Payment Frame"}),0===this._defaultSupportedPaymentMethods.length?Promise.reject(new f(m.PAYMENT_REQUEST_NO_VALID_SUPPORTED_PAYMENT_METHODS)):new Promise((function(n){var o,i,a;t._bus.on(_.FRAME_READY,(function(e){e(t._client)})),t._bus.on(_.FRAME_CAN_MAKE_REQUESTS,(function(){r.sendEvent(t._client,"payment-request.initialized"),t._bus.on(_.SHIPPING_ADDRESS_CHANGE,(function(e){var n={target:{shippingAddress:e},updateWith:function(e){t._bus.emit(_.UPDATE_SHIPPING_ADDRESS,e)}};t._emit("shippingAddressChange",n),t._emit("shippingaddresschange",n)})),t._bus.on(_.SHIPPING_OPTION_CHANGE,(function(e){var n={target:{shippingOption:e},updateWith:function(e){t._bus.emit(_.UPDATE_SHIPPING_OPTION,e)}};t._emit("shippingOptionChange",n),t._emit("shippingoptionchange",n)})),n(t)})),t._frame.src=(o=e.gatewayConfiguration.assetsUrl,i=t._componentId,a=e.isDebug,o+"/web/3.100.0/html/payment-request-frame"+u(a)+".html#"+i),document.body.appendChild(t._frame)}))},g.prototype.createSupportedPaymentMethodsConfiguration=function(e,t){var n;if(!e)throw new f(m.PAYMENT_REQUEST_CREATE_SUPPORTED_PAYMENT_METHODS_CONFIGURATION_MUST_INCLUDE_TYPE);if(!this._enabledPaymentMethods[e])throw new f(m.PAYMENT_REQUEST_CREATE_SUPPORTED_PAYMENT_METHODS_CONFIGURATION_TYPE_NOT_ENABLED);return(n=o({},this._supportedPaymentMethods[e])).data=o({},n.data,t),n},g.prototype.tokenize=function(e){var t=this;return new Promise((function(n,o){t._bus.emit(_.PAYMENT_REQUEST_INITIALIZED,{supportedPaymentMethods:e.supportedPaymentMethods||t._defaultSupportedPaymentMethods,details:e.details,options:e.options},(function(e){var i=e[0],a=e[1];i?o(t._formatTokenizationError(i)):(r.sendEvent(t._client,"payment-request.tokenize.succeeded"),n({nonce:a.nonce,type:a.type,description:a.description,details:{rawPaymentResponse:a.details.rawPaymentResponse,cardType:a.details.cardType,lastFour:a.details.lastFour,lastTwo:a.details.lastTwo},binData:a.binData}))}))}))},g.prototype.canMakePayment=function(e){var t,n=this;return window.PaymentRequest?e.supportedPaymentMethods&&(e.supportedPaymentMethods.forEach((function(e){var n=e.supportedMethods;n in h.SUPPORTED_METHODS||(t=n)})),t)?Promise.reject(new f({type:m.PAYMENT_REQUEST_UNSUPPORTED_PAYMENT_METHOD.type,code:m.PAYMENT_REQUEST_UNSUPPORTED_PAYMENT_METHOD.code,message:t+" is not a supported payment method."})):new Promise((function(t,o){n._bus.emit(_.CAN_MAKE_PAYMENT,{supportedPaymentMethods:e.supportedPaymentMethods||n._defaultSupportedPaymentMethods,details:e.details,options:e.options},(function(e){var i=e[0],a=e[1];i?o(n._formatCanMakePaymentError(i)):(r.sendEvent(n._client,"payment-request.can-make-payment."+a),t(a))}))})):(r.sendEvent(n._client,"payment-request.can-make-payment.not-available"),Promise.resolve(!1))},g.prototype.teardown=function(){return this._bus.teardown(),this._frame.parentNode.removeChild(this._frame),a(this,d(g.prototype)),r.sendEvent(this._client,"payment-request.teardown-completed"),Promise.resolve()},g.prototype._formatTokenizationError=function(e){var t;switch(e.name){case"AbortError":return t=new f({type:m.PAYMENT_REQUEST_CANCELED.type,code:m.PAYMENT_REQUEST_CANCELED.code,message:m.PAYMENT_REQUEST_CANCELED.message,details:{originalError:e}}),r.sendEvent(this._client,"payment-request.tokenize.canceled"),t;case"PAYMENT_REQUEST_INITIALIZATION_FAILED":t=new f({type:m.PAYMENT_REQUEST_INITIALIZATION_MISCONFIGURED.type,code:m.PAYMENT_REQUEST_INITIALIZATION_MISCONFIGURED.code,message:m.PAYMENT_REQUEST_INITIALIZATION_MISCONFIGURED.message,details:{originalError:e}});break;case"BRAINTREE_GATEWAY_GOOGLE_PAYMENT_TOKENIZATION_ERROR":t=new f({type:m.PAYMENT_REQUEST_GOOGLE_PAYMENT_FAILED_TO_TOKENIZE.type,code:m.PAYMENT_REQUEST_GOOGLE_PAYMENT_FAILED_TO_TOKENIZE.code,message:m.PAYMENT_REQUEST_GOOGLE_PAYMENT_FAILED_TO_TOKENIZE.message,details:{originalError:e}});break;case"BRAINTREE_GATEWAY_GOOGLE_PAYMENT_PARSING_ERROR":t=new f({type:m.PAYMENT_REQUEST_GOOGLE_PAYMENT_PARSING_ERROR.type,code:m.PAYMENT_REQUEST_GOOGLE_PAYMENT_PARSING_ERROR.code,message:m.PAYMENT_REQUEST_GOOGLE_PAYMENT_PARSING_ERROR.message,details:{originalError:e}});break;default:t=new f({code:m.PAYMENT_REQUEST_NOT_COMPLETED.code,type:e.type||f.types.CUSTOMER,message:m.PAYMENT_REQUEST_NOT_COMPLETED.message,details:{originalError:e}})}return r.sendEvent(this._client,"payment-request.tokenize.failed"),t},g.prototype._formatCanMakePaymentError=function(e){var t;switch(e.name){case"PAYMENT_REQUEST_INITIALIZATION_FAILED":t=new f({type:m.PAYMENT_REQUEST_INITIALIZATION_MISCONFIGURED.type,code:m.PAYMENT_REQUEST_INITIALIZATION_MISCONFIGURED.code,message:m.PAYMENT_REQUEST_INITIALIZATION_MISCONFIGURED.message,details:{originalError:e}});break;case"NotAllowedError":t=new f({type:m.PAYMENT_REQUEST_CAN_MAKE_PAYMENT_NOT_ALLOWED.type,code:m.PAYMENT_REQUEST_CAN_MAKE_PAYMENT_NOT_ALLOWED.code,message:m.PAYMENT_REQUEST_CAN_MAKE_PAYMENT_NOT_ALLOWED.message,details:{originalError:e}});break;default:t=new f({code:m.PAYMENT_REQUEST_CAN_MAKE_PAYMENT_FAILED.code,type:m.PAYMENT_REQUEST_CAN_MAKE_PAYMENT_FAILED.type,message:m.PAYMENT_REQUEST_CAN_MAKE_PAYMENT_FAILED.message,details:{originalError:e}})}return r.sendEvent(this._client,"payment-request.can-make-payment.failed"),t},t.exports=E.wrapPrototype(g)},{"../../lib/analytics":119,"../../lib/assign":121,"../../lib/braintree-error":124,"../../lib/convert-methods-to-error":127,"../../lib/generate-google-pay-configuration":149,"../../lib/methods":155,"../../lib/use-min":160,"../shared/constants":173,"@braintree/event-emitter":33,"@braintree/iframer":35,"@braintree/uuid":39,"@braintree/wrap-promise":43,framebus:52}],172:[function(e,t,n){"use strict";var r=e("./external/payment-request"),o=e("../lib/basic-component-verification"),i=e("../lib/create-deferred-client"),a=e("../lib/create-assets-url"),s=e("@braintree/wrap-promise");t.exports={create:s((function(e){var t="Payment Request";return o.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){return i.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:a.create(e.authorization),name:t})})).then((function(t){return e.client=t,new r(e).initialize()}))})),VERSION:"3.100.0"}},{"../lib/basic-component-verification":122,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./external/payment-request":171,"@braintree/wrap-promise":43}],173:[function(e,t,n){"use strict";var r=e("../../lib/enumerate"),o=e("./errors"),i={};i.events=r(["CAN_MAKE_PAYMENT","FRAME_READY","FRAME_CAN_MAKE_REQUESTS","PAYMENT_REQUEST_INITIALIZED","SHIPPING_ADDRESS_CHANGE","UPDATE_SHIPPING_ADDRESS","SHIPPING_OPTION_CHANGE","UPDATE_SHIPPING_OPTION"],"payment-request:"),i.errors=o,i.SUPPORTED_METHODS={"basic-card":!0,"https://google.com/pay":!0},t.exports=i},{"../../lib/enumerate":134,"./errors":174}],174:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error");t.exports={PAYMENT_REQUEST_NO_VALID_SUPPORTED_PAYMENT_METHODS:{type:r.types.MERCHANT,code:"PAYMENT_REQUEST_NO_VALID_SUPPORTED_PAYMENT_METHODS",message:"There are no supported payment methods associated with this account."},PAYMENT_REQUEST_CANCELED:{type:r.types.CUSTOMER,code:"PAYMENT_REQUEST_CANCELED",message:"Payment request was canceled."},PAYMENT_REQUEST_INITIALIZATION_MISCONFIGURED:{type:r.types.MERCHANT,code:"PAYMENT_REQUEST_INITIALIZATION_MISCONFIGURED",message:"Something went wrong when configuring the payment request."},PAYMENT_REQUEST_CAN_MAKE_PAYMENT_FAILED:{type:r.types.UNKNOWN,code:"PAYMENT_REQUEST_CAN_MAKE_PAYMENT_FAILED",message:"Something went wrong when calling `canMakePayment`"},PAYMENT_REQUEST_CAN_MAKE_PAYMENT_NOT_ALLOWED:{type:r.types.MERCHANT,code:"PAYMENT_REQUEST_CAN_MAKE_PAYMENT_NOT_ALLOWED",message:"Something went wrong when calling `canMakePayment`. Most likely, `canMakePayment` was called multiple times with different supportedMethods configurations."},PAYMENT_REQUEST_UNSUPPORTED_PAYMENT_METHOD:{type:r.types.MERCHANT,code:"PAYMENT_REQUEST_UNSUPPORTED_PAYMENT_METHOD"},PAYMENT_REQUEST_GOOGLE_PAYMENT_FAILED_TO_TOKENIZE:{type:r.types.MERCHANT,code:"PAYMENT_REQUEST_GOOGLE_PAYMENT_FAILED_TO_TOKENIZE",message:"Something went wrong when tokenizing the Google Pay card."},PAYMENT_REQUEST_GOOGLE_PAYMENT_PARSING_ERROR:{type:r.types.UNKNOWN,code:"PAYMENT_REQUEST_GOOGLE_PAYMENT_PARSING_ERROR",message:"Something went wrong when tokenizing the Google Pay card."},PAYMENT_REQUEST_NOT_COMPLETED:{code:"PAYMENT_REQUEST_NOT_COMPLETED",message:"Payment request could not be completed."},PAYMENT_REQUEST_CREATE_SUPPORTED_PAYMENT_METHODS_CONFIGURATION_MUST_INCLUDE_TYPE:{type:r.types.MERCHANT,code:"PAYMENT_REQUEST_CREATE_SUPPORTED_PAYMENT_METHODS_CONFIGURATION_MUST_INCLUDE_TYPE",message:"createSupportedPaymentMethodsConfiguration must include a type parameter."},PAYMENT_REQUEST_CREATE_SUPPORTED_PAYMENT_METHODS_CONFIGURATION_TYPE_NOT_ENABLED:{type:r.types.MERCHANT,code:"PAYMENT_REQUEST_CREATE_SUPPORTED_PAYMENT_METHODS_CONFIGURATION_TYPE_NOT_ENABLED",message:"createSupportedPaymentMethodsConfiguration type parameter must be valid or enabled."}}},{"../../lib/braintree-error":124}],175:[function(e,t,n){"use strict";var r=e("../lib/braintree-error");t.exports={PAYPAL_NOT_ENABLED:{type:r.types.MERCHANT,code:"PAYPAL_NOT_ENABLED",message:"PayPal is not enabled for this merchant."},PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED:{type:r.types.MERCHANT,code:"PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED",message:"A linked PayPal Sandbox account is required to use PayPal Checkout in Sandbox. See https://developer.paypal.com/braintree/docs/guides/paypal/testing-go-live#linked-paypal-testing for details on linking your PayPal sandbox with Braintree."},PAYPAL_ACCOUNT_TOKENIZATION_FAILED:{type:r.types.NETWORK,code:"PAYPAL_ACCOUNT_TOKENIZATION_FAILED",message:"Could not tokenize user's PayPal account."},PAYPAL_FLOW_FAILED:{type:r.types.NETWORK,code:"PAYPAL_FLOW_FAILED",message:"Could not initialize PayPal flow."},PAYPAL_FLOW_OPTION_REQUIRED:{type:r.types.MERCHANT,code:"PAYPAL_FLOW_OPTION_REQUIRED",message:"PayPal flow property is invalid or missing."},PAYPAL_START_VAULT_INITIATED_CHECKOUT_PARAM_REQUIRED:{type:r.types.MERCHANT,code:"PAYPAL_START_VAULT_INITIATED_CHECKOUT_PARAM_REQUIRED"},PAYPAL_START_VAULT_INITIATED_CHECKOUT_SETUP_FAILED:{type:r.types.NETWORK,code:"PAYPAL_START_VAULT_INITIATED_CHECKOUT_SETUP_FAILED",message:"Something went wrong when setting up the checkout workflow."},PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED:{type:r.types.MERCHANT,code:"PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED",message:"PayPal popup failed to open, make sure to initiate the vault checkout in response to a user action."},PAYPAL_START_VAULT_INITIATED_CHECKOUT_CANCELED:{type:r.types.CUSTOMER,code:"PAYPAL_START_VAULT_INITIATED_CHECKOUT_CANCELED",message:"Customer closed PayPal popup before authorizing."},PAYPAL_START_VAULT_INITIATED_CHECKOUT_IN_PROGRESS:{type:r.types.MERCHANT,code:"PAYPAL_START_VAULT_INITIATED_CHECKOUT_IN_PROGRESS",message:"Vault initiated checkout already in progress."},PAYPAL_INVALID_PAYMENT_OPTION:{type:r.types.MERCHANT,code:"PAYPAL_INVALID_PAYMENT_OPTION",message:"PayPal payment options are invalid."},PAYPAL_MISSING_REQUIRED_OPTION:{type:r.types.MERCHANT,code:"PAYPAL_MISSING_REQUIRED_OPTION",message:"Missing required option."}}},{"../lib/braintree-error":124}],176:[function(e,t,n){"use strict";var r=e("../lib/basic-component-verification"),o=e("@braintree/wrap-promise"),i=e("./paypal-checkout");t.exports={create:o((function(e){return r.verify({name:"PayPal Checkout",client:e.client,authorization:e.authorization}).then((function(){return new i(e)._initialize(e)}))})),isSupported:function(){return!0},VERSION:"3.100.0"}},{"../lib/basic-component-verification":122,"./paypal-checkout":177,"@braintree/wrap-promise":43}],177:[function(e,t,n){"use strict";var r=e("../lib/analytics"),o=e("../lib/assign").assign,i=e("../lib/create-deferred-client"),a=e("../lib/create-assets-url"),s=e("@braintree/extended-promise"),c=e("@braintree/wrap-promise"),l=e("../lib/braintree-error"),u=e("../lib/convert-to-braintree-error"),d=e("./errors"),p=e("../paypal/shared/constants"),f=e("../lib/frame-service/external"),h=e("../lib/create-authorization-data"),_=e("../lib/methods"),m=e("../lib/use-min"),E=e("../lib/convert-methods-to-error"),y=e("../lib/querystring"),g=e("../lib/constants").INTEGRATION_TIMEOUT_MS,v=["amount","currency","vaultInitiatedCheckoutPaymentMethodToken"];function A(e){this._merchantAccountId=e.merchantAccountId,this._autoSetDataUserIdToken=Boolean(e.autoSetDataUserIdToken)}s.suppressUnhandledPromiseMessage=!0,A.prototype._initialize=function(e){var t;return e.client?(t=e.client.getConfiguration(),this._authorizationInformation={fingerprint:t.authorizationFingerprint,environment:t.gatewayConfiguration.environment}):(t=h(e.authorization),this._authorizationInformation={fingerprint:t.attrs.authorizationFingerprint,environment:t.environment}),this._clientPromise=i.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:a.create(e.authorization),name:"PayPal Checkout"}).then(function(e){return this._configuration=e.getConfiguration(),this._merchantAccountId||(this._configuration.gatewayConfiguration.paypalEnabled?!0===this._configuration.gatewayConfiguration.paypal.environmentNoNetwork&&(this._setupError=new l(d.PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED)):this._setupError=new l(d.PAYPAL_NOT_ENABLED)),this._setupError?Promise.reject(this._setupError):(r.sendEvent(e,"paypal-checkout.initialized"),this._frameServicePromise=this._setupFrameService(e),e)}.bind(this)),e.client?this._clientPromise.then(function(){return this}.bind(this)):Promise.resolve(this)},A.prototype._setupFrameService=function(e){var t=new s,n=e.getConfiguration(),o=setTimeout((function(){r.sendEvent(e,"paypal-checkout.frame-service.timed-out"),t.reject(new l(d.PAYPAL_START_VAULT_INITIATED_CHECKOUT_SETUP_FAILED))}),g);return this._assetsUrl=n.gatewayConfiguration.paypal.assetsUrl+"/web/3.100.0",this._isDebug=n.isDebug,this._loadingFrameUrl=this._assetsUrl+"/html/paypal-landing-frame"+m(this._isDebug)+".html",f.create({name:"braintreepaypallanding",dispatchFrameUrl:this._assetsUrl+"/html/dispatch-frame"+m(this._isDebug)+".html",openFrameUrl:this._loadingFrameUrl},function(e){this._frameService=e,clearTimeout(o),t.resolve()}.bind(this)),t},A.prototype.createPayment=function(e){return e&&p.FLOW_ENDPOINTS.hasOwnProperty(e.flow)?(r.sendEvent(this._clientPromise,"paypal-checkout.createPayment"),this._createPaymentResource(e).then((function(t){return"checkout"===e.flow?y.parse(t.paymentResource.redirectUrl).token:t.agreementSetup.tokenId}))):Promise.reject(new l(d.PAYPAL_FLOW_OPTION_REQUIRED))},A.prototype._createPaymentResource=function(e,t){var n=this,o="paypal_hermes/"+p.FLOW_ENDPOINTS[e.flow];return delete this.intentFromCreatePayment,t=t||{},!0===e.offerCredit&&r.sendEvent(this._clientPromise,"paypal-checkout.credit.offered"),this._clientPromise.then((function(r){return r.request({endpoint:o,method:"post",data:n._formatPaymentResourceData(e,t)}).then((function(t){return n.intentFromCreatePayment=e.intent,t}))})).catch((function(e){return n._setupError?Promise.reject(n._setupError):422===(e.details&&e.details.httpStatus)?Promise.reject(new l({type:d.PAYPAL_INVALID_PAYMENT_OPTION.type,code:d.PAYPAL_INVALID_PAYMENT_OPTION.code,message:d.PAYPAL_INVALID_PAYMENT_OPTION.message,details:{originalError:e}})):Promise.reject(u(e,{type:d.PAYPAL_FLOW_FAILED.type,code:d.PAYPAL_FLOW_FAILED.code,message:d.PAYPAL_FLOW_FAILED.message}))}))},A.prototype.updatePayment=function(e){var t=this;return!e||this._hasMissingOption(e,p.REQUIRED_OPTIONS)?(r.sendEvent(t._clientPromise,"paypal-checkout.updatePayment.missing-options"),Promise.reject(new l(d.PAYPAL_MISSING_REQUIRED_OPTION))):this._verifyConsistentCurrency(e)?(r.sendEvent(this._clientPromise,"paypal-checkout.updatePayment"),this._clientPromise.then((function(n){return n.request({endpoint:"paypal_hermes/patch_payment_resource",method:"post",data:t._formatUpdatePaymentData(e)})})).catch((function(e){return 422===(e.details&&e.details.httpStatus)?(r.sendEvent(t._clientPromise,"paypal-checkout.updatePayment.invalid"),Promise.reject(new l({type:d.PAYPAL_INVALID_PAYMENT_OPTION.type,code:d.PAYPAL_INVALID_PAYMENT_OPTION.code,message:d.PAYPAL_INVALID_PAYMENT_OPTION.message,details:{originalError:e}}))):(r.sendEvent(t._clientPromise,"paypal-checkout.updatePayment."+d.PAYPAL_FLOW_FAILED.code),Promise.reject(u(e,{type:d.PAYPAL_FLOW_FAILED.type,code:d.PAYPAL_FLOW_FAILED.code,message:d.PAYPAL_FLOW_FAILED.message})))}))):(r.sendEvent(t._clientPromise,"paypal-checkout.updatePayment.inconsistent-currencies"),Promise.reject(new l({type:d.PAYPAL_INVALID_PAYMENT_OPTION.type,code:d.PAYPAL_INVALID_PAYMENT_OPTION.code,message:d.PAYPAL_INVALID_PAYMENT_OPTION.message,details:{originalError:new Error("One or more shipping option currencies differ from checkout currency.")}})))},A.prototype.startVaultInitiatedCheckout=function(e){var t,n=this;return this._vaultInitiatedCheckoutInProgress?(r.sendEvent(this._clientPromise,"paypal-checkout.startVaultInitiatedCheckout.error.already-in-progress"),Promise.reject(new l(d.PAYPAL_START_VAULT_INITIATED_CHECKOUT_IN_PROGRESS))):(v.forEach((function(n){e.hasOwnProperty(n)||(t=n)})),t?Promise.reject(new l({type:d.PAYPAL_START_VAULT_INITIATED_CHECKOUT_PARAM_REQUIRED.type,code:d.PAYPAL_START_VAULT_INITIATED_CHECKOUT_PARAM_REQUIRED.code,message:"Required param "+t+" is missing."})):(this._vaultInitiatedCheckoutInProgress=!0,this._addModalBackdrop(e),e=o({},e,{flow:"checkout"}),r.sendEvent(this._clientPromise,"paypal-checkout.startVaultInitiatedCheckout.started"),this._waitForVaultInitiatedCheckoutDependencies().then((function(){var t=new s,r=n._createPaymentResource(e,{returnUrl:n._constructVaultCheckutUrl("redirect-frame"),cancelUrl:n._constructVaultCheckutUrl("cancel-frame")}).then((function(e){var r=e.paymentResource.redirectUrl;return n._frameService.redirect(r),t}));return n._frameService.open({},n._createFrameServiceCallback(t)),r})).catch((function(e){return n._vaultInitiatedCheckoutInProgress=!1,n._removeModalBackdrop(),"FRAME_SERVICE_FRAME_CLOSED"===e.code?(r.sendEvent(n._clientPromise,"paypal-checkout.startVaultInitiatedCheckout.canceled.by-customer"),Promise.reject(new l(d.PAYPAL_START_VAULT_INITIATED_CHECKOUT_CANCELED))):(n._frameService&&n._frameService.close(),e.code&&e.code.indexOf("FRAME_SERVICE_FRAME_OPEN_FAILED")>-1?(r.sendEvent(n._clientPromise,"paypal-checkout.startVaultInitiatedCheckout.failed.popup-not-opened"),Promise.reject(new l({code:d.PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED.code,type:d.PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED.type,message:d.PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED.message,details:{originalError:e}}))):Promise.reject(e))})).then((function(e){return n._frameService.close(),n._vaultInitiatedCheckoutInProgress=!1,n._removeModalBackdrop(),r.sendEvent(n._clientPromise,"paypal-checkout.startVaultInitiatedCheckout.succeeded"),Promise.resolve(e)}))))},A.prototype._addModalBackdrop=function(e){e.optOutOfModalBackdrop||(this._modalBackdrop||(this._modalBackdrop=document.createElement("div"),this._modalBackdrop.setAttribute("data-braintree-paypal-vault-initiated-checkout-modal",!0),this._modalBackdrop.style.position="fixed",this._modalBackdrop.style.top=0,this._modalBackdrop.style.bottom=0,this._modalBackdrop.style.left=0,this._modalBackdrop.style.right=0,this._modalBackdrop.style.zIndex=9999,this._modalBackdrop.style.background="black",this._modalBackdrop.style.opacity="0.7",this._modalBackdrop.addEventListener("click",function(){this.focusVaultInitiatedCheckoutWindow()}.bind(this))),document.body.appendChild(this._modalBackdrop))},A.prototype._removeModalBackdrop=function(){this._modalBackdrop&&this._modalBackdrop.parentNode&&this._modalBackdrop.parentNode.removeChild(this._modalBackdrop)},A.prototype.closeVaultInitiatedCheckoutWindow=function(){return this._vaultInitiatedCheckoutInProgress&&r.sendEvent(this._clientPromise,"paypal-checkout.startVaultInitiatedCheckout.canceled.by-merchant"),this._waitForVaultInitiatedCheckoutDependencies().then(function(){this._frameService.close()}.bind(this))},A.prototype.focusVaultInitiatedCheckoutWindow=function(){return this._waitForVaultInitiatedCheckoutDependencies().then(function(){this._frameService.focus()}.bind(this))},A.prototype._createFrameServiceCallback=function(e){var t=this;return function(n,r){n?e.reject(n):r&&(t._frameService.redirect(t._loadingFrameUrl),t.tokenizePayment({paymentToken:r.token,payerID:r.PayerID,paymentID:r.paymentId,orderID:r.orderId}).then((function(t){e.resolve(t)})).catch((function(t){e.reject(t)})))}},A.prototype._waitForVaultInitiatedCheckoutDependencies=function(){var e=this;return this._clientPromise.then((function(){return e._frameServicePromise}))},A.prototype._constructVaultCheckutUrl=function(e){var t=this._frameService._serviceId;return this._assetsUrl+"/html/"+e+m(this._isDebug)+".html?channel="+t},A.prototype.tokenizePayment=function(e){var t,n=this,o=!0,i={flow:e.billingToken&&!e.paymentID?"vault":"checkout",intent:e.intent||this.intentFromCreatePayment},a={ecToken:e.paymentToken,billingToken:e.billingToken,payerId:e.payerID,paymentId:e.paymentID,orderId:e.orderID,shippingOptionsId:e.shippingOptionsId};return e.hasOwnProperty("vault")&&(o=e.vault),i.vault=o,r.sendEvent(this._clientPromise,"paypal-checkout.tokenization.started"),this._clientPromise.then((function(e){return e.request({endpoint:"payment_methods/paypal_accounts",method:"post",data:n._formatTokenizeData(i,a)})})).then((function(e){return t=n._formatTokenizePayload(e),r.sendEvent(n._clientPromise,"paypal-checkout.tokenization.success"),t.creditFinancingOffered&&r.sendEvent(n._clientPromise,"paypal-checkout.credit.accepted"),t})).catch((function(e){return n._setupError?Promise.reject(n._setupError):(r.sendEvent(n._clientPromise,"paypal-checkout.tokenization.failed"),Promise.reject(u(e,{type:d.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.type,code:d.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.code,message:d.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.message})))}))},A.prototype.getClientId=function(){return this._clientPromise.then((function(e){return e.getConfiguration().gatewayConfiguration.paypal.clientId}))},A.prototype.loadPayPalSDK=function(e){var t=new s,n=e&&e.dataAttributes||{},r=n["user-id-token"]||n["data-user-id-token"];return r||(r=this._authorizationInformation.fingerprint&&this._authorizationInformation.fingerprint.split("?")[0]),this._paypalScript=document.createElement("script"),delete(e=o({},{components:"buttons"},e)).dataAttributes,e.vault?e.intent=e.intent||"tokenize":(e.intent=e.intent||"authorize",e.currency=e.currency||"USD"),"https://www.paypal.com/sdk/js?",this._paypalScript.onload=function(){t.resolve()},Object.keys(n).forEach(function(e){this._paypalScript.setAttribute("data-"+e.replace(/^data\-/,""),n[e])}.bind(this)),(e["client-id"]?Promise.resolve(e["client-id"]):this.getClientId()).then(function(t){e["client-id"]=t,this._autoSetDataUserIdToken&&r&&(this._paypalScript.setAttribute("data-user-id-token",r),this._attachPreloadPixel({id:t,userIdToken:r,amount:n.amount,currency:e.currency,merchantId:e["merchant-id"]})),this._paypalScript.src=y.queryify("https://www.paypal.com/sdk/js?",e),document.head.insertBefore(this._paypalScript,document.head.firstElementChild)}.bind(this)),t.then(function(){return this}.bind(this))},A.prototype._attachPreloadPixel=function(e){var t,n=e.id,r=e.userIdToken,o="production"===this._authorizationInformation.environment?"":"sandbox.",i="https://www.{ENV}paypal.com/smart/buttons/preload".replace("{ENV}",o),a={"client-id":n,"user-id-token":r};e.amount&&(a.amount=e.amount),e.currency&&(a.currency=e.currency),e.merchantId&&(a["merchant-id"]=e.merchantId),(t=new XMLHttpRequest).open("GET",y.queryify(i,a)),t.send()},A.prototype._formatPaymentResourceData=function(e,t){var n,r=this._configuration.gatewayConfiguration,o=e.intent,i={returnUrl:t.returnUrl||"https://www.paypal.com/checkoutnow/error",cancelUrl:t.cancelUrl||"https://www.paypal.com/checkoutnow/error",offerPaypalCredit:!0===e.offerCredit,merchantAccountId:this._merchantAccountId,experienceProfile:{brandName:e.displayName||r.paypal.displayName,localeCode:e.locale,noShipping:(!e.enableShippingAddress).toString(),addressOverride:!1===e.shippingAddressEditable,landingPageType:e.landingPageType},shippingOptions:e.shippingOptions};if("checkout"===e.flow){for(n in i.amount=e.amount,i.currencyIsoCode=e.currency,i.requestBillingAgreement=e.requestBillingAgreement,o&&("capture"===o&&(o="sale"),i.intent=o),e.hasOwnProperty("lineItems")&&(i.lineItems=e.lineItems),e.hasOwnProperty("vaultInitiatedCheckoutPaymentMethodToken")&&(i.vaultInitiatedCheckoutPaymentMethodToken=e.vaultInitiatedCheckoutPaymentMethodToken),e.hasOwnProperty("shippingOptions")&&(i.shippingOptions=e.shippingOptions),e.shippingAddressOverride)e.shippingAddressOverride.hasOwnProperty(n)&&(i[n]=e.shippingAddressOverride[n]);e.hasOwnProperty("billingAgreementDetails")&&(i.billingAgreementDetails=e.billingAgreementDetails)}else i.shippingAddress=e.shippingAddressOverride,e.billingAgreementDescription&&(i.description=e.billingAgreementDescription);return this._riskCorrelationId=e.riskCorrelationId,e.riskCorrelationId&&(i.correlationId=this._riskCorrelationId),i},A.prototype._verifyConsistentCurrency=function(e){return!(e.currency&&e.hasOwnProperty("shippingOptions")&&Array.isArray(e.shippingOptions))||e.shippingOptions.every((function(t){return t.amount&&t.amount.currency&&e.currency.toLowerCase()===t.amount.currency.toLowerCase()}))},A.prototype._hasMissingOption=function(e,t){var n,r;if(t=t||[],!e.hasOwnProperty("amount")&&!e.hasOwnProperty("lineItems"))return!0;for(n=0;n<t.length;n++)if(r=t[n],!e.hasOwnProperty(r))return!0;return!1},A.prototype._formatUpdatePaymentData=function(e){var t={merchantAccountId:this._merchantAccountId,paymentId:e.paymentId||e.orderId,currencyIsoCode:e.currency};return e.hasOwnProperty("amount")&&(t.amount=e.amount),e.hasOwnProperty("lineItems")&&(t.lineItems=e.lineItems),e.hasOwnProperty("shippingOptions")&&(t.shippingOptions=e.shippingOptions),e.hasOwnProperty("shippingAddress")&&(r.sendEvent(this._clientPromise,"paypal-checkout.updatePayment.shippingAddress.provided.by-the-merchant"),t.line1=e.shippingAddress.line1,e.shippingAddress.hasOwnProperty("line2")&&(t.line2=e.shippingAddress.line2),t.city=e.shippingAddress.city,t.state=e.shippingAddress.state,t.postalCode=e.shippingAddress.postalCode,t.countryCode=e.shippingAddress.countryCode,e.shippingAddress.hasOwnProperty("phone")&&(t.phone=e.shippingAddress.phone),e.shippingAddress.hasOwnProperty("recipientName")&&(t.recipientName=e.shippingAddress.recipientName)),t},A.prototype._formatTokenizeData=function(e,t){var n=this._configuration,r=n.gatewayConfiguration,o="TOKENIZATION_KEY"===n.authorizationType,i="vault"===e.flow,a={paypalAccount:{correlationId:this._riskCorrelationId||t.billingToken||t.ecToken,options:{validate:i&&!o&&e.vault}}};return i?a.paypalAccount.billingAgreementToken=t.billingToken:(a.paypalAccount.paymentToken=t.paymentId||t.orderId,a.paypalAccount.payerId=t.payerId,a.paypalAccount.unilateral=r.paypal.unvettedMerchant,e.intent&&(a.paypalAccount.intent=e.intent)),this._merchantAccountId&&(a.merchantAccountId=this._merchantAccountId),a},A.prototype._formatTokenizePayload=function(e){var t,n={};return e.paypalAccounts&&(n=e.paypalAccounts[0]),t={nonce:n.nonce,details:{},type:n.type},n.details&&n.details.payerInfo&&(t.details=n.details.payerInfo),n.details&&n.details.creditFinancingOffered&&(t.creditFinancingOffered=n.details.creditFinancingOffered),n.details&&n.details.shippingOptionId&&(t.shippingOptionId=n.details.shippingOptionId),n.details&&n.details.cobrandedCardLabel&&(t.cobrandedCardLabel=n.details.cobrandedCardLabel),t},A.prototype.teardown=function(){var e=this;return E(this,_(A.prototype)),this._paypalScript&&this._paypalScript.parentNode&&this._paypalScript.parentNode.removeChild(this._paypalScript),this._frameServicePromise.catch((function(){})).then((function(){return e._frameService?e._frameService.teardown():Promise.resolve()}))},t.exports=c.wrapPrototype(A)},{"../lib/analytics":119,"../lib/assign":121,"../lib/braintree-error":124,"../lib/constants":126,"../lib/convert-methods-to-error":127,"../lib/convert-to-braintree-error":128,"../lib/create-assets-url":129,"../lib/create-authorization-data":130,"../lib/create-deferred-client":131,"../lib/frame-service/external":139,"../lib/methods":155,"../lib/querystring":157,"../lib/use-min":160,"../paypal/shared/constants":180,"./errors":175,"@braintree/extended-promise":34,"@braintree/wrap-promise":43}],178:[function(e,t,n){"use strict";var r=e("../../lib/frame-service/external"),o=e("../../lib/braintree-error"),i=e("../../lib/convert-to-braintree-error"),a=e("../../lib/use-min"),s=e("../../lib/once"),c="3.100.0",l=e("../shared/constants"),u=e("../../lib/constants").INTEGRATION_TIMEOUT_MS,d=e("../../lib/analytics"),p=e("../../lib/methods"),f=e("../../lib/deferred"),h=e("../shared/errors"),_=e("../../lib/convert-methods-to-error"),m=e("../../lib/querystring"),E=e("@braintree/wrap-promise");function y(e){this._client=e.client,this._assetsUrl=e.client.getConfiguration().gatewayConfiguration.paypal.assetsUrl+"/web/"+c,this._isDebug=e.client.getConfiguration().isDebug,this._loadingFrameUrl=this._assetsUrl+"/html/paypal-landing-frame"+a(this._isDebug)+".html",this._authorizationInProgress=!1}y.prototype._initialize=function(){var e=this,t=this._client,n=setTimeout((function(){d.sendEvent(t,"paypal.load.timed-out")}),u);return new Promise((function(o){r.create({name:l.LANDING_FRAME_NAME,dispatchFrameUrl:e._assetsUrl+"/html/dispatch-frame"+a(e._isDebug)+".html",openFrameUrl:e._loadingFrameUrl},(function(r){e._frameService=r,clearTimeout(n),d.sendEvent(t,"paypal.load.succeeded"),o(e)}))}))},y.prototype.tokenize=function(e,t){var n,r,i=this,a=this._client;return t&&(t=s(f(t))),e&&l.FLOW_ENDPOINTS.hasOwnProperty(e.flow)?(n=new Promise((function(t,n){i._authorizationInProgress?(d.sendEvent(a,"paypal.tokenization.error.already-opened"),n(new o(h.PAYPAL_TOKENIZATION_REQUEST_ACTIVE))):(i._authorizationInProgress=!0,window.popupBridge||d.sendEvent(a,"paypal.tokenization.opened"),!0===e.offerCredit&&d.sendEvent(a,"paypal.credit.offered"),!0===e.offerPayLater&&d.sendEvent(a,"paypal.paylater.offered"),i._navigateFrameToAuth(e).catch(n),i._frameService.open({},i._createFrameServiceCallback(e,t,n)))})),t?(n.then((function(e){t(null,e)})).catch(t),this._frameService.createHandler({beforeClose:function(){d.sendEvent(a,"paypal.tokenization.closed.by-merchant")}})):n):(r=new o(h.PAYPAL_FLOW_OPTION_REQUIRED),t?(t(r),this._frameService.createNoopHandler()):Promise.reject(r))},y.prototype._createFrameServiceCallback=function(e,t,n){var r=this,i=this._client;return window.popupBridge?function(a,s){var c=s&&s.path&&"/cancel"===s.path.substring(0,7);r._authorizationInProgress=!1,a||c?(d.sendEvent(i,"paypal.tokenization.closed-popupbridge.by-user"),n(new o(h.PAYPAL_POPUP_CLOSED))):s&&r._tokenizePayPal(e,s.queryItems).then(t).catch(n)}:function(a,s){r._authorizationInProgress=!1,a?"FRAME_SERVICE_FRAME_CLOSED"===a.code?(d.sendEvent(i,"paypal.tokenization.closed.by-user"),n(new o(h.PAYPAL_POPUP_CLOSED))):a.code&&a.code.indexOf("FRAME_SERVICE_FRAME_OPEN_FAILED")>-1&&n(new o({code:h.PAYPAL_POPUP_OPEN_FAILED.code,type:h.PAYPAL_POPUP_OPEN_FAILED.type,message:h.PAYPAL_POPUP_OPEN_FAILED.message,details:{originalError:a}})):s&&r._tokenizePayPal(e,s).then(t).catch(n)}},y.prototype._tokenizePayPal=function(e,t){var n=this,r=this._client;return window.popupBridge||this._frameService.redirect(this._loadingFrameUrl),r.request({endpoint:"payment_methods/paypal_accounts",method:"post",data:this._formatTokenizeData(e,t)}).then((function(e){var t=n._formatTokenizePayload(e);return window.popupBridge?d.sendEvent(r,"paypal.tokenization.success-popupbridge"):d.sendEvent(r,"paypal.tokenization.success"),t.creditFinancingOffered&&d.sendEvent(r,"paypal.credit.accepted"),n._frameService.close(),t})).catch((function(e){return window.popupBridge?d.sendEvent(r,"paypal.tokenization.failed-popupbridge"):d.sendEvent(r,"paypal.tokenization.failed"),n._frameService.close(),Promise.reject(i(e,{type:h.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.type,code:h.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.code,message:h.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.message}))}))},y.prototype._formatTokenizePayload=function(e){var t,n={};return e.paypalAccounts&&(n=e.paypalAccounts[0]),t={nonce:n.nonce,details:{},type:n.type},n.details&&n.details.payerInfo&&(t.details=n.details.payerInfo),n.details&&n.details.creditFinancingOffered&&(t.creditFinancingOffered=n.details.creditFinancingOffered),t},y.prototype._formatTokenizeData=function(e,t){var n=this._client.getConfiguration(),r=n.gatewayConfiguration,o="TOKENIZATION_KEY"===n.authorizationType,i={paypalAccount:{correlationId:t.ba_token||t.token,options:{validate:"vault"===e.flow&&!o}}};return t.ba_token?i.paypalAccount.billingAgreementToken=t.ba_token:(i.paypalAccount.paymentToken=t.paymentId,i.paypalAccount.payerId=t.PayerID,i.paypalAccount.unilateral=r.paypal.unvettedMerchant,e.hasOwnProperty("intent")&&(i.paypalAccount.intent=e.intent)),i},y.prototype._navigateFrameToAuth=function(e){var t=this,n=this._client,r="paypal_hermes/"+l.FLOW_ENDPOINTS[e.flow];return n.request({endpoint:r,method:"post",data:this._formatPaymentResourceData(e)}).then((function(r){var o;o="checkout"===e.flow?r.paymentResource.redirectUrl:r.agreementSetup.approvalUrl,"commit"===e.useraction&&(o=m.queryify(o,{useraction:"commit"})),window.popupBridge&&d.sendEvent(n,"paypal.tokenization.opened-popupbridge"),t._frameService.redirect(o)})).catch((function(e){var n=e.details&&e.details.httpStatus;return t._frameService.close(),t._authorizationInProgress=!1,422===n?Promise.reject(new o({type:h.PAYPAL_INVALID_PAYMENT_OPTION.type,code:h.PAYPAL_INVALID_PAYMENT_OPTION.code,message:h.PAYPAL_INVALID_PAYMENT_OPTION.message,details:{originalError:e}})):Promise.reject(i(e,{type:h.PAYPAL_FLOW_FAILED.type,code:h.PAYPAL_FLOW_FAILED.code,message:h.PAYPAL_FLOW_FAILED.message}))}))},y.prototype._formatPaymentResourceData=function(e){var t,n=this._client.getConfiguration().gatewayConfiguration,r=this._frameService._serviceId,o={returnUrl:n.paypal.assetsUrl+"/web/"+c+"/html/redirect-frame"+a(this._isDebug)+".html?channel="+r,cancelUrl:n.paypal.assetsUrl+"/web/"+c+"/html/cancel-frame"+a(this._isDebug)+".html?channel="+r,offerPaypalCredit:!0===e.offerCredit,offerPayLater:!0===e.offerPayLater,experienceProfile:{brandName:e.displayName||n.paypal.displayName,localeCode:e.locale,noShipping:(!e.enableShippingAddress).toString(),addressOverride:!1===e.shippingAddressEditable,landingPageType:e.landingPageType}};if(window.popupBridge&&"function"==typeof window.popupBridge.getReturnUrlPrefix&&(o.returnUrl=window.popupBridge.getReturnUrlPrefix()+"return",o.cancelUrl=window.popupBridge.getReturnUrlPrefix()+"cancel"),"checkout"===e.flow)for(t in o.amount=e.amount,o.currencyIsoCode=e.currency,e.hasOwnProperty("intent")&&(o.intent=e.intent),e.shippingAddressOverride)e.shippingAddressOverride.hasOwnProperty(t)&&(o[t]=e.shippingAddressOverride[t]);else o.shippingAddress=e.shippingAddressOverride,e.billingAgreementDescription&&(o.description=e.billingAgreementDescription);return o},y.prototype.closeWindow=function(){this._authorizationInProgress&&d.sendEvent(this._client,"paypal.tokenize.closed.by-merchant"),this._frameService.close()},y.prototype.focusWindow=function(){this._frameService.focus()},y.prototype.teardown=E((function(){var e=this;return e._frameService.teardown(),_(e,p(y.prototype)),d.sendEvent(e._client,"paypal.teardown-completed"),Promise.resolve()})),t.exports=y},{"../../lib/analytics":119,"../../lib/braintree-error":124,"../../lib/constants":126,"../../lib/convert-methods-to-error":127,"../../lib/convert-to-braintree-error":128,"../../lib/deferred":132,"../../lib/frame-service/external":139,"../../lib/methods":155,"../../lib/once":156,"../../lib/querystring":157,"../../lib/use-min":160,"../shared/constants":180,"../shared/errors":181,"@braintree/wrap-promise":43}],179:[function(e,t,n){"use strict";var r=e("../lib/analytics"),o=e("../lib/basic-component-verification"),i=e("../lib/create-deferred-client"),a=e("../lib/create-assets-url"),s=e("../lib/braintree-error"),c=e("./shared/errors"),l=e("./external/paypal"),u=e("@braintree/wrap-promise");t.exports={create:u((function(e){var t="PayPal";return o.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){return i.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:a.create(e.authorization),name:t})})).then((function(t){var n=t.getConfiguration();return e.client=t,!0!==n.gatewayConfiguration.paypalEnabled?Promise.reject(new s(c.PAYPAL_NOT_ENABLED)):(r.sendEvent(e.client,"paypal.initialized"),new l(e)._initialize())}))})),isSupported:function(){return!0},VERSION:"3.100.0"}},{"../lib/analytics":119,"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./external/paypal":178,"./shared/errors":181,"@braintree/wrap-promise":43}],180:[function(e,t,n){"use strict";t.exports={LANDING_FRAME_NAME:"braintreepaypallanding",FLOW_ENDPOINTS:{checkout:"create_payment_resource",vault:"setup_billing_agreement"},REQUIRED_OPTIONS:["paymentId","currency"]}},{}],181:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error");t.exports={PAYPAL_NOT_ENABLED:{type:r.types.MERCHANT,code:"PAYPAL_NOT_ENABLED",message:"PayPal is not enabled for this merchant."},PAYPAL_TOKENIZATION_REQUEST_ACTIVE:{type:r.types.MERCHANT,code:"PAYPAL_TOKENIZATION_REQUEST_ACTIVE",message:"Another tokenization request is active."},PAYPAL_ACCOUNT_TOKENIZATION_FAILED:{type:r.types.NETWORK,code:"PAYPAL_ACCOUNT_TOKENIZATION_FAILED",message:"Could not tokenize user's PayPal account."},PAYPAL_FLOW_FAILED:{type:r.types.NETWORK,code:"PAYPAL_FLOW_FAILED",message:"Could not initialize PayPal flow."},PAYPAL_FLOW_OPTION_REQUIRED:{type:r.types.MERCHANT,code:"PAYPAL_FLOW_OPTION_REQUIRED",message:"PayPal flow property is invalid or missing."},PAYPAL_POPUP_OPEN_FAILED:{type:r.types.MERCHANT,code:"PAYPAL_POPUP_OPEN_FAILED",message:"PayPal popup failed to open, make sure to tokenize in response to a user action."},PAYPAL_POPUP_CLOSED:{type:r.types.CUSTOMER,code:"PAYPAL_POPUP_CLOSED",message:"Customer closed PayPal popup before authorizing."},PAYPAL_INVALID_PAYMENT_OPTION:{type:r.types.MERCHANT,code:"PAYPAL_INVALID_PAYMENT_OPTION",message:"PayPal payment options are invalid."}}},{"../../lib/braintree-error":124}],182:[function(e,t,n){"use strict";var r=e("@braintree/wrap-promise"),o=e("../lib/basic-component-verification"),i=e("./preferred-payment-methods");t.exports={create:r((function(e){return o.verify({name:"PreferredPaymentMethods",client:e.client,authorization:e.authorization}).then((function(){return(new i).initialize(e)}))})),VERSION:"3.100.0"}},{"../lib/basic-component-verification":122,"./preferred-payment-methods":183,"@braintree/wrap-promise":43}],183:[function(e,t,n){"use strict";var r=e("@braintree/wrap-promise"),o=e("../lib/analytics"),i=e("../lib/create-assets-url"),a=e("../lib/create-deferred-client");function s(){}s.prototype.initialize=function(e){var t=this;return this._clientPromise=a.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:i.create(e.authorization),name:"PreferredPaymentMethods"}).catch((function(e){return t._setupError=e,Promise.reject(e)})),o.sendEvent(this._clientPromise,"preferred-payment-methods.initialized"),Promise.resolve(this)},s.prototype.fetchPreferredPaymentMethods=function(){var e,t=this;return this._clientPromise.then((function(t){return(e=t).request({api:"graphQLApi",data:{query:"query PreferredPaymentMethods { preferredPaymentMethods { paypalPreferred venmoPreferred } }"}})})).then((function(t){var n=t.data.preferredPaymentMethods.paypalPreferred,r=t.data.preferredPaymentMethods.venmoPreferred;return o.sendEvent(e,"preferred-payment-methods.paypal.api-detected."+n),o.sendEvent(e,"preferred-payment-methods.venmo.api-detected."+r),{paypalPreferred:n,venmoPreferred:r}})).catch((function(){return t._setupError?Promise.reject(t._setupError):(o.sendEvent(e,"preferred-payment-methods.api-error"),{paypalPreferred:!1,venmoPreferred:!1})}))},t.exports=r.wrapPrototype(s)},{"../lib/analytics":119,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"@braintree/wrap-promise":43}],184:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error"),o=e("../shared/errors"),i=e("../../lib/frame-service/external"),a=e("../../lib/analytics"),s=e("../../lib/use-min"),c=e("../shared/constants").BILLING_ADDRESS_OPTIONS,l=e("../../lib/snake-case-to-camel-case"),u=400,d=570;t.exports={createMandate:function(e,t){var n={sepa_debit:{account_holder_name:t.accountHolderName,billing_address:{country_code:t.countryCode},iban:t.iban,merchant_or_partner_customer_id:t.customerId,mandate_type:t.mandateType},locale:t.locale,cancel_url:t.cancelUrl,return_url:t.returnUrl,merchant_account_id:t.merchantAccountId};return t.billingAddress&&c.forEach((function(e){var r=l(e);r in t.billingAddress&&(n.sepa_debit.billing_address[e]=t.billingAddress[r])})),e.request({api:"clientApi",method:"post",endpoint:"sepa_debit",data:n}).then((function(e){var t=e.message.body.sepaDebitAccount;if(!t)throw new r(o.SEPA_CREATE_MANDATE_FAILED);return{approvalUrl:t.approvalUrl,last4:t.last4,bankReferenceToken:t.bankReferenceToken}})).catch((function(){throw new r(o.SEPA_CREATE_MANDATE_FAILED)}))},openPopup:function(e,t){var n=t.assetsUrl+"/html",c=t.debug||!1;return new Promise((function(l,p){var f={top:Math.round((window.outerHeight-d)/2)+window.screenTop,left:Math.round((window.outerWidth-u)/2)+window.screenLeft};i.create({name:"sepadirectdebit",dispatchFrameUrl:n+"/dispatch-frame"+s(c)+".html",openFrameUrl:n+"/sepa-landing-frame"+s(c)+".html",top:f.top,left:f.left,height:d,width:u},(function(n){a.sendEvent(e,"sepa.popup.initialized"),n.open({},(function(e,t){return function(e){return e&&e.success}(t)?(n.close(),l()):function(e,t){return e&&e.cancel||t&&"FRAME_SERVICE_FRAME_CLOSED"===t.code}(t,e)?(n.close(),p(new r(o.SEPA_CUSTOMER_CANCELED))):(n.close(),p(new r(o.SEPA_TOKENIZATION_FAILED)))})),n.redirect(t.approvalUrl)}))}))},handleApproval:function(e,t){var n={sepa_debit_account:{last_4:t.last4,merchant_or_partner_customer_id:t.customerId,bank_reference_token:t.bankReferenceToken,mandate_type:t.mandateType},merchant_account_id:t.merchantAccountId};return e.request({api:"clientApi",method:"post",endpoint:"payment_methods/sepa_debit_accounts",data:n}).then((function(e){if(!e.nonce)throw new r(o.SEPA_TRANSACTION_FAILED);return{nonce:e.nonce,ibanLastFour:t.last4,customerId:t.customerId,mandateType:t.mandateType}})).catch((function(){throw new r(o.SEPA_TRANSACTION_FAILED)}))},POPUP_WIDTH:u,POPUP_HEIGHT:d}},{"../../lib/analytics":119,"../../lib/braintree-error":124,"../../lib/frame-service/external":139,"../../lib/snake-case-to-camel-case":159,"../../lib/use-min":160,"../shared/constants":187,"../shared/errors":188}],185:[function(e,t,n){"use strict";var r=e("@braintree/wrap-promise"),o=e("../../lib/braintree-error"),i=e("../shared/errors"),a=e("../shared/constants"),s=e("./mandate"),c=e("../shared/has-missing-option"),l=e("../../lib/analytics"),u=e("../../lib/assign").assign;function d(e){var t=e.client.getConfiguration();this._client=e.client,this._assetsUrl=t.gatewayConfiguration.assetsUrl+"/web/3.100.0",this._isDebug=t.isDebug,this._returnUrl=this._assetsUrl+"/html/redirect-frame.html?success=1",this._cancelUrl=this._assetsUrl+"/html/redirect-frame.html?cancel=1",l.sendEvent(this._client,"sepa.component.initialized")}d.prototype.tokenize=function(e){var t=this,n=u({cancelUrl:t._cancelUrl,returnUrl:t._returnUrl},e);return!e||c(e,a.REQUIRED_OPTIONS)?(l.sendEvent(t._client,"sepa.input-validation.missing-options"),Promise.reject(new o(i.SEPA_TOKENIZE_MISSING_REQUIRED_OPTION))):a.MANDATE_TYPE_ENUM.includes(e.mandateType)?s.createMandate(t._client,n).then((function(n){return l.sendEvent(t._client,"sepa.create-mandate.success"),e.last4=n.last4,e.bankReferenceToken=n.bankReferenceToken,s.openPopup(t._client,{approvalUrl:n.approvalUrl,assetsUrl:t._assetsUrl})})).then((function(){return l.sendEvent(t._client,"sepa.mandate.approved"),s.handleApproval(t._client,{bankReferenceToken:e.bankReferenceToken,last4:e.last4,customerId:e.customerId,mandateType:e.mandateType,merchantAccountId:e.merchantAccountId})})).then((function(e){return l.sendEvent(t._client,"sepa.tokenization.success"),Promise.resolve(e)})).catch((function(e){return l.sendEvent(t._client,"sepa."+e.details+".failed"),Promise.reject(e)})):(l.sendEvent(t._client,"sepa.input-validation.invalid-mandate"),Promise.reject(new o(i.SEPA_INVALID_MANDATE_TYPE)))},t.exports=r.wrapPrototype(d)},{"../../lib/analytics":119,"../../lib/assign":121,"../../lib/braintree-error":124,"../shared/constants":187,"../shared/errors":188,"../shared/has-missing-option":189,"./mandate":184,"@braintree/wrap-promise":43}],186:[function(e,t,n){"use strict";var r=e("../lib/analytics"),o=e("./external/sepa"),i=e("../lib/create-assets-url"),a=e("../lib/create-deferred-client"),s=e("../lib/basic-component-verification"),c=e("@braintree/wrap-promise");t.exports={create:c((function(e){var t="SEPA";return s.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){return a.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:i.create(e.authorization),name:t})})).then((function(t){return e.client=t,r.sendEvent(e.client,"sepa.client.initialized"),new o(e)}))})),VERSION:"3.100.0"}},{"../lib/analytics":119,"../lib/basic-component-verification":122,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./external/sepa":185,"@braintree/wrap-promise":43}],187:[function(e,t,n){"use strict";t.exports={REQUIRED_OPTIONS:["iban","merchantAccountId","mandateType","customerId","accountHolderName","countryCode"],BILLING_ADDRESS_OPTIONS:["address_line_1","address_line_2","admin_area_1","admin_area_2","postal_code"],MANDATE_TYPE_ENUM:["ONE_OFF","RECURRENT"]}},{}],188:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error");t.exports={SEPA_CREATE_MANDATE_FAILED:{type:r.types.MERCHANT,code:"SEPA_CREATE_MANDATE_FAILED",message:"SEPA create mandate failed.",details:"create-mandate"},SEPA_CUSTOMER_CANCELED:{type:r.types.CUSTOMER,code:"SEPA_CUSTOMER_CANCELED",message:"User canceled SEPA authorization",details:"customer-canceled"},SEPA_INVALID_MANDATE_TYPE:{type:r.types.MERCHANT,code:"SEPA_INVALID_MANDATE_TYPE",message:"SEPA mandate type is invalid"},SEPA_TOKENIZATION_FAILED:{type:r.types.UNKNOWN,code:"SEPA_TOKENIZATION_FAILED",message:"SEPA encountered a problem",details:"open-popup"},SEPA_TOKENIZE_MISSING_REQUIRED_OPTION:{type:r.types.MERCHANT,code:"SEPA_TOKENIZE_MISSING_REQUIRED_OPTION",message:"Missing required option for tokenize."},SEPA_TRANSACTION_FAILED:{type:r.types.UNKNOWN,code:"SEPA_TRANSACTION_FAILED",message:"SEPA transaction failed",details:"handle-approval"}}},{"../../lib/braintree-error":124}],189:[function(e,t,n){"use strict";t.exports=function(e,t){var n,r;for(t=t||[],n=0;n<t.length;n++)if(r=t[n],!e.hasOwnProperty(r))return!0;return!1}},{}],190:[function(e,t,n){"use strict";var r=e("../../../lib/assign").assign,o=e("../../../lib/analytics"),i=e("../../../lib/braintree-error"),a=e("../../../lib/is-verified-domain"),s=e("@braintree/extended-promise"),c=e("@braintree/event-emitter"),l=e("../../shared/errors"),u=e("@braintree/iframer"),d=e("framebus"),p=e("../../shared/constants"),f=e("@braintree/uuid"),h=e("../../shared/events"),_=e("../../../lib/use-min"),m=e("../../../lib/constants").BUS_CONFIGURATION_REQUEST_EVENT,E="3.100.0";function y(e){c.call(this),this._client=e.client,this._createPromise=e.createPromise,this._createOptions=e,this._client?(this._isDebug=this._client.getConfiguration().isDebug,this._assetsUrl=this._client.getConfiguration().gatewayConfiguration.assetsUrl):(this._isDebug=Boolean(e.isDebug),this._assetsUrl=e.assetsUrl),this._assetsUrl=this._assetsUrl+"/web/"+E}s.suppressUnhandledPromiseMessage=!0,c.createChild(y),y.prototype._waitForClient=function(){return this._client?Promise.resolve():this._createPromise.then(function(e){this._client=e}.bind(this))},y.prototype.setUpEventListeners=function(){throw new i(l.THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED)},y.prototype.verifyCard=function(e,t){var n,r,i=this;return t=t||{},(r=this._checkForVerifyCardError(e,t))?Promise.reject(r):(this._verifyCardInProgress=!0,n=this._formatVerifyCardOptions(e),this._formatLookupData(n).then((function(e){return o.sendEvent(i._createPromise,"three-d-secure.verification-flow.started"),i._performLookup(n.nonce,e)})).then((function(e){return o.sendEvent(i._createPromise,"three-d-secure.verification-flow.3ds-version."+e.lookup.threeDSecureVersion),i._onLookupComplete(e,n)})).then((function(e){return i.initializeChallengeWithLookupResponse(e,n)})).then((function(e){return i._resetVerificationState(),o.sendEvent(i._createPromise,"three-d-secure.verification-flow.completed"),e})).catch((function(e){return i._resetVerificationState(),o.sendEvent(i._createPromise,"three-d-secure.verification-flow.failed"),Promise.reject(e)})))},y.prototype._checkForFrameworkSpecificVerifyCardErrors=function(){throw new i(l.THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED)},y.prototype._presentChallenge=function(){throw new i(l.THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED)},y.prototype.prepareLookup=function(){throw new i(l.THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED)},y.prototype._resetVerificationState=function(){this._verifyCardInProgress=!1,this._verifyCardPromisePlus=null,"function"==typeof this._reloadThreeDSecure&&this._reloadThreeDSecure()},y.prototype._performLookup=function(e,t){var n=this,r="payment_methods/"+e+"/three_d_secure/lookup";return this._waitForClient().then((function(){return n._client.request({endpoint:r,method:"post",data:t}).catch((function(e){var t,r=e&&e.details&&e.details.httpStatus,a="three-d-secure.verification-flow.lookup-failed";return 404===r?(t=l.THREEDS_LOOKUP_TOKENIZED_CARD_NOT_FOUND_ERROR,a+=".404"):422===r?(t=l.THREEDS_LOOKUP_VALIDATION_ERROR,a+=".422"):t=l.THREEDS_LOOKUP_ERROR,o.sendEvent(n._createPromise,a),Promise.reject(new i({type:t.type,code:t.code,message:t.message,details:{originalError:e}}))}))}))},y.prototype._checkForVerifyCardError=function(e,t){var n;return!0===this._verifyCardInProgress?new i(l.THREEDS_AUTHENTICATION_IN_PROGRESS):(e.nonce?e.amount||(n="an amount"):n="a nonce",n||(n=this._checkForFrameworkSpecificVerifyCardErrors(e,t)),n?new i({type:l.THREEDS_MISSING_VERIFY_CARD_OPTION.type,code:l.THREEDS_MISSING_VERIFY_CARD_OPTION.code,message:"verifyCard options must include "+n+"."}):null)},y.prototype.initializeChallengeWithLookupResponse=function(e,t){var n=this;return t=t||{},this._lookupPaymentMethod=e.paymentMethod,n._verifyCardPromisePlus=n._verifyCardPromisePlus||new s,n._handleLookupResponse(e,t),n._verifyCardPromisePlus.then((function(e){return o.sendEvent(n._createPromise,"three-d-secure.verification-flow.liability-shifted."+String(e.liabilityShifted)),o.sendEvent(n._createPromise,"three-d-secure.verification-flow.liability-shift-possible."+String(e.liabilityShiftPossible)),e}))},y.prototype._handleLookupResponse=function(e,t){var n,r=Boolean(e.lookup&&e.lookup.acsUrl);o.sendEvent(this._createPromise,"three-d-secure.verification-flow.challenge-presented."+String(r)),r?this._presentChallenge(e,t):((n=this._formatAuthResponse(e.paymentMethod,e.threeDSecureInfo)).verificationDetails=e.threeDSecureInfo,this._verifyCardPromisePlus.resolve(n))},y.prototype._onLookupComplete=function(e){return this._lookupPaymentMethod=e.paymentMethod,this._verifyCardPromisePlus=new s,Promise.resolve(e)},y.prototype._formatAuthResponse=function(e,t){return{nonce:e.nonce,type:e.type,binData:e.binData,details:e.details,description:e.description&&e.description.replace(/\+/g," "),liabilityShifted:t&&t.liabilityShifted,liabilityShiftPossible:t&&t.liabilityShiftPossible,threeDSecureInfo:e.threeDSecureInfo}},y.prototype._formatVerifyCardOptions=function(e){return r({},e)},y.prototype._formatLookupData=function(e){var t={amount:e.amount};return!0===e.collectDeviceData&&(t.browserColorDepth=window.screen.colorDepth,t.browserJavaEnabled=window.navigator.javaEnabled(),t.browserJavascriptEnabled=!0,t.browserLanguage=window.navigator.language,t.browserScreenHeight=window.screen.height,t.browserScreenWidth=window.screen.width,t.browserTimeZone=(new Date).getTimezoneOffset(),t.deviceChannel="Browser"),Promise.resolve(t)},y.prototype._handleV1AuthResponse=function(e){var t=JSON.parse(e.auth_response);t.success?this._verifyCardPromisePlus.resolve(this._formatAuthResponse(t.paymentMethod,t.threeDSecureInfo)):t.threeDSecureInfo&&t.threeDSecureInfo.liabilityShiftPossible?this._verifyCardPromisePlus.resolve(this._formatAuthResponse(this._lookupPaymentMethod,t.threeDSecureInfo)):this._verifyCardPromisePlus.reject(new i({type:i.types.UNKNOWN,code:"UNKNOWN_AUTH_RESPONSE",message:t.error.message}))},y.prototype.cancelVerifyCard=function(){var e,t;return this._verifyCardInProgress=!1,this._lookupPaymentMethod?(t=this._lookupPaymentMethod.threeDSecureInfo,e=r({},this._lookupPaymentMethod,{liabilityShiftPossible:t&&t.liabilityShiftPossible,liabilityShifted:t&&t.liabilityShifted,verificationDetails:t&&t.verificationDetails}),Promise.resolve(e)):Promise.reject(new i(l.THREEDS_NO_VERIFICATION_PAYLOAD))},y.prototype._setupV1Bus=function(e){var t=this._client.getConfiguration(),n=window.location.href.split("#")[0],r=e.lookupResponse,o=f(),i=new d({channel:o,verifyDomain:a}),s=this._assetsUrl+"/html/three-d-secure-authentication-complete-frame.html?channel="+encodeURIComponent(o)+"&";return i.on(m,(function(o){o({clientConfiguration:t,nonce:e.nonce,acsUrl:r.acsUrl,pareq:r.pareq,termUrl:r.termUrl+"&three_d_secure_version="+E+"&authentication_complete_base_url="+encodeURIComponent(s),md:r.md,parentUrl:n})})),i.on(h.AUTHENTICATION_COMPLETE,e.handleAuthResponse),i},y.prototype._setupV1Iframe=function(e){var t=this._assetsUrl+"/html/three-d-secure-bank-frame"+_(this._isDebug)+".html?showLoader="+e.showLoader;return u({src:t,height:400,width:400,name:p.LANDING_FRAME_NAME+"_"+this._v1Bus.channel,title:"3D Secure Authorization Frame"})},y.prototype._setupV1Elements=function(e){this._v1Bus=this._setupV1Bus(e),this._v1Iframe=this._setupV1Iframe(e)},y.prototype._teardownV1Elements=function(){this._v1Bus&&(this._v1Bus.teardown(),this._v1Bus=null),this._v1Iframe&&this._v1Iframe.parentNode&&(this._v1Iframe.parentNode.removeChild(this._v1Iframe),this._v1Iframe=null),this._onV1Keyup&&(document.removeEventListener("keyup",this._onV1Keyup),this._onV1Keyup=null)},y.prototype.teardown=function(){return o.sendEvent(this._createPromise,"three-d-secure.teardown-completed"),this._teardownV1Elements(),Promise.resolve()},t.exports=y},{"../../../lib/analytics":119,"../../../lib/assign":121,"../../../lib/braintree-error":124,"../../../lib/constants":126,"../../../lib/is-verified-domain":153,"../../../lib/use-min":160,"../../shared/constants":199,"../../shared/errors":200,"../../shared/events":201,"@braintree/event-emitter":33,"@braintree/extended-promise":34,"@braintree/iframer":35,"@braintree/uuid":39,framebus:52}],191:[function(e,t,n){"use strict";var r=e("./songbird");function o(e){r.call(this,e)}o.prototype=Object.create(r.prototype,{constructor:r}),o.prototype._createV1IframeModalElement=function(e){var t=document.createElement("div");return t.innerHTML='<div class="modal fade in" tabindex="-1" role="dialog" aria-labelledby="CCAFrameModal-label" aria-hidden="true" style="display: block;"><div class="modal-dialog" style="width:440px;z-index:999999;"><div class="modal-content"><div class="modal-body" data-braintree-v1-fallback-iframe-container><button type="button" data-braintree-v1-fallback-close-button class="close" data-dismiss="modal" aria-hidden="true">×</button></div></div></div><div data-braintree-v1-fallback-backdrop style="position: fixed;cursor: pointer;z-index: 999998;top: 0;left: 0;width: 100%;height: 100%;"></div></div>',t.querySelector("[data-braintree-v1-fallback-iframe-container]").appendChild(e),t},o.prototype._createCardinalConfigurationOptions=function(e){var t=r.prototype._createCardinalConfigurationOptions.call(this,e);return t.payment.framework="bootstrap3",t},t.exports=o},{"./songbird":196}],192:[function(e,t,n){"use strict";var r=e("./songbird");function o(e){r.call(this,e)}o.prototype=Object.create(r.prototype,{constructor:r}),o.prototype._createV1IframeModalElement=function(e){var t=document.createElement("div"),n=Boolean(this._createOptions&&this._createOptions.cardinalSDKConfig&&this._createOptions.cardinalSDKConfig.payment&&this._createOptions.cardinalSDKConfig.payment.displayExitButton);return t.innerHTML='<div style="position: fixed;z-index: 999999;top: 50%;left: 50%;padding: 24px 20px;transform: translate(-50%,-50%);border-radius: 2px;background: #fff;max-width: 100%;overflow: auto;"><div><button data-braintree-v1-fallback-close-button style="font-family: Helvetica,Arial,sans-serif;font-size: 25px;line-height: 12px;position: absolute;top: 2px;right: 0px;cursor: pointer;color: #999;border: 0;outline: none;background: none;" onMouseOver="this.style.color=\'#000\'" onMouseOut="this.style.color=\'#999\'">×</button></div><div data-braintree-v1-fallback-iframe-container style="height: 400px;"></div></div><div data-braintree-v1-fallback-backdrop style="position: fixed;z-index: 999998;cursor: pointer;top: 0;left: 0;width: 100%;height: 100%;transition: opacity 1ms ease;background: rgba(0,0,0,.6);"></div>',n||(t.querySelector("[data-braintree-v1-fallback-close-button]").style.display="none"),t.querySelector("[data-braintree-v1-fallback-iframe-container]").appendChild(e),t},t.exports=o},{"./songbird":196}],193:[function(e,t,n){"use strict";var r=e("./legacy"),o=e("./cardinal-modal"),i=e("./bootstrap3-modal"),a=e("./inline-iframe");t.exports={legacy:r,"cardinal-modal":o,"bootstrap3-modal":i,"inline-iframe":a}},{"./bootstrap3-modal":191,"./cardinal-modal":192,"./inline-iframe":194,"./legacy":195}],194:[function(e,t,n){"use strict";var r=e("./songbird"),o=e("../../../lib/braintree-error"),i=e("../../shared/errors"),a=e("../../../lib/enumerate");function s(e){r.call(this,e)}s.prototype=Object.create(r.prototype,{constructor:r}),s.events=a(["AUTHENTICATION_IFRAME_AVAILABLE"],"inline-iframe-framework:"),s.prototype.setUpEventListeners=function(e){r.prototype.setUpEventListeners.call(this,e),this.on(s.events.AUTHENTICATION_IFRAME_AVAILABLE,(function(t,n){e("authentication-iframe-available",t,n)}))},s.prototype._createCardinalConfigurationOptions=function(e){var t=r.prototype._createCardinalConfigurationOptions.call(this,e);return t.payment.framework="inline",t},s.prototype._addV1IframeToPage=function(){this._emit(s.events.AUTHENTICATION_IFRAME_AVAILABLE,{element:this._v1Modal},(function(){}))},s.prototype._setupFrameworkSpecificListeners=function(){this.setCardinalListener("ui.inline.setup",this._onInlineSetup.bind(this))},s.prototype._onInlineSetup=function(e,t,n,r){var a,c;e&&t?("CCA"!==t.paymentType||"suppress"!==t.data.mode&&"static"!==t.data.mode)&&(c=!0):c=!0,c?r(new o(i.THREEDS_INLINE_IFRAME_DETAILS_INCORRECT)):((a=document.createElement("div")).innerHTML=e,"suppress"===t.data.mode?(a.style.display="none",document.body.appendChild(a),n()):"static"===t.data.mode&&this._emit(s.events.AUTHENTICATION_IFRAME_AVAILABLE,{element:a},(function(){n()})))},t.exports=s},{"../../../lib/braintree-error":124,"../../../lib/enumerate":134,"../../shared/errors":200,"./songbird":196}],195:[function(e,t,n){"use strict";var r=e("./base"),o=e("../../../lib/deferred");function i(e){r.call(this,e)}i.prototype=Object.create(r.prototype,{constructor:i}),i.prototype.setUpEventListeners=function(){},i.prototype.transformV1CustomerBillingAddress=function(e){return e.billingAddress.line1=e.billingAddress.streetAddress,e.billingAddress.line2=e.billingAddress.extendedAddress,e.billingAddress.city=e.billingAddress.locality,e.billingAddress.state=e.billingAddress.region,e.billingAddress.countryCode=e.billingAddress.countryCodeAlpha2,delete e.billingAddress.streetAddress,delete e.billingAddress.extendedAddress,delete e.billingAddress.locality,delete e.billingAddress.region,delete e.billingAddress.countryCodeAlpha2,e},i.prototype._createIframe=function(e){var t=this;return this._setupV1Elements({nonce:e.nonce,lookupResponse:e.lookupResponse,showLoader:e.showLoader,handleAuthResponse:function(n){t._handleAuthResponse(n,e)}}),this._v1Iframe},i.prototype._handleAuthResponse=function(e,t){this._v1Bus.teardown(),t.removeFrame(),o(function(){this._handleV1AuthResponse(e)}.bind(this))()},i.prototype._checkForFrameworkSpecificVerifyCardErrors=function(e){var t;return"function"!=typeof e.addFrame?t="an addFrame function":"function"!=typeof e.removeFrame&&(t="a removeFrame function"),t},i.prototype._formatVerifyCardOptions=function(e){var t=r.prototype._formatVerifyCardOptions.call(this,e);return t.addFrame=o(e.addFrame),t.removeFrame=o(e.removeFrame),t.showLoader=!1!==e.showLoader,t},i.prototype._formatLookupData=function(e){var t=this;return r.prototype._formatLookupData.call(this,e).then((function(n){return e.customer&&e.customer.billingAddress&&(n.customer=t.transformV1CustomerBillingAddress(e.customer)),n}))},i.prototype._presentChallenge=function(e,t){t.addFrame(null,this._createIframe({showLoader:t.showLoader,lookupResponse:e.lookup,nonce:e.paymentMethod.nonce,removeFrame:t.removeFrame}))},t.exports=i},{"../../../lib/deferred":132,"./base":190}],196:[function(e,t,n){"use strict";var r=e("./base"),o=e("../../../lib/assign").assign,i=e("../../../lib/deferred"),a=e("../../../lib/braintree-error"),s=e("../../../lib/convert-to-braintree-error"),c=e("../../../lib/analytics"),l=e("../../../lib/assets"),u=e("../../shared/errors"),d=e("../../../lib/enumerate"),p=e("../../shared/constants"),f=e("@braintree/extended-promise"),h=e("../../../lib/constants").INTEGRATION_TIMEOUT_MS,_=e("../../../lib/constants").PLATFORM,m="3.100.0",E=["ui.close","ui.render","ui.renderHidden","ui.loading.close","ui.loading.render"],y=["low_value","transaction_risk_analysis"];function g(e){r.call(this,e),this._songbirdInitFailed=!1,this._clientMetadata={requestedThreeDSecureVersion:"2",sdkVersion:_+"/"+m},this.originalSetupOptions=e,this._getDfReferenceIdPromisePlus=new f,this.setupSongbird(e),this._cardinalEvents=[]}function v(e,t,n){t[n+"Line1"]=e.streetAddress,t[n+"Line2"]=e.extendedAddress,t[n+"Line3"]=e.line3,t[n+"City"]=e.locality,t[n+"State"]=e.region,t[n+"PostalCode"]=e.postalCode,t[n+"CountryCode"]=e.countryCodeAlpha2}f.suppressUnhandledPromiseMessage=!0,g.prototype=Object.create(r.prototype,{constructor:g}),g.events=d(["LOOKUP_COMPLETE","CUSTOMER_CANCELED","UI.CLOSE","UI.RENDER","UI.RENDERHIDDEN","UI.LOADING.CLOSE","UI.LOADING.RENDER"],"songbird-framework:"),g.prototype.setUpEventListeners=function(e){this.on(g.events.LOOKUP_COMPLETE,(function(t,n){e("lookup-complete",t,n)})),this.on(g.events.CUSTOMER_CANCELED,(function(){e("customer-canceled")})),this.on(g.events["UI.CLOSE"],(function(){e("authentication-modal-close")})),this.on(g.events["UI.RENDER"],(function(){e("authentication-modal-render")})),this.on(g.events["UI.RENDERHIDDEN"],(function(){e("authentication-modal-render-hidden")})),this.on(g.events["UI.LOADING.CLOSE"],(function(){e("authentication-modal-loader-close")})),this.on(g.events["UI.LOADING.RENDER"],(function(){e("authentication-modal-loader-render")}))},g.prototype.prepareLookup=function(e){var t=o({},e),n=this;return this.getDfReferenceId().then((function(e){t.dfReferenceId=e})).then((function(){return n._triggerCardinalBinProcess(e.bin)})).catch((function(){})).then((function(){return n._waitForClient()})).then((function(){return t.clientMetadata=n._clientMetadata,t.authorizationFingerprint=n._client.getConfiguration().authorizationFingerprint,t.braintreeLibraryVersion="braintree/web/"+m,t}))},g.prototype.initializeChallengeWithLookupResponse=function(e,t){return this.setupSongbird().then(function(){return r.prototype.initializeChallengeWithLookupResponse.call(this,e,t)}.bind(this))},g.prototype.handleSongbirdError=function(e){this._songbirdInitFailed=!0,this._removeSongbirdListeners(),c.sendEvent(this._createPromise,"three-d-secure.cardinal-sdk.songbird-error."+e),this._songbirdPromise&&this._songbirdPromise.resolve()},g.prototype._triggerCardinalBinProcess=function(e){var t=this,n=Date.now();return window.Cardinal.trigger("bin.process",e).then((function(e){t._clientMetadata.issuerDeviceDataCollectionTimeElapsed=Date.now()-n,t._clientMetadata.issuerDeviceDataCollectionResult=e&&e.Status}))},g.prototype.transformBillingAddress=function(e,t){return t&&(v(t,e,"billing"),e.billingPhoneNumber=t.phoneNumber,e.billingGivenName=t.givenName,e.billingSurname=t.surname),e},g.prototype.transformShippingAddress=function(e){var t=e.shippingAddress;return t&&(v(t,e,"shipping"),delete e.shippingAddress),e},g.prototype._createV1IframeModalElement=function(e){var t=document.createElement("div");return t.innerHTML='<div data-braintree-v1-fallback-iframe-container="true" style="height: 400px;"></div>',t.querySelector('[data-braintree-v1-fallback-iframe-container="true"]').appendChild(e),t},g.prototype._createV1IframeModal=function(e){var t=this._createV1IframeModalElement(e),n=t.querySelector("[data-braintree-v1-fallback-close-button]"),r=t.querySelector("[data-braintree-v1-fallback-backdrop]"),o=this;function i(){t.parentNode.removeChild(t),o.cancelVerifyCard(u.THREEDS_CARDINAL_SDK_CANCELED),document.removeEventListener("keyup",o._onV1Keyup),o._onV1Keyup=null}return this._onV1Keyup=function(e){"Escape"===e.key&&t.parentNode&&i()},n&&n.addEventListener("click",i),r&&r.addEventListener("click",i),document.addEventListener("keyup",this._onV1Keyup),t},g.prototype._addV1IframeToPage=function(){document.body.appendChild(this._v1Modal)},g.prototype.setupSongbird=function(e){var t=this,n=Date.now();return this._songbirdPromise||(e=e||{},this._songbirdPromise=new f,this._v2SetupFailureReason="reason-unknown",t._loadCardinalScript(e).then((function(){return window.Cardinal?t._configureCardinalSdk({setupOptions:e,setupStartTime:n}):(t._v2SetupFailureReason="cardinal-global-unavailable",Promise.reject(new a(u.THREEDS_CARDINAL_SDK_SETUP_FAILED)))})).catch((function(e){var n=s(e,{type:u.THREEDS_CARDINAL_SDK_SETUP_FAILED.type,code:u.THREEDS_CARDINAL_SDK_SETUP_FAILED.code,message:u.THREEDS_CARDINAL_SDK_SETUP_FAILED.message});t._getDfReferenceIdPromisePlus.reject(n),window.clearTimeout(t._songbirdSetupTimeoutReference),c.sendEvent(t._client,"three-d-secure.cardinal-sdk.init.setup-failed"),t.handleSongbirdError("cardinal-sdk-setup-failed."+t._v2SetupFailureReason)}))),this._songbirdPromise},g.prototype._configureCardinalSdk=function(e){var t=this;return this._waitForClient().then((function(){return t._client.getConfiguration().gatewayConfiguration.threeDSecure})).then((function(n){var r=n.cardinalAuthenticationJWT,o=e.setupOptions,i=e.setupStartTime,a=t._createCardinalConfigurationOptions(o);E.forEach((function(e){t.setCardinalListener(e,(function(){t._emit(g.events[e.toUpperCase()])}))})),t.setCardinalListener("payments.setupComplete",t._createPaymentsSetupCompleteCallback()),t._setupFrameworkSpecificListeners(),window.Cardinal.configure(a),window.Cardinal.setup("init",{jwt:r}),t._clientMetadata.cardinalDeviceDataCollectionTimeElapsed=Date.now()-i,t.setCardinalListener("payments.validated",t._createPaymentsValidatedCallback())})).catch((function(e){return t._v2SetupFailureReason="cardinal-configuration-threw-error",Promise.reject(e)}))},g.prototype.setCardinalListener=function(e,t){this._cardinalEvents.push(e),window.Cardinal.on(e,t)},g.prototype._setupFrameworkSpecificListeners=function(){},g.prototype._createCardinalConfigurationOptions=function(e){var t=e.cardinalSDKConfig||{},n=t.payment||{};return!t.logging&&e.loggingEnabled&&(t.logging={level:"verbose"}),t.payment={},n.hasOwnProperty("displayLoading")&&(t.payment.displayLoading=n.displayLoading),n.hasOwnProperty("displayExitButton")&&(t.payment.displayExitButton=n.displayExitButton),t},g.prototype._loadCardinalScript=function(e){var t=this;return this._waitForClient().then((function(){var n=t._getCardinalScriptSource();return t._songbirdSetupTimeoutReference=window.setTimeout((function(){c.sendEvent(t._client,"three-d-secure.cardinal-sdk.init.setup-timeout"),t.handleSongbirdError("cardinal-sdk-setup-timeout")}),e.timeout||h),l.loadScript({src:n})})).catch((function(e){return t._v2SetupFailureReason="songbird-js-failed-to-load",Promise.reject(s(e,u.THREEDS_CARDINAL_SDK_SCRIPT_LOAD_FAILED))}))},g.prototype._getCardinalScriptSource=function(){var e=this._client.getConfiguration().gatewayConfiguration;return e&&"production"===e.environment?p.CARDINAL_SCRIPT_SOURCE.production:p.CARDINAL_SCRIPT_SOURCE.sandbox},g.prototype._createPaymentsSetupCompleteCallback=function(){var e=this;return function(t){e._getDfReferenceIdPromisePlus.resolve(t.sessionId),window.clearTimeout(e._songbirdSetupTimeoutReference),c.sendEvent(e._createPromise,"three-d-secure.cardinal-sdk.init.setup-completed"),e._songbirdPromise.resolve()}},g.prototype.getDfReferenceId=function(){return this._getDfReferenceIdPromisePlus},g.prototype._performJWTValidation=function(e,t){var n=this,r=this._lookupPaymentMethod.nonce,o="payment_methods/"+r+"/three_d_secure/authenticate_from_jwt",i=e&&e.Payment&&e.Payment.ExtendedData&&e.Payment.ExtendedData.ChallengeCancel;return i&&(c.sendEvent(this._createPromise,"three-d-secure.verification-flow.cardinal-sdk.cancel-code."+i),"01"===i&&this._emit(g.events.CUSTOMER_CANCELED)),c.sendEvent(this._createPromise,"three-d-secure.verification-flow.upgrade-payment-method.started"),this._waitForClient().then((function(){return n._client.request({method:"post",endpoint:o,data:{jwt:t,paymentMethodNonce:r}})})).then((function(t){var r=t.paymentMethod||n._lookupPaymentMethod,o=n._formatAuthResponse(r,t.threeDSecureInfo);return o.rawCardinalSDKVerificationData=e,c.sendEvent(n._client,"three-d-secure.verification-flow.upgrade-payment-method.succeeded"),Promise.resolve(o)})).catch((function(e){var t=new a({type:u.THREEDS_JWT_AUTHENTICATION_FAILED.type,code:u.THREEDS_JWT_AUTHENTICATION_FAILED.code,message:u.THREEDS_JWT_AUTHENTICATION_FAILED.message,details:{originalError:e}});return c.sendEvent(n._client,"three-d-secure.verification-flow.upgrade-payment-method.errored"),Promise.reject(t)}))},g.prototype._createPaymentsValidatedCallback=function(){var e=this;return function(t,n){var r;if(c.sendEvent(e._createPromise,"three-d-secure.verification-flow.cardinal-sdk.action-code."+t.ActionCode.toLowerCase()),e._verifyCardPromisePlus)switch(t.ActionCode){case"SUCCESS":case"NOACTION":case"FAILURE":e._performJWTValidation(t,n).then((function(t){e._verifyCardPromisePlus.resolve(t)})).catch((function(t){e._verifyCardPromisePlus.reject(t)}));break;case"ERROR":switch(c.sendEvent(e._createPromise,"three-d-secure.verification-flow.cardinal-sdk-error."+t.ErrorNumber),t.ErrorNumber){case 10001:case 10002:r=new a(u.THREEDS_CARDINAL_SDK_SETUP_TIMEDOUT);break;case 10003:case 10007:case 10009:r=new a(u.THREEDS_CARDINAL_SDK_RESPONSE_TIMEDOUT);break;case 10005:case 10006:r=new a(u.THREEDS_CARDINAL_SDK_BAD_CONFIG);break;case 10008:case 10010:r=new a(u.THREEDS_CARDINAL_SDK_BAD_JWT);break;case 10011:c.sendEvent(e._createPromise,"three-d-secure.verification-flow.canceled"),r=new a(u.THREEDS_CARDINAL_SDK_CANCELED);break;default:r=new a(u.THREEDS_CARDINAL_SDK_ERROR)}r.details={originalError:{code:t.ErrorNumber,description:t.ErrorDescription}},e._verifyCardPromisePlus.reject(r)}else e.handleSongbirdError("cardinal-sdk-setup-error.number-"+t.ErrorNumber)}},g.prototype._checkForVerifyCardError=function(e,t){return e.bin?r.prototype._checkForVerifyCardError.call(this,e,t):new a({type:u.THREEDS_MISSING_VERIFY_CARD_OPTION.type,code:u.THREEDS_MISSING_VERIFY_CARD_OPTION.code,message:"verifyCard options must include a BIN."})},g.prototype._checkForFrameworkSpecificVerifyCardErrors=function(e,t){var n;return"function"==typeof e.onLookupComplete||t.ignoreOnLookupCompleteRequirement||(n="an onLookupComplete function"),n},g.prototype._formatVerifyCardOptions=function(e){var t=r.prototype._formatVerifyCardOptions.call(this,e),n=t.additionalInformation||{};return n=this.transformBillingAddress(n,e.billingAddress),n=this.transformShippingAddress(n),e.onLookupComplete&&(t.onLookupComplete=i(e.onLookupComplete)),e.email&&(n.email=e.email),e.mobilePhoneNumber&&(n.mobilePhoneNumber=e.mobilePhoneNumber),t.additionalInformation=n,t},g.prototype._onLookupComplete=function(e,t){var n=this;return r.prototype._onLookupComplete.call(this,e).then((function(e){return new Promise((function(r,o){function i(){r(e)}e.requiresUserAuthentication=Boolean(e.lookup&&e.lookup.acsUrl),n._verifyCardPromisePlus.catch(o),t.onLookupComplete?t.onLookupComplete(e,i):n._emit(g.events.LOOKUP_COMPLETE,e,i)}))}))},g.prototype._presentChallenge=function(e){!this._songbirdInitFailed&&e.lookup.transactionId&&window.Cardinal.continue("cca",{AcsUrl:e.lookup.acsUrl,Payload:e.lookup.pareq},{OrderDetails:{TransactionId:e.lookup.transactionId}})},g.prototype._formatLookupData=function(e){var t=this;return r.prototype._formatLookupData.call(this,e).then((function(n){if(n.additionalInfo=e.additionalInformation,e.accountType&&(n.accountType=e.accountType),e.challengeRequested&&(n.challengeRequested=e.challengeRequested),e.requestedExemptionType){if(!y.includes(e.requestedExemptionType))throw new a({code:u.THREEDS_REQUESTED_EXEMPTION_TYPE_INVALID.code,type:u.THREEDS_REQUESTED_EXEMPTION_TYPE_INVALID.type,message:"requestedExemptionType `"+e.requestedExemptionType+"` is not a valid exemption. The accepted values are: `"+y.join("`, `")+"`"});n.requestedExemptionType=e.requestedExemptionType}return e.customFields&&(n.customFields=e.customFields),e.dataOnlyRequested&&(n.dataOnlyRequested=e.dataOnlyRequested),e.exemptionRequested&&(n.exemptionRequested=e.exemptionRequested),e.requestVisaDAF&&(n.requestVisaDAF=e.requestVisaDAF),e.bin&&(n.bin=e.bin),null!=e.cardAdd&&(n.cardAdd=e.cardAdd),null!=e.cardAddChallengeRequested&&(n.cardAdd=e.cardAddChallengeRequested),e.merchantName&&(n.merchantName=e.merchantName),t.prepareLookup(n)}))},g.prototype.cancelVerifyCard=function(e){var t=this;return r.prototype.cancelVerifyCard.call(this).then((function(n){return t._verifyCardPromisePlus&&(e=e||new a(u.THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT),t._verifyCardPromisePlus.reject(e)),n}))},g.prototype._removeSongbirdListeners=function(){this._cardinalEvents.forEach((function(e){window.Cardinal.off(e)})),this._cardinalEvents=[]},g.prototype.teardown=function(){return window.Cardinal&&this._removeSongbirdListeners(),r.prototype.teardown.call(this)},g.prototype._reloadThreeDSecure=function(){var e=this,t=Date.now();return e.teardown().then((function(){e._configureCardinalSdk({setupOptions:e.originalSetupOptions,setupStartTime:t})}))},t.exports=g},{"../../../lib/analytics":119,"../../../lib/assets":120,"../../../lib/assign":121,"../../../lib/braintree-error":124,"../../../lib/constants":126,"../../../lib/convert-to-braintree-error":128,"../../../lib/deferred":132,"../../../lib/enumerate":134,"../../shared/constants":199,"../../shared/errors":200,"./base":190,"@braintree/extended-promise":34}],197:[function(e,t,n){"use strict";var r=e("@braintree/wrap-promise"),o=e("../../lib/methods"),i=e("../../lib/convert-methods-to-error"),a=e("@braintree/event-emitter"),s=e("./frameworks");function c(e){var t=this,n=s[e.framework];a.call(this),this._framework=new n(e),this._framework.setUpEventListeners((function(){t._emit.apply(t,arguments)}))}a.createChild(c),c.prototype.verifyCard=function(e){var t;return this.hasListener("lookup-complete")&&(t={ignoreOnLookupCompleteRequirement:!0}),this._framework.verifyCard(e,t)},c.prototype.initializeChallengeWithLookupResponse=function(e){return"string"==typeof e&&(e=JSON.parse(e)),this._framework.initializeChallengeWithLookupResponse(e)},c.prototype.prepareLookup=function(e){return this._framework.prepareLookup(e).then((function(e){return JSON.stringify(e)}))},c.prototype.cancelVerifyCard=function(){return this._framework.cancelVerifyCard()},c.prototype.teardown=function(){var e=o(c.prototype).concat(o(a.prototype));return i(this,e),this._framework.teardown()},t.exports=r.wrapPrototype(c)},{"../../lib/convert-methods-to-error":127,"../../lib/methods":155,"./frameworks":193,"@braintree/event-emitter":33,"@braintree/wrap-promise":43}],198:[function(e,t,n){"use strict";var r=e("./external/three-d-secure"),o=e("../lib/is-https").isHTTPS,i=e("../lib/basic-component-verification"),a=e("../lib/create-deferred-client"),s=e("../lib/create-assets-url"),c=e("../lib/braintree-error"),l=e("../lib/analytics"),u=e("./shared/errors"),d=e("@braintree/wrap-promise");t.exports={create:d((function(e){var t="3D Secure",n=function(e){var t=String(e.version||"");if(!t||"1"===t)throw new c({code:u.THREEDS_UNSUPPORTED_VERSION.code,type:u.THREEDS_UNSUPPORTED_VERSION.type,message:u.THREEDS_UNSUPPORTED_VERSION.message});switch(t){case"2":case"2-cardinal-modal":return"cardinal-modal";case"2-bootstrap3-modal":return"bootstrap3-modal";case"2-inline-iframe":return"inline-iframe";default:throw new c({code:u.THREEDS_UNRECOGNIZED_VERSION.code,type:u.THREEDS_UNRECOGNIZED_VERSION.type,message:"Version `"+e.version+"` is not a recognized version. You may need to update the version of your Braintree SDK to support this version."})}}(e);return i.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){var i=s.create(e.authorization),d=a.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:i,name:t}).then((function(t){var r,i=t.getConfiguration(),a=i.gatewayConfiguration;return e.client=t,a.threeDSecureEnabled||(r=u.THREEDS_NOT_ENABLED),"TOKENIZATION_KEY"===i.authorizationType&&(r=u.THREEDS_CAN_NOT_USE_TOKENIZATION_KEY),"production"===a.environment&&!o()&&(r=u.THREEDS_HTTPS_REQUIRED),"legacy"===n||a.threeDSecure&&a.threeDSecure.cardinalAuthenticationJWT||(l.sendEvent(e.client,"three-d-secure.initialization.failed.missing-cardinalAuthenticationJWT"),r=u.THREEDS_NOT_ENABLED_FOR_V2),r?Promise.reject(new c(r)):(l.sendEvent(e.client,"three-d-secure.initialized"),t)})),p=new r({client:e.client,assetsUrl:i,createPromise:d,loggingEnabled:e.loggingEnabled,cardinalSDKConfig:e.cardinalSDKConfig,framework:n});return e.client?d.then((function(){return p})):p}))})),VERSION:"3.100.0"}},{"../lib/analytics":119,"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"../lib/is-https":152,"./external/three-d-secure":197,"./shared/errors":200,"@braintree/wrap-promise":43}],199:[function(e,t,n){"use strict";t.exports={LANDING_FRAME_NAME:"braintreethreedsecurelanding",CARDINAL_SCRIPT_SOURCE:{production:"https://songbird.cardinalcommerce.com/edge/v1/songbird.js",sandbox:"https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js"}}},{}],200:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error");t.exports={THREEDS_NOT_ENABLED:{type:r.types.MERCHANT,code:"THREEDS_NOT_ENABLED",message:"3D Secure is not enabled for this merchant."},THREEDS_CAN_NOT_USE_TOKENIZATION_KEY:{type:r.types.MERCHANT,code:"THREEDS_CAN_NOT_USE_TOKENIZATION_KEY",message:"3D Secure can not use a tokenization key for authorization."},THREEDS_HTTPS_REQUIRED:{type:r.types.MERCHANT,code:"THREEDS_HTTPS_REQUIRED",message:"3D Secure requires HTTPS."},THREEDS_NOT_ENABLED_FOR_V2:{type:r.types.MERCHANT,code:"THREEDS_NOT_ENABLED_FOR_V2",message:"3D Secure version 2 is not enabled for this merchant. Contact Braintree Support for assistance at https://help.braintreepayments.com/"},THREEDS_UNRECOGNIZED_VERSION:{type:r.types.MERCHANT,code:"THREEDS_UNRECOGNIZED_VERSION"},THREEDS_CARDINAL_SDK_SETUP_FAILED:{type:r.types.UNKNOWN,code:"THREEDS_CARDINAL_SDK_SETUP_FAILED",message:"Something went wrong setting up Cardinal's Songbird.js library."},THREEDS_CARDINAL_SDK_SCRIPT_LOAD_FAILED:{type:r.types.NETWORK,code:"THREEDS_CARDINAL_SDK_SCRIPT_LOAD_FAILED",message:"Cardinal's Songbird.js library could not be loaded."},THREEDS_CARDINAL_SDK_SETUP_TIMEDOUT:{type:r.types.UNKNOWN,code:"THREEDS_CARDINAL_SDK_SETUP_TIMEDOUT",message:"Cardinal's Songbird.js took too long to setup."},THREEDS_CARDINAL_SDK_RESPONSE_TIMEDOUT:{type:r.types.UNKNOWN,code:"THREEDS_CARDINAL_SDK_RESPONSE_TIMEDOUT",message:"Cardinal's API took too long to respond."},THREEDS_CARDINAL_SDK_BAD_CONFIG:{type:r.types.MERCHANT,code:"THREEDS_CARDINAL_SDK_BAD_CONFIG",message:"JWT or other required field missing. Please check your setup configuration."},THREEDS_CARDINAL_SDK_BAD_JWT:{type:r.types.MERCHANT,code:"THREEDS_CARDINAL_SDK_BAD_JWT",message:"Cardinal JWT missing or malformed. Please check your setup configuration."},THREEDS_CARDINAL_SDK_ERROR:{type:r.types.UNKNOWN,code:"THREEDS_CARDINAL_SDK_ERROR",message:"A general error has occurred with Cardinal. See description for more information."},THREEDS_CARDINAL_SDK_CANCELED:{type:r.types.CUSTOMER,code:"THREEDS_CARDINAL_SDK_CANCELED",message:"Canceled by user."},THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT:{type:r.types.MERCHANT,code:"THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT",message:"3D Secure verfication canceled by merchant."},THREEDS_AUTHENTICATION_IN_PROGRESS:{type:r.types.MERCHANT,code:"THREEDS_AUTHENTICATION_IN_PROGRESS",message:"Cannot call verifyCard while existing authentication is in progress."},THREEDS_MISSING_VERIFY_CARD_OPTION:{type:r.types.MERCHANT,code:"THREEDS_MISSING_VERIFY_CARD_OPTION"},THREEDS_JWT_AUTHENTICATION_FAILED:{type:r.types.UNKNOWN,code:"THREEDS_JWT_AUTHENTICATION_FAILED",message:"Something went wrong authenticating the JWT from Cardinal"},THREEDS_LOOKUP_TOKENIZED_CARD_NOT_FOUND_ERROR:{type:r.types.MERCHANT,code:"THREEDS_LOOKUP_TOKENIZED_CARD_NOT_FOUND_ERROR",message:"Either the payment method nonce passed to `verifyCard` does not exist, or it was already consumed"},THREEDS_LOOKUP_VALIDATION_ERROR:{type:r.types.CUSTOMER,code:"THREEDS_LOOKUP_VALIDATION_ERROR",message:"The data passed in `verifyCard` did not pass validation checks. See details for more info"},THREEDS_LOOKUP_ERROR:{type:r.types.UNKNOWN,code:"THREEDS_LOOKUP_ERROR",message:"Something went wrong during the 3D Secure lookup"},THREEDS_INLINE_IFRAME_DETAILS_INCORRECT:{type:r.types.UNKNOWN,code:"THREEDS_INLINE_IFRAME_DETAILS_INCORRECT",message:"Something went wrong when attempting to add the authentication iframe to the page."},THREEDS_NO_VERIFICATION_PAYLOAD:{type:r.types.MERCHANT,code:"THREEDS_NO_VERIFICATION_PAYLOAD",message:"No verification payload available."},THREEDS_TERM_URL_REQUIRES_BRAINTREE_DOMAIN:{type:r.types.INTERNAL,code:"THREEDS_TERM_URL_REQUIRES_BRAINTREE_DOMAIN",message:"Term Url must be on a Braintree domain."},THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED:{type:r.types.INTERNAL,code:"THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED",message:"Method not implemented for this framework."},THREEDS_REQUESTED_EXEMPTION_TYPE_INVALID:{type:r.types.MERCHANT,code:"THREEDS_REQUESTED_EXEMPTION_TYPE_INVALID",message:"Requested Exemption Type is invalid."},THREEDS_UNSUPPORTED_VERSION:{type:r.types.MERCHANT,code:"THREEDS_UNSUPPORTED_VERSION",message:"3D Secure `1` is deprecated and no longer supported. See available versions at https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html#.create"}}},{"../../lib/braintree-error":124}],201:[function(e,t,n){"use strict";var r=e("../../lib/enumerate");t.exports=r(["AUTHENTICATION_COMPLETE"],"threedsecure:")},{"../../lib/enumerate":134}],202:[function(e,t,n){"use strict";var r=e("./shared/unionpay"),o=e("../lib/basic-component-verification"),i=e("../lib/braintree-error"),a=e("../lib/create-deferred-client"),s=e("../lib/create-assets-url"),c=e("../lib/analytics"),l=e("./shared/errors"),u=e("@braintree/wrap-promise");t.exports={create:u((function(e){var t="UnionPay";return o.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){return a.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:s.create(e.authorization),name:t})})).then((function(t){var n=t.getConfiguration();return e.client=t,n.gatewayConfiguration.unionPay&&!0===n.gatewayConfiguration.unionPay.enabled?(c.sendEvent(e.client,"unionpay.initialized"),new r(e)):Promise.reject(new i(l.UNIONPAY_NOT_ENABLED))}))})),VERSION:"3.100.0"}},{"../lib/analytics":119,"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./shared/errors":204,"./shared/unionpay":205,"@braintree/wrap-promise":43}],203:[function(e,t,n){"use strict";var r=e("../../lib/enumerate");t.exports={events:r(["HOSTED_FIELDS_FETCH_CAPABILITIES","HOSTED_FIELDS_ENROLL","HOSTED_FIELDS_TOKENIZE"],"union-pay:"),HOSTED_FIELDS_FRAME_NAME:"braintreeunionpayhostedfields"}},{"../../lib/enumerate":134}],204:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error");t.exports={UNIONPAY_NOT_ENABLED:{type:r.types.MERCHANT,code:"UNIONPAY_NOT_ENABLED",message:"UnionPay is not enabled for this merchant."},UNIONPAY_HOSTED_FIELDS_INSTANCE_INVALID:{type:r.types.MERCHANT,code:"UNIONPAY_HOSTED_FIELDS_INSTANCE_INVALID",message:"Found an invalid Hosted Fields instance. Please use a valid Hosted Fields instance."},UNIONPAY_HOSTED_FIELDS_INSTANCE_REQUIRED:{type:r.types.MERCHANT,code:"UNIONPAY_HOSTED_FIELDS_INSTANCE_REQUIRED",message:"Could not find the Hosted Fields instance."},UNIONPAY_CARD_OR_HOSTED_FIELDS_INSTANCE_REQUIRED:{type:r.types.MERCHANT,code:"UNIONPAY_CARD_OR_HOSTED_FIELDS_INSTANCE_REQUIRED",message:"A card or a Hosted Fields instance is required. Please supply a card or a Hosted Fields instance."},UNIONPAY_CARD_AND_HOSTED_FIELDS_INSTANCES:{type:r.types.MERCHANT,code:"UNIONPAY_CARD_AND_HOSTED_FIELDS_INSTANCES",message:"Please supply either a card or a Hosted Fields instance, not both."},UNIONPAY_EXPIRATION_DATE_INCOMPLETE:{type:r.types.MERCHANT,code:"UNIONPAY_EXPIRATION_DATE_INCOMPLETE",message:"You must supply expiration month and year or neither."},UNIONPAY_ENROLLMENT_CUSTOMER_INPUT_INVALID:{type:r.types.CUSTOMER,code:"UNIONPAY_ENROLLMENT_CUSTOMER_INPUT_INVALID",message:"Enrollment failed due to user input error."},UNIONPAY_ENROLLMENT_NETWORK_ERROR:{type:r.types.NETWORK,code:"UNIONPAY_ENROLLMENT_NETWORK_ERROR",message:"Could not enroll UnionPay card."},UNIONPAY_FETCH_CAPABILITIES_NETWORK_ERROR:{type:r.types.NETWORK,code:"UNIONPAY_FETCH_CAPABILITIES_NETWORK_ERROR",message:"Could not fetch card capabilities."},UNIONPAY_TOKENIZATION_NETWORK_ERROR:{type:r.types.NETWORK,code:"UNIONPAY_TOKENIZATION_NETWORK_ERROR",message:"A tokenization network error occurred."},UNIONPAY_MISSING_MOBILE_PHONE_DATA:{type:r.types.MERCHANT,code:"UNIONPAY_MISSING_MOBILE_PHONE_DATA",message:"A `mobile` with `countryCode` and `number` is required."},UNIONPAY_FAILED_TOKENIZATION:{type:r.types.CUSTOMER,code:"UNIONPAY_FAILED_TOKENIZATION",message:"The supplied card data failed tokenization."}}},{"../../lib/braintree-error":124}],205:[function(e,t,n){"use strict";var r=e("../../lib/analytics"),o=e("../../lib/braintree-error"),i=e("framebus"),a=e("./constants"),s=e("../../lib/is-verified-domain"),c=e("../../lib/use-min"),l=e("../../lib/convert-methods-to-error"),u=e("./errors"),d=a.events,p=e("@braintree/iframer"),f=e("../../lib/methods"),h=e("@braintree/uuid"),_=e("@braintree/wrap-promise"),m=e("../../lib/constants").BUS_CONFIGURATION_REQUEST_EVENT;function E(e){this._options=e}E.prototype.fetchCapabilities=function(e){var t=this,n=this._options.client,i=e.card?e.card.number:null,a=e.hostedFields;return i&&a?Promise.reject(new o(u.UNIONPAY_CARD_AND_HOSTED_FIELDS_INSTANCES)):i?n.request({method:"get",endpoint:"payment_methods/credit_cards/capabilities",data:{_meta:{source:"unionpay"},creditCard:{number:i}}}).then((function(e){return r.sendEvent(n,"unionpay.capabilities-received"),e})).catch((function(e){var t=e.details&&e.details.httpStatus;return r.sendEvent(n,"unionpay.capabilities-failed"),403===t?Promise.reject(e):Promise.reject(new o({type:u.UNIONPAY_FETCH_CAPABILITIES_NETWORK_ERROR.type,code:u.UNIONPAY_FETCH_CAPABILITIES_NETWORK_ERROR.code,message:u.UNIONPAY_FETCH_CAPABILITIES_NETWORK_ERROR.message,details:{originalError:e}}))})):a?a._bus?t._initializeHostedFields().then((function(){return new Promise((function(e,n){t._bus.emit(d.HOSTED_FIELDS_FETCH_CAPABILITIES,{hostedFields:a},(function(t){t.err?n(new o(t.err)):e(t.payload)}))}))})):Promise.reject(new o(u.UNIONPAY_HOSTED_FIELDS_INSTANCE_INVALID)):Promise.reject(new o(u.UNIONPAY_CARD_OR_HOSTED_FIELDS_INSTANCE_REQUIRED))},E.prototype.enroll=function(e){var t,n=this,i=this._options.client,a=e.card,s=e.mobile,c=e.hostedFields;if(!s)return Promise.reject(new o(u.UNIONPAY_MISSING_MOBILE_PHONE_DATA));if(c)return c._bus?a?Promise.reject(new o(u.UNIONPAY_CARD_AND_HOSTED_FIELDS_INSTANCES)):new Promise((function(e,t){n._initializeHostedFields().then((function(){n._bus.emit(d.HOSTED_FIELDS_ENROLL,{hostedFields:c,mobile:s},(function(n){n.err?t(new o(n.err)):e(n.payload)}))}))})):Promise.reject(new o(u.UNIONPAY_HOSTED_FIELDS_INSTANCE_INVALID));if(a&&a.number){if(t={_meta:{source:"unionpay"},unionPayEnrollment:{number:a.number,mobileCountryCode:s.countryCode,mobileNumber:s.number}},a.expirationDate)t.unionPayEnrollment.expirationDate=a.expirationDate;else if(a.expirationMonth||a.expirationYear){if(!a.expirationMonth||!a.expirationYear)return Promise.reject(new o(u.UNIONPAY_EXPIRATION_DATE_INCOMPLETE));t.unionPayEnrollment.expirationYear=a.expirationYear,t.unionPayEnrollment.expirationMonth=a.expirationMonth}return i.request({method:"post",endpoint:"union_pay_enrollments",data:t}).then((function(e){return r.sendEvent(i,"unionpay.enrollment-succeeded"),{enrollmentId:e.unionPayEnrollmentId,smsCodeRequired:e.smsCodeRequired}})).catch((function(e){var t,n=e.details&&e.details.httpStatus;return 403===n?t=e:n<500?(t=new o(u.UNIONPAY_ENROLLMENT_CUSTOMER_INPUT_INVALID)).details={originalError:e}:(t=new o(u.UNIONPAY_ENROLLMENT_NETWORK_ERROR)).details={originalError:e},r.sendEvent(i,"unionpay.enrollment-failed"),Promise.reject(t)}))}return Promise.reject(new o(u.UNIONPAY_CARD_OR_HOSTED_FIELDS_INSTANCE_REQUIRED))},E.prototype.tokenize=function(e){var t,n=this,i=this._options.client,a=e.card,s=e.hostedFields;return a&&s?Promise.reject(new o(u.UNIONPAY_CARD_AND_HOSTED_FIELDS_INSTANCES)):a?(t={_meta:{source:"unionpay"},creditCard:{number:e.card.number,options:{unionPayEnrollment:{id:e.enrollmentId}}}},e.smsCode&&(t.creditCard.options.unionPayEnrollment.smsCode=e.smsCode),a.expirationDate?t.creditCard.expirationDate=a.expirationDate:a.expirationMonth&&a.expirationYear&&(t.creditCard.expirationYear=a.expirationYear,t.creditCard.expirationMonth=a.expirationMonth),e.card.cvv&&(t.creditCard.cvv=e.card.cvv),i.request({method:"post",endpoint:"payment_methods/credit_cards",data:t}).then((function(e){var t=e.creditCards[0];return delete t.consumed,delete t.threeDSecureInfo,r.sendEvent(i,"unionpay.nonce-received"),t})).catch((function(e){var t,n=e.details&&e.details.httpStatus;return r.sendEvent(i,"unionpay.nonce-failed"),403===n?t=e:n<500?(t=new o(u.UNIONPAY_FAILED_TOKENIZATION)).details={originalError:e}:(t=new o(u.UNIONPAY_TOKENIZATION_NETWORK_ERROR)).details={originalError:e},Promise.reject(t)}))):s?s._bus?new Promise((function(t,r){n._initializeHostedFields().then((function(){n._bus.emit(d.HOSTED_FIELDS_TOKENIZE,e,(function(e){e.err?r(new o(e.err)):t(e.payload)}))}))})):Promise.reject(new o(u.UNIONPAY_HOSTED_FIELDS_INSTANCE_INVALID)):Promise.reject(new o(u.UNIONPAY_CARD_OR_HOSTED_FIELDS_INSTANCE_REQUIRED))},E.prototype.teardown=function(){return this._bus&&(this._hostedFieldsFrame.parentNode.removeChild(this._hostedFieldsFrame),this._bus.teardown()),l(this,f(E.prototype)),Promise.resolve()},E.prototype._initializeHostedFields=function(){var e,t,n=h(),r=this;return this._hostedFieldsInitializePromise||(this._hostedFieldsInitializePromise=new Promise((function(o){e=r._options.client.getConfiguration().gatewayConfiguration.assetsUrl,t=r._options.client.getConfiguration().isDebug,r._bus=new i({channel:n,verifyDomain:s}),r._hostedFieldsFrame=p({name:a.HOSTED_FIELDS_FRAME_NAME+"_"+n,src:e+"/web/3.100.0/html/unionpay-hosted-fields-frame"+c(t)+".html",height:0,width:0}),r._bus.on(m,(function(e){e(r._options.client),o()})),document.body.appendChild(r._hostedFieldsFrame)}))),this._hostedFieldsInitializePromise},t.exports=_.wrapPrototype(E)},{"../../lib/analytics":119,"../../lib/braintree-error":124,"../../lib/constants":126,"../../lib/convert-methods-to-error":127,"../../lib/is-verified-domain":153,"../../lib/methods":155,"../../lib/use-min":160,"./constants":203,"./errors":204,"@braintree/iframer":35,"@braintree/uuid":39,"@braintree/wrap-promise":43,framebus:52}],206:[function(e,t,n){"use strict";t.exports={PLAID_LINK_JS:"https://cdn.plaid.com/link/v2/stable/link-initialize.js"}},{}],207:[function(e,t,n){"use strict";var r=e("../lib/braintree-error");t.exports={US_BANK_ACCOUNT_OPTION_REQUIRED:{type:r.types.MERCHANT,code:"US_BANK_ACCOUNT_OPTION_REQUIRED"},US_BANK_ACCOUNT_MUTUALLY_EXCLUSIVE_OPTIONS:{type:r.types.MERCHANT,code:"US_BANK_ACCOUNT_MUTUALLY_EXCLUSIVE_OPTIONS"},US_BANK_ACCOUNT_LOGIN_LOAD_FAILED:{type:r.types.NETWORK,code:"US_BANK_ACCOUNT_LOGIN_LOAD_FAILED",message:"Bank login flow failed to load."},US_BANK_ACCOUNT_LOGIN_CLOSED:{type:r.types.CUSTOMER,code:"US_BANK_ACCOUNT_LOGIN_CLOSED",message:"Customer closed bank login flow before authorizing."},US_BANK_ACCOUNT_LOGIN_REQUEST_ACTIVE:{type:r.types.MERCHANT,code:"US_BANK_ACCOUNT_LOGIN_REQUEST_ACTIVE",message:"Another bank login tokenization request is active."},US_BANK_ACCOUNT_TOKENIZATION_NETWORK_ERROR:{type:r.types.NETWORK,code:"US_BANK_ACCOUNT_TOKENIZATION_NETWORK_ERROR",message:"A tokenization network error occurred."},US_BANK_ACCOUNT_FAILED_TOKENIZATION:{type:r.types.CUSTOMER,code:"US_BANK_ACCOUNT_FAILED_TOKENIZATION",message:"The supplied data failed tokenization."},US_BANK_ACCOUNT_NOT_ENABLED:{type:r.types.MERCHANT,code:"US_BANK_ACCOUNT_NOT_ENABLED",message:"US bank account is not enabled."},US_BANK_ACCOUNT_BANK_LOGIN_NOT_ENABLED:{type:r.types.MERCHANT,code:"US_BANK_ACCOUNT_BANK_LOGIN_NOT_ENABLED",message:"Bank login is not enabled."}}},{"../lib/braintree-error":124}],208:[function(e,t,n){"use strict";var r=e("../lib/basic-component-verification"),o=e("../lib/braintree-error"),i=e("../lib/create-deferred-client"),a=e("../lib/create-assets-url"),s=e("./errors"),c=e("./us-bank-account"),l=e("@braintree/wrap-promise");t.exports={create:l((function(e){var t="US Bank Account";return r.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){return i.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:a.create(e.authorization),name:t})})).then((function(t){return e.client=t,e.client.getConfiguration().gatewayConfiguration.usBankAccount?new c(e):Promise.reject(new o(s.US_BANK_ACCOUNT_NOT_ENABLED))}))})),VERSION:"3.100.0"}},{"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./errors":207,"./us-bank-account":209,"@braintree/wrap-promise":43}],209:[function(e,t,n){"use strict";var r=e("../lib/braintree-error"),o=e("./constants"),i=e("./errors"),a=e("../lib/errors"),s=e("../lib/analytics"),c=e("../lib/once"),l=e("../lib/convert-methods-to-error"),u=e("../lib/methods"),d=e("@braintree/wrap-promise"),p=v("UsBankAccount"),f=v("UsBankLogin");function h(e){this._client=e.client,this._isTokenizingBankLogin=!1,s.sendEvent(this._client,"usbankaccount.initialized")}function _(e){var t,n=e.details&&e.details.httpStatus;return(t=new r(401===n?a.BRAINTREE_API_ACCESS_RESTRICTED:n<500?i.US_BANK_ACCOUNT_FAILED_TOKENIZATION:i.US_BANK_ACCOUNT_TOKENIZATION_NETWORK_ERROR)).details={originalError:e},t}function m(e,t){var n=e.data[t].paymentMethod,r="US bank account ending in - "+n.details.last4;return{nonce:n.id,details:{},description:r,type:"us_bank_account"}}function E(e,t){function n(){var r=this.readyState;r&&"loaded"!==r&&"complete"!==r||(e.removeEventListener("error",o),e.removeEventListener("load",n),e.removeEventListener("readystatechange",n),t(null,window.Plaid))}function o(){e.parentNode.removeChild(e),t(new r(i.US_BANK_ACCOUNT_LOGIN_LOAD_FAILED))}e.addEventListener("error",o),e.addEventListener("load",n),e.addEventListener("readystatechange",n)}function y(e){return{streetAddress:e.streetAddress,extendedAddress:e.extendedAddress,city:e.locality,state:e.region,zipCode:e.postalCode}}function g(e,t){"personal"===t.ownershipType?e.individualOwner={firstName:t.firstName,lastName:t.lastName}:"business"===t.ownershipType&&(e.businessOwner={businessName:t.businessName})}function v(e){return"mutation Tokenize"+e+"($input: Tokenize"+e+"Input!) {  tokenize"+e+"(input: $input) {    paymentMethod {      id      details {        ... on UsBankAccountDetails {          last4        }      }    }  }}"}h.prototype.tokenize=function(e){return(e=e||{}).mandateText?e.bankDetails&&e.bankLogin?Promise.reject(new r({type:i.US_BANK_ACCOUNT_MUTUALLY_EXCLUSIVE_OPTIONS.type,code:i.US_BANK_ACCOUNT_MUTUALLY_EXCLUSIVE_OPTIONS.code,message:"tokenize must be called with bankDetails or bankLogin, not both."})):e.bankDetails?this._tokenizeBankDetails(e):e.bankLogin?this._tokenizeBankLogin(e):Promise.reject(new r({type:i.US_BANK_ACCOUNT_OPTION_REQUIRED.type,code:i.US_BANK_ACCOUNT_OPTION_REQUIRED.code,message:"tokenize must be called with bankDetails or bankLogin."})):Promise.reject(new r({type:i.US_BANK_ACCOUNT_OPTION_REQUIRED.type,code:i.US_BANK_ACCOUNT_OPTION_REQUIRED.code,message:"mandateText property is required."}))},h.prototype._tokenizeBankDetails=function(e){var t=this._client,n=e.bankDetails,r={achMandate:e.mandateText,routingNumber:n.routingNumber,accountNumber:n.accountNumber,accountType:n.accountType.toUpperCase(),billingAddress:y(n.billingAddress||{})};return g(r,n),t.request({api:"graphQLApi",data:{query:p,variables:{input:{usBankAccount:r}}}}).then((function(e){return s.sendEvent(t,"usbankaccount.bankdetails.tokenization.succeeded"),Promise.resolve(m(e,"tokenizeUsBankAccount"))})).catch((function(e){var n=_(e);return s.sendEvent(t,"usbankaccount.bankdetails.tokenization.failed"),Promise.reject(n)}))},h.prototype._tokenizeBankLogin=function(e){var t=this,n=this._client,o=n.getConfiguration().gatewayConfiguration,a="production"===o.environment,c=o.usBankAccount.plaid;return e.bankLogin.displayName?c?this._isTokenizingBankLogin?Promise.reject(new r(i.US_BANK_ACCOUNT_LOGIN_REQUEST_ACTIVE)):(this._isTokenizingBankLogin=!0,new Promise((function(o,l){t._loadPlaid((function(u,d){u?l(u):(d.create({clientName:e.bankLogin.displayName,apiVersion:"v2",env:a?"production":"sandbox",key:c.publicKey,product:"auth",selectAccount:!0,onExit:function(){t._isTokenizingBankLogin=!1,s.sendEvent(n,"usbankaccount.banklogin.tokenization.closed.by-user"),l(new r(i.US_BANK_ACCOUNT_LOGIN_CLOSED))},onSuccess:function(r,i){var c=e.bankLogin,u={publicToken:r,accountId:a?i.account_id:"plaid_account_id",accountType:i.account.subtype.toUpperCase(),achMandate:e.mandateText,billingAddress:y(c.billingAddress||{})};g(u,c),n.request({api:"graphQLApi",data:{query:f,variables:{input:{usBankLogin:u}}}}).then((function(e){t._isTokenizingBankLogin=!1,s.sendEvent(n,"usbankaccount.banklogin.tokenization.succeeded"),o(m(e,"tokenizeUsBankLogin"))})).catch((function(e){var r;t._isTokenizingBankLogin=!1,r=_(e),s.sendEvent(n,"usbankaccount.banklogin.tokenization.failed"),l(r)}))}}).open(),s.sendEvent(n,"usbankaccount.banklogin.tokenization.started"))}))}))):Promise.reject(new r(i.US_BANK_ACCOUNT_BANK_LOGIN_NOT_ENABLED)):Promise.reject(new r({type:i.US_BANK_ACCOUNT_OPTION_REQUIRED.type,code:i.US_BANK_ACCOUNT_OPTION_REQUIRED.code,message:"displayName property is required when using bankLogin."}))},h.prototype._loadPlaid=function(e){var t,n;e=c(e),window.Plaid?e(null,window.Plaid):(t=document.querySelector('script[src="'+o.PLAID_LINK_JS+'"]'))?E(t,e):((n=document.createElement("script")).src=o.PLAID_LINK_JS,n.async=!0,E(n,e),document.body.appendChild(n),this._plaidScript=n)},h.prototype.teardown=function(){return this._plaidScript&&document.body.removeChild(this._plaidScript),l(this,u(h.prototype)),Promise.resolve()},t.exports=d.wrapPrototype(h)},{"../lib/analytics":119,"../lib/braintree-error":124,"../lib/convert-methods-to-error":127,"../lib/errors":135,"../lib/methods":155,"../lib/once":156,"./constants":206,"./errors":207,"@braintree/wrap-promise":43}],210:[function(e,t,n){"use strict";var r=e("../lib/braintree-error");t.exports={VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN:{type:r.types.MERCHANT,code:"VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN",message:"A client token with a customer id must be used to delete a payment method nonce."},VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND:{type:r.types.MERCHANT,code:"VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND"},VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR:{type:r.types.UNKNOWN,code:"VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR"}}},{"../lib/braintree-error":124}],211:[function(e,t,n){"use strict";var r=e("../lib/basic-component-verification"),o=e("../lib/create-deferred-client"),i=e("../lib/create-assets-url"),a=e("./vault-manager"),s=e("@braintree/wrap-promise");t.exports={create:s((function(e){var t="Vault Manager";return r.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){return new a({createPromise:o.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:i.create(e.authorization),name:t})})}))})),VERSION:"3.100.0"}},{"../lib/basic-component-verification":122,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./vault-manager":212,"@braintree/wrap-promise":43}],212:[function(e,t,n){"use strict";var r=e("../lib/analytics"),o=e("../lib/braintree-error"),i=e("./errors"),a=e("../lib/convert-methods-to-error"),s=e("../lib/methods"),c=e("@braintree/wrap-promise");function l(e){this._createPromise=e.createPromise}function u(e){var t={nonce:e.nonce,default:e.default,details:e.details,hasSubscription:e.hasSubscription,type:e.type};return e.description&&(t.description=e.description),e.binData&&(t.binData=e.binData),t}l.prototype.fetchPaymentMethods=function(e){var t;return t=!0===(e=e||{}).defaultFirst?1:0,this._createPromise.then((function(e){return e.request({endpoint:"payment_methods",method:"get",data:{defaultFirst:t}})})).then(function(e){return r.sendEvent(this._createPromise,"vault-manager.fetch-payment-methods.succeeded"),e.paymentMethods.map(u)}.bind(this))},l.prototype.deletePaymentMethod=function(e){return this._createPromise.then((function(t){return"CLIENT_TOKEN"===t.getConfiguration().authorizationType?t.request({api:"graphQLApi",data:{query:"mutation DeletePaymentMethodFromSingleUseToken($input: DeletePaymentMethodFromSingleUseTokenInput!) {  deletePaymentMethodFromSingleUseToken(input: $input) {    clientMutationId  }}",variables:{input:{singleUseTokenId:e}},operationName:"DeletePaymentMethodFromSingleUseToken"}}).then((function(){r.sendEvent(t,"vault-manager.delete-payment-method.succeeded")})).catch((function(n){var a,s=n.details.originalError;return r.sendEvent(t,"vault-manager.delete-payment-method.failed"),s[0]&&"NOT_FOUND"===s[0].extensions.errorClass&&(a=new o({type:i.VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND.type,code:i.VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND.code,message:"A payment method for payment method nonce `"+e+"` could not be found.",details:{originalError:s}})),a||(a=new o({type:i.VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR.type,code:i.VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR.code,message:"An unknown error occured when attempting to delete the payment method assocaited with the payment method nonce `"+e+"`.",details:{originalError:s}})),Promise.reject(a)})):Promise.reject(new o(i.VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN))}))},l.prototype.teardown=function(){return a(this,s(l.prototype)),Promise.resolve()},t.exports=c.wrapPrototype(l)},{"../lib/analytics":119,"../lib/braintree-error":124,"../lib/convert-methods-to-error":127,"../lib/methods":155,"./errors":210,"@braintree/wrap-promise":43}],213:[function(e,t,n){"use strict";var r=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(e("./venmo-desktop"));t.exports=function(e){return new r.default(e).initialize()}},{"./venmo-desktop":215}],214:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.VENMO_PAYMENT_CONTEXT_STATUS_QUERY=n.LEGACY_VENMO_PAYMENT_CONTEXT_STATUS_QUERY=n.UPDATE_PAYMENT_CONTEXT_QUERY=n.LEGACY_UPDATE_PAYMENT_CONTEXT_QUERY=n.CREATE_PAYMENT_CONTEXT_QUERY=n.LEGACY_CREATE_PAYMENT_CONTEXT_QUERY=void 0,n.LEGACY_CREATE_PAYMENT_CONTEXT_QUERY="mutation CreateVenmoQRCodePaymentContext($input: CreateVenmoQRCodePaymentContextInput!) {\n  createVenmoQRCodePaymentContext(input: $input) {\n    clientMutationId\n    venmoQRCodePaymentContext {\n      id\n      merchantId\n      createdAt\n      expiresAt\n    }\n  }\n}",n.CREATE_PAYMENT_CONTEXT_QUERY="mutation CreateVenmoPaymentContext($input: CreateVenmoPaymentContextInput!) {\n  createVenmoPaymentContext(input: $input) {\n    clientMutationId\n    venmoPaymentContext {\n      id\n      merchantId\n      createdAt\n      expiresAt\n    }\n  }\n}",n.LEGACY_UPDATE_PAYMENT_CONTEXT_QUERY="mutation UpdateVenmoQRCodePaymentContext($input: UpdateVenmoQRCodePaymentContextInput!) {\n  updateVenmoQRCodePaymentContext(input: $input) {\n    clientMutationId\n  }\n}",n.UPDATE_PAYMENT_CONTEXT_QUERY="mutation UpdateVenmoPaymentContextStatus($input: UpdateVenmoPaymentContextStatusInput!) {\n  updateVenmoPaymentContextStatus(input: $input) {\n    clientMutationId\n  }\n}",n.LEGACY_VENMO_PAYMENT_CONTEXT_STATUS_QUERY="query PaymentContext($id: ID!) {\n  node(id: $id) {\n    ... on VenmoQRCodePaymentContext {\n      status\n      paymentMethodId\n      userName\n    }\n  }\n}",n.VENMO_PAYMENT_CONTEXT_STATUS_QUERY="query PaymentContext($id: ID!) {\n  node(id: $id) {\n    ... on VenmoPaymentContext {\n      status\n      paymentMethodId\n      userName\n      payerInfo {\n        firstName\n        lastName\n        phoneNumber\n        email\n        externalId\n        userName\n        billingAddress {\n          fullName\n          addressLine1\n          addressLine2\n          adminArea1\n          adminArea2\n          postalCode\n          countryCode\n        }\n        shippingAddress {\n          fullName\n          addressLine1\n          addressLine2\n          adminArea1\n          adminArea2\n          postalCode\n          countryCode\n        }\n      }\n    }\n  }\n}"},{}],215:[function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var i=o(e("framebus")),a=o(e("@braintree/iframer")),s=o(e("@braintree/uuid")),c=e("../shared/events"),l=e("./queries"),u=function(){function e(e){this.isHidden=!0,this.env=e.environment,this.id=s.default(),this.profileId=e.profileId,this.displayName=e.displayName,this.paymentMethodUsage=e.paymentMethodUsage,this.shouldUseLegacyQRCodeMutation=!this.paymentMethodUsage;var t=e.url+"#"+this.env+"_"+this.id;this.bus=new i.default({channel:this.id,verifyDomain:e.verifyDomain,targetFrames:[]}),this.apiRequest=e.apiRequest,this.sendEvent=e.sendEvent,this.Promise=e.Promise,this.alertBox=document.createElement("div"),this.alertBox.setAttribute("data-venmo-desktop-id",this.id),this.alertBox.setAttribute("role","alert"),this.alertBox.style.position="fixed",this.alertBox.style.display="none",this.alertBox.style.height="1px",this.alertBox.style.width="1px",this.alertBox.style.overflow="hidden",this.alertBox.style.zIndex="0",this.iframe=a.default({src:t,name:"venmo-desktop-iframe",style:{display:"none",position:"fixed",top:"0",bottom:"0",right:"0",left:"0",height:"100%",width:"100%",zIndex:"9999999"},title:"Venmo Desktop"}),this.bus.addTargetFrame(this.iframe)}return e.prototype.initialize=function(){var e=this;return new this.Promise((function(t){e.bus.on(c.VENMO_DESKTOP_IFRAME_READY,(function(){t(e)})),e.bus.on(c.VENMO_DESKTOP_REQUEST_NEW_QR_CODE,(function(){e.sendEvent("venmo.tokenize.desktop.restarted-from-error-view"),e.startPolling()})),document.body.appendChild(e.iframe),document.body.appendChild(e.alertBox)}))},e.prototype.launchDesktopFlow=function(){var e=this;this.isHidden=!1;var t=new this.Promise((function(t,n){e.launchDesktopPromiseRejectFunction=n;var r=function(){e.bus.off(c.VENMO_DESKTOP_CUSTOMER_CANCELED,i),e.bus.off(c.VENMO_DESKTOP_UNKNOWN_ERROR,o)},o=function(t){r(),e.sendEvent("venmo.tokenize.desktop.unknown-error"),n({allowUIToHandleError:!1,reason:"UNKNOWN_ERROR",err:t})},i=function(){r(),e.updateVenmoDesktopPaymentContext("CANCELED"),e.sendEvent("venmo.tokenize.desktop.status-change.canceled-from-modal"),n({allowUIToHandleError:!1,reason:"CUSTOMER_CANCELED"})};e.completedHandler=function(e){r(),t(e)},e.bus.on(c.VENMO_DESKTOP_CUSTOMER_CANCELED,i),e.bus.on(c.VENMO_DESKTOP_UNKNOWN_ERROR,o)}));return this.iframe.style.display="block",this.setAlert("Generating a QR code, get your Venmo app ready"),this.iframe.focus(),this.startPolling(),t.then((function(t){return delete e.venmoContextId,delete e.launchDesktopPromiseRejectFunction,t})).catch((function(t){return delete e.venmoContextId,delete e.launchDesktopPromiseRejectFunction,e.Promise.reject(t)}))},e.prototype.triggerCompleted=function(e){var t=this;this.isHidden||setTimeout((function(){t.completedHandler&&t.completedHandler(e),delete t.completedHandler}),2e3)},e.prototype.triggerRejected=function(e){this.launchDesktopPromiseRejectFunction&&this.launchDesktopPromiseRejectFunction(e)},e.prototype.hideDesktopFlow=function(){this.setAlert(""),this.iframe.style.display="none",this.bus.emit(c.VENMO_DESKTOP_CLOSED_FROM_PARENT),this.isHidden=!0},e.prototype.displayError=function(e){this.isHidden||(this.bus.emit(c.VENMO_DESKTOP_DISPLAY_ERROR,{message:e}),this.setAlert(e))},e.prototype.displayQRCode=function(e,t){this.isHidden||(this.bus.emit(c.VENMO_DESKTOP_DISPLAY_QR_CODE,{id:e,merchantId:t}),this.setAlert("To scan the QR code, open your Venmo app"))},e.prototype.authorize=function(){this.isHidden||(this.bus.emit(c.VENMO_DESKTOP_AUTHORIZE),this.setAlert("Venmo account authorized"))},e.prototype.authorizing=function(){this.isHidden||(this.bus.emit(c.VENMO_DESKTOP_AUTHORIZING),this.setAlert("Authorize on your Venmo app"))},e.prototype.startPolling=function(){var e=this;return this.createVenmoDesktopPaymentContext().then((function(t){var n=new Date(t.expiresAt).getTime()-new Date(t.createdAt).getTime(),r=Date.now()+n;return e.displayQRCode(t.id,t.merchantId),e.pollForStatusChange(t.status,r)})).then((function(t){if(t){var n=t.userName||"";n="@"+n.replace("@",""),e.triggerCompleted({paymentMethodNonce:t.paymentMethodId,username:n,payerInfo:t.payerInfo,id:e.venmoContextId||""})}})).catch((function(t){t.allowUIToHandleError||(e.sendEvent("venmo.tokenize.desktop.unhandled-error"),e.triggerRejected(t))}))},e.prototype.pollForStatusChange=function(e,t){var n=this;return this.venmoContextId?Date.now()>t?this.updateVenmoDesktopPaymentContext("EXPIRED").then((function(){return n.displayError("Something went wrong"),n.sendEvent("venmo.tokenize.desktop.status-change.sdk-timeout"),n.Promise.reject({allowUIToHandleError:!0,reason:"TIMEOUT"})})):this.lookupVenmoDesktopPaymentContext().then((function(r){if(!n.venmoContextId||!r)return n.Promise.resolve();var o=r.status;if(o!==e)switch(e=o,n.sendEvent("venmo.tokenize.desktop.status-change."+e.toLowerCase()),e){case"CREATED":break;case"EXPIRED":case"FAILED":case"CANCELED":var i="CANCELED"===e?"The authorization was canceled":"Something went wrong";return n.displayError(i),n.Promise.reject({allowUIToHandleError:!0,reason:e});case"SCANNED":n.authorizing();break;case"APPROVED":return n.authorize(),n.Promise.resolve(r)}return new n.Promise((function(r,o){setTimeout((function(){n.pollForStatusChange(e,t).then(r).catch(o)}),1e3)}))})):this.Promise.resolve()},e.prototype.teardown=function(){this.bus.teardown(),this.iframe.parentNode&&this.iframe.parentNode.removeChild(this.iframe),this.alertBox.parentNode&&this.alertBox.parentNode.removeChild(this.alertBox)},e.prototype.setAlert=function(e){this.alertBox.style.display=e?"block":"none",this.alertBox.textContent=e},e.prototype.createPaymentContextFromGraphqlLegacyQRCodeMutation=function(e){return this.apiRequest(l.LEGACY_CREATE_PAYMENT_CONTEXT_QUERY,{input:{environment:this.env,intent:e}}).then((function(e){return e.createVenmoQRCodePaymentContext.venmoQRCodePaymentContext}))},e.prototype.createPaymentContextFromGraphQL=function(e){var t={intent:e,paymentMethodUsage:this.paymentMethodUsage,customerClient:"DESKTOP"};return this.profileId&&(t.merchantProfileId=this.profileId),this.displayName&&(t.displayName=this.displayName),this.apiRequest(l.CREATE_PAYMENT_CONTEXT_QUERY,{input:t}).then((function(e){return e.createVenmoPaymentContext.venmoPaymentContext}))},e.prototype.createVenmoDesktopPaymentContext=function(){var e=this;return(this.shouldUseLegacyQRCodeMutation?this.createPaymentContextFromGraphqlLegacyQRCodeMutation("PAY_FROM_APP"):this.createPaymentContextFromGraphQL("PAY_FROM_APP")).then((function(t){e.venmoContextId=t.id;var n=e.profileId||t.merchantId;return{id:t.id,status:t.status,merchantId:n,createdAt:t.createdAt,expiresAt:t.expiresAt}}))},e.prototype.updateVenmoDesktopPaymentContext=function(e,t){if(void 0===t&&(t={}),!this.venmoContextId)return this.Promise.resolve();var n={input:r({id:this.venmoContextId,status:e},t)},o=this.shouldUseLegacyQRCodeMutation?l.LEGACY_UPDATE_PAYMENT_CONTEXT_QUERY:l.UPDATE_PAYMENT_CONTEXT_QUERY;return this.apiRequest(o,n).then((function(){}))},e.prototype.lookupVenmoDesktopPaymentContext=function(){if(!this.venmoContextId)return this.Promise.resolve();var e=this.shouldUseLegacyQRCodeMutation?l.LEGACY_VENMO_PAYMENT_CONTEXT_STATUS_QUERY:l.VENMO_PAYMENT_CONTEXT_STATUS_QUERY;return this.apiRequest(e,{id:this.venmoContextId}).then((function(e){return e.node}))},e}();n.default=u},{"../shared/events":220,"./queries":214,"@braintree/iframer":35,"@braintree/uuid":39,framebus:52}],216:[function(e,t,n){"use strict";var r=e("../lib/analytics"),o=e("../lib/basic-component-verification"),i=e("../lib/create-deferred-client"),a=e("../lib/create-assets-url"),s=e("./shared/errors"),c=e("@braintree/wrap-promise"),l=e("../lib/braintree-error"),u=e("./venmo"),d=e("./shared/supports-venmo");t.exports={create:c((function(e){var t="Venmo";return o.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){var n,o;return e.profileId&&"string"!=typeof e.profileId?Promise.reject(new l(s.VENMO_INVALID_PROFILE_ID)):e.deepLinkReturnUrl&&"string"!=typeof e.deepLinkReturnUrl?Promise.reject(new l(s.VENMO_INVALID_DEEP_LINK_RETURN_URL)):(n=i.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:a.create(e.authorization),name:t}).then((function(t){var n=t.getConfiguration();return e.client=t,n.gatewayConfiguration.payWithVenmo?t:Promise.reject(new l(s.VENMO_NOT_ENABLED))})),e.createPromise=n,o=new u(e),r.sendEvent(n,"venmo.initialized"),n.then((function(){return o})))}))})),isBrowserSupported:function(e){return d.isBrowserSupported(e)},VERSION:"3.100.0"}},{"../lib/analytics":119,"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./shared/errors":219,"./shared/supports-venmo":222,"./venmo":224,"@braintree/wrap-promise":43}],217:[function(e,t,n){"use strict";var r=e("@braintree/browser-detection/is-android"),o=e("@braintree/browser-detection/is-chrome"),i=e("@braintree/browser-detection/is-ios"),a=e("@braintree/browser-detection/is-ios-safari"),s=e("@braintree/browser-detection/is-ios-webview"),c=e("@braintree/browser-detection/is-samsung");t.exports={isAndroid:r,isAndroidWebview:function(){return r()&&window.navigator.userAgent.toLowerCase().indexOf("wv")>-1},isChrome:o,isIos:i,isIosChrome:function(){return i()&&o()},isSamsung:c,isIosSafari:a,isIosWebview:s,isFacebookOwnedBrowserOnAndroid:function(){var e=window.navigator.userAgent.toLowerCase();return e.indexOf("huawei")>-1&&e.indexOf("fban")>-1||!!r()&&(e.indexOf("fb_iab")>-1||e.indexOf("instagram")>-1)},doesNotSupportWindowOpenInIos:function(){return!!i()&&(s()||!a())}}},{"@braintree/browser-detection/is-android":22,"@braintree/browser-detection/is-chrome":24,"@braintree/browser-detection/is-ios":30,"@braintree/browser-detection/is-ios-safari":27,"@braintree/browser-detection/is-ios-webview":28,"@braintree/browser-detection/is-samsung":31}],218:[function(e,t,n){"use strict";t.exports={DOCUMENT_VISIBILITY_CHANGE_EVENT_DELAY:500,DEFAULT_PROCESS_RESULTS_DELAY:1e3,VENMO_APP_OR_MOBILE_AUTH_URL:"https://venmo.com/go/checkout",VENMO_MOBILE_APP_AUTH_ONLY_URL:"https://venmo.com/braintree/checkout",VENMO_WEB_LOGIN_URL:"https://account.venmo.com/go/web"}},{}],219:[function(e,t,n){"use strict";var r=e("../../lib/braintree-error");t.exports={VENMO_NOT_ENABLED:{type:r.types.MERCHANT,code:"VENMO_NOT_ENABLED",message:"Venmo is not enabled for this merchant."},VENMO_TOKENIZATION_REQUEST_ACTIVE:{type:r.types.MERCHANT,code:"VENMO_TOKENIZATION_REQUEST_ACTIVE",message:"Another tokenization request is active."},VENMO_TOKENIZATION_REQUEST_NOT_ACTIVE:{type:r.types.MERCHANT,code:"VENMO_TOKENIZATION_REQUEST_NOT_ACTIVE",message:"No tokenization in progress."},VENMO_APP_FAILED:{type:r.types.UNKNOWN,code:"VENMO_APP_FAILED",message:"Venmo app encountered a problem."},VENMO_APP_CANCELED:{type:r.types.CUSTOMER,code:"VENMO_APP_CANCELED",message:"Venmo app authorization was canceled."},VENMO_CANCELED:{type:r.types.CUSTOMER,code:"VENMO_CANCELED",message:"User canceled Venmo authorization, or Venmo app is not available."},VENMO_CUSTOMER_CANCELED:{type:r.types.CUSTOMER,code:"VENMO_CUSTOMER_CANCELED",message:"User canceled Venmo authorization."},VENMO_NETWORK_ERROR:{type:r.types.NETWORK,code:"VENMO_NETWORK_ERROR",message:"Something went wrong making the request"},VENMO_DESKTOP_CANCELED:{type:r.types.CUSTOMER,code:"VENMO_DESKTOP_CANCELED",message:"User canceled Venmo authorization by closing the Venmo Desktop modal."},VENMO_TOKENIZATION_CANCELED_BY_MERCHANT:{type:r.types.MERCHANT,code:"VENMO_TOKENIZATION_CANCELED_BY_MERCHANT",message:"The Venmo tokenization was canceled by the merchant."},VENMO_DESKTOP_UNKNOWN_ERROR:{type:r.types.UNKNOWN,code:"VENMO_DESKTOP_UNKNOWN_ERROR",message:"Something went wrong with the Venmo Desktop flow."},VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED:{type:r.types.NETWORK,code:"VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED",message:"Something went wrong creating the Venmo Payment Context."},VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR:{type:r.types.UNKNOWN,code:"VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR",message:"Something went wrong during mobile polling."},VENMO_MOBILE_POLLING_TOKENIZATION_EXPIRED:{type:r.types.CUSTOMER,code:"VENMO_MOBILE_POLLING_TOKENIZATION_EXPIRED",message:"The Venmo authorization request is expired."},VENMO_MOBILE_POLLING_TOKENIZATION_CANCELED:{type:r.types.CUSTOMER,code:"VENMO_MOBILE_POLLING_TOKENIZATION_CANCELED",message:"The Venmo authorization was canceled"},VENMO_MOBILE_POLLING_TOKENIZATION_TIMEOUT:{type:r.types.CUSTOMER,code:"VENMO_MOBILE_POLLING_TOKENIZATION_TIMEOUT",message:"Customer took too long to authorize Venmo payment."},VENMO_MOBILE_POLLING_TOKENIZATION_FAILED:{type:r.types.UNKNOWN,code:"VENMO_MOBILE_POLLING_TOKENIZATION_FAILED",message:"The Venmo authorization failed."},VENMO_INVALID_PROFILE_ID:{type:r.types.MERCHANT,code:"VENMO_INVALID_PROFILE_ID",message:"Venmo profile ID is invalid."},VENMO_INVALID_DEEP_LINK_RETURN_URL:{type:r.types.MERCHANT,code:"VENMO_INVALID_DEEP_LINK_RETURN_URL",message:"Venmo deep link return URL is invalid."},VENMO_TOKENIZATION_FAILED:{type:r.types.UNKNOWN,code:"VENMO_TOKENIZATION_FAILED",message:"Venmo encountered a problem"},VENMO_ECD_DISABLED:{type:r.types.MERCHANT,code:"ECD_DISABLED",message:"Cannot collect customer data when ECD is disabled. Enable this feature in the Control Panel to collect this data."}}},{"../../lib/braintree-error":124}],220:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.VENMO_DESKTOP_UNKNOWN_ERROR=n.VENMO_DESKTOP_REQUEST_NEW_QR_CODE=n.VENMO_DESKTOP_CLOSED_FROM_PARENT=n.VENMO_DESKTOP_IFRAME_READY=n.VENMO_DESKTOP_DISPLAY_QR_CODE=n.VENMO_DESKTOP_DISPLAY_ERROR=n.VENMO_DESKTOP_CUSTOMER_CANCELED=n.VENMO_DESKTOP_AUTHORIZING=n.VENMO_DESKTOP_AUTHORIZE=n.VENMO_DESKTOP_AUTHORIZATION_TIMED_OUT=void 0,n.VENMO_DESKTOP_AUTHORIZATION_TIMED_OUT="VENMO_DESKTOP_AUTHORIZATION_TIMED_OUT",n.VENMO_DESKTOP_AUTHORIZE="VENMO_DESKTOP_AUTHORIZE",n.VENMO_DESKTOP_AUTHORIZING="VENMO_DESKTOP_AUTHORIZING",n.VENMO_DESKTOP_CUSTOMER_CANCELED="VENMO_DESKTOP_CUSTOMER_CANCELED",n.VENMO_DESKTOP_DISPLAY_ERROR="VENMO_DESKTOP_DISPLAY_ERROR",n.VENMO_DESKTOP_DISPLAY_QR_CODE="VENMO_DESKTOP_DISPLAY_QR_CODE",n.VENMO_DESKTOP_IFRAME_READY="VENMO_DESKTOP_IFRAME_READY",n.VENMO_DESKTOP_CLOSED_FROM_PARENT="VENMO_DESKTOP_CLOSED_FROM_PARENT",n.VENMO_DESKTOP_REQUEST_NEW_QR_CODE="VENMO_DESKTOP_REQUEST_NEW_QR_CODE",n.VENMO_DESKTOP_UNKNOWN_ERROR="VENMO_DESKTOP_UNKNOWN_ERROR"},{}],221:[function(e,t,n){"use strict";var r=e("./constants");t.exports=function(e){return e.useAllowDesktopWebLogin?r.VENMO_WEB_LOGIN_URL:e.mobileWebFallBack?r.VENMO_APP_OR_MOBILE_AUTH_URL:r.VENMO_MOBILE_APP_AUTH_ONLY_URL}},{"./constants":218}],222:[function(e,t,n){"use strict";var r=e("./browser-detection"),o=e("../../lib/in-iframe");t.exports={isBrowserSupported:function(e){var t,n,i,a=r.isAndroid(),s=a||r.isIos(),c=a&&r.isChrome(),l=r.isIosSafari()||c;return t=!0===((e=e||{}).allowDesktopWebLogin||e.allowDesktop),n=!e.hasOwnProperty("allowNewBrowserTab")||e.allowNewBrowserTab,i=!e.hasOwnProperty("allowWebviews")||e.allowWebviews,!((!n||o())&&r.isIosChrome()||r.isFacebookOwnedBrowserOnAndroid()||r.isSamsung())&&!(!i&&(r.isAndroidWebview()||r.isIosWebview()))&&(s?n?s:l:t)}}},{"../../lib/in-iframe":150,"./browser-detection":217}],223:[function(e,t,n){"use strict";var r=e("../../lib/frame-service/external"),o=e("../../lib/use-min"),i=e("@braintree/extended-promise"),a=e("../shared/errors"),s=e("../../lib/braintree-error"),c='<svg width="198" height="58" viewBox="0 0 198 58" fill="none" xmlns="http://www.w3.org/2000/svg">\n  <path fill-rule="evenodd" clip-rule="evenodd" d="M43.0702 13.6572C44.1935 15.4585 44.6999 17.3139 44.6999 19.6576C44.6999 27.1328 38.1277 36.8436 32.7935 43.6625H20.6099L15.7236 15.2939L26.3917 14.3105L28.9751 34.4966C31.389 30.6783 34.3678 24.6779 34.3678 20.587C34.3678 18.3477 33.9727 16.8225 33.3553 15.5666L43.0702 13.6572Z" fill="white"/>\n  <path fill-rule="evenodd" clip-rule="evenodd" d="M56.8965 26.1491C58.8596 26.1491 63.8018 25.2772 63.8018 22.5499C63.8018 21.2402 62.8481 20.587 61.7242 20.587C59.7579 20.587 57.1776 22.8763 56.8965 26.1491ZM56.6715 31.5506C56.6715 34.8807 58.5787 36.1873 61.107 36.1873C63.8603 36.1873 66.4966 35.534 69.923 33.8433L68.6324 42.3523C66.2183 43.4976 62.4559 44.2617 58.8039 44.2617C49.5403 44.2617 46.2249 38.8071 46.2249 31.9879C46.2249 23.1496 51.6179 13.765 62.7365 13.765C68.858 13.765 72.2809 17.0949 72.2809 21.7317C72.2815 29.2066 62.4005 31.4965 56.6715 31.5506Z" fill="white"/>\n  <path fill-rule="evenodd" clip-rule="evenodd" d="M103.067 20.3142C103.067 21.4052 102.897 22.9875 102.727 24.0216L99.5262 43.6622H89.1385L92.0585 25.658C92.1139 25.1696 92.284 24.1865 92.284 23.6411C92.284 22.3314 91.4414 22.0047 90.4282 22.0047C89.0826 22.0047 87.7337 22.6042 86.8354 23.0418L83.5234 43.6625H73.0772L77.8495 14.257H86.8908L87.0052 16.6041C89.1382 15.2404 91.9469 13.7656 95.932 13.7656C101.212 13.765 103.067 16.3845 103.067 20.3142Z" fill="white"/>\n  <path fill-rule="evenodd" clip-rule="evenodd" d="M133.906 16.9841C136.881 14.9131 139.69 13.765 143.563 13.765C148.897 13.765 150.753 16.3845 150.753 20.3142C150.753 21.4052 150.583 22.9875 150.413 24.0216L147.216 43.6622H136.825L139.801 25.2774C139.855 24.786 139.971 24.1865 139.971 23.8063C139.971 22.3317 139.128 22.0047 138.115 22.0047C136.824 22.0047 135.535 22.5501 134.577 23.0418L131.266 43.6625H120.878L123.854 25.2777C123.908 24.7863 124.02 24.1868 124.02 23.8065C124.02 22.332 123.177 22.0049 122.167 22.0049C120.819 22.0049 119.473 22.6045 118.574 23.0421L115.26 43.6628H104.817L109.589 14.2573H118.52L118.8 16.7122C120.878 15.241 123.684 13.7662 127.446 13.7662C130.704 13.765 132.837 15.129 133.906 16.9841Z" fill="white"/>\n  <path fill-rule="evenodd" clip-rule="evenodd" d="M171.426 25.5502C171.426 23.1496 170.808 21.513 168.956 21.513C164.857 21.513 164.015 28.55 164.015 32.1498C164.015 34.8807 164.802 36.5709 166.653 36.5709C170.528 36.5709 171.426 29.1497 171.426 25.5502ZM153.458 31.7152C153.458 22.442 158.511 13.765 170.136 13.765C178.896 13.765 182.098 18.7854 182.098 25.7148C182.098 34.8805 177.099 44.3723 165.194 44.3723C156.378 44.3723 153.458 38.7525 153.458 31.7152Z" fill="white"/>\n</svg>',l="Tap cancel payment to cancel and return to the business. Continue payment will relaunch the payment window.",u=400,d=570,p={backdrop:"venmo-desktop-web-backdrop",backdropHidden:"venmo-desktop-web-backdrop.hidden",backdropContainer:"venmo-backdrop-container",cancelButton:"venmo-popup-cancel-button",continueButton:"venmo-popup-continue-button",message:"venmo-message",instructions:"venmo-instructions",venmoLogo:"venmo-full-logo"};function f(e){var t=e.frameServiceInstance,n=e.venmoUrl,r=e.checkForStatusChange,o=e.cancelTokenization,c=e.checkPaymentContextStatus,l=new i;return document.getElementById(p.continueButton).addEventListener("click",(function(){t.focus()})),document.getElementById(p.cancelButton).addEventListener("click",(function(){t.close(),o(),h()})),t.open({},(function(e){e?l.reject(e):r(1).then((function(e){l.resolve(e)})).catch((function(e){c().then((function(t){"CREATED"===t.status?l.reject(new s(a.VENMO_CUSTOMER_CANCELED)):l.reject(e)}))})),t.close(),h()})),t.redirect(n),l}function h(){document.getElementById("venmo-desktop-web-backdrop").classList.add("hidden")}function _(){var e,t,n,r,o,i,a,s,u,d,f,h,_,m,E=document.getElementById(p.backdrop);E?E.classList.remove("hidden"):(e=document.createElement("style"),t=document.createElement("div"),n=document.createElement("div"),r=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div"),a=document.createElement("button"),s=document.createElement("button"),e.id="venmo-desktop-web__injected-styles",e.innerHTML=(u=["#"+p.backdropHidden+" {","display: none;","}","#"+p.backdrop+" {","z-index: 3141592632;","cursor: pointer;","position: fixed;","top: 0;","left: 0;","bottom: 0;","width: 100%;","background: rgba(0, 0, 0, 0.8);","}"],d=["#"+p.backdropContainer+" {","display: flex;","align-content: center;","justify-content: center;","align-items: center;","width: 100%;","height: 100%;","flex-direction: column;","}"],f=["#"+p.cancelButton+" {","height: 24px;","width: 380px;","font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;","font-style: normal;","font-weight: 700;","font-size: 18px;","line-height: 24px;","text-align: center;","background-color: transparent;","border: none;","color: #FFFFFF;","margin-top: 28px;","}"],h=["#"+p.continueButton+" {","width: 400px;","height: 50px;","background: #0074DE;","border-radius: 24px;","border: none;","font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;","font-style: normal;","font-weight: 700;","font-size: 18px;","color: #FFFFFF;","margin-top: 44px;","}"],_=["#"+p.message+" {","font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;","font-style: normal;","font-weight: 500;","font-size: 24px;","line-height: 32px;","text-align: center;","color: #FFFFFF;","margin-top: 32px;","}"],m=["#"+p.instructions+" {","font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;","font-style: normal;","font-weight: 400;","font-size: 16px;","line-height: 20px;","text-align: center;","color: #FFFFFF;","margin-top: 16px;","width: 400px;","}"],u.concat(d,f,h,_,m).join("\n")),t.id=p.backdrop,n.id=p.backdropContainer,r.id=p.venmoLogo,r.innerHTML=c,o.id=p.message,o.innerText="What would you like to do?",i.id=p.instructions,i.innerText=l,a.id=p.continueButton,a.innerText="Continue payment",s.id=p.cancelButton,s.innerText="Cancel payment",document.head.appendChild(e),n.appendChild(r),n.appendChild(o),n.appendChild(i),n.appendChild(a),n.appendChild(s),t.appendChild(n),document.body.appendChild(t),t.addEventListener("click",(function(e){e.stopPropagation()})))}i.suppressUnhandledPromiseMessage=!0,t.exports={runWebLogin:function(e){return _(),f(e)},openPopup:f,setupDesktopWebLogin:function(e){var t=new i,n=e.assetsUrl,a=e.debug||!1,s={top:Math.round((window.outerHeight-d)/2)+window.screenTop,left:Math.round((window.outerWidth-u)/2)+window.screenLeft},c=n+"/web/3.100.0/html";return r.create({name:"venmoDesktopWebLogin",dispatchFrameUrl:c+"/dispatch-frame"+o(a)+".html",openFrameUrl:c+"/venmo-landing-frame"+o(a)+".html",top:s.top,left:s.left,height:d,width:u},(function(e){t.resolve(e)})),t},POPUP_WIDTH:u,POPUP_HEIGHT:d}},{"../../lib/braintree-error":124,"../../lib/frame-service/external":139,"../../lib/use-min":160,"../shared/errors":219,"@braintree/extended-promise":34}],224:[function(e,t,n){"use strict";var r=e("../lib/analytics"),o=e("./shared/supports-venmo"),i=e("./shared/browser-detection"),a=e("./shared/constants"),s=e("./shared/errors"),c=e("../lib/querystring"),l=e("../lib/is-verified-domain"),u=e("../lib/methods"),d=e("../lib/convert-methods-to-error"),p=e("@braintree/wrap-promise"),f=e("../lib/braintree-error"),h=e("../lib/in-iframe"),_=e("@braintree/extended-promise"),m=e("./shared/get-venmo-url"),E=e("./shared/web-login-backdrop"),y=e("../lib/snake-case-to-camel-case"),g=e("./external/"),v=e("./external/queries"),A="3.100.0";function b(e){var t=this;this._allowDesktopWebLogin=e.allowDesktopWebLogin||!1,this._mobileWebFallBack=e.mobileWebFallBack||!1,this._createPromise=e.createPromise,this._allowNewBrowserTab=!1!==e.allowNewBrowserTab,this._allowWebviews=!1!==e.allowWebviews,this._allowDesktop=!0===e.allowDesktop,this._useRedirectForIOS=!0===e.useRedirectForIOS,this._profileId=e.profileId,this._displayName=e.displayName,this._deepLinkReturnUrl=e.deepLinkReturnUrl,this._ignoreHistoryChanges=e.ignoreHistoryChanges,this._paymentMethodUsage=(e.paymentMethodUsage||"").toUpperCase(),this._shouldUseLegacyFlow=!this._paymentMethodUsage,this._requireManualReturn=!0===e.requireManualReturn,this._useDesktopQRFlow=this._allowDesktop&&this._isDesktop()&&!this._allowDesktopWebLogin,this._useAllowDesktopWebLogin=this._allowDesktopWebLogin&&this._isDesktop(),this._cannotHaveReturnUrls=h()||this._requireManualReturn,this._allowAndroidRecreation=!1!==e.allowAndroidRecreation,this._maxRetryCount=3,this._collectCustomerBillingAddress=e.collectCustomerBillingAddress||!1,this._collectCustomerShippingAddress=e.collectCustomerShippingAddress||!1,this._lineItems=e.lineItems,this._subTotalAmount=e.subTotalAmount,this._discountAmount=e.discountAmount,this._taxAmount=e.taxAmount,this._shippingAmount=e.shippingAmount,this._totalAmount=e.totalAmount,this._shouldCreateVenmoPaymentContext=this._cannotHaveReturnUrls||!this._shouldUseLegacyFlow,r.sendEvent(this._createPromise,"venmo.desktop-flow.configured."+String(Boolean(this._allowDesktop))),this.hasTokenizationResult()?r.sendEvent(this._createPromise,"venmo.appswitch.return-in-new-tab"):this._useDesktopQRFlow?this._createPromise=this._createPromise.then((function(e){var n=e.getConfiguration().gatewayConfiguration;return g({url:n.assetsUrl+"/web/"+A+"/html/venmo-desktop-frame.html",environment:"production"===n.environment?"PRODUCTION":"SANDBOX",profileId:t._profileId||n.payWithVenmo.merchantId,paymentMethodUsage:t._paymentMethodUsage,displayName:t._displayName,Promise,apiRequest:function(t,n){return e.request({api:"graphQLApi",data:{query:t,variables:n}}).then((function(e){return e.data}))},sendEvent:function(e){r.sendEvent(t._createPromise,e)},verifyDomain:l}).then((function(n){return t._venmoDesktopInstance=n,r.sendEvent(t._createPromise,"venmo.desktop-flow.presented"),e})).catch((function(){return r.sendEvent(t._createPromise,"venmo.desktop-flow.setup-failed"),t._useDesktopQRFlow=!1,e}))})):this._shouldCreateVenmoPaymentContext&&(this._mobilePollingInterval=250,this._mobilePollingExpiresThreshold=3e5,this._createPromise=this._createPromise.then((function(e){var n,o,i=t._cannotHaveReturnUrls?"manual-return":"mobile-payment-context",a=e.getConfiguration();return o=E.setupDesktopWebLogin({assetsUrl:a.gatewayConfiguration.assetsUrl,debug:a.isDebug}).then((function(e){t._frameServiceInstance=e})).catch((function(e){return e})),t._mobilePollingContextEnvironment=a.gatewayConfiguration.environment.toUpperCase(),n=t._createVenmoPaymentContext(e).then((function(){return r.sendEvent(t._createPromise,"venmo."+i+".presented"),e})).catch((function(e){return r.sendEvent(t._createPromise,"venmo."+i+".setup-failed"),Promise.reject(new f({type:s.VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED.type,code:s.VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED.code,message:T(e)?e.details.originalError[0].message:s.VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED.message,details:{originalError:e}}))})),_.all([o,n]).then((function(e){var t=e[1];return Promise.resolve(t)})).catch((function(e){return Promise.reject(e)}))})))}function T(e){return e.details&&e.details.originalError&&e.details.originalError[0]&&e.details.originalError[0].extensions&&"VALIDATION"===e.details.originalError[0].extensions.errorClass&&"user_error"===e.details.originalError[0].extensions.errorType}function N(e){var t=(e||window.location.hash.substring(1)).split("&").reduce((function(e,t){var n=t.split("="),r=decodeURIComponent(n[0]).replace(/\W/g,""),o=y(r),i=decodeURIComponent(n[1]);return e[o]=i,e}),{});return t.resourceId&&(t.id=t.resourceId),t}function I(e){return"@"+(e=e||"").replace("@","")}function O(){var e;return void 0!==window.document.hidden?e="visibilitychange":void 0!==window.document.msHidden?e="msvisibilitychange":void 0!==window.document.webkitHidden&&(e="webkitvisibilitychange"),e}_.suppressUnhandledPromiseMessage=!0,b.prototype._createVenmoPaymentContext=function(e,t){var n,r,o=this,i=e.getConfiguration().gatewayConfiguration.payWithVenmo,a=!1;if(!this._shouldCreateVenmoPaymentContext)return Promise.resolve();if(this._shouldUseLegacyFlow)n=e.request({api:"graphQLApi",data:{query:v.LEGACY_CREATE_PAYMENT_CONTEXT_QUERY,variables:{input:{environment:this._mobilePollingContextEnvironment,intent:"PAY_FROM_APP"}}}}).then((function(e){return e.data.createVenmoQRCodePaymentContext.venmoQRCodePaymentContext}));else{if((this._collectCustomerBillingAddress||this._collectCustomerShippingAddress)&&!i.enrichedCustomerDataEnabled)return Promise.reject(new f(s.VENMO_ECD_DISABLED));this._lineItems&&this._lineItems.forEach((function(e){e.unitTaxAmount=e.unitTaxAmount||"0"})),r={subTotalAmount:this._subTotalAmount,discountAmount:this._discountAmount,taxAmount:this._taxAmount,shippingAmount:this._shippingAmount,totalAmount:this._totalAmount,lineItems:this._lineItems},a=Object.keys(r).some((function(e){return void 0!==r[e]})),n=e.request({api:"graphQLApi",data:{query:v.CREATE_PAYMENT_CONTEXT_QUERY,variables:{input:{paymentMethodUsage:this._paymentMethodUsage,intent:"CONTINUE",customerClient:"MOBILE_WEB",displayName:this._displayName,paysheetDetails:{collectCustomerBillingAddress:this._collectCustomerBillingAddress,collectCustomerShippingAddress:this._collectCustomerShippingAddress,transactionDetails:a?r:void 0}}}}}).then((function(e){return e.data.createVenmoPaymentContext.venmoPaymentContext}))}return n.then((function(n){var r=.6666*(new Date(n.expiresAt)-new Date(n.createdAt));clearTimeout(o._refreshPaymentContextTimeout),o._refreshPaymentContextTimeout=setTimeout((function(){o._tokenizationInProgress||o._createVenmoPaymentContext(e,!0)}),r),t&&o._tokenizationInProgress||(o._venmoPaymentContextStatus=n.status,o._venmoPaymentContextId=n.id)}))},b.prototype.appSwitch=function(e){this._deepLinkReturnUrl?window.navigator.platform&&/iPhone|iPad|iPod/.test(window.navigator.platform)?(r.sendEvent(this._createPromise,"venmo.appswitch.start.ios-webview"),window.location.href=e):window.popupBridge&&"function"==typeof window.popupBridge.open?(r.sendEvent(this._createPromise,"venmo.appswitch.start.popup-bridge"),window.popupBridge.open(e)):(r.sendEvent(this._createPromise,"venmo.appswitch.start.webview"),window.open(e)):(r.sendEvent(this._createPromise,"venmo.appswitch.start.browser"),i.doesNotSupportWindowOpenInIos()||this._shouldUseRedirectStrategy()?window.location.href=e:window.open(e))},b.prototype.getUrl=function(){return this._createPromise.then(function(e){var t=e.getConfiguration(),n={},r=this._deepLinkReturnUrl||window.location.href.replace(window.location.hash,""),o=t.gatewayConfiguration.payWithVenmo,i=t.analyticsMetadata,a=o.accessToken,s={_meta:{version:i.sdkVersion,integration:i.integration,platform:i.platform,sessionId:i.sessionId}};return this._isDebug=t.isDebug,this._assetsUrl=t.gatewayConfiguration.assetsUrl,r=r.replace(/#*$/,""),this._venmoPaymentContextId&&(this._shouldUseLegacyFlow?a+="|pcid:"+this._venmoPaymentContextId:n.resource_id=this._venmoPaymentContextId),this._shouldIncludeReturnUrls()||this._useAllowDesktopWebLogin?(this._useAllowDesktopWebLogin&&(r=this._assetsUrl+"/web/"+A+"/html/redirect-frame.html"),n["x-success"]=r+"#venmoSuccess=1",n["x-cancel"]=r+"#venmoCancel=1",n["x-error"]=r+"#venmoError=1"):(n["x-success"]="NOOP",n["x-cancel"]="NOOP",n["x-error"]="NOOP"),this._allowAndroidRecreation?n.allowAndroidRecreation=1:n.allowAndroidRecreation=0,n.ua=window.navigator.userAgent,n.braintree_merchant_id=this._profileId||o.merchantId,n.braintree_access_token=a,n.braintree_environment=o.environment,n.braintree_sdk_data=btoa(JSON.stringify(s)),m({useAllowDesktopWebLogin:this._useAllowDesktopWebLogin,mobileWebFallBack:this._mobileWebFallBack})+"?"+c.stringify(n)}.bind(this))},b.prototype.isBrowserSupported=function(){return o.isBrowserSupported({allowNewBrowserTab:this._allowNewBrowserTab,allowWebviews:this._allowWebviews,allowDesktop:this._allowDesktop,allowDesktopWebLogin:this._allowDesktopWebLogin})},b.prototype.hasTokenizationResult=function(){return this._hasTokenizationResult()},b.prototype._hasTokenizationResult=function(e){var t=N(e);return void 0!==(t.venmoSuccess||t.venmoError||t.venmoCancel)},b.prototype._shouldIncludeReturnUrls=function(){return!!this._deepLinkReturnUrl||!this._cannotHaveReturnUrls},b.prototype._isDesktop=function(){return!(i.isIos()||i.isAndroid())},b.prototype.tokenize=function(e){var t=this;return e=e||{},!0===this._tokenizationInProgress?Promise.reject(new f(s.VENMO_TOKENIZATION_REQUEST_ACTIVE)):(this._tokenizationInProgress=!0,(this._useDesktopQRFlow?this._tokenizeForDesktopQRFlow(e):this._useAllowDesktopWebLogin?this._tokenizeWebLoginWithRedirect():this._cannotHaveReturnUrls?this._tokenizeForMobileWithManualReturn():this._tokenizeForMobileWithHashChangeListeners(e)).then((function(e){return t._createPromise.then((function(e){return t._createVenmoPaymentContext(e)})).then((function(){return t._tokenizationInProgress=!1,function(e){var t={nonce:e.paymentMethodNonce,type:"VenmoAccount",details:{username:I(e.username),paymentContextId:e.id}};return e.payerInfo&&(t.details.payerInfo=e.payerInfo,t.details.payerInfo.userName=I(e.payerInfo.userName)),t}(e)}))})).catch((function(e){return t._createPromise.then((function(e){return t._createVenmoPaymentContext(e)})).then((function(){return t._tokenizationInProgress=!1,Promise.reject(e)}))})))},b.prototype.cancelTokenization=function(){return this._tokenizationInProgress?(this._removeVisibilityEventListener(),this._tokenizePromise&&this._tokenizePromise.reject(new f(s.VENMO_TOKENIZATION_CANCELED_BY_MERCHANT)),Promise.all([this._cancelMobilePaymentContext(),this._cancelVenmoDesktopContext()])):Promise.reject(new f(s.VENMO_TOKENIZATION_REQUEST_NOT_ACTIVE))},b.prototype._tokenizeWebLoginWithRedirect=function(){var e=this;return r.sendEvent(e._createPromise,"venmo.tokenize.web-login.start"),this._tokenizePromise=new _,this.getUrl().then((function(t){return E.runWebLogin({checkForStatusChange:e._checkPaymentContextStatusAndProcessResult.bind(e),cancelTokenization:e.cancelTokenization.bind(e),frameServiceInstance:e._frameServiceInstance,venmoUrl:t,debug:e._isDebug,checkPaymentContextStatus:e._checkPaymentContextStatus.bind(e)}).then((function(t){r.sendEvent(e._createPromise,"venmo.tokenize.web-login.success"),e._tokenizePromise.resolve({paymentMethodNonce:t.paymentMethodId,username:t.userName,payerInfo:t.payerInfo,id:e._venmoPaymentContextId})})).catch((function(t){r.sendEvent(e._createPromise,"venmo.tokenize.web-login.failure"),e._tokenizePromise.reject(t)})),e._tokenizePromise}))},b.prototype._queryPaymentContextStatus=function(e){var t=this;return this._createPromise.then((function(n){var r=t._shouldUseLegacyFlow?v.LEGACY_VENMO_PAYMENT_CONTEXT_STATUS_QUERY:v.VENMO_PAYMENT_CONTEXT_STATUS_QUERY;return n.request({api:"graphQLApi",data:{query:r,variables:{id:e}}})})).then((function(e){return e.data.node}))},b.prototype._checkPaymentContextStatusAndProcessResult=function(e){var t=this;return t._checkPaymentContextStatus().then((function(n){var o=n.status;if(o!==t._venmoPaymentContextStatus)switch(t._venmoPaymentContextStatus=o,r.sendEvent(t._createPromise,"venmo.tokenize.web-login.status-change"),o){case"APPROVED":return Promise.resolve(n);case"CANCELED":return Promise.reject(new f(s.VENMO_CUSTOMER_CANCELED));case"FAILED":return Promise.reject(new f(s.VENMO_TOKENIZATION_FAILED))}return new Promise((function(n,r){return e<t._maxRetryCount?(e++,t._checkPaymentContextStatusAndProcessResult(e).then(n).catch(r)):r(new f(s.VENMO_TOKENIZATION_FAILED))}))}))},b.prototype._checkPaymentContextStatus=function(){return this._queryPaymentContextStatus(this._venmoPaymentContextId).catch((function(e){return Promise.reject(new f({type:s.VENMO_NETWORK_ERROR.type,code:s.VENMO_NETWORK_ERROR.code,message:s.VENMO_NETWORK_ERROR.message,details:e}))})).then((function(e){return Promise.resolve(e)}))},b.prototype._pollForStatusChange=function(){var e=this;return Date.now()>e._mobilePollingContextExpiresIn?Promise.reject(new f(s.VENMO_MOBILE_POLLING_TOKENIZATION_TIMEOUT)):this._queryPaymentContextStatus(this._venmoPaymentContextId).catch((function(e){return Promise.reject(new f({type:s.VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR.type,code:s.VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR.code,message:s.VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR.message,details:{originalError:e}}))})).then((function(t){var n=t.status;if(n!==e._venmoPaymentContextStatus)switch(e._venmoPaymentContextStatus=n,r.sendEvent(e._createPromise,"venmo.tokenize.manual-return.status-change."+n.toLowerCase()),n){case"EXPIRED":case"FAILED":case"CANCELED":return Promise.reject(new f(s["VENMO_MOBILE_POLLING_TOKENIZATION_"+n]));case"APPROVED":return Promise.resolve(t)}return new Promise((function(t,n){setTimeout((function(){e._pollForStatusChange().then(t).catch(n)}),e._mobilePollingInterval)}))}))},b.prototype._tokenizeForMobileWithManualReturn=function(){var e=this;return r.sendEvent(this._createPromise,"venmo.tokenize.manual-return.start"),this._mobilePollingContextExpiresIn=Date.now()+this._mobilePollingExpiresThreshold,this._tokenizePromise=new _,this._pollForStatusChange().then((function(t){r.sendEvent(e._createPromise,"venmo.tokenize.manual-return.success"),e._tokenizePromise.resolve({paymentMethodNonce:t.paymentMethodId,username:t.userName,payerInfo:t.payerInfo,id:e._venmoPaymentContextId})})).catch((function(t){r.sendEvent(e._createPromise,"venmo.tokenize.manual-return.failure"),e._tokenizePromise.reject(t)})),this.getUrl().then((function(t){return e.appSwitch(t),e._tokenizePromise}))},b.prototype._shouldUseRedirectStrategy=function(){return!!i.isIos()&&(!0===this._mobileWebFallBack||this._useRedirectForIOS)},b.prototype._tokenizeForMobileWithHashChangeListeners=function(e){var t,n,o=this;if(this.hasTokenizationResult())return this.processHashChangeFlowResults();function i(e){var t;o.processHashChangeFlowResults(e).catch((function(e){t=e})).then((function(e){o._ignoreHistoryChanges||window.location.hash===o._previousHash||(window.location.hash=o._previousHash),o._removeVisibilityEventListener(),t?o._tokenizePromise.reject(t):o._tokenizePromise.resolve(e),delete o._tokenizePromise}))}return r.sendEvent(this._createPromise,"venmo.tokenize.mobile.start"),this._tokenizePromise=new _,this._previousHash=window.location.hash,this._onHashChangeListener=function(e){var r=e.newURL.split("#")[1];o._hasTokenizationResult(r)&&(t=!0,clearTimeout(n),i(r))},window.addEventListener("hashchange",this._onHashChangeListener,!1),this._visibilityChangeListener=function(){var r=e.processResultsDelay||a.DEFAULT_PROCESS_RESULTS_DELAY;window.document.hidden||t||(n=setTimeout(i,r))},this.getUrl().then((function(e){return o.appSwitch(e),setTimeout((function(){window.document.addEventListener(O(),o._visibilityChangeListener)}),a.DOCUMENT_VISIBILITY_CHANGE_EVENT_DELAY),o._tokenizePromise}))},b.prototype._tokenizeForDesktopQRFlow=function(){var e=this;return r.sendEvent(this._createPromise,"venmo.tokenize.desktop.start"),this._tokenizePromise=new _,this._createPromise.then((function(){return e._venmoDesktopInstance.launchDesktopFlow()})).then((function(t){e._venmoDesktopInstance.hideDesktopFlow(),r.sendEvent(e._createPromise,"venmo.tokenize.desktop.success"),e._tokenizePromise.resolve(t)})).catch((function(t){r.sendEvent(e._createPromise,"venmo.tokenize.desktop.failure"),e._venmoDesktopInstance&&e._venmoDesktopInstance.hideDesktopFlow(),t&&"CUSTOMER_CANCELED"===t.reason?e._tokenizePromise.reject(new f(s.VENMO_DESKTOP_CANCELED)):e._tokenizePromise.reject(new f({type:s.VENMO_DESKTOP_UNKNOWN_ERROR.type,code:s.VENMO_DESKTOP_UNKNOWN_ERROR.code,message:s.VENMO_DESKTOP_UNKNOWN_ERROR.message,details:{originalError:t}}))})),this._tokenizePromise},b.prototype._cancelMobilePaymentContext=function(){var e=this;return this._createPromise.then((function(t){var n;return e._venmoPaymentContextId?(n=e._shouldUseLegacyFlow?v.LEGACY_UPDATE_PAYMENT_CONTEXT_QUERY:v.UPDATE_PAYMENT_CONTEXT_QUERY,t.request({api:"graphQLApi",data:{query:n,variables:{input:{id:e._venmoPaymentContextId,status:"CANCELED"}}}})):Promise.resolve()}))},b.prototype._cancelVenmoDesktopContext=function(){var e=this;return this._createPromise.then((function(){return e._venmoDesktopInstance&&e._venmoDesktopInstance.updateVenmoDesktopPaymentContext("CANCELED"),Promise.resolve()}))},b.prototype.teardown=function(){var e=this;return this._removeVisibilityEventListener(),this._createPromise.then(function(){e._venmoDesktopInstance&&e._venmoDesktopInstance.teardown(),clearTimeout(e._refreshPaymentContextTimeout),e._cancelMobilePaymentContext(),d(this,u(b.prototype))}.bind(this))},b.prototype._removeVisibilityEventListener=function(){window.removeEventListener("hashchange",this._onHashChangeListener),window.document.removeEventListener(O(),this._visibilityChangeListener),delete this._visibilityChangeListener,delete this._onHashChangeListener},b.prototype.processHashChangeFlowResults=function(e){var t=this,n=N(e);return new Promise((function(e,o){t._shouldUseLegacyFlow?n.venmoSuccess?(r.sendEvent(t._createPromise,"venmo.appswitch.handle.success"),e(n)):n.venmoError?(r.sendEvent(t._createPromise,"venmo.appswitch.handle.error"),o(new f({type:s.VENMO_APP_FAILED.type,code:s.VENMO_APP_FAILED.code,message:s.VENMO_APP_FAILED.message,details:{originalError:{message:decodeURIComponent(n.errorMessage),code:n.errorCode}}}))):n.venmoCancel?(r.sendEvent(t._createPromise,"venmo.appswitch.handle.cancel"),o(new f(s.VENMO_APP_CANCELED))):(r.sendEvent(t._createPromise,"venmo.appswitch.cancel-or-unavailable"),o(new f(s.VENMO_CANCELED))):t._pollForStatusChange().then((function(n){return r.sendEvent(t._createPromise,"venmo.appswitch.handle.payment-context-status-query.success"),e({paymentMethodNonce:n.paymentMethodId,username:n.userName,payerInfo:n.payerInfo,id:t._venmoPaymentContextId})})).catch((function(i){i.type===s.VENMO_MOBILE_POLLING_TOKENIZATION_CANCELED.type&&o(i),r.sendEvent(t._createPromise,"venmo.process-results.payment-context-status-query-failed"),e(n)})),t._clearFragmentParameters()}))},b.prototype._clearFragmentParameters=function(){this._ignoreHistoryChanges||"function"==typeof window.history.replaceState&&window.location.hash&&history.pushState({},"",window.location.href.slice(0,window.location.href.indexOf("#")))},t.exports=p.wrapPrototype(b)},{"../lib/analytics":119,"../lib/braintree-error":124,"../lib/convert-methods-to-error":127,"../lib/in-iframe":150,"../lib/is-verified-domain":153,"../lib/methods":155,"../lib/querystring":157,"../lib/snake-case-to-camel-case":159,"./external/":213,"./external/queries":214,"./shared/browser-detection":217,"./shared/constants":218,"./shared/errors":219,"./shared/get-venmo-url":221,"./shared/supports-venmo":222,"./shared/web-login-backdrop":223,"@braintree/extended-promise":34,"@braintree/wrap-promise":43}],225:[function(e,t,n){"use strict";var r=e("../lib/braintree-error");t.exports={VISA_CHECKOUT_NOT_ENABLED:{type:r.types.MERCHANT,code:"VISA_CHECKOUT_NOT_ENABLED",message:"Visa Checkout is not enabled for this merchant."},VISA_CHECKOUT_INIT_OPTIONS_REQUIRED:{type:r.types.MERCHANT,code:"VISA_CHECKOUT_INIT_OPTIONS_REQUIRED",message:"initOptions requires an object."},VISA_CHECKOUT_PAYMENT_REQUIRED:{type:r.types.MERCHANT,code:"VISA_CHECKOUT_PAYMENT_REQUIRED",message:"tokenize requires callid, encKey, and encPaymentData."},VISA_CHECKOUT_TOKENIZATION:{type:r.types.NETWORK,code:"VISA_CHECKOUT_TOKENIZATION",message:"A network error occurred when processing the Visa Checkout payment."}}},{"../lib/braintree-error":124}],226:[function(e,t,n){"use strict";var r=e("../lib/basic-component-verification"),o=e("../lib/braintree-error"),i=e("../lib/create-deferred-client"),a=e("../lib/create-assets-url"),s=e("./visa-checkout"),c=e("../lib/analytics"),l=e("./errors"),u=e("@braintree/wrap-promise");t.exports={create:u((function(e){var t="Visa Checkout";return r.verify({name:t,client:e.client,authorization:e.authorization}).then((function(){return i.create({authorization:e.authorization,client:e.client,debug:e.debug,assetsUrl:a.create(e.authorization),name:t})})).then((function(t){return e.client=t,e.client.getConfiguration().gatewayConfiguration.visaCheckout?(c.sendEvent(e.client,"visacheckout.initialized"),new s(e)):Promise.reject(new o(l.VISA_CHECKOUT_NOT_ENABLED))}))})),VERSION:"3.100.0"}},{"../lib/analytics":119,"../lib/basic-component-verification":122,"../lib/braintree-error":124,"../lib/create-assets-url":129,"../lib/create-deferred-client":131,"./errors":225,"./visa-checkout":227,"@braintree/wrap-promise":43}],227:[function(e,t,n){"use strict";var r=e("../lib/braintree-error"),o=e("../lib/analytics"),i=e("./errors"),a=e("../lib/json-clone"),s=e("../lib/methods"),c=e("../lib/convert-methods-to-error"),l=e("@braintree/wrap-promise"),u={Visa:"VISA",MasterCard:"MASTERCARD",Discover:"DISCOVER","American Express":"AMEX"};function d(e){this._client=e.client}d.prototype.createInitOptions=function(e){var t,n=this._client.getConfiguration().gatewayConfiguration,o=n.visaCheckout;if(!e)throw new r(i.VISA_CHECKOUT_INIT_OPTIONS_REQUIRED);return(t=a(e)).apikey=t.apikey||o.apikey,t.encryptionKey=o.encryptionKey,t.externalClientId=t.externalClientId||o.externalClientId,t.settings=t.settings||{},t.settings.dataLevel="FULL",t.settings.payment=t.settings.payment||{},t.settings.payment.cardBrands||(t.settings.payment.cardBrands=n.visaCheckout.supportedCardTypes.reduce((function(e,t){return u.hasOwnProperty(t)?e.concat(u[t]):e}),[])),t},d.prototype.tokenize=function(e){var t=this;return e.callid&&e.encKey&&e.encPaymentData?this._client.request({method:"post",endpoint:"payment_methods/visa_checkout_cards",data:{_meta:{source:"visa-checkout"},visaCheckoutCard:{callId:e.callid,encryptedPaymentData:e.encPaymentData,encryptedKey:e.encKey}}}).then((function(e){return o.sendEvent(t._client,"visacheckout.tokenize.succeeded"),e.visaCheckoutCards[0]})).catch((function(e){return o.sendEvent(t._client,"visacheckout.tokenize.failed"),Promise.reject(new r({type:i.VISA_CHECKOUT_TOKENIZATION.type,code:i.VISA_CHECKOUT_TOKENIZATION.code,message:i.VISA_CHECKOUT_TOKENIZATION.message,details:{originalError:e}}))})):Promise.reject(new r(i.VISA_CHECKOUT_PAYMENT_REQUIRED))},d.prototype.teardown=function(){return c(this,s(d.prototype)),Promise.resolve()},t.exports=l.wrapPrototype(d)},{"../lib/analytics":119,"../lib/braintree-error":124,"../lib/convert-methods-to-error":127,"../lib/json-clone":154,"../lib/methods":155,"./errors":225,"@braintree/wrap-promise":43}]},{},[117])(117)},551:(e,t,n)=>{"use strict";var r=n(540),o=n(982);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function c(e,t){l(e,t),l(e+"Capture",t)}function l(e,t){for(s[e]=t,e=0;e<t.length;e++)a.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},h={};function _(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new _(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new _(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new _(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new _(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new _(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new _(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new _(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new _(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new _(e,5,!1,e.toLowerCase(),null,!1,!1)}));var E=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function g(e,t,n,r){var o=m.hasOwnProperty(t)?m[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!d.call(h,e)||!d.call(f,e)&&(p.test(e)?h[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(E,y);m[t]=new _(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(E,y);m[t]=new _(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(E,y);m[t]=new _(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new _(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new _("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new _(e,1,!1,e.toLowerCase(),null,!0,!0)}));var v=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,A=Symbol.for("react.element"),b=Symbol.for("react.portal"),T=Symbol.for("react.fragment"),N=Symbol.for("react.strict_mode"),I=Symbol.for("react.profiler"),O=Symbol.for("react.provider"),P=Symbol.for("react.context"),C=Symbol.for("react.forward_ref"),S=Symbol.for("react.suspense"),R=Symbol.for("react.suspense_list"),w=Symbol.for("react.memo"),D=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var L=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var k=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=k&&e[k]||e["@@iterator"])?e:null}var U,x=Object.assign;function F(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var Y=!1;function V(e,t){if(!e||Y)return"";Y=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==i[s]){var c="\n"+o[a].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=a&&0<=s);break}}}finally{Y=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?F(e):""}function H(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return V(e.type,!1);case 11:return V(e.type.render,!1);case 1:return V(e.type,!0);default:return""}}function z(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case T:return"Fragment";case b:return"Portal";case I:return"Profiler";case N:return"StrictMode";case S:return"Suspense";case R:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case w:return null!==(t=e.displayName||null)?t:z(e.type)||"Memo";case D:t=e._payload,e=e._init;try{return z(e(t))}catch(e){}}return null}function B(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return z(t);case 8:return t===N?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function K(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function j(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function W(e){e._valueTracker||(e._valueTracker=function(e){var t=j(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=j(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return x({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Z(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&g(e,"checked",t,!1)}function $(e,t){X(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return x({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ie(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ce(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var le,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((le=le||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=le.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function _e(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=_e(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(fe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var Ee=x({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function ge(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ve=null;function Ae(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var be=null,Te=null,Ne=null;function Ie(e){if(e=vo(e)){if("function"!=typeof be)throw Error(i(280));var t=e.stateNode;t&&(t=bo(t),be(e.stateNode,e.type,t))}}function Oe(e){Te?Ne?Ne.push(e):Ne=[e]:Te=e}function Pe(){if(Te){var e=Te,t=Ne;if(Ne=Te=null,Ie(e),t)for(e=0;e<t.length;e++)Ie(t[e])}}function Ce(e,t){return e(t)}function Se(){}var Re=!1;function we(e,t,n){if(Re)return e(t,n);Re=!0;try{return Ce(e,t,n)}finally{Re=!1,(null!==Te||null!==Ne)&&(Se(),Pe())}}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=bo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Le=!1;if(u)try{var ke={};Object.defineProperty(ke,"passive",{get:function(){Le=!0}}),window.addEventListener("test",ke,ke),window.removeEventListener("test",ke,ke)}catch(ue){Le=!1}function Me(e,t,n,r,o,i,a,s,c){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var Ue=!1,xe=null,Fe=!1,Ye=null,Ve={onError:function(e){Ue=!0,xe=e}};function He(e,t,n,r,o,i,a,s,c){Ue=!1,xe=null,Me.apply(Ve,arguments)}function ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Be(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ke(e){if(ze(e)!==e)throw Error(i(188))}function je(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=ze(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ke(o),e;if(a===r)return Ke(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var s=!1,c=o.child;c;){if(c===n){s=!0,n=o,r=a;break}if(c===r){s=!0,r=o,n=a;break}c=c.sibling}if(!s){for(c=a.child;c;){if(c===n){s=!0,n=a,r=o;break}if(c===r){s=!0,r=a,n=o;break}c=c.sibling}if(!s)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=We(e);if(null!==t)return t;e=e.sibling}return null}var Ge=o.unstable_scheduleCallback,Qe=o.unstable_cancelCallback,qe=o.unstable_shouldYield,Ze=o.unstable_requestPaint,Xe=o.unstable_now,$e=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,it=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/ct|0)|0},st=Math.log,ct=Math.LN2,lt=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var s=a&~o;0!==s?r=dt(s):0!=(i&=a)&&(r=dt(i))}else 0!=(a=n&~o)?r=dt(a):0!==i&&(r=dt(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function _t(){var e=lt;return 0==(4194240&(lt<<=1))&&(lt=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Et(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var gt=0;function vt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var At,bt,Tt,Nt,It,Ot=!1,Pt=[],Ct=null,St=null,Rt=null,wt=new Map,Dt=new Map,Lt=[],kt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Mt(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":St=null;break;case"mouseover":case"mouseout":Rt=null;break;case"pointerover":case"pointerout":wt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Dt.delete(t.pointerId)}}function Ut(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=vo(t))&&bt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function xt(e){var t=go(e.target);if(null!==t){var n=ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Be(n)))return e.blockedOn=t,void It(e.priority,(function(){Tt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=vo(n))&&bt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);ve=r,n.target.dispatchEvent(r),ve=null,t.shift()}return!0}function Yt(e,t,n){Ft(e)&&n.delete(t)}function Vt(){Ot=!1,null!==Ct&&Ft(Ct)&&(Ct=null),null!==St&&Ft(St)&&(St=null),null!==Rt&&Ft(Rt)&&(Rt=null),wt.forEach(Yt),Dt.forEach(Yt)}function Ht(e,t){e.blockedOn===t&&(e.blockedOn=null,Ot||(Ot=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Vt)))}function zt(e){function t(t){return Ht(t,e)}if(0<Pt.length){Ht(Pt[0],e);for(var n=1;n<Pt.length;n++){var r=Pt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Ht(Ct,e),null!==St&&Ht(St,e),null!==Rt&&Ht(Rt,e),wt.forEach(t),Dt.forEach(t),n=0;n<Lt.length;n++)(r=Lt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Lt.length&&null===(n=Lt[0]).blockedOn;)xt(n),null===n.blockedOn&&Lt.shift()}var Bt=v.ReactCurrentBatchConfig,Kt=!0;function jt(e,t,n,r){var o=gt,i=Bt.transition;Bt.transition=null;try{gt=1,Gt(e,t,n,r)}finally{gt=o,Bt.transition=i}}function Wt(e,t,n,r){var o=gt,i=Bt.transition;Bt.transition=null;try{gt=4,Gt(e,t,n,r)}finally{gt=o,Bt.transition=i}}function Gt(e,t,n,r){if(Kt){var o=qt(e,t,n,r);if(null===o)Kr(e,t,r,Qt,n),Mt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ct=Ut(Ct,e,t,n,r,o),!0;case"dragenter":return St=Ut(St,e,t,n,r,o),!0;case"mouseover":return Rt=Ut(Rt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return wt.set(i,Ut(wt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Dt.set(i,Ut(Dt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Mt(e,r),4&t&&-1<kt.indexOf(e)){for(;null!==o;){var i=vo(o);if(null!==i&&At(i),null===(i=qt(e,t,n,r))&&Kr(e,t,r,Qt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else Kr(e,t,r,null,n)}}var Qt=null;function qt(e,t,n,r){if(Qt=null,null!==(e=go(e=Ae(r))))if(null===(t=ze(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Be(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Zt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch($e()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,$t=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=$t,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return x(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,cn,ln={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=on(ln),dn=x({},ln,{view:0,detail:0}),pn=on(dn),fn=x({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:In,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(an=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=an=0,cn=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),hn=on(fn),_n=on(x({},fn,{dataTransfer:0})),mn=on(x({},dn,{relatedTarget:0})),En=on(x({},ln,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=x({},ln,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),gn=on(yn),vn=on(x({},ln,{data:0})),An={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},bn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Tn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Nn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tn[e])&&!!t[e]}function In(){return Nn}var On=x({},dn,{key:function(e){if(e.key){var t=An[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?bn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:In,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pn=on(On),Cn=on(x({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Sn=on(x({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:In})),Rn=on(x({},ln,{propertyName:0,elapsedTime:0,pseudoElement:0})),wn=x({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Dn=on(wn),Ln=[9,13,27,32],kn=u&&"CompositionEvent"in window,Mn=null;u&&"documentMode"in document&&(Mn=document.documentMode);var Un=u&&"TextEvent"in window&&!Mn,xn=u&&(!kn||Mn&&8<Mn&&11>=Mn),Fn=String.fromCharCode(32),Yn=!1;function Vn(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Kn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function jn(e,t,n,r){Oe(r),0<(t=Wr(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,Gn=null;function Qn(e){Fr(e,0)}function qn(e){if(G(Ao(e)))return e}function Zn(e,t){if("change"===e)return t}var Xn=!1;if(u){var $n;if(u){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}$n=Jn}else $n=!1;Xn=$n&&(!document.documentMode||9<document.documentMode)}function tr(){Wn&&(Wn.detachEvent("onpropertychange",nr),Gn=Wn=null)}function nr(e){if("value"===e.propertyName&&qn(Gn)){var t=[];jn(t,Gn,e,Ae(e)),we(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Gn=n,(Wn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Gn)}function ir(e,t){if("click"===e)return qn(t)}function ar(e,t){if("input"===e||"change"===e)return qn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function cr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!d.call(t,o)||!sr(e[o],t[o]))return!1}return!0}function lr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=lr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=lr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=ur(n,i);var a=ur(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var _r=u&&"documentMode"in document&&11>=document.documentMode,mr=null,Er=null,yr=null,gr=!1;function vr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==mr||mr!==Q(r)||(r="selectionStart"in(r=mr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&cr(yr,r)||(yr=r,0<(r=Wr(Er,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function Ar(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var br={animationend:Ar("Animation","AnimationEnd"),animationiteration:Ar("Animation","AnimationIteration"),animationstart:Ar("Animation","AnimationStart"),transitionend:Ar("Transition","TransitionEnd")},Tr={},Nr={};function Ir(e){if(Tr[e])return Tr[e];if(!br[e])return e;var t,n=br[e];for(t in n)if(n.hasOwnProperty(t)&&t in Nr)return Tr[e]=n[t];return e}u&&(Nr=document.createElement("div").style,"AnimationEvent"in window||(delete br.animationend.animation,delete br.animationiteration.animation,delete br.animationstart.animation),"TransitionEvent"in window||delete br.transitionend.transition);var Or=Ir("animationend"),Pr=Ir("animationiteration"),Cr=Ir("animationstart"),Sr=Ir("transitionend"),Rr=new Map,wr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Dr(e,t){Rr.set(e,t),c(t,[e])}for(var Lr=0;Lr<wr.length;Lr++){var kr=wr[Lr];Dr(kr.toLowerCase(),"on"+(kr[0].toUpperCase()+kr.slice(1)))}Dr(Or,"onAnimationEnd"),Dr(Pr,"onAnimationIteration"),Dr(Cr,"onAnimationStart"),Dr("dblclick","onDoubleClick"),Dr("focusin","onFocus"),Dr("focusout","onBlur"),Dr(Sr,"onTransitionEnd"),l("onMouseEnter",["mouseout","mouseover"]),l("onMouseLeave",["mouseout","mouseover"]),l("onPointerEnter",["pointerout","pointerover"]),l("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ur=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function xr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,s,c,l){if(He.apply(this,arguments),Ue){if(!Ue)throw Error(i(198));var u=xe;Ue=!1,xe=null,Fe||(Fe=!0,Ye=u)}}(r,t,void 0,e),e.currentTarget=null}function Fr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],c=s.instance,l=s.currentTarget;if(s=s.listener,c!==i&&o.isPropagationStopped())break e;xr(o,s,l),i=c}else for(a=0;a<r.length;a++){if(c=(s=r[a]).instance,l=s.currentTarget,s=s.listener,c!==i&&o.isPropagationStopped())break e;xr(o,s,l),i=c}}}if(Fe)throw e=Ye,Fe=!1,Ye=null,e}function Yr(e,t){var n=t[mo];void 0===n&&(n=t[mo]=new Set);var r=e+"__bubble";n.has(r)||(Br(t,e,2,!1),n.add(r))}function Vr(e,t,n){var r=0;t&&(r|=4),Br(n,e,r,t)}var Hr="_reactListening"+Math.random().toString(36).slice(2);function zr(e){if(!e[Hr]){e[Hr]=!0,a.forEach((function(t){"selectionchange"!==t&&(Ur.has(t)||Vr(t,!1,e),Vr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Hr]||(t[Hr]=!0,Vr("selectionchange",!1,t))}}function Br(e,t,n,r){switch(Zt(t)){case 1:var o=jt;break;case 4:o=Wt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Le||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Kr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var c=a.tag;if((3===c||4===c)&&((c=a.stateNode.containerInfo)===o||8===c.nodeType&&c.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=go(s)))return;if(5===(c=a.tag)||6===c){r=i=a;continue e}s=s.parentNode}}r=r.return}we((function(){var r=i,o=Ae(n),a=[];e:{var s=Rr.get(e);if(void 0!==s){var c=un,l=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":c=Pn;break;case"focusin":l="focus",c=mn;break;case"focusout":l="blur",c=mn;break;case"beforeblur":case"afterblur":c=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":c=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":c=_n;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":c=Sn;break;case Or:case Pr:case Cr:c=En;break;case Sr:c=Rn;break;case"scroll":c=pn;break;case"wheel":c=Dn;break;case"copy":case"cut":case"paste":c=gn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":c=Cn}var u=0!=(4&t),d=!u&&"scroll"===e,p=u?null!==s?s+"Capture":null:s;u=[];for(var f,h=r;null!==h;){var _=(f=h).stateNode;if(5===f.tag&&null!==_&&(f=_,null!==p&&null!=(_=De(h,p))&&u.push(jr(h,_,f))),d)break;h=h.return}0<u.length&&(s=new c(s,l,null,n,o),a.push({event:s,listeners:u}))}}if(0==(7&t)){if(c="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===ve||!(l=n.relatedTarget||n.fromElement)||!go(l)&&!l[_o])&&(c||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,c?(c=r,null!==(l=(l=n.relatedTarget||n.toElement)?go(l):null)&&(l!==(d=ze(l))||5!==l.tag&&6!==l.tag)&&(l=null)):(c=null,l=r),c!==l)){if(u=hn,_="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(u=Cn,_="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==c?s:Ao(c),f=null==l?s:Ao(l),(s=new u(_,h+"leave",c,n,o)).target=d,s.relatedTarget=f,_=null,go(o)===r&&((u=new u(p,h+"enter",l,n,o)).target=f,u.relatedTarget=d,_=u),d=_,c&&l)e:{for(p=l,h=0,f=u=c;f;f=Gr(f))h++;for(f=0,_=p;_;_=Gr(_))f++;for(;0<h-f;)u=Gr(u),h--;for(;0<f-h;)p=Gr(p),f--;for(;h--;){if(u===p||null!==p&&u===p.alternate)break e;u=Gr(u),p=Gr(p)}u=null}else u=null;null!==c&&Qr(a,s,c,u,!1),null!==l&&null!==d&&Qr(a,d,l,u,!0)}if("select"===(c=(s=r?Ao(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===c&&"file"===s.type)var m=Zn;else if(Kn(s))if(Xn)m=ar;else{m=or;var E=rr}else(c=s.nodeName)&&"input"===c.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=ir);switch(m&&(m=m(e,r))?jn(a,m,n,o):(E&&E(e,s,r),"focusout"===e&&(E=s._wrapperState)&&E.controlled&&"number"===s.type&&ee(s,"number",s.value)),E=r?Ao(r):window,e){case"focusin":(Kn(E)||"true"===E.contentEditable)&&(mr=E,Er=r,yr=null);break;case"focusout":yr=Er=mr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,vr(a,n,o);break;case"selectionchange":if(_r)break;case"keydown":case"keyup":vr(a,n,o)}var y;if(kn)e:{switch(e){case"compositionstart":var g="onCompositionStart";break e;case"compositionend":g="onCompositionEnd";break e;case"compositionupdate":g="onCompositionUpdate";break e}g=void 0}else zn?Vn(e,n)&&(g="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(g="onCompositionStart");g&&(xn&&"ko"!==n.locale&&(zn||"onCompositionStart"!==g?"onCompositionEnd"===g&&zn&&(y=en()):($t="value"in(Xt=o)?Xt.value:Xt.textContent,zn=!0)),0<(E=Wr(r,g)).length&&(g=new vn(g,e,null,n,o),a.push({event:g,listeners:E}),(y||null!==(y=Hn(n)))&&(g.data=y))),(y=Un?function(e,t){switch(e){case"compositionend":return Hn(t);case"keypress":return 32!==t.which?null:(Yn=!0,Fn);case"textInput":return(e=t.data)===Fn&&Yn?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!kn&&Vn(e,t)?(e=en(),Jt=$t=Xt=null,zn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return xn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Wr(r,"onBeforeInput")).length&&(o=new vn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y)}Fr(a,t)}))}function jr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Wr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=De(e,n))&&r.unshift(jr(e,i,o)),null!=(i=De(e,t))&&r.push(jr(e,i,o))),e=e.return}return r}function Gr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var s=n,c=s.alternate,l=s.stateNode;if(null!==c&&c===r)break;5===s.tag&&null!==l&&(s=l,o?null!=(c=De(n,i))&&a.unshift(jr(n,c,s)):o||null!=(c=De(n,i))&&a.push(jr(n,c,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var qr=/\r\n?/g,Zr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Zr,"")}function $r(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(i(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(so)}:ro;function so(e){setTimeout((function(){throw e}))}function co(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void zt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);zt(t)}function lo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function uo(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var po=Math.random().toString(36).slice(2),fo="__reactFiber$"+po,ho="__reactProps$"+po,_o="__reactContainer$"+po,mo="__reactEvents$"+po,Eo="__reactListeners$"+po,yo="__reactHandles$"+po;function go(e){var t=e[fo];if(t)return t;for(var n=e.parentNode;n;){if(t=n[_o]||n[fo]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=uo(e);null!==e;){if(n=e[fo])return n;e=uo(e)}return t}n=(e=n).parentNode}return null}function vo(e){return!(e=e[fo]||e[_o])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Ao(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function bo(e){return e[ho]||null}var To=[],No=-1;function Io(e){return{current:e}}function Oo(e){0>No||(e.current=To[No],To[No]=null,No--)}function Po(e,t){No++,To[No]=e.current,e.current=t}var Co={},So=Io(Co),Ro=Io(!1),wo=Co;function Do(e,t){var n=e.type.contextTypes;if(!n)return Co;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Lo(e){return null!=e.childContextTypes}function ko(){Oo(Ro),Oo(So)}function Mo(e,t,n){if(So.current!==Co)throw Error(i(168));Po(So,t),Po(Ro,n)}function Uo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,B(e)||"Unknown",o));return x({},n,r)}function xo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Co,wo=So.current,Po(So,e),Po(Ro,Ro.current),!0}function Fo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Uo(e,t,wo),r.__reactInternalMemoizedMergedChildContext=e,Oo(Ro),Oo(So),Po(So,e)):Oo(Ro),Po(Ro,n)}var Yo=null,Vo=!1,Ho=!1;function zo(e){null===Yo?Yo=[e]:Yo.push(e)}function Bo(){if(!Ho&&null!==Yo){Ho=!0;var e=0,t=gt;try{var n=Yo;for(gt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Yo=null,Vo=!1}catch(t){throw null!==Yo&&(Yo=Yo.slice(e+1)),Ge(Je,Bo),t}finally{gt=t,Ho=!1}}return null}var Ko=[],jo=0,Wo=null,Go=0,Qo=[],qo=0,Zo=null,Xo=1,$o="";function Jo(e,t){Ko[jo++]=Go,Ko[jo++]=Wo,Wo=e,Go=t}function ei(e,t,n){Qo[qo++]=Xo,Qo[qo++]=$o,Qo[qo++]=Zo,Zo=e;var r=Xo;e=$o;var o=32-at(r)-1;r&=~(1<<o),n+=1;var i=32-at(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-at(t)+o|n<<o|r,$o=i+e}else Xo=1<<i|n<<o|r,$o=e}function ti(e){null!==e.return&&(Jo(e,1),ei(e,1,0))}function ni(e){for(;e===Wo;)Wo=Ko[--jo],Ko[jo]=null,Go=Ko[--jo],Ko[jo]=null;for(;e===Zo;)Zo=Qo[--qo],Qo[qo]=null,$o=Qo[--qo],Qo[qo]=null,Xo=Qo[--qo],Qo[qo]=null}var ri=null,oi=null,ii=!1,ai=null;function si(e,t){var n=Dl(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ci(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,oi=lo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,oi=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Zo?{id:Xo,overflow:$o}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Dl(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ri=e,oi=null,!0);default:return!1}}function li(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ui(e){if(ii){var t=oi;if(t){var n=t;if(!ci(e,t)){if(li(e))throw Error(i(418));t=lo(n.nextSibling);var r=ri;t&&ci(e,t)?si(r,n):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(li(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function di(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function pi(e){if(e!==ri)return!1;if(!ii)return di(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oi)){if(li(e))throw fi(),Error(i(418));for(;t;)si(e,t),t=lo(t.nextSibling)}if(di(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oi=lo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oi=null}}else oi=ri?lo(e.stateNode.nextSibling):null;return!0}function fi(){for(var e=oi;e;)e=lo(e.nextSibling)}function hi(){oi=ri=null,ii=!1}function _i(e){null===ai?ai=[e]:ai.push(e)}var mi=v.ReactCurrentBatchConfig;function Ei(e,t){if(e&&e.defaultProps){for(var n in t=x({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var yi=Io(null),gi=null,vi=null,Ai=null;function bi(){Ai=vi=gi=null}function Ti(e){var t=yi.current;Oo(yi),e._currentValue=t}function Ni(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ii(e,t){gi=e,Ai=vi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(vs=!0),e.firstContext=null)}function Oi(e){var t=e._currentValue;if(Ai!==e)if(e={context:e,memoizedValue:t,next:null},null===vi){if(null===gi)throw Error(i(308));vi=e,gi.dependencies={lanes:0,firstContext:e}}else vi=vi.next=e;return t}var Pi=null;function Ci(e){null===Pi?Pi=[e]:Pi.push(e)}function Si(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Ci(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ri(e,r)}function Ri(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var wi=!1;function Di(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ki(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Mi(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Sc)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ri(e,n)}return null===(o=r.interleaved)?(t.next=t,Ci(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ri(e,n)}function Ui(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function xi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Fi(e,t,n,r){var o=e.updateQueue;wi=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,s=o.shared.pending;if(null!==s){o.shared.pending=null;var c=s,l=c.next;c.next=null,null===a?i=l:a.next=l,a=c;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==a&&(null===s?u.firstBaseUpdate=l:s.next=l,u.lastBaseUpdate=c)}if(null!==i){var d=o.baseState;for(a=0,u=l=c=null,s=i;;){var p=s.lane,f=s.eventTime;if((r&p)===p){null!==u&&(u=u.next={eventTime:f,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,_=s;switch(p=t,f=n,_.tag){case 1:if("function"==typeof(h=_.payload)){d=h.call(f,d,p);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=_.payload)?h.call(f,d,p):h))break e;d=x({},d,p);break e;case 2:wi=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(p=o.effects)?o.effects=[s]:p.push(s))}else f={eventTime:f,lane:p,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(l=u=f,c=d):u=u.next=f,a|=p;if(null===(s=s.next)){if(null===(s=o.shared.pending))break;s=(p=s).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}if(null===u&&(c=d),o.baseState=c,o.firstBaseUpdate=l,o.lastBaseUpdate=u,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);xc|=a,e.lanes=a,e.memoizedState=d}}function Yi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Vi=(new r.Component).refs;function Hi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:x({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var zi={isMounted:function(e){return!!(e=e._reactInternals)&&ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tl(),o=nl(e),i=ki(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Mi(e,i,o))&&(rl(t,e,o,r),Ui(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tl(),o=nl(e),i=ki(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Mi(e,i,o))&&(rl(t,e,o,r),Ui(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tl(),r=nl(e),o=ki(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Mi(e,o,r))&&(rl(t,e,r,n),Ui(t,e,r))}};function Bi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&cr(n,r)&&cr(o,i))}function Ki(e,t,n){var r=!1,o=Co,i=t.contextType;return"object"==typeof i&&null!==i?i=Oi(i):(o=Lo(t)?wo:So.current,i=(r=null!=(r=t.contextTypes))?Do(e,o):Co),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=zi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function ji(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&zi.enqueueReplaceState(t,t.state,null)}function Wi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Vi,Di(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=Oi(i):(i=Lo(t)?wo:So.current,o.context=Do(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(Hi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&zi.enqueueReplaceState(o,o.state,null),Fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Gi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===Vi&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Qi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function qi(e){return(0,e._init)(e._payload)}function Zi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=kl(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Fl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function l(e,t,n,r){var i=n.type;return i===T?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===D&&qi(i)===t.type)?((r=o(t,n.props)).ref=Gi(e,t,n),r.return=e,r):((r=Ml(n.type,n.key,n.props,null,e.mode,r)).ref=Gi(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Yl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=Ul(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Fl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case A:return(n=Ml(t.type,t.key,t.props,null,e.mode,n)).ref=Gi(e,null,t),n.return=e,n;case b:return(t=Yl(t,e.mode,n)).return=e,t;case D:return p(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Ul(t,e.mode,n,null)).return=e,t;Qi(e,t)}return null}function f(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return n.key===o?l(e,t,n,r):null;case b:return n.key===o?u(e,t,n,r):null;case D:return f(e,t,(o=n._init)(n._payload),r)}if(te(n)||M(n))return null!==o?null:d(e,t,n,r,null);Qi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return l(t,e=e.get(null===r.key?n:r.key)||null,r,o);case b:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case D:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||M(r))return d(t,e=e.get(n)||null,r,o,null);Qi(t,r)}return null}function _(o,i,s,c){for(var l=null,u=null,d=i,_=i=0,m=null;null!==d&&_<s.length;_++){d.index>_?(m=d,d=null):m=d.sibling;var E=f(o,d,s[_],c);if(null===E){null===d&&(d=m);break}e&&d&&null===E.alternate&&t(o,d),i=a(E,i,_),null===u?l=E:u.sibling=E,u=E,d=m}if(_===s.length)return n(o,d),ii&&Jo(o,_),l;if(null===d){for(;_<s.length;_++)null!==(d=p(o,s[_],c))&&(i=a(d,i,_),null===u?l=d:u.sibling=d,u=d);return ii&&Jo(o,_),l}for(d=r(o,d);_<s.length;_++)null!==(m=h(d,o,_,s[_],c))&&(e&&null!==m.alternate&&d.delete(null===m.key?_:m.key),i=a(m,i,_),null===u?l=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(o,e)})),ii&&Jo(o,_),l}function m(o,s,c,l){var u=M(c);if("function"!=typeof u)throw Error(i(150));if(null==(c=u.call(c)))throw Error(i(151));for(var d=u=null,_=s,m=s=0,E=null,y=c.next();null!==_&&!y.done;m++,y=c.next()){_.index>m?(E=_,_=null):E=_.sibling;var g=f(o,_,y.value,l);if(null===g){null===_&&(_=E);break}e&&_&&null===g.alternate&&t(o,_),s=a(g,s,m),null===d?u=g:d.sibling=g,d=g,_=E}if(y.done)return n(o,_),ii&&Jo(o,m),u;if(null===_){for(;!y.done;m++,y=c.next())null!==(y=p(o,y.value,l))&&(s=a(y,s,m),null===d?u=y:d.sibling=y,d=y);return ii&&Jo(o,m),u}for(_=r(o,_);!y.done;m++,y=c.next())null!==(y=h(_,o,m,y.value,l))&&(e&&null!==y.alternate&&_.delete(null===y.key?m:y.key),s=a(y,s,m),null===d?u=y:d.sibling=y,d=y);return e&&_.forEach((function(e){return t(o,e)})),ii&&Jo(o,m),u}return function e(r,i,a,c){if("object"==typeof a&&null!==a&&a.type===T&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case A:e:{for(var l=a.key,u=i;null!==u;){if(u.key===l){if((l=a.type)===T){if(7===u.tag){n(r,u.sibling),(i=o(u,a.props.children)).return=r,r=i;break e}}else if(u.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===D&&qi(l)===u.type){n(r,u.sibling),(i=o(u,a.props)).ref=Gi(r,u,a),i.return=r,r=i;break e}n(r,u);break}t(r,u),u=u.sibling}a.type===T?((i=Ul(a.props.children,r.mode,c,a.key)).return=r,r=i):((c=Ml(a.type,a.key,a.props,null,r.mode,c)).ref=Gi(r,i,a),c.return=r,r=c)}return s(r);case b:e:{for(u=a.key;null!==i;){if(i.key===u){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=Yl(a,r.mode,c)).return=r,r=i}return s(r);case D:return e(r,i,(u=a._init)(a._payload),c)}if(te(a))return _(r,i,a,c);if(M(a))return m(r,i,a,c);Qi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=Fl(a,r.mode,c)).return=r,r=i),s(r)):n(r,i)}}var Xi=Zi(!0),$i=Zi(!1),Ji={},ea=Io(Ji),ta=Io(Ji),na=Io(Ji);function ra(e){if(e===Ji)throw Error(i(174));return e}function oa(e,t){switch(Po(na,t),Po(ta,e),Po(ea,Ji),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ce(null,"");break;default:t=ce(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Oo(ea),Po(ea,t)}function ia(){Oo(ea),Oo(ta),Oo(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=ce(t,e.type);t!==n&&(Po(ta,e),Po(ea,n))}function sa(e){ta.current===e&&(Oo(ea),Oo(ta))}var ca=Io(0);function la(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ua=[];function da(){for(var e=0;e<ua.length;e++)ua[e]._workInProgressVersionPrimary=null;ua.length=0}var pa=v.ReactCurrentDispatcher,fa=v.ReactCurrentBatchConfig,ha=0,_a=null,ma=null,Ea=null,ya=!1,ga=!1,va=0,Aa=0;function ba(){throw Error(i(321))}function Ta(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function Na(e,t,n,r,o,a){if(ha=a,_a=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,pa.current=null===e||null===e.memoizedState?ss:cs,e=n(r,o),ga){a=0;do{if(ga=!1,va=0,25<=a)throw Error(i(301));a+=1,Ea=ma=null,t.updateQueue=null,pa.current=ls,e=n(r,o)}while(ga)}if(pa.current=as,t=null!==ma&&null!==ma.next,ha=0,Ea=ma=_a=null,ya=!1,t)throw Error(i(300));return e}function Ia(){var e=0!==va;return va=0,e}function Oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ea?_a.memoizedState=Ea=e:Ea=Ea.next=e,Ea}function Pa(){if(null===ma){var e=_a.alternate;e=null!==e?e.memoizedState:null}else e=ma.next;var t=null===Ea?_a.memoizedState:Ea.next;if(null!==t)Ea=t,ma=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ma=e).memoizedState,baseState:ma.baseState,baseQueue:ma.baseQueue,queue:ma.queue,next:null},null===Ea?_a.memoizedState=Ea=e:Ea=Ea.next=e}return Ea}function Ca(e,t){return"function"==typeof t?t(e):t}function Sa(e){var t=Pa(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ma,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var s=o.next;o.next=a.next,a.next=s}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var c=s=null,l=null,u=a;do{var d=u.lane;if((ha&d)===d)null!==l&&(l=l.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var p={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===l?(c=l=p,s=r):l=l.next=p,_a.lanes|=d,xc|=d}u=u.next}while(null!==u&&u!==a);null===l?s=r:l.next=c,sr(r,t.memoizedState)||(vs=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=l,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,_a.lanes|=a,xc|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ra(e){var t=Pa(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{a=e(a,s.action),s=s.next}while(s!==o);sr(a,t.memoizedState)||(vs=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function wa(){}function Da(e,t){var n=_a,r=Pa(),o=t(),a=!sr(r.memoizedState,o);if(a&&(r.memoizedState=o,vs=!0),r=r.queue,Ka(Ma.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==Ea&&1&Ea.memoizedState.tag){if(n.flags|=2048,Ya(9,ka.bind(null,n,r,o,t),void 0,null),null===Rc)throw Error(i(349));0!=(30&ha)||La(n,t,o)}return o}function La(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=_a.updateQueue)?(t={lastEffect:null,stores:null},_a.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function ka(e,t,n,r){t.value=n,t.getSnapshot=r,Ua(t)&&xa(e)}function Ma(e,t,n){return n((function(){Ua(t)&&xa(e)}))}function Ua(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function xa(e){var t=Ri(e,1);null!==t&&rl(t,e,1,-1)}function Fa(e){var t=Oa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ca,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,_a,e),[t.memoizedState,e]}function Ya(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=_a.updateQueue)?(t={lastEffect:null,stores:null},_a.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Va(){return Pa().memoizedState}function Ha(e,t,n,r){var o=Oa();_a.flags|=e,o.memoizedState=Ya(1|t,n,void 0,void 0===r?null:r)}function za(e,t,n,r){var o=Pa();r=void 0===r?null:r;var i=void 0;if(null!==ma){var a=ma.memoizedState;if(i=a.destroy,null!==r&&Ta(r,a.deps))return void(o.memoizedState=Ya(t,n,i,r))}_a.flags|=e,o.memoizedState=Ya(1|t,n,i,r)}function Ba(e,t){return Ha(8390656,8,e,t)}function Ka(e,t){return za(2048,8,e,t)}function ja(e,t){return za(4,2,e,t)}function Wa(e,t){return za(4,4,e,t)}function Ga(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Qa(e,t,n){return n=null!=n?n.concat([e]):null,za(4,4,Ga.bind(null,t,e),n)}function qa(){}function Za(e,t){var n=Pa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ta(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xa(e,t){var n=Pa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ta(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function $a(e,t,n){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,vs=!0),e.memoizedState=n):(sr(n,t)||(n=_t(),_a.lanes|=n,xc|=n,e.baseState=!0),t)}function Ja(e,t){var n=gt;gt=0!==n&&4>n?n:4,e(!0);var r=fa.transition;fa.transition={};try{e(!1),t()}finally{gt=n,fa.transition=r}}function es(){return Pa().memoizedState}function ts(e,t,n){var r=nl(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rs(e)?os(t,n):null!==(n=Si(e,t,n,r))&&(rl(n,e,r,tl()),is(n,t,r))}function ns(e,t,n){var r=nl(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rs(e))os(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=i(a,n);if(o.hasEagerState=!0,o.eagerState=s,sr(s,a)){var c=t.interleaved;return null===c?(o.next=o,Ci(t)):(o.next=c.next,c.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Si(e,t,o,r))&&(rl(n,e,r,o=tl()),is(n,t,r))}}function rs(e){var t=e.alternate;return e===_a||null!==t&&t===_a}function os(e,t){ga=ya=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function is(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var as={readContext:Oi,useCallback:ba,useContext:ba,useEffect:ba,useImperativeHandle:ba,useInsertionEffect:ba,useLayoutEffect:ba,useMemo:ba,useReducer:ba,useRef:ba,useState:ba,useDebugValue:ba,useDeferredValue:ba,useTransition:ba,useMutableSource:ba,useSyncExternalStore:ba,useId:ba,unstable_isNewReconciler:!1},ss={readContext:Oi,useCallback:function(e,t){return Oa().memoizedState=[e,void 0===t?null:t],e},useContext:Oi,useEffect:Ba,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ha(4194308,4,Ga.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ha(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ha(4,2,e,t)},useMemo:function(e,t){var n=Oa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Oa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ts.bind(null,_a,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Oa().memoizedState=e},useState:Fa,useDebugValue:qa,useDeferredValue:function(e){return Oa().memoizedState=e},useTransition:function(){var e=Fa(!1),t=e[0];return e=Ja.bind(null,e[1]),Oa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=_a,o=Oa();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===Rc)throw Error(i(349));0!=(30&ha)||La(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,Ba(Ma.bind(null,r,a,e),[e]),r.flags|=2048,Ya(9,ka.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Oa(),t=Rc.identifierPrefix;if(ii){var n=$o;t=":"+t+"R"+(n=(Xo&~(1<<32-at(Xo)-1)).toString(32)+n),0<(n=va++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Aa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},cs={readContext:Oi,useCallback:Za,useContext:Oi,useEffect:Ka,useImperativeHandle:Qa,useInsertionEffect:ja,useLayoutEffect:Wa,useMemo:Xa,useReducer:Sa,useRef:Va,useState:function(){return Sa(Ca)},useDebugValue:qa,useDeferredValue:function(e){return $a(Pa(),ma.memoizedState,e)},useTransition:function(){return[Sa(Ca)[0],Pa().memoizedState]},useMutableSource:wa,useSyncExternalStore:Da,useId:es,unstable_isNewReconciler:!1},ls={readContext:Oi,useCallback:Za,useContext:Oi,useEffect:Ka,useImperativeHandle:Qa,useInsertionEffect:ja,useLayoutEffect:Wa,useMemo:Xa,useReducer:Ra,useRef:Va,useState:function(){return Ra(Ca)},useDebugValue:qa,useDeferredValue:function(e){var t=Pa();return null===ma?t.memoizedState=e:$a(t,ma.memoizedState,e)},useTransition:function(){return[Ra(Ca)[0],Pa().memoizedState]},useMutableSource:wa,useSyncExternalStore:Da,useId:es,unstable_isNewReconciler:!1};function us(e,t){try{var n="",r=t;do{n+=H(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function ds(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function ps(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fs="function"==typeof WeakMap?WeakMap:Map;function hs(e,t,n){(n=ki(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){jc||(jc=!0,Wc=r),ps(0,t)},n}function _s(e,t,n){(n=ki(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){ps(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){ps(0,t),"function"!=typeof r&&(null===Gc?Gc=new Set([this]):Gc.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ms(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fs;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Ol.bind(null,e,t,n),t.then(e,e))}function Es(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function ys(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=ki(-1,1)).tag=2,Mi(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var gs=v.ReactCurrentOwner,vs=!1;function As(e,t,n,r){t.child=null===e?$i(t,null,n,r):Xi(t,e.child,n,r)}function bs(e,t,n,r,o){n=n.render;var i=t.ref;return Ii(t,o),r=Na(e,t,n,r,i,o),n=Ia(),null===e||vs?(ii&&n&&ti(t),t.flags|=1,As(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,js(e,t,o))}function Ts(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Ll(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ml(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ns(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:cr)(a,r)&&e.ref===t.ref)return js(e,t,o)}return t.flags|=1,(e=kl(i,r)).ref=t.ref,e.return=t,t.child=e}function Ns(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(cr(i,r)&&e.ref===t.ref){if(vs=!1,t.pendingProps=r=i,0==(e.lanes&o))return t.lanes=e.lanes,js(e,t,o);0!=(131072&e.flags)&&(vs=!0)}}return Ps(e,t,n,r,o)}function Is(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Po(kc,Lc),Lc|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Po(kc,Lc),Lc|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,Po(kc,Lc),Lc|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,Po(kc,Lc),Lc|=r;return As(e,t,o,n),t.child}function Os(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ps(e,t,n,r,o){var i=Lo(n)?wo:So.current;return i=Do(t,i),Ii(t,o),n=Na(e,t,n,r,i,o),r=Ia(),null===e||vs?(ii&&r&&ti(t),t.flags|=1,As(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,js(e,t,o))}function Cs(e,t,n,r,o){if(Lo(n)){var i=!0;xo(t)}else i=!1;if(Ii(t,o),null===t.stateNode)Ks(e,t),Ki(t,n,r),Wi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var c=a.context,l=n.contextType;l="object"==typeof l&&null!==l?Oi(l):Do(t,l=Lo(n)?wo:So.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||c!==l)&&ji(t,a,r,l),wi=!1;var p=t.memoizedState;a.state=p,Fi(t,r,a,o),c=t.memoizedState,s!==r||p!==c||Ro.current||wi?("function"==typeof u&&(Hi(t,n,u,r),c=t.memoizedState),(s=wi||Bi(t,n,s,r,p,c,l))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=c),a.props=r,a.state=c,a.context=l,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Li(e,t),s=t.memoizedProps,l=t.type===t.elementType?s:Ei(t.type,s),a.props=l,d=t.pendingProps,p=a.context,c="object"==typeof(c=n.contextType)&&null!==c?Oi(c):Do(t,c=Lo(n)?wo:So.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||p!==c)&&ji(t,a,r,c),wi=!1,p=t.memoizedState,a.state=p,Fi(t,r,a,o);var h=t.memoizedState;s!==d||p!==h||Ro.current||wi?("function"==typeof f&&(Hi(t,n,f,r),h=t.memoizedState),(l=wi||Bi(t,n,l,r,p,h,c)||!1)?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,c)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=c,r=l):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return Ss(e,t,n,r,i,o)}function Ss(e,t,n,r,o,i){Os(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&Fo(t,n,!1),js(e,t,i);r=t.stateNode,gs.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Xi(t,e.child,null,i),t.child=Xi(t,null,s,i)):As(e,t,s,i),t.memoizedState=r.state,o&&Fo(t,n,!0),t.child}function Rs(e){var t=e.stateNode;t.pendingContext?Mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Mo(0,t.context,!1),oa(e,t.containerInfo)}function ws(e,t,n,r,o){return hi(),_i(o),t.flags|=256,As(e,t,n,r),t.child}var Ds,Ls,ks,Ms,Us={dehydrated:null,treeContext:null,retryLane:0};function xs(e){return{baseLanes:e,cachePool:null,transitions:null}}function Fs(e,t,n){var r,o=t.pendingProps,a=ca.current,s=!1,c=0!=(128&t.flags);if((r=c)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Po(ca,1&a),null===e)return ui(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(c=o.children,e=o.fallback,s?(o=t.mode,s=t.child,c={mode:"hidden",children:c},0==(1&o)&&null!==s?(s.childLanes=0,s.pendingProps=c):s=xl(c,o,0,null),e=Ul(e,o,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=xs(n),t.memoizedState=Us,e):Ys(t,c));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,s){if(n)return 256&t.flags?(t.flags&=-257,Vs(e,t,s,r=ds(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=xl({mode:"visible",children:r.children},o,0,null),(a=Ul(a,o,s,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Xi(t,e.child,null,s),t.child.memoizedState=xs(s),t.memoizedState=Us,a);if(0==(1&t.mode))return Vs(e,t,s,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var c=r.dgst;return r=c,Vs(e,t,s,r=ds(a=Error(i(419)),r,void 0))}if(c=0!=(s&e.childLanes),vs||c){if(null!==(r=Rc)){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|s))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Ri(e,o),rl(r,e,o,-1))}return ml(),Vs(e,t,s,r=ds(Error(i(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Cl.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,oi=lo(o.nextSibling),ri=t,ii=!0,ai=null,null!==e&&(Qo[qo++]=Xo,Qo[qo++]=$o,Qo[qo++]=Zo,Xo=e.id,$o=e.overflow,Zo=t),(t=Ys(t,r.children)).flags|=4096,t)}(e,t,c,o,r,a,n);if(s){s=o.fallback,c=t.mode,r=(a=e.child).sibling;var l={mode:"hidden",children:o.children};return 0==(1&c)&&t.child!==a?((o=t.child).childLanes=0,o.pendingProps=l,t.deletions=null):(o=kl(a,l)).subtreeFlags=14680064&a.subtreeFlags,null!==r?s=kl(r,s):(s=Ul(s,c,n,null)).flags|=2,s.return=t,o.return=t,o.sibling=s,t.child=o,o=s,s=t.child,c=null===(c=e.child.memoizedState)?xs(n):{baseLanes:c.baseLanes|n,cachePool:null,transitions:c.transitions},s.memoizedState=c,s.childLanes=e.childLanes&~n,t.memoizedState=Us,o}return e=(s=e.child).sibling,o=kl(s,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Ys(e,t){return(t=xl({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Vs(e,t,n,r){return null!==r&&_i(r),Xi(t,e.child,null,n),(e=Ys(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Hs(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ni(e.return,t,n)}function zs(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function Bs(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(As(e,t,r.children,n),0!=(2&(r=ca.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Hs(e,n,t);else if(19===e.tag)Hs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Po(ca,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===la(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),zs(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===la(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}zs(t,!0,n,null,i);break;case"together":zs(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ks(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function js(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),xc|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=kl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=kl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ws(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Gs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Qs(e,t,n){var r=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Gs(t),null;case 1:case 17:return Lo(t.type)&&ko(),Gs(t),null;case 3:return r=t.stateNode,ia(),Oo(Ro),Oo(So),da(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(pi(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ai&&(sl(ai),ai=null))),Ls(e,t),Gs(t),null;case 5:sa(t);var o=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)ks(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Gs(t),null}if(e=ra(ea.current),pi(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[fo]=t,r[ho]=a,e=0!=(1&t.mode),n){case"dialog":Yr("cancel",r),Yr("close",r);break;case"iframe":case"object":case"embed":Yr("load",r);break;case"video":case"audio":for(o=0;o<Mr.length;o++)Yr(Mr[o],r);break;case"source":Yr("error",r);break;case"img":case"image":case"link":Yr("error",r),Yr("load",r);break;case"details":Yr("toggle",r);break;case"input":Z(r,a),Yr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Yr("invalid",r);break;case"textarea":oe(r,a),Yr("invalid",r)}for(var c in ye(n,a),o=null,a)if(a.hasOwnProperty(c)){var l=a[c];"children"===c?"string"==typeof l?r.textContent!==l&&(!0!==a.suppressHydrationWarning&&$r(r.textContent,l,e),o=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(!0!==a.suppressHydrationWarning&&$r(r.textContent,l,e),o=["children",""+l]):s.hasOwnProperty(c)&&null!=l&&"onScroll"===c&&Yr("scroll",r)}switch(n){case"input":W(r),J(r,a,!0);break;case"textarea":W(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{c=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[fo]=t,e[ho]=r,Ds(e,t,!1,!1),t.stateNode=e;e:{switch(c=ge(n,r),n){case"dialog":Yr("cancel",e),Yr("close",e),o=r;break;case"iframe":case"object":case"embed":Yr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Mr.length;o++)Yr(Mr[o],e);o=r;break;case"source":Yr("error",e),o=r;break;case"img":case"image":case"link":Yr("error",e),Yr("load",e),o=r;break;case"details":Yr("toggle",e),o=r;break;case"input":Z(e,r),o=q(e,r),Yr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=x({},r,{value:void 0}),Yr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Yr("invalid",e)}for(a in ye(n,o),l=o)if(l.hasOwnProperty(a)){var u=l[a];"style"===a?me(e,u):"dangerouslySetInnerHTML"===a?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===a?"string"==typeof u?("textarea"!==n||""!==u)&&pe(e,u):"number"==typeof u&&pe(e,""+u):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=u&&"onScroll"===a&&Yr("scroll",e):null!=u&&g(e,a,u,c))}switch(n){case"input":W(e),J(e,r,!1);break;case"textarea":W(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Gs(t),null;case 6:if(e&&null!=t.stateNode)Ms(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ra(na.current),ra(ea.current),pi(t)){if(r=t.stateNode,n=t.memoizedProps,r[fo]=t,(a=r.nodeValue!==n)&&null!==(e=ri))switch(e.tag){case 3:$r(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&$r(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fo]=t,t.stateNode=r}return Gs(t),null;case 13:if(Oo(ca),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&0!=(1&t.mode)&&0==(128&t.flags))fi(),hi(),t.flags|=98560,a=!1;else if(a=pi(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[fo]=t}else hi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Gs(t),a=!1}else null!==ai&&(sl(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ca.current)?0===Mc&&(Mc=3):ml())),null!==t.updateQueue&&(t.flags|=4),Gs(t),null);case 4:return ia(),Ls(e,t),null===e&&zr(t.stateNode.containerInfo),Gs(t),null;case 10:return Ti(t.type._context),Gs(t),null;case 19:if(Oo(ca),null===(a=t.memoizedState))return Gs(t),null;if(r=0!=(128&t.flags),null===(c=a.rendering))if(r)Ws(a,!1);else{if(0!==Mc||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(c=la(e))){for(t.flags|=128,Ws(a,!1),null!==(r=c.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(c=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=c.childLanes,a.lanes=c.lanes,a.child=c.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=c.memoizedProps,a.memoizedState=c.memoizedState,a.updateQueue=c.updateQueue,a.type=c.type,e=c.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Po(ca,1&ca.current|2),t.child}e=e.sibling}null!==a.tail&&Xe()>Bc&&(t.flags|=128,r=!0,Ws(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=la(c))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Ws(a,!0),null===a.tail&&"hidden"===a.tailMode&&!c.alternate&&!ii)return Gs(t),null}else 2*Xe()-a.renderingStartTime>Bc&&1073741824!==n&&(t.flags|=128,r=!0,Ws(a,!1),t.lanes=4194304);a.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=a.last)?n.sibling=c:t.child=c,a.last=c)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Xe(),t.sibling=null,n=ca.current,Po(ca,r?1&n|2:1&n),t):(Gs(t),null);case 22:case 23:return pl(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Lc)&&(Gs(t),6&t.subtreeFlags&&(t.flags|=8192)):Gs(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function qs(e,t){switch(ni(t),t.tag){case 1:return Lo(t.type)&&ko(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ia(),Oo(Ro),Oo(So),da(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return sa(t),null;case 13:if(Oo(ca),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));hi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Oo(ca),null;case 4:return ia(),null;case 10:return Ti(t.type._context),null;case 22:case 23:return pl(),null;default:return null}}Ds=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ls=function(){},ks=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ra(ea.current);var i,a=null;switch(n){case"input":o=q(e,o),r=q(e,r),a=[];break;case"select":o=x({},o,{value:void 0}),r=x({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(u in ye(n,r),n=null,o)if(!r.hasOwnProperty(u)&&o.hasOwnProperty(u)&&null!=o[u])if("style"===u){var c=o[u];for(i in c)c.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?a||(a=[]):(a=a||[]).push(u,null));for(u in r){var l=r[u];if(c=null!=o?o[u]:void 0,r.hasOwnProperty(u)&&l!==c&&(null!=l||null!=c))if("style"===u)if(c){for(i in c)!c.hasOwnProperty(i)||l&&l.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in l)l.hasOwnProperty(i)&&c[i]!==l[i]&&(n||(n={}),n[i]=l[i])}else n||(a||(a=[]),a.push(u,n)),n=l;else"dangerouslySetInnerHTML"===u?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(a=a||[]).push(u,l)):"children"===u?"string"!=typeof l&&"number"!=typeof l||(a=a||[]).push(u,""+l):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=l&&"onScroll"===u&&Yr("scroll",e),a||c===l||(a=[])):(a=a||[]).push(u,l))}n&&(a=a||[]).push("style",n);var u=a;(t.updateQueue=u)&&(t.flags|=4)}},Ms=function(e,t,n,r){n!==r&&(t.flags|=4)};var Zs=!1,Xs=!1,$s="function"==typeof WeakSet?WeakSet:Set,Js=null;function ec(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Il(e,t,n)}else n.current=null}function tc(e,t,n){try{n()}catch(n){Il(e,t,n)}}var nc=!1;function rc(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&tc(t,n,i)}o=o.next}while(o!==r)}}function oc(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ic(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ac(e){var t=e.alternate;null!==t&&(e.alternate=null,ac(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fo],delete t[ho],delete t[mo],delete t[Eo],delete t[yo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function sc(e){return 5===e.tag||3===e.tag||4===e.tag}function cc(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||sc(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function lc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(lc(e,t,n),e=e.sibling;null!==e;)lc(e,t,n),e=e.sibling}function uc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(uc(e,t,n),e=e.sibling;null!==e;)uc(e,t,n),e=e.sibling}var dc=null,pc=!1;function fc(e,t,n){for(n=n.child;null!==n;)hc(e,t,n),n=n.sibling}function hc(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xs||ec(n,t);case 6:var r=dc,o=pc;dc=null,fc(e,t,n),pc=o,null!==(dc=r)&&(pc?(e=dc,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):dc.removeChild(n.stateNode));break;case 18:null!==dc&&(pc?(e=dc,n=n.stateNode,8===e.nodeType?co(e.parentNode,n):1===e.nodeType&&co(e,n),zt(e)):co(dc,n.stateNode));break;case 4:r=dc,o=pc,dc=n.stateNode.containerInfo,pc=!0,fc(e,t,n),dc=r,pc=o;break;case 0:case 11:case 14:case 15:if(!Xs&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(0!=(2&i)||0!=(4&i))&&tc(n,t,a),o=o.next}while(o!==r)}fc(e,t,n);break;case 1:if(!Xs&&(ec(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Il(n,t,e)}fc(e,t,n);break;case 21:fc(e,t,n);break;case 22:1&n.mode?(Xs=(r=Xs)||null!==n.memoizedState,fc(e,t,n),Xs=r):fc(e,t,n);break;default:fc(e,t,n)}}function _c(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new $s),t.forEach((function(t){var r=Sl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mc(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,s=t,c=s;e:for(;null!==c;){switch(c.tag){case 5:dc=c.stateNode,pc=!1;break e;case 3:case 4:dc=c.stateNode.containerInfo,pc=!0;break e}c=c.return}if(null===dc)throw Error(i(160));hc(a,s,o),dc=null,pc=!1;var l=o.alternate;null!==l&&(l.return=null),o.return=null}catch(e){Il(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)Ec(t,e),t=t.sibling}function Ec(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mc(t,e),yc(e),4&r){try{rc(3,e,e.return),oc(3,e)}catch(t){Il(e,e.return,t)}try{rc(5,e,e.return)}catch(t){Il(e,e.return,t)}}break;case 1:mc(t,e),yc(e),512&r&&null!==n&&ec(n,n.return);break;case 5:if(mc(t,e),yc(e),512&r&&null!==n&&ec(n,n.return),32&e.flags){var o=e.stateNode;try{pe(o,"")}catch(t){Il(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,s=null!==n?n.memoizedProps:a,c=e.type,l=e.updateQueue;if(e.updateQueue=null,null!==l)try{"input"===c&&"radio"===a.type&&null!=a.name&&X(o,a),ge(c,s);var u=ge(c,a);for(s=0;s<l.length;s+=2){var d=l[s],p=l[s+1];"style"===d?me(o,p):"dangerouslySetInnerHTML"===d?de(o,p):"children"===d?pe(o,p):g(o,d,p,u)}switch(c){case"input":$(o,a);break;case"textarea":ie(o,a);break;case"select":var f=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(o,!!a.multiple,h,!1):f!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(t){Il(e,e.return,t)}}break;case 6:if(mc(t,e),yc(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){Il(e,e.return,t)}}break;case 3:if(mc(t,e),yc(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{zt(t.containerInfo)}catch(t){Il(e,e.return,t)}break;case 4:default:mc(t,e),yc(e);break;case 13:mc(t,e),yc(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(zc=Xe())),4&r&&_c(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xs=(u=Xs)||d,mc(t,e),Xs=u):mc(t,e),yc(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&0!=(1&e.mode))for(Js=e,d=e.child;null!==d;){for(p=Js=d;null!==Js;){switch(h=(f=Js).child,f.tag){case 0:case 11:case 14:case 15:rc(4,f,f.return);break;case 1:ec(f,f.return);var _=f.stateNode;if("function"==typeof _.componentWillUnmount){r=f,n=f.return;try{t=r,_.props=t.memoizedProps,_.state=t.memoizedState,_.componentWillUnmount()}catch(e){Il(r,n,e)}}break;case 5:ec(f,f.return);break;case 22:if(null!==f.memoizedState){bc(p);continue}}null!==h?(h.return=f,Js=h):bc(p)}d=d.sibling}e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{o=p.stateNode,u?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(c=p.stateNode,s=null!=(l=p.memoizedProps.style)&&l.hasOwnProperty("display")?l.display:null,c.style.display=_e("display",s))}catch(t){Il(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=u?"":p.memoizedProps}catch(t){Il(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:mc(t,e),yc(e),4&r&&_c(e);case 21:}}function yc(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(sc(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(pe(o,""),r.flags&=-33),uc(e,cc(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;lc(e,cc(e),a);break;default:throw Error(i(161))}}catch(t){Il(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gc(e,t,n){Js=e,vc(e,t,n)}function vc(e,t,n){for(var r=0!=(1&e.mode);null!==Js;){var o=Js,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Zs;if(!a){var s=o.alternate,c=null!==s&&null!==s.memoizedState||Xs;s=Zs;var l=Xs;if(Zs=a,(Xs=c)&&!l)for(Js=o;null!==Js;)c=(a=Js).child,22===a.tag&&null!==a.memoizedState?Tc(o):null!==c?(c.return=a,Js=c):Tc(o);for(;null!==i;)Js=i,vc(i,t,n),i=i.sibling;Js=o,Zs=s,Xs=l}Ac(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,Js=i):Ac(e)}}function Ac(e){for(;null!==Js;){var t=Js;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xs||oc(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xs)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:Ei(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Yi(t,a,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Yi(t,s,n)}break;case 5:var c=t.stateNode;if(null===n&&4&t.flags){n=c;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var p=d.dehydrated;null!==p&&zt(p)}}}break;default:throw Error(i(163))}Xs||512&t.flags&&ic(t)}catch(e){Il(t,t.return,e)}}if(t===e){Js=null;break}if(null!==(n=t.sibling)){n.return=t.return,Js=n;break}Js=t.return}}function bc(e){for(;null!==Js;){var t=Js;if(t===e){Js=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Js=n;break}Js=t.return}}function Tc(e){for(;null!==Js;){var t=Js;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{oc(4,t)}catch(e){Il(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Il(t,o,e)}}var i=t.return;try{ic(t)}catch(e){Il(t,i,e)}break;case 5:var a=t.return;try{ic(t)}catch(e){Il(t,a,e)}}}catch(e){Il(t,t.return,e)}if(t===e){Js=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Js=s;break}Js=t.return}}var Nc,Ic=Math.ceil,Oc=v.ReactCurrentDispatcher,Pc=v.ReactCurrentOwner,Cc=v.ReactCurrentBatchConfig,Sc=0,Rc=null,wc=null,Dc=0,Lc=0,kc=Io(0),Mc=0,Uc=null,xc=0,Fc=0,Yc=0,Vc=null,Hc=null,zc=0,Bc=1/0,Kc=null,jc=!1,Wc=null,Gc=null,Qc=!1,qc=null,Zc=0,Xc=0,$c=null,Jc=-1,el=0;function tl(){return 0!=(6&Sc)?Xe():-1!==Jc?Jc:Jc=Xe()}function nl(e){return 0==(1&e.mode)?1:0!=(2&Sc)&&0!==Dc?Dc&-Dc:null!==mi.transition?(0===el&&(el=_t()),el):0!==(e=gt)?e:e=void 0===(e=window.event)?16:Zt(e.type)}function rl(e,t,n,r){if(50<Xc)throw Xc=0,$c=null,Error(i(185));Et(e,n,r),0!=(2&Sc)&&e===Rc||(e===Rc&&(0==(2&Sc)&&(Fc|=n),4===Mc&&cl(e,Dc)),ol(e,r),1===n&&0===Sc&&0==(1&t.mode)&&(Bc=Xe()+500,Vo&&Bo()))}function ol(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),s=1<<a,c=o[a];-1===c?0!=(s&n)&&0==(s&r)||(o[a]=ft(s,t)):c<=t&&(e.expiredLanes|=s),i&=~s}}(e,t);var r=pt(e,e===Rc?Dc:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Vo=!0,zo(e)}(ll.bind(null,e)):zo(ll.bind(null,e)),ao((function(){0==(6&Sc)&&Bo()})),n=null;else{switch(vt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Rl(n,il.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function il(e,t){if(Jc=-1,el=0,0!=(6&Sc))throw Error(i(327));var n=e.callbackNode;if(Tl()&&e.callbackNode!==n)return null;var r=pt(e,e===Rc?Dc:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=El(e,r);else{t=r;var o=Sc;Sc|=2;var a=_l();for(Rc===e&&Dc===t||(Kc=null,Bc=Xe()+500,fl(e,t));;)try{gl();break}catch(t){hl(e,t)}bi(),Oc.current=a,Sc=o,null!==wc?t=0:(Rc=null,Dc=0,t=Mc)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=al(e,o)),1===t)throw n=Uc,fl(e,0),cl(e,r),ol(e,Xe()),n;if(6===t)cl(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!sr(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=El(e,r))&&0!==(a=ht(e))&&(r=a,t=al(e,a)),1===t))throw n=Uc,fl(e,0),cl(e,r),ol(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:bl(e,Hc,Kc);break;case 3:if(cl(e,r),(130023424&r)===r&&10<(t=zc+500-Xe())){if(0!==pt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tl(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(bl.bind(null,e,Hc,Kc),t);break}bl(e,Hc,Kc);break;case 4:if(cl(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var s=31-at(r);a=1<<s,(s=t[s])>o&&(o=s),r&=~a}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ic(r/1960))-r)){e.timeoutHandle=ro(bl.bind(null,e,Hc,Kc),r);break}bl(e,Hc,Kc);break;default:throw Error(i(329))}}}return ol(e,Xe()),e.callbackNode===n?il.bind(null,e):null}function al(e,t){var n=Vc;return e.current.memoizedState.isDehydrated&&(fl(e,t).flags|=256),2!==(e=El(e,t))&&(t=Hc,Hc=n,null!==t&&sl(t)),e}function sl(e){null===Hc?Hc=e:Hc.push.apply(Hc,e)}function cl(e,t){for(t&=~Yc,t&=~Fc,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function ll(e){if(0!=(6&Sc))throw Error(i(327));Tl();var t=pt(e,0);if(0==(1&t))return ol(e,Xe()),null;var n=El(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=al(e,r))}if(1===n)throw n=Uc,fl(e,0),cl(e,t),ol(e,Xe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,bl(e,Hc,Kc),ol(e,Xe()),null}function ul(e,t){var n=Sc;Sc|=1;try{return e(t)}finally{0===(Sc=n)&&(Bc=Xe()+500,Vo&&Bo())}}function dl(e){null!==qc&&0===qc.tag&&0==(6&Sc)&&Tl();var t=Sc;Sc|=1;var n=Cc.transition,r=gt;try{if(Cc.transition=null,gt=1,e)return e()}finally{gt=r,Cc.transition=n,0==(6&(Sc=t))&&Bo()}}function pl(){Lc=kc.current,Oo(kc)}function fl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==wc)for(n=wc.return;null!==n;){var r=n;switch(ni(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&ko();break;case 3:ia(),Oo(Ro),Oo(So),da();break;case 5:sa(r);break;case 4:ia();break;case 13:case 19:Oo(ca);break;case 10:Ti(r.type._context);break;case 22:case 23:pl()}n=n.return}if(Rc=e,wc=e=kl(e.current,null),Dc=Lc=t,Mc=0,Uc=null,Yc=Fc=xc=0,Hc=Vc=null,null!==Pi){for(t=0;t<Pi.length;t++)if(null!==(r=(n=Pi[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Pi=null}return e}function hl(e,t){for(;;){var n=wc;try{if(bi(),pa.current=as,ya){for(var r=_a.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ya=!1}if(ha=0,Ea=ma=_a=null,ga=!1,va=0,Pc.current=null,null===n||null===n.return){Mc=1,Uc=t,wc=null;break}e:{var a=e,s=n.return,c=n,l=t;if(t=Dc,c.flags|=32768,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l,d=c,p=d.tag;if(0==(1&d.mode)&&(0===p||11===p||15===p)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=Es(s);if(null!==h){h.flags&=-257,ys(h,s,c,0,t),1&h.mode&&ms(a,u,t),l=u;var _=(t=h).updateQueue;if(null===_){var m=new Set;m.add(l),t.updateQueue=m}else _.add(l);break e}if(0==(1&t)){ms(a,u,t),ml();break e}l=Error(i(426))}else if(ii&&1&c.mode){var E=Es(s);if(null!==E){0==(65536&E.flags)&&(E.flags|=256),ys(E,s,c,0,t),_i(us(l,c));break e}}a=l=us(l,c),4!==Mc&&(Mc=2),null===Vc?Vc=[a]:Vc.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,xi(a,hs(0,l,t));break e;case 1:c=l;var y=a.type,g=a.stateNode;if(0==(128&a.flags)&&("function"==typeof y.getDerivedStateFromError||null!==g&&"function"==typeof g.componentDidCatch&&(null===Gc||!Gc.has(g)))){a.flags|=65536,t&=-t,a.lanes|=t,xi(a,_s(a,c,t));break e}}a=a.return}while(null!==a)}Al(n)}catch(e){t=e,wc===n&&null!==n&&(wc=n=n.return);continue}break}}function _l(){var e=Oc.current;return Oc.current=as,null===e?as:e}function ml(){0!==Mc&&3!==Mc&&2!==Mc||(Mc=4),null===Rc||0==(268435455&xc)&&0==(268435455&Fc)||cl(Rc,Dc)}function El(e,t){var n=Sc;Sc|=2;var r=_l();for(Rc===e&&Dc===t||(Kc=null,fl(e,t));;)try{yl();break}catch(t){hl(e,t)}if(bi(),Sc=n,Oc.current=r,null!==wc)throw Error(i(261));return Rc=null,Dc=0,Mc}function yl(){for(;null!==wc;)vl(wc)}function gl(){for(;null!==wc&&!qe();)vl(wc)}function vl(e){var t=Nc(e.alternate,e,Lc);e.memoizedProps=e.pendingProps,null===t?Al(e):wc=t,Pc.current=null}function Al(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Qs(n,t,Lc)))return void(wc=n)}else{if(null!==(n=qs(n,t)))return n.flags&=32767,void(wc=n);if(null===e)return Mc=6,void(wc=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(wc=t);wc=t=e}while(null!==t);0===Mc&&(Mc=5)}function bl(e,t,n){var r=gt,o=Cc.transition;try{Cc.transition=null,gt=1,function(e,t,n,r){do{Tl()}while(null!==qc);if(0!=(6&Sc))throw Error(i(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===Rc&&(wc=Rc=null,Dc=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Qc||(Qc=!0,Rl(tt,(function(){return Tl(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Cc.transition,Cc.transition=null;var s=gt;gt=1;var c=Sc;Sc|=4,Pc.current=null,function(e,t){if(eo=Kt,fr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var s=0,c=-1,l=-1,u=0,d=0,p=e,f=null;t:for(;;){for(var h;p!==n||0!==o&&3!==p.nodeType||(c=s+o),p!==a||0!==r&&3!==p.nodeType||(l=s+r),3===p.nodeType&&(s+=p.nodeValue.length),null!==(h=p.firstChild);)f=p,p=h;for(;;){if(p===e)break t;if(f===n&&++u===o&&(c=s),f===a&&++d===r&&(l=s),null!==(h=p.nextSibling))break;f=(p=f).parentNode}p=h}n=-1===c||-1===l?null:{start:c,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Kt=!1,Js=t;null!==Js;)if(e=(t=Js).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Js=e;else for(;null!==Js;){t=Js;try{var _=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==_){var m=_.memoizedProps,E=_.memoizedState,y=t.stateNode,g=y.getSnapshotBeforeUpdate(t.elementType===t.type?m:Ei(t.type,m),E);y.__reactInternalSnapshotBeforeUpdate=g}break;case 3:var v=t.stateNode.containerInfo;1===v.nodeType?v.textContent="":9===v.nodeType&&v.documentElement&&v.removeChild(v.documentElement);break;default:throw Error(i(163))}}catch(e){Il(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Js=e;break}Js=t.return}_=nc,nc=!1}(e,n),Ec(n,e),hr(to),Kt=!!eo,to=eo=null,e.current=n,gc(n,e,o),Ze(),Sc=c,gt=s,Cc.transition=a}else e.current=n;if(Qc&&(Qc=!1,qc=e,Zc=o),0===(a=e.pendingLanes)&&(Gc=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ol(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(jc)throw jc=!1,e=Wc,Wc=null,e;0!=(1&Zc)&&0!==e.tag&&Tl(),0!=(1&(a=e.pendingLanes))?e===$c?Xc++:(Xc=0,$c=e):Xc=0,Bo()}(e,t,n,r)}finally{Cc.transition=o,gt=r}return null}function Tl(){if(null!==qc){var e=vt(Zc),t=Cc.transition,n=gt;try{if(Cc.transition=null,gt=16>e?16:e,null===qc)var r=!1;else{if(e=qc,qc=null,Zc=0,0!=(6&Sc))throw Error(i(331));var o=Sc;for(Sc|=4,Js=e.current;null!==Js;){var a=Js,s=a.child;if(0!=(16&Js.flags)){var c=a.deletions;if(null!==c){for(var l=0;l<c.length;l++){var u=c[l];for(Js=u;null!==Js;){var d=Js;switch(d.tag){case 0:case 11:case 15:rc(8,d,a)}var p=d.child;if(null!==p)p.return=d,Js=p;else for(;null!==Js;){var f=(d=Js).sibling,h=d.return;if(ac(d),d===u){Js=null;break}if(null!==f){f.return=h,Js=f;break}Js=h}}}var _=a.alternate;if(null!==_){var m=_.child;if(null!==m){_.child=null;do{var E=m.sibling;m.sibling=null,m=E}while(null!==m)}}Js=a}}if(0!=(2064&a.subtreeFlags)&&null!==s)s.return=a,Js=s;else e:for(;null!==Js;){if(0!=(2048&(a=Js).flags))switch(a.tag){case 0:case 11:case 15:rc(9,a,a.return)}var y=a.sibling;if(null!==y){y.return=a.return,Js=y;break e}Js=a.return}}var g=e.current;for(Js=g;null!==Js;){var v=(s=Js).child;if(0!=(2064&s.subtreeFlags)&&null!==v)v.return=s,Js=v;else e:for(s=g;null!==Js;){if(0!=(2048&(c=Js).flags))try{switch(c.tag){case 0:case 11:case 15:oc(9,c)}}catch(e){Il(c,c.return,e)}if(c===s){Js=null;break e}var A=c.sibling;if(null!==A){A.return=c.return,Js=A;break e}Js=c.return}}if(Sc=o,Bo(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{gt=n,Cc.transition=t}}return!1}function Nl(e,t,n){e=Mi(e,t=hs(0,t=us(n,t),1),1),t=tl(),null!==e&&(Et(e,1,t),ol(e,t))}function Il(e,t,n){if(3===e.tag)Nl(e,e,n);else for(;null!==t;){if(3===t.tag){Nl(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Gc||!Gc.has(r))){t=Mi(t,e=_s(t,e=us(n,e),1),1),e=tl(),null!==t&&(Et(t,1,e),ol(t,e));break}}t=t.return}}function Ol(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tl(),e.pingedLanes|=e.suspendedLanes&n,Rc===e&&(Dc&n)===n&&(4===Mc||3===Mc&&(130023424&Dc)===Dc&&500>Xe()-zc?fl(e,0):Yc|=n),ol(e,t)}function Pl(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=tl();null!==(e=Ri(e,t))&&(Et(e,t,n),ol(e,n))}function Cl(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Pl(e,n)}function Sl(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),Pl(e,n)}function Rl(e,t){return Ge(e,t)}function wl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Dl(e,t,n,r){return new wl(e,t,n,r)}function Ll(e){return!(!(e=e.prototype)||!e.isReactComponent)}function kl(e,t){var n=e.alternate;return null===n?((n=Dl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ml(e,t,n,r,o,a){var s=2;if(r=e,"function"==typeof e)Ll(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case T:return Ul(n.children,o,a,t);case N:s=8,o|=8;break;case I:return(e=Dl(12,n,t,2|o)).elementType=I,e.lanes=a,e;case S:return(e=Dl(13,n,t,o)).elementType=S,e.lanes=a,e;case R:return(e=Dl(19,n,t,o)).elementType=R,e.lanes=a,e;case L:return xl(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:s=10;break e;case P:s=9;break e;case C:s=11;break e;case w:s=14;break e;case D:s=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Dl(s,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Ul(e,t,n,r){return(e=Dl(7,e,r,t)).lanes=n,e}function xl(e,t,n,r){return(e=Dl(22,e,r,t)).elementType=L,e.lanes=n,e.stateNode={isHidden:!1},e}function Fl(e,t,n){return(e=Dl(6,e,null,t)).lanes=n,e}function Yl(e,t,n){return(t=Dl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vl(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Hl(e,t,n,r,o,i,a,s,c){return e=new Vl(e,t,n,s,c),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Dl(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Di(i),e}function zl(e){if(!e)return Co;e:{if(ze(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Lo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(Lo(n))return Uo(e,n,t)}return t}function Bl(e,t,n,r,o,i,a,s,c){return(e=Hl(n,r,!0,e,0,i,0,s,c)).context=zl(null),n=e.current,(i=ki(r=tl(),o=nl(n))).callback=null!=t?t:null,Mi(n,i,o),e.current.lanes=o,Et(e,o,r),ol(e,r),e}function Kl(e,t,n,r){var o=t.current,i=tl(),a=nl(o);return n=zl(n),null===t.context?t.context=n:t.pendingContext=n,(t=ki(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Mi(o,t,a))&&(rl(e,o,a,i),Ui(e,o,a)),a}function jl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Gl(e,t){Wl(e,t),(e=e.alternate)&&Wl(e,t)}Nc=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ro.current)vs=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return vs=!1,function(e,t,n){switch(t.tag){case 3:Rs(t),hi();break;case 5:aa(t);break;case 1:Lo(t.type)&&xo(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Po(yi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Po(ca,1&ca.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Fs(e,t,n):(Po(ca,1&ca.current),null!==(e=js(e,t,n))?e.sibling:null);Po(ca,1&ca.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Bs(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Po(ca,ca.current),r)break;return null;case 22:case 23:return t.lanes=0,Is(e,t,n)}return js(e,t,n)}(e,t,n);vs=0!=(131072&e.flags)}else vs=!1,ii&&0!=(1048576&t.flags)&&ei(t,Go,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ks(e,t),e=t.pendingProps;var o=Do(t,So.current);Ii(t,n),o=Na(null,t,r,e,o,n);var a=Ia();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Lo(r)?(a=!0,xo(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Di(t),o.updater=zi,t.stateNode=o,o._reactInternals=t,Wi(t,r,e,n),t=Ss(null,t,r,!0,a,n)):(t.tag=0,ii&&a&&ti(t),As(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ks(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ll(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===w)return 14}return 2}(r),e=Ei(r,e),o){case 0:t=Ps(null,t,r,e,n);break e;case 1:t=Cs(null,t,r,e,n);break e;case 11:t=bs(null,t,r,e,n);break e;case 14:t=Ts(null,t,r,Ei(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ps(e,t,r,o=t.elementType===r?o:Ei(r,o),n);case 1:return r=t.type,o=t.pendingProps,Cs(e,t,r,o=t.elementType===r?o:Ei(r,o),n);case 3:e:{if(Rs(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,Li(e,t),Fi(t,r,null,n);var s=t.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=ws(e,t,r,n,o=us(Error(i(423)),t));break e}if(r!==o){t=ws(e,t,r,n,o=us(Error(i(424)),t));break e}for(oi=lo(t.stateNode.containerInfo.firstChild),ri=t,ii=!0,ai=null,n=$i(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hi(),r===o){t=js(e,t,n);break e}As(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&ui(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,s=o.children,no(r,o)?s=null:null!==a&&no(r,a)&&(t.flags|=32),Os(e,t),As(e,t,s,n),t.child;case 6:return null===e&&ui(t),null;case 13:return Fs(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xi(t,null,r,n):As(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,bs(e,t,r,o=t.elementType===r?o:Ei(r,o),n);case 7:return As(e,t,t.pendingProps,n),t.child;case 8:case 12:return As(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,s=o.value,Po(yi,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===o.children&&!Ro.current){t=js(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var c=a.dependencies;if(null!==c){s=a.child;for(var l=c.firstContext;null!==l;){if(l.context===r){if(1===a.tag){(l=ki(-1,n&-n)).tag=2;var u=a.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?l.next=l:(l.next=d.next,d.next=l),u.pending=l}}a.lanes|=n,null!==(l=a.alternate)&&(l.lanes|=n),Ni(a.return,n,t),c.lanes|=n;break}l=l.next}}else if(10===a.tag)s=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(i(341));s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),Ni(s,n,t),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===t){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}As(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ii(t,n),r=r(o=Oi(o)),t.flags|=1,As(e,t,r,n),t.child;case 14:return o=Ei(r=t.type,t.pendingProps),Ts(e,t,r,o=Ei(r.type,o),n);case 15:return Ns(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ei(r,o),Ks(e,t),t.tag=1,Lo(r)?(e=!0,xo(t)):e=!1,Ii(t,n),Ki(t,r,o),Wi(t,r,o,n),Ss(null,t,r,!0,e,n);case 19:return Bs(e,t,n);case 22:return Is(e,t,n)}throw Error(i(156,t.tag))};var Ql="function"==typeof reportError?reportError:function(e){console.error(e)};function ql(e){this._internalRoot=e}function Zl(e){this._internalRoot=e}function Xl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function $l(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jl(){}function eu(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var s=o;o=function(){var e=jl(a);s.call(e)}}Kl(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=jl(a);i.call(e)}}var a=Bl(t,r,e,0,null,!1,0,"",Jl);return e._reactRootContainer=a,e[_o]=a.current,zr(8===e.nodeType?e.parentNode:e),dl(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var s=r;r=function(){var e=jl(c);s.call(e)}}var c=Hl(e,0,!1,null,0,!1,0,"",Jl);return e._reactRootContainer=c,e[_o]=c.current,zr(8===e.nodeType?e.parentNode:e),dl((function(){Kl(t,c,n,r)})),c}(n,t,e,o,r);return jl(a)}Zl.prototype.render=ql.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Kl(e,t,null,null)},Zl.prototype.unmount=ql.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;dl((function(){Kl(null,e,null,null)})),t[_o]=null}},Zl.prototype.unstable_scheduleHydration=function(e){if(e){var t=Nt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Lt.length&&0!==t&&t<Lt[n].priority;n++);Lt.splice(n,0,e),0===n&&xt(e)}},At=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),ol(t,Xe()),0==(6&Sc)&&(Bc=Xe()+500,Bo()))}break;case 13:dl((function(){var t=Ri(e,1);if(null!==t){var n=tl();rl(t,e,1,n)}})),Gl(e,1)}},bt=function(e){if(13===e.tag){var t=Ri(e,134217728);null!==t&&rl(t,e,134217728,tl()),Gl(e,134217728)}},Tt=function(e){if(13===e.tag){var t=nl(e),n=Ri(e,t);null!==n&&rl(n,e,t,tl()),Gl(e,t)}},Nt=function(){return gt},It=function(e,t){var n=gt;try{return gt=e,t()}finally{gt=n}},be=function(e,t,n){switch(t){case"input":if($(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=bo(r);if(!o)throw Error(i(90));G(r),$(r,o)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ce=ul,Se=dl;var tu={usingClientEntryPoint:!1,Events:[vo,Ao,bo,Oe,Pe,ul]},nu={findFiberByHostInstance:go,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ru={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:v.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=je(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ou=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ou.isDisabled&&ou.supportsFiber)try{ot=ou.inject(ru),it=ou}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xl(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:b,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xl(e))throw Error(i(299));var n=!1,r="",o=Ql;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Hl(e,1,!1,null,0,n,0,r,o),e[_o]=t.current,zr(8===e.nodeType?e.parentNode:e),new ql(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=je(t))?null:e.stateNode},t.flushSync=function(e){return dl(e)},t.hydrate=function(e,t,n){if(!$l(t))throw Error(i(200));return eu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xl(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",s=Ql;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Bl(t,null,e,1,null!=n?n:null,o,0,a,s),e[_o]=t.current,zr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Zl(t)},t.render=function(e,t,n){if(!$l(t))throw Error(i(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!$l(e))throw Error(i(40));return!!e._reactRootContainer&&(dl((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[_o]=null}))})),!0)},t.unstable_batchedUpdates=ul,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!$l(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return eu(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},338:(e,t,n)=>{"use strict";var r=n(961);t.H=r.createRoot,r.hydrateRoot},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),c=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_=Object.assign,m={};function E(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}E.prototype.isReactComponent={},E.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},E.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=E.prototype;var v=g.prototype=new y;v.constructor=g,_(v,E.prototype),v.isPureReactComponent=!0;var A=Array.isArray,b=Object.prototype.hasOwnProperty,T={current:null},N={key:!0,ref:!0,__self:!0,__source:!0};function I(e,t,r){var o,i={},a=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)b.call(t,o)&&!N.hasOwnProperty(o)&&(i[o]=t[o]);var c=arguments.length-2;if(1===c)i.children=r;else if(1<c){for(var l=Array(c),u=0;u<c;u++)l[u]=arguments[u+2];i.children=l}if(e&&e.defaultProps)for(o in c=e.defaultProps)void 0===i[o]&&(i[o]=c[o]);return{$$typeof:n,type:e,key:a,ref:s,props:i,_owner:T.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function S(e,t,o,i,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var c=!1;if(null===e)c=!0;else switch(s){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0}}if(c)return a=a(c=e),e=""===i?"."+C(c,0):i,A(a)?(o="",null!=e&&(o=e.replace(P,"$&/")+"/"),S(a,t,o,"",(function(e){return e}))):null!=a&&(O(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||c&&c.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+e)),t.push(a)),1;if(c=0,i=""===i?".":i+":",A(e))for(var l=0;l<e.length;l++){var u=i+C(s=e[l],l);c+=S(s,t,o,u,a)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),l=0;!(s=e.next()).done;)c+=S(s=s.value,t,o,u=i+C(s,l++),a);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return c}function R(e,t,n){if(null==e)return e;var r=[],o=0;return S(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function w(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var D={current:null},L={transition:null},k={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:L,ReactCurrentOwner:T};t.Children={map:R,forEach:function(e,t,n){R(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return R(e,(function(){t++})),t},toArray:function(e){return R(e,(function(e){return e}))||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=E,t.Fragment=o,t.Profiler=a,t.PureComponent=g,t.StrictMode=i,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=k,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=_({},e.props),i=e.key,a=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=T.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(l in t)b.call(t,l)&&!N.hasOwnProperty(l)&&(o[l]=void 0===t[l]&&void 0!==c?c[l]:t[l])}var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){c=Array(l);for(var u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}return{$$typeof:n,type:e.type,key:i,ref:a,props:o,_owner:s}},t.createContext=function(e){return(e={$$typeof:c,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=I,t.createFactory=function(e){var t=I.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:w}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=L.transition;L.transition={};try{e()}finally{L.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return D.current.useCallback(e,t)},t.useContext=function(e){return D.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return D.current.useDeferredValue(e)},t.useEffect=function(e,t){return D.current.useEffect(e,t)},t.useId=function(){return D.current.useId()},t.useImperativeHandle=function(e,t,n){return D.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return D.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return D.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return D.current.useMemo(e,t)},t.useReducer=function(e,t,n){return D.current.useReducer(e,t,n)},t.useRef=function(e){return D.current.useRef(e)},t.useState=function(e){return D.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return D.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return D.current.useTransition()},t.version="18.2.0"},540:(e,t,n)=>{"use strict";e.exports=n(287)},463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var s=2*(r+1)-1,c=e[s],l=s+1,u=e[l];if(0>i(c,n))l<o&&0>i(u,c)?(e[r]=u,e[l]=n,r=l):(e[r]=c,e[s]=n,r=s);else{if(!(l<o&&0>i(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,c=s.now();t.unstable_now=function(){return s.now()-c}}var l=[],u=[],d=1,p=null,f=3,h=!1,_=!1,m=!1,E="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,g="undefined"!=typeof setImmediate?setImmediate:null;function v(e){for(var t=r(u);null!==t;){if(null===t.callback)o(u);else{if(!(t.startTime<=e))break;o(u),t.sortIndex=t.expirationTime,n(l,t)}t=r(u)}}function A(e){if(m=!1,v(e),!_)if(null!==r(l))_=!0,L(b);else{var t=r(u);null!==t&&k(A,t.startTime-e)}}function b(e,n){_=!1,m&&(m=!1,y(O),O=-1),h=!0;var i=f;try{for(v(n),p=r(l);null!==p&&(!(p.expirationTime>n)||e&&!S());){var a=p.callback;if("function"==typeof a){p.callback=null,f=p.priorityLevel;var s=a(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?p.callback=s:p===r(l)&&o(l),v(n)}else o(l);p=r(l)}if(null!==p)var c=!0;else{var d=r(u);null!==d&&k(A,d.startTime-n),c=!1}return c}finally{p=null,f=i,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var T,N=!1,I=null,O=-1,P=5,C=-1;function S(){return!(t.unstable_now()-C<P)}function R(){if(null!==I){var e=t.unstable_now();C=e;var n=!0;try{n=I(!0,e)}finally{n?T():(N=!1,I=null)}}else N=!1}if("function"==typeof g)T=function(){g(R)};else if("undefined"!=typeof MessageChannel){var w=new MessageChannel,D=w.port2;w.port1.onmessage=R,T=function(){D.postMessage(null)}}else T=function(){E(R,0)};function L(e){I=e,N||(N=!0,T())}function k(e,n){O=E((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){_||h||(_=!0,L(b))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(l)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>a?(e.sortIndex=i,n(u,e),null===r(l)&&e===r(u)&&(m?(y(O),O=-1):m=!0,k(A,i-a))):(e.sortIndex=s,n(l,e),_||h||(_=!0,L(b))),e},t.unstable_shouldYield=S,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},982:(e,t,n)=>{"use strict";e.exports=n(463)}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var r={};(()=>{"use strict";n.d(r,{E:()=>$});var e=n(540),t=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},o=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},i="/checkout",a="/primer",s=function(){function e(e,t){this.headers={},this.clientSetting=e,this.headers=t||{}}return e.prototype.setHeaders=function(e){this.headers=e},e.prototype.post=function(e,n,r){return t(this,void 0,void 0,(function(){var t;return o(this,(function(o){switch(o.label){case 0:return(t=r||this.headers)["Content-Type"]="application/json",t["x-api-key"]=this.clientSetting.apiKey,[4,fetch(this.clientSetting.apiEndpoint+e,{method:"POST",headers:t,body:JSON.stringify(n)})];case 1:return[2,o.sent().json()]}}))}))},e.prototype.getPricePoints=function(e){return t(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.post("/showcase/get-price-points",e)];case 1:return[2,t.sent()]}}))}))},e.prototype.createClientSession=function(e){return this.post("".concat(i,"/create-client-session"),e)},e.prototype.updateClientSession=function(e){return t(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.post("".concat(a,"/update-client-session"),e)];case 1:return[2,t.sent()]}}))}))},e.prototype.startCheckout=function(e){return t(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.post("".concat(i,"/on-start"),e)];case 1:return[2,t.sent()]}}))}))},e.prototype.createPayment=function(e){return t(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.post("".concat(i,"/create-payment"),e)];case 1:return[2,t.sent()]}}))}))},e.prototype.resumePayment=function(e){return t(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.post("".concat(i,"/resume-payment"),e)];case 1:return[2,t.sent()]}}))}))},e.prototype.onSuccessCheckout=function(e){return t(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.post("".concat(i,"/on-success"),e)];case 1:return[2,t.sent()]}}))}))},e.prototype.onFailCheckout=function(e){return t(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.post("".concat(i,"/on-fail"),e)];case 1:return[2,t.sent()]}}))}))},e.prototype.logEvent=function(e,n,r,i){return t(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.post("".concat(a,"/log-event"),{level:e,eventName:n,data:r,headers:i})];case 1:return[2,t.sent()]}}))}))},e}();const c={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let l;const u=new Uint8Array(16);function d(){if(!l&&(l="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!l))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return l(u)}const p=[];for(let e=0;e<256;++e)p.push((e+256).toString(16).slice(1));const f=function(e,t,n){if(c.randomUUID&&!t&&!e)return c.randomUUID();const r=(e=e||{}).random||(e.rng||d)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=r[e];return t}return function(e,t=0){return p[e[t+0]]+p[e[t+1]]+p[e[t+2]]+p[e[t+3]]+"-"+p[e[t+4]]+p[e[t+5]]+"-"+p[e[t+6]]+p[e[t+7]]+"-"+p[e[t+8]]+p[e[t+9]]+"-"+p[e[t+10]]+p[e[t+11]]+p[e[t+12]]+p[e[t+13]]+p[e[t+14]]+p[e[t+15]]}(r)};var h,_,m,E,y,g,v,A,b=(h=function(e,t){return h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},h(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}h(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),T=function(e){function t(t){var n=e.call(this)||this;return n.data=t,n}return b(t,e),t}(Error),N=function(){return N=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},N.apply(this,arguments)},I=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},O=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},P=function(){function e(e,t,n,r){this.clientSetting=e,this.formSettings=t,this.api=n,this.checkoutTraceId=r||null}return e.prototype.prepareError=function(e,t){return e&&e instanceof Error?{error:JSON.parse(JSON.stringify(e,Object.getOwnPropertyNames(e))),data:t}:{error:"Can't serialize error",data:t}},e.prototype.getTrace=function(e){return[e.get("x-paltabrain-trace-id"),e.get("x-paltabrain-request-id")]},e.prototype.logErrorEvent=function(e,t,n){return I(this,void 0,void 0,(function(){return O(this,(function(r){switch(r.label){case 0:return[4,this.api.logEvent("error",e,t,n)];case 1:return r.sent(),[2]}}))}))},e.prototype.notifyPaymentStatusChange=function(e,t){return I(this,void 0,void 0,(function(){var n;return O(this,(function(r){switch(r.label){case 0:return r.trys.push([0,3,,5]),this.clientSetting.onPaymentStatusChange?[4,this.clientSetting.onPaymentStatusChange(e,t)]:[3,2];case 1:r.sent(),r.label=2;case 2:return[3,5];case 3:return n=r.sent(),[4,this.logErrorEvent("on_payment_status_change_error",this.prepareError(n))];case 4:return r.sent(),[3,5];case 5:return[2]}}))}))},e.prototype.notifyError=function(e,t){return I(this,void 0,void 0,(function(){var n;return O(this,(function(r){switch(r.label){case 0:return r.trys.push([0,3,,5]),this.clientSetting.onError?[4,this.clientSetting.onError(e,t)]:[3,2];case 1:r.sent(),r.label=2;case 2:return[3,5];case 3:return n=r.sent(),[4,this.logErrorEvent("on_error",this.prepareError(n))];case 4:return r.sent(),[3,5];case 5:return[2]}}))}))},e.prototype.onBeforePaymentCreate=function(e,t){return I(this,void 0,void 0,(function(){var n,r,o,i,a,s,c,l;return O(this,(function(u){switch(u.label){case 0:return n=e.paymentMethodType,[4,this.notifyPaymentStatusChange("PENDING",n)];case 1:u.sent(),r={orderId:this.formSettings.orderId},u.label=2;case 2:return u.trys.push([2,10,,14]),[4,this.api.startCheckout(r)];case 3:return[4,(o=u.sent()).json()];case 4:return i=u.sent(),a=this.getTrace(o.headers),s=a[0],c=a[1],"success"!=(null==i?void 0:i.status)?[3,5]:[2,t.continuePaymentCreation()];case 5:return[4,this.logErrorEvent("cant_start_checkout",this.prepareError(Error("cant_start_checkout"),{paltabrain_trace_id:s,paltabrain_request_id:c,request:r,response:i}))];case 6:return u.sent(),[4,this.notifyPaymentStatusChange("ERROR",n)];case 7:return u.sent(),[4,this.notifyError(new T(i),"Can not start checkout")];case 8:return u.sent(),[2,t.abortPaymentCreation()];case 9:return[3,14];case 10:return l=u.sent(),[4,this.logErrorEvent("cant_start_checkout",this.prepareError(l,{request:r}))];case 11:return u.sent(),[4,this.notifyPaymentStatusChange("ERROR",n)];case 12:return u.sent(),[4,this.notifyError(l,"Can not start checkout")];case 13:return u.sent(),[2,t.abortPaymentCreation()];case 14:return[2]}}))}))},e.prototype.onCheckoutComplete=function(e){var t;return I(this,void 0,void 0,(function(){var n,r,o,i,a,s,c,l,u;return O(this,(function(d){switch(d.label){case 0:n={orderId:this.formSettings.orderId},r=null===(t=e.payment.paymentMethodData)||void 0===t?void 0:t.paymentMethodType,d.label=1;case 1:return d.trys.push([1,10,,14]),[4,this.api.onSuccessCheckout(n)];case 2:return[4,(o=d.sent()).json()];case 3:return i=d.sent(),a=null==i?void 0:i.status,s=this.getTrace(o.headers),c=s[0],l=s[1],"success"!=a?[3,5]:[4,this.notifyPaymentStatusChange("COMPLETE",r)];case 4:return d.sent(),[3,9];case 5:return[4,this.notifyPaymentStatusChange("ERROR",r)];case 6:return d.sent(),[4,this.notifyError(new T(i),"Can not complete checkout")];case 7:return d.sent(),[4,this.logErrorEvent("on_checkout_complete_error",this.prepareError(Error("on_checkout_complete_error"),{paltabrain_trace_id:c,paltabrain_request_id:l,request:n,response:i}))];case 8:d.sent(),d.label=9;case 9:return[3,14];case 10:return u=d.sent(),[4,this.notifyPaymentStatusChange("ERROR",r)];case 11:return d.sent(),[4,this.notifyError(u,"Can not complete checkout")];case 12:return d.sent(),[4,this.logErrorEvent("on_checkout_complete_error",this.prepareError(u,{request:n,response:e}))];case 13:return d.sent(),[3,14];case 14:return[2]}}))}))},e.prototype.onCheckoutFail=function(e,t,n){var r,o;return I(this,void 0,void 0,(function(){var i,a,s;return O(this,(function(c){switch(c.label){case 0:i={orderId:this.formSettings.orderId},a=null===(o=null===(r=t.payment)||void 0===r?void 0:r.paymentMethodData)||void 0===o?void 0:o.paymentMethodType,c.label=1;case 1:return c.trys.push([1,5,,7]),[4,this.api.onFailCheckout(i)];case 2:return c.sent(),[4,this.notifyPaymentStatusChange("FAIL",a)];case 3:return c.sent(),[4,this.notifyError(e,"Checkout failed")];case 4:return c.sent(),[3,7];case 5:return s=c.sent(),[4,this.logErrorEvent("on_checkout_fail_error",this.prepareError(s,N({},i)))];case 6:return c.sent(),[3,7];case 7:return n?[2,n.showErrorMessage()]:[2]}}))}))},e}(),C=n(293);!function(e){e.card="card",e.paypal="paypal",e.apple_pay="apple_pay",e.google_pay="google_pay"}(_||(_={})),function(e){e.Primer="primer",e.Braintree="braintree"}(m||(m={})),function(e){e.processing="processing",e.completed="completed",e.failed="failed",e.cancelled="cancelled"}(E||(E={})),function(e){e.Authorize="authorize",e.Order="order",e.Capture="capture"}(y||(y={})),function(e){e.Vault="vault",e.Checkout="checkout"}(g||(g={})),function(e){e.Small="small",e.Medium="medium",e.Large="large",e.Responsive="responsive"}(v||(v={})),function(e){e.success="success",e.error="error"}(A||(A={}));var S=function(){return S=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},S.apply(this,arguments)},R=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},w=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},D=n(74),L=n.n(D),k=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},M=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},U=function(e){return L().dataCollector.create({client:e,kount:!0})},x=function(e){return k(void 0,void 0,void 0,(function(){return M(this,(function(t){return[2,L().paypalCheckout.create({client:e})]}))}))},F=function(e,t,n,r){return k(void 0,void 0,void 0,(function(){var o,i,a,s;return M(this,(function(c){switch(c.label){case 0:return o=document.getElementById("payment-status"),i=localStorage.getItem("currency")||void 0,a=localStorage.getItem("amount"),s=a?JSON.parse(a):void 0,[4,e.loadPayPalSDK({currency:i,intent:"capture"},(function(){var a=this;paypal.Buttons({fundingSource:"paypal",env:"sandbox",style:{size:v.Responsive,height:40},createOrder:function(){return e.createPayment({flow:g.Checkout,amount:s,currency:i,intent:y.Capture,requestBillingAgreement:!0,billingAgreementDescription:"Description of the billing agreement to display to the customer"})},onApprove:function(i){return k(a,void 0,void 0,(function(){var a,s;return M(this,(function(c){switch(c.label){case 0:return c.trys.push([0,3,,4]),[4,e.tokenizePayment(i)];case 1:return a=c.sent(),console.log("Got a nonce:",a.nonce),[4,n.createPayment({integrationType:m.Braintree,paymentToken:a.nonce,orderId:r,deviceData:t})];case 2:return c.sent().status===A.success?(document.getElementById("braintree-checkout-container").style.display="none",o.style.display="flex"):(document.getElementById("braintree-checkout-container").style.display="none",o.innerHTML="<div>Payment failed. Please try again.</div>"),[3,4];case 3:return s=c.sent(),document.getElementById("braintree-checkout-container").style.display="none",o.innerHTML="<div >Payment failed. Please try again.</div>",console.error("Error:",s),[3,4];case 4:return[2]}}))}))},onCancel:function(e){console.log("Checkout cancelled",e)},onError:function(e){document.getElementById("braintree-checkout-container").style.display="none",o.style.display="flex",o.innerHTML="<div >Payment failed. Please try again.</div>",console.error("Error:",e)}}).render("#paypal-button")}))];case 1:return c.sent(),[2]}}))}))},Y=function(e){return k(void 0,void 0,void 0,(function(){return M(this,(function(t){return[2,L().hostedFields.create({client:e,styles:{input:{"font-size":"14px","font-family":"Arial, sans-serif"},":focus":{color:"black"}},fields:{number:{selector:"#card-number",placeholder:"4111 1111 1111 1111"},cvv:{selector:"#cvv",placeholder:"123"},expirationDate:{selector:"#expiration-date",placeholder:"MM/YYYY"}}})]}))}))},V=function(e){var t=e.hostedFieldsInstance,n=(e.deviceData,e.api),r=e.orderId;return k(void 0,void 0,void 0,(function(){var e,o;return M(this,(function(i){return e=document.getElementById("card-button"),o=document.getElementById("payment-status"),null==e||e.addEventListener("click",(function(){return k(void 0,void 0,void 0,(function(){var i,a,s,c,l;return M(this,(function(u){switch(u.label){case 0:e.disabled=!0,e.innerText="Loading...",e.style.cursor="default",e.style.opacity="0.5",u.label=1;case 1:return u.trys.push([1,4,5,6]),[4,t.tokenize()];case 2:return i=u.sent(),a=i.nonce,s=i.details,console.log("Details",s),c={integrationType:m.Braintree,paymentToken:a,orderId:r},[4,n.createPayment(c)];case 3:return u.sent().status===A.success?(document.getElementById("braintree-checkout-container").style.display="none",document.getElementById("payment-status").style.display="flex"):(o.style.display="flex",o.innerHTML="<div>Payment failed. Please try again.</div>"),[3,6];case 4:return l=u.sent(),console.error("Error tokenizing card:",l),o.style.display="flex",o.innerHTML="<div>Payment failed. Please try again.</div>",[3,6];case 5:return e.disabled=!1,e.innerText="Pay with Card",[7];case 6:return[2]}}))}))})),[2]}))}))},H=function(){return H=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},H.apply(this,arguments)},z=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},B=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},K=function(){function e(e,t){this.clientSettings=e,this.customerId=t,this.api=new s(e),this.clientToken=void 0,this.checkout=null,this.reCaptchaReady=!1,this.checkoutTraceId=null}return e.prototype.generateCheckoutTraceId=function(){this.checkoutTraceId=f()},e.prototype.loadReCaptchaScript=function(e,t){var n=this;if(window.grecaptcha)return console.log("reCAPTCHA already loaded"),void(t&&t());var r=this.clientSettings.reCaptchaSiteKey;if(!r)return console.warn("reCapchaSiteKey is not set"),void(t&&t());var o=document.createElement("script");o.src="https://www.google.com/recaptcha/enterprise.js?render=".concat(r),o.async=!0,o.onerror=function(){console.warn("Failed to load reCAPTCHA script"),t&&t()},o.onload=function(){grecaptcha?grecaptcha.enterprise.ready((function(){n.reCaptchaReady=!0,e&&e()})):t&&t()},document.head.appendChild(o)},e.prototype.generateReCaptchaToken=function(e){return z(this,void 0,void 0,(function(){var t;return B(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,grecaptcha.enterprise.execute(e,{action:"create_client_session"})];case 1:return[2,n.sent()];case 2:return t=n.sent(),console.error("Failed to generate reCAPTCHA token:",t),[2,null];case 3:return[2]}}))}))},e.prototype.getPricePoints=function(e){return z(this,void 0,void 0,(function(){var t,n,r,o,i;return B(this,(function(a){switch(a.label){case 0:return[4,this.api.getPricePoints(e)];case 1:for(t=a.sent(),n=t.pricePoints,r=0,o=n;r<o.length;r++)(i=o[r]).product=t.products[i.productSku];return[2,n]}}))}))},e.prototype.showPaymentForm=function(e){var t,n,r,o=e.settings,i=e.primerOption,a=(e.braintreeOption,e.clientToken),s=e.manualPayments;return z(this,void 0,void 0,(function(){var e,c,l,u,d,p,f,h,E,y;return B(this,(function(g){switch(g.label){case 0:return this.generateCheckoutTraceId(),this.api.setHeaders({"x-checkout-trace-id":this.checkoutTraceId||""}),c=H({},o),l=a,this.clientSettings.reCaptchaEnabled&&this.clientSettings.reCaptchaSiteKey&&this.reCaptchaReady?[4,this.generateReCaptchaToken(this.clientSettings.reCaptchaSiteKey)]:[3,2];case 1:e=g.sent(),g.label=2;case 2:return u=H(H(H(H(H({customer:c.customer,pricePointIdent:c.ident},c.countryCode?{countryCode:c.countryCode}:{}),c.platformCode?{platformCode:c.platformCode}:{}),c.metadata?{metadata:c.metadata}:{}),c.orderId?{orderId:c.orderId}:{}),e?{recaptchaToken:e}:{}),[4,this.api.createClientSession(u)];case 3:return d=g.sent(),l||(l=null===(t=d.primer)||void 0===t?void 0:t.clientToken),p=null===(n=d.braintree)||void 0===n?void 0:n.clientToken,c.orderId=c.orderId?c.orderId:d.orderId,f=new P(this.clientSettings,c,this.api),h=H(H({},i),{onBeforePaymentCreate:f.onBeforePaymentCreate.bind(f),onCheckoutComplete:f.onCheckoutComplete.bind(f),onCheckoutFail:f.onCheckoutFail.bind(f)}),E=l?function(e){var t=e.primerClientToken,n=e.checkoutOptions,r=e.manualPayments,o=e.api,i=e.orderId;return R(void 0,void 0,void 0,(function(){var e,a;return w(this,(function(s){switch(s.label){case 0:return e="",a=C.Primer.showUniversalCheckout(t,S(S({},n),{container:"#primer-checkout-container",paymentHandling:r?"MANUAL":null,vault:{visible:!1},onTokenizeSuccess:function(t,n){return R(void 0,void 0,void 0,(function(){var r,a;return w(this,(function(s){switch(s.label){case 0:return r={integrationType:m.Primer,paymentToken:t.token,orderId:i},[4,o.createPayment(r)];case 1:return a=s.sent(),e=a.integrationPaymentId,a?a.requiredAction?[2,n.continueWithNewClientToken(a.requiredAction.clientToken)]:[2,n.handleSuccess()]:[2,n.handleFailure("The payment failed. Please try with another payment method.")]}}))}))},onResumeSuccess:function(t,n){return R(void 0,void 0,void 0,(function(){var r,i;return w(this,(function(a){switch(a.label){case 0:return r={integrationType:m.Primer,paymentToken:t.resumeToken,orderId:e},[4,o.resumePayment(r)];case 1:return(i=a.sent())?i.requiredAction?[2,n.continueWithNewClientToken(i.requiredAction.clientToken)]:[2,n.handleSuccess()]:[2,n.handleFailure("The payment failed. Please try with another payment method.")]}}))}))}})),[4,a];case 1:return[2,s.sent()]}}))}))}({primerClientToken:l,checkoutOptions:h,manualPayments:s,api:this.api,orderId:c.orderId}):null,y=p?function(e){var t=e.braintreeClientToken,n=e.orderId,r=e.api;return k(void 0,void 0,void 0,(function(){var e,o,i,a,s,c,l;return M(this,(function(u){switch(u.label){case 0:return u.trys.push([0,9,,10]),[4,L().client.create({authorization:t})];case 1:return e=u.sent(),[4,U(e)];case 2:return o=u.sent(),i=o.deviceData,(a=Object.values(_)).includes(_.paypal)?(document.getElementById("paypal-button").style.display="block",[4,x(e)]):[3,5];case 3:return s=u.sent(),[4,F(s,i,r,n)];case 4:u.sent(),u.label=5;case 5:return a.includes(_.card)?(document.getElementById("card-container").style.display="block",[4,Y(e)]):[3,8];case 6:return c=u.sent(),[4,V({hostedFieldsInstance:c,deviceData:i,api:r,orderId:n})];case 7:u.sent(),u.label=8;case 8:return[3,10];case 9:throw l=u.sent(),console.error("Error initializing Braintree:",l),l;case 10:return[2]}}))}))}({braintreeClientToken:p,paymentMethods:null===(r=d.braintree)||void 0===r?void 0:r.paymentMethods,orderId:c.orderId,api:this.api}):null,E||y?[4,Promise.all([y,E].filter(Boolean))]:[3,5];case 4:g.sent(),document.getElementById("preparation-form").style.display="none",document.getElementById("payment-container").style.display="block",g.label=5;case 5:return[2,null]}}))}))},e.prototype.updatePaymentForm=function(e){var t;return z(this,void 0,void 0,(function(){return B(this,(function(n){switch(n.label){case 0:return[4,this.api.updateClientSession({customerId:e.customerId,orderId:e.orderId,ident:e.ident,countryCode:e.countryCode,platformCode:e.platformCode,metadata:this.clientSettings.metadata,customer:e.customer,clientToken:this.clientToken})];case 1:return n.sent(),[4,null===(t=this.checkout)||void 0===t?void 0:t.refreshClientSession()];case 2:return n.sent(),[2]}}))}))},e}(),j=n(338),W=function(){return e.createElement("div",{id:"braintree-checkout-container"},e.createElement("p",{className:"lead",style:{fontFamily:"Arial",textAlign:"center",fontSize:"1.25rem",fontWeight:"300",color:"#212529"}},"Braintree"),e.createElement("div",{id:"paypal-button",style:{display:"none"}}),e.createElement("div",{id:"card-container",style:{display:"none"}},e.createElement("div",{style:{marginBottom:"1rem"}},e.createElement("div",{style:{marginBottom:"7px"}},"Card Number"),e.createElement("div",{style:{height:"30px",padding:"0.375rem 0.75rem",fontSize:"1rem",fontWeight:"400",lineHeight:"1.5",border:"1px solid #dee2e6",borderRadius:"5px",transition:"border-color .15s ease-in-out,box-shadow .15s ease-in-out"},id:"card-number"})),e.createElement("div",{style:{marginBottom:"1rem"}},e.createElement("div",{style:{marginBottom:"7px"}},"Expiration Date"),e.createElement("div",{style:{height:"30px",padding:"0.375rem 0.75rem",fontSize:"1rem",fontWeight:"400",lineHeight:"1.5",border:"1px solid #dee2e6",borderRadius:"5px",transition:"border-color .15s ease-in-out,box-shadow .15s ease-in-out"},id:"expiration-date"})),e.createElement("div",{style:{marginBottom:"1rem"}},e.createElement("div",{style:{marginBottom:"7px"}},"CVV"),e.createElement("div",{style:{height:"30px",padding:"0.375rem 0.75rem",fontSize:"1rem",fontWeight:"400",lineHeight:"1.5",border:"1px solid #dee2e6",borderRadius:"5px",transition:"border-color .15s ease-in-out,box-shadow .15s ease-in-out"},id:"cvv"})),e.createElement("button",{id:"card-button",type:"submit",style:{cursor:"pointer",width:"100%",height:"50px",padding:"0px 12px",border:"none",textAlign:"center",transition:"opacity 300ms cubic-bezier(0.4, 0, 0.2, 1) 0s, box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0s, background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0s",color:"white",fontSize:"1.1rem",background:"rgb(36, 42, 47)",borderRadius:"5px",boxShadow:"none",fontFamily:"serif"}},"Pay with Card")))},G=function(){return e.createElement("svg",{width:"50",height:"50",viewBox:"0 0 50 50",fill:"none",xmlns:"http://www.w3.org/2000/svg"},e.createElement("path",{d:"M25 0.111328C20.0774 0.111328 15.2654 1.57104 11.1725 4.30586C7.07952 7.04069 3.88945 10.9278 2.00566 15.4757C0.121883 20.0235 -0.371 25.0278 0.589343 29.8558C1.54969 34.6838 3.92012 39.1185 7.4009 42.5993C10.8817 46.0801 15.3164 48.4505 20.1444 49.4109C24.9724 50.3712 29.9767 49.8783 34.5246 47.9946C39.0724 46.1108 42.9595 42.9207 45.6944 38.8277C48.4292 34.7348 49.8889 29.9228 49.8889 25.0002C49.8889 18.3993 47.2667 12.0687 42.5991 7.40112C37.9315 2.73354 31.6009 0.111328 25 0.111328ZM41.2556 16.6469L20.8156 37.0713L8.74444 25.0002C8.33188 24.5877 8.10011 24.0281 8.10011 23.4447C8.10011 22.8612 8.33188 22.3017 8.74444 21.8891C9.157 21.4765 9.71655 21.2448 10.3 21.2448C10.8834 21.2448 11.443 21.4765 11.8556 21.8891L20.8467 30.8802L38.1756 13.5669C38.3798 13.3626 38.6223 13.2006 38.8892 13.09C39.1562 12.9795 39.4422 12.9226 39.7311 12.9226C40.02 12.9226 40.3061 12.9795 40.573 13.09C40.8399 13.2006 41.0824 13.3626 41.2867 13.5669C41.4909 13.7712 41.653 14.0137 41.7635 14.2806C41.8741 14.5475 41.931 14.8335 41.931 15.1224C41.931 15.4113 41.8741 15.6974 41.7635 15.9643C41.653 16.2312 41.4909 16.4737 41.2867 16.678L41.2556 16.6469Z",fill:"#8EDFC2"}))},Q=function(){return e.createElement("div",{id:"payment-status",style:{display:"none",justifyContent:"space-evenly",alignItems:"center",flexDirection:"column",height:"200px"}},e.createElement(G,null),e.createElement("div",null,"Your payment was successful!"))},q=function(){return e.createElement(e.Fragment,null,e.createElement("p",{className:"lead",style:{fontFamily:"Arial",textAlign:"center",fontSize:"1.25rem",fontWeight:"300",color:"#212529"}},"Primer"),e.createElement("div",{id:"primer-checkout-container",style:{marginBottom:"10px"}}))},Z=function(){return Z=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Z.apply(this,arguments)},X={customerId:"f42a9b2714104167a07c15b620c5b34c",apiEndpoint:"https://api.payments.dev.paltabrain.com",pricePointIdent:"pp_euro",apiKey:"c5e8c9fdaa8748649837371f9547e84f",metadata:{},manualPayments:!0};function $(e,t){return void 0===t&&(t=null),new K(e,t)}(0,j.H)(document.getElementById("app")).render(e.createElement(e.StrictMode,null,e.createElement((function(){var t=this,n=(0,e.useState)(X),r=n[0],o=n[1],i=function(e){console.error("Error during initialization:",e)},a=function(){console.error("onPaymentStatusChange: Error during initialization:")},s=function(e,t){o((function(n){var r;return Z(Z({},n),((r={})[e]=t,r))}))};return e.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",height:"100vh",backgroundColor:"#f8f9fa",fontFamily:"serif",padding:"80px"}},e.createElement("div",{id:"preparation-form",style:{width:"500px",border:"1px solid #ced4da",borderRadius:"10px",padding:"20px",backgroundColor:"#ffffff"}},e.createElement("h2",{style:{color:"#343a40",fontWeight:"bold",marginBottom:"20px"}},"Preparation"),e.createElement("div",{style:{display:"flex",justifyContent:"space-between",marginBottom:"15px"}},e.createElement("label",{style:{color:"#495057",fontWeight:"bold"}},"Domain"),e.createElement("input",{id:"apiEndpoint",className:"form-control",type:"text",value:r.apiEndpoint,style:{width:"60%",border:"1px solid #ced4da",padding:"5px",borderRadius:"5px"},onChange:function(e){return s("apiEndpoint",e)}})),e.createElement("div",{style:{display:"flex",justifyContent:"space-between",marginBottom:"15px"}},e.createElement("label",null,"Api key"),e.createElement("input",{id:"api_key",className:"form-control",type:"text",value:r.apiKey,style:{width:"60%",border:"1px solid #ced4da",padding:"5px",borderRadius:"5px"},onChange:function(e){return s("apiKey",e)}})),e.createElement("div",{style:{display:"flex",justifyContent:"space-between",marginBottom:"15px"}},e.createElement("label",null,"Customer ID"),e.createElement("input",{id:"customer_id",className:"form-control",type:"text",value:r.customerId,style:{width:"60%",border:"1px solid #ced4da",padding:"5px",borderRadius:"5px"},onChange:function(e){return s("customerId",e)}})),e.createElement("div",{style:{display:"flex",justifyContent:"space-between",marginBottom:"15px"}},e.createElement("label",null,"Price Point Ident"),e.createElement("input",{id:"price_point_ident",className:"form-control",type:"text",value:r.pricePointIdent,style:{width:"60%",border:"1px solid #ced4da",padding:"5px",borderRadius:"5px"},onChange:function(e){return s("pricePointIdent",e)}})),e.createElement("div",{style:{marginBottom:"10px"}},e.createElement("input",{className:"form-check-input",type:"checkbox",role:"switch",id:"metadata",onChange:function(e){return s("metadata",e)}}),e.createElement("label",{className:"form-check-label"},"Force 3ds")),e.createElement("div",{style:{marginBottom:"15px"}},e.createElement("input",{className:"form-check-input",type:"checkbox",checked:r.manualPayments,role:"switch",id:"manualPayments",onChange:function(e){return s("manualPayments",e.currentTarget.checked)}}),e.createElement("label",{className:"form-check-label"},"Manual Payments")),e.createElement("button",{id:"first-payment",style:{backgroundColor:"#007bff",color:"white",padding:"10px  20px",marginTop:"10px",border:"none",borderRadius:"5px",cursor:"pointer"},onClick:function(){return e=t,n=void 0,s=function(){var e,t,n,o,s,c,l,u,d,p,f,h,_,m,E,y;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}(this,(function(g){switch(g.label){case 0:e=r.apiEndpoint,t=r.apiKey,n=r.pricePointIdent,o=r.customerId,s=r.metadata,c=r.manualPayments,g.label=1;case 1:return g.trys.push([1,4,,5]),(l=document.getElementById("first-payment"))&&(l.disabled=!0,l.innerText="Loading...",l.style.opacity="0.5",l.style.cursor="default"),[4,(u=$({apiEndpoint:e,apiKey:t,metadata:s,onError:i,onPaymentStatusChange:a},{value:o})).getPricePoints({customerId:{value:o},ident:[n]})];case 2:return d=g.sent(),p=d[0],f="0"===p.introBasePrice?"1.00":p.introBasePrice,h=p.currencyCode,_={ident:n,customer:{id:{value:o}}},m={},E={},localStorage.setItem("amount",JSON.stringify(f)),localStorage.setItem("currency",h),[4,u.showPaymentForm({settings:_,primerOption:m,braintreeOption:E,manualPayments:c})];case 3:return g.sent(),[3,5];case 4:return y=g.sent(),console.error("Error during initialization:",y),[3,5];case 5:return[2]}}))},new((o=void 0)||(o=Promise))((function(t,r){function i(e){try{c(s.next(e))}catch(e){r(e)}}function a(e){try{c(s.throw(e))}catch(e){r(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(i,a)}c((s=s.apply(e,n||[])).next())}));var e,n,o,s}},"First payment"),e.createElement("button",{id:"one-click-button",style:{backgroundColor:"#6c757d",color:"white",padding:"10px  20px",marginTop:"10px",border:"none",borderRadius:"5px",cursor:"default",marginLeft:"10px"}},"One click")),e.createElement("div",{id:"payment-container",style:{display:"none",width:"700px"}},e.createElement(q,null),e.createElement(W,null),e.createElement(Q,null)))}),null)))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7NkJBQWlFQSxFQUFPQyxRQUFpSixXQUFXLElBQUlDLEVBQUUsQ0FBQyxJQUFJLFNBQVNBLEVBQUVDLEVBQUVDLEdBQUdGLEVBQUVELFFBQVFHLEVBQUUsR0FBRyxFQUFFLElBQUksV0FBVyxFQUFFLEdBQUcsV0FBVyxFQUFFLElBQUksV0FBVyxFQUFFLElBQUksU0FBU0YsRUFBRUMsRUFBRUMsR0FBRyxhQUFhLElBQUlDLEVBQUVDLE1BQU1BLEtBQUtDLFVBQVUsV0FBVyxPQUFPRixFQUFFRyxPQUFPQyxRQUFRLFNBQVNQLEdBQUcsSUFBSSxJQUFJQyxFQUFFQyxFQUFFLEVBQUVDLEVBQUVLLFVBQVVDLE9BQU9QLEVBQUVDLEVBQUVELElBQUksSUFBSSxJQUFJUSxLQUFLVCxFQUFFTyxVQUFVTixHQUFHSSxPQUFPSyxVQUFVQyxlQUFlQyxLQUFLWixFQUFFUyxLQUFLVixFQUFFVSxHQUFHVCxFQUFFUyxJQUFJLE9BQU9WLENBQUMsR0FBR2MsTUFBTVYsS0FBS0ksVUFBVSxFQUFFRSxFQUFFUixFQUFFLEtBQUthLEVBQUViLEVBQUUsS0FBS2MsRUFBRWQsRUFBRSxLQUFLZSxFQUFFZixFQUFFLEtBQUtnQixFQUFFaEIsRUFBRSxLQUFLaUIsRUFBRSxDQUFDLEVBQUVDLEVBQUUsQ0FBQ0MsS0FBSyxPQUFPQyxXQUFXLGFBQWFDLGlCQUFpQixtQkFBbUJDLFlBQVksY0FBY0MsU0FBUyxXQUFXQyxJQUFJLE1BQU1DLFNBQVMsV0FBV0MsUUFBUSxVQUFVQyxJQUFJLE1BQU1DLElBQUksTUFBTUMsTUFBTSxRQUFRQyxVQUFVLGFBQWFDLEVBQUUsQ0FBQ2IsRUFBRUMsS0FBS0QsRUFBRUUsV0FBV0YsRUFBRUcsaUJBQWlCSCxFQUFFSSxZQUFZSixFQUFFSyxTQUFTTCxFQUFFTSxJQUFJTixFQUFFTyxTQUFTUCxFQUFFUSxRQUFRUixFQUFFUyxJQUFJVCxFQUFFVSxJQUFJVixFQUFFVyxNQUFNWCxFQUFFWSxXQUFXRSxFQUFFaEIsRUFBRWlCLE1BQU1GLEdBQUcsU0FBU0csRUFBRXBDLEdBQUcsT0FBT21CLEVBQUVuQixJQUFJVSxFQUFFVixFQUFFLENBQUMsU0FBU3FDLEVBQUVyQyxFQUFFQyxRQUFHLElBQVNBLElBQUlBLEdBQUUsR0FBSSxJQUFJQyxFQUFFZ0MsRUFBRUksUUFBUXRDLEdBQUcsSUFBSUMsSUFBSSxJQUFJQyxFQUFFLE1BQU0sSUFBSXFDLE1BQU0sSUFBSXZDLEVBQUUsbUNBQW1DLE9BQU9FLENBQUMsQ0FBQyxTQUFTc0MsRUFBRXhDLEdBQUcsSUFBSUMsRUFBRSxHQUFHLElBQUllLEVBQUV5QixpQkFBaUJ6QyxHQUFHLE9BQU9DLEVBQUUsR0FBRyxJQUFJRCxFQUFFUyxPQUFPLE9BQU95QixFQUFFUSxLQUFJLFNBQVUxQyxHQUFHLE9BQU9rQixFQUFFaUIsTUFBTUMsRUFBRXBDLEdBQUksSUFBR2tDLEVBQUVTLFNBQVEsU0FBVXpDLEdBQUcsSUFBSUMsRUFBRWlDLEVBQUVsQyxHQUFHYSxFQUFFNkIsMEJBQTBCNUMsRUFBRUcsRUFBRUYsRUFBRyxJQUFHLElBQUlDLEVBQUVlLEVBQUU0QixjQUFjNUMsR0FBRyxPQUFPQyxFQUFFLENBQUNBLEdBQUdELENBQUMsQ0FBQ3VDLEVBQUVNLFlBQVksU0FBUzlDLEdBQUcsT0FBT2tCLEVBQUVpQixNQUFNQyxFQUFFcEMsR0FBRyxFQUFFd0MsRUFBRU8sV0FBVyxTQUFTL0MsR0FBRyxJQUFJQyxFQUFFb0MsRUFBRXJDLEdBQUdrQyxFQUFFYyxPQUFPL0MsRUFBRSxFQUFFLEVBQUV1QyxFQUFFUyxRQUFRLFNBQVNqRCxHQUFHLElBQUlDLEVBQUVvQyxFQUFFckMsRUFBRWtELE1BQUssR0FBSS9CLEVBQUVuQixFQUFFa0QsTUFBTWxELEdBQUcsSUFBSUMsR0FBR2lDLEVBQUVpQixLQUFLbkQsRUFBRWtELEtBQUssRUFBRVYsRUFBRVksV0FBVyxTQUFTcEQsRUFBRUMsR0FBRyxJQUFJQyxFQUFFaUIsRUFBRW5CLElBQUlVLEVBQUVWLEdBQUcsSUFBSUUsRUFBRSxNQUFNLElBQUlxQyxNQUFNLElBQUl2QyxFQUFFLHdEQUF3RCxHQUFHQyxFQUFFaUQsTUFBTWhELEVBQUVnRCxPQUFPakQsRUFBRWlELEtBQUssTUFBTSxJQUFJWCxNQUFNLG9DQUFvQyxJQUFJeEIsRUFBRUcsRUFBRWlCLE1BQU1qQyxHQUFHYSxFQUFFWixFQUFFQSxFQUFFLENBQUMsRUFBRVksR0FBR2QsR0FBR2tCLEVBQUVKLEVBQUVtQyxNQUFNbkMsQ0FBQyxFQUFFeUIsRUFBRWEsWUFBWSxTQUFTckQsRUFBRUMsR0FBRyxJQUFJQyxFQUFFbUMsRUFBRXJDLEdBQUdrQyxFQUFFYyxPQUFPOUMsRUFBRSxHQUFHZ0MsRUFBRWMsT0FBTy9DLEVBQUUsRUFBRUQsRUFBRSxFQUFFd0MsRUFBRWMsbUJBQW1CLFdBQVdwQixFQUFFaEIsRUFBRWlCLE1BQU1GLEdBQUdkLEVBQUUsQ0FBQyxDQUFDLEVBQUVxQixFQUFFZSxNQUFNbkMsRUFBRXBCLEVBQUVELFFBQVF5QyxDQUFDLEVBQUUsSUFBSSxTQUFTeEMsRUFBRUMsRUFBRUMsR0FBRyxhQUFhSSxPQUFPa0QsZUFBZXZELEVBQUUsYUFBYSxDQUFDd0QsT0FBTSxJQUFLeEQsRUFBRTJDLCtCQUEwQixFQUFPLElBQUl6QyxFQUFFRCxFQUFFLEtBQUtRLEVBQUVSLEVBQUUsS0FBS0QsRUFBRTJDLDBCQUEwQixTQUFTNUMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJYSxFQUFFQyxFQUFFLElBQUlELEVBQUUsRUFBRUEsRUFBRWQsRUFBRXlELFNBQVNqRCxPQUFPTSxJQUFJLENBQUMsSUFBSUUsRUFBRWhCLEVBQUV5RCxTQUFTM0MsR0FBRyxHQUFHTCxFQUFFaUQsUUFBUTNELEVBQUVpQixHQUFHLENBQUMsSUFBSUMsRUFBRWYsRUFBRWdDLE1BQU1sQyxHQUFHZSxFQUFFNEMsTUFBTUMsUUFBUTVDLEdBQUc2QyxPQUFPN0MsRUFBRSxJQUFJUixPQUFPcUQsT0FBTzdDLEdBQUdSLE9BQU9ULEVBQUVTLFFBQVFPLElBQUlFLEVBQUU2QyxjQUFjL0MsR0FBR2QsRUFBRWlELEtBQUtqQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLFNBQVNsQixHQUFHLGFBQWFBLEVBQUVELFFBQVEsQ0FBQ2lFLEtBQUssQ0FBQ0MsU0FBUyxPQUFPZixLQUFLLE9BQU9RLFNBQVMsQ0FBQyxHQUFHUSxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUlDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsSUFBSUMsS0FBSyxDQUFDQyxLQUFLLE1BQU1DLEtBQUssSUFBSUMsV0FBVyxDQUFDTixTQUFTLGFBQWFmLEtBQUssYUFBYVEsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU1RLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSUMsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQ0MsS0FBSyxNQUFNQyxLQUFLLElBQUksbUJBQW1CLENBQUNMLFNBQVMsbUJBQW1CZixLQUFLLG1CQUFtQlEsU0FBUyxDQUFDLEdBQUcsSUFBSVEsS0FBSyxDQUFDLEVBQUUsSUFBSUMsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQ0MsS0FBSyxNQUFNQyxLQUFLLElBQUksY0FBYyxDQUFDTCxTQUFTLGNBQWNmLEtBQUssY0FBY1EsU0FBUyxDQUFDLENBQUMsSUFBSSxLQUFLLEdBQUcsR0FBRyxJQUFJUSxLQUFLLENBQUMsRUFBRSxJQUFJQyxRQUFRLENBQUMsR0FBRyxHQUFHLElBQUlDLEtBQUssQ0FBQ0MsS0FBSyxNQUFNQyxLQUFLLElBQUlFLFNBQVMsQ0FBQ1AsU0FBUyxXQUFXZixLQUFLLFdBQVdRLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUlRLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSUMsUUFBUSxDQUFDLEdBQUcsSUFBSUMsS0FBSyxDQUFDQyxLQUFLLE1BQU1DLEtBQUssSUFBSUcsSUFBSSxDQUFDUixTQUFTLE1BQU1mLEtBQUssTUFBTVEsU0FBUyxDQUFDLEtBQUssS0FBSyxDQUFDLEtBQUssT0FBT1EsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJQyxRQUFRLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSUMsS0FBSyxDQUFDQyxLQUFLLE1BQU1DLEtBQUssSUFBSUksU0FBUyxDQUFDVCxTQUFTLFdBQVdmLEtBQUssV0FBV1EsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLE9BQU8sQ0FBQyxNQUFNLE9BQU8sQ0FBQyxNQUFNLE9BQU8sQ0FBQyxNQUFNLE9BQU8sQ0FBQyxPQUFPLFFBQVEsT0FBTyxDQUFDLE9BQU8sUUFBUSxDQUFDLE1BQU0sT0FBTyxDQUFDLE9BQU8sUUFBUSxDQUFDLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxDQUFDLE9BQU8sUUFBUSxDQUFDLE9BQU8sUUFBUSxDQUFDLEtBQUssTUFBTSxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssTUFBTSxDQUFDLEtBQUssTUFBTSxDQUFDLEtBQUssTUFBTSxDQUFDLEtBQUssT0FBT1EsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJQyxRQUFRLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUlDLEtBQUssQ0FBQ0MsS0FBSyxNQUFNQyxLQUFLLElBQUlLLFFBQVEsQ0FBQ1YsU0FBUyxVQUFVZixLQUFLLFVBQVVRLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUMsT0FBTyxRQUFRLENBQUMsT0FBTyxRQUFRLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHUSxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUlDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUlDLEtBQUssQ0FBQ0MsS0FBSyxNQUFNQyxLQUFLLElBQUlNLElBQUksQ0FBQ1gsU0FBUyxNQUFNZixLQUFLLE1BQU1RLFNBQVMsQ0FBQyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxDQUFDLE9BQU8sUUFBUSxDQUFDLE1BQU0sUUFBUSxPQUFPLE9BQU8sT0FB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T0FDVHJ4QyxNQUFPLFVBR1QsZ0JBQUNrdUgsRUFBa0IsTUFDbkIsZ0JBQUNkLEVBQXFCLE1BQ3RCLGdCQUFDLEVBQWEsT0FJdEIsR0M1UVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9ub2RlX21vZHVsZXMvQHByaW1lci1pby9jaGVja291dC13ZWIvZGlzdC9QcmltZXIuanMiLCJ3ZWJwYWNrOi8vcGFsdGFicmFpbi13ZWItc2RrLy4vbm9kZV9tb2R1bGVzL2JyYWludHJlZS13ZWIvZGlzdC9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcGFsdGFicmFpbi13ZWItc2RrLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vcGFsdGFicmFpbi13ZWItc2RrL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9zcmMvc2VydmljZXMvYXBpLnRzIiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vcGFsdGFicmFpbi13ZWItc2RrLy4vc3JjL3R5cGUudHMiLCJ3ZWJwYWNrOi8vcGFsdGFicmFpbi13ZWItc2RrLy4vc3JjL0Vycm9ySGFuZGxlcnMvUmVzcG9uc2VFcnJvci50cyIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9zcmMvUGF5bWVudFNlc3Npb24vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcGFsdGFicmFpbi13ZWItc2RrLy4vc3JjL0JyYWluVHJlZUNsaWVudC9pbmRleC50cyIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9zcmMvUGF5bWVudENsaWVudC9QYXltZW50Q2xpZW50SW1wbC50cyIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9zcmMvUHJpbWVyQ2xpZW50L2luZGV4LnRzIiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay8uL3NyYy9CcmFpblRyZWVDbGllbnQvQnJhaW5UcmVlQ2hlY2tvdXRGb3JtLnRzeCIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9zcmMvSWNvbnMvU3VjY2Vzc1BheW1lbnQudHN4Iiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay8uL3NyYy9QYXltZW50U3RhdHVzL1BheW1lbnRTdGF0dXMudHN4Iiwid2VicGFjazovL3BhbHRhYnJhaW4td2ViLXNkay8uL3NyYy9QcmltZXJDbGllbnQvUHJpbWVyQ2hlY2tvdXRGb3JtLnRzeCIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9zcmMvQXBwLnRzeCIsIndlYnBhY2s6Ly9wYWx0YWJyYWluLXdlYi1zZGsvLi9zcmMvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuUHJpbWVyPXQoKTplLlByaW1lcj10KCl9KHRoaXMsKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9ezE2MjpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPXIoNDcpfSw4NTQ6ZnVuY3Rpb24oKXt9LDYzOmZ1bmN0aW9uKCl7fSw2ODE6ZnVuY3Rpb24oKXt9LDI5MTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2Fzc2lnbnx8ZnVuY3Rpb24oKXtyZXR1cm4obj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQscj0xLG49YXJndW1lbnRzLmxlbmd0aDtyPG47cisrKWZvcih2YXIgbyBpbiB0PWFyZ3VtZW50c1tyXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSk7cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG89cigyNDQpLGk9cig0MTgpLGM9cigzNjEpLGE9cig1NTEpLHU9cigyMjgpLHM9e30sRT17VklTQTpcInZpc2FcIixNQVNURVJDQVJEOlwibWFzdGVyY2FyZFwiLEFNRVJJQ0FOX0VYUFJFU1M6XCJhbWVyaWNhbi1leHByZXNzXCIsRElORVJTX0NMVUI6XCJkaW5lcnMtY2x1YlwiLERJU0NPVkVSOlwiZGlzY292ZXJcIixKQ0I6XCJqY2JcIixVTklPTlBBWTpcInVuaW9ucGF5XCIsTUFFU1RSTzpcIm1hZXN0cm9cIixFTE86XCJlbG9cIixNSVI6XCJtaXJcIixISVBFUjpcImhpcGVyXCIsSElQRVJDQVJEOlwiaGlwZXJjYXJkXCJ9LEE9W0UuVklTQSxFLk1BU1RFUkNBUkQsRS5BTUVSSUNBTl9FWFBSRVNTLEUuRElORVJTX0NMVUIsRS5ESVNDT1ZFUixFLkpDQixFLlVOSU9OUEFZLEUuTUFFU1RSTyxFLkVMTyxFLk1JUixFLkhJUEVSLEUuSElQRVJDQVJEXSxfPXUuY2xvbmUoQSk7ZnVuY3Rpb24gZihlKXtyZXR1cm4gc1tlXXx8b1tlXX1mdW5jdGlvbiBsKGUsdCl7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciByPV8uaW5kZXhPZihlKTtpZighdCYmLTE9PT1yKXRocm93IG5ldyBFcnJvcignXCInK2UrJ1wiIGlzIG5vdCBhIHN1cHBvcnRlZCBjYXJkIHR5cGUuJyk7cmV0dXJuIHJ9ZnVuY3Rpb24gcChlKXt2YXIgdD1bXTtpZighYy5pc1ZhbGlkSW5wdXRUeXBlKGUpKXJldHVybiB0O2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gXy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiB1LmNsb25lKGYoZSkpfSkpO18uZm9yRWFjaCgoZnVuY3Rpb24ocil7dmFyIG49ZihyKTtpLmFkZE1hdGNoaW5nQ2FyZHNUb1Jlc3VsdHMoZSxuLHQpfSkpO3ZhciByPWEuZmluZEJlc3RNYXRjaCh0KTtyZXR1cm4gcj9bcl06dH1wLmdldFR5cGVJbmZvPWZ1bmN0aW9uKGUpe3JldHVybiB1LmNsb25lKGYoZSkpfSxwLnJlbW92ZUNhcmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9bChlKTtfLnNwbGljZSh0LDEpfSxwLmFkZENhcmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9bChlLnR5cGUsITApO3NbZS50eXBlXT1lLC0xPT09dCYmXy5wdXNoKGUudHlwZSl9LHAudXBkYXRlQ2FyZD1mdW5jdGlvbihlLHQpe3ZhciByPXNbZV18fG9bZV07aWYoIXIpdGhyb3cgbmV3IEVycm9yKCdcIicrZStcIlxcXCIgaXMgbm90IGEgcmVjb2duaXplZCB0eXBlLiBVc2UgYGFkZENhcmRgIGluc3RlYWQuJ1wiKTtpZih0LnR5cGUmJnIudHlwZSE9PXQudHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgb3ZlcndyaXRlIHR5cGUgcGFyYW1ldGVyLlwiKTt2YXIgaT11LmNsb25lKHIpO2k9bihuKHt9LGkpLHQpLHNbaS50eXBlXT1pfSxwLmNoYW5nZU9yZGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bChlKTtfLnNwbGljZShyLDEpLF8uc3BsaWNlKHQsMCxlKX0scC5yZXNldE1vZGlmaWNhdGlvbnM9ZnVuY3Rpb24oKXtfPXUuY2xvbmUoQSkscz17fX0scC50eXBlcz1FLGUuZXhwb3J0cz1wfSw0MTg6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuYWRkTWF0Y2hpbmdDYXJkc1RvUmVzdWx0cz12b2lkIDA7dmFyIG49cigyMjgpLG89cigzMTgpO3QuYWRkTWF0Y2hpbmdDYXJkc1RvUmVzdWx0cz1mdW5jdGlvbihlLHQscil7dmFyIGksYztmb3IoaT0wO2k8dC5wYXR0ZXJucy5sZW5ndGg7aSsrKXt2YXIgYT10LnBhdHRlcm5zW2ldO2lmKG8ubWF0Y2hlcyhlLGEpKXt2YXIgdT1uLmNsb25lKHQpO2M9QXJyYXkuaXNBcnJheShhKT9TdHJpbmcoYVswXSkubGVuZ3RoOlN0cmluZyhhKS5sZW5ndGgsZS5sZW5ndGg+PWMmJih1Lm1hdGNoU3RyZW5ndGg9Yyksci5wdXNoKHUpO2JyZWFrfX19fSwyNDQ6ZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXt2aXNhOntuaWNlVHlwZTpcIlZpc2FcIix0eXBlOlwidmlzYVwiLHBhdHRlcm5zOls0XSxnYXBzOls0LDgsMTJdLGxlbmd0aHM6WzE2LDE4LDE5XSxjb2RlOntuYW1lOlwiQ1ZWXCIsc2l6ZTozfX0sbWFzdGVyY2FyZDp7bmljZVR5cGU6XCJNYXN0ZXJjYXJkXCIsdHlwZTpcIm1hc3RlcmNhcmRcIixwYXR0ZXJuczpbWzUxLDU1XSxbMjIyMSwyMjI5XSxbMjIzLDIyOV0sWzIzLDI2XSxbMjcwLDI3MV0sMjcyMF0sZ2FwczpbNCw4LDEyXSxsZW5ndGhzOlsxNl0sY29kZTp7bmFtZTpcIkNWQ1wiLHNpemU6M319LFwiYW1lcmljYW4tZXhwcmVzc1wiOntuaWNlVHlwZTpcIkFtZXJpY2FuIEV4cHJlc3NcIix0eXBlOlwiYW1lcmljYW4tZXhwcmVzc1wiLHBhdHRlcm5zOlszNCwzN10sZ2FwczpbNCwxMF0sbGVuZ3RoczpbMTVdLGNvZGU6e25hbWU6XCJDSURcIixzaXplOjR9fSxcImRpbmVycy1jbHViXCI6e25pY2VUeXBlOlwiRGluZXJzIENsdWJcIix0eXBlOlwiZGluZXJzLWNsdWJcIixwYXR0ZXJuczpbWzMwMCwzMDVdLDM2LDM4LDM5XSxnYXBzOls0LDEwXSxsZW5ndGhzOlsxNCwxNiwxOV0sY29kZTp7bmFtZTpcIkNWVlwiLHNpemU6M319LGRpc2NvdmVyOntuaWNlVHlwZTpcIkRpc2NvdmVyXCIsdHlwZTpcImRpc2NvdmVyXCIscGF0dGVybnM6WzYwMTEsWzY0NCw2NDldLDY1XSxnYXBzOls0LDgsMTJdLGxlbmd0aHM6WzE2LDE5XSxjb2RlOntuYW1lOlwiQ0lEXCIsc2l6ZTozfX0samNiOntuaWNlVHlwZTpcIkpDQlwiLHR5cGU6XCJqY2JcIixwYXR0ZXJuczpbMjEzMSwxODAwLFszNTI4LDM1ODldXSxnYXBzOls0LDgsMTJdLGxlbmd0aHM6WzE2LDE3LDE4LDE5XSxjb2RlOntuYW1lOlwiQ1ZWXCIsc2l6ZTozfX0sdW5pb25wYXk6e25pY2VUeXBlOlwiVW5pb25QYXlcIix0eXBlOlwidW5pb25wYXlcIixwYXR0ZXJuczpbNjIwLFs2MjQsNjI2XSxbNjIxMDAsNjIxODJdLFs2MjE4NCw2MjE4N10sWzYyMTg1LDYyMTk3XSxbNjIyMDAsNjIyMDVdLFs2MjIwMTAsNjIyOTk5XSw2MjIwMTgsWzYyMjAxOSw2MjI5OTldLFs2MjIwNyw2MjIwOV0sWzYyMjEyNiw2MjI5MjVdLFs2MjMsNjI2XSw2MjcwLDYyNzIsNjI3NixbNjI3NzAwLDYyNzc3OV0sWzYyNzc4MSw2Mjc3OTldLFs2MjgyLDYyODldLDYyOTEsNjI5Miw4MTAsWzgxMTAsODEzMV0sWzgxMzIsODE1MV0sWzgxNTIsODE2M10sWzgxNjQsODE3MV1dLGdhcHM6WzQsOCwxMl0sbGVuZ3RoczpbMTQsMTUsMTYsMTcsMTgsMTldLGNvZGU6e25hbWU6XCJDVk5cIixzaXplOjN9fSxtYWVzdHJvOntuaWNlVHlwZTpcIk1hZXN0cm9cIix0eXBlOlwibWFlc3Ryb1wiLHBhdHRlcm5zOls0OTM2OTgsWzVlNSw1MDQxNzRdLFs1MDQxNzYsNTA2Njk4XSxbNTA2Nzc5LDUwODk5OV0sWzU2LDU5XSw2Myw2Nyw2XSxnYXBzOls0LDgsMTJdLGxlbmd0aHM6WzEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSxjb2RlOntuYW1lOlwiQ1ZDXCIsc2l6ZTozfX0sZWxvOntuaWNlVHlwZTpcIkVsb1wiLHR5cGU6XCJlbG9cIixwYXR0ZXJuczpbNDAxMTc4LDQwMTE3OSw0Mzg5MzUsNDU3NjMxLDQ1NzYzMiw0MzEyNzQsNDUxNDE2LDQ1NzM5Myw1MDQxNzUsWzUwNjY5OSw1MDY3NzhdLFs1MDllMyw1MDk5OTldLDYyNzc4MCw2MzYyOTcsNjM2MzY4LFs2NTAwMzEsNjUwMDMzXSxbNjUwMDM1LDY1MDA1MV0sWzY1MDQwNSw2NTA0MzldLFs2NTA0ODUsNjUwNTM4XSxbNjUwNTQxLDY1MDU5OF0sWzY1MDcwMCw2NTA3MThdLFs2NTA3MjAsNjUwNzI3XSxbNjUwOTAxLDY1MDk3OF0sWzY1MTY1Miw2NTE2NzldLFs2NTVlMyw2NTUwMTldLFs2NTUwMjEsNjU1MDU4XV0sZ2FwczpbNCw4LDEyXSxsZW5ndGhzOlsxNl0sY29kZTp7bmFtZTpcIkNWRVwiLHNpemU6M319LG1pcjp7bmljZVR5cGU6XCJNaXJcIix0eXBlOlwibWlyXCIscGF0dGVybnM6W1syMjAwLDIyMDRdXSxnYXBzOls0LDgsMTJdLGxlbmd0aHM6WzE2LDE3LDE4LDE5XSxjb2RlOntuYW1lOlwiQ1ZQMlwiLHNpemU6M319LGhpcGVyOntuaWNlVHlwZTpcIkhpcGVyXCIsdHlwZTpcImhpcGVyXCIscGF0dGVybnM6WzYzNzA5NSw2MzczNzQyMyw2Mzc0MzM1OCw2Mzc1NjgsNjM3NTk5LDYzNzYwOSw2Mzc2MTJdLGdhcHM6WzQsOCwxMl0sbGVuZ3RoczpbMTZdLGNvZGU6e25hbWU6XCJDVkNcIixzaXplOjN9fSxoaXBlcmNhcmQ6e25pY2VUeXBlOlwiSGlwZXJjYXJkXCIsdHlwZTpcImhpcGVyY2FyZFwiLHBhdHRlcm5zOls2MDYyODJdLGdhcHM6WzQsOCwxMl0sbGVuZ3RoczpbMTZdLGNvZGU6e25hbWU6XCJDVkNcIixzaXplOjN9fX19LDIyODpmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuY2xvbmU9dm9pZCAwLHQuY2xvbmU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU/SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlKSk6bnVsbH19LDU1MTpmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZmluZEJlc3RNYXRjaD12b2lkIDAsdC5maW5kQmVzdE1hdGNoPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIGUubWF0Y2hTdHJlbmd0aH0pKS5sZW5ndGg7cmV0dXJuIHQ+MCYmdD09PWUubGVuZ3RofShlKT9lLnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT9OdW1iZXIoZS5tYXRjaFN0cmVuZ3RoKTxOdW1iZXIodC5tYXRjaFN0cmVuZ3RoKT90OmU6dH0pKTpudWxsfX0sMzYxOmZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5pc1ZhbGlkSW5wdXRUeXBlPXZvaWQgMCx0LmlzVmFsaWRJbnB1dFR5cGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV8fGUgaW5zdGFuY2VvZiBTdHJpbmd9fSwzMTg6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lm1hdGNoZXM9dm9pZCAwLHQubWF0Y2hlcz1mdW5jdGlvbihlLHQpe3JldHVybiBBcnJheS5pc0FycmF5KHQpP2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1TdHJpbmcodCkubGVuZ3RoLG89ZS5zdWJzdHIoMCxuKSxpPXBhcnNlSW50KG8sMTApO3JldHVybiB0PXBhcnNlSW50KFN0cmluZyh0KS5zdWJzdHIoMCxvLmxlbmd0aCksMTApLHI9cGFyc2VJbnQoU3RyaW5nKHIpLnN1YnN0cigwLG8ubGVuZ3RoKSwxMCksaT49dCYmaTw9cn0oZSx0WzBdLHRbMV0pOmZ1bmN0aW9uKGUsdCl7cmV0dXJuKHQ9U3RyaW5nKHQpKS5zdWJzdHJpbmcoMCxlLmxlbmd0aCk9PT1lLnN1YnN0cmluZygwLHQubGVuZ3RoKX0oZSx0KX19LDQ3OmZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO3ZhciB0LHI9T2JqZWN0LnByb3RvdHlwZSxuPXIuaGFzT3duUHJvcGVydHksbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LGk9by5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsYz1vLmFzeW5jSXRlcmF0b3J8fFwiQEBhc3luY0l0ZXJhdG9yXCIsYT1vLnRvU3RyaW5nVGFnfHxcIkBAdG9TdHJpbmdUYWdcIjtmdW5jdGlvbiB1KGUsdCxyKXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6cixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pLGVbdF19dHJ5e3Uoe30sXCJcIil9Y2F0Y2goZSl7dT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGVbdF09cn19ZnVuY3Rpb24gcyhlLHQscixuKXt2YXIgbz10JiZ0LnByb3RvdHlwZSBpbnN0YW5jZW9mIE8/dDpPLGk9T2JqZWN0LmNyZWF0ZShvLnByb3RvdHlwZSksYz1uZXcgQyhufHxbXSk7cmV0dXJuIGkuX2ludm9rZT1mdW5jdGlvbihlLHQscil7dmFyIG49QTtyZXR1cm4gZnVuY3Rpb24obyxpKXtpZihuPT09Zil0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO2lmKG49PT1sKXtpZihcInRocm93XCI9PT1vKXRocm93IGk7cmV0dXJuIEwoKX1mb3Ioci5tZXRob2Q9byxyLmFyZz1pOzspe3ZhciBjPXIuZGVsZWdhdGU7aWYoYyl7dmFyIGE9SShjLHIpO2lmKGEpe2lmKGE9PT1wKWNvbnRpbnVlO3JldHVybiBhfX1pZihcIm5leHRcIj09PXIubWV0aG9kKXIuc2VudD1yLl9zZW50PXIuYXJnO2Vsc2UgaWYoXCJ0aHJvd1wiPT09ci5tZXRob2Qpe2lmKG49PT1BKXRocm93IG49bCxyLmFyZztyLmRpc3BhdGNoRXhjZXB0aW9uKHIuYXJnKX1lbHNlXCJyZXR1cm5cIj09PXIubWV0aG9kJiZyLmFicnVwdChcInJldHVyblwiLHIuYXJnKTtuPWY7dmFyIHU9RShlLHQscik7aWYoXCJub3JtYWxcIj09PXUudHlwZSl7aWYobj1yLmRvbmU/bDpfLHUuYXJnPT09cCljb250aW51ZTtyZXR1cm57dmFsdWU6dS5hcmcsZG9uZTpyLmRvbmV9fVwidGhyb3dcIj09PXUudHlwZSYmKG49bCxyLm1ldGhvZD1cInRocm93XCIsci5hcmc9dS5hcmcpfX19KGUscixjKSxpfWZ1bmN0aW9uIEUoZSx0LHIpe3RyeXtyZXR1cm57dHlwZTpcIm5vcm1hbFwiLGFyZzplLmNhbGwodCxyKX19Y2F0Y2goZSl7cmV0dXJue3R5cGU6XCJ0aHJvd1wiLGFyZzplfX19ZS53cmFwPXM7dmFyIEE9XCJzdXNwZW5kZWRTdGFydFwiLF89XCJzdXNwZW5kZWRZaWVsZFwiLGY9XCJleGVjdXRpbmdcIixsPVwiY29tcGxldGVkXCIscD17fTtmdW5jdGlvbiBPKCl7fWZ1bmN0aW9uIFAoKXt9ZnVuY3Rpb24gVCgpe312YXIgaD17fTtoW2ldPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3ZhciBkPU9iamVjdC5nZXRQcm90b3R5cGVPZixSPWQmJmQoZChTKFtdKSkpO1ImJlIhPT1yJiZuLmNhbGwoUixpKSYmKGg9Uik7dmFyIE49VC5wcm90b3R5cGU9Ty5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShoKTtmdW5jdGlvbiB5KGUpe1tcIm5leHRcIixcInRocm93XCIsXCJyZXR1cm5cIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7dShlLHQsKGZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pbnZva2UodCxlKX0pKX0pKX1mdW5jdGlvbiBEKGUsdCl7ZnVuY3Rpb24gcihvLGksYyxhKXt2YXIgdT1FKGVbb10sZSxpKTtpZihcInRocm93XCIhPT11LnR5cGUpe3ZhciBzPXUuYXJnLEE9cy52YWx1ZTtyZXR1cm4gQSYmXCJvYmplY3RcIj09dHlwZW9mIEEmJm4uY2FsbChBLFwiX19hd2FpdFwiKT90LnJlc29sdmUoQS5fX2F3YWl0KS50aGVuKChmdW5jdGlvbihlKXtyKFwibmV4dFwiLGUsYyxhKX0pLChmdW5jdGlvbihlKXtyKFwidGhyb3dcIixlLGMsYSl9KSk6dC5yZXNvbHZlKEEpLnRoZW4oKGZ1bmN0aW9uKGUpe3MudmFsdWU9ZSxjKHMpfSksKGZ1bmN0aW9uKGUpe3JldHVybiByKFwidGhyb3dcIixlLGMsYSl9KSl9YSh1LmFyZyl9dmFyIG87dGhpcy5faW52b2tlPWZ1bmN0aW9uKGUsbil7ZnVuY3Rpb24gaSgpe3JldHVybiBuZXcgdCgoZnVuY3Rpb24odCxvKXtyKGUsbix0LG8pfSkpfXJldHVybiBvPW8/by50aGVuKGksaSk6aSgpfX1mdW5jdGlvbiBJKGUscil7dmFyIG49ZS5pdGVyYXRvcltyLm1ldGhvZF07aWYobj09PXQpe2lmKHIuZGVsZWdhdGU9bnVsbCxcInRocm93XCI9PT1yLm1ldGhvZCl7aWYoZS5pdGVyYXRvci5yZXR1cm4mJihyLm1ldGhvZD1cInJldHVyblwiLHIuYXJnPXQsSShlLHIpLFwidGhyb3dcIj09PXIubWV0aG9kKSlyZXR1cm4gcDtyLm1ldGhvZD1cInRocm93XCIsci5hcmc9bmV3IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIil9cmV0dXJuIHB9dmFyIG89RShuLGUuaXRlcmF0b3Isci5hcmcpO2lmKFwidGhyb3dcIj09PW8udHlwZSlyZXR1cm4gci5tZXRob2Q9XCJ0aHJvd1wiLHIuYXJnPW8uYXJnLHIuZGVsZWdhdGU9bnVsbCxwO3ZhciBpPW8uYXJnO3JldHVybiBpP2kuZG9uZT8ocltlLnJlc3VsdE5hbWVdPWkudmFsdWUsci5uZXh0PWUubmV4dExvYyxcInJldHVyblwiIT09ci5tZXRob2QmJihyLm1ldGhvZD1cIm5leHRcIixyLmFyZz10KSxyLmRlbGVnYXRlPW51bGwscCk6aTooci5tZXRob2Q9XCJ0aHJvd1wiLHIuYXJnPW5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKSxyLmRlbGVnYXRlPW51bGwscCl9ZnVuY3Rpb24gdihlKXt2YXIgdD17dHJ5TG9jOmVbMF19OzEgaW4gZSYmKHQuY2F0Y2hMb2M9ZVsxXSksMiBpbiBlJiYodC5maW5hbGx5TG9jPWVbMl0sdC5hZnRlckxvYz1lWzNdKSx0aGlzLnRyeUVudHJpZXMucHVzaCh0KX1mdW5jdGlvbiBtKGUpe3ZhciB0PWUuY29tcGxldGlvbnx8e307dC50eXBlPVwibm9ybWFsXCIsZGVsZXRlIHQuYXJnLGUuY29tcGxldGlvbj10fWZ1bmN0aW9uIEMoZSl7dGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOlwicm9vdFwifV0sZS5mb3JFYWNoKHYsdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gUyhlKXtpZihlKXt2YXIgcj1lW2ldO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm5leHQpcmV0dXJuIGU7aWYoIWlzTmFOKGUubGVuZ3RoKSl7dmFyIG89LTEsYz1mdW5jdGlvbiByKCl7Zm9yKDsrK288ZS5sZW5ndGg7KWlmKG4uY2FsbChlLG8pKXJldHVybiByLnZhbHVlPWVbb10sci5kb25lPSExLHI7cmV0dXJuIHIudmFsdWU9dCxyLmRvbmU9ITAscn07cmV0dXJuIGMubmV4dD1jfX1yZXR1cm57bmV4dDpMfX1mdW5jdGlvbiBMKCl7cmV0dXJue3ZhbHVlOnQsZG9uZTohMH19cmV0dXJuIFAucHJvdG90eXBlPU4uY29uc3RydWN0b3I9VCxULmNvbnN0cnVjdG9yPVAsUC5kaXNwbGF5TmFtZT11KFQsYSxcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLGUuaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLmNvbnN0cnVjdG9yO3JldHVybiEhdCYmKHQ9PT1QfHxcIkdlbmVyYXRvckZ1bmN0aW9uXCI9PT0odC5kaXNwbGF5TmFtZXx8dC5uYW1lKSl9LGUubWFyaz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLFQpOihlLl9fcHJvdG9fXz1ULHUoZSxhLFwiR2VuZXJhdG9yRnVuY3Rpb25cIikpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTiksZX0sZS5hd3JhcD1mdW5jdGlvbihlKXtyZXR1cm57X19hd2FpdDplfX0seShELnByb3RvdHlwZSksRC5wcm90b3R5cGVbY109ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sZS5Bc3luY0l0ZXJhdG9yPUQsZS5hc3luYz1mdW5jdGlvbih0LHIsbixvLGkpe3ZvaWQgMD09PWkmJihpPVByb21pc2UpO3ZhciBjPW5ldyBEKHModCxyLG4sbyksaSk7cmV0dXJuIGUuaXNHZW5lcmF0b3JGdW5jdGlvbihyKT9jOmMubmV4dCgpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBlLmRvbmU/ZS52YWx1ZTpjLm5leHQoKX0pKX0seShOKSx1KE4sYSxcIkdlbmVyYXRvclwiKSxOW2ldPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LE4udG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgR2VuZXJhdG9yXVwifSxlLmtleXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpO3JldHVybiB0LnJldmVyc2UoKSxmdW5jdGlvbiByKCl7Zm9yKDt0Lmxlbmd0aDspe3ZhciBuPXQucG9wKCk7aWYobiBpbiBlKXJldHVybiByLnZhbHVlPW4sci5kb25lPSExLHJ9cmV0dXJuIHIuZG9uZT0hMCxyfX0sZS52YWx1ZXM9UyxDLnByb3RvdHlwZT17Y29uc3RydWN0b3I6QyxyZXNldDpmdW5jdGlvbihlKXtpZih0aGlzLnByZXY9MCx0aGlzLm5leHQ9MCx0aGlzLnNlbnQ9dGhpcy5fc2VudD10LHRoaXMuZG9uZT0hMSx0aGlzLmRlbGVnYXRlPW51bGwsdGhpcy5tZXRob2Q9XCJuZXh0XCIsdGhpcy5hcmc9dCx0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChtKSwhZSlmb3IodmFyIHIgaW4gdGhpcylcInRcIj09PXIuY2hhckF0KDApJiZuLmNhbGwodGhpcyxyKSYmIWlzTmFOKCtyLnNsaWNlKDEpKSYmKHRoaXNbcl09dCl9LHN0b3A6ZnVuY3Rpb24oKXt0aGlzLmRvbmU9ITA7dmFyIGU9dGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09ZS50eXBlKXRocm93IGUuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKGUpe2lmKHRoaXMuZG9uZSl0aHJvdyBlO3ZhciByPXRoaXM7ZnVuY3Rpb24gbyhuLG8pe3JldHVybiBhLnR5cGU9XCJ0aHJvd1wiLGEuYXJnPWUsci5uZXh0PW4sbyYmKHIubWV0aG9kPVwibmV4dFwiLHIuYXJnPXQpLCEhb31mb3IodmFyIGk9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2k+PTA7LS1pKXt2YXIgYz10aGlzLnRyeUVudHJpZXNbaV0sYT1jLmNvbXBsZXRpb247aWYoXCJyb290XCI9PT1jLnRyeUxvYylyZXR1cm4gbyhcImVuZFwiKTtpZihjLnRyeUxvYzw9dGhpcy5wcmV2KXt2YXIgdT1uLmNhbGwoYyxcImNhdGNoTG9jXCIpLHM9bi5jYWxsKGMsXCJmaW5hbGx5TG9jXCIpO2lmKHUmJnMpe2lmKHRoaXMucHJldjxjLmNhdGNoTG9jKXJldHVybiBvKGMuY2F0Y2hMb2MsITApO2lmKHRoaXMucHJldjxjLmZpbmFsbHlMb2MpcmV0dXJuIG8oYy5maW5hbGx5TG9jKX1lbHNlIGlmKHUpe2lmKHRoaXMucHJldjxjLmNhdGNoTG9jKXJldHVybiBvKGMuY2F0Y2hMb2MsITApfWVsc2V7aWYoIXMpdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7aWYodGhpcy5wcmV2PGMuZmluYWxseUxvYylyZXR1cm4gbyhjLmZpbmFsbHlMb2MpfX19fSxhYnJ1cHQ6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3I+PTA7LS1yKXt2YXIgbz10aGlzLnRyeUVudHJpZXNbcl07aWYoby50cnlMb2M8PXRoaXMucHJldiYmbi5jYWxsKG8sXCJmaW5hbGx5TG9jXCIpJiZ0aGlzLnByZXY8by5maW5hbGx5TG9jKXt2YXIgaT1vO2JyZWFrfX1pJiYoXCJicmVha1wiPT09ZXx8XCJjb250aW51ZVwiPT09ZSkmJmkudHJ5TG9jPD10JiZ0PD1pLmZpbmFsbHlMb2MmJihpPW51bGwpO3ZhciBjPWk/aS5jb21wbGV0aW9uOnt9O3JldHVybiBjLnR5cGU9ZSxjLmFyZz10LGk/KHRoaXMubWV0aG9kPVwibmV4dFwiLHRoaXMubmV4dD1pLmZpbmFsbHlMb2MscCk6dGhpcy5jb21wbGV0ZShjKX0sY29tcGxldGU6ZnVuY3Rpb24oZSx0KXtpZihcInRocm93XCI9PT1lLnR5cGUpdGhyb3cgZS5hcmc7cmV0dXJuXCJicmVha1wiPT09ZS50eXBlfHxcImNvbnRpbnVlXCI9PT1lLnR5cGU/dGhpcy5uZXh0PWUuYXJnOlwicmV0dXJuXCI9PT1lLnR5cGU/KHRoaXMucnZhbD10aGlzLmFyZz1lLmFyZyx0aGlzLm1ldGhvZD1cInJldHVyblwiLHRoaXMubmV4dD1cImVuZFwiKTpcIm5vcm1hbFwiPT09ZS50eXBlJiZ0JiYodGhpcy5uZXh0PXQpLHB9LGZpbmlzaDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3Q+PTA7LS10KXt2YXIgcj10aGlzLnRyeUVudHJpZXNbdF07aWYoci5maW5hbGx5TG9jPT09ZSlyZXR1cm4gdGhpcy5jb21wbGV0ZShyLmNvbXBsZXRpb24sci5hZnRlckxvYyksbShyKSxwfX0sY2F0Y2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTt0Pj0wOy0tdCl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW3RdO2lmKHIudHJ5TG9jPT09ZSl7dmFyIG49ci5jb21wbGV0aW9uO2lmKFwidGhyb3dcIj09PW4udHlwZSl7dmFyIG89bi5hcmc7bShyKX1yZXR1cm4gb319dGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpfSxkZWxlZ2F0ZVlpZWxkOmZ1bmN0aW9uKGUscixuKXtyZXR1cm4gdGhpcy5kZWxlZ2F0ZT17aXRlcmF0b3I6UyhlKSxyZXN1bHROYW1lOnIsbmV4dExvYzpufSxcIm5leHRcIj09PXRoaXMubWV0aG9kJiYodGhpcy5hcmc9dCkscH19LGV9KGUuZXhwb3J0cyk7dHJ5e3JlZ2VuZXJhdG9yUnVudGltZT10fWNhdGNoKGUpe0Z1bmN0aW9uKFwiclwiLFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKSh0KX19fSx0PXt9O2Z1bmN0aW9uIHIobil7dmFyIG89dFtuXTtpZih2b2lkIDAhPT1vKXJldHVybiBvLmV4cG9ydHM7dmFyIGk9dFtuXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsciksaS5leHBvcnRzfXIubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gci5kKHQse2E6dH0pLHR9LHIuZD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiB0KXIubyh0LG4pJiYhci5vKGUsbikmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4se2VudW1lcmFibGU6ITAsZ2V0OnRbbl19KX0sci5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxyLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX07dmFyIG49e307cmV0dXJuIGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ci5yKG4pLHIuZChuLHtDaGVja291dFVYRmxvdzpmdW5jdGlvbigpe3JldHVybiBSdH0sQ3Z2SW5wdXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5DdnZJbnB1dH0sRXJyb3JDb2RlOmZ1bmN0aW9uKCl7cmV0dXJuIEx0fSxFdmVudFR5cGVzOmZ1bmN0aW9uKCl7cmV0dXJuIGp0fSxIZWFkbGVzc01hbmFnZXJUeXBlOmZ1bmN0aW9uKCl7cmV0dXJuIEh0fSxQYXltZW50RmxvdzpmdW5jdGlvbigpe3JldHVybiBOdH0sUGF5bWVudEluc3RydW1lbnRUeXBlOmZ1bmN0aW9uKCl7cmV0dXJuIEl0fSxQYXltZW50TWV0aG9kRGF0YTpmdW5jdGlvbigpe3JldHVybiBCdC5QYXltZW50TWV0aG9kRGF0YX0sUGF5bWVudE1ldGhvZFR5cGU6ZnVuY3Rpb24oKXtyZXR1cm4gdnR9LFByaW1lcjpmdW5jdGlvbigpe3JldHVybiB4dH0sU3VjY2Vzc1NjcmVlblR5cGU6ZnVuY3Rpb24oKXtyZXR1cm4ga3R9LFRocmVlRFNlY3VyZVN0YXR1czpmdW5jdGlvbigpe3JldHVybiBEdH0sVG9rZW5UeXBlOmZ1bmN0aW9uKCl7cmV0dXJuIEN0fSxwcmVsb2FkUHJpbWVyOmZ1bmN0aW9uKCl7cmV0dXJuIFN0fX0pO3ZhciBlPXt9O3IucihlKTt2YXIgdD1yKDE2Miksbz1yLm4odCk7ZnVuY3Rpb24gaShlLHQpeyhudWxsPT10fHx0PmUubGVuZ3RoKSYmKHQ9ZS5sZW5ndGgpO2Zvcih2YXIgcj0wLG49bmV3IEFycmF5KHQpO3I8dDtyKyspbltyXT1lW3JdO3JldHVybiBufWZ1bmN0aW9uIGMoZSx0KXtpZihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gaShlLHQpO3ZhciByPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtyZXR1cm5cIk9iamVjdFwiPT09ciYmZS5jb25zdHJ1Y3RvciYmKHI9ZS5jb25zdHJ1Y3Rvci5uYW1lKSxcIk1hcFwiPT09cnx8XCJTZXRcIj09PXI/QXJyYXkuZnJvbShlKTpcIkFyZ3VtZW50c1wiPT09cnx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3Qocik/aShlLHQpOnZvaWQgMH19ZnVuY3Rpb24gYShlLHQpe3JldHVybiBmdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlfShlKXx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1udWxsPT1lP251bGw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZihudWxsIT1yKXt2YXIgbixvLGk9W10sYz0hMCxhPSExO3RyeXtmb3Iocj1yLmNhbGwoZSk7IShjPShuPXIubmV4dCgpKS5kb25lKSYmKGkucHVzaChuLnZhbHVlKSwhdHx8aS5sZW5ndGghPT10KTtjPSEwKTt9Y2F0Y2goZSl7YT0hMCxvPWV9ZmluYWxseXt0cnl7Y3x8bnVsbD09ci5yZXR1cm58fHIucmV0dXJuKCl9ZmluYWxseXtpZihhKXRocm93IG99fXJldHVybiBpfX0oZSx0KXx8YyhlLHQpfHxmdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9KCl9ZnVuY3Rpb24gdShlKXtyZXR1cm4gZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gaShlKX0oZSl8fGZ1bmN0aW9uKGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJm51bGwhPWVbU3ltYm9sLml0ZXJhdG9yXXx8bnVsbCE9ZVtcIkBAaXRlcmF0b3JcIl0pcmV0dXJuIEFycmF5LmZyb20oZSl9KGUpfHxjKGUpfHxmdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfSgpfWZ1bmN0aW9uIHMoZSx0LHIsbixvLGksYyl7dHJ5e3ZhciBhPWVbaV0oYyksdT1hLnZhbHVlfWNhdGNoKGUpe3JldHVybiB2b2lkIHIoZSl9YS5kb25lP3QodSk6UHJvbWlzZS5yZXNvbHZlKHUpLnRoZW4obixvKX1mdW5jdGlvbiBFKGUpe3JldHVybiBmdW5jdGlvbigpe3ZhciB0PXRoaXMscj1hcmd1bWVudHM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLG8pe3ZhciBpPWUuYXBwbHkodCxyKTtmdW5jdGlvbiBjKGUpe3MoaSxuLG8sYyxhLFwibmV4dFwiLGUpfWZ1bmN0aW9uIGEoZSl7cyhpLG4sbyxjLGEsXCJ0aHJvd1wiLGUpfWModm9pZCAwKX0pKX19ZnVuY3Rpb24gQShlKXtyZXR1cm4oQT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSkoZSl9ZnVuY3Rpb24gXyhlLHQpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIHIsbixvPWZ1bmN0aW9uKGUsdCl7aWYobnVsbD09ZSlyZXR1cm57fTt2YXIgcixuLG89e30saT1PYmplY3Qua2V5cyhlKTtmb3Iobj0wO248aS5sZW5ndGg7bisrKXI9aVtuXSx0LmluZGV4T2Yocik+PTB8fChvW3JdPWVbcl0pO3JldHVybiBvfShlLHQpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7Zm9yKG49MDtuPGkubGVuZ3RoO24rKylyPWlbbl0sdC5pbmRleE9mKHIpPj0wfHxPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoZSxyKSYmKG9bcl09ZVtyXSl9cmV0dXJuIG99dmFyIGYsbCxwO3IoODU0KSxyKDYzKTtmdW5jdGlvbiBPKGUsdCxyKXtyZXR1cm4gdCBpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPXIsZX0hZnVuY3Rpb24oZSl7ZS5SRVFVRVNUX1NUQVJUPVwiUkVRVUVTVF9TVEFSVFwiLGUuUkVRVUVTVF9FTkQ9XCJSRVFVRVNUX0VORFwifShmfHwoZj17fSkpLGZ1bmN0aW9uKGUpe2UuU1RBUlQ9XCJTVEFSVFwiLGUuRU5EPVwiRU5EXCJ9KGx8fChsPXt9KSksZnVuY3Rpb24oZSl7ZS5ORVRXT1JLX0NBTExfRVZFTlQ9XCJORVRXT1JLX0NBTExfRVZFTlRcIixlLkNSQVNIX0VWRU5UPVwiQ1JBU0hfRVZFTlRcIixlLlRJTUVSX0VWRU5UPVwiVElNRVJfRVZFTlRcIixlLk1FU1NBR0VfRVZFTlQ9XCJNRVNTQUdFX0VWRU5UXCIsZS5WMV9FVkVOVD1cIlYxX0VWRU5UXCIsZS5TREtfRlVOQ1RJT05fRVZFTlQ9XCJTREtfRlVOQ1RJT05fRVZFTlRcIn0ocHx8KHA9e30pKTt2YXIgUCxUPWZ1bmN0aW9uKGUsdCl7dmFyIHI7dHJ5e3N3aXRjaChlKXtjYXNlXCJQUklNRVJfU0RLX1ZFUlNJT05cIjpyPVwidjIuMzMuNFwiO2JyZWFrO2Nhc2VcIlBSSU1FUl9BU1NFVFNfVVJMXCI6cj1wcm9jZXNzLmVudi5QUklNRVJfQVNTRVRTX1VSTDticmVhaztjYXNlXCJQUklNRVJfQ09SRV9BUElfVVJMXCI6cj1wcm9jZXNzLmVudi5QUklNRVJfQ09SRV9BUElfVVJMO2JyZWFrO2Nhc2VcIlBSSU1FUl9QQ0lfQVBJX1VSTFwiOnI9cHJvY2Vzcy5lbnYuUFJJTUVSX1BDSV9BUElfVVJMO2JyZWFrO2Nhc2VcIlBSSU1FUl9NT0RVTEVTX1VSTFwiOnI9cHJvY2Vzcy5lbnYuUFJJTUVSX01PRFVMRVNfVVJMO2JyZWFrO2Nhc2VcIlBSSU1FUl9CVUlMRF9JTlRFR1JBVElPTl9CVUlMREVSXCI6cj1wcm9jZXNzLmVudi5QUklNRVJfQlVJTERfSU5URUdSQVRJT05fQlVJTERFUjticmVhaztjYXNlXCJTRU5UUllfRFNOXCI6cj1wcm9jZXNzLmVudi5TRU5UUllfRFNOfX1jYXRjaChlKXt9cmV0dXJuIHJ8fHR9O2Z1bmN0aW9uIGgoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gZCgpe3JldHVybihkPUUobygpLm1hcmsoKGZ1bmN0aW9uIGUoKXt2YXIgdCxyLG4saSxjLGE7cmV0dXJuIG8oKS53cmFwKChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDppZihcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yKXtlLm5leHQ9MjticmVha31yZXR1cm4gZS5hYnJ1cHQoXCJyZXR1cm5cIik7Y2FzZSAyOnJldHVybiBlLm5leHQ9NCxudWxsPT09KHQ9KHI9bmF2aWdhdG9yKS5nZXRCYXR0ZXJ5KXx8dm9pZCAwPT09dD92b2lkIDA6dC5jYWxsKHIpO2Nhc2UgNDpyZXR1cm4gYT1lLnNlbnQsZS5hYnJ1cHQoXCJyZXR1cm5cIix7bWVtb3J5Rm9vdHByaW50Om51bGw9PT0obj1wZXJmb3JtYW5jZS5tZW1vcnkpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnVzZWRKU0hlYXBTaXplLHNjcmVlbjp7aGVpZ2h0Om51bGw9PT0oaT1zY3JlZW4pfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmhlaWdodCx3aWR0aDpudWxsPT09KGM9c2NyZWVuKXx8dm9pZCAwPT09Yz92b2lkIDA6Yy53aWR0aH0scGxhdGZvcm1WZXJzaW9uOm5hdmlnYXRvci5wbGF0Zm9ybSx1c2VyQWdlbnQ6bmF2aWdhdG9yLnVzZXJBZ2VudCxsb2NhbGU6bmF2aWdhdG9yLmxhbmd1YWdlLGJhdHRlcnlMZXZlbDpudWxsPT1hP3ZvaWQgMDphLmxldmVsLGJhdHRlcnlTdGF0dXM6bnVsbCE9YSYmYS5jaGFyZ2luZz9QLkNIQVJHSU5HOlAuTk9UX0NIQVJHSU5HfSk7Y2FzZSA2OmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19KSxlKX0pKSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBSKGUsdCl7dmFyIHI9T2JqZWN0LmtleXMoZSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTt0JiYobj1uLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KS5lbnVtZXJhYmxlfSkpKSxyLnB1c2guYXBwbHkocixuKX1yZXR1cm4gcn1mdW5jdGlvbiBOKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciByPW51bGwhPWFyZ3VtZW50c1t0XT9hcmd1bWVudHNbdF06e307dCUyP1IoT2JqZWN0KHIpLCEwKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPKGUsdCxyW3RdKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHIpKTpSKE9iamVjdChyKSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsdCkpfSkpfXJldHVybiBlfSFmdW5jdGlvbihlKXtlLkNIQVJHSU5HPVwiQ0hBUkdJTkdcIixlLk5PVF9DSEFSR0lORz1cIk5PVF9DSEFSR0lOR1wifShQfHwoUD17fSkpO3ZhciB5PVQoXCJQUklNRVJfU0RLX1ZFUlNJT05cIik7ZnVuY3Rpb24gRChlLHQscil7cmV0dXJuIEkuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIEkoKXtyZXR1cm4oST1FKG8oKS5tYXJrKChmdW5jdGlvbiBlKHQscixuKXtyZXR1cm4gbygpLndyYXAoKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnJldHVybiBlLnQwPU4sZS50MT1OKHt9LG4pLGUudDI9e30sZS50Mz1EYXRlLm5vdygpLGUubmV4dD02LGgoKTtjYXNlIDY6cmV0dXJuIGUudDQ9ZS5zZW50LGUudDU9dCxlLnQ2PXIsZS50Nz15LGUudDg9XCJXRUJcIixlLnQ5PXtjcmVhdGVkQXQ6ZS50MyxkZXZpY2U6ZS50NCxldmVudFR5cGU6ZS50NSxwcm9wZXJ0aWVzOmUudDYsc2RrVmVyc2lvbjplLnQ3LHNka1R5cGU6ZS50OH0sZS5hYnJ1cHQoXCJyZXR1cm5cIiwoMCxlLnQwKShlLnQxLGUudDIsZS50OSkpO2Nhc2UgMTM6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0pLGUpfSkpKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciB2PVwiaHR0cHM6Ly9hbmFseXRpY3MucHJvZHVjdGlvbi5kYXRhLnByaW1lci5pby9zZGstbG9nc1wiLG09ZnVuY3Rpb24oZSl7cmV0dXJuXCJAcHJpbWVyL2FuYWx5dGljcy9cIi5jb25jYXQoZSl9O2Z1bmN0aW9uIEMoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sdD1lLnVybCxyPXZvaWQgMD09PXQ/djp0LG49XyhlLFtcInVybFwiXSk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLChmdW5jdGlvbigpe1wiaGlkZGVuXCI9PT1kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUmJlMocil9KSk7dmFyIGk9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHQ9RShvKCkubWFyaygoZnVuY3Rpb24gdChpKXt2YXIgYyxhO3JldHVybiBvKCkud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvcil7dC5uZXh0PTI7YnJlYWt9cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIpO2Nhc2UgMjpyZXR1cm4gdC5uZXh0PTQsRChlLGksbik7Y2FzZSA0OmM9dC5zZW50LGE9WShjLChmdW5jdGlvbihlKXtyZXR1cm4gZyhNKGUpKX0pKSxMKHIsYSk7Y2FzZSA4OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0KX0pKSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCl9O3JldHVybntjcmFzaEV2ZW50OmkocC5DUkFTSF9FVkVOVCksbWVzc2FnZUV2ZW50OmkocC5NRVNTQUdFX0VWRU5UKSxuZXR3b3JrQ2FsbEV2ZW50OmkocC5ORVRXT1JLX0NBTExfRVZFTlQpLHNka0Z1bmN0aW9uRXZlbnQ6aShwLlNES19GVU5DVElPTl9FVkVOVCksdGltZXJFdmVudDppKHAuVElNRVJfRVZFTlQpLHYxRXZlbnQ6aShwLlYxX0VWRU5UKX19ZnVuY3Rpb24gUyhlKXt2YXIgdD1tKGUpLHI9c2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh0KTtzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKHQpLHImJm5hdmlnYXRvci5zZW5kQmVhY29uKGUscil9ZnVuY3Rpb24gTChlLHQpe3ZhciByLG49bShlKTtzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKG4sXCJbXCIuY29uY2F0KFtudWxsPT09KHI9c2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShuKSl8fHZvaWQgMD09PXI/dm9pZCAwOnIuc2xpY2UoMSwtMSksSlNPTi5zdHJpbmdpZnkodCldLmZpbHRlcihCb29sZWFuKS5qb2luKFwiLFwiKSxcIl1cIikpfWZ1bmN0aW9uIFkoZSx0KXt2YXIgcj1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT09QShlKSYmbnVsbCE9PWU/WShlLHQpOnQoZSl9O3JldHVybiBBcnJheS5pc0FycmF5KGUpP2UubWFwKHIpOk9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhlKS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PWEoZSwyKSxuPXRbMF0sbz10WzFdO3JldHVybltuLHIobyldfSkpKX1mdW5jdGlvbiBnKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlJiZlLmxlbmd0aD41MTIwP1wiXCIuY29uY2F0KGUuc3Vic3RyaW5nKDAsNTEyMCksXCIuLi5cIik6ZX1mdW5jdGlvbiBNKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZS5uYW1lfHxcImZ1bmN0aW9uXCI6ZX1mdW5jdGlvbiBiKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiB3KGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1mdW5jdGlvbiBVKGUsdCxyKXtyZXR1cm4gdCYmdyhlLnByb3RvdHlwZSx0KSxyJiZ3KGUsciksZX1mdW5jdGlvbiBCKGUpe2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiBlfWZ1bmN0aW9uIGsoZSx0KXtyZXR1cm4oaz1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuX19wcm90b19fPXQsZX0pKGUsdCl9ZnVuY3Rpb24gaihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmayhlLHQpfWZ1bmN0aW9uIEgoZSx0KXtpZih0JiYoXCJvYmplY3RcIj09PUEodCl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpKXJldHVybiB0O2lmKHZvaWQgMCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBCKGUpfWZ1bmN0aW9uIHgoZSl7cmV0dXJuKHg9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKX0pKGUpfXZhciBHPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LHIpe2IodGhpcyxlKSxPKHRoaXMsXCJ0eXBlXCIsdm9pZCAwKSxPKHRoaXMsXCJkaXNwbGF5TmFtZVwiLHZvaWQgMCksTyh0aGlzLFwiY29udGFpbmVyXCIsdm9pZCAwKSxPKHRoaXMsXCJyZW1vdGVDb25maWdcIix2b2lkIDApLE8odGhpcyxcIm9wdGlvbnNcIix2b2lkIDApLHRoaXMudHlwZT10LHRoaXMuZGlzcGxheU5hbWU9cn1yZXR1cm4gVShlLFt7a2V5Olwic3BlY3NcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5zcGVjc319LHtrZXk6XCJzZXRPcHRpb25cIix2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMub3B0aW9ucyYmKHRoaXMub3B0aW9uc1tlXT10KX19LHtrZXk6XCJzZXR1cEFuZFZhbGlkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCEwKX19LHtrZXk6XCJtb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVzb2x2ZSghMCl9fSx7a2V5OlwidG9rZW5pemVcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCl9fSx7a2V5OlwidmFsaWRhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLnJlc29sdmUoe3ZhbGlkOiEwLHZhbGlkYXRpb25FcnJvcnM6W119KX19LHtrZXk6XCJzZXREaXNhYmxlZFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBQcm9taXNlLnJlc29sdmUoKX19LHtrZXk6XCJmb2N1c1wiLHZhbHVlOmZ1bmN0aW9uKCl7fX0se2tleTpcImJsdXJcIix2YWx1ZTpmdW5jdGlvbigpe319LHtrZXk6XCJnZXRQYXltZW50RWxlbWVudFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9fSx7a2V5OlwiZ2V0U3RvcmVcIix2YWx1ZTpmdW5jdGlvbigpe319XSksZX0oKTtmdW5jdGlvbiBGKGUpe3ZhciB0PWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciByLG49eChlKTtpZih0KXt2YXIgbz14KHRoaXMpLmNvbnN0cnVjdG9yO3I9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSByPW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBIKHRoaXMscil9fU8oRyxcInNwZWNzXCIse2tleTpcIl9fbm9uZV9fXCIsY2FuVmF1bHQ6ITEsYnV0dG9uTWFuYWdlZEJ5UGF5bWVudE1ldGhvZDohMSxoYXNFeHBvcnRlZEJ1dHRvbk9wdGlvbnM6ITF9KSxPKEcsXCJjcmVhdGVcIiwoZnVuY3Rpb24oZSx0LHIsbil7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGluc3RhbnRpYXRlIEJhc2VQYXltZW50TWV0aG9kXCIpfSkpO3ZhciBWPWZ1bmN0aW9uKGUpe2oobixlKTt2YXIgdCxyPUYobik7ZnVuY3Rpb24gbigpe3ZhciBlO2IodGhpcyxuKTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxvPW5ldyBBcnJheSh0KSxpPTA7aTx0O2krKylvW2ldPWFyZ3VtZW50c1tpXTtyZXR1cm4gTyhCKGU9ci5jYWxsLmFwcGx5KHIsW3RoaXNdLmNvbmNhdChvKSkpLFwicmVtb3RlQ29uZmlnXCIsdm9pZCAwKSxlfXJldHVybiBVKG4sW3trZXk6XCJ0b2tlbml6ZVwiLHZhbHVlOih0PUUobygpLm1hcmsoKGZ1bmN0aW9uIGUodCl7cmV0dXJuIG8oKS53cmFwKChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSksZSl9KSkpLGZ1bmN0aW9uKGUpe3JldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfV0pLG59KEcpO01hcCxTZXQ7dmFyIEs9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4obnVsbD09PShlPVgucmFuZG9tVVVJRCl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2FsbChYKSl8fFcoKX0sVz1mdW5jdGlvbigpe3JldHVybihbMWU3XSstMWUzKy00ZTMrLThlMystMWUxMSkucmVwbGFjZSgvWzAxOF0vZywoZnVuY3Rpb24oZSl7cmV0dXJuKGVeeigpPj5lLzQpLnRvU3RyaW5nKDE2KX0pKX0sej1mdW5jdGlvbigpe3ZhciBlLHQ7cmV0dXJuIDE1JihudWxsIT09KGU9bnVsbD09PSh0PVguZ2V0UmFuZG9tVmFsdWVzKXx8dm9pZCAwPT09dD92b2lkIDA6dC5jYWxsKFgsbmV3IFVpbnQ4QXJyYXkoMSkpWzBdKSYmdm9pZCAwIT09ZT9lOjE2Kk1hdGgucmFuZG9tKCkpfSxYPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBjcnlwdG8/Y3J5cHRvOnt9O25ldyBTZXQoW1wicG9zdFwiLFwiZ2V0XCIsXCJkZWxldGVcIl0pLG5ldyBTZXQoW1wicG9zdFwiXSk7dmFyIFE9ZnVuY3Rpb24oZSx0LHIpe3JldHVybntjYWxsVHlwZTpyP2YuUkVRVUVTVF9FTkQ6Zi5SRVFVRVNUX1NUQVJULGlkOmUsZXJyb3JCb2R5OihudWxsPT1yP3ZvaWQgMDpyLmVycm9yKSYmSlNPTi5zdHJpbmdpZnkoci5lcnJvciksbWV0aG9kOnQubWV0aG9kLHJlc3BvbnNlQ29kZTpudWxsPT1yP3ZvaWQgMDpyLnN0YXR1cyx1cmw6dC51cmx9fTtjb25zdCBaPVwiMy42LjFcIixKPVwiZnVuY3Rpb25cIj09dHlwZW9mIGF0b2IsJD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hLHE9XCJmdW5jdGlvblwiPT10eXBlb2YgQnVmZmVyLGVlPVwiZnVuY3Rpb25cIj09dHlwZW9mIFRleHREZWNvZGVyP25ldyBUZXh0RGVjb2Rlcjp2b2lkIDAsdGU9XCJmdW5jdGlvblwiPT10eXBlb2YgVGV4dEVuY29kZXI/bmV3IFRleHRFbmNvZGVyOnZvaWQgMCxyZT1bLi4uXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiXSxuZT0oZT0+e2xldCB0PXt9O3JldHVybiBlLmZvckVhY2goKChlLHIpPT50W2VdPXIpKSx0fSkocmUpLG9lPS9eKD86W0EtWmEtelxcZCtcXC9dezR9KSo/KD86W0EtWmEtelxcZCtcXC9dezJ9KD86PT0pP3xbQS1aYS16XFxkK1xcL117M309Pyk/JC8saWU9U3RyaW5nLmZyb21DaGFyQ29kZS5iaW5kKFN0cmluZyksY2U9XCJmdW5jdGlvblwiPT10eXBlb2YgVWludDhBcnJheS5mcm9tP1VpbnQ4QXJyYXkuZnJvbS5iaW5kKFVpbnQ4QXJyYXkpOihlLHQ9KGU9PmUpKT0+bmV3IFVpbnQ4QXJyYXkoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSwwKS5tYXAodCkpLGFlPWU9PmUucmVwbGFjZSgvWytcXC9dL2csKGU9PlwiK1wiPT1lP1wiLVwiOlwiX1wiKSkucmVwbGFjZSgvPSskL20sXCJcIiksdWU9ZT0+ZS5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL10vZyxcIlwiKSxzZT1lPT57bGV0IHQscixuLG8saT1cIlwiO2NvbnN0IGM9ZS5sZW5ndGglMztmb3IobGV0IGM9MDtjPGUubGVuZ3RoOyl7aWYoKHI9ZS5jaGFyQ29kZUF0KGMrKykpPjI1NXx8KG49ZS5jaGFyQ29kZUF0KGMrKykpPjI1NXx8KG89ZS5jaGFyQ29kZUF0KGMrKykpPjI1NSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW52YWxpZCBjaGFyYWN0ZXIgZm91bmRcIik7dD1yPDwxNnxuPDw4fG8saSs9cmVbdD4+MTgmNjNdK3JlW3Q+PjEyJjYzXStyZVt0Pj42JjYzXStyZVs2MyZ0XX1yZXR1cm4gYz9pLnNsaWNlKDAsYy0zKStcIj09PVwiLnN1YnN0cmluZyhjKTppfSxFZT0kP2U9PmJ0b2EoZSk6cT9lPT5CdWZmZXIuZnJvbShlLFwiYmluYXJ5XCIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpOnNlLEFlPXE/ZT0+QnVmZmVyLmZyb20oZSkudG9TdHJpbmcoXCJiYXNlNjRcIik6ZT0+e2xldCB0PVtdO2ZvcihsZXQgcj0wLG49ZS5sZW5ndGg7cjxuO3IrPTQwOTYpdC5wdXNoKGllLmFwcGx5KG51bGwsZS5zdWJhcnJheShyLHIrNDA5NikpKTtyZXR1cm4gRWUodC5qb2luKFwiXCIpKX0sX2U9KGUsdD0hMSk9PnQ/YWUoQWUoZSkpOkFlKGUpLGZlPWU9PntpZihlLmxlbmd0aDwyKXJldHVybih0PWUuY2hhckNvZGVBdCgwKSk8MTI4P2U6dDwyMDQ4P2llKDE5Mnx0Pj4+NikraWUoMTI4fDYzJnQpOmllKDIyNHx0Pj4+MTImMTUpK2llKDEyOHx0Pj4+NiY2MykraWUoMTI4fDYzJnQpO3ZhciB0PTY1NTM2KzEwMjQqKGUuY2hhckNvZGVBdCgwKS01NTI5NikrKGUuY2hhckNvZGVBdCgxKS01NjMyMCk7cmV0dXJuIGllKDI0MHx0Pj4+MTgmNykraWUoMTI4fHQ+Pj4xMiY2MykraWUoMTI4fHQ+Pj42JjYzKStpZSgxMjh8NjMmdCl9LGxlPS9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZGXXxbXlxceDAwLVxceDdGXS9nLHBlPWU9PmUucmVwbGFjZShsZSxmZSksT2U9cT9lPT5CdWZmZXIuZnJvbShlLFwidXRmOFwiKS50b1N0cmluZyhcImJhc2U2NFwiKTp0ZT9lPT5BZSh0ZS5lbmNvZGUoZSkpOmU9PkVlKHBlKGUpKSxQZT0oZSx0PSExKT0+dD9hZShPZShlKSk6T2UoZSksVGU9ZT0+UGUoZSwhMCksaGU9L1tcXHhDMC1cXHhERl1bXFx4ODAtXFx4QkZdfFtcXHhFMC1cXHhFRl1bXFx4ODAtXFx4QkZdezJ9fFtcXHhGMC1cXHhGN11bXFx4ODAtXFx4QkZdezN9L2csZGU9ZT0+e3N3aXRjaChlLmxlbmd0aCl7Y2FzZSA0OnZhciB0PSgoNyZlLmNoYXJDb2RlQXQoMCkpPDwxOHwoNjMmZS5jaGFyQ29kZUF0KDEpKTw8MTJ8KDYzJmUuY2hhckNvZGVBdCgyKSk8PDZ8NjMmZS5jaGFyQ29kZUF0KDMpKS02NTUzNjtyZXR1cm4gaWUoNTUyOTYrKHQ+Pj4xMCkpK2llKDU2MzIwKygxMDIzJnQpKTtjYXNlIDM6cmV0dXJuIGllKCgxNSZlLmNoYXJDb2RlQXQoMCkpPDwxMnwoNjMmZS5jaGFyQ29kZUF0KDEpKTw8Nnw2MyZlLmNoYXJDb2RlQXQoMikpO2RlZmF1bHQ6cmV0dXJuIGllKCgzMSZlLmNoYXJDb2RlQXQoMCkpPDw2fDYzJmUuY2hhckNvZGVBdCgxKSl9fSxSZT1lPT5lLnJlcGxhY2UoaGUsZGUpLE5lPWU9PntpZihlPWUucmVwbGFjZSgvXFxzKy9nLFwiXCIpLCFvZS50ZXN0KGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJtYWxmb3JtZWQgYmFzZTY0LlwiKTtlKz1cIj09XCIuc2xpY2UoMi0oMyZlLmxlbmd0aCkpO2xldCB0LHIsbixvPVwiXCI7Zm9yKGxldCBpPTA7aTxlLmxlbmd0aDspdD1uZVtlLmNoYXJBdChpKyspXTw8MTh8bmVbZS5jaGFyQXQoaSsrKV08PDEyfChyPW5lW2UuY2hhckF0KGkrKyldKTw8Nnwobj1uZVtlLmNoYXJBdChpKyspXSksbys9NjQ9PT1yP2llKHQ+PjE2JjI1NSk6NjQ9PT1uP2llKHQ+PjE2JjI1NSx0Pj44JjI1NSk6aWUodD4+MTYmMjU1LHQ+PjgmMjU1LDI1NSZ0KTtyZXR1cm4gb30seWU9Sj9lPT5hdG9iKHVlKGUpKTpxP2U9PkJ1ZmZlci5mcm9tKGUsXCJiYXNlNjRcIikudG9TdHJpbmcoXCJiaW5hcnlcIik6TmUsRGU9cT9lPT5jZShCdWZmZXIuZnJvbShlLFwiYmFzZTY0XCIpKTplPT5jZSh5ZShlKSwoZT0+ZS5jaGFyQ29kZUF0KDApKSksSWU9ZT0+RGUobWUoZSkpLHZlPXE/ZT0+QnVmZmVyLmZyb20oZSxcImJhc2U2NFwiKS50b1N0cmluZyhcInV0ZjhcIik6ZWU/ZT0+ZWUuZGVjb2RlKERlKGUpKTplPT5SZSh5ZShlKSksbWU9ZT0+dWUoZS5yZXBsYWNlKC9bLV9dL2csKGU9PlwiLVwiPT1lP1wiK1wiOlwiL1wiKSkpLENlPWU9PnZlKG1lKGUpKSxTZT1lPT4oe3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxMZT1mdW5jdGlvbigpe2NvbnN0IGU9KGUsdCk9Pk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLGUsU2UodCkpO2UoXCJmcm9tQmFzZTY0XCIsKGZ1bmN0aW9uKCl7cmV0dXJuIENlKHRoaXMpfSkpLGUoXCJ0b0Jhc2U2NFwiLChmdW5jdGlvbihlKXtyZXR1cm4gUGUodGhpcyxlKX0pKSxlKFwidG9CYXNlNjRVUklcIiwoZnVuY3Rpb24oKXtyZXR1cm4gUGUodGhpcywhMCl9KSksZShcInRvQmFzZTY0VVJMXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIFBlKHRoaXMsITApfSkpLGUoXCJ0b1VpbnQ4QXJyYXlcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSWUodGhpcyl9KSl9LFllPWZ1bmN0aW9uKCl7Y29uc3QgZT0oZSx0KT0+T2JqZWN0LmRlZmluZVByb3BlcnR5KFVpbnQ4QXJyYXkucHJvdG90eXBlLGUsU2UodCkpO2UoXCJ0b0Jhc2U2NFwiLChmdW5jdGlvbihlKXtyZXR1cm4gX2UodGhpcyxlKX0pKSxlKFwidG9CYXNlNjRVUklcIiwoZnVuY3Rpb24oKXtyZXR1cm4gX2UodGhpcywhMCl9KSksZShcInRvQmFzZTY0VVJMXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIF9lKHRoaXMsITApfSkpfSxnZT17dmVyc2lvbjpaLFZFUlNJT046XCIzLjYuMVwiLGF0b2I6eWUsYXRvYlBvbHlmaWxsOk5lLGJ0b2E6RWUsYnRvYVBvbHlmaWxsOnNlLGZyb21CYXNlNjQ6Q2UsdG9CYXNlNjQ6UGUsZW5jb2RlOlBlLGVuY29kZVVSSTpUZSxlbmNvZGVVUkw6VGUsdXRvYjpwZSxidG91OlJlLGRlY29kZTpDZSxpc1ZhbGlkOmU9PntpZihcInN0cmluZ1wiIT10eXBlb2YgZSlyZXR1cm4hMTtjb25zdCB0PWUucmVwbGFjZSgvXFxzKy9nLFwiXCIpLnJlcGxhY2UoLz0rJC8sXCJcIik7cmV0dXJuIS9bXlxcczAtOWEtekEtWlxcKy9dLy50ZXN0KHQpfHwhL1teXFxzMC05YS16QS1aXFwtX10vLnRlc3QodCl9LGZyb21VaW50OEFycmF5Ol9lLHRvVWludDhBcnJheTpJZSxleHRlbmRTdHJpbmc6TGUsZXh0ZW5kVWludDhBcnJheTpZZSxleHRlbmRCdWlsdGluczooKT0+e0xlKCksWWUoKX19O3ZhciBNZT17ZW5jb2RlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxyPXQudXJsU2FmZSxuPXZvaWQgMCE9PXImJnI7cmV0dXJuIGdlLmVuY29kZShlLG4pfSxkZWNvZGU6Z2UuZGVjb2RlfTtmdW5jdGlvbiBiZShlKXt2YXIgdD1mdW5jdGlvbihlKXt0cnl7dmFyIHQ9YShlLnNwbGl0KFwiLlwiKSwyKSxyPXRbMF0sbj10WzFdfHxyO3JldHVybiBKU09OLnBhcnNlKE1lLmRlY29kZShuKSl9Y2F0Y2goZSl7dGhyb3cgbmV3IEVycm9yKEJlKX19KGUpLHI9MWUzKnQuZXhwO2lmKERhdGUubm93KCk+cil0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQoVWUsXCIuIEV4cGlyYXRpb24gZGF0ZTogXCIpLmNvbmNhdChuZXcgRGF0ZShyKS50b0lTT1N0cmluZygpKSk7cmV0dXJuIHR9dmFyIHdlPVwiVGhlIHByb3ZpZGVkIGBjbGllbnRUb2tlbmBcIixVZT1cIlwiLmNvbmNhdCh3ZSxcIiBoYXMgZXhwaXJlZFwiKSxCZT1cIlwiLmNvbmNhdCh3ZSxcIiBpcyBtYWxmb3JtZWRcIik7ZnVuY3Rpb24ga2UoZSx0KXt2YXIgcj1PYmplY3Qua2V5cyhlKTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpO3QmJihuPW4uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpLmVudW1lcmFibGV9KSkpLHIucHVzaC5hcHBseShyLG4pfXJldHVybiByfWZ1bmN0aW9uIGplKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciByPW51bGwhPWFyZ3VtZW50c1t0XT9hcmd1bWVudHNbdF06e307dCUyP2tlKE9iamVjdChyKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7TyhlLHQsclt0XSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhyKSk6a2UoT2JqZWN0KHIpKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KSl9KSl9cmV0dXJuIGV9dmFyIEhlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEdlKFwiZ2V0XCIsZSx0KX0seGU9e1wiY29udGVudC10eXBlXCI6XCJhcHBsaWNhdGlvbi9qc29uXCJ9LEdlPWZ1bmN0aW9uKGUsdCxyLG4pe3JldHVybiBmZXRjaCh0LHtib2R5Om4sbWV0aG9kOmUsaGVhZGVyczpqZShqZSh7fSx4ZSkscil9KS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gZS5qc29uKCkuY2F0Y2goKGZ1bmN0aW9uKCl7fSkpfSkpfTtmdW5jdGlvbiBGZShlLHQpe3ZhciByPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKG49bi5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSksci5wdXNoLmFwcGx5KHIsbil9cmV0dXJuIHJ9dmFyIFZlPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIHI9bnVsbCE9YXJndW1lbnRzW3RdP2FyZ3VtZW50c1t0XTp7fTt0JTI/RmUoT2JqZWN0KHIpLCEwKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPKGUsdCxyW3RdKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHIpKTpGZShPYmplY3QocikpLmZvckVhY2goKGZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLHQpKX0pKX1yZXR1cm4gZX0oe1wicHJpbWVyLWNsaWVudC10b2tlblwiOmUsXCJwcmltZXItc2RrLWNsaWVudFwiOlwiV0VCXCIsXCJwcmltZXItc2RrLXZlcnNpb25cIjpcInYyLjMzLjRcIixcInByaW1lci1zZGstY2hlY2tvdXQtc2Vzc2lvbi1pZFwiOnR9LHImJntcIngtYXBpLXZlcnNpb25cIjpyfSl9O2Z1bmN0aW9uIEtlKGUsdCxyKXtyZXR1cm4gV2UuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIFdlKCl7cmV0dXJuKFdlPUUobygpLm1hcmsoKGZ1bmN0aW9uIGUodCxyLG4pe3JldHVybiBvKCkud3JhcCgoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cmV0dXJuIGUucHJldj0wLGUubmV4dD0zLEhlKFwiXCIuY29uY2F0KHIsXCIvP3dpdGhEaXNwbGF5TWV0YWRhdGE9dHJ1ZVwiKSxWZSh0LG4sXCIyLjJcIikpO2Nhc2UgMzpyZXR1cm4gZS5hYnJ1cHQoXCJyZXR1cm5cIixlLnNlbnQpO2Nhc2UgNjp0aHJvdyBlLnByZXY9NixlLnQwPWUuY2F0Y2goMCksbmV3IEVycm9yKFtcIkZhaWxlZCB0byBpbml0aWFsaXplIGNsaWVudFwiLEpTT04uc3RyaW5naWZ5KGUudDB8fHZvaWQgMCx2b2lkIDAsMildLmZpbHRlcihCb29sZWFuKS5qb2luKFwiOiBcIikpO2Nhc2UgOTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSksZSxudWxsLFtbMCw2XV0pfSkpKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciB6ZT1mdW5jdGlvbihlLHQpe3JldHVybiByPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlKTtyZXR1cm4gT2JqZWN0LmVudHJpZXModCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQ9YShlLDIpLG49dFswXSxvPXRbMV07cmV0dXJuIHIuc2V0QXR0cmlidXRlKG4sbyl9KSkscn0oZSx0KSxkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHIpO3ZhciByfSxYZT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGUuYWRkRXZlbnRMaXN0ZW5lcih0LHIpfTtmdW5jdGlvbiBRZShlLHQpe3ZhciByPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKG49bi5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSksci5wdXNoLmFwcGx5KHIsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gWmUoZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIHI9bnVsbCE9YXJndW1lbnRzW3RdP2FyZ3VtZW50c1t0XTp7fTt0JTI/UWUoT2JqZWN0KHIpLCEwKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPKGUsdCxyW3RdKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHIpKTpRZShPYmplY3QocikpLmZvckVhY2goKGZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLHQpKX0pKX1yZXR1cm4gZX12YXIgSmU9XCJDYW4ndCBsb2FkIFByaW1lciBTREtcIiwkZT1cIlwiLmNvbmNhdChKZSxcIidzIFN0eWxlc2hlZXRcIik7dmFyIHFlLGV0PWZ1bmN0aW9uKGUsdCxyLG4sbyl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihpLGMpe3ZhciBhPXR0KGUscix0KXx8emUoZSxaZShaZSh7fSxuKSx7fSxPKHt9LHIsdCkpKTtYZShhLFwibG9hZFwiLChmdW5jdGlvbigpe3JldHVybiBpKCl9KSksWGUoYSxcImVycm9yXCIsKGZ1bmN0aW9uKCl7bnVsbD09YXx8YS5yZW1vdmUoKSxjKG5ldyBFcnJvcihvKSl9KSl9KSl9LHR0PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbj1cIlwiLmNvbmNhdChlLFwiW1wiKS5jb25jYXQodCwnXj1cIicpLmNvbmNhdChyLCdcIl0nKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG4pO3ZhciBufTtmdW5jdGlvbiBydCgpe3JldHVybiBudC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gbnQoKXtyZXR1cm4obnQ9RShvKCkubWFyaygoZnVuY3Rpb24gZSgpe3JldHVybiBvKCkud3JhcCgoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6aWYoIXFlKXtlLm5leHQ9MjticmVha31yZXR1cm4gZS5hYnJ1cHQoXCJyZXR1cm5cIixxZSk7Y2FzZSAyOnJldHVybiBxZT1Qcm9taXNlLmFsbChbYXQoKSxjdCgpXSkudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSwxKVswXX0pKSxlLmFicnVwdChcInJldHVyblwiLHFlKTtjYXNlIDQ6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0pLGUpfSkpKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBvdCxpdCxjdD1mdW5jdGlvbigpe3JldHVybiBlPVwiaHR0cHM6Ly9zZGsucHJpbWVyLmlvL3dlYi92Mi4zMy40L0NoZWNrb3V0LmNzc1wiLEFycmF5LmZyb20oZG9jdW1lbnQuc3R5bGVTaGVldHMpLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmhyZWY9PT1lfSkpP1Byb21pc2UucmVzb2x2ZSgpOmV0KFwibGlua1wiLGUsXCJocmVmXCIse3JlbDpcInN0eWxlc2hlZXRcIn0sJGUpO3ZhciBlfSxhdD1mdW5jdGlvbigpe3JldHVybihlPVwiaHR0cHM6Ly9zZGsucHJpbWVyLmlvL3dlYi92Mi4zMy40L1ByaW1lckNvcmVTREsubWluLmpzXCIsdD1cInNjcmlwdFwiLHR0KHQsXCJzcmNcIixlKSYmd2luZG93Ll9fUHJpbWVyP1Byb21pc2UucmVzb2x2ZSgpOmV0KHQsZSxcInNyY1wiLHthc3luYzpcIlwiLGNyb3Nzb3JpZ2luOlwiYW5vbnltb3VzXCJ9LEplKSkudGhlbigoZnVuY3Rpb24oKXt2YXIgZT13aW5kb3cuX19QcmltZXI7cmV0dXJuIGRlbGV0ZSB3aW5kb3cuX19QcmltZXIsZX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7dGhyb3cgcWU9dm9pZCAwLGV9KSk7dmFyIGUsdH0sdXQ9cHQoXCJjcmVhdGVIZWFkbGVzc1wiKSxzdD1wdChcInNob3dFeHByZXNzQ2hlY2tvdXRcIiksRXQ9cHQoXCJzaG93VW5pdmVyc2FsQ2hlY2tvdXRcIiksQXQ9cHQoXCJzaG93VmF1bHRNYW5hZ2VyXCIpLF90PVwiTE9BRF9QRVJGT1JNQU5DRVwiLGZ0PUsoKSxsdD1DKHtjaGVja291dFNlc3Npb25JZDpmdH0pO2Z1bmN0aW9uIHB0KGUpe3JldHVybiBFKG8oKS5tYXJrKChmdW5jdGlvbiB0KCl7dmFyIHIsbixpLGMscyxFLEEsXyxmLGwscCxPLFA9YXJndW1lbnRzO3JldHVybiBvKCkud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6Zm9yKGk9UC5sZW5ndGgsYz1uZXcgQXJyYXkoaSkscz0wO3M8aTtzKyspY1tzXT1QW3NdO3JldHVybiBFPWNbMF0sQT1jWzFdLF89Yy5zbGljZSgyKSxsdC5zZGtGdW5jdGlvbkV2ZW50KHtuYW1lOmUscGFyYW1zOltFLEFdLmNvbmNhdCh1KF8pKX0pLGx0Lm1lc3NhZ2VFdmVudCh7bWVzc2FnZTpcImNyZWF0ZVwiLG1lc3NhZ2VUeXBlOl90LG5vdzpudWxsPT09KHI9KG49cGVyZm9ybWFuY2UpLm5vdyl8fHZvaWQgMD09PXI/dm9pZCAwOnIuY2FsbChuKX0pLHQubmV4dD02LFByb21pc2UuYWxsKFtPdChFKSxydCgpXSk7Y2FzZSA2OnJldHVybiBmPXQuc2VudCxsPWEoZiwyKSxwPWxbMF0sTz1sWzFdLHQuYWJydXB0KFwicmV0dXJuXCIsT1tlXShwLGZ0LEUsQSkpO2Nhc2UgMTE6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQpfSkpKX1mdW5jdGlvbiBPdChlKXtyZXR1cm4gUHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIFB0KCl7cmV0dXJuKFB0PUUobygpLm1hcmsoKGZ1bmN0aW9uIGUodCl7dmFyIHIsbixpLGMsYSx1LHMsRSxBLF87cmV0dXJuIG8oKS53cmFwKChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyZXR1cm4gcj1iZSh0KSxuPXIuYWNjZXNzVG9rZW4saT1yLmNvbmZpZ3VyYXRpb25VcmwsYz1yLmFuYWx5dGljc1VybFYyLGx0PUMoe2NoZWNrb3V0U2Vzc2lvbklkOmZ0LHVybDpjfSksYT1cIlwiLmNvbmNhdChpLFwiLz93aXRoRGlzcGxheU1ldGFkYXRhPXRydWVcIiksdT1LKCkscz17bWV0aG9kOlwiZ2V0XCIsdXJsOmF9LGx0Lm5ldHdvcmtDYWxsRXZlbnQoUSh1LHMpKSxlLm5leHQ9OCxLZShuLGksZnQpO2Nhc2UgODpyZXR1cm4gRT1lLnNlbnQsQT1FLnByaW1lckFjY291bnRJZCxfPUUuY2xpZW50U2Vzc2lvbi5jbGllbnRTZXNzaW9uSWQsKGx0PUMoe2NoZWNrb3V0U2Vzc2lvbklkOmZ0LGNsaWVudFNlc3Npb25JZDpfLHByaW1lckFjY291bnRJZDpBLHVybDpjfSkpLm5ldHdvcmtDYWxsRXZlbnQoUSh1LHMse2RhdGE6RX0pKSxlLmFicnVwdChcInJldHVyblwiLEUpO2Nhc2UgMTQ6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0pLGUpfSkpKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfWx0Lm1lc3NhZ2VFdmVudCh7bWVzc2FnZTpcInBhcnNlZFwiLG1lc3NhZ2VUeXBlOl90LG5vdzpudWxsPT09KG90PShpdD1wZXJmb3JtYW5jZSkubm93KXx8dm9pZCAwPT09b3Q/dm9pZCAwOm90LmNhbGwoaXQpfSk7dmFyIFR0LGh0LGR0LFJ0LE50LHl0LER0LEl0LHZ0LG10LEN0LFN0PWZ1bmN0aW9uKCl7cmV0dXJuIHJ0KCkudGhlbigoZnVuY3Rpb24oKXt9KSl9OyFmdW5jdGlvbihlKXtlLkxPQURJTkc9XCJMb2FkaW5nXCIsZS5USFJFRV9EUz1cIlVuaXZlcnNhbENoZWNrb3V0LzNkc1wiLGUuQ0hPT1NFX1BBWU1FTlRfTUVUSE9EPVwiVW5pdmVyc2FsQ2hlY2tvdXQvSG9tZVwiLGUuTUFOQUdFX1BBWU1FTlRfTUVUSE9EUz1cIlZhdWx0TWFuYWdlci9Ib21lXCIsZS5ESVJFQ1RfREVCSVRfRk9STT1cIkRpcmVjdERlYml0L0Zvcm1cIixlLkRJUkVDVF9ERUJJVF9NQU5EQVRFPVwiRGlyZWN0RGViaXQvTWFuZGF0ZVwiLGUuQ1JFRElUX0NBUkRfRk9STT1cIkNyZWRpdENhcmQvRm9ybVwiLGUuU1VDQ0VTU19QQVlNRU5UX01FVEhPRD1cIlVuaXZlcnNhbENoZWNrb3V0L1N1Y2Nlc3MvUGF5bWVudE1ldGhvZFwiLGUuU1VDQ0VTU19DSEVDSz1cIlVuaXZlcnNhbENoZWNrb3V0L1N1Y2Nlc3MvQ2hlY2tcIn0oVHR8fChUdD17fSkpLGZ1bmN0aW9uKGUpe2UuUk9PVD1cInByaW1lci1jaGVja291dFwiLGUuUk9PVF9DT05URU5UPVwicHJpbWVyLWNoZWNrb3V0LWNvbnRlbnRcIixlLlNVQk1JVF9CVVRUT049XCJwcmltZXItY2hlY2tvdXQtc3VibWl0LWJ1dHRvblwiLGUuVEhSRUVfRFNfTU9EQUw9XCJwcmltZXItY2hlY2tvdXQtM2RzLW1vZGFsXCIsZS5WQVVMVD1cInByaW1lci1jaGVja291dC12YXVsdFwiLGUuVkFVTFRfSU5MSU5FPVwicHJpbWVyLWNoZWNrb3V0LXZhdWx0LWlubGluZVwiLGUuTkFWSUdBVEVfUEFZTUVOVF9NRVRIT0RTPVwicHJpbWVyLWNoZWNrb3V0LW5hdmlnYXRlLXRvLXBheW1lbnQtbWV0aG9kc1wiLGUuRElWSURFUj1cInByaW1lci1jaGVja291dC1wYXltZW50LW1ldGhvZC1kaXZpZGVyXCIsZS5BUE1fQlVUVE9OUz1cInByaW1lci1jaGVja291dC1hcG0tYnV0dG9uLWNvbnRhaW5lclwiLGUuQ0FSREhPTERFUl9OQU1FPVwicHJpbWVyLWNoZWNrb3V0LWNhcmRob2xkZXItbmFtZVwiLGUuQ0FSREhPTERFUl9OQU1FX0lOUFVUPVwicHJpbWVyLWNoZWNrb3V0LWNhcmQtY2FyZGhvbGRlci1uYW1lLWlucHV0XCIsZS5BQ1RJT05TPVwicHJpbWVyLWNoZWNrb3V0LWFjdGlvbnNcIixlLkFDVElPTlNfTUVOVT1cInByaW1lci1jaGVja291dC1hY3Rpb25zLW1lbnVcIixlLlNBVkVfUEFZTUVOVF9NRVRIT0RfQ0hFQ0tCT1g9XCJwcmltZXItY2hlY2tvdXQtc2F2ZS1wYXltZW50LW1ldGhvZC1pbnB1dFwiLGUuU0FWRV9QQVlNRU5UX01FVEhPRF9GSUVMRD1cInByaW1lci1jaGVja291dC1zYXZlLXBheW1lbnQtbWV0aG9kLWZpZWxkXCIsZS5TQVZFRF9QQVlNRU5UX01FVEhPRFNfRU1QVFk9XCJwcmltZXItY2hlY2tvdXQtc2F2ZWQtcGF5bWVudC1tZXRob2RzLWVtcHR5LXRleHRcIixlLkNBUkRfRk9STT1cInByaW1lci1jaGVja291dC1jYXJkLWZvcm1cIixlLkREX1NXSVRDSD1cInByaW1lci1jaGVja291dC1zd2l0Y2gtZGQtaW5wdXRzXCIsZS5ERF9JQkFOX0ZJRUxEPVwicHJpbWVyLWNoZWNrb3V0LWRkLWliYW4tZmllbGRcIixlLkREX0xPQ0FMX0ZJRUxEPVwicHJpbWVyLWNoZWNrb3V0LWRkLWxvY2FsLWZpZWxkc1wiLGUuRERfQ1VTVE9NRVJfTkFNRV9JTlBVVD1cInByaW1lci1jaGVja291dC1kZC1jdXN0b21lci1uYW1lLWlucHV0XCIsZS5ERF9DVVNUT01FUl9FTUFJTF9JTlBVVD1cInByaW1lci1jaGVja291dC1kZC1jdXN0b21lci1lbWFpbC1pbnB1dFwiLGUuRERfQ1VTVE9NRVJfQUREUkVTU19MSU5FMT1cInByaW1lci1jaGVja291dC1kZC1jdXN0b21lci1hZGRyZXNzLWlucHV0XCIsZS5ERF9DVVNUT01FUl9BRERSRVNTX0xJTkUyPVwicHJpbWVyLWNoZWNrb3V0LWRkLWN1c3RvbWVyLWFkZHJlc3MtbGluZTItaW5wdXRcIixlLkREX0NVU1RPTUVSX0FERFJFU1NfQ0lUWT1cInByaW1lci1jaGVja291dC1kZC1jdXN0b21lci1jaXR5LWlucHV0XCIsZS5ERF9DVVNUT01FUl9BRERSRVNTX1BPU1RBTF9DT0RFPVwicHJpbWVyLWNoZWNrb3V0LWRkLWN1c3RvbWVyLXBvc3RhbC1jb2RlLWlucHV0XCIsZS5ERF9JQkFOX0lOUFVUPVwicHJpbWVyLWNoZWNrb3V0LWRkLWliYW4taW5wdXRcIixlLkREX0FDQ09VTlRfTlVNQkVSX0lOUFVUPVwicHJpbWVyLWNoZWNrb3V0LWRkLWFjY291bnQtbnVtYmVyLWlucHV0XCIsZS5ERF9CQU5LX0NPREVfSU5QVVQ9XCJwcmltZXItY2hlY2tvdXQtZGQtYmFuay1jb2RlLWlucHV0XCIsZS5ERF9CUkFOQ0hfQ09ERV9JTlBVVD1cInByaW1lci1jaGVja291dC1kZC1icmFuY2gtY29kZS1pbnB1dFwiLGUuRERfTUFOREFURV9TTUFMTF9QUklOVD1cInByaW1lci1jaGVja291dC1zbWFsbC1wcmludFwiLGUuRVJST1JfTUVTU0FHRT1cInByaW1lci1jaGVja291dC1lcnJvci1tZXNzYWdlXCJ9KGh0fHwoaHQ9e30pKSxmdW5jdGlvbihlKXtlLlRPS0VOPVwiUHJpbWVyQ2hlY2tvdXRfX3Rva2VuXCIsZS5ISURERU49XCJQcmltZXJDaGVja291dC0taGlkZGVuXCIsZS5GT0NVU0VEPVwiUHJpbWVyQ2hlY2tvdXQtLWZvY3VzZWRcIixlLlNFTEVDVEVEPVwiUHJpbWVyQ2hlY2tvdXQtLXNlbGVjdGVkXCIsZS5MT0FESU5HPVwiUHJpbWVyQ2hlY2tvdXQtLWxvYWRpbmdcIixlLkVSUk9SPVwiUHJpbWVyQ2hlY2tvdXQtLWVycm9yXCIsZS5DQVJEX1RZUEU9XCJQcmltZXJDaGVja291dF9fY2FyZFR5cGVcIixlLlNBVkVEX1BBWU1FTlRfTUVUSE9EPVwiUHJpbWVyQ2hlY2tvdXRfX3NhdmVkUGF5bWVudE1ldGhvZFwiLGUuU0FWRURfUEFZTUVOVF9NRVRIT0RfQ09OVEFJTkVSPVwiUHJpbWVyQ2hlY2tvdXRfX3NhdmVkUGF5bWVudE1ldGhvZENvbnRhaW5lclwiLGUuQVBNX0JVVFRPTj1cIlByaW1lckNoZWNrb3V0X19hcG1CdXR0b25cIixlLkVESVRfQlVUVE9OPVwiUHJpbWVyQ2hlY2tvdXRfX2VkaXRCdXR0b25cIixlLk1FTlU9XCJQcmltZXJDaGVja291dF9fZHJvcERvd25NZW51XCIsZS5NRU5VX0lURU09XCJQcmltZXJDaGVja291dF9fZHJvcERvd25NZW51SXRlbVwiLGUuUEFZTUVOVF9NRVRIT0RfTUVOVV9JVEVNPVwiUHJpbWVyQ2hlY2tvdXRfX3BheW1lbnRNZXRob2REcm9wRG93bk1lbnVJdGVtXCIsZS5ERUxFVEVfUEFZTUVOVF9NRVRIT0RfQlVUVE9OPVwiUHJpbWVyQ2hlY2tvdXRfX3BheW1lbnRNZXRob2REcm9wRG93bk1lbnVJdGVtX19kZWxldGVCdXR0b25cIixlLkVOVEVSPVwiUHJpbWVyQ2hlY2tvdXQtLWVudGVyXCIsZS5FTlRFUklORz1cIlByaW1lckNoZWNrb3V0LS1lbnRlcmluZ1wiLGUuRU5URVJFRD1cIlByaW1lckNoZWNrb3V0LS1lbnRlcmVkXCIsZS5FWElUPVwiUHJpbWVyQ2hlY2tvdXQtLWV4aXRcIixlLkVYSVRJTkc9XCJQcmltZXJDaGVja291dC0tZXhpdGluZ1wiLGUuRVhJVEVEPVwiUHJpbWVyQ2hlY2tvdXQtLWV4aXRlZFwifShkdHx8KGR0PXt9KSksZnVuY3Rpb24oZSl7ZS5DSEVDS09VVD1cIkNIRUNLT1VUXCIsZS5FWFBSRVNTX0NIRUNLT1VUPVwiRVhQUkVTU19DSEVDS09VVFwiLGUuSEVBRExFU1NfQ0hFQ0tPVVQ9XCJIRUFETEVTU19DSEVDS09VVFwiLGUuTUFOQUdFX1BBWU1FTlRfTUVUSE9EUz1cIk1BTkFHRV9QQVlNRU5UX01FVEhPRFNcIixlLlNJTkdMRV9QQVlNRU5UX01FVEhPRF9DSEVDS09VVD1cIlNJTkdMRV9QQVlNRU5UX01FVEhPRF9DSEVDS09VVFwifShSdHx8KFJ0PXt9KSksZnVuY3Rpb24oZSl7ZS5ERUZBVUxUPVwiREVGQVVMVFwiLGUuUFJFRkVSX1ZBVUxUPVwiUFJFRkVSX1ZBVUxUXCJ9KE50fHwoTnQ9e30pKSxmdW5jdGlvbihlKXtlLlRPS0VOSVpFX1NUQVJURUQ9XCJ0b2tlbml6ZS1zdGFydGVkXCIsZS5UT0tFTklaRV9FUlJPUj1cInRva2VuaXplLWVycm9yXCIsZS5UT0tFTklaRV9TVUNDRVNTPVwidG9rZW5pemUtc3VjY2Vzc1wiLGUuVE9LRU5JWkVfRElEX05PVF9TVEFSVD1cInRva2VuaXplLWRpZC1ub3Qtc3RhcnRcIn0oeXR8fCh5dD17fSkpLGZ1bmN0aW9uKGUpe2UuU1VDQ0VTUz1cIkFVVEhfU1VDQ0VTU1wiLGUuRkFJTEVEPVwiQVVUSF9GQUlMRURcIixlLlNLSVBQRUQ9XCJTS0lQUEVEXCIsZS5DSEFMTEVOR0U9XCJDSEFMTEVOR0VcIn0oRHR8fChEdD17fSkpLGZ1bmN0aW9uKGUpe2UuV09STERQQVlfSURFQUw9XCJXT1JMRFBBWV9JREVBTFwiLGUuQURZRU5fS0xBUk5BPVwiQURZRU5fS0xBUk5BXCIsZS5BRFlFTl9CQU5DT05UQUNUX0NBUkQ9XCJBRFlFTl9CQU5DT05UQUNUX0NBUkRcIixlLlBBWV9OTF9LQUFSVERJUkVDVD1cIlBBWV9OTF9LQUFSVERJUkVDVFwiLGUuQURZRU5fRVBTPVwiQURZRU5fRVBTXCIsZS5BRFlFTl9CQU5DT05UQUNUX1BBWUNPTklRPVwiQURZRU5fQkFOQ09OVEFDVF9QQVlDT05JUVwiLGUuT01JU0VfUFJPTVBUUEFZPVwiT01JU0VfUFJPTVBUUEFZXCIsZS5PTUlTRV9UUlVFTU9ORVk9XCJPTUlTRV9UUlVFTU9ORVlcIixlLkFEWUVOX01VTFRJQkFOQ089XCJBRFlFTl9NVUxUSUJBTkNPXCIsZS5QQUNZUEFZX1dFQ0hBVD1cIlBBQ1lQQVlfV0VDSEFUXCIsZS5QQUNZUEFZX0FMSVBBWT1cIlBBQ1lQQVlfQUxJUEFZXCIsZS5BRFlFTl9NQldBWT1cIkFEWUVOX01CV0FZXCIsZS5YRU5ESVRfREFOQT1cIlhFTkRJVF9EQU5BXCIsZS5YRU5ESVRfU0hPUEVFUEFZPVwiWEVORElUX1NIT1BFRVBBWVwiLGUuQURZRU5fUEFZU0hPUD1cIkFEWUVOX1BBWVNIT1BcIixlLkFEWUVOX1BBWVRSQUlMPVwiQURZRU5fUEFZVFJBSUxcIixlLkNMRUFSUEFZPVwiQ0xFQVJQQVlcIixlLlJBUFlEX0ZBU1Q9XCJSQVBZRF9GQVNUXCIsZS5SQVBZRF9QUk9NUFRQQVk9XCJSQVBZRF9QUk9NUFRQQVlcIixlLlJBUFlEX0dDQVNIPVwiUkFQWURfR0NBU0hcIixlLlJBUFlEX1BPTEk9XCJSQVBZRF9QT0xJXCIsZS5SQVBZRF9HUkFCUEFZPVwiUkFQWURfR1JBQlBBWVwiLGUuUFJJTUVSX1BBWVBBTD1cIlBSSU1FUl9QQVlQQUxcIixlLlRXT0MyUD1cIlRXT0MyUFwiLGUuTkVUUz1cIk5FVFNcIixlLlNUUklQRV9HSVJPUEFZPVwiU1RSSVBFX0dJUk9QQVlcIixlLk1PTExJRV9HSVJPUEFZPVwiTU9MTElFX0dJUk9QQVlcIixlLk1PTExJRV9FUFM9XCJNT0xMSUVfRVBTXCIsZS5QQVlfTkxfRVBTPVwiUEFZX05MX0VQU1wiLGUuUEFZX05MX1AyND1cIlBBWV9OTF9QMjRcIixlLk1PTExJRV9QMjQ9XCJNT0xMSUVfUDI0XCIsZS5NT0xMSUVfU09GT1JUPVwiTU9MTElFX1NPRk9SVFwiLGUuQ09JTkJBU0U9XCJDT0lOQkFTRVwiLGUuT1BFTk5PREU9XCJPUEVOTk9ERVwiLGUuTU9MTElFX0dJRlRfQ0FSRD1cIk1PTExJRV9HSUZUQ0FSRFwiLGUuWEZFUlNfUEFZTk9XPVwiWEZFUlNfUEFZTk9XXCIsZS5DQVJEPVwiUEFZTUVOVF9DQVJEXCIsZS5BUFBMRV9QQVk9XCJBUFBMRV9QQVlcIixlLkdPT0dMRV9QQVk9XCJHT09HTEVfUEFZXCIsZS5QQVlQQUw9XCJQQVlQQUxfT1JERVJcIixlLlBBWVBBTF9WQVVMVEVEPVwiUEFZUEFMX0JJTExJTkdfQUdSRUVNRU5UXCIsZS5HT19DQVJETEVTUz1cIkdPQ0FSRExFU1NcIixlLlBBWV9OTF9JREVBTD1cIlBBWV9OTF9JREVBTFwiLGUuUEFZX05MX1NPRk9SVF9CQU5LSU5HPVwiUEFZX05MX1NPRk9SVF9CQU5LSU5HXCIsZS5QQVlfTkxfQkFOQ09OVEFDVD1cIlBBWV9OTF9CQU5DT05UQUNUXCIsZS5QQVlfTkxfUEFZUEFMPVwiUEFZX05MX1BBWVBBTFwiLGUuUEFZX05MX0NSRURJVF9UUkFOU0ZFUj1cIlBBWV9OTF9DUkVESVRfVFJBTlNGRVJcIixlLlBBWV9OTF9ESVJFQ1RfREVCSVQ9XCJQQVlfTkxfRElSRUNUX0RFQklUXCIsZS5QQVlfTkxfR0lST1BBWT1cIlBBWV9OTF9HSVJPUEFZXCIsZS5QQVlfTkxfUEFZQ09OSVE9XCJQQVlfTkxfUEFZQ09OSVFcIixlLkhPT0xBSD1cIkhPT0xBSFwiLGUuQURZRU5fQkxJSz1cIkFEWUVOX0JMSUtcIixlLkFEWUVOX1ZJUFBTPVwiQURZRU5fVklQUFNcIixlLkFEWUVOX0dJUk9QQVk9XCJBRFlFTl9HSVJPUEFZXCIsZS5BRFlFTl9TT0ZPUlQ9XCJBRFlFTl9TT0ZPUlRcIixlLkFEWUVOX1RSVVNUTFk9XCJBRFlFTl9UUlVTVExZXCIsZS5BRFlFTl9BTElQQVk9XCJBRFlFTl9BTElQQVlcIixlLkFEWUVOX1RXSU5UPVwiQURZRU5fVFdJTlRcIixlLkFEWUVOX01PQklMRVBBWT1cIkFEWUVOX01PQklMRVBBWVwiLGUuTU9MTElFX0JBTkNPTlRBQ1Q9XCJNT0xMSUVfQkFOQ09OVEFDVFwiLGUuTU9MTElFX0lERUFMPVwiTU9MTElFX0lERUFMXCIsZS5CVUNLQVJPT19HSVJPUEFZPVwiQlVDS0FST09fR0lST1BBWVwiLGUuQlVDS0FST09fRVBTPVwiQlVDS0FST09fRVBTXCIsZS5CVUNLQVJPT19TT0ZPUlQ9XCJCVUNLQVJPT19TT0ZPUlRcIixlLkJVQ0tBUk9PX0JBTkNPTlRBQ1Q9XCJCVUNLQVJPT19CQU5DT05UQUNUXCIsZS5CVUNLQVJPT19JREVBTD1cIkJVQ0tBUk9PX0lERUFMXCIsZS5BVE9NRT1cIkFUT01FXCJ9KEl0fHwoSXQ9e30pKSxmdW5jdGlvbihlKXtlLldPUkxEUEFZX0lERUFMPVwiV09STERQQVlfSURFQUxcIixlLkFEWUVOX0tMQVJOQT1cIkFEWUVOX0tMQVJOQVwiLGUuQURZRU5fQkFOQ09OVEFDVF9DQVJEPVwiQURZRU5fQkFOQ09OVEFDVF9DQVJEXCIsZS5QQVlfTkxfS0FBUlRESVJFQ1Q9XCJQQVlfTkxfS0FBUlRESVJFQ1RcIixlLkFEWUVOX0VQUz1cIkFEWUVOX0VQU1wiLGUuQURZRU5fQkFOQ09OVEFDVF9QQVlDT05JUT1cIkFEWUVOX0JBTkNPTlRBQ1RfUEFZQ09OSVFcIixlLk9NSVNFX1BST01QVFBBWT1cIk9NSVNFX1BST01QVFBBWVwiLGUuT01JU0VfVFJVRU1PTkVZPVwiT01JU0VfVFJVRU1PTkVZXCIsZS5BRFlFTl9NVUxUSUJBTkNPPVwiQURZRU5fTVVMVElCQU5DT1wiLGUuUEFDWVBBWV9XRUNIQVQ9XCJQQUNZUEFZX1dFQ0hBVFwiLGUuUEFDWVBBWV9BTElQQVk9XCJQQUNZUEFZX0FMSVBBWVwiLGUuQURZRU5fTUJXQVk9XCJBRFlFTl9NQldBWVwiLGUuWEVORElUX0RBTkE9XCJYRU5ESVRfREFOQVwiLGUuWEVORElUX1NIT1BFRVBBWT1cIlhFTkRJVF9TSE9QRUVQQVlcIixlLkFEWUVOX1BBWVNIT1A9XCJBRFlFTl9QQVlTSE9QXCIsZS5BRFlFTl9QQVlUUkFJTD1cIkFEWUVOX1BBWVRSQUlMXCIsZS5DTEVBUlBBWT1cIkNMRUFSUEFZXCIsZS5SQVBZRF9GQVNUPVwiUkFQWURfRkFTVFwiLGUuUkFQWURfUFJPTVBUUEFZPVwiUkFQWURfUFJPTVBUUEFZXCIsZS5SQVBZRF9HQ0FTSD1cIlJBUFlEX0dDQVNIXCIsZS5SQVBZRF9QT0xJPVwiUkFQWURfUE9MSVwiLGUuUkFQWURfR1JBQlBBWT1cIlJBUFlEX0dSQUJQQVlcIixlLlBSSU1FUl9QQVlQQUw9XCJQUklNRVJfUEFZUEFMXCIsZS5UV09DMlA9XCJUV09DMlBcIixlLk5FVFM9XCJORVRTXCIsZS5TVFJJUEVfR0lST1BBWT1cIlNUUklQRV9HSVJPUEFZXCIsZS5NT0xMSUVfR0lST1BBWT1cIk1PTExJRV9HSVJPUEFZXCIsZS5NT0xMSUVfRVBTPVwiTU9MTElFX0VQU1wiLGUuUEFZX05MX0VQUz1cIlBBWV9OTF9FUFNcIixlLlBBWV9OTF9QMjQ9XCJQQVlfTkxfUDI0XCIsZS5NT0xMSUVfUDI0PVwiTU9MTElFX1AyNFwiLGUuTU9MTElFX1NPRk9SVD1cIk1PTExJRV9TT0ZPUlRcIixlLkNPSU5CQVNFPVwiQ09JTkJBU0VcIixlLk9QRU5OT0RFPVwiT1BFTk5PREVcIixlLk1PTExJRV9HSUZUX0NBUkQ9XCJNT0xMSUVfR0lGVENBUkRcIixlLlhGRVJTX1BBWU5PVz1cIlhGRVJTX1BBWU5PV1wiLGUuUEFZTUVOVF9DQVJEPVwiUEFZTUVOVF9DQVJEXCIsZS5BUFBMRV9QQVk9XCJBUFBMRV9QQVlcIixlLkdPT0dMRV9QQVk9XCJHT09HTEVfUEFZXCIsZS5QQVlQQUw9XCJQQVlQQUxcIixlLkdPX0NBUkRMRVNTPVwiR09DQVJETEVTU1wiLGUuS0xBUk5BPVwiS0xBUk5BXCIsZS5QQVlfTkxfSURFQUw9XCJQQVlfTkxfSURFQUxcIixlLlBBWV9OTF9TT0ZPUlRfQkFOS0lORz1cIlBBWV9OTF9TT0ZPUlRfQkFOS0lOR1wiLGUuUEFZX05MX0JBTkNPTlRBQ1Q9XCJQQVlfTkxfQkFOQ09OVEFDVFwiLGUuUEFZX05MX1BBWVBBTD1cIlBBWV9OTF9QQVlQQUxcIixlLlBBWV9OTF9DUkVESVRfVFJBTlNGRVI9XCJQQVlfTkxfQ1JFRElUX1RSQU5TRkVSXCIsZS5QQVlfTkxfRElSRUNUX0RFQklUPVwiUEFZX05MX0RJUkVDVF9ERUJJVFwiLGUuUEFZX05MX0dJUk9QQVk9XCJQQVlfTkxfR0lST1BBWVwiLGUuUEFZX05MX1BBWUNPTklRPVwiUEFZX05MX1BBWUNPTklRXCIsZS5IT09MQUg9XCJIT09MQUhcIixlLkFEWUVOX0JMSUs9XCJBRFlFTl9CTElLXCIsZS5BRFlFTl9NT0JJTEVQQVk9XCJBRFlFTl9NT0JJTEVQQVlcIixlLkFEWUVOX1ZJUFBTPVwiQURZRU5fVklQUFNcIixlLkFEWUVOX0dJUk9QQVk9XCJBRFlFTl9HSVJPUEFZXCIsZS5BRFlFTl9TT0ZPUlQ9XCJBRFlFTl9TT0ZPUlRcIixlLkFEWUVOX1RSVVNUTFk9XCJBRFlFTl9UUlVTVExZXCIsZS5BRFlFTl9BTElQQVk9XCJBRFlFTl9BTElQQVlcIixlLkFEWUVOX1RXSU5UPVwiQURZRU5fVFdJTlRcIixlLkFEWUVOX0JBTktfVFJBTlNGRVI9XCJBRFlFTl9CQU5LX1RSQU5TRkVSXCIsZS5NT0xMSUVfQkFOQ09OVEFDVD1cIk1PTExJRV9CQU5DT05UQUNUXCIsZS5NT0xMSUVfSURFQUw9XCJNT0xMSUVfSURFQUxcIixlLkJVQ0tBUk9PX0dJUk9QQVk9XCJCVUNLQVJPT19HSVJPUEFZXCIsZS5CVUNLQVJPT19FUFM9XCJCVUNLQVJPT19FUFNcIixlLkJVQ0tBUk9PX1NPRk9SVD1cIkJVQ0tBUk9PX1NPRk9SVFwiLGUuQlVDS0FST09fQkFOQ09OVEFDVD1cIkJVQ0tBUk9PX0JBTkNPTlRBQ1RcIixlLkJVQ0tBUk9PX0lERUFMPVwiQlVDS0FST09fSURFQUxcIixlLkFUT01FPVwiQVRPTUVcIn0odnR8fCh2dD17fSkpLGZ1bmN0aW9uKGUpe2UuUEFZTUVOVF9DQVJEPVwiUEFZTUVOVF9DQVJEXCIsZS5BRFlFTl9CQU5DT05UQUNUX0NBUkQ9XCJBRFlFTl9CQU5DT05UQUNUX0NBUkRcIn0obXR8fChtdD17fSkpLGZ1bmN0aW9uKGUpe2UuU0lOR0xFX1VTRT1cIlNJTkdMRV9VU0VcIixlLk1VTFRJX1VTRT1cIk1VTFRJX1VTRVwifShDdHx8KEN0PXt9KSk7dmFyIEx0O08oe30sSXQuUEFZUEFMX1ZBVUxURUQsdnQuUEFZUEFMKTtmdW5jdGlvbiBZdCgpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIGd0KGUsdCxyKXtyZXR1cm4oWXQoKT9SZWZsZWN0LmNvbnN0cnVjdDpmdW5jdGlvbihlLHQscil7dmFyIG49W251bGxdO24ucHVzaC5hcHBseShuLHQpO3ZhciBvPW5ldyhGdW5jdGlvbi5iaW5kLmFwcGx5KGUsbikpO3JldHVybiByJiZrKG8sci5wcm90b3R5cGUpLG99KS5hcHBseShudWxsLGFyZ3VtZW50cyl9ZnVuY3Rpb24gTXQoZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgTWFwP25ldyBNYXA6dm9pZCAwO3JldHVybiBmdW5jdGlvbihlKXtpZihudWxsPT09ZXx8KGUsLTE9PT1GdW5jdGlvbi50b1N0cmluZy5jYWxsKHIpLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpKSlyZXR1cm4gZTt2YXIgcjtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtpZih2b2lkIDAhPT10KXtpZih0LmhhcyhlKSlyZXR1cm4gdC5nZXQoZSk7dC5zZXQoZSxuKX1mdW5jdGlvbiBuKCl7cmV0dXJuIGd0KGUsYXJndW1lbnRzLHgodGhpcykuY29uc3RydWN0b3IpfXJldHVybiBuLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6bixlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxrKG4sZSl9KGUpfWZ1bmN0aW9uIGJ0KGUsdCl7dmFyIHI9T2JqZWN0LmtleXMoZSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTt0JiZuLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KS5lbnVtZXJhYmxlfSkpLHIucHVzaC5hcHBseShyLG4pfXJldHVybiByfWZ1bmN0aW9uIHd0KGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciByPW51bGwhPWFyZ3VtZW50c1t0XT9hcmd1bWVudHNbdF06e307dCUyP2J0KE9iamVjdChyKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7TyhlLHQsclt0XSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhyKSk6YnQoT2JqZWN0KHIpKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KSl9KSl9cmV0dXJuIGV9ZnVuY3Rpb24gVXQoZSl7dmFyIHQ9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHIsbj14KGUpO2lmKHQpe3ZhciBvPXgodGhpcykuY29uc3RydWN0b3I7UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gSCh0aGlzLHIpfX0hZnVuY3Rpb24oZSl7ZS5JTklUSUFMSVpBVElPTl9FUlJPUj1cIklOSVRJQUxJWkFUSU9OX0VSUk9SXCIsZS5OT19QQVlNRU5UX01FVEhPRFM9XCJOT19QQVlNRU5UX01FVEhPRFNcIixlLlBSSU1FUl9URUFSRE9XTj1cIlBSSU1FUl9URUFSRE9XTlwiLGUuUFJJTUVSX1NFUlZFUl9FUlJPUj1cIlBSSU1FUl9TRVJWRVJfRVJST1JcIixlLlRIUkVFX0RTX1NFVFVQX0VSUk9SPVwiVEhSRUVfRFNfU0VUVVBfRVJST1JcIixlLlRIUkVFX0RTX0FVVEhfRkFJTEVEPVwiVEhSRUVfRFNfQVVUSF9GQUlMRURcIixlLlRIUkVFX0RTX05FR09USUFUSU9OX0VSUk9SPVwiVEhSRUVfRFNfTkVHT1RJQVRJT05fRVJST1JcIixlLlRPS0VOSVpBVElPTl9FUlJPUj1cIlRPS0VOSVpBVElPTl9FUlJPUlwiLGUuRFVQTElDQVRFX1BBWU1FTlRfTUVUSE9EX0VSUk9SPVwiRFVQTElDQVRFX1BBWU1FTlRfTUVUSE9EX0VSUk9SXCIsZS5DQVJEX05VTUJFUl9FUlJPUj1cIkNBUkRfTlVNQkVSX0VSUk9SXCIsZS5QQVlNRU5UX01FVEhPRF9OT1RfU0VUVVA9XCJQQVlNRU5UX01FVEhPRF9OT1RfU0VUVVBcIixlLlBBWU1FTlRfTUVUSE9EX05PVF9QUk9WSURFRD1cIlBBWU1FTlRfTUVUSE9EX05PVF9TRVRVUFwiLGUuUEFZTUVOVF9NRVRIT0RfTk9UX0NPTVBBVElCTEU9XCJQQVlNRU5UX01FVEhPRF9OT1RfQ09NUEFUSUJMRVwiLGUuUkVTVU1FX0VSUk9SPVwiUkVTVU1FX0VSUk9SXCIsZS5UQVhfRVJST1I9XCJUQVhfRVJST1JcIixlLlZBTElEQVRJT05fRVJST1I9XCJWQUxJREFUSU9OX0VSUk9SXCIsZS5QQVlNRU5UX0ZBSUxFRD1cIlBBWU1FTlRfRkFJTEVEXCIsZS5QQVlNRU5UX0NSRUFUSU9OX0FCT1JURUQ9XCJQQVlNRU5UX0NSRUFUSU9OX0FCT1JURURcIixlLlBBWU1FTlRfQ1JFQVRJT05fRElTQUJMRUQ9XCJQQVlNRU5UX0NSRUFUSU9OX0RJU0FCTEVEXCIsZS5DTElFTlRfU0VTU0lPTl9VUERBVEVfRVJST1I9XCJDTElFTlRfU0VTU0lPTl9VUERBVEVfRVJST1JcIixlLklOVkFMSURfQVJHVU1FTlQ9XCJJTlZBTElEX0FSR1VNRU5UXCIsZS5WQVVMVF9GRVRDSD1cIlZBVUxUX0ZFVENIXCIsZS5WQVVMVF9ERUxFVEU9XCJWQVVMVF9ERUxFVEVcIixlLkhFQURMRVNTX1ZBVUxUX01BTkFHRVJfVkFMSURBVElPTj1cIkhFQURMRVNTX1ZBVUxUX01BTkFHRVJfVkFMSURBVElPTlwiLGUuQ0FSRF9GT1JNX1ZBTElEQVRJT05fVU5FWFBFQ1RFRF9GSUVMRD1cIkNBUkRfRk9STV9WQUxJREFUSU9OX1VORVhQRUNURURfRklFTERcIn0oTHR8fChMdD17fSkpO0Vycm9yO3ZhciBCdD1yKDY4MSk7cigyOTEpO3ZhciBrdCxqdCxIdDtuZXcgU2V0KFtcImNoYW5nZVwiLFwiYmx1clwiLFwiZm9jdXNcIl0pOyFmdW5jdGlvbihlKXtlLlBBWU1FTlRfTUVUSE9EPVwiUEFZTUVOVF9NRVRIT0RcIixlLkNIRUNLPVwiQ0hFQ0tcIn0oa3R8fChrdD17fSkpLGZ1bmN0aW9uKGUpe2UuQ0hBTkdFPVwiY2hhbmdlXCIsZS5FUlJPUj1cImVycm9yXCIsZS5GT0NVUz1cImZvY3VzXCIsZS5CTFVSPVwiYmx1clwiLGUuQ0xJQ0s9XCJjbGlja1wiLGUuQ0xPU0U9XCJjbG9zZVwifShqdHx8KGp0PXt9KSksZnVuY3Rpb24oZSl7ZS5DQVJEPVwiQ0FSRFwiLGUuTkFUSVZFPVwiTkFUSVZFXCIsZS5SRURJUkVDVD1cIlJFRElSRUNUXCJ9KEh0fHwoSHQ9e30pKTt2YXIgeHQ9e1NES19WRVJTSU9OOlwidjIuMzMuNFwiLGNyZWF0ZUhlYWRsZXNzOnV0LHNob3dFeHByZXNzQ2hlY2tvdXQ6c3Qsc2hvd1VuaXZlcnNhbENoZWNrb3V0OkV0LHNob3dWYXVsdE1hbmFnZXI6QXR9fSgpLG59KCl9KSk7IiwiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYnJhaW50cmVlID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSh7MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHJvbWlzZUdsb2JhbCA9IHZvaWQgMDtcbnZhciBwcm9taXNlX3BvbHlmaWxsXzEgPSBfX2ltcG9ydERlZmF1bHQoX2RlcmVxXyhcInByb21pc2UtcG9seWZpbGxcIikpO1xudmFyIFByb21pc2VHbG9iYWwgPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxudHlwZW9mIFByb21pc2UgIT09IFwidW5kZWZpbmVkXCIgPyBQcm9taXNlIDogcHJvbWlzZV9wb2x5ZmlsbF8xLmRlZmF1bHQ7XG5leHBvcnRzLlByb21pc2VHbG9iYWwgPSBQcm9taXNlR2xvYmFsO1xuXG59LHtcInByb21pc2UtcG9seWZpbGxcIjo2OH1dLDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcHJvbWlzZV8xID0gX2RlcmVxXyhcIi4vbGliL3Byb21pc2VcIik7XG52YXIgc2NyaXB0UHJvbWlzZUNhY2hlID0ge307XG5mdW5jdGlvbiBsb2FkU2NyaXB0KG9wdGlvbnMpIHtcbiAgICB2YXIgc2NyaXB0TG9hZFByb21pc2U7XG4gICAgdmFyIHN0cmluZ2lmaWVkT3B0aW9ucyA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICAgIGlmICghb3B0aW9ucy5mb3JjZVNjcmlwdFJlbG9hZCkge1xuICAgICAgICBzY3JpcHRMb2FkUHJvbWlzZSA9IHNjcmlwdFByb21pc2VDYWNoZVtzdHJpbmdpZmllZE9wdGlvbnNdO1xuICAgICAgICBpZiAoc2NyaXB0TG9hZFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBzY3JpcHRMb2FkUHJvbWlzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICB2YXIgYXR0cnMgPSBvcHRpb25zLmRhdGFBdHRyaWJ1dGVzIHx8IHt9O1xuICAgIHZhciBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIHNjcmlwdC5zcmMgPSBvcHRpb25zLnNyYztcbiAgICBzY3JpcHQuaWQgPSBvcHRpb25zLmlkIHx8IFwiXCI7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICBpZiAob3B0aW9ucy5jcm9zc29yaWdpbikge1xuICAgICAgICBzY3JpcHQuc2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIiwgXCJcIiArIG9wdGlvbnMuY3Jvc3NvcmlnaW4pO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLVwiICsga2V5LCBcIlwiICsgYXR0cnNba2V5XSk7XG4gICAgfSk7XG4gICAgc2NyaXB0TG9hZFByb21pc2UgPSBuZXcgcHJvbWlzZV8xLlByb21pc2VHbG9iYWwoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVzb2x2ZShzY3JpcHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKG9wdGlvbnMuc3JjICsgXCIgZmFpbGVkIHRvIGxvYWQuXCIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNjcmlwdC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihvcHRpb25zLnNyYyArIFwiIGhhcyBhYm9ydGVkLlwiKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICB9KTtcbiAgICBzY3JpcHRQcm9taXNlQ2FjaGVbc3RyaW5naWZpZWRPcHRpb25zXSA9IHNjcmlwdExvYWRQcm9taXNlO1xuICAgIHJldHVybiBzY3JpcHRMb2FkUHJvbWlzZTtcbn1cbmxvYWRTY3JpcHQuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBzY3JpcHRQcm9taXNlQ2FjaGUgPSB7fTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGxvYWRTY3JpcHQ7XG5cbn0se1wiLi9saWIvcHJvbWlzZVwiOjF9XSwzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXyhcIi4vZGlzdC9sb2FkLXNjcmlwdFwiKTtcblxufSx7XCIuL2Rpc3QvbG9hZC1zY3JpcHRcIjoyfV0sNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBbmRyb2lkKHVhKSB7XG4gICAgdWEgPSB1YSB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICByZXR1cm4gL0FuZHJvaWQvaS50ZXN0KHVhKTtcbn07XG5cbn0se31dLDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2hyb21lT1ModWEpIHtcbiAgICB1YSA9IHVhIHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIHJldHVybiAvQ3JPUy9pLnRlc3QodWEpO1xufTtcblxufSx7fV0sNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBpc0VkZ2UgPSBfZGVyZXFfKFwiLi9pcy1lZGdlXCIpO1xudmFyIGlzU2Ftc3VuZyA9IF9kZXJlcV8oXCIuL2lzLXNhbXN1bmdcIik7XG52YXIgaXNEdWNrRHVja0dvID0gX2RlcmVxXyhcIi4vaXMtZHVja2R1Y2tnb1wiKTtcbnZhciBpc09wZXJhID0gX2RlcmVxXyhcIi4vaXMtb3BlcmFcIik7XG52YXIgaXNTaWxrID0gX2RlcmVxXyhcIi4vaXMtc2lsa1wiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDaHJvbWUodWEpIHtcbiAgICB1YSA9IHVhIHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIHJldHVybiAoKHVhLmluZGV4T2YoXCJDaHJvbWVcIikgIT09IC0xIHx8IHVhLmluZGV4T2YoXCJDcmlPU1wiKSAhPT0gLTEpICYmXG4gICAgICAgICFpc0VkZ2UodWEpICYmXG4gICAgICAgICFpc1NhbXN1bmcodWEpICYmXG4gICAgICAgICFpc0R1Y2tEdWNrR28odWEpICYmXG4gICAgICAgICFpc09wZXJhKHVhKSAmJlxuICAgICAgICAhaXNTaWxrKHVhKSk7XG59O1xuXG59LHtcIi4vaXMtZHVja2R1Y2tnb1wiOjcsXCIuL2lzLWVkZ2VcIjo4LFwiLi9pcy1vcGVyYVwiOjE4LFwiLi9pcy1zYW1zdW5nXCI6MTksXCIuL2lzLXNpbGtcIjoyMH1dLDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzRHVja0R1Y2tHbyh1YSkge1xuICAgIHVhID0gdWEgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoXCJEdWNrRHVja0dvL1wiKSAhPT0gLTE7XG59O1xuXG59LHt9XSw4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0VkZ2UodWEpIHtcbiAgICB1YSA9IHVhIHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIHJldHVybiB1YS5pbmRleE9mKFwiRWRnZS9cIikgIT09IC0xO1xufTtcblxufSx7fV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNGaXJlZm94KHVhKSB7XG4gICAgdWEgPSB1YSB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICByZXR1cm4gL0ZpcmVmb3gvaS50ZXN0KHVhKTtcbn07XG5cbn0se31dLDEwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0llOSh1YSkge1xuICAgIHVhID0gdWEgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoXCJNU0lFIDlcIikgIT09IC0xO1xufTtcblxufSx7fV0sMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW9zRmlyZWZveCh1YSkge1xuICAgIHVhID0gdWEgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgcmV0dXJuIC9GeGlPUy9pLnRlc3QodWEpO1xufTtcblxufSx7fV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgaXNJb3MgPSBfZGVyZXFfKFwiLi9pcy1pb3NcIik7XG5mdW5jdGlvbiBpc0dvb2dsZVNlYXJjaEFwcCh1YSkge1xuICAgIHJldHVybiAvXFxiR1NBXFxiLy50ZXN0KHVhKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJb3NHb29nbGVTZWFyY2hBcHAodWEpIHtcbiAgICB1YSA9IHVhIHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIHJldHVybiBpc0lvcyh1YSkgJiYgaXNHb29nbGVTZWFyY2hBcHAodWEpO1xufTtcblxufSx7XCIuL2lzLWlvc1wiOjE2fV0sMTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgaXNJb3MgPSBfZGVyZXFfKFwiLi9pcy1pb3NcIik7XG52YXIgaXNJb3NGaXJlZm94ID0gX2RlcmVxXyhcIi4vaXMtaW9zLWZpcmVmb3hcIik7XG52YXIgd2Via2l0UmVnZXhwID0gL3dlYmtpdC9pO1xuZnVuY3Rpb24gaXNXZWJraXQodWEpIHtcbiAgICByZXR1cm4gd2Via2l0UmVnZXhwLnRlc3QodWEpO1xufVxuZnVuY3Rpb24gaXNJb3NDaHJvbWUodWEpIHtcbiAgICByZXR1cm4gdWEuaW5kZXhPZihcIkNyaU9TXCIpID4gLTE7XG59XG5mdW5jdGlvbiBpc0ZhY2Vib29rKHVhKSB7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoXCJGQkFOXCIpID4gLTE7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW9zU2FmYXJpKHVhKSB7XG4gICAgdWEgPSB1YSB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICByZXR1cm4gKGlzSW9zKHVhKSAmJlxuICAgICAgICBpc1dlYmtpdCh1YSkgJiZcbiAgICAgICAgIWlzSW9zQ2hyb21lKHVhKSAmJlxuICAgICAgICAhaXNJb3NGaXJlZm94KHVhKSAmJlxuICAgICAgICAhaXNGYWNlYm9vayh1YSkpO1xufTtcblxufSx7XCIuL2lzLWlvc1wiOjE2LFwiLi9pcy1pb3MtZmlyZWZveFwiOjExfV0sMTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgaXNJb3MgPSBfZGVyZXFfKFwiLi9pcy1pb3NcIik7XG52YXIgaXNJb3NHb29nbGVTZWFyY2hBcHAgPSBfZGVyZXFfKFwiLi9pcy1pb3MtZ29vZ2xlLXNlYXJjaC1hcHBcIik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW9zV2Vidmlldyh1YSkge1xuICAgIHVhID0gdWEgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgaWYgKGlzSW9zKHVhKSkge1xuICAgICAgICAvLyBUaGUgR29vZ2xlIFNlYXJjaCBpT1MgYXBwIGlzIHRlY2huaWNhbGx5IGEgd2VidmlldyBhbmQgZG9lc24ndCBzdXBwb3J0IHBvcHVwcy5cbiAgICAgICAgaWYgKGlzSW9zR29vZ2xlU2VhcmNoQXBwKHVhKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGlzdG9yaWNhbGx5LCBhIHdlYnZpZXcgY291bGQgYmUgaWRlbnRpZmllZCBieSB0aGUgcHJlc2VuY2Ugb2YgQXBwbGVXZWJLaXQgYW5kIF9ub18gcHJlc2VuY2Ugb2YgU2FmYXJpIGFmdGVyLlxuICAgICAgICByZXR1cm4gLy4rQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHVhKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxufSx7XCIuL2lzLWlvc1wiOjE2LFwiLi9pcy1pb3MtZ29vZ2xlLXNlYXJjaC1hcHBcIjoxMn1dLDE1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIGlzSW9zV2VidmlldyA9IF9kZXJlcV8oXCIuL2lzLWlvcy13ZWJ2aWV3XCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0lvc1dLV2Vidmlldyh1YSwgc3RhdHVzQmFyVmlzaWJsZSkge1xuICAgIHN0YXR1c0JhclZpc2libGUgPVxuICAgICAgICB0eXBlb2Ygc3RhdHVzQmFyVmlzaWJsZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyBzdGF0dXNCYXJWaXNpYmxlXG4gICAgICAgICAgICA6IHdpbmRvdy5zdGF0dXNiYXIudmlzaWJsZTtcbiAgICByZXR1cm4gaXNJb3NXZWJ2aWV3KHVhKSAmJiBzdGF0dXNCYXJWaXNpYmxlO1xufTtcblxufSx7XCIuL2lzLWlvcy13ZWJ2aWV3XCI6MTR9XSwxNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBpc0lwYWRPUyA9IF9kZXJlcV8oXCIuL2lzLWlwYWRvc1wiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJb3ModWEsIGNoZWNrSXBhZE9TLCBkb2N1bWVudCkge1xuICAgIGlmIChjaGVja0lwYWRPUyA9PT0gdm9pZCAwKSB7IGNoZWNrSXBhZE9TID0gdHJ1ZTsgfVxuICAgIHVhID0gdWEgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgdmFyIGlPc1Rlc3QgPSAvaVBob25lfGlQb2R8aVBhZC9pLnRlc3QodWEpO1xuICAgIHJldHVybiBjaGVja0lwYWRPUyA/IGlPc1Rlc3QgfHwgaXNJcGFkT1ModWEsIGRvY3VtZW50KSA6IGlPc1Rlc3Q7XG59O1xuXG59LHtcIi4vaXMtaXBhZG9zXCI6MTd9XSwxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJcGFkT1ModWEsIGRvY3VtZW50KSB7XG4gICAgdWEgPSB1YSB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICBkb2N1bWVudCA9IGRvY3VtZW50IHx8IHdpbmRvdy5kb2N1bWVudDtcbiAgICAvLyBcIm9udG91Y2hlbmRcIiBpcyB1c2VkIHRvIGRldGVybWluZSBpZiBhIGJyb3dzZXIgaXMgb24gYW4gaVBhZCwgb3RoZXJ3aXNlXG4gICAgLy8gdXNlci1hZ2VudHMgZm9yIGlQYWRPUyBiZWhhdmUvaWRlbnRpZnkgYXMgYSBkZXNrdG9wIGJyb3dzZXJcbiAgICByZXR1cm4gL01hY3xpUGFkL2kudGVzdCh1YSkgJiYgXCJvbnRvdWNoZW5kXCIgaW4gZG9jdW1lbnQ7XG59O1xuXG59LHt9XSwxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNPcGVyYSh1YSkge1xuICAgIHVhID0gdWEgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgcmV0dXJuICh1YS5pbmRleE9mKFwiT1BSL1wiKSAhPT0gLTEgfHxcbiAgICAgICAgdWEuaW5kZXhPZihcIk9wZXJhL1wiKSAhPT0gLTEgfHxcbiAgICAgICAgdWEuaW5kZXhPZihcIk9QVC9cIikgIT09IC0xKTtcbn07XG5cbn0se31dLDE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1NhbXN1bmdCcm93c2VyKHVhKSB7XG4gICAgdWEgPSB1YSB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICByZXR1cm4gL1NhbXN1bmdCcm93c2VyL2kudGVzdCh1YSk7XG59O1xuXG59LHt9XSwyMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTaWxrKHVhKSB7XG4gICAgdWEgPSB1YSB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICByZXR1cm4gdWEuaW5kZXhPZihcIlNpbGsvXCIpICE9PSAtMTtcbn07XG5cbn0se31dLDIxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIE1JTklNVU1fU1VQUE9SVEVEX0NIUk9NRV9JT1NfVkVSU0lPTiA9IDQ4O1xudmFyIGlzQW5kcm9pZCA9IF9kZXJlcV8oXCIuL2lzLWFuZHJvaWRcIik7XG52YXIgaXNJb3NGaXJlZm94ID0gX2RlcmVxXyhcIi4vaXMtaW9zLWZpcmVmb3hcIik7XG52YXIgaXNJb3NXZWJ2aWV3ID0gX2RlcmVxXyhcIi4vaXMtaW9zLXdlYnZpZXdcIik7XG52YXIgaXNDaHJvbWUgPSBfZGVyZXFfKFwiLi9pcy1jaHJvbWVcIik7XG52YXIgaXNTYW1zdW5nQnJvd3NlciA9IF9kZXJlcV8oXCIuL2lzLXNhbXN1bmdcIik7XG52YXIgaXNEdWNrRHVja0dvID0gX2RlcmVxXyhcIi4vaXMtZHVja2R1Y2tnb1wiKTtcbmZ1bmN0aW9uIGlzVW5zdXBwb3J0ZWRJb3NDaHJvbWUodWEpIHtcbiAgICB1YSA9IHVhIHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIHZhciBtYXRjaCA9IHVhLm1hdGNoKC9DcmlPU1xcLyhcXGQrKVxcLi8pO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdmVyc2lvbiA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgcmV0dXJuIHZlcnNpb24gPCBNSU5JTVVNX1NVUFBPUlRFRF9DSFJPTUVfSU9TX1ZFUlNJT047XG59XG5mdW5jdGlvbiBpc09wZXJhTWluaSh1YSkge1xuICAgIHVhID0gdWEgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoXCJPcGVyYSBNaW5pXCIpID4gLTE7XG59XG5mdW5jdGlvbiBpc0FuZHJvaWRXZWJ2aWV3KHVhKSB7XG4gICAgdmFyIGFuZHJvaWRXZWJ2aWV3UmVnRXhwID0gL1ZlcnNpb25cXC9bXFxkLl0rL2k7XG4gICAgdWEgPSB1YSB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICBpZiAoaXNBbmRyb2lkKHVhKSkge1xuICAgICAgICByZXR1cm4gKGFuZHJvaWRXZWJ2aWV3UmVnRXhwLnRlc3QodWEpICYmICFpc09wZXJhTWluaSh1YSkgJiYgIWlzRHVja0R1Y2tHbyh1YSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc09sZFNhbXN1bmdCcm93c2VyT3JTYW1zdW5nV2Vidmlldyh1YSkge1xuICAgIHJldHVybiAhaXNDaHJvbWUodWEpICYmICFpc1NhbXN1bmdCcm93c2VyKHVhKSAmJiAvc2Ftc3VuZy9pLnRlc3QodWEpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcHVwcyh1YSkge1xuICAgIHVhID0gdWEgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgcmV0dXJuICEoaXNJb3NXZWJ2aWV3KHVhKSB8fFxuICAgICAgICBpc0lvc0ZpcmVmb3godWEpIHx8XG4gICAgICAgIGlzQW5kcm9pZFdlYnZpZXcodWEpIHx8XG4gICAgICAgIGlzT3BlcmFNaW5pKHVhKSB8fFxuICAgICAgICBpc1Vuc3VwcG9ydGVkSW9zQ2hyb21lKHVhKSB8fFxuICAgICAgICBpc09sZFNhbXN1bmdCcm93c2VyT3JTYW1zdW5nV2Vidmlldyh1YSkpO1xufTtcblxufSx7XCIuL2lzLWFuZHJvaWRcIjo0LFwiLi9pcy1jaHJvbWVcIjo2LFwiLi9pcy1kdWNrZHVja2dvXCI6NyxcIi4vaXMtaW9zLWZpcmVmb3hcIjoxMSxcIi4vaXMtaW9zLXdlYnZpZXdcIjoxNCxcIi4vaXMtc2Ftc3VuZ1wiOjE5fV0sMjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKFwiLi9kaXN0L2lzLWFuZHJvaWRcIik7XG5cbn0se1wiLi9kaXN0L2lzLWFuZHJvaWRcIjo0fV0sMjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKFwiLi9kaXN0L2lzLWNocm9tZS1vc1wiKTtcblxufSx7XCIuL2Rpc3QvaXMtY2hyb21lLW9zXCI6NX1dLDI0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXyhcIi4vZGlzdC9pcy1jaHJvbWVcIik7XG5cbn0se1wiLi9kaXN0L2lzLWNocm9tZVwiOjZ9XSwyNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oXCIuL2Rpc3QvaXMtZmlyZWZveFwiKTtcblxufSx7XCIuL2Rpc3QvaXMtZmlyZWZveFwiOjl9XSwyNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oXCIuL2Rpc3QvaXMtaWU5XCIpO1xuXG59LHtcIi4vZGlzdC9pcy1pZTlcIjoxMH1dLDI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXyhcIi4vZGlzdC9pcy1pb3Mtc2FmYXJpXCIpO1xuXG59LHtcIi4vZGlzdC9pcy1pb3Mtc2FmYXJpXCI6MTN9XSwyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oXCIuL2Rpc3QvaXMtaW9zLXdlYnZpZXdcIik7XG5cbn0se1wiLi9kaXN0L2lzLWlvcy13ZWJ2aWV3XCI6MTR9XSwyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oXCIuL2Rpc3QvaXMtaW9zLXdrd2Vidmlld1wiKTtcblxufSx7XCIuL2Rpc3QvaXMtaW9zLXdrd2Vidmlld1wiOjE1fV0sMzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKFwiLi9kaXN0L2lzLWlvc1wiKTtcblxufSx7XCIuL2Rpc3QvaXMtaW9zXCI6MTZ9XSwzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oXCIuL2Rpc3QvaXMtc2Ftc3VuZ1wiKTtcblxufSx7XCIuL2Rpc3QvaXMtc2Ftc3VuZ1wiOjE5fV0sMzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKFwiLi9kaXN0L3N1cHBvcnRzLXBvcHVwc1wiKTtcblxufSx7XCIuL2Rpc3Qvc3VwcG9ydHMtcG9wdXBzXCI6MjF9XSwzMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBFdmVudEVtaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICAgICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICB9XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHRoaXMuX2V2ZW50c1tldmVudF0pIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50c1tldmVudF0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnRdID0gW2NhbGxiYWNrXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBldmVudENhbGxiYWNrcyA9IHRoaXMuX2V2ZW50c1tldmVudF07XG4gICAgICAgIGlmICghZXZlbnRDYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXhPZkNhbGxiYWNrID0gZXZlbnRDYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgIGV2ZW50Q2FsbGJhY2tzLnNwbGljZShpbmRleE9mQ2FsbGJhY2ssIDEpO1xuICAgIH07XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnRDYWxsYmFja3MgPSB0aGlzLl9ldmVudHNbZXZlbnRdO1xuICAgICAgICBpZiAoIWV2ZW50Q2FsbGJhY2tzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgZXZlbnRDYWxsYmFja3MgPSB0aGlzLl9ldmVudHNbZXZlbnRdO1xuICAgICAgICBpZiAoIWV2ZW50Q2FsbGJhY2tzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50Q2FsbGJhY2tzLmxlbmd0aCA+IDA7XG4gICAgfTtcbiAgICBFdmVudEVtaXR0ZXIuY3JlYXRlQ2hpbGQgPSBmdW5jdGlvbiAoQ2hpbGRPYmplY3QpIHtcbiAgICAgICAgQ2hpbGRPYmplY3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFdmVudEVtaXR0ZXIucHJvdG90eXBlLCB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcjogQ2hpbGRPYmplY3QsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcbn0oKSk7XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxufSx7fV0sMzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgR2xvYmFsUHJvbWlzZSA9ICh0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgID8gUHJvbWlzZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgOiBudWxsKTtcbnZhciBFeHRlbmRlZFByb21pc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXh0ZW5kZWRQcm9taXNlKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb21pc2UgPSBuZXcgRXh0ZW5kZWRQcm9taXNlLlByb21pc2Uob3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBFeHRlbmRlZFByb21pc2UuUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVzb2x2ZUZ1bmN0aW9uID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIF90aGlzLl9yZWplY3RGdW5jdGlvbiA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLl9vblJlc29sdmUgPSBvcHRpb25zLm9uUmVzb2x2ZSB8fCBFeHRlbmRlZFByb21pc2UuZGVmYXVsdE9uUmVzb2x2ZTtcbiAgICAgICAgdGhpcy5fb25SZWplY3QgPSBvcHRpb25zLm9uUmVqZWN0IHx8IEV4dGVuZGVkUHJvbWlzZS5kZWZhdWx0T25SZWplY3Q7XG4gICAgICAgIGlmIChFeHRlbmRlZFByb21pc2Uuc2hvdWxkQ2F0Y2hFeGNlcHRpb25zKG9wdGlvbnMpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9taXNlLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBwcmV2ZW50cyB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24gd2FybmluZ1xuICAgICAgICAgICAgICAgIC8vIGluIHRoZSBjb25zb2xlIGZvciBleHRlbmRlZCBwcm9taXNlcyB0aGF0XG4gICAgICAgICAgICAgICAgLy8gdGhhdCBjYXRjaCB0aGUgZXJyb3IgaW4gYW4gYXN5bmNocm9ub3VzIG1hbm5lclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzZXRTdGF0ZSgpO1xuICAgIH1cbiAgICBFeHRlbmRlZFByb21pc2UuZGVmYXVsdE9uUmVzb2x2ZSA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIEV4dGVuZGVkUHJvbWlzZS5Qcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICB9O1xuICAgIEV4dGVuZGVkUHJvbWlzZS5kZWZhdWx0T25SZWplY3QgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBFeHRlbmRlZFByb21pc2UuUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICB9O1xuICAgIEV4dGVuZGVkUHJvbWlzZS5zZXRQcm9taXNlID0gZnVuY3Rpb24gKFByb21pc2VDbGFzcykge1xuICAgICAgICBFeHRlbmRlZFByb21pc2UuUHJvbWlzZSA9IFByb21pc2VDbGFzcztcbiAgICB9O1xuICAgIEV4dGVuZGVkUHJvbWlzZS5zaG91bGRDYXRjaEV4Y2VwdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcInN1cHByZXNzVW5oYW5kbGVkUHJvbWlzZU1lc3NhZ2VcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuKG9wdGlvbnMuc3VwcHJlc3NVbmhhbmRsZWRQcm9taXNlTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oRXh0ZW5kZWRQcm9taXNlLnN1cHByZXNzVW5oYW5kbGVkUHJvbWlzZU1lc3NhZ2UpO1xuICAgIH07XG4gICAgLy8gc3RhcnQgUHJvbWlzZSBtZXRob2RzIGRvY3VtZW50ZWQgaW46XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZSNNZXRob2RzXG4gICAgRXh0ZW5kZWRQcm9taXNlLmFsbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiBFeHRlbmRlZFByb21pc2UuUHJvbWlzZS5hbGwoYXJncyk7XG4gICAgfTtcbiAgICBFeHRlbmRlZFByb21pc2UuYWxsU2V0dGxlZCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiBFeHRlbmRlZFByb21pc2UuUHJvbWlzZS5hbGxTZXR0bGVkKGFyZ3MpO1xuICAgIH07XG4gICAgRXh0ZW5kZWRQcm9taXNlLnJhY2UgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gRXh0ZW5kZWRQcm9taXNlLlByb21pc2UucmFjZShhcmdzKTtcbiAgICB9O1xuICAgIEV4dGVuZGVkUHJvbWlzZS5yZWplY3QgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiBFeHRlbmRlZFByb21pc2UuUHJvbWlzZS5yZWplY3QoYXJnKTtcbiAgICB9O1xuICAgIEV4dGVuZGVkUHJvbWlzZS5yZXNvbHZlID0gZnVuY3Rpb24gKGFyZykge1xuICAgICAgICByZXR1cm4gRXh0ZW5kZWRQcm9taXNlLlByb21pc2UucmVzb2x2ZShhcmcpO1xuICAgIH07XG4gICAgRXh0ZW5kZWRQcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuX3Byb21pc2UpLnRoZW4uYXBwbHkoX2EsIGFyZ3MpO1xuICAgIH07XG4gICAgRXh0ZW5kZWRQcm9taXNlLnByb3RvdHlwZS5jYXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLl9wcm9taXNlKS5jYXRjaC5hcHBseShfYSwgYXJncyk7XG4gICAgfTtcbiAgICBFeHRlbmRlZFByb21pc2UucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmlzRnVsZmlsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZXRSZXNvbHZlZCgpO1xuICAgICAgICBFeHRlbmRlZFByb21pc2UuUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fb25SZXNvbHZlKGFyZyk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYXJnRm9yUmVzb2x2ZUZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVzb2x2ZUZ1bmN0aW9uKGFyZ0ZvclJlc29sdmVGdW5jdGlvbik7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgX3RoaXMuX3Jlc2V0U3RhdGUoKTtcbiAgICAgICAgICAgIF90aGlzLnJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBFeHRlbmRlZFByb21pc2UucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuaXNGdWxmaWxsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NldFJlamVjdGVkKCk7XG4gICAgICAgIEV4dGVuZGVkUHJvbWlzZS5Qcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9vblJlamVjdChhcmcpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgX3RoaXMuX3NldFJlc29sdmVkKCk7XG4gICAgICAgICAgICBfdGhpcy5fcmVzb2x2ZUZ1bmN0aW9uKHJlc3VsdCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9yZWplY3RGdW5jdGlvbihlcnIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBFeHRlbmRlZFByb21pc2UucHJvdG90eXBlLl9yZXNldFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzRnVsZmlsbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNSZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzUmVqZWN0ZWQgPSBmYWxzZTtcbiAgICB9O1xuICAgIEV4dGVuZGVkUHJvbWlzZS5wcm90b3R5cGUuX3NldFJlc29sdmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzRnVsZmlsbGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc1JlamVjdGVkID0gZmFsc2U7XG4gICAgfTtcbiAgICBFeHRlbmRlZFByb21pc2UucHJvdG90eXBlLl9zZXRSZWplY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc0Z1bGZpbGxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaXNSZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzUmVqZWN0ZWQgPSB0cnVlO1xuICAgIH07XG4gICAgRXh0ZW5kZWRQcm9taXNlLlByb21pc2UgPSBHbG9iYWxQcm9taXNlO1xuICAgIHJldHVybiBFeHRlbmRlZFByb21pc2U7XG59KCkpO1xubW9kdWxlLmV4cG9ydHMgPSBFeHRlbmRlZFByb21pc2U7XG5cbn0se31dLDM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIHNldF9hdHRyaWJ1dGVzXzEgPSBfZGVyZXFfKFwiLi9saWIvc2V0LWF0dHJpYnV0ZXNcIik7XG52YXIgZGVmYXVsdF9hdHRyaWJ1dGVzXzEgPSBfZGVyZXFfKFwiLi9saWIvZGVmYXVsdC1hdHRyaWJ1dGVzXCIpO1xudmFyIGFzc2lnbl8xID0gX2RlcmVxXyhcIi4vbGliL2Fzc2lnblwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRnJhbWUob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgdmFyIGNvbmZpZyA9IGFzc2lnbl8xLmFzc2lnbih7fSwgZGVmYXVsdF9hdHRyaWJ1dGVzXzEuZGVmYXVsdEF0dHJpYnV0ZXMsIG9wdGlvbnMpO1xuICAgIGlmIChjb25maWcuc3R5bGUgJiYgdHlwZW9mIGNvbmZpZy5zdHlsZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBhc3NpZ25fMS5hc3NpZ24oaWZyYW1lLnN0eWxlLCBjb25maWcuc3R5bGUpO1xuICAgICAgICBkZWxldGUgY29uZmlnLnN0eWxlO1xuICAgIH1cbiAgICBzZXRfYXR0cmlidXRlc18xLnNldEF0dHJpYnV0ZXMoaWZyYW1lLCBjb25maWcpO1xuICAgIGlmICghaWZyYW1lLmdldEF0dHJpYnV0ZShcImlkXCIpKSB7XG4gICAgICAgIGlmcmFtZS5pZCA9IGlmcmFtZS5uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gaWZyYW1lO1xufTtcblxufSx7XCIuL2xpYi9hc3NpZ25cIjozNixcIi4vbGliL2RlZmF1bHQtYXR0cmlidXRlc1wiOjM3LFwiLi9saWIvc2V0LWF0dHJpYnV0ZXNcIjozOH1dLDM2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hc3NpZ24gPSB2b2lkIDA7XG5mdW5jdGlvbiBhc3NpZ24oXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudGFyZ2V0KSB7XG4gICAgdmFyIG9ianMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYmpzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBvYmpzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG5cbn0se31dLDM3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0QXR0cmlidXRlcyA9IHZvaWQgMDtcbmV4cG9ydHMuZGVmYXVsdEF0dHJpYnV0ZXMgPSB7XG4gICAgc3JjOiBcImFib3V0OmJsYW5rXCIsXG4gICAgZnJhbWVCb3JkZXI6IDAsXG4gICAgYWxsb3d0cmFuc3BhcmVuY3k6IHRydWUsXG4gICAgc2Nyb2xsaW5nOiBcIm5vXCIsXG59O1xuXG59LHt9XSwzODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0QXR0cmlidXRlcyA9IHZvaWQgMDtcbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuYXR0cmlidXRlcykge1xuICAgIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxufSx7fV0sMzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiB1dWlkKCkge1xuICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICB2YXIgdiA9IGMgPT09ICd4JyA/IHIgOiByICYgMHgzIHwgMHg4O1xuXG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1dWlkO1xuXG59LHt9XSw0MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGRlZmVycmVkKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciBpbiBjYWxsYmFjayBmdW5jdGlvblwiKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxKTtcbiAgICB9O1xufVxuZXhwb3J0cy5kZWZlcnJlZCA9IGRlZmVycmVkO1xuXG59LHt9XSw0MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIG9uY2UoZm4pIHtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5vbmNlID0gb25jZTtcblxufSx7fV0sNDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuZnVuY3Rpb24gcHJvbWlzZU9yQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGRhdGEpOyB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBjYWxsYmFjayhlcnIpOyB9KTtcbn1cbmV4cG9ydHMucHJvbWlzZU9yQ2FsbGJhY2sgPSBwcm9taXNlT3JDYWxsYmFjaztcblxufSx7fV0sNDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZGVmZXJyZWRfMSA9IF9kZXJlcV8oXCIuL2xpYi9kZWZlcnJlZFwiKTtcbnZhciBvbmNlXzEgPSBfZGVyZXFfKFwiLi9saWIvb25jZVwiKTtcbnZhciBwcm9taXNlX29yX2NhbGxiYWNrXzEgPSBfZGVyZXFfKFwiLi9saWIvcHJvbWlzZS1vci1jYWxsYmFja1wiKTtcbmZ1bmN0aW9uIHdyYXBQcm9taXNlKGZuKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYWxsYmFjaztcbiAgICAgICAgdmFyIGxhc3RBcmcgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0eXBlb2YgbGFzdEFyZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGFyZ3MucG9wKCk7XG4gICAgICAgICAgICBjYWxsYmFjayA9IG9uY2VfMS5vbmNlKGRlZmVycmVkXzEuZGVmZXJyZWQoY2FsbGJhY2spKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJIGtub3csIEkga25vdywgdGhpcyBsb29rcyBiYWQuIEJ1dCBpdCdzIGEgcXVpcmsgb2YgdGhlIGxpYnJhcnkgdGhhdFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIGFsbG93IHBhc3NpbmcgdGhlIHRoaXMgY29udGV4dCB0byB0aGUgb3JpZ2luYWwgZnVuY3Rpb25cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtaWdub3JlXG4gICAgICAgIC8vIEB0cy1pZ25vcmU6IHRoaXMgaGFzIGFuIGltcGxpY2l0IGFueVxuICAgICAgICByZXR1cm4gcHJvbWlzZV9vcl9jYWxsYmFja18xLnByb21pc2VPckNhbGxiYWNrKGZuLmFwcGx5KHRoaXMsIGFyZ3MpLCBjYWxsYmFjayk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW52YWxpZC10aGlzXG4gICAgfTtcbn1cbndyYXBQcm9taXNlLndyYXBQcm90b3R5cGUgPSBmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgaWdub3JlTWV0aG9kcyA9IG9wdGlvbnMuaWdub3JlTWV0aG9kcyB8fCBbXTtcbiAgICB2YXIgaW5jbHVkZVByaXZhdGVNZXRob2RzID0gb3B0aW9ucy50cmFuc2Zvcm1Qcml2YXRlTWV0aG9kcyA9PT0gdHJ1ZTtcbiAgICB2YXIgbWV0aG9kcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldC5wcm90b3R5cGUpLmZpbHRlcihmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHZhciBpc05vdFByaXZhdGVNZXRob2Q7XG4gICAgICAgIHZhciBpc05vbkNvbnN0cnVjdG9yRnVuY3Rpb24gPSBtZXRob2QgIT09IFwiY29uc3RydWN0b3JcIiAmJlxuICAgICAgICAgICAgdHlwZW9mIHRhcmdldC5wcm90b3R5cGVbbWV0aG9kXSA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB2YXIgaXNOb3RBbklnbm9yZWRNZXRob2QgPSBpZ25vcmVNZXRob2RzLmluZGV4T2YobWV0aG9kKSA9PT0gLTE7XG4gICAgICAgIGlmIChpbmNsdWRlUHJpdmF0ZU1ldGhvZHMpIHtcbiAgICAgICAgICAgIGlzTm90UHJpdmF0ZU1ldGhvZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpc05vdFByaXZhdGVNZXRob2QgPSBtZXRob2QuY2hhckF0KDApICE9PSBcIl9cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGlzTm9uQ29uc3RydWN0b3JGdW5jdGlvbiAmJiBpc05vdFByaXZhdGVNZXRob2QgJiYgaXNOb3RBbklnbm9yZWRNZXRob2QpO1xuICAgIH0pO1xuICAgIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbCA9IHRhcmdldC5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICAgICAgdGFyZ2V0LnByb3RvdHlwZVttZXRob2RdID0gd3JhcFByb21pc2Uob3JpZ2luYWwpO1xuICAgIH0pO1xuICAgIHJldHVybiB0YXJnZXQ7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB3cmFwUHJvbWlzZTtcblxufSx7XCIuL2xpYi9kZWZlcnJlZFwiOjQwLFwiLi9saWIvb25jZVwiOjQxLFwiLi9saWIvcHJvbWlzZS1vci1jYWxsYmFja1wiOjQyfV0sNDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIGNhcmRUeXBlcyA9IF9kZXJlcV8oXCIuL2xpYi9jYXJkLXR5cGVzXCIpO1xudmFyIGFkZF9tYXRjaGluZ19jYXJkc190b19yZXN1bHRzXzEgPSBfZGVyZXFfKFwiLi9saWIvYWRkLW1hdGNoaW5nLWNhcmRzLXRvLXJlc3VsdHNcIik7XG52YXIgaXNfdmFsaWRfaW5wdXRfdHlwZV8xID0gX2RlcmVxXyhcIi4vbGliL2lzLXZhbGlkLWlucHV0LXR5cGVcIik7XG52YXIgZmluZF9iZXN0X21hdGNoXzEgPSBfZGVyZXFfKFwiLi9saWIvZmluZC1iZXN0LW1hdGNoXCIpO1xudmFyIGNsb25lXzEgPSBfZGVyZXFfKFwiLi9saWIvY2xvbmVcIik7XG52YXIgY3VzdG9tQ2FyZHMgPSB7fTtcbnZhciBjYXJkTmFtZXMgPSB7XG4gICAgVklTQTogXCJ2aXNhXCIsXG4gICAgTUFTVEVSQ0FSRDogXCJtYXN0ZXJjYXJkXCIsXG4gICAgQU1FUklDQU5fRVhQUkVTUzogXCJhbWVyaWNhbi1leHByZXNzXCIsXG4gICAgRElORVJTX0NMVUI6IFwiZGluZXJzLWNsdWJcIixcbiAgICBESVNDT1ZFUjogXCJkaXNjb3ZlclwiLFxuICAgIEpDQjogXCJqY2JcIixcbiAgICBVTklPTlBBWTogXCJ1bmlvbnBheVwiLFxuICAgIE1BRVNUUk86IFwibWFlc3Ryb1wiLFxuICAgIEVMTzogXCJlbG9cIixcbiAgICBNSVI6IFwibWlyXCIsXG4gICAgSElQRVI6IFwiaGlwZXJcIixcbiAgICBISVBFUkNBUkQ6IFwiaGlwZXJjYXJkXCIsXG59O1xudmFyIE9SSUdJTkFMX1RFU1RfT1JERVIgPSBbXG4gICAgY2FyZE5hbWVzLlZJU0EsXG4gICAgY2FyZE5hbWVzLk1BU1RFUkNBUkQsXG4gICAgY2FyZE5hbWVzLkFNRVJJQ0FOX0VYUFJFU1MsXG4gICAgY2FyZE5hbWVzLkRJTkVSU19DTFVCLFxuICAgIGNhcmROYW1lcy5ESVNDT1ZFUixcbiAgICBjYXJkTmFtZXMuSkNCLFxuICAgIGNhcmROYW1lcy5VTklPTlBBWSxcbiAgICBjYXJkTmFtZXMuTUFFU1RSTyxcbiAgICBjYXJkTmFtZXMuRUxPLFxuICAgIGNhcmROYW1lcy5NSVIsXG4gICAgY2FyZE5hbWVzLkhJUEVSLFxuICAgIGNhcmROYW1lcy5ISVBFUkNBUkQsXG5dO1xudmFyIHRlc3RPcmRlciA9IGNsb25lXzEuY2xvbmUoT1JJR0lOQUxfVEVTVF9PUkRFUik7XG5mdW5jdGlvbiBmaW5kVHlwZShjYXJkVHlwZSkge1xuICAgIHJldHVybiBjdXN0b21DYXJkc1tjYXJkVHlwZV0gfHwgY2FyZFR5cGVzW2NhcmRUeXBlXTtcbn1cbmZ1bmN0aW9uIGdldEFsbENhcmRUeXBlcygpIHtcbiAgICByZXR1cm4gdGVzdE9yZGVyLm1hcChmdW5jdGlvbiAoY2FyZFR5cGUpIHsgcmV0dXJuIGNsb25lXzEuY2xvbmUoZmluZFR5cGUoY2FyZFR5cGUpKTsgfSk7XG59XG5mdW5jdGlvbiBnZXRDYXJkUG9zaXRpb24obmFtZSwgaWdub3JlRXJyb3JGb3JOb3RFeGlzdGluZykge1xuICAgIGlmIChpZ25vcmVFcnJvckZvck5vdEV4aXN0aW5nID09PSB2b2lkIDApIHsgaWdub3JlRXJyb3JGb3JOb3RFeGlzdGluZyA9IGZhbHNlOyB9XG4gICAgdmFyIHBvc2l0aW9uID0gdGVzdE9yZGVyLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKCFpZ25vcmVFcnJvckZvck5vdEV4aXN0aW5nICYmIHBvc2l0aW9uID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIG5hbWUgKyAnXCIgaXMgbm90IGEgc3VwcG9ydGVkIGNhcmQgdHlwZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xufVxuZnVuY3Rpb24gY3JlZGl0Q2FyZFR5cGUoY2FyZE51bWJlcikge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKCFpc192YWxpZF9pbnB1dF90eXBlXzEuaXNWYWxpZElucHV0VHlwZShjYXJkTnVtYmVyKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgaWYgKGNhcmROdW1iZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBnZXRBbGxDYXJkVHlwZXMoKTtcbiAgICB9XG4gICAgdGVzdE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKGNhcmRUeXBlKSB7XG4gICAgICAgIHZhciBjYXJkQ29uZmlndXJhdGlvbiA9IGZpbmRUeXBlKGNhcmRUeXBlKTtcbiAgICAgICAgYWRkX21hdGNoaW5nX2NhcmRzX3RvX3Jlc3VsdHNfMS5hZGRNYXRjaGluZ0NhcmRzVG9SZXN1bHRzKGNhcmROdW1iZXIsIGNhcmRDb25maWd1cmF0aW9uLCByZXN1bHRzKTtcbiAgICB9KTtcbiAgICB2YXIgYmVzdE1hdGNoID0gZmluZF9iZXN0X21hdGNoXzEuZmluZEJlc3RNYXRjaChyZXN1bHRzKTtcbiAgICBpZiAoYmVzdE1hdGNoKSB7XG4gICAgICAgIHJldHVybiBbYmVzdE1hdGNoXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5jcmVkaXRDYXJkVHlwZS5nZXRUeXBlSW5mbyA9IGZ1bmN0aW9uIChjYXJkVHlwZSkge1xuICAgIHJldHVybiBjbG9uZV8xLmNsb25lKGZpbmRUeXBlKGNhcmRUeXBlKSk7XG59O1xuY3JlZGl0Q2FyZFR5cGUucmVtb3ZlQ2FyZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0Q2FyZFBvc2l0aW9uKG5hbWUpO1xuICAgIHRlc3RPcmRlci5zcGxpY2UocG9zaXRpb24sIDEpO1xufTtcbmNyZWRpdENhcmRUeXBlLmFkZENhcmQgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgdmFyIGV4aXN0aW5nQ2FyZFBvc2l0aW9uID0gZ2V0Q2FyZFBvc2l0aW9uKGNvbmZpZy50eXBlLCB0cnVlKTtcbiAgICBjdXN0b21DYXJkc1tjb25maWcudHlwZV0gPSBjb25maWc7XG4gICAgaWYgKGV4aXN0aW5nQ2FyZFBvc2l0aW9uID09PSAtMSkge1xuICAgICAgICB0ZXN0T3JkZXIucHVzaChjb25maWcudHlwZSk7XG4gICAgfVxufTtcbmNyZWRpdENhcmRUeXBlLnVwZGF0ZUNhcmQgPSBmdW5jdGlvbiAoY2FyZFR5cGUsIHVwZGF0ZXMpIHtcbiAgICB2YXIgb3JpZ2luYWxPYmplY3QgPSBjdXN0b21DYXJkc1tjYXJkVHlwZV0gfHwgY2FyZFR5cGVzW2NhcmRUeXBlXTtcbiAgICBpZiAoIW9yaWdpbmFsT2JqZWN0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlxcXCJcIiArIGNhcmRUeXBlICsgXCJcXFwiIGlzIG5vdCBhIHJlY29nbml6ZWQgdHlwZS4gVXNlIGBhZGRDYXJkYCBpbnN0ZWFkLidcIik7XG4gICAgfVxuICAgIGlmICh1cGRhdGVzLnR5cGUgJiYgb3JpZ2luYWxPYmplY3QudHlwZSAhPT0gdXBkYXRlcy50eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBvdmVyd3JpdGUgdHlwZSBwYXJhbWV0ZXIuXCIpO1xuICAgIH1cbiAgICB2YXIgY2xvbmVkQ2FyZCA9IGNsb25lXzEuY2xvbmUob3JpZ2luYWxPYmplY3QpO1xuICAgIGNsb25lZENhcmQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY2xvbmVkQ2FyZCksIHVwZGF0ZXMpO1xuICAgIGN1c3RvbUNhcmRzW2Nsb25lZENhcmQudHlwZV0gPSBjbG9uZWRDYXJkO1xufTtcbmNyZWRpdENhcmRUeXBlLmNoYW5nZU9yZGVyID0gZnVuY3Rpb24gKG5hbWUsIHBvc2l0aW9uKSB7XG4gICAgdmFyIGN1cnJlbnRQb3NpdGlvbiA9IGdldENhcmRQb3NpdGlvbihuYW1lKTtcbiAgICB0ZXN0T3JkZXIuc3BsaWNlKGN1cnJlbnRQb3NpdGlvbiwgMSk7XG4gICAgdGVzdE9yZGVyLnNwbGljZShwb3NpdGlvbiwgMCwgbmFtZSk7XG59O1xuY3JlZGl0Q2FyZFR5cGUucmVzZXRNb2RpZmljYXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHRlc3RPcmRlciA9IGNsb25lXzEuY2xvbmUoT1JJR0lOQUxfVEVTVF9PUkRFUik7XG4gICAgY3VzdG9tQ2FyZHMgPSB7fTtcbn07XG5jcmVkaXRDYXJkVHlwZS50eXBlcyA9IGNhcmROYW1lcztcbm1vZHVsZS5leHBvcnRzID0gY3JlZGl0Q2FyZFR5cGU7XG5cbn0se1wiLi9saWIvYWRkLW1hdGNoaW5nLWNhcmRzLXRvLXJlc3VsdHNcIjo0NSxcIi4vbGliL2NhcmQtdHlwZXNcIjo0NixcIi4vbGliL2Nsb25lXCI6NDcsXCIuL2xpYi9maW5kLWJlc3QtbWF0Y2hcIjo0OCxcIi4vbGliL2lzLXZhbGlkLWlucHV0LXR5cGVcIjo0OX1dLDQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hZGRNYXRjaGluZ0NhcmRzVG9SZXN1bHRzID0gdm9pZCAwO1xudmFyIGNsb25lXzEgPSBfZGVyZXFfKFwiLi9jbG9uZVwiKTtcbnZhciBtYXRjaGVzXzEgPSBfZGVyZXFfKFwiLi9tYXRjaGVzXCIpO1xuZnVuY3Rpb24gYWRkTWF0Y2hpbmdDYXJkc1RvUmVzdWx0cyhjYXJkTnVtYmVyLCBjYXJkQ29uZmlndXJhdGlvbiwgcmVzdWx0cykge1xuICAgIHZhciBpLCBwYXR0ZXJuTGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjYXJkQ29uZmlndXJhdGlvbi5wYXR0ZXJucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGF0dGVybiA9IGNhcmRDb25maWd1cmF0aW9uLnBhdHRlcm5zW2ldO1xuICAgICAgICBpZiAoIW1hdGNoZXNfMS5tYXRjaGVzKGNhcmROdW1iZXIsIHBhdHRlcm4pKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xvbmVkQ2FyZENvbmZpZ3VyYXRpb24gPSBjbG9uZV8xLmNsb25lKGNhcmRDb25maWd1cmF0aW9uKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICAgICAgICAgIHBhdHRlcm5MZW5ndGggPSBTdHJpbmcocGF0dGVyblswXSkubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGF0dGVybkxlbmd0aCA9IFN0cmluZyhwYXR0ZXJuKS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhcmROdW1iZXIubGVuZ3RoID49IHBhdHRlcm5MZW5ndGgpIHtcbiAgICAgICAgICAgIGNsb25lZENhcmRDb25maWd1cmF0aW9uLm1hdGNoU3RyZW5ndGggPSBwYXR0ZXJuTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHMucHVzaChjbG9uZWRDYXJkQ29uZmlndXJhdGlvbik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbmV4cG9ydHMuYWRkTWF0Y2hpbmdDYXJkc1RvUmVzdWx0cyA9IGFkZE1hdGNoaW5nQ2FyZHNUb1Jlc3VsdHM7XG5cbn0se1wiLi9jbG9uZVwiOjQ3LFwiLi9tYXRjaGVzXCI6NTB9XSw0NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBjYXJkVHlwZXMgPSB7XG4gICAgdmlzYToge1xuICAgICAgICBuaWNlVHlwZTogXCJWaXNhXCIsXG4gICAgICAgIHR5cGU6IFwidmlzYVwiLFxuICAgICAgICBwYXR0ZXJuczogWzRdLFxuICAgICAgICBnYXBzOiBbNCwgOCwgMTJdLFxuICAgICAgICBsZW5ndGhzOiBbMTYsIDE4LCAxOV0sXG4gICAgICAgIGNvZGU6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ1ZWXCIsXG4gICAgICAgICAgICBzaXplOiAzLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbWFzdGVyY2FyZDoge1xuICAgICAgICBuaWNlVHlwZTogXCJNYXN0ZXJjYXJkXCIsXG4gICAgICAgIHR5cGU6IFwibWFzdGVyY2FyZFwiLFxuICAgICAgICBwYXR0ZXJuczogW1s1MSwgNTVdLCBbMjIyMSwgMjIyOV0sIFsyMjMsIDIyOV0sIFsyMywgMjZdLCBbMjcwLCAyNzFdLCAyNzIwXSxcbiAgICAgICAgZ2FwczogWzQsIDgsIDEyXSxcbiAgICAgICAgbGVuZ3RoczogWzE2XSxcbiAgICAgICAgY29kZToge1xuICAgICAgICAgICAgbmFtZTogXCJDVkNcIixcbiAgICAgICAgICAgIHNpemU6IDMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBcImFtZXJpY2FuLWV4cHJlc3NcIjoge1xuICAgICAgICBuaWNlVHlwZTogXCJBbWVyaWNhbiBFeHByZXNzXCIsXG4gICAgICAgIHR5cGU6IFwiYW1lcmljYW4tZXhwcmVzc1wiLFxuICAgICAgICBwYXR0ZXJuczogWzM0LCAzN10sXG4gICAgICAgIGdhcHM6IFs0LCAxMF0sXG4gICAgICAgIGxlbmd0aHM6IFsxNV0sXG4gICAgICAgIGNvZGU6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ0lEXCIsXG4gICAgICAgICAgICBzaXplOiA0LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgXCJkaW5lcnMtY2x1YlwiOiB7XG4gICAgICAgIG5pY2VUeXBlOiBcIkRpbmVycyBDbHViXCIsXG4gICAgICAgIHR5cGU6IFwiZGluZXJzLWNsdWJcIixcbiAgICAgICAgcGF0dGVybnM6IFtbMzAwLCAzMDVdLCAzNiwgMzgsIDM5XSxcbiAgICAgICAgZ2FwczogWzQsIDEwXSxcbiAgICAgICAgbGVuZ3RoczogWzE0LCAxNiwgMTldLFxuICAgICAgICBjb2RlOiB7XG4gICAgICAgICAgICBuYW1lOiBcIkNWVlwiLFxuICAgICAgICAgICAgc2l6ZTogMyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGRpc2NvdmVyOiB7XG4gICAgICAgIG5pY2VUeXBlOiBcIkRpc2NvdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiZGlzY292ZXJcIixcbiAgICAgICAgcGF0dGVybnM6IFs2MDExLCBbNjQ0LCA2NDldLCA2NV0sXG4gICAgICAgIGdhcHM6IFs0LCA4LCAxMl0sXG4gICAgICAgIGxlbmd0aHM6IFsxNiwgMTldLFxuICAgICAgICBjb2RlOiB7XG4gICAgICAgICAgICBuYW1lOiBcIkNJRFwiLFxuICAgICAgICAgICAgc2l6ZTogMyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGpjYjoge1xuICAgICAgICBuaWNlVHlwZTogXCJKQ0JcIixcbiAgICAgICAgdHlwZTogXCJqY2JcIixcbiAgICAgICAgcGF0dGVybnM6IFsyMTMxLCAxODAwLCBbMzUyOCwgMzU4OV1dLFxuICAgICAgICBnYXBzOiBbNCwgOCwgMTJdLFxuICAgICAgICBsZW5ndGhzOiBbMTYsIDE3LCAxOCwgMTldLFxuICAgICAgICBjb2RlOiB7XG4gICAgICAgICAgICBuYW1lOiBcIkNWVlwiLFxuICAgICAgICAgICAgc2l6ZTogMyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHVuaW9ucGF5OiB7XG4gICAgICAgIG5pY2VUeXBlOiBcIlVuaW9uUGF5XCIsXG4gICAgICAgIHR5cGU6IFwidW5pb25wYXlcIixcbiAgICAgICAgcGF0dGVybnM6IFtcbiAgICAgICAgICAgIDYyMCxcbiAgICAgICAgICAgIFs2MjQsIDYyNl0sXG4gICAgICAgICAgICBbNjIxMDAsIDYyMTgyXSxcbiAgICAgICAgICAgIFs2MjE4NCwgNjIxODddLFxuICAgICAgICAgICAgWzYyMTg1LCA2MjE5N10sXG4gICAgICAgICAgICBbNjIyMDAsIDYyMjA1XSxcbiAgICAgICAgICAgIFs2MjIwMTAsIDYyMjk5OV0sXG4gICAgICAgICAgICA2MjIwMTgsXG4gICAgICAgICAgICBbNjIyMDE5LCA2MjI5OTldLFxuICAgICAgICAgICAgWzYyMjA3LCA2MjIwOV0sXG4gICAgICAgICAgICBbNjIyMTI2LCA2MjI5MjVdLFxuICAgICAgICAgICAgWzYyMywgNjI2XSxcbiAgICAgICAgICAgIDYyNzAsXG4gICAgICAgICAgICA2MjcyLFxuICAgICAgICAgICAgNjI3NixcbiAgICAgICAgICAgIFs2Mjc3MDAsIDYyNzc3OV0sXG4gICAgICAgICAgICBbNjI3NzgxLCA2Mjc3OTldLFxuICAgICAgICAgICAgWzYyODIsIDYyODldLFxuICAgICAgICAgICAgNjI5MSxcbiAgICAgICAgICAgIDYyOTIsXG4gICAgICAgICAgICA4MTAsXG4gICAgICAgICAgICBbODExMCwgODEzMV0sXG4gICAgICAgICAgICBbODEzMiwgODE1MV0sXG4gICAgICAgICAgICBbODE1MiwgODE2M10sXG4gICAgICAgICAgICBbODE2NCwgODE3MV0sXG4gICAgICAgIF0sXG4gICAgICAgIGdhcHM6IFs0LCA4LCAxMl0sXG4gICAgICAgIGxlbmd0aHM6IFsxNCwgMTUsIDE2LCAxNywgMTgsIDE5XSxcbiAgICAgICAgY29kZToge1xuICAgICAgICAgICAgbmFtZTogXCJDVk5cIixcbiAgICAgICAgICAgIHNpemU6IDMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtYWVzdHJvOiB7XG4gICAgICAgIG5pY2VUeXBlOiBcIk1hZXN0cm9cIixcbiAgICAgICAgdHlwZTogXCJtYWVzdHJvXCIsXG4gICAgICAgIHBhdHRlcm5zOiBbXG4gICAgICAgICAgICA0OTM2OTgsXG4gICAgICAgICAgICBbNTAwMDAwLCA1MDQxNzRdLFxuICAgICAgICAgICAgWzUwNDE3NiwgNTA2Njk4XSxcbiAgICAgICAgICAgIFs1MDY3NzksIDUwODk5OV0sXG4gICAgICAgICAgICBbNTYsIDU5XSxcbiAgICAgICAgICAgIDYzLFxuICAgICAgICAgICAgNjcsXG4gICAgICAgICAgICA2LFxuICAgICAgICBdLFxuICAgICAgICBnYXBzOiBbNCwgOCwgMTJdLFxuICAgICAgICBsZW5ndGhzOiBbMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5XSxcbiAgICAgICAgY29kZToge1xuICAgICAgICAgICAgbmFtZTogXCJDVkNcIixcbiAgICAgICAgICAgIHNpemU6IDMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBlbG86IHtcbiAgICAgICAgbmljZVR5cGU6IFwiRWxvXCIsXG4gICAgICAgIHR5cGU6IFwiZWxvXCIsXG4gICAgICAgIHBhdHRlcm5zOiBbXG4gICAgICAgICAgICA0MDExNzgsXG4gICAgICAgICAgICA0MDExNzksXG4gICAgICAgICAgICA0Mzg5MzUsXG4gICAgICAgICAgICA0NTc2MzEsXG4gICAgICAgICAgICA0NTc2MzIsXG4gICAgICAgICAgICA0MzEyNzQsXG4gICAgICAgICAgICA0NTE0MTYsXG4gICAgICAgICAgICA0NTczOTMsXG4gICAgICAgICAgICA1MDQxNzUsXG4gICAgICAgICAgICBbNTA2Njk5LCA1MDY3NzhdLFxuICAgICAgICAgICAgWzUwOTAwMCwgNTA5OTk5XSxcbiAgICAgICAgICAgIDYyNzc4MCxcbiAgICAgICAgICAgIDYzNjI5NyxcbiAgICAgICAgICAgIDYzNjM2OCxcbiAgICAgICAgICAgIFs2NTAwMzEsIDY1MDAzM10sXG4gICAgICAgICAgICBbNjUwMDM1LCA2NTAwNTFdLFxuICAgICAgICAgICAgWzY1MDQwNSwgNjUwNDM5XSxcbiAgICAgICAgICAgIFs2NTA0ODUsIDY1MDUzOF0sXG4gICAgICAgICAgICBbNjUwNTQxLCA2NTA1OThdLFxuICAgICAgICAgICAgWzY1MDcwMCwgNjUwNzE4XSxcbiAgICAgICAgICAgIFs2NTA3MjAsIDY1MDcyN10sXG4gICAgICAgICAgICBbNjUwOTAxLCA2NTA5NzhdLFxuICAgICAgICAgICAgWzY1MTY1MiwgNjUxNjc5XSxcbiAgICAgICAgICAgIFs2NTUwMDAsIDY1NTAxOV0sXG4gICAgICAgICAgICBbNjU1MDIxLCA2NTUwNThdLFxuICAgICAgICBdLFxuICAgICAgICBnYXBzOiBbNCwgOCwgMTJdLFxuICAgICAgICBsZW5ndGhzOiBbMTZdLFxuICAgICAgICBjb2RlOiB7XG4gICAgICAgICAgICBuYW1lOiBcIkNWRVwiLFxuICAgICAgICAgICAgc2l6ZTogMyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1pcjoge1xuICAgICAgICBuaWNlVHlwZTogXCJNaXJcIixcbiAgICAgICAgdHlwZTogXCJtaXJcIixcbiAgICAgICAgcGF0dGVybnM6IFtbMjIwMCwgMjIwNF1dLFxuICAgICAgICBnYXBzOiBbNCwgOCwgMTJdLFxuICAgICAgICBsZW5ndGhzOiBbMTYsIDE3LCAxOCwgMTldLFxuICAgICAgICBjb2RlOiB7XG4gICAgICAgICAgICBuYW1lOiBcIkNWUDJcIixcbiAgICAgICAgICAgIHNpemU6IDMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBoaXBlcjoge1xuICAgICAgICBuaWNlVHlwZTogXCJIaXBlclwiLFxuICAgICAgICB0eXBlOiBcImhpcGVyXCIsXG4gICAgICAgIHBhdHRlcm5zOiBbNjM3MDk1LCA2MzczNzQyMywgNjM3NDMzNTgsIDYzNzU2OCwgNjM3NTk5LCA2Mzc2MDksIDYzNzYxMl0sXG4gICAgICAgIGdhcHM6IFs0LCA4LCAxMl0sXG4gICAgICAgIGxlbmd0aHM6IFsxNl0sXG4gICAgICAgIGNvZGU6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ1ZDXCIsXG4gICAgICAgICAgICBzaXplOiAzLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgaGlwZXJjYXJkOiB7XG4gICAgICAgIG5pY2VUeXBlOiBcIkhpcGVyY2FyZFwiLFxuICAgICAgICB0eXBlOiBcImhpcGVyY2FyZFwiLFxuICAgICAgICBwYXR0ZXJuczogWzYwNjI4Ml0sXG4gICAgICAgIGdhcHM6IFs0LCA4LCAxMl0sXG4gICAgICAgIGxlbmd0aHM6IFsxNl0sXG4gICAgICAgIGNvZGU6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ1ZDXCIsXG4gICAgICAgICAgICBzaXplOiAzLFxuICAgICAgICB9LFxuICAgIH0sXG59O1xubW9kdWxlLmV4cG9ydHMgPSBjYXJkVHlwZXM7XG5cbn0se31dLDQ3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jbG9uZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGNsb25lKG9yaWdpbmFsT2JqZWN0KSB7XG4gICAgaWYgKCFvcmlnaW5hbE9iamVjdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob3JpZ2luYWxPYmplY3QpKTtcbn1cbmV4cG9ydHMuY2xvbmUgPSBjbG9uZTtcblxufSx7fV0sNDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpbmRCZXN0TWF0Y2ggPSB2b2lkIDA7XG5mdW5jdGlvbiBoYXNFbm91Z2hSZXN1bHRzVG9EZXRlcm1pbmVCZXN0TWF0Y2gocmVzdWx0cykge1xuICAgIHZhciBudW1iZXJPZlJlc3VsdHNXaXRoTWF4U3RyZW5ndGhQcm9wZXJ0eSA9IHJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIHJlc3VsdC5tYXRjaFN0cmVuZ3RoOyB9KS5sZW5ndGg7XG4gICAgLypcbiAgICAgKiBpZiBhbGwgcG9zc2libGUgcmVzdWx0cyBoYXZlIGEgbWF4U3RyZW5ndGggcHJvcGVydHkgdGhhdCBtZWFucyB0aGUgY2FyZFxuICAgICAqIG51bWJlciBpcyBzdWZmaWNpZW50bHkgbG9uZyBlbm91Z2ggdG8gZGV0ZXJtaW5lIGNvbmNsdXNpdmVseSB3aGF0IHRoZSBjYXJkXG4gICAgICogdHlwZSBpc1xuICAgICAqICovXG4gICAgcmV0dXJuIChudW1iZXJPZlJlc3VsdHNXaXRoTWF4U3RyZW5ndGhQcm9wZXJ0eSA+IDAgJiZcbiAgICAgICAgbnVtYmVyT2ZSZXN1bHRzV2l0aE1heFN0cmVuZ3RoUHJvcGVydHkgPT09IHJlc3VsdHMubGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGZpbmRCZXN0TWF0Y2gocmVzdWx0cykge1xuICAgIGlmICghaGFzRW5vdWdoUmVzdWx0c1RvRGV0ZXJtaW5lQmVzdE1hdGNoKHJlc3VsdHMpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKGJlc3RNYXRjaCwgcmVzdWx0KSB7XG4gICAgICAgIGlmICghYmVzdE1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgICAqIElmIHRoZSBjdXJyZW50IGJlc3QgbWF0Y2ggcGF0dGVybiBpcyBsZXNzIHNwZWNpZmljIHRoYW4gdGhpcyByZXN1bHQsIHNldFxuICAgICAgICAgKiB0aGUgcmVzdWx0IGFzIHRoZSBuZXcgYmVzdCBtYXRjaFxuICAgICAgICAgKiAqL1xuICAgICAgICBpZiAoTnVtYmVyKGJlc3RNYXRjaC5tYXRjaFN0cmVuZ3RoKSA8IE51bWJlcihyZXN1bHQubWF0Y2hTdHJlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJlc3RNYXRjaDtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZmluZEJlc3RNYXRjaCA9IGZpbmRCZXN0TWF0Y2g7XG5cbn0se31dLDQ5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1ZhbGlkSW5wdXRUeXBlID0gdm9pZCAwO1xuZnVuY3Rpb24gaXNWYWxpZElucHV0VHlwZShjYXJkTnVtYmVyKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjYXJkTnVtYmVyID09PSBcInN0cmluZ1wiIHx8IGNhcmROdW1iZXIgaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5leHBvcnRzLmlzVmFsaWRJbnB1dFR5cGUgPSBpc1ZhbGlkSW5wdXRUeXBlO1xuXG59LHt9XSw1MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3BvbHZvLWxhYnMvY2FyZC10eXBlL2Jsb2IvYWFhYjExZjgwZmExOTM5YmNjYzhmMjQ5MDVhMDZhZTNjZDg2NDM1Ni9zcmMvY2FyZFR5cGUuanMjTDM3LUw0MlxuICogKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWF0Y2hlcyA9IHZvaWQgMDtcbmZ1bmN0aW9uIG1hdGNoZXNSYW5nZShjYXJkTnVtYmVyLCBtaW4sIG1heCkge1xuICAgIHZhciBtYXhMZW5ndGhUb0NoZWNrID0gU3RyaW5nKG1pbikubGVuZ3RoO1xuICAgIHZhciBzdWJzdHIgPSBjYXJkTnVtYmVyLnN1YnN0cigwLCBtYXhMZW5ndGhUb0NoZWNrKTtcbiAgICB2YXIgaW50ZWdlclJlcHJlc2VudGF0aW9uT2ZDYXJkTnVtYmVyID0gcGFyc2VJbnQoc3Vic3RyLCAxMCk7XG4gICAgbWluID0gcGFyc2VJbnQoU3RyaW5nKG1pbikuc3Vic3RyKDAsIHN1YnN0ci5sZW5ndGgpLCAxMCk7XG4gICAgbWF4ID0gcGFyc2VJbnQoU3RyaW5nKG1heCkuc3Vic3RyKDAsIHN1YnN0ci5sZW5ndGgpLCAxMCk7XG4gICAgcmV0dXJuIChpbnRlZ2VyUmVwcmVzZW50YXRpb25PZkNhcmROdW1iZXIgPj0gbWluICYmXG4gICAgICAgIGludGVnZXJSZXByZXNlbnRhdGlvbk9mQ2FyZE51bWJlciA8PSBtYXgpO1xufVxuZnVuY3Rpb24gbWF0Y2hlc1BhdHRlcm4oY2FyZE51bWJlciwgcGF0dGVybikge1xuICAgIHBhdHRlcm4gPSBTdHJpbmcocGF0dGVybik7XG4gICAgcmV0dXJuIChwYXR0ZXJuLnN1YnN0cmluZygwLCBjYXJkTnVtYmVyLmxlbmd0aCkgPT09XG4gICAgICAgIGNhcmROdW1iZXIuc3Vic3RyaW5nKDAsIHBhdHRlcm4ubGVuZ3RoKSk7XG59XG5mdW5jdGlvbiBtYXRjaGVzKGNhcmROdW1iZXIsIHBhdHRlcm4pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1JhbmdlKGNhcmROdW1iZXIsIHBhdHRlcm5bMF0sIHBhdHRlcm5bMV0pO1xuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlc1BhdHRlcm4oY2FyZE51bWJlciwgcGF0dGVybik7XG59XG5leHBvcnRzLm1hdGNoZXMgPSBtYXRjaGVzO1xuXG59LHt9XSw1MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRnJhbWVidXMgPSB2b2lkIDA7XG52YXIgbGliXzEgPSBfZGVyZXFfKFwiLi9saWJcIik7XG52YXIgRGVmYXVsdFByb21pc2UgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHdpbmRvdy5Qcm9taXNlKTtcbnZhciBGcmFtZWJ1cyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGcmFtZWJ1cyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMub3JpZ2luID0gb3B0aW9ucy5vcmlnaW4gfHwgXCIqXCI7XG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IG9wdGlvbnMuY2hhbm5lbCB8fCBcIlwiO1xuICAgICAgICB0aGlzLnZlcmlmeURvbWFpbiA9IG9wdGlvbnMudmVyaWZ5RG9tYWluO1xuICAgICAgICAvLyBpZiBhIHRhcmdldEZyYW1lcyBjb25maWd1cmF0aW9uIGlzIG5vdCBwYXNzZWQgaW4sXG4gICAgICAgIC8vIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIGJyb2FkY2FzdCB0aGUgcGF5bG9hZFxuICAgICAgICAvLyB0byB0aGUgdG9wIGxldmVsIHdpbmRvdyBvciB0byB0aGUgZnJhbWUgaXRzZWxmLlxuICAgICAgICAvLyBCeSBkZWZhdWx0LCB0aGUgYnJvYWRjYXN0IGZ1bmN0aW9uIHdpbGwgbG9vcCB0aHJvdWdoXG4gICAgICAgIC8vIGFsbCB0aGUga25vd24gc2libGluZ3MgYW5kIGNoaWxkcmVuIG9mIHRoZSB3aW5kb3cuXG4gICAgICAgIC8vIElmIGEgdGFyZ2V0RnJhbWVzIGFycmF5IGlzIHBhc3NlZCwgaXQgd2lsbCBpbnN0ZWFkXG4gICAgICAgIC8vIG9ubHkgYnJvYWRjYXN0IHRvIHRob3NlIHNwZWNpZmllZCB0YXJnZXRGcmFtZXNcbiAgICAgICAgdGhpcy50YXJnZXRGcmFtZXMgPSBvcHRpb25zLnRhcmdldEZyYW1lcyB8fCBbXTtcbiAgICAgICAgdGhpcy5saW1pdEJyb2FkY2FzdFRvRnJhbWVzQXJyYXkgPSBCb29sZWFuKG9wdGlvbnMudGFyZ2V0RnJhbWVzKTtcbiAgICAgICAgdGhpcy5pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgICAgICB0aGlzLmhhc0FkZGl0aW9uYWxDaGVja3NGb3JPbkxpc3RlbmVycyA9IEJvb2xlYW4odGhpcy52ZXJpZnlEb21haW4gfHwgdGhpcy5saW1pdEJyb2FkY2FzdFRvRnJhbWVzQXJyYXkpO1xuICAgIH1cbiAgICBGcmFtZWJ1cy5zZXRQcm9taXNlID0gZnVuY3Rpb24gKFByb21pc2VHbG9iYWwpIHtcbiAgICAgICAgRnJhbWVidXMuUHJvbWlzZSA9IFByb21pc2VHbG9iYWw7XG4gICAgfTtcbiAgICBGcmFtZWJ1cy50YXJnZXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZyYW1lYnVzKG9wdGlvbnMpO1xuICAgIH07XG4gICAgRnJhbWVidXMucHJvdG90eXBlLmFkZFRhcmdldEZyYW1lID0gZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgIGlmICghdGhpcy5saW1pdEJyb2FkY2FzdFRvRnJhbWVzQXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhcmdldEZyYW1lcy5wdXNoKGZyYW1lKTtcbiAgICB9O1xuICAgIEZyYW1lYnVzLnByb3RvdHlwZS5pbmNsdWRlID0gZnVuY3Rpb24gKGNoaWxkV2luZG93KSB7XG4gICAgICAgIGlmIChjaGlsZFdpbmRvdyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkV2luZG93LldpbmRvdyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkV2luZG93LmNvbnN0cnVjdG9yICE9PSBjaGlsZFdpbmRvdy5XaW5kb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsaWJfMS5jaGlsZFdpbmRvd3MucHVzaChjaGlsZFdpbmRvdyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgRnJhbWVidXMucHJvdG90eXBlLnRhcmdldCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBGcmFtZWJ1cy50YXJnZXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBGcmFtZWJ1cy5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGRhdGEsIHJlcGx5KSB7XG4gICAgICAgIGlmICh0aGlzLmlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9yaWdpbiA9IHRoaXMub3JpZ2luO1xuICAgICAgICBldmVudE5hbWUgPSB0aGlzLm5hbWVzcGFjZUV2ZW50KGV2ZW50TmFtZSk7XG4gICAgICAgIGlmICgoMCwgbGliXzEuaXNudFN0cmluZykoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgbGliXzEuaXNudFN0cmluZykob3JpZ2luKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXBseSA9IGRhdGE7XG4gICAgICAgICAgICBkYXRhID0gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIHZhciBwYXlsb2FkID0gKDAsIGxpYl8xLnBhY2thZ2VQYXlsb2FkKShldmVudE5hbWUsIG9yaWdpbiwgZGF0YSwgcmVwbHkpO1xuICAgICAgICBpZiAoIXBheWxvYWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5saW1pdEJyb2FkY2FzdFRvRnJhbWVzQXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0RnJhbWVzQXNXaW5kb3dzKCkuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgICAgICAgICAgICAoMCwgbGliXzEuc2VuZE1lc3NhZ2UpKGZyYW1lLCBwYXlsb2FkLCBvcmlnaW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAoMCwgbGliXzEuYnJvYWRjYXN0KShwYXlsb2FkLCB7XG4gICAgICAgICAgICAgICAgb3JpZ2luOiBvcmlnaW4sXG4gICAgICAgICAgICAgICAgZnJhbWU6IHdpbmRvdy50b3AgfHwgd2luZG93LnNlbGYsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIEZyYW1lYnVzLnByb3RvdHlwZS5lbWl0QXNQcm9taXNlID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IEZyYW1lYnVzLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIGRpZEF0dGFjaExpc3RlbmVyID0gX3RoaXMuZW1pdChldmVudE5hbWUsIGRhdGEsIGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwYXlsb2FkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFkaWRBdHRhY2hMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJMaXN0ZW5lciBub3QgYWRkZWQgZm9yIFxcXCJcIi5jb25jYXQoZXZlbnROYW1lLCBcIlxcXCJcIikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcmFtZWJ1cy5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBvcmlnaW5hbEhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgb3JpZ2luID0gdGhpcy5vcmlnaW47XG4gICAgICAgIHZhciBoYW5kbGVyID0gb3JpZ2luYWxIYW5kbGVyO1xuICAgICAgICBldmVudE5hbWUgPSB0aGlzLm5hbWVzcGFjZUV2ZW50KGV2ZW50TmFtZSk7XG4gICAgICAgIGlmICgoMCwgbGliXzEuc3Vic2NyaXB0aW9uQXJnc0ludmFsaWQpKGV2ZW50TmFtZSwgaGFuZGxlciwgb3JpZ2luKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc0FkZGl0aW9uYWxDaGVja3NGb3JPbkxpc3RlbmVycykge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8taW52YWxpZC10aGlzLCBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnQgKi9cbiAgICAgICAgICAgIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYucGFzc2VzVmVyaWZ5RG9tYWluQ2hlY2sodGhpcyAmJiB0aGlzLm9yaWdpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLmhhc01hdGNoaW5nVGFyZ2V0RnJhbWUodGhpcyAmJiB0aGlzLnNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcmlnaW5hbEhhbmRsZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWludmFsaWQtdGhpcywgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50ICovXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaCh7XG4gICAgICAgICAgICBldmVudE5hbWU6IGV2ZW50TmFtZSxcbiAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgICAgICBvcmlnaW5hbEhhbmRsZXI6IG9yaWdpbmFsSGFuZGxlcixcbiAgICAgICAgfSk7XG4gICAgICAgIGxpYl8xLnN1YnNjcmliZXJzW29yaWdpbl0gPSBsaWJfMS5zdWJzY3JpYmVyc1tvcmlnaW5dIHx8IHt9O1xuICAgICAgICBsaWJfMS5zdWJzY3JpYmVyc1tvcmlnaW5dW2V2ZW50TmFtZV0gPSBsaWJfMS5zdWJzY3JpYmVyc1tvcmlnaW5dW2V2ZW50TmFtZV0gfHwgW107XG4gICAgICAgIGxpYl8xLnN1YnNjcmliZXJzW29yaWdpbl1bZXZlbnROYW1lXS5wdXNoKGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIEZyYW1lYnVzLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBvcmlnaW5hbEhhbmRsZXIpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBvcmlnaW5hbEhhbmRsZXI7XG4gICAgICAgIGlmICh0aGlzLmlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmVyaWZ5RG9tYWluKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0gdGhpcy5saXN0ZW5lcnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyLm9yaWdpbmFsSGFuZGxlciA9PT0gb3JpZ2luYWxIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBsaXN0ZW5lci5oYW5kbGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBldmVudE5hbWUgPSB0aGlzLm5hbWVzcGFjZUV2ZW50KGV2ZW50TmFtZSk7XG4gICAgICAgIHZhciBvcmlnaW4gPSB0aGlzLm9yaWdpbjtcbiAgICAgICAgaWYgKCgwLCBsaWJfMS5zdWJzY3JpcHRpb25BcmdzSW52YWxpZCkoZXZlbnROYW1lLCBoYW5kbGVyLCBvcmlnaW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmliZXJMaXN0ID0gbGliXzEuc3Vic2NyaWJlcnNbb3JpZ2luXSAmJiBsaWJfMS5zdWJzY3JpYmVyc1tvcmlnaW5dW2V2ZW50TmFtZV07XG4gICAgICAgIGlmICghc3Vic2NyaWJlckxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNjcmliZXJMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlckxpc3RbaV0gPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyTGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgRnJhbWVidXMucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc0Rlc3Ryb3llZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1tpXTtcbiAgICAgICAgICAgIHRoaXMub2ZmKGxpc3RlbmVyLmV2ZW50TmFtZSwgbGlzdGVuZXIuaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saXN0ZW5lcnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIEZyYW1lYnVzLnByb3RvdHlwZS5wYXNzZXNWZXJpZnlEb21haW5DaGVjayA9IGZ1bmN0aW9uIChvcmlnaW4pIHtcbiAgICAgICAgaWYgKCF0aGlzLnZlcmlmeURvbWFpbikge1xuICAgICAgICAgICAgLy8gYWx3YXlzIHBhc3MgdGhpcyBjaGVjayBpZiBubyB2ZXJpZnlEb21haW4gb3B0aW9uIHdhcyBzZXRcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrT3JpZ2luKG9yaWdpbik7XG4gICAgfTtcbiAgICBGcmFtZWJ1cy5wcm90b3R5cGUudGFyZ2V0RnJhbWVzQXNXaW5kb3dzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMubGltaXRCcm9hZGNhc3RUb0ZyYW1lc0FycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0RnJhbWVzXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgLy8gd2UgY2FuJ3QgcHVsbCBvZmYgdGhlIGNvbnRlbnRXaW5kb3dcbiAgICAgICAgICAgIC8vIHdoZW4gdGhlIGlmcmFtZSBpcyBvcmlnaW5hbGx5IGFkZGVkXG4gICAgICAgICAgICAvLyB0byB0aGUgYXJyYXksIGJlY2F1c2UgaWYgaXQgaXMgbm90XG4gICAgICAgICAgICAvLyBpbiB0aGUgRE9NIGF0IHRoYXQgdGltZSwgaXQgd2lsbCBoYXZlXG4gICAgICAgICAgICAvLyBhIGNvbnRlbnRXaW5kb3cgb2YgYG51bGxgXG4gICAgICAgICAgICBpZiAoZnJhbWUgaW5zdGFuY2VvZiBIVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmcmFtZS5jb250ZW50V2luZG93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZyYW1lO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAod2luKSB7XG4gICAgICAgICAgICAvLyBqdXN0IGluIGNhc2UgYW4gaWZyYW1lIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIHdhcyByZW1vdmVkIGZyb20gdGhlIERPTVxuICAgICAgICAgICAgLy8gYW5kIHRoZSBjb250ZW50V2luZG93IHByb3BlcnR5XG4gICAgICAgICAgICAvLyBpcyBudWxsXG4gICAgICAgICAgICByZXR1cm4gd2luO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZyYW1lYnVzLnByb3RvdHlwZS5oYXNNYXRjaGluZ1RhcmdldEZyYW1lID0gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoIXRoaXMubGltaXRCcm9hZGNhc3RUb0ZyYW1lc0FycmF5KSB7XG4gICAgICAgICAgICAvLyBhbHdheXMgcGFzcyB0aGlzIGNoZWNrIGlmIHdlIGFyZW4ndCBsaW1pdGluZyB0byB0aGUgdGFyZ2V0IGZyYW1lc1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hdGNoaW5nRnJhbWUgPSB0aGlzLnRhcmdldEZyYW1lc0FzV2luZG93cygpLmZpbmQoZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJhbWUgPT09IHNvdXJjZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBCb29sZWFuKG1hdGNoaW5nRnJhbWUpO1xuICAgIH07XG4gICAgRnJhbWVidXMucHJvdG90eXBlLmNoZWNrT3JpZ2luID0gZnVuY3Rpb24gKHBvc3RNZXNzYWdlT3JpZ2luKSB7XG4gICAgICAgIHZhciBtZXJjaGFudEhvc3Q7XG4gICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgIGEuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG4gICAgICAgIGlmIChhLnByb3RvY29sID09PSBcImh0dHBzOlwiKSB7XG4gICAgICAgICAgICBtZXJjaGFudEhvc3QgPSBhLmhvc3QucmVwbGFjZSgvOjQ0MyQvLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhLnByb3RvY29sID09PSBcImh0dHA6XCIpIHtcbiAgICAgICAgICAgIG1lcmNoYW50SG9zdCA9IGEuaG9zdC5yZXBsYWNlKC86ODAkLywgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtZXJjaGFudEhvc3QgPSBhLmhvc3Q7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1lcmNoYW50T3JpZ2luID0gYS5wcm90b2NvbCArIFwiLy9cIiArIG1lcmNoYW50SG9zdDtcbiAgICAgICAgaWYgKG1lcmNoYW50T3JpZ2luID09PSBwb3N0TWVzc2FnZU9yaWdpbikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmVyaWZ5RG9tYWluKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52ZXJpZnlEb21haW4ocG9zdE1lc3NhZ2VPcmlnaW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgRnJhbWVidXMucHJvdG90eXBlLm5hbWVzcGFjZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2hhbm5lbCkge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50TmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQodGhpcy5jaGFubmVsLCBcIjpcIikuY29uY2F0KGV2ZW50TmFtZSk7XG4gICAgfTtcbiAgICBGcmFtZWJ1cy5Qcm9taXNlID0gRGVmYXVsdFByb21pc2U7XG4gICAgcmV0dXJuIEZyYW1lYnVzO1xufSgpKTtcbmV4cG9ydHMuRnJhbWVidXMgPSBGcmFtZWJ1cztcblxufSx7XCIuL2xpYlwiOjU5fV0sNTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbGliXzEgPSBfZGVyZXFfKFwiLi9saWJcIik7XG52YXIgZnJhbWVidXNfMSA9IF9kZXJlcV8oXCIuL2ZyYW1lYnVzXCIpO1xuKDAsIGxpYl8xLmF0dGFjaCkoKTtcbm1vZHVsZS5leHBvcnRzID0gZnJhbWVidXNfMS5GcmFtZWJ1cztcblxufSx7XCIuL2ZyYW1lYnVzXCI6NTEsXCIuL2xpYlwiOjU5fV0sNTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRldGFjaCA9IGV4cG9ydHMuYXR0YWNoID0gdm9pZCAwO1xudmFyIF8xID0gX2RlcmVxXyhcIi4vXCIpO1xudmFyIGlzQXR0YWNoZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICBpZiAoaXNBdHRhY2hlZCB8fCB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaXNBdHRhY2hlZCA9IHRydWU7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIF8xLm9uTWVzc2FnZSwgZmFsc2UpO1xufVxuZXhwb3J0cy5hdHRhY2ggPSBhdHRhY2g7XG4vLyByZW1vdmVJZihwcm9kdWN0aW9uKVxuZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIGlzQXR0YWNoZWQgPSBmYWxzZTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgXzEub25NZXNzYWdlLCBmYWxzZSk7XG59XG5leHBvcnRzLmRldGFjaCA9IGRldGFjaDtcbi8vIGVuZFJlbW92ZUlmKHByb2R1Y3Rpb24pXG5cbn0se1wiLi9cIjo1OX1dLDU0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5icm9hZGNhc3RUb0NoaWxkV2luZG93cyA9IHZvaWQgMDtcbnZhciBfMSA9IF9kZXJlcV8oXCIuL1wiKTtcbmZ1bmN0aW9uIGJyb2FkY2FzdFRvQ2hpbGRXaW5kb3dzKHBheWxvYWQsIG9yaWdpbiwgc291cmNlKSB7XG4gICAgZm9yICh2YXIgaSA9IF8xLmNoaWxkV2luZG93cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgY2hpbGRXaW5kb3cgPSBfMS5jaGlsZFdpbmRvd3NbaV07XG4gICAgICAgIGlmIChjaGlsZFdpbmRvdy5jbG9zZWQpIHtcbiAgICAgICAgICAgIF8xLmNoaWxkV2luZG93cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc291cmNlICE9PSBjaGlsZFdpbmRvdykge1xuICAgICAgICAgICAgKDAsIF8xLmJyb2FkY2FzdCkocGF5bG9hZCwge1xuICAgICAgICAgICAgICAgIG9yaWdpbjogb3JpZ2luLFxuICAgICAgICAgICAgICAgIGZyYW1lOiBjaGlsZFdpbmRvdy50b3AsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuYnJvYWRjYXN0VG9DaGlsZFdpbmRvd3MgPSBicm9hZGNhc3RUb0NoaWxkV2luZG93cztcblxufSx7XCIuL1wiOjU5fV0sNTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJyb2FkY2FzdCA9IHZvaWQgMDtcbnZhciBfMSA9IF9kZXJlcV8oXCIuL1wiKTtcbmZ1bmN0aW9uIGJyb2FkY2FzdChwYXlsb2FkLCBvcHRpb25zKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBmcmFtZVRvQnJvYWRjYXN0VG87XG4gICAgdmFyIG9yaWdpbiA9IG9wdGlvbnMub3JpZ2luLCBmcmFtZSA9IG9wdGlvbnMuZnJhbWU7XG4gICAgdHJ5IHtcbiAgICAgICAgZnJhbWUucG9zdE1lc3NhZ2UocGF5bG9hZCwgb3JpZ2luKTtcbiAgICAgICAgaWYgKCgwLCBfMS5oYXNPcGVuZXIpKGZyYW1lKSAmJiBmcmFtZS5vcGVuZXIudG9wICE9PSB3aW5kb3cudG9wKSB7XG4gICAgICAgICAgICBicm9hZGNhc3QocGF5bG9hZCwge1xuICAgICAgICAgICAgICAgIG9yaWdpbjogb3JpZ2luLFxuICAgICAgICAgICAgICAgIGZyYW1lOiBmcmFtZS5vcGVuZXIudG9wLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJldmlvdXNseSwgb3VyIG1heCB2YWx1ZSB3YXMgZnJhbWUuZnJhbWVzLmxlbmd0aFxuICAgICAgICAvLyBidXQgZnJhbWVzLmxlbmd0aCBpbmhlcml0cyBmcm9tIHdpbmRvdy5sZW5ndGhcbiAgICAgICAgLy8gd2hpY2ggY2FuIGJlIG92ZXJ3cml0dGVuIGlmIGEgZGV2ZWxvcGVyIGRvZXNcbiAgICAgICAgLy8gYHZhciBsZW5ndGggPSB2YWx1ZTtgIG91dHNpZGUgb2YgYSBmdW5jdGlvblxuICAgICAgICAvLyBzY29wZSwgaXQnbGwgcHJldmVudCB1cyBmcm9tIGxvb3BpbmcgdGhyb3VnaFxuICAgICAgICAvLyBhbGwgdGhlIGZyYW1lcy4gV2l0aCB0aGlzLCB3ZSBsb29wIHRocm91Z2hcbiAgICAgICAgLy8gdW50aWwgdGhlcmUgYXJlIG5vIGxvbmdlciBhbnkgZnJhbWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuICAgICAgICB3aGlsZSAoKGZyYW1lVG9Ccm9hZGNhc3RUbyA9IGZyYW1lLmZyYW1lc1tpXSkpIHtcbiAgICAgICAgICAgIGJyb2FkY2FzdChwYXlsb2FkLCB7XG4gICAgICAgICAgICAgICAgb3JpZ2luOiBvcmlnaW4sXG4gICAgICAgICAgICAgICAgZnJhbWU6IGZyYW1lVG9Ccm9hZGNhc3RUbyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChfKSB7XG4gICAgICAgIC8qIGlnbm9yZWQgKi9cbiAgICB9XG59XG5leHBvcnRzLmJyb2FkY2FzdCA9IGJyb2FkY2FzdDtcblxufSx7XCIuL1wiOjU5fV0sNTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN1YnNjcmliZXJzID0gZXhwb3J0cy5jaGlsZFdpbmRvd3MgPSBleHBvcnRzLnByZWZpeCA9IHZvaWQgMDtcbmV4cG9ydHMucHJlZml4ID0gXCIvKmZyYW1lYnVzKi9cIjtcbmV4cG9ydHMuY2hpbGRXaW5kb3dzID0gW107XG5leHBvcnRzLnN1YnNjcmliZXJzID0ge307XG5cbn0se31dLDU3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kaXNwYXRjaCA9IHZvaWQgMDtcbnZhciBfMSA9IF9kZXJlcV8oXCIuL1wiKTtcbmZ1bmN0aW9uIGRpc3BhdGNoKG9yaWdpbiwgZXZlbnQsIGRhdGEsIHJlcGx5LCBlKSB7XG4gICAgaWYgKCFfMS5zdWJzY3JpYmVyc1tvcmlnaW5dKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFfMS5zdWJzY3JpYmVyc1tvcmlnaW5dW2V2ZW50XSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBhcmdzID0gW107XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgICAgYXJncy5wdXNoKGRhdGEpO1xuICAgIH1cbiAgICBpZiAocmVwbHkpIHtcbiAgICAgICAgYXJncy5wdXNoKHJlcGx5KTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfMS5zdWJzY3JpYmVyc1tvcmlnaW5dW2V2ZW50XS5sZW5ndGg7IGkrKykge1xuICAgICAgICBfMS5zdWJzY3JpYmVyc1tvcmlnaW5dW2V2ZW50XVtpXS5hcHBseShlLCBhcmdzKTtcbiAgICB9XG59XG5leHBvcnRzLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG5cbn0se1wiLi9cIjo1OX1dLDU4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNPcGVuZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBoYXNPcGVuZXIoZnJhbWUpIHtcbiAgICBpZiAoZnJhbWUudG9wICE9PSBmcmFtZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChmcmFtZS5vcGVuZXIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChmcmFtZS5vcGVuZXIgPT09IGZyYW1lKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGZyYW1lLm9wZW5lci5jbG9zZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaGFzT3BlbmVyID0gaGFzT3BlbmVyO1xuXG59LHt9XSw1OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKF9kZXJlcV8oXCIuL2F0dGFjaFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX2RlcmVxXyhcIi4vYnJvYWRjYXN0LXRvLWNoaWxkLXdpbmRvd3NcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKF9kZXJlcV8oXCIuL2Jyb2FkY2FzdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX2RlcmVxXyhcIi4vY29uc3RhbnRzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihfZGVyZXFfKFwiLi9kaXNwYXRjaFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX2RlcmVxXyhcIi4vaGFzLW9wZW5lclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX2RlcmVxXyhcIi4vaXMtbm90LXN0cmluZ1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX2RlcmVxXyhcIi4vbWVzc2FnZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX2RlcmVxXyhcIi4vcGFja2FnZS1wYXlsb2FkXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihfZGVyZXFfKFwiLi9zZW5kLW1lc3NhZ2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKF9kZXJlcV8oXCIuL3N1YnNjcmliZS1yZXBsaWVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihfZGVyZXFfKFwiLi9zdWJzY3JpcHRpb24tYXJncy1pbnZhbGlkXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihfZGVyZXFfKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX2RlcmVxXyhcIi4vdW5wYWNrLXBheWxvYWRcIiksIGV4cG9ydHMpO1xuXG59LHtcIi4vYXR0YWNoXCI6NTMsXCIuL2Jyb2FkY2FzdFwiOjU1LFwiLi9icm9hZGNhc3QtdG8tY2hpbGQtd2luZG93c1wiOjU0LFwiLi9jb25zdGFudHNcIjo1NixcIi4vZGlzcGF0Y2hcIjo1NyxcIi4vaGFzLW9wZW5lclwiOjU4LFwiLi9pcy1ub3Qtc3RyaW5nXCI6NjAsXCIuL21lc3NhZ2VcIjo2MSxcIi4vcGFja2FnZS1wYXlsb2FkXCI6NjIsXCIuL3NlbmQtbWVzc2FnZVwiOjYzLFwiLi9zdWJzY3JpYmUtcmVwbGllclwiOjY0LFwiLi9zdWJzY3JpcHRpb24tYXJncy1pbnZhbGlkXCI6NjUsXCIuL3R5cGVzXCI6NjYsXCIuL3VucGFjay1wYXlsb2FkXCI6Njd9XSw2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNudFN0cmluZyA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzbnRTdHJpbmcoc3RyKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCI7XG59XG5leHBvcnRzLmlzbnRTdHJpbmcgPSBpc250U3RyaW5nO1xuXG59LHt9XSw2MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub25NZXNzYWdlID0gdm9pZCAwO1xudmFyIF8xID0gX2RlcmVxXyhcIi4vXCIpO1xuZnVuY3Rpb24gb25NZXNzYWdlKGUpIHtcbiAgICBpZiAoKDAsIF8xLmlzbnRTdHJpbmcpKGUuZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcGF5bG9hZCA9ICgwLCBfMS51bnBhY2tQYXlsb2FkKShlKTtcbiAgICBpZiAoIXBheWxvYWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZGF0YSA9IHBheWxvYWQuZXZlbnREYXRhO1xuICAgIHZhciByZXBseSA9IHBheWxvYWQucmVwbHk7XG4gICAgKDAsIF8xLmRpc3BhdGNoKShcIipcIiwgcGF5bG9hZC5ldmVudCwgZGF0YSwgcmVwbHksIGUpO1xuICAgICgwLCBfMS5kaXNwYXRjaCkoZS5vcmlnaW4sIHBheWxvYWQuZXZlbnQsIGRhdGEsIHJlcGx5LCBlKTtcbiAgICAoMCwgXzEuYnJvYWRjYXN0VG9DaGlsZFdpbmRvd3MpKGUuZGF0YSwgcGF5bG9hZC5vcmlnaW4sIGUuc291cmNlKTtcbn1cbmV4cG9ydHMub25NZXNzYWdlID0gb25NZXNzYWdlO1xuXG59LHtcIi4vXCI6NTl9XSw2MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFja2FnZVBheWxvYWQgPSB2b2lkIDA7XG52YXIgXzEgPSBfZGVyZXFfKFwiLi9cIik7XG5mdW5jdGlvbiBwYWNrYWdlUGF5bG9hZChldmVudCwgb3JpZ2luLCBkYXRhLCByZXBseSkge1xuICAgIHZhciBwYWNrYWdlZDtcbiAgICB2YXIgcGF5bG9hZCA9IHtcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICBvcmlnaW46IG9yaWdpbixcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgcmVwbHkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBwYXlsb2FkLnJlcGx5ID0gKDAsIF8xLnN1YnNjcmliZVJlcGxpZXIpKHJlcGx5LCBvcmlnaW4pO1xuICAgIH1cbiAgICBwYXlsb2FkLmV2ZW50RGF0YSA9IGRhdGE7XG4gICAgdHJ5IHtcbiAgICAgICAgcGFja2FnZWQgPSBfMS5wcmVmaXggKyBKU09OLnN0cmluZ2lmeShwYXlsb2FkKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHN0cmluZ2lmeSBldmVudDogXCIuY29uY2F0KGUubWVzc2FnZSkpO1xuICAgIH1cbiAgICByZXR1cm4gcGFja2FnZWQ7XG59XG5leHBvcnRzLnBhY2thZ2VQYXlsb2FkID0gcGFja2FnZVBheWxvYWQ7XG5cbn0se1wiLi9cIjo1OX1dLDYzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZW5kTWVzc2FnZSA9IHZvaWQgMDtcbi8qKlxuICogQSBiYXNpYyBmdW5jdGlvbiBmb3Igd3JhcHBpbmcgdGhlIHNlbmRpbmcgb2YgcG9zdE1lc3NhZ2VzIHRvIGZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gc2VuZE1lc3NhZ2UoZnJhbWUsIHBheWxvYWQsIG9yaWdpbikge1xuICAgIHRyeSB7XG4gICAgICAgIGZyYW1lLnBvc3RNZXNzYWdlKHBheWxvYWQsIG9yaWdpbik7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAvKiBpZ25vcmVkICovXG4gICAgfVxufVxuZXhwb3J0cy5zZW5kTWVzc2FnZSA9IHNlbmRNZXNzYWdlO1xuXG59LHt9XSw2NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3Vic2NyaWJlUmVwbGllciA9IHZvaWQgMDtcbnZhciBmcmFtZWJ1c18xID0gX2RlcmVxXyhcIi4uL2ZyYW1lYnVzXCIpO1xudmFyIHV1aWRfMSA9IF9faW1wb3J0RGVmYXVsdChfZGVyZXFfKFwiQGJyYWludHJlZS91dWlkXCIpKTtcbmZ1bmN0aW9uIHN1YnNjcmliZVJlcGxpZXIoZm4sIG9yaWdpbikge1xuICAgIHZhciB1dWlkID0gKDAsIHV1aWRfMS5kZWZhdWx0KSgpO1xuICAgIGZ1bmN0aW9uIHJlcGxpZXIoZGF0YSwgcmVwbHlPcmlnaW5IYW5kbGVyKSB7XG4gICAgICAgIGZuKGRhdGEsIHJlcGx5T3JpZ2luSGFuZGxlcik7XG4gICAgICAgIGZyYW1lYnVzXzEuRnJhbWVidXMudGFyZ2V0KHtcbiAgICAgICAgICAgIG9yaWdpbjogb3JpZ2luLFxuICAgICAgICB9KS5vZmYodXVpZCwgcmVwbGllcik7XG4gICAgfVxuICAgIGZyYW1lYnVzXzEuRnJhbWVidXMudGFyZ2V0KHtcbiAgICAgICAgb3JpZ2luOiBvcmlnaW4sXG4gICAgfSkub24odXVpZCwgcmVwbGllcik7XG4gICAgcmV0dXJuIHV1aWQ7XG59XG5leHBvcnRzLnN1YnNjcmliZVJlcGxpZXIgPSBzdWJzY3JpYmVSZXBsaWVyO1xuXG59LHtcIi4uL2ZyYW1lYnVzXCI6NTEsXCJAYnJhaW50cmVlL3V1aWRcIjozOX1dLDY1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdWJzY3JpcHRpb25BcmdzSW52YWxpZCA9IHZvaWQgMDtcbnZhciBfMSA9IF9kZXJlcV8oXCIuL1wiKTtcbmZ1bmN0aW9uIHN1YnNjcmlwdGlvbkFyZ3NJbnZhbGlkKGV2ZW50LCBmbiwgb3JpZ2luKSB7XG4gICAgaWYgKCgwLCBfMS5pc250U3RyaW5nKShldmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBfMS5pc250U3RyaW5nKShvcmlnaW4pO1xufVxuZXhwb3J0cy5zdWJzY3JpcHRpb25BcmdzSW52YWxpZCA9IHN1YnNjcmlwdGlvbkFyZ3NJbnZhbGlkO1xuXG59LHtcIi4vXCI6NTl9XSw2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSx7fV0sNjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVucGFja1BheWxvYWQgPSB2b2lkIDA7XG52YXIgXzEgPSBfZGVyZXFfKFwiLi9cIik7XG5mdW5jdGlvbiB1bnBhY2tQYXlsb2FkKGUpIHtcbiAgICB2YXIgcGF5bG9hZDtcbiAgICBpZiAoZS5kYXRhLnNsaWNlKDAsIF8xLnByZWZpeC5sZW5ndGgpICE9PSBfMS5wcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBwYXlsb2FkID0gSlNPTi5wYXJzZShlLmRhdGEuc2xpY2UoXzEucHJlZml4Lmxlbmd0aCkpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBheWxvYWQucmVwbHkpIHtcbiAgICAgICAgdmFyIHJlcGx5T3JpZ2luXzEgPSBlLm9yaWdpbjtcbiAgICAgICAgdmFyIHJlcGx5U291cmNlXzEgPSBlLnNvdXJjZTtcbiAgICAgICAgdmFyIHJlcGx5RXZlbnRfMSA9IHBheWxvYWQucmVwbHk7XG4gICAgICAgIHBheWxvYWQucmVwbHkgPSBmdW5jdGlvbiByZXBseShyZXBseURhdGEpIHtcbiAgICAgICAgICAgIGlmICghcmVwbHlTb3VyY2VfMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXBseVBheWxvYWQgPSAoMCwgXzEucGFja2FnZVBheWxvYWQpKHJlcGx5RXZlbnRfMSwgcmVwbHlPcmlnaW5fMSwgcmVwbHlEYXRhKTtcbiAgICAgICAgICAgIGlmICghcmVwbHlQYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVwbHlTb3VyY2VfMS5wb3N0TWVzc2FnZShyZXBseVBheWxvYWQsIHJlcGx5T3JpZ2luXzEpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGF5bG9hZDtcbn1cbmV4cG9ydHMudW5wYWNrUGF5bG9hZCA9IHVucGFja1BheWxvYWQ7XG5cbn0se1wiLi9cIjo1OX1dLDY4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAdGhpcyB7UHJvbWlzZX1cbiAqL1xuZnVuY3Rpb24gZmluYWxseUNvbnN0cnVjdG9yKGNhbGxiYWNrKSB7XG4gIHZhciBjb25zdHJ1Y3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZWplY3QocmVhc29uKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcbn1cblxuZnVuY3Rpb24gYWxsU2V0dGxlZChhcnIpIHtcbiAgdmFyIFAgPSB0aGlzO1xuICByZXR1cm4gbmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKCEoYXJyICYmIHR5cGVvZiBhcnIubGVuZ3RoICE9PSAndW5kZWZpbmVkJykpIHtcbiAgICAgIHJldHVybiByZWplY3QoXG4gICAgICAgIG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgdHlwZW9mIGFyciArXG4gICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgYXJyICtcbiAgICAgICAgICAgICcgaXMgbm90IGl0ZXJhYmxlKGNhbm5vdCByZWFkIHByb3BlcnR5IFN5bWJvbChTeW1ib2wuaXRlcmF0b3IpKSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc29sdmUoW10pO1xuICAgIHZhciByZW1haW5pbmcgPSBhcmdzLmxlbmd0aDtcblxuICAgIGZ1bmN0aW9uIHJlcyhpLCB2YWwpIHtcbiAgICAgIGlmICh2YWwgJiYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHZhciB0aGVuID0gdmFsLnRoZW47XG4gICAgICAgIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoZW4uY2FsbChcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICByZXMoaSwgdmFsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIGFyZ3NbaV0gPSB7IHN0YXR1czogJ3JlamVjdGVkJywgcmVhc29uOiBlIH07XG4gICAgICAgICAgICAgIGlmICgtLXJlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYXJncyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXJnc1tpXSA9IHsgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IHZhbCB9O1xuICAgICAgaWYgKC0tcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgIHJlc29sdmUoYXJncyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXMoaSwgYXJnc1tpXSk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gU3RvcmUgc2V0VGltZW91dCByZWZlcmVuY2Ugc28gcHJvbWlzZS1wb2x5ZmlsbCB3aWxsIGJlIHVuYWZmZWN0ZWQgYnlcbi8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxudmFyIHNldFRpbWVvdXRGdW5jID0gc2V0VGltZW91dDtcblxuZnVuY3Rpb24gaXNBcnJheSh4KSB7XG4gIHJldHVybiBCb29sZWFuKHggJiYgdHlwZW9mIHgubGVuZ3RoICE9PSAndW5kZWZpbmVkJyk7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4vLyBQb2x5ZmlsbCBmb3IgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBQcm9taXNlKGZuKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm9taXNlcyBtdXN0IGJlIGNvbnN0cnVjdGVkIHZpYSBuZXcnKTtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgZnVuY3Rpb24nKTtcbiAgLyoqIEB0eXBlIHshbnVtYmVyfSAqL1xuICB0aGlzLl9zdGF0ZSA9IDA7XG4gIC8qKiBAdHlwZSB7IWJvb2xlYW59ICovXG4gIHRoaXMuX2hhbmRsZWQgPSBmYWxzZTtcbiAgLyoqIEB0eXBlIHtQcm9taXNlfHVuZGVmaW5lZH0gKi9cbiAgdGhpcy5fdmFsdWUgPSB1bmRlZmluZWQ7XG4gIC8qKiBAdHlwZSB7IUFycmF5PCFGdW5jdGlvbj59ICovXG4gIHRoaXMuX2RlZmVycmVkcyA9IFtdO1xuXG4gIGRvUmVzb2x2ZShmbiwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZShzZWxmLCBkZWZlcnJlZCkge1xuICB3aGlsZSAoc2VsZi5fc3RhdGUgPT09IDMpIHtcbiAgICBzZWxmID0gc2VsZi5fdmFsdWU7XG4gIH1cbiAgaWYgKHNlbGYuX3N0YXRlID09PSAwKSB7XG4gICAgc2VsZi5fZGVmZXJyZWRzLnB1c2goZGVmZXJyZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICBzZWxmLl9oYW5kbGVkID0gdHJ1ZTtcbiAgUHJvbWlzZS5faW1tZWRpYXRlRm4oZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNiID0gc2VsZi5fc3RhdGUgPT09IDEgPyBkZWZlcnJlZC5vbkZ1bGZpbGxlZCA6IGRlZmVycmVkLm9uUmVqZWN0ZWQ7XG4gICAgaWYgKGNiID09PSBudWxsKSB7XG4gICAgICAoc2VsZi5fc3RhdGUgPT09IDEgPyByZXNvbHZlIDogcmVqZWN0KShkZWZlcnJlZC5wcm9taXNlLCBzZWxmLl92YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZXQ7XG4gICAgdHJ5IHtcbiAgICAgIHJldCA9IGNiKHNlbGYuX3ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZWplY3QoZGVmZXJyZWQucHJvbWlzZSwgZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlc29sdmUoZGVmZXJyZWQucHJvbWlzZSwgcmV0KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmUoc2VsZiwgbmV3VmFsdWUpIHtcbiAgdHJ5IHtcbiAgICAvLyBQcm9taXNlIFJlc29sdXRpb24gUHJvY2VkdXJlOiBodHRwczovL2dpdGh1Yi5jb20vcHJvbWlzZXMtYXBsdXMvcHJvbWlzZXMtc3BlYyN0aGUtcHJvbWlzZS1yZXNvbHV0aW9uLXByb2NlZHVyZVxuICAgIGlmIChuZXdWYWx1ZSA9PT0gc2VsZilcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0EgcHJvbWlzZSBjYW5ub3QgYmUgcmVzb2x2ZWQgd2l0aCBpdHNlbGYuJyk7XG4gICAgaWYgKFxuICAgICAgbmV3VmFsdWUgJiZcbiAgICAgICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICApIHtcbiAgICAgIHZhciB0aGVuID0gbmV3VmFsdWUudGhlbjtcbiAgICAgIGlmIChuZXdWYWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgc2VsZi5fc3RhdGUgPSAzO1xuICAgICAgICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICBmaW5hbGUoc2VsZik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZG9SZXNvbHZlKGJpbmQodGhlbiwgbmV3VmFsdWUpLCBzZWxmKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBzZWxmLl9zdGF0ZSA9IDE7XG4gICAgc2VsZi5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICBmaW5hbGUoc2VsZik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZWplY3Qoc2VsZiwgZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVqZWN0KHNlbGYsIG5ld1ZhbHVlKSB7XG4gIHNlbGYuX3N0YXRlID0gMjtcbiAgc2VsZi5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgZmluYWxlKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBmaW5hbGUoc2VsZikge1xuICBpZiAoc2VsZi5fc3RhdGUgPT09IDIgJiYgc2VsZi5fZGVmZXJyZWRzLmxlbmd0aCA9PT0gMCkge1xuICAgIFByb21pc2UuX2ltbWVkaWF0ZUZuKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFzZWxmLl9oYW5kbGVkKSB7XG4gICAgICAgIFByb21pc2UuX3VuaGFuZGxlZFJlamVjdGlvbkZuKHNlbGYuX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWxmLl9kZWZlcnJlZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBoYW5kbGUoc2VsZiwgc2VsZi5fZGVmZXJyZWRzW2ldKTtcbiAgfVxuICBzZWxmLl9kZWZlcnJlZHMgPSBudWxsO1xufVxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBIYW5kbGVyKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9taXNlKSB7XG4gIHRoaXMub25GdWxmaWxsZWQgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IG51bGw7XG4gIHRoaXMub25SZWplY3RlZCA9IHR5cGVvZiBvblJlamVjdGVkID09PSAnZnVuY3Rpb24nID8gb25SZWplY3RlZCA6IG51bGw7XG4gIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG59XG5cbi8qKlxuICogVGFrZSBhIHBvdGVudGlhbGx5IG1pc2JlaGF2aW5nIHJlc29sdmVyIGZ1bmN0aW9uIGFuZCBtYWtlIHN1cmVcbiAqIG9uRnVsZmlsbGVkIGFuZCBvblJlamVjdGVkIGFyZSBvbmx5IGNhbGxlZCBvbmNlLlxuICpcbiAqIE1ha2VzIG5vIGd1YXJhbnRlZXMgYWJvdXQgYXN5bmNocm9ueS5cbiAqL1xuZnVuY3Rpb24gZG9SZXNvbHZlKGZuLCBzZWxmKSB7XG4gIHZhciBkb25lID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgZm4oXG4gICAgICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZShzZWxmLCB2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICByZWplY3Qoc2VsZiwgcmVhc29uKTtcbiAgICAgIH1cbiAgICApO1xuICB9IGNhdGNoIChleCkge1xuICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgZG9uZSA9IHRydWU7XG4gICAgcmVqZWN0KHNlbGYsIGV4KTtcbiAgfVxufVxuXG5Qcm9taXNlLnByb3RvdHlwZVsnY2F0Y2gnXSA9IGZ1bmN0aW9uKG9uUmVqZWN0ZWQpIHtcbiAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAvLyBAdHMtaWdub3JlXG4gIHZhciBwcm9tID0gbmV3IHRoaXMuY29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaGFuZGxlKHRoaXMsIG5ldyBIYW5kbGVyKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9tKSk7XG4gIHJldHVybiBwcm9tO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSA9IGZpbmFsbHlDb25zdHJ1Y3RvcjtcblxuUHJvbWlzZS5hbGwgPSBmdW5jdGlvbihhcnIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmICghaXNBcnJheShhcnIpKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UuYWxsIGFjY2VwdHMgYW4gYXJyYXknKSk7XG4gICAgfVxuXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc29sdmUoW10pO1xuICAgIHZhciByZW1haW5pbmcgPSBhcmdzLmxlbmd0aDtcblxuICAgIGZ1bmN0aW9uIHJlcyhpLCB2YWwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh2YWwgJiYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgdmFyIHRoZW4gPSB2YWwudGhlbjtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChcbiAgICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgICBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICByZXMoaSwgdmFsKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcmVqZWN0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhcmdzW2ldID0gdmFsO1xuICAgICAgICBpZiAoLS1yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgICByZXNvbHZlKGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICByZWplY3QoZXgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzKGksIGFyZ3NbaV0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5Qcm9taXNlLmFsbFNldHRsZWQgPSBhbGxTZXR0bGVkO1xuXG5Qcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gUHJvbWlzZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0pO1xufTtcblxuUHJvbWlzZS5yZWplY3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVqZWN0KHZhbHVlKTtcbiAgfSk7XG59O1xuXG5Qcm9taXNlLnJhY2UgPSBmdW5jdGlvbihhcnIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmICghaXNBcnJheShhcnIpKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UucmFjZSBhY2NlcHRzIGFuIGFycmF5JykpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIFByb21pc2UucmVzb2x2ZShhcnJbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9XG4gIH0pO1xufTtcblxuLy8gVXNlIHBvbHlmaWxsIGZvciBzZXRJbW1lZGlhdGUgZm9yIHBlcmZvcm1hbmNlIGdhaW5zXG5Qcm9taXNlLl9pbW1lZGlhdGVGbiA9XG4gIC8vIEB0cy1pZ25vcmVcbiAgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicgJiZcbiAgICBmdW5jdGlvbihmbikge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgc2V0SW1tZWRpYXRlKGZuKTtcbiAgICB9KSB8fFxuICBmdW5jdGlvbihmbikge1xuICAgIHNldFRpbWVvdXRGdW5jKGZuLCAwKTtcbiAgfTtcblxuUHJvbWlzZS5fdW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmdW5jdGlvbiBfdW5oYW5kbGVkUmVqZWN0aW9uRm4oZXJyKSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSkge1xuICAgIGNvbnNvbGUud2FybignUG9zc2libGUgVW5oYW5kbGVkIFByb21pc2UgUmVqZWN0aW9uOicsIGVycik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5cbn0se31dLDY5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0lvcyA9IGV4cG9ydHMuaXNJRTkgPSBleHBvcnRzLmlzU2Ftc3VuZ0Jyb3dzZXIgPSBleHBvcnRzLmlzQW5kcm9pZENocm9tZSA9IGV4cG9ydHMuaXNLaXRLYXRXZWJ2aWV3ID0gdm9pZCAwO1xuLy8gc2VydmVyIHNpZGUgcmVuZGVyaW5nIGNoZWNrXG52YXIgVUEgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHdpbmRvdy5uYXZpZ2F0b3IgJiZcbiAgICB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4vLyBUT0RPIHJlbW92ZSB0aGlzIHdoZW4gYnJvd3NlciBkZXRlY3Rpb24gaXMgY29udmVydGVkIHRvIHR5cGVzY3JpcHRcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudCAqL1xuLy8gQHRzLWlnbm9yZVxudmFyIGlzQW5kcm9pZCA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWFuZHJvaWRcIik7XG4vLyBAdHMtaWdub3JlXG52YXIgaXNDaHJvbWVPcyA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWNocm9tZS1vc1wiKTtcbi8vIEB0cy1pZ25vcmVcbnZhciBpc0Nocm9tZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWNocm9tZVwiKTtcbi8vIEB0cy1pZ25vcmVcbnZhciBpc0lvcyA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWlvc1wiKTtcbmV4cG9ydHMuaXNJb3MgPSBpc0lvcztcbi8vIEB0cy1pZ25vcmVcbnZhciBpc0lFOSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWllOVwiKTtcbmV4cG9ydHMuaXNJRTkgPSBpc0lFOTtcbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50ICovXG4vLyBPbGQgQW5kcm9pZCBXZWJ2aWV3cyB1c2VkIHNwZWNpZmljIHZlcnNpb25zIG9mIENocm9tZSB3aXRoIDAuMC4wIGFzIHRoZWlyIHZlcnNpb24gc3VmZml4XG4vLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL211bHRpZGV2aWNlL3VzZXItYWdlbnQjd2Vidmlld191c2VyX2FnZW50XG52YXIgS0lUS0FUX1dFQlZJRVdfUkVHRVggPSAvVmVyc2lvblxcL1xcZFxcLlxcZCogQ2hyb21lXFwvXFxkKlxcLjBcXC4wXFwuMC87XG5mdW5jdGlvbiBpc09sZFNhbXN1bmdCcm93c2VyT3JTYW1zdW5nV2Vidmlldyh1YSkge1xuICAgIHJldHVybiAhaXNDaHJvbWUodWEpICYmIHVhLmluZGV4T2YoXCJTYW1zdW5nXCIpID4gLTE7XG59XG5mdW5jdGlvbiBpc0tpdEthdFdlYnZpZXcodWEpIHtcbiAgICBpZiAodWEgPT09IHZvaWQgMCkgeyB1YSA9IFVBOyB9XG4gICAgcmV0dXJuIGlzQW5kcm9pZCh1YSkgJiYgS0lUS0FUX1dFQlZJRVdfUkVHRVgudGVzdCh1YSk7XG59XG5leHBvcnRzLmlzS2l0S2F0V2VidmlldyA9IGlzS2l0S2F0V2VidmlldztcbmZ1bmN0aW9uIGlzQW5kcm9pZENocm9tZSh1YSkge1xuICAgIGlmICh1YSA9PT0gdm9pZCAwKSB7IHVhID0gVUE7IH1cbiAgICByZXR1cm4gKGlzQW5kcm9pZCh1YSkgfHwgaXNDaHJvbWVPcyh1YSkpICYmIGlzQ2hyb21lKHVhKTtcbn1cbmV4cG9ydHMuaXNBbmRyb2lkQ2hyb21lID0gaXNBbmRyb2lkQ2hyb21lO1xuZnVuY3Rpb24gaXNTYW1zdW5nQnJvd3Nlcih1YSkge1xuICAgIGlmICh1YSA9PT0gdm9pZCAwKSB7IHVhID0gVUE7IH1cbiAgICByZXR1cm4gL1NhbXN1bmdCcm93c2VyLy50ZXN0KHVhKSB8fCBpc09sZFNhbXN1bmdCcm93c2VyT3JTYW1zdW5nV2Vidmlldyh1YSk7XG59XG5leHBvcnRzLmlzU2Ftc3VuZ0Jyb3dzZXIgPSBpc1NhbXN1bmdCcm93c2VyO1xuXG59LHtcIkBicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24vaXMtYW5kcm9pZFwiOjIyLFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1jaHJvbWVcIjoyNCxcIkBicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24vaXMtY2hyb21lLW9zXCI6MjMsXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWllOVwiOjI2LFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1pb3NcIjozMH1dLDcwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIGRldmljZV8xID0gX2RlcmVxXyhcIi4vbGliL2RldmljZVwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3VwcG9ydHNJbnB1dEZvcm1hdHRpbmcoKSB7XG4gICAgLy8gRGlnaXRzIGdldCBkcm9wcGVkIGluIHNhbXN1bmcgYnJvd3NlclxuICAgIHJldHVybiAhKDAsIGRldmljZV8xLmlzU2Ftc3VuZ0Jyb3dzZXIpKCk7XG59O1xuXG59LHtcIi4vbGliL2RldmljZVwiOjY5fV0sNzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKFwiLi9kaXN0L3N1cHBvcnRzLWlucHV0LWZvcm1hdHRpbmdcIik7XG5cbn0se1wiLi9kaXN0L3N1cHBvcnRzLWlucHV0LWZvcm1hdHRpbmdcIjo3MH1dLDcyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG52YXIgYXNzaWduID0gX2RlcmVxXyhcIi4uL2xpYi9hc3NpZ25cIikuYXNzaWduO1xudmFyIG1ldGhvZHMgPSBfZGVyZXFfKFwiLi4vbGliL21ldGhvZHNcIik7XG52YXIgY29udmVydE1ldGhvZHNUb0Vycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIik7XG52YXIgd3JhcFByb21pc2UgPSBfZGVyZXFfKFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIik7XG5cbi8qKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBPcHRpb25zXG4gKiBAZGVzY3JpcHRpb24gPHN0cm9uZz5Zb3UgY2Fubm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yIGRpcmVjdGx5LiBVc2Uge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2FtZXJpY2FuLWV4cHJlc3MuY3JlYXRlfGJyYWludHJlZS5hbWVyaWNhbi1leHByZXNzLmNyZWF0ZX0gaW5zdGVhZC48L3N0cm9uZz5cbiAqIEBjbGFzc2Rlc2MgVGhpcyBjbGFzcyBhbGxvd3MgeW91IHVzZSBhIG5vbmNlIHRvIGludGVyYWN0IHdpdGggQW1lcmljYW4gRXhwcmVzcyBDaGVja291dC4gVG8gYWNjZXB0IEFtZXJpY2FuIEV4cHJlc3MgY2FyZHMsIHVzZSBIb3N0ZWQgRmllbGRzLlxuICovXG5mdW5jdGlvbiBBbWVyaWNhbkV4cHJlc3Mob3B0aW9ucykge1xuICB0aGlzLl9jbGllbnQgPSBvcHRpb25zLmNsaWVudDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSByZXdhcmRzIGJhbGFuY2UgYXNzb2NpYXRlZCB3aXRoIGEgQnJhaW50cmVlIG5vbmNlLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgUmVxdWVzdCBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5ub25jZSBBbiBleGlzdGluZyBCcmFpbnRyZWUgbm9uY2UuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIDxjb2RlPmRhdGE8L2NvZGU+LCBpcyB0aGUgcmV0dXJuZWQgc2VydmVyIGRhdGEuIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBgZ2V0UmV3YXJkc0JhbGFuY2VgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgc2VydmVyIGRhdGEuXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICogQGV4YW1wbGVcbiAqIHZhciBhbWVyaWNhbkV4cHJlc3MgPSByZXF1aXJlKCdicmFpbnRyZWUtd2ViL2FtZXJpY2FuLWV4cHJlc3MnKTtcbiAqXG4gKiBhbWVyaWNhbkV4cHJlc3MuY3JlYXRlKHtjbGllbnQ6IGNsaWVudEluc3RhbmNlfSwgZnVuY3Rpb24gKGNyZWF0ZUVyciwgYW1lcmljYW5FeHByZXNzSW5zdGFuY2UpIHtcbiAqICAgdmFyIG9wdGlvbnMgPSB7bm9uY2U6IGV4aXN0aW5nQnJhaW50cmVlTm9uY2V9O1xuICogICBhbWVyaWNhbkV4cHJlc3NJbnN0YW5jZS5nZXRSZXdhcmRzQmFsYW5jZShvcHRpb25zLCBmdW5jdGlvbiAoZ2V0RXJyLCBwYXlsb2FkKSB7XG4gKiAgICAgaWYgKGdldEVyciB8fCBwYXlsb2FkLmVycm9yKSB7XG4gKiAgICAgICAvLyBIYW5kbGUgZXJyb3JcbiAqICAgICAgIHJldHVybjtcbiAqICAgICB9XG4gKlxuICogICAgIGNvbnNvbGUubG9nKCdSZXdhcmRzIGFtb3VudDogJyArIHBheWxvYWQucmV3YXJkc0Ftb3VudCk7XG4gKiAgIH0pO1xuICogfSk7XG4gKi9cbkFtZXJpY2FuRXhwcmVzcy5wcm90b3R5cGUuZ2V0UmV3YXJkc0JhbGFuY2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgbm9uY2UgPSBvcHRpb25zLm5vbmNlO1xuICB2YXIgZGF0YTtcblxuICBpZiAoIW5vbmNlKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgdHlwZTogZXJyb3JzLkFNRVhfTk9OQ0VfUkVRVUlSRUQudHlwZSxcbiAgICAgICAgY29kZTogZXJyb3JzLkFNRVhfTk9OQ0VfUkVRVUlSRUQuY29kZSxcbiAgICAgICAgbWVzc2FnZTogXCJnZXRSZXdhcmRzQmFsYW5jZSBtdXN0IGJlIGNhbGxlZCB3aXRoIGEgbm9uY2UuXCIsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBkYXRhID0gYXNzaWduKFxuICAgIHtcbiAgICAgIF9tZXRhOiB7IHNvdXJjZTogXCJhbWVyaWNhbi1leHByZXNzXCIgfSxcbiAgICAgIHBheW1lbnRNZXRob2ROb25jZTogbm9uY2UsXG4gICAgfSxcbiAgICBvcHRpb25zXG4gICk7XG5cbiAgZGVsZXRlIGRhdGEubm9uY2U7XG5cbiAgcmV0dXJuIHRoaXMuX2NsaWVudFxuICAgIC5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICAgIGVuZHBvaW50OiBcInBheW1lbnRfbWV0aG9kcy9hbWV4X3Jld2FyZHNfYmFsYW5jZVwiLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgdHlwZTogZXJyb3JzLkFNRVhfTkVUV09SS19FUlJPUi50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5BTUVYX05FVFdPUktfRVJST1IuY29kZSxcbiAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgXCJBIG5ldHdvcmsgZXJyb3Igb2NjdXJyZWQgd2hlbiBnZXR0aW5nIHRoZSBBbWVyaWNhbiBFeHByZXNzIHJld2FyZHMgYmFsYW5jZS5cIixcbiAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIEV4cHJlc3MgQ2hlY2tvdXQgbm9uY2UgcHJvZmlsZSBnaXZlbiBhIG5vbmNlIGZyb20gQW1lcmljYW4gRXhwcmVzcy5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFJlcXVlc3Qgb3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubm9uY2UgQW4gZXhpc3Rpbmcgbm9uY2UgZnJvbSBBbWVyaWNhbiBFeHByZXNzIChub3RlIHRoYXQgdGhpcyBpcyA8ZW0+bm90PC9lbT4gYSBub25jZSBmcm9tIEJyYWludHJlZSkuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIDxjb2RlPmRhdGE8L2NvZGU+LCBpcyB0aGUgcmV0dXJuZWQgc2VydmVyIGRhdGEuIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBgZ2V0RXhwcmVzc0NoZWNrb3V0UHJvZmlsZWAgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBzZXJ2ZXIgZGF0YS5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZVxuICogdmFyIGFtZXJpY2FuRXhwcmVzcyA9IHJlcXVpcmUoJ2JyYWludHJlZS13ZWIvYW1lcmljYW4tZXhwcmVzcycpO1xuICpcbiAqIGFtZXJpY2FuRXhwcmVzcy5jcmVhdGUoe2NsaWVudDogY2xpZW50SW5zdGFuY2V9LCBmdW5jdGlvbiAoY3JlYXRlRXJyLCBhbWVyaWNhbkV4cHJlc3NJbnN0YW5jZSkge1xuICogICB2YXIgb3B0aW9ucyA9IHtub25jZTogZXhpc3RpbmdBbWVyaWNhbkV4cHJlc3NOb25jZX07XG4gKiAgIGFtZXJpY2FuRXhwcmVzc0luc3RhbmNlLmdldEV4cHJlc3NDaGVja291dFByb2ZpbGUob3B0aW9ucywgZnVuY3Rpb24gKGdldEVyciwgcGF5bG9hZCkge1xuICogICAgIGlmIChnZXRFcnIpIHtcbiAqICAgICAgIC8vIEhhbmRsZSBlcnJvclxuICogICAgICAgcmV0dXJuO1xuICogICAgIH1cbiAqXG4gKiAgICAgY29uc29sZS5sb2coJ051bWJlciBvZiBjYXJkczogJyArIHBheWxvYWQuYW1leEV4cHJlc3NDaGVja291dENhcmRzLmxlbmd0aCk7XG4gKiAgIH0pO1xuICogfSk7XG4gKi9cbkFtZXJpY2FuRXhwcmVzcy5wcm90b3R5cGUuZ2V0RXhwcmVzc0NoZWNrb3V0UHJvZmlsZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucy5ub25jZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5BTUVYX05PTkNFX1JFUVVJUkVELnR5cGUsXG4gICAgICAgIGNvZGU6IGVycm9ycy5BTUVYX05PTkNFX1JFUVVJUkVELmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IFwiZ2V0RXhwcmVzc0NoZWNrb3V0UHJvZmlsZSBtdXN0IGJlIGNhbGxlZCB3aXRoIGEgbm9uY2UuXCIsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY2xpZW50XG4gICAgLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcImdldFwiLFxuICAgICAgZW5kcG9pbnQ6IFwicGF5bWVudF9tZXRob2RzL2FtZXhfZXhwcmVzc19jaGVja291dF9jYXJkcy9cIiArIG9wdGlvbnMubm9uY2UsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIF9tZXRhOiB7IHNvdXJjZTogXCJhbWVyaWNhbi1leHByZXNzXCIgfSxcbiAgICAgICAgcGF5bWVudE1ldGhvZE5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgfSxcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgdHlwZTogZXJyb3JzLkFNRVhfTkVUV09SS19FUlJPUi50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5BTUVYX05FVFdPUktfRVJST1IuY29kZSxcbiAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgXCJBIG5ldHdvcmsgZXJyb3Igb2NjdXJyZWQgd2hlbiBnZXR0aW5nIHRoZSBBbWVyaWNhbiBFeHByZXNzIENoZWNrb3V0IG5vbmNlIHByb2ZpbGUuXCIsXG4gICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBDbGVhbmx5IHRlYXIgZG93biBhbnl0aGluZyBzZXQgdXAgYnkge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2FtZXJpY2FuLWV4cHJlc3MuY3JlYXRlfGNyZWF0ZX0uXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxlZCBvbmNlIHRlYXJkb3duIGlzIGNvbXBsZXRlLiBObyBkYXRhIGlzIHJldHVybmVkIGlmIHRlYXJkb3duIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuXG4gKiBAZXhhbXBsZVxuICogYW1lcmljYW5FeHByZXNzSW5zdGFuY2UudGVhcmRvd24oKTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggY2FsbGJhY2s8L2NhcHRpb24+XG4gKiBhbWVyaWNhbkV4cHJlc3NJbnN0YW5jZS50ZWFyZG93bihmdW5jdGlvbiAoKSB7XG4gKiAgIC8vIHRlYXJkb3duIGlzIGNvbXBsZXRlXG4gKiB9KTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cbkFtZXJpY2FuRXhwcmVzcy5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnZlcnRNZXRob2RzVG9FcnJvcih0aGlzLCBtZXRob2RzKEFtZXJpY2FuRXhwcmVzcy5wcm90b3R5cGUpKTtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBQcm9taXNlLndyYXBQcm90b3R5cGUoQW1lcmljYW5FeHByZXNzKTtcblxufSx7XCIuLi9saWIvYXNzaWduXCI6MTIxLFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIjoxMjcsXCIuLi9saWIvbWV0aG9kc1wiOjE1NSxcIi4vZXJyb3JzXCI6NzMsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sNzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuQW1lcmljYW4gRXhwcmVzcyAtIGdldFJld2FyZHNCYWxhbmNlIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiBjcmVhdGluZyBjb21wb25lbnRzLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gQU1FWF9OT05DRV9SRVFVSVJFRCBPY2N1cnMgd2hlbiBhIG5vbmNlIGlzIG5vdCBwcm92aWRlZCB0byBtZXRob2QuXG4gKiBAcHJvcGVydHkge05FVFdPUkt9IEFNRVhfTkVUV09SS19FUlJPUiBPY2N1cnMgd2hlbiB0aGVyZSBpcyBhbiBlcnJvciBjb21tdW5pY2F0aW5nIHdpdGggdGhlIEJyYWludHJlZSBnYXRld2F5LlxuICovXG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuQW1lcmljYW4gRXhwcmVzcyAtIGdldEV4cHJlc3NDaGVja291dFByb2ZpbGUgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIGNyZWF0aW5nIGNvbXBvbmVudHMuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBBTUVYX05PTkNFX1JFUVVJUkVEIE9jY3VycyB3aGVuIGEgbm9uY2UgaXMgbm90IHByb3ZpZGVkIHRvIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7TkVUV09SS30gQU1FWF9ORVRXT1JLX0VSUk9SIE9jY3VycyB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIGNvbW11bmljYXRpbmcgd2l0aCB0aGUgQnJhaW50cmVlIGdhdGV3YXkuXG4gKi9cblxudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBTUVYX05PTkNFX1JFUVVJUkVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJBTUVYX05PTkNFX1JFUVVJUkVEXCIsXG4gIH0sXG4gIEFNRVhfTkVUV09SS19FUlJPUjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk5FVFdPUkssXG4gICAgY29kZTogXCJBTUVYX05FVFdPUktfRVJST1JcIixcbiAgfSxcbn07XG5cbn0se1wiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNH1dLDc0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbW9kdWxlIGJyYWludHJlZS13ZWIvYW1lcmljYW4tZXhwcmVzc1xuICogQGRlc2NyaXB0aW9uIFRoaXMgbW9kdWxlIGlzIGZvciB1c2Ugd2l0aCBBbWV4IEV4cHJlc3MgQ2hlY2tvdXQuIFRvIGFjY2VwdCBBbWVyaWNhbiBFeHByZXNzIGNhcmRzLCB1c2UgSG9zdGVkIEZpZWxkcy5cbiAqL1xuXG52YXIgQW1lcmljYW5FeHByZXNzID0gX2RlcmVxXyhcIi4vYW1lcmljYW4tZXhwcmVzc1wiKTtcbnZhciBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvbiA9IF9kZXJlcV8oXCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiKTtcbnZhciBjcmVhdGVEZWZlcnJlZENsaWVudCA9IF9kZXJlcV8oXCIuLi9saWIvY3JlYXRlLWRlZmVycmVkLWNsaWVudFwiKTtcbnZhciBjcmVhdGVBc3NldHNVcmwgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDcmVhdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgYGRhdGFgLCBpcyB0aGUge0BsaW5rIEFtZXJpY2FuRXhwcmVzc30gaW5zdGFuY2UuIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBgY3JlYXRlYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHtAbGluayBBbWVyaWNhbkV4cHJlc3N9IGluc3RhbmNlLlxuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgdmFyIG5hbWUgPSBcIkFtZXJpY2FuIEV4cHJlc3NcIjtcblxuICByZXR1cm4gYmFzaWNDb21wb25lbnRWZXJpZmljYXRpb25cbiAgICAudmVyaWZ5KHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgYXV0aG9yaXphdGlvbjogb3B0aW9ucy5hdXRob3JpemF0aW9uLFxuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZURlZmVycmVkQ2xpZW50LmNyZWF0ZSh7XG4gICAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgICAgY2xpZW50OiBvcHRpb25zLmNsaWVudCxcbiAgICAgICAgZGVidWc6IG9wdGlvbnMuZGVidWcsXG4gICAgICAgIGFzc2V0c1VybDogY3JlYXRlQXNzZXRzVXJsLmNyZWF0ZShvcHRpb25zLmF1dGhvcml6YXRpb24pLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgfSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICBvcHRpb25zLmNsaWVudCA9IGNsaWVudDtcblxuICAgICAgcmV0dXJuIG5ldyBBbWVyaWNhbkV4cHJlc3Mob3B0aW9ucyk7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IHdyYXBQcm9taXNlKGNyZWF0ZSksXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgU0RLLCBpLmUuIGB7QHBrZyB2ZXJzaW9ufWAuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBWRVJTSU9OOiBWRVJTSU9OLFxufTtcblxufSx7XCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiOjEyMixcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiOjEyOSxcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCI6MTMxLFwiLi9hbWVyaWNhbi1leHByZXNzXCI6NzIsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sNzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGFuYWx5dGljcyA9IF9kZXJlcV8oXCIuLi9saWIvYW5hbHl0aWNzXCIpO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL2Vycm9yc1wiKTtcbnZhciBtZXRob2RzID0gX2RlcmVxXyhcIi4uL2xpYi9tZXRob2RzXCIpO1xudmFyIGNvbnZlcnRNZXRob2RzVG9FcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvY29udmVydC1tZXRob2RzLXRvLWVycm9yXCIpO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IEFwcGxlUGF5fnRva2VuaXplUGF5bG9hZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5vbmNlIFRoZSBwYXltZW50IG1ldGhvZCBub25jZS5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkZXRhaWxzIEFkZGl0aW9uYWwgZGV0YWlscy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmNhcmRUeXBlIFR5cGUgb2YgY2FyZCwgZXg6IFZpc2EsIE1hc3RlckNhcmQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5jYXJkSG9sZGVyTmFtZSBUaGUgbmFtZSBvZiB0aGUgY2FyZCBob2xkZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5kcGFuTGFzdFR3byBMYXN0IHR3byBkaWdpdHMgb2YgY2FyZCBudW1iZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGVzY3JpcHRpb24gQSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSBwYXltZW50IG1ldGhvZCB0eXBlLCBhbHdheXMgYEFwcGxlUGF5Q2FyZGAuXG4gKiBAcHJvcGVydHkge29iamVjdH0gYmluRGF0YSBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY2FyZCBiYXNlZCBvbiB0aGUgYmluLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuY29tbWVyY2lhbCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5jb3VudHJ5T2ZJc3N1YW5jZSBUaGUgY291bnRyeSBvZiBpc3N1YW5jZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmRlYml0IFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmR1cmJpblJlZ3VsYXRlZCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5oZWFsdGhjYXJlIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmlzc3VpbmdCYW5rIFRoZSBpc3N1aW5nIGJhbmsuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5wYXlyb2xsIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLnByZXBhaWQgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEucHJvZHVjdElkIFRoZSBwcm9kdWN0IGlkLlxuICovXG5cbi8qKlxuICogQW4gQXBwbGUgUGF5IFBheW1lbnQgQXV0aG9yaXphdGlvbiBFdmVudCBvYmplY3QuXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBBcHBsZVBheVBheW1lbnRBdXRob3JpemVkRXZlbnRcbiAqIEBleHRlcm5hbCBBcHBsZVBheVBheW1lbnRBdXRob3JpemVkRXZlbnRcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9yZWZlcmVuY2UvYXBwbGVwYXlqcy9hcHBsZXBheXBheW1lbnRhdXRob3JpemVkZXZlbnQgQXBwbGVQYXlQYXltZW50QXV0aG9yaXplZEV2ZW50fVxuICovXG5cbi8qKlxuICogQW4gQXBwbGUgUGF5IFBheW1lbnQgUmVxdWVzdCBvYmplY3QuXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBBcHBsZVBheVBheW1lbnRSZXF1ZXN0XG4gKiBAZXh0ZXJuYWwgQXBwbGVQYXlQYXltZW50UmVxdWVzdFxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3JlZmVyZW5jZS9hcHBsZXBheWpzLzE5MTYwODItYXBwbGVwYXlfanNfZGF0YV90eXBlcy9wYXltZW50cmVxdWVzdCBQYXltZW50UmVxdWVzdH1cbiAqL1xuXG4vKipcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9uc1xuICogQGRlc2NyaXB0aW9uIDxzdHJvbmc+WW91IGNhbm5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gVXNlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9hcHBsZS1wYXkuY3JlYXRlfGJyYWludHJlZS5hcHBsZVBheS5jcmVhdGV9IGluc3RlYWQuPC9zdHJvbmc+XG4gKiBAY2xhc3NkZXNjIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhbiBBcHBsZSBQYXkgY29tcG9uZW50LiBJbnN0YW5jZXMgb2YgdGhpcyBjbGFzcyBoYXZlIG1ldGhvZHMgZm9yIHZhbGlkYXRpbmcgdGhlIG1lcmNoYW50IHNlcnZlciBhbmQgdG9rZW5pemluZyBwYXltZW50cy5cbiAqL1xuZnVuY3Rpb24gQXBwbGVQYXkob3B0aW9ucykge1xuICB0aGlzLl9pbnN0YW50aWF0ZWRXaXRoQ2xpZW50ID0gQm9vbGVhbighb3B0aW9ucy51c2VEZWZlcnJlZENsaWVudCk7XG4gIHRoaXMuX2NsaWVudCA9IG9wdGlvbnMuY2xpZW50O1xuICB0aGlzLl9jcmVhdGVQcm9taXNlID0gb3B0aW9ucy5jcmVhdGVQcm9taXNlO1xuXG4gIGlmICh0aGlzLl9jbGllbnQpIHtcbiAgICB0aGlzLl9zZXRNZXJjaGFudElkZW50aWZpZXIoKTtcbiAgfVxufVxuXG5BcHBsZVBheS5wcm90b3R5cGUuX3dhaXRGb3JDbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9jbGllbnQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlUHJvbWlzZS50aGVuKFxuICAgIGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcblxuICAgICAgdGhpcy5fc2V0TWVyY2hhbnRJZGVudGlmaWVyKCk7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG59O1xuXG5BcHBsZVBheS5wcm90b3R5cGUuX3NldE1lcmNoYW50SWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFwcGxlUGF5Q29uZmlnID1cbiAgICB0aGlzLl9jbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpLmdhdGV3YXlDb25maWd1cmF0aW9uLmFwcGxlUGF5V2ViO1xuXG4gIGlmICghYXBwbGVQYXlDb25maWcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIEBuYW1lIEFwcGxlUGF5I21lcmNoYW50SWRlbnRpZmllclxuICAgKiBAZGVzY3JpcHRpb24gQSBzcGVjaWFsIG1lcmNoYW50IElEIHdoaWNoIHJlcHJlc2VudHMgdGhlIG1lcmNoYW50IGFzc29jaWF0aW9uIHdpdGggQnJhaW50cmVlLiBSZXF1aXJlZCB3aGVuIHVzaW5nIGBBcHBsZVBheVNlc3Npb24uY2FuTWFrZVBheW1lbnRzV2l0aEFjdGl2ZUNhcmRgLlxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgcHJvbWlzZSA9IEFwcGxlUGF5U2Vzc2lvbi5jYW5NYWtlUGF5bWVudHNXaXRoQWN0aXZlQ2FyZChhcHBsZVBheUluc3RhbmNlLm1lcmNoYW50SWRlbnRpZmllcik7XG4gICAqIHByb21pc2UudGhlbihmdW5jdGlvbiAoY2FuTWFrZVBheW1lbnRzV2l0aEFjdGl2ZUNhcmQpIHtcbiAgICogICBpZiAoY2FuTWFrZVBheW1lbnRzV2l0aEFjdGl2ZUNhcmQpIHtcbiAgICogICAgIC8vIFNldCB1cCBBcHBsZSBQYXkgYnV0dG9uc1xuICAgKiAgIH1cbiAgICogfSk7XG4gICAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXJjaGFudElkZW50aWZpZXJcIiwge1xuICAgIHZhbHVlOiBhcHBsZVBheUNvbmZpZy5tZXJjaGFudElkZW50aWZpZXIsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBNZXJnZXMgYSBwYXltZW50IHJlcXVlc3Qgd2l0aCBCcmFpbnRyZWUgZGVmYXVsdHMgdG8gcmV0dXJuIGFuIHtleHRlcm5hbDpBcHBsZVBheVBheW1lbnRSZXF1ZXN0fS5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIGFzc2lnbmVkIHRvIGBwYXltZW50UmVxdWVzdGAgaWYgbm90IGFscmVhZHkgZGVmaW5lZC4gVGhlaXIgZGVmYXVsdCB2YWx1ZXMgY29tZSBmcm9tIHRoZSBCcmFpbnRyZWUgZ2F0ZXdheS5cbiAqIC0gYGNvdW50cnlDb2RlYFxuICogLSBgY3VycmVuY3lDb2RlYFxuICogLSBgbWVyY2hhbnRDYXBhYmlsaXRpZXNgXG4gKiAtIGBzdXBwb3J0ZWROZXR3b3Jrc2BcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7ZXh0ZXJuYWw6QXBwbGVQYXlQYXltZW50UmVxdWVzdH0gcGF5bWVudFJlcXVlc3QgVGhlIHBheW1lbnQgcmVxdWVzdCBkZXRhaWxzIHRvIGFwcGx5IG9uIHRvcCBvZiB0aG9zZSBmcm9tIEJyYWludHJlZS5cbiAqIEByZXR1cm5zIHtleHRlcm5hbDpBcHBsZVBheVBheW1lbnRSZXF1ZXN0fFByb21pc2V9IFRoZSBkZWNvcmF0ZWQgYHBheW1lbnRSZXF1ZXN0YCBvYmplY3QuIElmIGB1c2VEZWZlcnJlZENsaWVudGAgaXMgdXNlZCBhbG9uZyB3aXRoIGFuIGBhdXRob3JpemF0aW9uYCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgYHBheW1lbnRSZXF1ZXN0YCBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICogdmFyIGFwcGxlUGF5ID0gcmVxdWlyZSgnYnJhaW50cmVlLXdlYi9hcHBsZS1wYXknKTtcbiAqXG4gKiBhcHBsZVBheS5jcmVhdGUoe2NsaWVudDogY2xpZW50SW5zdGFuY2V9LCBmdW5jdGlvbiAoYXBwbGVQYXlFcnIsIGFwcGxlUGF5SW5zdGFuY2UpIHtcbiAqICAgaWYgKGFwcGxlUGF5RXJyKSB7XG4gKiAgICAgLy8gSGFuZGxlIGVycm9yIGhlcmVcbiAqICAgICByZXR1cm47XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwYXltZW50UmVxdWVzdCA9IGFwcGxlUGF5SW5zdGFuY2UuY3JlYXRlUGF5bWVudFJlcXVlc3Qoe1xuICogICAgIHRvdGFsOiB7XG4gKiAgICAgICBsYWJlbDogJ015IENvbXBhbnknLFxuICogICAgICAgYW1vdW50OiAnMTkuOTknXG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiAgIHZhciBzZXNzaW9uID0gbmV3IEFwcGxlUGF5U2Vzc2lvbigzLCBwYXltZW50UmVxdWVzdCk7XG4gKlxuICogICAvLyAuLi5cbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggZGVmZXJyZWQgY2xpZW50PC9jYXB0aW9uPlxuICogdmFyIGFwcGxlUGF5ID0gcmVxdWlyZSgnYnJhaW50cmVlLXdlYi9hcHBsZS1wYXknKTtcbiAqXG4gKiBhcHBsZVBheS5jcmVhdGUoe1xuICogICBhdXRob3JpemF0aW9uOiAnY2xpZW50LXRva2VuLW9yLXRva2VuaXphdGlvbi1rZXknLFxuICogICB1c2VEZWZlcnJlZENsaWVudDogdHJ1ZVxuICogfSwgZnVuY3Rpb24gKGFwcGxlUGF5RXJyLCBhcHBsZVBheUluc3RhbmNlKSB7XG4gKiAgIGlmIChhcHBsZVBheUVycikge1xuICogICAgIC8vIEhhbmRsZSBlcnJvciBoZXJlXG4gKiAgICAgcmV0dXJuO1xuICogICB9XG4gKlxuICogICBhcHBsZVBheUluc3RhbmNlLmNyZWF0ZVBheW1lbnRSZXF1ZXN0KHtcbiAqICAgICB0b3RhbDoge1xuICogICAgICAgbGFiZWw6ICdNeSBDb21wYW55JyxcbiAqICAgICAgIGFtb3VudDogJzE5Ljk5J1xuICogICAgIH1cbiAqICAgfSkudGhlbihmdW5jdGlvbiAocGF5bWVudFJlcXVlc3QpIHtcbiAqICAgICB2YXIgc2Vzc2lvbiA9IG5ldyBBcHBsZVBheVNlc3Npb24oMywgcGF5bWVudFJlcXVlc3QpO1xuICpcbiAqICAgICAvLyAuLi5cbiAqICAgfSk7XG4gKi9cbkFwcGxlUGF5LnByb3RvdHlwZS5jcmVhdGVQYXltZW50UmVxdWVzdCA9IGZ1bmN0aW9uIChwYXltZW50UmVxdWVzdCkge1xuICBpZiAodGhpcy5faW5zdGFudGlhdGVkV2l0aENsaWVudCkge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVQYXltZW50UmVxdWVzdFN5bmNocm9ub3VzbHkocGF5bWVudFJlcXVlc3QpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX3dhaXRGb3JDbGllbnQoKS50aGVuKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVQYXltZW50UmVxdWVzdFN5bmNocm9ub3VzbHkocGF5bWVudFJlcXVlc3QpO1xuICAgIH0uYmluZCh0aGlzKVxuICApO1xufTtcblxuQXBwbGVQYXkucHJvdG90eXBlLl9jcmVhdGVQYXltZW50UmVxdWVzdFN5bmNocm9ub3VzbHkgPSBmdW5jdGlvbiAoXG4gIHBheW1lbnRSZXF1ZXN0XG4pIHtcbiAgdmFyIGFwcGxlUGF5ID1cbiAgICB0aGlzLl9jbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpLmdhdGV3YXlDb25maWd1cmF0aW9uLmFwcGxlUGF5V2ViO1xuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgY291bnRyeUNvZGU6IGFwcGxlUGF5LmNvdW50cnlDb2RlLFxuICAgIGN1cnJlbmN5Q29kZTogYXBwbGVQYXkuY3VycmVuY3lDb2RlLFxuICAgIG1lcmNoYW50Q2FwYWJpbGl0aWVzOiBhcHBsZVBheS5tZXJjaGFudENhcGFiaWxpdGllcyB8fCBbXCJzdXBwb3J0czNEU1wiXSxcbiAgICBzdXBwb3J0ZWROZXR3b3JrczogYXBwbGVQYXkuc3VwcG9ydGVkTmV0d29ya3MubWFwKGZ1bmN0aW9uIChuZXR3b3JrKSB7XG4gICAgICByZXR1cm4gbmV0d29yayA9PT0gXCJtYXN0ZXJjYXJkXCIgPyBcIm1hc3RlckNhcmRcIiA6IG5ldHdvcms7XG4gICAgfSksXG4gIH07XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCBwYXltZW50UmVxdWVzdCk7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlcyB5b3VyIG1lcmNoYW50IHdlYnNpdGUsIGFzIHJlcXVpcmVkIGJ5IGBBcHBsZVBheVNlc3Npb25gIGJlZm9yZSBwYXltZW50IGNhbiBiZSBhdXRob3JpemVkLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudmFsaWRhdGlvblVSTCBUaGUgdmFsaWRhdGlvblVSTCBmcm9tIGFuIGBBcHBsZVBheVZhbGlkYXRlTWVyY2hhbnRFdmVudGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5kaXNwbGF5TmFtZSBUaGUgY2Fub25pY2FsIG5hbWUgZm9yIHlvdXIgc3RvcmUuIFVzZSBhIG5vbi1sb2NhbGl6ZWQgbmFtZS4gVGhpcyBwYXJhbWV0ZXIgc2hvdWxkIGJlIGEgVVRGLTggc3RyaW5nIHRoYXQgaXMgYSBtYXhpbXVtIG9mIDY0IGNoYXJhY3RlcnMuIFRoZSBzeXN0ZW0gbWF5IGRpc3BsYXkgdGhpcyBuYW1lIHRvIHRoZSB1c2VyLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgc2Vjb25kIGFyZ3VtZW50LCA8Y29kZT5kYXRhPC9jb2RlPiwgaXMgdGhlIEFwcGxlIFBheSBtZXJjaGFudCBzZXNzaW9uIG9iamVjdC4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGBwZXJmb3JtVmFsaWRhdGlvbmAgcmV0dXJucyBhIHByb21pc2UuXG4gKiBQYXNzIHRoZSBtZXJjaGFudCBzZXNzaW9uIHRvIHlvdXIgQXBwbGUgUGF5IHNlc3Npb24ncyBgY29tcGxldGVNZXJjaGFudFZhbGlkYXRpb25gIG1ldGhvZC5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZVxuICogdmFyIGFwcGxlUGF5ID0gcmVxdWlyZSgnYnJhaW50cmVlLXdlYi9hcHBsZS1wYXknKTtcbiAqXG4gKiBhcHBsZVBheS5jcmVhdGUoe2NsaWVudDogY2xpZW50SW5zdGFuY2V9LCBmdW5jdGlvbiAoYXBwbGVQYXlFcnIsIGFwcGxlUGF5SW5zdGFuY2UpIHtcbiAqICAgaWYgKGFwcGxlUGF5RXJyKSB7XG4gKiAgICAgLy8gSGFuZGxlIGVycm9yIGhlcmVcbiAqICAgICByZXR1cm47XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwYXltZW50UmVxdWVzdCA9IGFwcGxlUGF5SW5zdGFuY2UuY3JlYXRlUGF5bWVudFJlcXVlc3Qoe1xuICogICAgIHRvdGFsOiB7XG4gKiAgICAgICBsYWJlbDogJ015IENvbXBhbnknLFxuICogICAgICAgYW1vdW50OiAnMTkuOTknXG4gKiAgICAgfVxuICogICB9KTtcbiAqICAgdmFyIHNlc3Npb24gPSBuZXcgQXBwbGVQYXlTZXNzaW9uKDMsIHBheW1lbnRSZXF1ZXN0KTtcbiAqXG4gKiAgIHNlc3Npb24ub252YWxpZGF0ZW1lcmNoYW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgYXBwbGVQYXlJbnN0YW5jZS5wZXJmb3JtVmFsaWRhdGlvbih7XG4gKiAgICAgICB2YWxpZGF0aW9uVVJMOiBldmVudC52YWxpZGF0aW9uVVJMLFxuICogICAgICAgZGlzcGxheU5hbWU6ICdNeSBHcmVhdCBTdG9yZSdcbiAqICAgICB9LCBmdW5jdGlvbiAodmFsaWRhdGlvbkVyciwgdmFsaWRhdGlvbkRhdGEpIHtcbiAqICAgICAgIGlmICh2YWxpZGF0aW9uRXJyKSB7XG4gKiAgICAgICAgIGNvbnNvbGUuZXJyb3IodmFsaWRhdGlvbkVycik7XG4gKiAgICAgICAgIHNlc3Npb24uYWJvcnQoKTtcbiAqICAgICAgICAgcmV0dXJuO1xuICogICAgICAgfVxuICpcbiAqICAgICAgIHNlc3Npb24uY29tcGxldGVNZXJjaGFudFZhbGlkYXRpb24odmFsaWRhdGlvbkRhdGEpO1xuICogICAgIH0pO1xuICogICB9O1xuICogfSk7XG4gKi9cbkFwcGxlUGF5LnByb3RvdHlwZS5wZXJmb3JtVmFsaWRhdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMudmFsaWRhdGlvblVSTCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuQVBQTEVfUEFZX1ZBTElEQVRJT05fVVJMX1JFUVVJUkVEKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fd2FpdEZvckNsaWVudCgpXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFwcGxlUGF5V2ViU2Vzc2lvbiA9IHtcbiAgICAgICAgdmFsaWRhdGlvblVybDogb3B0aW9ucy52YWxpZGF0aW9uVVJMLFxuICAgICAgICBkb21haW5OYW1lOiBvcHRpb25zLmRvbWFpbk5hbWUgfHwgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLFxuICAgICAgICBtZXJjaGFudElkZW50aWZpZXI6XG4gICAgICAgICAgb3B0aW9ucy5tZXJjaGFudElkZW50aWZpZXIgfHwgc2VsZi5tZXJjaGFudElkZW50aWZpZXIsXG4gICAgICB9O1xuXG4gICAgICBpZiAob3B0aW9ucy5kaXNwbGF5TmFtZSAhPSBudWxsKSB7XG4gICAgICAgIGFwcGxlUGF5V2ViU2Vzc2lvbi5kaXNwbGF5TmFtZSA9IG9wdGlvbnMuZGlzcGxheU5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLl9jbGllbnQucmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICAgIGVuZHBvaW50OiBcImFwcGxlX3BheV93ZWIvc2Vzc2lvbnNcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIF9tZXRhOiB7IHNvdXJjZTogXCJhcHBsZS1wYXlcIiB9LFxuICAgICAgICAgIGFwcGxlUGF5V2ViU2Vzc2lvbjogYXBwbGVQYXlXZWJTZXNzaW9uLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoc2VsZi5fY2xpZW50LCBcImFwcGxlcGF5LnBlcmZvcm1WYWxpZGF0aW9uLnN1Y2NlZWRlZFwiKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwiYXBwbGVwYXkucGVyZm9ybVZhbGlkYXRpb24uZmFpbGVkXCIpO1xuXG4gICAgICBpZiAoZXJyLmNvZGUgPT09IFwiQ0xJRU5UX1JFUVVFU1RfRVJST1JcIikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICAgIHR5cGU6IGVycm9ycy5BUFBMRV9QQVlfTUVSQ0hBTlRfVkFMSURBVElPTl9GQUlMRUQudHlwZSxcbiAgICAgICAgICAgIGNvZGU6IGVycm9ycy5BUFBMRV9QQVlfTUVSQ0hBTlRfVkFMSURBVElPTl9GQUlMRUQuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9ycy5BUFBMRV9QQVlfTUVSQ0hBTlRfVkFMSURBVElPTl9GQUlMRUQubWVzc2FnZSxcbiAgICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyLmRldGFpbHMub3JpZ2luYWxFcnJvcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICAgIHR5cGU6IGVycm9ycy5BUFBMRV9QQVlfTUVSQ0hBTlRfVkFMSURBVElPTl9ORVRXT1JLLnR5cGUsXG4gICAgICAgICAgY29kZTogZXJyb3JzLkFQUExFX1BBWV9NRVJDSEFOVF9WQUxJREFUSU9OX05FVFdPUksuY29kZSxcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvcnMuQVBQTEVfUEFZX01FUkNIQU5UX1ZBTElEQVRJT05fTkVUV09SSy5tZXNzYWdlLFxuICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycixcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogVG9rZW5pemVzIGFuIEFwcGxlIFBheSBwYXltZW50LiBUaGlzIHdpbGwgbGlrZWx5IGJlIGNhbGxlZCBpbiB5b3VyIGBBcHBsZVBheVNlc3Npb25gJ3MgYG9ucGF5bWVudGF1dGhvcml6ZWRgIGNhbGxiYWNrLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMudG9rZW4gVGhlIGBwYXltZW50LnRva2VuYCBwcm9wZXJ0eSBvZiBhbiB7QGxpbmsgZXh0ZXJuYWw6QXBwbGVQYXlQYXltZW50QXV0aG9yaXplZEV2ZW50fS5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgPGNvZGU+ZGF0YTwvY29kZT4sIGlzIGEge0BsaW5rIEFwcGxlUGF5fnRva2VuaXplUGF5bG9hZHx0b2tlbml6ZVBheWxvYWR9LiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgYHRva2VuaXplYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSB7QGxpbmsgQXBwbGVQYXl+dG9rZW5pemVQYXlsb2FkfHRva2VuaXplUGF5bG9hZH0uXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICogQGV4YW1wbGVcbiAqIHZhciBhcHBsZVBheSA9IHJlcXVpcmUoJ2JyYWludHJlZS13ZWIvYXBwbGUtcGF5Jyk7XG4gKlxuICogYXBwbGVQYXkuY3JlYXRlKHtjbGllbnQ6IGNsaWVudEluc3RhbmNlfSwgZnVuY3Rpb24gKGFwcGxlUGF5RXJyLCBhcHBsZVBheUluc3RhbmNlKSB7XG4gKiAgIGlmIChhcHBsZVBheUVycikge1xuICogICAgIC8vIEhhbmRsZSBlcnJvciBoZXJlXG4gKiAgICAgcmV0dXJuO1xuICogICB9XG4gKlxuICogICB2YXIgcGF5bWVudFJlcXVlc3QgPSBhcHBsZVBheUluc3RhbmNlLmNyZWF0ZVBheW1lbnRSZXF1ZXN0KHtcbiAqICAgICB0b3RhbDoge1xuICogICAgICAgbGFiZWw6ICdNeSBDb21wYW55JyxcbiAqICAgICAgIGFtb3VudDogJzE5Ljk5J1xuICogICAgIH1cbiAqICAgfSk7XG4gKiAgIHZhciBzZXNzaW9uID0gbmV3IEFwcGxlUGF5U2Vzc2lvbigzLCBwYXltZW50UmVxdWVzdCk7XG4gKlxuICogICBzZXNzaW9uLm9ucGF5bWVudGF1dGhvcml6ZWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAqICAgICBhcHBsZVBheUluc3RhbmNlLnRva2VuaXplKHtcbiAqICAgICAgIHRva2VuOiBldmVudC5wYXltZW50LnRva2VuXG4gKiAgICAgfSwgZnVuY3Rpb24gKHRva2VuaXplRXJyLCB0b2tlbml6ZWRQYXlsb2FkKSB7XG4gKiAgICAgICBpZiAodG9rZW5pemVFcnIpIHtcbiAqICAgICAgICAgc2Vzc2lvbi5jb21wbGV0ZVBheW1lbnQoQXBwbGVQYXlTZXNzaW9uLlNUQVRVU19GQUlMVVJFKTtcbiAqICAgICAgICAgcmV0dXJuO1xuICogICAgICAgfVxuICogICAgICAgLy8gU2VuZCB0aGUgdG9rZW5pemVkUGF5bG9hZCB0byB5b3VyIHNlcnZlciBoZXJlIVxuICpcbiAqICAgICAgIC8vIE9uY2UgdGhlIHRyYW5zYWN0aW9uIGlzIGNvbXBsZXRlLCBjYWxsIGNvbXBsZXRlUGF5bWVudFxuICogICAgICAgLy8gdG8gY2xvc2UgdGhlIEFwcGxlIFBheSBzaGVldFxuICogICAgICAgc2Vzc2lvbi5jb21wbGV0ZVBheW1lbnQoQXBwbGVQYXlTZXNzaW9uLlNUQVRVU19TVUNDRVNTKTtcbiAqICAgICB9KTtcbiAqICAgfTtcbiAqXG4gKiAgIC8vIC4uLlxuICogfSk7XG4gKi9cbkFwcGxlUGF5LnByb3RvdHlwZS50b2tlbml6ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoIW9wdGlvbnMudG9rZW4pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLkFQUExFX1BBWV9QQVlNRU5UX1RPS0VOX1JFUVVJUkVEKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fd2FpdEZvckNsaWVudCgpXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHNlbGYuX2NsaWVudC5yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICAgICAgZW5kcG9pbnQ6IFwicGF5bWVudF9tZXRob2RzL2FwcGxlX3BheW1lbnRfdG9rZW5zXCIsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBfbWV0YToge1xuICAgICAgICAgICAgc291cmNlOiBcImFwcGxlLXBheVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXBwbGVQYXltZW50VG9rZW46IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMudG9rZW4sIHtcbiAgICAgICAgICAgIC8vIFRoZSBnYXRld2F5IHJlcXVpcmVzIHRoaXMga2V5IHRvIGJlIGJhc2U2NC1lbmNvZGVkLlxuICAgICAgICAgICAgcGF5bWVudERhdGE6IGJ0b2EoSlNPTi5zdHJpbmdpZnkob3B0aW9ucy50b2tlbi5wYXltZW50RGF0YSkpLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoc2VsZi5fY2xpZW50LCBcImFwcGxlcGF5LnRva2VuaXplLnN1Y2NlZWRlZFwiKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZS5hcHBsZVBheUNhcmRzWzBdKTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHNlbGYuX2NsaWVudCwgXCJhcHBsZXBheS50b2tlbml6ZS5mYWlsZWRcIik7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICB0eXBlOiBlcnJvcnMuQVBQTEVfUEFZX1RPS0VOSVpBVElPTi50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5BUFBMRV9QQVlfVE9LRU5JWkFUSU9OLmNvZGUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JzLkFQUExFX1BBWV9UT0tFTklaQVRJT04ubWVzc2FnZSxcbiAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIENsZWFubHkgdGVhciBkb3duIGFueXRoaW5nIHNldCB1cCBieSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvYXBwbGUtcGF5LmNyZWF0ZXxjcmVhdGV9LlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsZWQgb25jZSB0ZWFyZG93biBpcyBjb21wbGV0ZS4gTm8gZGF0YSBpcyByZXR1cm5lZCBpZiB0ZWFyZG93biBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5LlxuICogQGV4YW1wbGVcbiAqIGFwcGxlUGF5SW5zdGFuY2UudGVhcmRvd24oKTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggY2FsbGJhY2s8L2NhcHRpb24+XG4gKiBhcHBsZVBheUluc3RhbmNlLnRlYXJkb3duKGZ1bmN0aW9uICgpIHtcbiAqICAgLy8gdGVhcmRvd24gaXMgY29tcGxldGVcbiAqIH0pO1xuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuQXBwbGVQYXkucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gKCkge1xuICBjb252ZXJ0TWV0aG9kc1RvRXJyb3IodGhpcywgbWV0aG9kcyhBcHBsZVBheS5wcm90b3R5cGUpKTtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBQcm9taXNlLndyYXBQcm90b3R5cGUoQXBwbGVQYXkpO1xuXG59LHtcIi4uL2xpYi9hbmFseXRpY3NcIjoxMTksXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vbGliL2NvbnZlcnQtbWV0aG9kcy10by1lcnJvclwiOjEyNyxcIi4uL2xpYi9tZXRob2RzXCI6MTU1LFwiLi9lcnJvcnNcIjo3NixcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCI6NDN9XSw3NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5BcHBsZSBQYXkgLSBDcmVhdGlvbiBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gW2NyZWF0aW5nIHRoZSBBcHBsZSBQYXkgY29tcG9uZW50XSguL21vZHVsZS1icmFpbnRyZWUtd2ViX2FwcGxlLXBheS5odG1sIy5jcmVhdGUpLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gQVBQTEVfUEFZX05PVF9FTkFCTEVEIE9jY3VycyB3aGVuIHRoZSBhdXRob3JpemF0aW9uIHVzZWQgaXMgbm90IGF1dGhvcml6ZWQgdG8gcHJvY2VzcyBBcHBsZSBQYXkuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5BcHBsZSBQYXkgLSBwZXJmb3JtVmFsaWRhdGlvbiBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gW3ZhbGlkYXRpbmddKC4vQXBwbGVQYXkuaHRtbCNwZXJmb3JtVmFsaWRhdGlvbikuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBBUFBMRV9QQVlfVkFMSURBVElPTl9VUkxfUkVRVUlSRUQgT2NjdXJzIHdoZW4gdGhlIGB2YWxpZGF0aW9uVVJMYCBvcHRpb24gaXMgbm90IHBhc3NlZCBpbi5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IEFQUExFX1BBWV9NRVJDSEFOVF9WQUxJREFUSU9OX0ZBSUxFRCBPY2N1cnMgd2hlbiB0aGUgd2Vic2l0ZSBkb21haW4gaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQgaW4gdGhlIEJyYWludHJlZSBjb250cm9sIHBhbmVsLlxuICogQHByb3BlcnR5IHtORVRXT1JLfSBBUFBMRV9QQVlfTUVSQ0hBTlRfVkFMSURBVElPTl9ORVRXT1JLIE9jY3VycyB3aGVuIGFuIHVua25vd24gbmV0d29yayBlcnJvciBvY2N1cnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5BcHBsZSBQYXkgLSB0b2tlbml6ZSBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gW3Rva2VuaXppbmddKC4vQXBwbGVQYXkuaHRtbCN0b2tlbml6ZSkuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBBUFBMRV9QQVlfUEFZTUVOVF9UT0tFTl9SRVFVSVJFRCBPY2N1cnMgd2hlbiB0aGUgYHRva2VuYCBvcHRpb24gaXMgbm90IHBhc3NlZCBpbi5cbiAqIEBwcm9wZXJ0eSB7TkVUV09SS30gQVBQTEVfUEFZX1RPS0VOSVpBVElPTiBPY2N1cnMgd2hlbiBhbiB1bmtub3duIG5ldHdvcmsgZXJyb3Igb2NjdXJzLlxuICovXG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQVBQTEVfUEFZX05PVF9FTkFCTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJBUFBMRV9QQVlfTk9UX0VOQUJMRURcIixcbiAgICBtZXNzYWdlOiBcIkFwcGxlIFBheSBpcyBub3QgZW5hYmxlZCBmb3IgdGhpcyBtZXJjaGFudC5cIixcbiAgfSxcbiAgQVBQTEVfUEFZX1ZBTElEQVRJT05fVVJMX1JFUVVJUkVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJBUFBMRV9QQVlfVkFMSURBVElPTl9VUkxfUkVRVUlSRURcIixcbiAgICBtZXNzYWdlOiBcInBlcmZvcm1WYWxpZGF0aW9uIG11c3QgYmUgY2FsbGVkIHdpdGggYSB2YWxpZGF0aW9uVVJMLlwiLFxuICB9LFxuICBBUFBMRV9QQVlfTUVSQ0hBTlRfVkFMSURBVElPTl9ORVRXT1JLOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTkVUV09SSyxcbiAgICBjb2RlOiBcIkFQUExFX1BBWV9NRVJDSEFOVF9WQUxJREFUSU9OX05FVFdPUktcIixcbiAgICBtZXNzYWdlOiBcIkEgbmV0d29yayBlcnJvciBvY2N1cnJlZCB3aGVuIHZhbGlkYXRpbmcgdGhlIEFwcGxlIFBheSBtZXJjaGFudC5cIixcbiAgfSxcbiAgQVBQTEVfUEFZX01FUkNIQU5UX1ZBTElEQVRJT05fRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJBUFBMRV9QQVlfTUVSQ0hBTlRfVkFMSURBVElPTl9GQUlMRURcIixcbiAgICBtZXNzYWdlOlxuICAgICAgXCJNYWtlIHN1cmUgeW91IGhhdmUgcmVnaXN0ZXJlZCB5b3VyIGRvbWFpbiBuYW1lIGluIHRoZSBCcmFpbnRyZWUgQ29udHJvbCBQYW5lbC5cIixcbiAgfSxcbiAgQVBQTEVfUEFZX1BBWU1FTlRfVE9LRU5fUkVRVUlSRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIkFQUExFX1BBWV9QQVlNRU5UX1RPS0VOX1JFUVVJUkVEXCIsXG4gICAgbWVzc2FnZTogXCJ0b2tlbml6ZSBtdXN0IGJlIGNhbGxlZCB3aXRoIGEgcGF5bWVudCB0b2tlbi5cIixcbiAgfSxcbiAgQVBQTEVfUEFZX1RPS0VOSVpBVElPTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk5FVFdPUkssXG4gICAgY29kZTogXCJBUFBMRV9QQVlfVE9LRU5JWkFUSU9OXCIsXG4gICAgbWVzc2FnZTogXCJBIG5ldHdvcmsgZXJyb3Igb2NjdXJyZWQgd2hlbiBwcm9jZXNzaW5nIHRoZSBBcHBsZSBQYXkgcGF5bWVudC5cIixcbiAgfSxcbn07XG5cbn0se1wiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNH1dLDc3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBtb2R1bGUgYnJhaW50cmVlLXdlYi9hcHBsZS1wYXlcbiAqIEBkZXNjcmlwdGlvbiBBY2NlcHQgQXBwbGUgUGF5IG9uIHRoZSBXZWIuICpUaGlzIGNvbXBvbmVudCBpcyBjdXJyZW50bHkgaW4gYmV0YSBhbmQgaXMgc3ViamVjdCB0byBjaGFuZ2UuKlxuICovXG5cbnZhciBBcHBsZVBheSA9IF9kZXJlcV8oXCIuL2FwcGxlLXBheVwiKTtcbnZhciBhbmFseXRpY3MgPSBfZGVyZXFfKFwiLi4vbGliL2FuYWx5dGljc1wiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uID0gX2RlcmVxXyhcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCIpO1xudmFyIGNyZWF0ZUFzc2V0c1VybCA9IF9kZXJlcV8oXCIuLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIik7XG52YXIgY3JlYXRlRGVmZXJyZWRDbGllbnQgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDcmVhdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudXNlRGVmZXJyZWRDbGllbnRdIFVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgYXV0aG9yaXphdGlvbmAsIGFsbG93cyB0aGUgQXBwbGUgUGF5IGluc3RhbmNlIHRvIGJlIGF2YWlsYWJsZSByaWdodCBhd2F5IGJ5IGZldGNoaW5nIHRoZSBjbGllbnQgY29uZmlndXJhdGlvbiBpbiB0aGUgYmFja2dyb3VuZC4gV2hlbiB0aGlzIG9wdGlvbiBpcyB1c2VkLCB7QGxpbmsgQXBwbGVQYXkjY3JlYXRlUGF5bWVudFJlcXVlc3R9IHdpbGwgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGNvbmZpZ3VyYXRpb24gaW5zdGVhZCBvZiByZXR1cm5pbmcgc3luY2hyb25vdXNseS5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgYGRhdGFgLCBpcyB0aGUge0BsaW5rIEFwcGxlUGF5fSBpbnN0YW5jZS4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGBjcmVhdGVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUge0BsaW5rIEFwcGxlUGF5fSBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHZhciBuYW1lID0gXCJBcHBsZSBQYXlcIjtcblxuICByZXR1cm4gYmFzaWNDb21wb25lbnRWZXJpZmljYXRpb25cbiAgICAudmVyaWZ5KHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgYXV0aG9yaXphdGlvbjogb3B0aW9ucy5hdXRob3JpemF0aW9uLFxuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFwcGxlUGF5SW5zdGFuY2U7XG4gICAgICB2YXIgY3JlYXRlUHJvbWlzZSA9IGNyZWF0ZURlZmVycmVkQ2xpZW50XG4gICAgICAgIC5jcmVhdGUoe1xuICAgICAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgICAgIGRlYnVnOiBvcHRpb25zLmRlYnVnLFxuICAgICAgICAgIGFzc2V0c1VybDogY3JlYXRlQXNzZXRzVXJsLmNyZWF0ZShvcHRpb25zLmF1dGhvcml6YXRpb24pLFxuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICBpZiAoIWNsaWVudC5nZXRDb25maWd1cmF0aW9uKCkuZ2F0ZXdheUNvbmZpZ3VyYXRpb24uYXBwbGVQYXlXZWIpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5BUFBMRV9QQVlfTk9UX0VOQUJMRUQpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcImFwcGxlcGF5LmluaXRpYWxpemVkXCIpO1xuXG4gICAgICAgICAgcmV0dXJuIGNsaWVudDtcbiAgICAgICAgfSk7XG5cbiAgICAgIG9wdGlvbnMuY3JlYXRlUHJvbWlzZSA9IGNyZWF0ZVByb21pc2U7XG4gICAgICBhcHBsZVBheUluc3RhbmNlID0gbmV3IEFwcGxlUGF5KG9wdGlvbnMpO1xuXG4gICAgICBpZiAoIW9wdGlvbnMudXNlRGVmZXJyZWRDbGllbnQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVByb21pc2UudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgICAgYXBwbGVQYXlJbnN0YW5jZS5fY2xpZW50ID0gY2xpZW50O1xuXG4gICAgICAgICAgcmV0dXJuIGFwcGxlUGF5SW5zdGFuY2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXBwbGVQYXlJbnN0YW5jZTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogd3JhcFByb21pc2UoY3JlYXRlKSxcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBTREssIGkuZS4gYHtAcGtnIHZlcnNpb259YC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIFZFUlNJT046IFZFUlNJT04sXG59O1xuXG59LHtcIi4uL2xpYi9hbmFseXRpY3NcIjoxMTksXCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiOjEyMixcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIjoxMjksXCIuLi9saWIvY3JlYXRlLWRlZmVycmVkLWNsaWVudFwiOjEzMSxcIi4vYXBwbGUtcGF5XCI6NzUsXCIuL2Vycm9yc1wiOjc2LFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0M31dLDc4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgQlJBSU5UUkVFX1ZFUlNJT04gPSBfZGVyZXFfKFwiLi9jb25zdGFudHNcIikuQlJBSU5UUkVFX1ZFUlNJT047XG5cbnZhciBHcmFwaFFMID0gX2RlcmVxXyhcIi4vcmVxdWVzdC9ncmFwaHFsXCIpO1xudmFyIHJlcXVlc3QgPSBfZGVyZXFfKFwiLi9yZXF1ZXN0XCIpO1xudmFyIGlzVmVyaWZpZWREb21haW4gPSBfZGVyZXFfKFwiLi4vbGliL2lzLXZlcmlmaWVkLWRvbWFpblwiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGNvbnZlcnRUb0JyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9jb252ZXJ0LXRvLWJyYWludHJlZS1lcnJvclwiKTtcbnZhciBnZXRHYXRld2F5Q29uZmlndXJhdGlvbiA9IF9kZXJlcV8oXCIuL2dldC1jb25maWd1cmF0aW9uXCIpLmdldENvbmZpZ3VyYXRpb247XG52YXIgY3JlYXRlQXV0aG9yaXphdGlvbkRhdGEgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1hdXRob3JpemF0aW9uLWRhdGFcIik7XG52YXIgYWRkTWV0YWRhdGEgPSBfZGVyZXFfKFwiLi4vbGliL2FkZC1tZXRhZGF0YVwiKTtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcbnZhciBvbmNlID0gX2RlcmVxXyhcIi4uL2xpYi9vbmNlXCIpO1xudmFyIGRlZmVycmVkID0gX2RlcmVxXyhcIi4uL2xpYi9kZWZlcnJlZFwiKTtcbnZhciBhc3NpZ24gPSBfZGVyZXFfKFwiLi4vbGliL2Fzc2lnblwiKS5hc3NpZ247XG52YXIgYW5hbHl0aWNzID0gX2RlcmVxXyhcIi4uL2xpYi9hbmFseXRpY3NcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpO1xudmFyIFZFUlNJT04gPSBfZGVyZXFfKFwiLi4vbGliL2NvbnN0YW50c1wiKS5WRVJTSU9OO1xudmFyIEdSQVBIUUxfVVJMUyA9IF9kZXJlcV8oXCIuLi9saWIvY29uc3RhbnRzXCIpLkdSQVBIUUxfVVJMUztcbnZhciBtZXRob2RzID0gX2RlcmVxXyhcIi4uL2xpYi9tZXRob2RzXCIpO1xudmFyIGNvbnZlcnRNZXRob2RzVG9FcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvY29udmVydC1tZXRob2RzLXRvLWVycm9yXCIpO1xudmFyIGFzc2V0cyA9IF9kZXJlcV8oXCIuLi9saWIvYXNzZXRzXCIpO1xudmFyIEZSQVVETkVUX0ZOQ0xTID0gX2RlcmVxXyhcIi4uL2xpYi9jb25zdGFudHNcIikuRlJBVURORVRfRk5DTFM7XG52YXIgRlJBVURORVRfU09VUkNFID0gX2RlcmVxXyhcIi4uL2xpYi9jb25zdGFudHNcIikuRlJBVURORVRfU09VUkNFO1xudmFyIEZSQVVETkVUX1VSTCA9IF9kZXJlcV8oXCIuLi9saWIvY29uc3RhbnRzXCIpLkZSQVVETkVUX1VSTDtcblxudmFyIGNhY2hlZENsaWVudHMgPSB7fTtcblxuLyoqXG4gKiBUaGlzIG9iamVjdCBpcyByZXR1cm5lZCBieSB7QGxpbmsgQ2xpZW50I2dldENvbmZpZ3VyYXRpb258Z2V0Q29uZmlndXJhdGlvbn0uIFRoaXMgaW5mb3JtYXRpb24gaXMgdXNlZCBleHRlbnNpdmVseSBieSBvdGhlciBCcmFpbnRyZWUgbW9kdWxlcyB0byBwcm9wZXJseSBjb25maWd1cmUgdGhlbXNlbHZlcy5cbiAqIEB0eXBlZGVmIHtvYmplY3R9IENsaWVudH5jb25maWd1cmF0aW9uXG4gKiBAcHJvcGVydHkge29iamVjdH0gY2xpZW50IFRoZSBicmFpbnRyZWUtd2ViL2NsaWVudCBwYXJhbWV0ZXJzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNsaWVudC5hdXRob3JpemF0aW9uIEEgdG9rZW5pemF0aW9uS2V5IG9yIGNsaWVudFRva2VuLlxuICogQHByb3BlcnR5IHtvYmplY3R9IGdhdGV3YXlDb25maWd1cmF0aW9uIEdhdGV3YXktc3VwcGxpZWQgY29uZmlndXJhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBhbmFseXRpY3NNZXRhZGF0YSBBbmFseXRpY3Mtc3BlY2lmaWMgZGF0YS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhbmFseXRpY3NNZXRhZGF0YS5zZXNzaW9uSWQgVW5pcXVlbHkgaWRlbnRpZmllcyBhIGJyb3dzaW5nIHNlc3Npb24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYW5hbHl0aWNzTWV0YWRhdGEuc2RrVmVyc2lvbiBUaGUgYnJhaW50cmVlLmpzIHZlcnNpb24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYW5hbHl0aWNzTWV0YWRhdGEubWVyY2hhbnRBcHBJZCBJZGVudGlmaWVzIHRoZSBtZXJjaGFudCdzIHdlYiBhcHAuXG4gKi9cblxuLyoqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7Q2xpZW50fmNvbmZpZ3VyYXRpb259IGNvbmZpZ3VyYXRpb24gT3B0aW9uc1xuICogQGRlc2NyaXB0aW9uIDxzdHJvbmc+RG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yIGRpcmVjdGx5LiBVc2Uge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2NsaWVudC5jcmVhdGV8YnJhaW50cmVlLmNsaWVudC5jcmVhdGV9IGluc3RlYWQuPC9zdHJvbmc+XG4gKiBAY2xhc3NkZXNjIFRoaXMgY2xhc3MgaXMgcmVxdWlyZWQgYnkgbWFueSBvdGhlciBCcmFpbnRyZWUgY29tcG9uZW50cy4gSXQgc2VydmVzIGFzIHRoZSBiYXNlIEFQSSBsYXllciB0aGF0IGNvbW11bmljYXRlcyB3aXRoIG91ciBzZXJ2ZXJzLiBJdCBpcyBhbHNvIGNhcGFibGUgb2YgYmVpbmcgdXNlZCB0byBmb3JtdWxhdGUgZGlyZWN0IGNhbGxzIHRvIG91ciBzZXJ2ZXJzLCBzdWNoIGFzIGRpcmVjdCBjcmVkaXQgY2FyZCB0b2tlbml6YXRpb24uIFNlZSB7QGxpbmsgQ2xpZW50I3JlcXVlc3R9LlxuICovXG5mdW5jdGlvbiBDbGllbnQoY29uZmlndXJhdGlvbikge1xuICB2YXIgY29uZmlndXJhdGlvbkpTT04sIGdhdGV3YXlDb25maWd1cmF0aW9uO1xuXG4gIGNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uIHx8IHt9O1xuXG4gIGNvbmZpZ3VyYXRpb25KU09OID0gSlNPTi5zdHJpbmdpZnkoY29uZmlndXJhdGlvbik7XG4gIGdhdGV3YXlDb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbi5nYXRld2F5Q29uZmlndXJhdGlvbjtcblxuICBpZiAoIWdhdGV3YXlDb25maWd1cmF0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5DTElFTlRfTUlTU0lOR19HQVRFV0FZX0NPTkZJR1VSQVRJT04pO1xuICB9XG5cbiAgW1wiYXNzZXRzVXJsXCIsIFwiY2xpZW50QXBpVXJsXCIsIFwiY29uZmlnVXJsXCJdLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgaWYgKFxuICAgICAgcHJvcGVydHkgaW4gZ2F0ZXdheUNvbmZpZ3VyYXRpb24gJiZcbiAgICAgICFpc1ZlcmlmaWVkRG9tYWluKGdhdGV3YXlDb25maWd1cmF0aW9uW3Byb3BlcnR5XSlcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5DTElFTlRfR0FURVdBWV9DT05GSUdVUkFUSU9OX0lOVkFMSURfRE9NQUlOLnR5cGUsXG4gICAgICAgIGNvZGU6IGVycm9ycy5DTElFTlRfR0FURVdBWV9DT05GSUdVUkFUSU9OX0lOVkFMSURfRE9NQUlOLmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IHByb3BlcnR5ICsgXCIgcHJvcGVydHkgaXMgb24gYW4gaW52YWxpZCBkb21haW4uXCIsXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgY29uZmlndXJhdGlvbiB2YWx1ZXMuXG4gICAqIEBwdWJsaWNcbiAgICogQHJldHVybnMge0NsaWVudH5jb25maWd1cmF0aW9ufSBjb25maWd1cmF0aW9uXG4gICAqL1xuICB0aGlzLmdldENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoY29uZmlndXJhdGlvbkpTT04pO1xuICB9O1xuXG4gIHRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0O1xuICB0aGlzLl9jb25maWd1cmF0aW9uID0gdGhpcy5nZXRDb25maWd1cmF0aW9uKCk7XG5cbiAgdGhpcy5fY2xpZW50QXBpQmFzZVVybCA9IGdhdGV3YXlDb25maWd1cmF0aW9uLmNsaWVudEFwaVVybCArIFwiL3YxL1wiO1xuXG4gIGlmIChnYXRld2F5Q29uZmlndXJhdGlvbi5ncmFwaFFMKSB7XG4gICAgaWYgKCFpc1ZlcmlmaWVkRG9tYWluKGdhdGV3YXlDb25maWd1cmF0aW9uLmdyYXBoUUwudXJsKSkge1xuICAgICAgdGhyb3cgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgdHlwZTogZXJyb3JzLkNMSUVOVF9HQVRFV0FZX0NPTkZJR1VSQVRJT05fSU5WQUxJRF9ET01BSU4udHlwZSxcbiAgICAgICAgY29kZTogZXJyb3JzLkNMSUVOVF9HQVRFV0FZX0NPTkZJR1VSQVRJT05fSU5WQUxJRF9ET01BSU4uY29kZSxcbiAgICAgICAgbWVzc2FnZTogXCJncmFwaFFMLnVybCBwcm9wZXJ0eSBpcyBvbiBhbiBpbnZhbGlkIGRvbWFpbi5cIixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuX2dyYXBoUUwgPSBuZXcgR3JhcGhRTCh7XG4gICAgICBncmFwaFFMOiBnYXRld2F5Q29uZmlndXJhdGlvbi5ncmFwaFFMLFxuICAgIH0pO1xuICB9XG59XG5cbkNsaWVudC5pbml0aWFsaXplID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIGNsaWVudEluc3RhbmNlLCBhdXRoRGF0YTtcbiAgdmFyIHByb21pc2UgPSBjYWNoZWRDbGllbnRzW29wdGlvbnMuYXV0aG9yaXphdGlvbl07XG5cbiAgaWYgKHByb21pc2UpIHtcbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHByb21pc2UsIFwiY3VzdG9tLmNsaWVudC5sb2FkLmNhY2hlZFwiKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBhdXRoRGF0YSA9IGNyZWF0ZUF1dGhvcml6YXRpb25EYXRhKG9wdGlvbnMuYXV0aG9yaXphdGlvbik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuQ0xJRU5UX0lOVkFMSURfQVVUSE9SSVpBVElPTilcbiAgICApO1xuICB9XG5cbiAgcHJvbWlzZSA9IGdldEdhdGV3YXlDb25maWd1cmF0aW9uKGF1dGhEYXRhKS50aGVuKGZ1bmN0aW9uIChjb25maWd1cmF0aW9uKSB7XG4gICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcbiAgICAgIGNvbmZpZ3VyYXRpb24uaXNEZWJ1ZyA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uZmlndXJhdGlvbi5hdXRob3JpemF0aW9uID0gb3B0aW9ucy5hdXRob3JpemF0aW9uO1xuXG4gICAgY2xpZW50SW5zdGFuY2UgPSBuZXcgQ2xpZW50KGNvbmZpZ3VyYXRpb24pO1xuXG4gICAgcmV0dXJuIGNsaWVudEluc3RhbmNlO1xuICB9KTtcblxuICBjYWNoZWRDbGllbnRzW29wdGlvbnMuYXV0aG9yaXphdGlvbl0gPSBwcm9taXNlO1xuXG4gIGFuYWx5dGljcy5zZW5kRXZlbnQocHJvbWlzZSwgXCJjdXN0b20uY2xpZW50LmxvYWQuaW5pdGlhbGl6ZWRcIik7XG5cbiAgcmV0dXJuIHByb21pc2VcbiAgICAudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KGNsaWVudEluc3RhbmNlLCBcImN1c3RvbS5jbGllbnQubG9hZC5zdWNjZWVkZWRcIik7XG5cbiAgICAgIHJldHVybiBjbGllbnQ7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgZGVsZXRlIGNhY2hlZENsaWVudHNbb3B0aW9ucy5hdXRob3JpemF0aW9uXTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgfSk7XG59O1xuXG4vLyBQcmltYXJpbHkgdXNlZCBmb3IgdGVzdGluZyB0aGUgY2xpZW50IGluaXRhbGl6YXRpb24gY2FsbFxuQ2xpZW50LmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiAoKSB7XG4gIGNhY2hlZENsaWVudHMgPSB7fTtcbn07XG5cbkNsaWVudC5wcm90b3R5cGUuX2ZpbmRPckNyZWF0ZUZyYXVkbmV0SlNPTiA9IGZ1bmN0aW9uIChjbGllbnRNZXRhZGF0YUlkKSB7XG4gIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtmbmNscz1cIicgKyBGUkFVRE5FVF9GTkNMUyArICdcIl0nKTtcbiAgdmFyIGNvbmZpZywgYWRkaXRpb25hbERhdGEsIGF1dGhvcml6YXRpb25GaW5nZXJwcmludCwgcGFyYW1ldGVycztcblxuICBpZiAoIWVsKSB7XG4gICAgZWwgPSBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpO1xuICAgIGVsLnR5cGUgPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoXCJmbmNsc1wiLCBGUkFVRE5FVF9GTkNMUyk7XG4gIH1cblxuICBjb25maWcgPSB0aGlzLmdldENvbmZpZ3VyYXRpb24oKTtcbiAgYWRkaXRpb25hbERhdGEgPSB7XG4gICAgcmRhX3RlbmFudDogXCJidF9jYXJkXCIsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gICAgbWlkOiBjb25maWcuZ2F0ZXdheUNvbmZpZ3VyYXRpb24ubWVyY2hhbnRJZCxcbiAgfTtcbiAgYXV0aG9yaXphdGlvbkZpbmdlcnByaW50ID0gY29uZmlnLmF1dGhvcml6YXRpb25GaW5nZXJwcmludDtcblxuICBpZiAoYXV0aG9yaXphdGlvbkZpbmdlcnByaW50KSB7XG4gICAgYXV0aG9yaXphdGlvbkZpbmdlcnByaW50LnNwbGl0KFwiJlwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwaWVjZXMpIHtcbiAgICAgIHZhciBjb21wb25lbnQgPSBwaWVjZXMuc3BsaXQoXCI9XCIpO1xuXG4gICAgICBpZiAoY29tcG9uZW50WzBdID09PSBcImN1c3RvbWVyX2lkXCIgJiYgY29tcG9uZW50Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYWRkaXRpb25hbERhdGEuY2lkID0gY29tcG9uZW50WzFdO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcGFyYW1ldGVycyA9IHtcbiAgICBmOiBjbGllbnRNZXRhZGF0YUlkLnN1YnN0cigwLCAzMiksXG4gICAgZnA6IGFkZGl0aW9uYWxEYXRhLFxuICAgIGJ1OiBmYWxzZSxcbiAgICBzOiBGUkFVRE5FVF9TT1VSQ0UsXG4gIH07XG4gIGVsLnRleHQgPSBKU09OLnN0cmluZ2lmeShwYXJhbWV0ZXJzKTtcbn07XG5cbi8qKlxuICogVXNlZCBieSBvdGhlciBtb2R1bGVzIHRvIGZvcm11bGF0ZSBhbGwgbmV0d29yayByZXF1ZXN0cyB0byB0aGUgQnJhaW50cmVlIGdhdGV3YXkuIEl0IGlzIGFsc28gY2FwYWJsZSBvZiBiZWluZyB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBvd24gZm9ybSB0byB0b2tlbml6ZSBjcmVkaXQgY2FyZCBpbmZvcm1hdGlvbi4gSG93ZXZlciwgYmUgc3VyZSB0byBzYXRpc2Z5IFBDSSBjb21wbGlhbmNlIGlmIHlvdSB1c2UgZGlyZWN0IGNhcmQgdG9rZW5pemF0aW9uLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgUmVxdWVzdCBvcHRpb25zOlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubWV0aG9kIEhUVFAgbWV0aG9kLCBlLmcuIFwiZ2V0XCIgb3IgXCJwb3N0XCIuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5lbmRwb2ludCBFbmRwb2ludCBwYXRoLCBlLmcuIFwicGF5bWVudF9tZXRob2RzXCIuXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5kYXRhIERhdGEgdG8gc2VuZCB3aXRoIHRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnRpbWVvdXQ9NjAwMDBdIFNldCBhIHRpbWVvdXQgKGluIG1pbGxpc2Vjb25kcykgZm9yIHRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgc2Vjb25kIGFyZ3VtZW50LCA8Y29kZT5kYXRhPC9jb2RlPiwgaXMgdGhlIHJldHVybmVkIHNlcnZlciBkYXRhLlxuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPkRpcmVjdCBDcmVkaXQgQ2FyZCBUb2tlbml6YXRpb248L2NhcHRpb24+XG4gKiB2YXIgY3JlYXRlQ2xpZW50ID0gcmVxdWlyZSgnYnJhaW50cmVlLXdlYi9jbGllbnQnKS5jcmVhdGU7XG4gKlxuICogY3JlYXRlQ2xpZW50KHtcbiAqICAgYXV0aG9yaXphdGlvbjogQ0xJRU5UX0FVVEhPUklaQVRJT05cbiAqIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIGNsaWVudEluc3RhbmNlKSB7XG4gKiAgIHZhciBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215LWZvcm0taWQnKTtcbiAqICAgdmFyIGRhdGEgPSB7XG4gKiAgICAgY3JlZGl0Q2FyZDoge1xuICogICAgICAgbnVtYmVyOiBmb3JtWydjYy1udW1iZXInXS52YWx1ZSxcbiAqICAgICAgIGN2djogZm9ybVsnY2MtY3Z2J10udmFsdWUsXG4gKiAgICAgICBleHBpcmF0aW9uRGF0ZTogZm9ybVsnY2MtZXhwaXJhdGlvbi1kYXRlJ10udmFsdWUsXG4gKiAgICAgICBiaWxsaW5nQWRkcmVzczoge1xuICogICAgICAgICBwb3N0YWxDb2RlOiBmb3JtWydjYy1wb3N0YWwtY29kZSddLnZhbHVlXG4gKiAgICAgICB9LFxuICogICAgICAgb3B0aW9uczoge1xuICogICAgICAgICB2YWxpZGF0ZTogZmFsc2VcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH07XG4gKlxuICogICAvLyBXYXJuaW5nOiBGb3IgYSBtZXJjaGFudCB0byBiZSBlbGlnaWJsZSBmb3IgdGhlIGVhc2llc3QgbGV2ZWwgb2YgUENJIGNvbXBsaWFuY2UgKFNBUSBBKSxcbiAqICAgLy8gcGF5bWVudCBmaWVsZHMgY2Fubm90IGJlIGhvc3RlZCBvbiB5b3VyIGNoZWNrb3V0IHBhZ2UuXG4gKiAgIC8vIEZvciBhbiBhbHRlcm5hdGl2ZSB0byB0aGUgZm9sbG93aW5nLCB1c2UgSG9zdGVkIEZpZWxkcy5cbiAqICAgY2xpZW50SW5zdGFuY2UucmVxdWVzdCh7XG4gKiAgICAgZW5kcG9pbnQ6ICdwYXltZW50X21ldGhvZHMvY3JlZGl0X2NhcmRzJyxcbiAqICAgICBtZXRob2Q6ICdwb3N0JyxcbiAqICAgICBkYXRhOiBkYXRhXG4gKiAgIH0sIGZ1bmN0aW9uIChyZXF1ZXN0RXJyLCByZXNwb25zZSkge1xuICogICAgIC8vIE1vcmUgZGV0YWlsZWQgZXhhbXBsZSBvZiBoYW5kbGluZyBBUEkgZXJyb3JzOiBodHRwczovL2NvZGVwZW4uaW8vYnJhaW50cmVlL3Blbi9NYndqZE1cbiAqICAgICBpZiAocmVxdWVzdEVycikgeyB0aHJvdyBuZXcgRXJyb3IocmVxdWVzdEVycik7IH1cbiAqXG4gKiAgICAgY29uc29sZS5sb2coJ0dvdCBub25jZTonLCByZXNwb25zZS5jcmVkaXRDYXJkc1swXS5ub25jZSk7XG4gKiAgIH0pO1xuICogfSk7XG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+VG9rZW5pemluZyBGaWVsZHMgZm9yIEFWUyBDaGVja3M8L2NhcHRpb24+XG4gKiB2YXIgY3JlYXRlQ2xpZW50ID0gcmVxdWlyZSgnYnJhaW50cmVlLXdlYi9jbGllbnQnKS5jcmVhdGU7XG4gKlxuICogY3JlYXRlQ2xpZW50KHtcbiAqICAgYXV0aG9yaXphdGlvbjogQ0xJRU5UX0FVVEhPUklaQVRJT05cbiAqIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIGNsaWVudEluc3RhbmNlKSB7XG4gKiAgIHZhciBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215LWZvcm0taWQnKTtcbiAqICAgdmFyIGRhdGEgPSB7XG4gKiAgICAgY3JlZGl0Q2FyZDoge1xuICogICAgICAgbnVtYmVyOiBmb3JtWydjYy1udW1iZXInXS52YWx1ZSxcbiAqICAgICAgIGN2djogZm9ybVsnY2MtY3Z2J10udmFsdWUsXG4gKiAgICAgICBleHBpcmF0aW9uRGF0ZTogZm9ybVsnY2MtZGF0ZSddLnZhbHVlLFxuICogICAgICAgLy8gVGhlIGJpbGxpbmcgYWRkcmVzcyBjYW4gYmUgY2hlY2tlZCB3aXRoIEFWUyBydWxlcy5cbiAqICAgICAgIC8vIFNlZTogaHR0cHM6Ly9hcnRpY2xlcy5icmFpbnRyZWVwYXltZW50cy5jb20vc3VwcG9ydC9ndWlkZXMvZnJhdWQtdG9vbHMvYmFzaWMvYXZzLWN2di1ydWxlc1xuICogICAgICAgYmlsbGluZ0FkZHJlc3M6IHtcbiAqICAgICAgICAgcG9zdGFsQ29kZTogZm9ybVsnY2MtcG9zdGFsLWNvZGUnXS52YWx1ZSxcbiAqICAgICAgICAgc3RyZWV0QWRkcmVzczogZm9ybVsnY2Mtc3RyZWV0LWFkZHJlc3MnXS52YWx1ZSxcbiAqICAgICAgICAgY291bnRyeU5hbWU6IGZvcm1bJ2NjLWNvdW50cnktbmFtZSddLnZhbHVlLFxuICogICAgICAgICBjb3VudHJ5Q29kZUFscGhhMjogZm9ybVsnY2MtY291bnRyeS1hbHBoYTInXS52YWx1ZSxcbiAqICAgICAgICAgY291bnRyeUNvZGVBbHBoYTM6IGZvcm1bJ2NjLWNvdW50cnktYWxwaGEzJ10udmFsdWUsXG4gKiAgICAgICAgIGNvdW50cnlDb2RlTnVtZXJpYzogZm9ybVsnY2MtY291bnRyeS1udW1lcmljJ10udmFsdWVcbiAqICAgICAgIH0sXG4gKiAgICAgICBvcHRpb25zOiB7XG4gKiAgICAgICAgIHZhbGlkYXRlOiBmYWxzZVxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgfTtcbiAqXG4gKiAgIC8vIFdhcm5pbmc6IEZvciBhIG1lcmNoYW50IHRvIGJlIGVsaWdpYmxlIGZvciB0aGUgZWFzaWVzdCBsZXZlbCBvZiBQQ0kgY29tcGxpYW5jZSAoU0FRIEEpLFxuICogICAvLyBwYXltZW50IGZpZWxkcyBjYW5ub3QgYmUgaG9zdGVkIG9uIHlvdXIgY2hlY2tvdXQgcGFnZS5cbiAqICAgLy8gRm9yIGFuIGFsdGVybmF0aXZlIHRvIHRoZSBmb2xsb3dpbmcsIHVzZSBIb3N0ZWQgRmllbGRzLlxuICogICBjbGllbnRJbnN0YW5jZS5yZXF1ZXN0KHtcbiAqICAgICBlbmRwb2ludDogJ3BheW1lbnRfbWV0aG9kcy9jcmVkaXRfY2FyZHMnLFxuICogICAgIG1ldGhvZDogJ3Bvc3QnLFxuICogICAgIGRhdGE6IGRhdGFcbiAqICAgfSwgZnVuY3Rpb24gKHJlcXVlc3RFcnIsIHJlc3BvbnNlKSB7XG4gKiAgICAgLy8gTW9yZSBkZXRhaWxlZCBleGFtcGxlIG9mIGhhbmRsaW5nIEFQSSBlcnJvcnM6IGh0dHBzOi8vY29kZXBlbi5pby9icmFpbnRyZWUvcGVuL01id2pkTVxuICogICAgIGlmIChyZXF1ZXN0RXJyKSB7IHRocm93IG5ldyBFcnJvcihyZXF1ZXN0RXJyKTsgfVxuICpcbiAqICAgICBjb25zb2xlLmxvZygnR290IG5vbmNlOicsIHJlc3BvbnNlLmNyZWRpdENhcmRzWzBdLm5vbmNlKTtcbiAqICAgfSk7XG4gKiB9KTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cbkNsaWVudC5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW52YWxpZC10aGlzXG4gIHZhciByZXF1ZXN0UHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgb3B0aW9uTmFtZSwgYXBpLCBiYXNlVXJsLCByZXF1ZXN0T3B0aW9ucztcbiAgICB2YXIgc2hvdWxkQ29sbGVjdERhdGEgPSBCb29sZWFuKFxuICAgICAgb3B0aW9ucy5lbmRwb2ludCA9PT0gXCJwYXltZW50X21ldGhvZHMvY3JlZGl0X2NhcmRzXCIgJiZcbiAgICAgICAgc2VsZi5nZXRDb25maWd1cmF0aW9uKCkuZ2F0ZXdheUNvbmZpZ3VyYXRpb24uY3JlZGl0Q2FyZHNcbiAgICAgICAgICAuY29sbGVjdERldmljZURhdGFcbiAgICApO1xuXG4gICAgaWYgKG9wdGlvbnMuYXBpICE9PSBcImdyYXBoUUxBcGlcIikge1xuICAgICAgaWYgKCFvcHRpb25zLm1ldGhvZCkge1xuICAgICAgICBvcHRpb25OYW1lID0gXCJvcHRpb25zLm1ldGhvZFwiO1xuICAgICAgfSBlbHNlIGlmICghb3B0aW9ucy5lbmRwb2ludCkge1xuICAgICAgICBvcHRpb25OYW1lID0gXCJvcHRpb25zLmVuZHBvaW50XCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbk5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5DTElFTlRfT1BUSU9OX1JFUVVJUkVELnR5cGUsXG4gICAgICAgIGNvZGU6IGVycm9ycy5DTElFTlRfT1BUSU9OX1JFUVVJUkVELmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IG9wdGlvbk5hbWUgKyBcIiBpcyByZXF1aXJlZCB3aGVuIG1ha2luZyBhIHJlcXVlc3QuXCIsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoXCJhcGlcIiBpbiBvcHRpb25zKSB7XG4gICAgICBhcGkgPSBvcHRpb25zLmFwaTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpID0gXCJjbGllbnRBcGlcIjtcbiAgICB9XG5cbiAgICByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogb3B0aW9ucy5tZXRob2QsXG4gICAgICBncmFwaFFMOiBzZWxmLl9ncmFwaFFMLFxuICAgICAgdGltZW91dDogb3B0aW9ucy50aW1lb3V0LFxuICAgICAgbWV0YWRhdGE6IHNlbGYuX2NvbmZpZ3VyYXRpb24uYW5hbHl0aWNzTWV0YWRhdGEsXG4gICAgfTtcblxuICAgIGlmIChhcGkgPT09IFwiY2xpZW50QXBpXCIpIHtcbiAgICAgIGJhc2VVcmwgPSBzZWxmLl9jbGllbnRBcGlCYXNlVXJsO1xuXG4gICAgICByZXF1ZXN0T3B0aW9ucy5kYXRhID0gYWRkTWV0YWRhdGEoc2VsZi5fY29uZmlndXJhdGlvbiwgb3B0aW9ucy5kYXRhKTtcbiAgICB9IGVsc2UgaWYgKGFwaSA9PT0gXCJncmFwaFFMQXBpXCIpIHtcbiAgICAgIGJhc2VVcmwgPVxuICAgICAgICBHUkFQSFFMX1VSTFNbc2VsZi5fY29uZmlndXJhdGlvbi5nYXRld2F5Q29uZmlndXJhdGlvbi5lbnZpcm9ubWVudF07XG4gICAgICBvcHRpb25zLmVuZHBvaW50ID0gXCJcIjtcbiAgICAgIHJlcXVlc3RPcHRpb25zLm1ldGhvZCA9IFwicG9zdFwiO1xuICAgICAgcmVxdWVzdE9wdGlvbnMuZGF0YSA9IGFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgIGNsaWVudFNka01ldGFkYXRhOiB7XG4gICAgICAgICAgICBwbGF0Zm9ybTogc2VsZi5fY29uZmlndXJhdGlvbi5hbmFseXRpY3NNZXRhZGF0YS5wbGF0Zm9ybSxcbiAgICAgICAgICAgIHNvdXJjZTogc2VsZi5fY29uZmlndXJhdGlvbi5hbmFseXRpY3NNZXRhZGF0YS5zb3VyY2UsXG4gICAgICAgICAgICBpbnRlZ3JhdGlvbjogc2VsZi5fY29uZmlndXJhdGlvbi5hbmFseXRpY3NNZXRhZGF0YS5pbnRlZ3JhdGlvbixcbiAgICAgICAgICAgIHNlc3Npb25JZDogc2VsZi5fY29uZmlndXJhdGlvbi5hbmFseXRpY3NNZXRhZGF0YS5zZXNzaW9uSWQsXG4gICAgICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnMuZGF0YVxuICAgICAgKTtcblxuICAgICAgcmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IGdldEF1dGhvcml6YXRpb25IZWFkZXJzRm9yR3JhcGhRTChcbiAgICAgICAgc2VsZi5fY29uZmlndXJhdGlvblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgdHlwZTogZXJyb3JzLkNMSUVOVF9PUFRJT05fSU5WQUxJRC50eXBlLFxuICAgICAgICBjb2RlOiBlcnJvcnMuQ0xJRU5UX09QVElPTl9JTlZBTElELmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IFwib3B0aW9ucy5hcGkgaXMgaW52YWxpZC5cIixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlcXVlc3RPcHRpb25zLnVybCA9IGJhc2VVcmwgKyBvcHRpb25zLmVuZHBvaW50O1xuICAgIHJlcXVlc3RPcHRpb25zLnNlbmRBbmFseXRpY3NFdmVudCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHNlbGYsIGtpbmQpO1xuICAgIH07XG5cbiAgICBzZWxmLl9yZXF1ZXN0KHJlcXVlc3RPcHRpb25zLCBmdW5jdGlvbiAoZXJyLCBkYXRhLCBzdGF0dXMpIHtcbiAgICAgIHZhciByZXNvbHZlZERhdGEsIHJlcXVlc3RFcnJvcjtcblxuICAgICAgcmVxdWVzdEVycm9yID0gZm9ybWF0UmVxdWVzdEVycm9yKHN0YXR1cywgZXJyKTtcblxuICAgICAgaWYgKHJlcXVlc3RFcnJvcikge1xuICAgICAgICByZWplY3QocmVxdWVzdEVycm9yKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhcGkgPT09IFwiZ3JhcGhRTEFwaVwiICYmIGRhdGEuZXJyb3JzKSB7XG4gICAgICAgIHJlamVjdChcbiAgICAgICAgICBjb252ZXJ0VG9CcmFpbnRyZWVFcnJvcihkYXRhLmVycm9ycywge1xuICAgICAgICAgICAgdHlwZTogZXJyb3JzLkNMSUVOVF9HUkFQSFFMX1JFUVVFU1RfRVJST1IudHlwZSxcbiAgICAgICAgICAgIGNvZGU6IGVycm9ycy5DTElFTlRfR1JBUEhRTF9SRVFVRVNUX0VSUk9SLmNvZGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvcnMuQ0xJRU5UX0dSQVBIUUxfUkVRVUVTVF9FUlJPUi5tZXNzYWdlLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXNvbHZlZERhdGEgPSBhc3NpZ24oeyBfaHR0cFN0YXR1czogc3RhdHVzIH0sIGRhdGEpO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHNob3VsZENvbGxlY3REYXRhICYmXG4gICAgICAgIHJlc29sdmVkRGF0YS5jcmVkaXRDYXJkcyAmJlxuICAgICAgICByZXNvbHZlZERhdGEuY3JlZGl0Q2FyZHMubGVuZ3RoID4gMFxuICAgICAgKSB7XG4gICAgICAgIHNlbGYuX2ZpbmRPckNyZWF0ZUZyYXVkbmV0SlNPTihyZXNvbHZlZERhdGEuY3JlZGl0Q2FyZHNbMF0ubm9uY2UpO1xuXG4gICAgICAgIGFzc2V0cy5sb2FkU2NyaXB0KHtcbiAgICAgICAgICBzcmM6IEZSQVVETkVUX1VSTCxcbiAgICAgICAgICBmb3JjZVNjcmlwdFJlbG9hZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXNvbHZlKHJlc29sdmVkRGF0YSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNhbGxiYWNrID0gb25jZShkZWZlcnJlZChjYWxsYmFjaykpO1xuXG4gICAgcmVxdWVzdFByb21pc2VcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZSwgcmVzcG9uc2UuX2h0dHBTdGF0dXMpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBzdGF0dXMgPSBlcnIgJiYgZXJyLmRldGFpbHMgJiYgZXJyLmRldGFpbHMuaHR0cFN0YXR1cztcblxuICAgICAgICBjYWxsYmFjayhlcnIsIG51bGwsIHN0YXR1cyk7XG4gICAgICB9KTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0UHJvbWlzZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5mdW5jdGlvbiBmb3JtYXRSZXF1ZXN0RXJyb3Ioc3RhdHVzLCBlcnIpIHtcbiAgdmFyIHJlcXVlc3RFcnJvcjtcblxuICBpZiAoc3RhdHVzID09PSAtMSkge1xuICAgIHJlcXVlc3RFcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuQ0xJRU5UX1JFUVVFU1RfVElNRU9VVCk7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDEpIHtcbiAgICByZXF1ZXN0RXJyb3IgPSBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLkNMSUVOVF9BVVRIT1JJWkFUSU9OX0lOVkFMSUQpO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDAzKSB7XG4gICAgcmVxdWVzdEVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5DTElFTlRfQVVUSE9SSVpBVElPTl9JTlNVRkZJQ0lFTlQpO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDI5KSB7XG4gICAgcmVxdWVzdEVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5DTElFTlRfUkFURV9MSU1JVEVEKTtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPj0gNTAwKSB7XG4gICAgcmVxdWVzdEVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5DTElFTlRfR0FURVdBWV9ORVRXT1JLKTtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPCAyMDAgfHwgc3RhdHVzID49IDQwMCkge1xuICAgIHJlcXVlc3RFcnJvciA9IGNvbnZlcnRUb0JyYWludHJlZUVycm9yKGVyciwge1xuICAgICAgdHlwZTogZXJyb3JzLkNMSUVOVF9SRVFVRVNUX0VSUk9SLnR5cGUsXG4gICAgICBjb2RlOiBlcnJvcnMuQ0xJRU5UX1JFUVVFU1RfRVJST1IuY29kZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9ycy5DTElFTlRfUkVRVUVTVF9FUlJPUi5tZXNzYWdlLFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlcXVlc3RFcnJvcikge1xuICAgIHJlcXVlc3RFcnJvci5kZXRhaWxzID0gcmVxdWVzdEVycm9yLmRldGFpbHMgfHwge307XG4gICAgcmVxdWVzdEVycm9yLmRldGFpbHMuaHR0cFN0YXR1cyA9IHN0YXR1cztcblxuICAgIHJldHVybiByZXF1ZXN0RXJyb3I7XG4gIH1cbn1cblxuQ2xpZW50LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmdldENvbmZpZ3VyYXRpb24oKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgQ2xpZW50IHZlcnNpb24uXG4gKiBAcHVibGljXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgY3JlYXRlZCBjbGllbnQncyB2ZXJzaW9uLlxuICogQGV4YW1wbGVcbiAqIHZhciBjcmVhdGVDbGllbnQgPSByZXF1aXJlKCdicmFpbnRyZWUtd2ViL2NsaWVudCcpLmNyZWF0ZTtcbiAqXG4gKiBjcmVhdGVDbGllbnQoe1xuICogICBhdXRob3JpemF0aW9uOiBDTElFTlRfQVVUSE9SSVpBVElPTlxuICogfSwgZnVuY3Rpb24gKGNyZWF0ZUVyciwgY2xpZW50SW5zdGFuY2UpIHtcbiAqICAgY29uc29sZS5sb2coY2xpZW50SW5zdGFuY2UuZ2V0VmVyc2lvbigpKTsgLy8gRXg6IDEuMC4wXG4gKiB9KTtcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5DbGllbnQucHJvdG90eXBlLmdldFZlcnNpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBWRVJTSU9OO1xufTtcblxuLyoqXG4gKiBDbGVhbmx5IHRlYXIgZG93biBhbnl0aGluZyBzZXQgdXAgYnkge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2NsaWVudC5jcmVhdGV8Y3JlYXRlfS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGVkIG9uY2UgdGVhcmRvd24gaXMgY29tcGxldGUuIE5vIGRhdGEgaXMgcmV0dXJuZWQgaWYgdGVhcmRvd24gY29tcGxldGVzIHN1Y2Nlc3NmdWxseS5cbiAqIEBleGFtcGxlXG4gKiBjbGllbnRJbnN0YW5jZS50ZWFyZG93bigpO1xuICogQGV4YW1wbGUgPGNhcHRpb24+V2l0aCBjYWxsYmFjazwvY2FwdGlvbj5cbiAqIGNsaWVudEluc3RhbmNlLnRlYXJkb3duKGZ1bmN0aW9uICgpIHtcbiAqICAgLy8gdGVhcmRvd24gaXMgY29tcGxldGVcbiAqIH0pO1xuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuQ2xpZW50LnByb3RvdHlwZS50ZWFyZG93biA9IHdyYXBQcm9taXNlKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuXG4gIGRlbGV0ZSBjYWNoZWRDbGllbnRzW3NlbGYuZ2V0Q29uZmlndXJhdGlvbigpLmF1dGhvcml6YXRpb25dO1xuICBjb252ZXJ0TWV0aG9kc1RvRXJyb3Ioc2VsZiwgbWV0aG9kcyhDbGllbnQucHJvdG90eXBlKSk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufSk7XG5cbmZ1bmN0aW9uIGdldEF1dGhvcml6YXRpb25IZWFkZXJzRm9yR3JhcGhRTChjb25maWd1cmF0aW9uKSB7XG4gIHZhciB0b2tlbiA9XG4gICAgY29uZmlndXJhdGlvbi5hdXRob3JpemF0aW9uRmluZ2VycHJpbnQgfHwgY29uZmlndXJhdGlvbi5hdXRob3JpemF0aW9uO1xuXG4gIHJldHVybiB7XG4gICAgQXV0aG9yaXphdGlvbjogXCJCZWFyZXIgXCIgKyB0b2tlbixcbiAgICBcIkJyYWludHJlZS1WZXJzaW9uXCI6IEJSQUlOVFJFRV9WRVJTSU9OLFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENsaWVudDtcblxufSx7XCIuLi9saWIvYWRkLW1ldGFkYXRhXCI6MTE4LFwiLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uL2xpYi9hc3NldHNcIjoxMjAsXCIuLi9saWIvYXNzaWduXCI6MTIxLFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9jb25zdGFudHNcIjoxMjYsXCIuLi9saWIvY29udmVydC1tZXRob2RzLXRvLWVycm9yXCI6MTI3LFwiLi4vbGliL2NvbnZlcnQtdG8tYnJhaW50cmVlLWVycm9yXCI6MTI4LFwiLi4vbGliL2NyZWF0ZS1hdXRob3JpemF0aW9uLWRhdGFcIjoxMzAsXCIuLi9saWIvZGVmZXJyZWRcIjoxMzIsXCIuLi9saWIvaXMtdmVyaWZpZWQtZG9tYWluXCI6MTUzLFwiLi4vbGliL21ldGhvZHNcIjoxNTUsXCIuLi9saWIvb25jZVwiOjE1NixcIi4vY29uc3RhbnRzXCI6NzksXCIuL2Vycm9yc1wiOjgwLFwiLi9nZXQtY29uZmlndXJhdGlvblwiOjgxLFwiLi9yZXF1ZXN0XCI6OTIsXCIuL3JlcXVlc3QvZ3JhcGhxbFwiOjkwLFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0M31dLDc5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQlJBSU5UUkVFX1ZFUlNJT046IFwiMjAxOC0wNS0xMFwiLFxufTtcblxufSx7fV0sODA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuQ2xpZW50IC0gSW50ZXJuYWwgRXJyb3IgQ29kZXNcbiAqIEBpZ25vcmVcbiAqIEBkZXNjcmlwdGlvbiBUaGVzZSBjb2RlcyBzaG91bGQgbmV2ZXIgYmUgZXhwZXJpZW5jZWQgYnkgdGhlIG1lcmNoYW50IGRpcmVjdGx5LlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gQ0xJRU5UX0dBVEVXQVlfQ09ORklHVVJBVElPTl9JTlZBTElEX0RPTUFJTiBBbiBlcnJvciB0byBwcmV2ZW50IGNsaWVudCBjcmVhdGlvbiBmb3IgZG9tYWlucyB0aGF0IGFyZSBub3QgYWxsb3dlZCBpbiB0aGUgSlMuXG4gKiBAcHJvcGVydHkge0lOVEVSTkFMfSBDTElFTlRfTUlTU0lOR19HQVRFV0FZX0NPTkZJR1VSQVRJT04gT2NjdXJzIHdoZW4gdGhlIGNsaWVudCBpcyBjcmVhdGVkIHdpdGhvdXQgYSBnYXRld2F5IGNvbmZpZ3VyYXRpb24uIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5DbGllbnQgLSBDcmVhdGUgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBtYXkgb2NjdXIgd2hlbiBbY3JlYXRpbmcgdGhlIGNsaWVudF0oLi9tb2R1bGUtYnJhaW50cmVlLXdlYl9jbGllbnQuaHRtbCMuY3JlYXRlKVxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gQ0xJRU5UX0lOVkFMSURfQVVUSE9SSVpBVElPTiBPY2N1cnMgd2hlbiBjbGllbnQgdG9rZW4gY2Fubm90IGJlIHBhcnNlZC5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLkNsaWVudCAtIFJlcXVlc3QgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBtYXkgb2NjdXIgd2hlbiBbdXNpbmcgdGhlIHJlcXVlc3QgbWV0aG9kXSguL0NsaWVudC5odG1sI3JlcXVlc3QpXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBDTElFTlRfT1BUSU9OX1JFUVVJUkVEIEFuIG9wdGlvbiByZXF1aXJlZCBpbiB0aGUgcmVxdWVzdCBtZXRob2Qgd2FzIG5vdCBwcm92aWRlZC4gVXN1YWxseSBgb3B0aW9ucy5tZXRob2RgIG9yIGBvcHRpb25zLmVuZHBvaW50YFxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gQ0xJRU5UX09QVElPTl9JTlZBTElEIFRoZSByZXF1ZXN0IG9wdGlvbiBwcm92aWRlZCBpcyBpbnZhbGlkLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gQ0xJRU5UX0dBVEVXQVlfTkVUV09SSyBUaGUgQnJhaW50cmVlIGdhdGV3YXkgY291bGQgbm90IGJlIGNvbnRhY3RlZC5cbiAqIEBwcm9wZXJ0eSB7TkVUV09SS30gQ0xJRU5UX1JFUVVFU1RfVElNRU9VVCBUaGUgcmVxdWVzdCB0b29rIHRvbyBsb25nIHRvIGNvbXBsZXRlIGFuZCB0aW1lZCBvdXQuXG4gKiBAcHJvcGVydHkge05FVFdPUkt9IENMSUVOVF9SRVFVRVNUX0VSUk9SIFRoZSByZXNwb25zZSBmcm9tIGEgcmVxdWVzdCBoYWQgc3RhdHVzIDQwMCBvciBncmVhdGVyLlxuICogQHByb3BlcnR5IHtORVRXT1JLfSBDTElFTlRfR1JBUEhRTF9SRVFVRVNUX0VSUk9SIFRoZSByZXNwb25zZSBmcm9tIGEgcmVxdWVzdCB0byBHcmFwaFFMIGNvbnRhaW5lZCBhbiBlcnJvci5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IENMSUVOVF9SQVRFX0xJTUlURUQgVGhlIHJlc3BvbnNlIGZyb20gYSByZXF1ZXN0IGhhZCBhIHN0YXR1cyBvZiA0MjksIGluZGljYXRpbmcgcmF0ZSBsaW1pdGluZy5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IENMSUVOVF9BVVRIT1JJWkFUSU9OX0lOU1VGRklDSUVOVCBUaGUgdXNlciBhc3NvY2lhdGVkIHdpdGggdGhlIGNsaWVudCB0b2tlbiBvciB0b2tlbml6YXRpb24ga2V5IGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbnMgdG8gbWFrZSB0aGUgcmVxdWVzdC5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IENMSUVOVF9BVVRIT1JJWkFUSU9OX0lOVkFMSUQgVGhlIHByb3ZpZGVkIGF1dGhvcml6YXRpb24gY291bGQgbm90IGJlIGZvdW5kLiBFaXRoZXIgdGhlIGNsaWVudCB0b2tlbiBoYXMgZXhwaXJlZCBhbmQgYSBuZXcgY2xpZW50IHRva2VuIG11c3QgYmUgZ2VuZXJhdGVkIG9yIHRoZSB0b2tlbml6YXRpb24ga2V5IHVzZWQgaXMgc2V0IHRvIGJlIGluYWN0aXZlIG9yIGhhcyBiZWVuIGRlbGV0ZWQuXG4gKi9cblxudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDTElFTlRfR0FURVdBWV9DT05GSUdVUkFUSU9OX0lOVkFMSURfRE9NQUlOOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJDTElFTlRfR0FURVdBWV9DT05GSUdVUkFUSU9OX0lOVkFMSURfRE9NQUlOXCIsXG4gIH0sXG4gIENMSUVOVF9PUFRJT05fUkVRVUlSRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIkNMSUVOVF9PUFRJT05fUkVRVUlSRURcIixcbiAgfSxcbiAgQ0xJRU5UX09QVElPTl9JTlZBTElEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJDTElFTlRfT1BUSU9OX0lOVkFMSURcIixcbiAgfSxcbiAgQ0xJRU5UX01JU1NJTkdfR0FURVdBWV9DT05GSUdVUkFUSU9OOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuSU5URVJOQUwsXG4gICAgY29kZTogXCJDTElFTlRfTUlTU0lOR19HQVRFV0FZX0NPTkZJR1VSQVRJT05cIixcbiAgICBtZXNzYWdlOiBcIk1pc3NpbmcgZ2F0ZXdheUNvbmZpZ3VyYXRpb24uXCIsXG4gIH0sXG4gIENMSUVOVF9JTlZBTElEX0FVVEhPUklaQVRJT046IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIkNMSUVOVF9JTlZBTElEX0FVVEhPUklaQVRJT05cIixcbiAgICBtZXNzYWdlOlxuICAgICAgXCJBdXRob3JpemF0aW9uIGlzIGludmFsaWQuIE1ha2Ugc3VyZSB5b3VyIGNsaWVudCB0b2tlbiBvciB0b2tlbml6YXRpb24ga2V5IGlzIHZhbGlkLlwiLFxuICB9LFxuICBDTElFTlRfR0FURVdBWV9ORVRXT1JLOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTkVUV09SSyxcbiAgICBjb2RlOiBcIkNMSUVOVF9HQVRFV0FZX05FVFdPUktcIixcbiAgICBtZXNzYWdlOiBcIkNhbm5vdCBjb250YWN0IHRoZSBnYXRld2F5IGF0IHRoaXMgdGltZS5cIixcbiAgfSxcbiAgQ0xJRU5UX1JFUVVFU1RfVElNRU9VVDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk5FVFdPUkssXG4gICAgY29kZTogXCJDTElFTlRfUkVRVUVTVF9USU1FT1VUXCIsXG4gICAgbWVzc2FnZTogXCJSZXF1ZXN0IHRpbWVkIG91dCB3YWl0aW5nIGZvciBhIHJlcGx5LlwiLFxuICB9LFxuICBDTElFTlRfUkVRVUVTVF9FUlJPUjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk5FVFdPUkssXG4gICAgY29kZTogXCJDTElFTlRfUkVRVUVTVF9FUlJPUlwiLFxuICAgIG1lc3NhZ2U6IFwiVGhlcmUgd2FzIGEgcHJvYmxlbSB3aXRoIHlvdXIgcmVxdWVzdC5cIixcbiAgfSxcbiAgQ0xJRU5UX0dSQVBIUUxfUkVRVUVTVF9FUlJPUjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk5FVFdPUkssXG4gICAgY29kZTogXCJDTElFTlRfR1JBUEhRTF9SRVFVRVNUX0VSUk9SXCIsXG4gICAgbWVzc2FnZTogXCJUaGVyZSB3YXMgYSBwcm9ibGVtIHdpdGggeW91ciByZXF1ZXN0LlwiLFxuICB9LFxuICBDTElFTlRfUkFURV9MSU1JVEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJDTElFTlRfUkFURV9MSU1JVEVEXCIsXG4gICAgbWVzc2FnZTogXCJZb3UgYXJlIGJlaW5nIHJhdGUtbGltaXRlZDsgcGxlYXNlIHRyeSBhZ2FpbiBpbiBhIGZldyBtaW51dGVzLlwiLFxuICB9LFxuICBDTElFTlRfQVVUSE9SSVpBVElPTl9JTlNVRkZJQ0lFTlQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIkNMSUVOVF9BVVRIT1JJWkFUSU9OX0lOU1VGRklDSUVOVFwiLFxuICAgIG1lc3NhZ2U6IFwiVGhlIGF1dGhvcml6YXRpb24gdXNlZCBoYXMgaW5zdWZmaWNpZW50IHByaXZpbGVnZXMuXCIsXG4gIH0sXG4gIENMSUVOVF9BVVRIT1JJWkFUSU9OX0lOVkFMSUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIkNMSUVOVF9BVVRIT1JJWkFUSU9OX0lOVkFMSURcIixcbiAgICBtZXNzYWdlOlxuICAgICAgXCJFaXRoZXIgdGhlIGNsaWVudCB0b2tlbiBoYXMgZXhwaXJlZCBhbmQgYSBuZXcgb25lIHNob3VsZCBiZSBnZW5lcmF0ZWQgb3IgdGhlIHRva2VuaXphdGlvbiBrZXkgaGFzIGJlZW4gZGVhY3RpdmF0ZWQgb3IgZGVsZXRlZC5cIixcbiAgfSxcbn07XG5cbn0se1wiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNH1dLDgxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcbnZhciByZXF1ZXN0ID0gX2RlcmVxXyhcIi4vcmVxdWVzdFwiKTtcbnZhciB1dWlkID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvdXVpZFwiKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKFwiLi4vbGliL2NvbnN0YW50c1wiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG52YXIgR3JhcGhRTCA9IF9kZXJlcV8oXCIuL3JlcXVlc3QvZ3JhcGhxbFwiKTtcbnZhciBHUkFQSFFMX1VSTFMgPSBfZGVyZXFfKFwiLi4vbGliL2NvbnN0YW50c1wiKS5HUkFQSFFMX1VSTFM7XG52YXIgaXNEYXRlU3RyaW5nQmVmb3JlT3JPbiA9IF9kZXJlcV8oXCIuLi9saWIvaXMtZGF0ZS1zdHJpbmctYmVmb3JlLW9yLW9uXCIpO1xuXG52YXIgQlJBSU5UUkVFX1ZFUlNJT04gPSBfZGVyZXFfKFwiLi9jb25zdGFudHNcIikuQlJBSU5UUkVFX1ZFUlNJT047XG5cbmZ1bmN0aW9uIGdldENvbmZpZ3VyYXRpb24oYXV0aERhdGEpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgY29uZmlndXJhdGlvbiwgYXR0cnMsIGNvbmZpZ1VybCwgcmVxT3B0aW9ucztcbiAgICB2YXIgc2Vzc2lvbklkID0gdXVpZCgpO1xuICAgIHZhciBhbmFseXRpY3NNZXRhZGF0YSA9IHtcbiAgICAgIG1lcmNoYW50QXBwSWQ6IHdpbmRvdy5sb2NhdGlvbi5ob3N0LFxuICAgICAgcGxhdGZvcm06IGNvbnN0YW50cy5QTEFURk9STSxcbiAgICAgIHNka1ZlcnNpb246IGNvbnN0YW50cy5WRVJTSU9OLFxuICAgICAgc291cmNlOiBjb25zdGFudHMuU09VUkNFLFxuICAgICAgLy8gTkVYVF9NQUpPUl9WRVJTSU9OIHJlbW92ZSBvbmUgb2YgdGhlc2UgdG8gbm90IGR1cGxpY2F0ZSBkYXRhLiBUYXJnZXQgcGFyaXR5IHdpdGggbW9iaWxlIHBsYXRmb3JtcyBhcHByb2FjaC5cbiAgICAgIGludGVncmF0aW9uOiBjb25zdGFudHMuSU5URUdSQVRJT04sXG4gICAgICBpbnRlZ3JhdGlvblR5cGU6IGNvbnN0YW50cy5JTlRFR1JBVElPTixcbiAgICAgIHNlc3Npb25JZDogc2Vzc2lvbklkLFxuICAgIH07XG5cbiAgICBhdHRycyA9IGF1dGhEYXRhLmF0dHJzO1xuICAgIGNvbmZpZ1VybCA9IGF1dGhEYXRhLmNvbmZpZ1VybDtcblxuICAgIGF0dHJzLl9tZXRhID0gYW5hbHl0aWNzTWV0YWRhdGE7XG4gICAgYXR0cnMuYnJhaW50cmVlTGlicmFyeVZlcnNpb24gPSBjb25zdGFudHMuQlJBSU5UUkVFX0xJQlJBUllfVkVSU0lPTjtcbiAgICBhdHRycy5jb25maWdWZXJzaW9uID0gXCIzXCI7XG5cbiAgICByZXFPcHRpb25zID0ge1xuICAgICAgdXJsOiBjb25maWdVcmwsXG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICBkYXRhOiBhdHRycyxcbiAgICB9O1xuXG4gICAgaWYgKGF0dHJzLmF1dGhvcml6YXRpb25GaW5nZXJwcmludCAmJiBhdXRoRGF0YS5ncmFwaFFMKSB7XG4gICAgICBpZiAoaXNEYXRlU3RyaW5nQmVmb3JlT3JPbihhdXRoRGF0YS5ncmFwaFFMLmRhdGUsIEJSQUlOVFJFRV9WRVJTSU9OKSkge1xuICAgICAgICByZXFPcHRpb25zLmdyYXBoUUwgPSBuZXcgR3JhcGhRTCh7XG4gICAgICAgICAgZ3JhcGhRTDoge1xuICAgICAgICAgICAgdXJsOiBhdXRoRGF0YS5ncmFwaFFMLnVybCxcbiAgICAgICAgICAgIGZlYXR1cmVzOiBbXCJjb25maWd1cmF0aW9uXCJdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXFPcHRpb25zLm1ldGFkYXRhID0gYW5hbHl0aWNzTWV0YWRhdGE7XG4gICAgfSBlbHNlIGlmIChhdHRycy50b2tlbml6YXRpb25LZXkpIHtcbiAgICAgIHJlcU9wdGlvbnMuZ3JhcGhRTCA9IG5ldyBHcmFwaFFMKHtcbiAgICAgICAgZ3JhcGhRTDoge1xuICAgICAgICAgIHVybDogR1JBUEhRTF9VUkxTW2F1dGhEYXRhLmVudmlyb25tZW50XSxcbiAgICAgICAgICBmZWF0dXJlczogW1wiY29uZmlndXJhdGlvblwiXSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICByZXFPcHRpb25zLm1ldGFkYXRhID0gYW5hbHl0aWNzTWV0YWRhdGE7XG4gICAgfVxuXG4gICAgLy8gTkVYVF9NQUpPUl9WRVJTSU9OXG4gICAgLy8gdGhlcmUgYXJlIHZhcmlvdXMgaXNzdWVzIHdpdGggdGhlIGNvbmZpZyBlbmRwb2ludCB3aGVyZSB0aGUgdmFsdWVzIHJldHVybmVkXG4gICAgLy8gZG8gbm90IG1hdGNoIHRoZSB2YWx1ZXMgZnJvbSB0aGUgbWVyY2hhbnQgYWNjb3VudCBpZCBwYXNzZWQgaW50byBhIGNsaWVudCB0b2tlblxuICAgIC8vIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBjb25maWd1cmF0aW9uIHJlcXVlc3QgZW5kcG9pbnQgdG8gYmUgYWJsZSB0byBwYXNzIHRoZVxuICAgIC8vIGNvcnJlY3QgdmFsdWVzLiBUaGUgZm9sbG93aW5nIG9uZXMgYXJlIGluY29ycmVjdFxuICAgIC8vICogYXBwbGVQYXlXZWIgLSBkZWZpbml0ZWx5IHN1cHBvcnRlZE5ldHdvcmtzLCB3aGljaCBjb21waWxlcyBhbGwgdGhlIGNhcmRcbiAgICAvLyAgICBuZXR3b3JrcyBmcm9tIGFsbCB0aGUgbWVyY2hhbnQgYWNjb3VudHMgaW5zdGVhZCBvZiBwcm92aWRpbmcganVzdCB0aGVcbiAgICAvLyAgICBvbmVzIGZyb20gdGhlIHNwZWNpZmllZCBvbmUuIFRoZSBzYW1lIGlzIHByb2JhYmx5IHRydWUgZm9yIGlvcyBhcHBsZSBwYXlcbiAgICAvLyAgICBBbHNvIHRoZSBtZXJjaGFudGlkZW50aWZpZXJcbiAgICAvLyBORVhUX01BSk9SX1ZFUlNJT04gQWxsb3cgcGFzc2luZyBpbiBtZXJjaGFudCBhY2NvdW50IGlkIHdoZW4gY3JlYXRpbmcgdGhlIGNvbXBvbmVudFxuICAgIC8vIHRvIGZldGNoIHRoZSBjb25maWcgZm9yIHRoYXQgbWVyY2hhbnQgYWNjb3VudCBpZCAocGFydGljdWxhcmx5IGhlbHBmdWwgd2hlbiB1c2luZ1xuICAgIC8vIGEgdG9rZW5pemF0aW9uIGtleSBmb3IgYXV0aG9yaXphdGlvbilcbiAgICByZXF1ZXN0KHJlcU9wdGlvbnMsIGZ1bmN0aW9uIChlcnIsIHJlc3BvbnNlLCBzdGF0dXMpIHtcbiAgICAgIHZhciBlcnJvclRlbXBsYXRlO1xuXG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgICAgICAgIGVycm9yVGVtcGxhdGUgPSBlcnJvcnMuQ0xJRU5UX0FVVEhPUklaQVRJT05fSU5TVUZGSUNJRU5UO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgICAgZXJyb3JUZW1wbGF0ZSA9IGVycm9ycy5DTElFTlRfQVVUSE9SSVpBVElPTl9JTlZBTElEO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9yVGVtcGxhdGUgPSBlcnJvcnMuQ0xJRU5UX0dBVEVXQVlfTkVUV09SSztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlamVjdChcbiAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICAgICAgdHlwZTogZXJyb3JUZW1wbGF0ZS50eXBlLFxuICAgICAgICAgICAgY29kZTogZXJyb3JUZW1wbGF0ZS5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JUZW1wbGF0ZS5tZXNzYWdlLFxuICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25maWd1cmF0aW9uID0ge1xuICAgICAgICBhdXRob3JpemF0aW9uVHlwZTogYXR0cnMudG9rZW5pemF0aW9uS2V5XG4gICAgICAgICAgPyBcIlRPS0VOSVpBVElPTl9LRVlcIlxuICAgICAgICAgIDogXCJDTElFTlRfVE9LRU5cIixcbiAgICAgICAgYXV0aG9yaXphdGlvbkZpbmdlcnByaW50OiBhdHRycy5hdXRob3JpemF0aW9uRmluZ2VycHJpbnQsXG4gICAgICAgIGFuYWx5dGljc01ldGFkYXRhOiBhbmFseXRpY3NNZXRhZGF0YSxcbiAgICAgICAgZ2F0ZXdheUNvbmZpZ3VyYXRpb246IHJlc3BvbnNlLFxuICAgICAgfTtcblxuICAgICAgcmVzb2x2ZShjb25maWd1cmF0aW9uKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25maWd1cmF0aW9uOiB3cmFwUHJvbWlzZShnZXRDb25maWd1cmF0aW9uKSxcbn07XG5cbn0se1wiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9jb25zdGFudHNcIjoxMjYsXCIuLi9saWIvaXMtZGF0ZS1zdHJpbmctYmVmb3JlLW9yLW9uXCI6MTUxLFwiLi9jb25zdGFudHNcIjo3OSxcIi4vZXJyb3JzXCI6ODAsXCIuL3JlcXVlc3RcIjo5MixcIi4vcmVxdWVzdC9ncmFwaHFsXCI6OTAsXCJAYnJhaW50cmVlL3V1aWRcIjozOSxcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCI6NDN9XSw4MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG52YXIgQ2xpZW50ID0gX2RlcmVxXyhcIi4vY2xpZW50XCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcbnZhciBzaGFyZWRFcnJvcnMgPSBfZGVyZXFfKFwiLi4vbGliL2Vycm9yc1wiKTtcblxuLyoqIEBtb2R1bGUgYnJhaW50cmVlLXdlYi9jbGllbnQgKi9cblxuLyoqXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBpcyB0aGUgZW50cnkgcG9pbnQgZm9yIHRoZSA8Y29kZT5icmFpbnRyZWUuY2xpZW50PC9jb2RlPiBtb2R1bGUuIEl0IGlzIHVzZWQgZm9yIGNyZWF0aW5nIHtAbGluayBDbGllbnR9IGluc3RhbmNlcyB0aGF0IHNlcnZpY2UgY29tbXVuaWNhdGlvbiB0byBCcmFpbnRyZWUgc2VydmVycy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIE9iamVjdCBjb250YWluaW5nIGFsbCB7QGxpbmsgQ2xpZW50fSBvcHRpb25zOlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYXV0aG9yaXphdGlvbiBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgPGNvZGU+ZGF0YTwvY29kZT4sIGlzIHRoZSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZVxuICogdmFyIGNyZWF0ZUNsaWVudCA9IHJlcXVpcmUoJ2JyYWludHJlZS13ZWIvY2xpZW50JykuY3JlYXRlO1xuICpcbiAqIGNyZWF0ZUNsaWVudCh7XG4gKiAgIGF1dGhvcml6YXRpb246IENMSUVOVF9BVVRIT1JJWkFUSU9OXG4gKiB9LCBmdW5jdGlvbiAoY3JlYXRlRXJyLCBjbGllbnRJbnN0YW5jZSkge1xuICogICBpZiAoY3JlYXRlRXJyKSB7XG4gKiAgICAgaWYgKGNyZWF0ZUVyci5jb2RlID09PSAnQ0xJRU5UX0FVVEhPUklaQVRJT05fSU5WQUxJRCcpIHtcbiAqICAgICAgIC8vIGVpdGhlciB0aGUgY2xpZW50IHRva2VuIGhhcyBleHBpcmVkLCBhbmQgYSBuZXcgb25lIHNob3VsZCBiZSBnZW5lcmF0ZWRcbiAqICAgICAgIC8vIG9yIHRoZSB0b2tlbml6YXRpb24ga2V5IHdhcyBkZWFjdGl2YXRlZCBvciBkZWxldGVkXG4gKiAgICAgfSBlbHNlIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdzb21ldGhpbmcgd2VudCB3cm9uZyBjcmVhdGluZyB0aGUgY2xpZW50IGluc3RhbmNlJywgY3JlYXRlRXJyKTtcbiAqICAgICB9XG4gKiAgICAgcmV0dXJuO1xuICogICB9XG4gKlxuICogIC8vIHNldCB1cCBvdGhlciBjb21wb25lbnRzXG4gKiB9KTtcbiAqIEBzdGF0aWNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zLmF1dGhvcml6YXRpb24pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICB0eXBlOiBzaGFyZWRFcnJvcnMuSU5TVEFOVElBVElPTl9PUFRJT05fUkVRVUlSRUQudHlwZSxcbiAgICAgICAgY29kZTogc2hhcmVkRXJyb3JzLklOU1RBTlRJQVRJT05fT1BUSU9OX1JFUVVJUkVELmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgXCJvcHRpb25zLmF1dGhvcml6YXRpb24gaXMgcmVxdWlyZWQgd2hlbiBpbnN0YW50aWF0aW5nIGEgY2xpZW50LlwiLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIENsaWVudC5pbml0aWFsaXplKG9wdGlvbnMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiB3cmFwUHJvbWlzZShjcmVhdGUpLFxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIFNESywgaS5lLiBge0Bwa2cgdmVyc2lvbn1gLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgVkVSU0lPTjogVkVSU0lPTixcbn07XG5cbn0se1wiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9lcnJvcnNcIjoxMzUsXCIuL2NsaWVudFwiOjc4LFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0M31dLDgzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgcXVlcnlzdHJpbmcgPSBfZGVyZXFfKFwiLi4vLi4vbGliL3F1ZXJ5c3RyaW5nXCIpO1xudmFyIGFzc2lnbiA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYXNzaWduXCIpLmFzc2lnbjtcbnZhciBwcmVwQm9keSA9IF9kZXJlcV8oXCIuL3ByZXAtYm9keVwiKTtcbnZhciBwYXJzZUJvZHkgPSBfZGVyZXFfKFwiLi9wYXJzZS1ib2R5XCIpO1xudmFyIHhociA9IF9kZXJlcV8oXCIuL3hoclwiKTtcbnZhciBpc1hIUkF2YWlsYWJsZSA9IHhoci5pc0F2YWlsYWJsZTtcbnZhciBHcmFwaFFMUmVxdWVzdCA9IF9kZXJlcV8oXCIuL2dyYXBocWwvcmVxdWVzdFwiKTtcbnZhciBEZWZhdWx0UmVxdWVzdCA9IF9kZXJlcV8oXCIuL2RlZmF1bHQtcmVxdWVzdFwiKTtcblxudmFyIE1BWF9UQ1BfUkVUUllDT1VOVCA9IDE7XG52YXIgVENQX1BSRUNPTk5FQ1RfQlVHX1NUQVRVU19DT0RFID0gNDA4O1xuXG5mdW5jdGlvbiByZXF1ZXN0U2hvdWxkUmV0cnkoc3RhdHVzKSB7XG4gIHJldHVybiAhc3RhdHVzIHx8IHN0YXR1cyA9PT0gVENQX1BSRUNPTk5FQ1RfQlVHX1NUQVRVU19DT0RFO1xufVxuXG5mdW5jdGlvbiBncmFwaFFMUmVxdWVzdFNob3VsZFJldHJ5V2l0aENsaWVudEFwaShib2R5KSB7XG4gIHZhciBlcnJvckNsYXNzID1cbiAgICAhYm9keS5kYXRhICYmXG4gICAgYm9keS5lcnJvcnMgJiZcbiAgICBib2R5LmVycm9yc1swXSAmJlxuICAgIGJvZHkuZXJyb3JzWzBdLmV4dGVuc2lvbnMgJiZcbiAgICBib2R5LmVycm9yc1swXS5leHRlbnNpb25zLmVycm9yQ2xhc3M7XG5cbiAgcmV0dXJuIGVycm9yQ2xhc3MgPT09IFwiVU5LTk9XTlwiIHx8IGVycm9yQ2xhc3MgPT09IFwiSU5URVJOQUxcIjtcbn1cblxuZnVuY3Rpb24gX3JlcXVlc3RXaXRoUmV0cnkob3B0aW9ucywgdGNwUmV0cnlDb3VudCwgY2IpIHtcbiAgdmFyIHN0YXR1cywgcmVzQm9keSwgYWpheFJlcXVlc3QsIGJvZHksIG1ldGhvZCwgaGVhZGVycywgcGFyc2VkQm9keTtcbiAgdmFyIHVybCA9IG9wdGlvbnMudXJsO1xuICB2YXIgZ3JhcGhRTCA9IG9wdGlvbnMuZ3JhcGhRTDtcbiAgdmFyIHRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQ7XG4gIHZhciByZXEgPSB4aHIuZ2V0UmVxdWVzdE9iamVjdCgpO1xuICB2YXIgY2FsbGJhY2sgPSBjYjtcbiAgdmFyIGlzR3JhcGhRTFJlcXVlc3QgPSBCb29sZWFuKFxuICAgIGdyYXBoUUwgJiYgZ3JhcGhRTC5pc0dyYXBoUUxSZXF1ZXN0KHVybCwgb3B0aW9ucy5kYXRhKVxuICApO1xuXG4gIG9wdGlvbnMuaGVhZGVycyA9IGFzc2lnbihcbiAgICB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgb3B0aW9ucy5oZWFkZXJzXG4gICk7XG5cbiAgaWYgKGlzR3JhcGhRTFJlcXVlc3QpIHtcbiAgICBhamF4UmVxdWVzdCA9IG5ldyBHcmFwaFFMUmVxdWVzdChvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBhamF4UmVxdWVzdCA9IG5ldyBEZWZhdWx0UmVxdWVzdChvcHRpb25zKTtcbiAgfVxuXG4gIHVybCA9IGFqYXhSZXF1ZXN0LmdldFVybCgpO1xuICBib2R5ID0gYWpheFJlcXVlc3QuZ2V0Qm9keSgpO1xuICBtZXRob2QgPSBhamF4UmVxdWVzdC5nZXRNZXRob2QoKTtcbiAgaGVhZGVycyA9IGFqYXhSZXF1ZXN0LmdldEhlYWRlcnMoKTtcblxuICBpZiAobWV0aG9kID09PSBcIkdFVFwiKSB7XG4gICAgdXJsID0gcXVlcnlzdHJpbmcucXVlcnlpZnkodXJsLCBib2R5KTtcbiAgICBib2R5ID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc1hIUkF2YWlsYWJsZSkge1xuICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocmVxLnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVxLnN0YXR1cyA9PT0gMCAmJiBpc0dyYXBoUUxSZXF1ZXN0KSB7XG4gICAgICAgIC8vIElmIGEgbWVyY2hhbnQgZXhwZXJpZW5jZXMgYSBjb25uZWN0aW9uXG4gICAgICAgIC8vIGlzc3VlIHRvIHRoZSBHcmFwaFFMIGVuZHBvaW50IChwb3NzaWJseVxuICAgICAgICAvLyBkdWUgdG8gYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSksIHJldHJ5XG4gICAgICAgIC8vIHRoZSByZXF1ZXN0IGFnYWluc3QgdGhlIG9sZCBjbGllbnQgQVBJLlxuICAgICAgICBkZWxldGUgb3B0aW9ucy5ncmFwaFFMO1xuICAgICAgICBfcmVxdWVzdFdpdGhSZXRyeShvcHRpb25zLCB0Y3BSZXRyeUNvdW50LCBjYik7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwYXJzZWRCb2R5ID0gcGFyc2VCb2R5KHJlcS5yZXNwb25zZVRleHQpO1xuICAgICAgcmVzQm9keSA9IGFqYXhSZXF1ZXN0LmFkYXB0UmVzcG9uc2VCb2R5KHBhcnNlZEJvZHkpO1xuICAgICAgc3RhdHVzID0gYWpheFJlcXVlc3QuZGV0ZXJtaW5lU3RhdHVzKHJlcS5zdGF0dXMsIHBhcnNlZEJvZHkpO1xuXG4gICAgICBpZiAoc3RhdHVzID49IDQwMCB8fCBzdGF0dXMgPCAyMDApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzR3JhcGhRTFJlcXVlc3QgJiZcbiAgICAgICAgICBncmFwaFFMUmVxdWVzdFNob3VsZFJldHJ5V2l0aENsaWVudEFwaShwYXJzZWRCb2R5KVxuICAgICAgICApIHtcbiAgICAgICAgICBkZWxldGUgb3B0aW9ucy5ncmFwaFFMO1xuICAgICAgICAgIF9yZXF1ZXN0V2l0aFJldHJ5KG9wdGlvbnMsIHRjcFJldHJ5Q291bnQsIGNiKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0Y3BSZXRyeUNvdW50IDwgTUFYX1RDUF9SRVRSWUNPVU5UICYmIHJlcXVlc3RTaG91bGRSZXRyeShzdGF0dXMpKSB7XG4gICAgICAgICAgdGNwUmV0cnlDb3VudCsrO1xuICAgICAgICAgIF9yZXF1ZXN0V2l0aFJldHJ5KG9wdGlvbnMsIHRjcFJldHJ5Q291bnQsIGNiKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhyZXNCb2R5IHx8IFwiZXJyb3JcIiwgbnVsbCwgc3RhdHVzIHx8IDUwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXNCb2R5LCBzdGF0dXMpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaWYgKG9wdGlvbnMuaGVhZGVycykge1xuICAgICAgdXJsID0gcXVlcnlzdHJpbmcucXVlcnlpZnkodXJsLCBoZWFkZXJzKTtcbiAgICB9XG5cbiAgICByZXEub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgcGFyc2VCb2R5KHJlcS5yZXNwb25zZVRleHQpLCByZXEuc3RhdHVzKTtcbiAgICB9O1xuXG4gICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBYRG9tYWluUmVxdWVzdCBkb2VzIG5vdCByZXBvcnQgYSBib2R5IG9yIHN0YXR1cyBmb3IgZXJyb3JzLCBzb1xuICAgICAgLy8gaGFyZGNvZGUgdG8gJ2Vycm9yJyBhbmQgNTAwLCByZXNwZWN0aXZlbHlcbiAgICAgIGNhbGxiYWNrKFwiZXJyb3JcIiwgbnVsbCwgNTAwKTtcbiAgICB9O1xuXG4gICAgLy8gVGhpcyBtdXN0IHJlbWFpbiBmb3IgSUU5IHRvIHdvcmtcbiAgICByZXEub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgcmVxLm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKFwidGltZW91dFwiLCBudWxsLCAtMSk7XG4gICAgfTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmVxLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICB9IGNhdGNoIChyZXF1ZXN0T3BlbkVycm9yKSB7XG4gICAgLy8gSWYgYSBtZXJjaGFudCBoYXMgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBhbmQgdGhleSBoYXZlXG4gICAgLy8gbm90IGFsbG93ZWQgb3VyIGVuZHBvaW50cywgc29tZSBicm93c2VycyBtYXlcbiAgICAvLyBzeW5jaHJvbm91c2x5IHRocm93IGFuIGVycm9yLiBJZiBpdCBpcyBub3QgYSBHcmFwaFFMXG4gICAgLy8gcmVxdWVzdCwgd2UgdGhyb3cgdGhlIGVycm9yLiBJZiBpdCBpcyBhIEdyYXBoUUwgcmVxdWVzdFxuICAgIC8vIHdlIHJlbW92ZSB0aGUgR3JhcGhRTCBvcHRpb24gYW5kIHRyeSB0aGUgcmVxdWVzdCBhZ2FpbnN0XG4gICAgLy8gdGhlIG9sZCBjbGllbnQgQVBJLlxuICAgIGlmICghaXNHcmFwaFFMUmVxdWVzdCkge1xuICAgICAgdGhyb3cgcmVxdWVzdE9wZW5FcnJvcjtcbiAgICB9XG5cbiAgICBkZWxldGUgb3B0aW9ucy5ncmFwaFFMO1xuXG4gICAgX3JlcXVlc3RXaXRoUmV0cnkob3B0aW9ucywgdGNwUmV0cnlDb3VudCwgY2IpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmVxLnRpbWVvdXQgPSB0aW1lb3V0O1xuXG4gIGlmIChpc1hIUkF2YWlsYWJsZSkge1xuICAgIE9iamVjdC5rZXlzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGhlYWRlcktleSkge1xuICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyS2V5LCBoZWFkZXJzW2hlYWRlcktleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXEuc2VuZChwcmVwQm9keShtZXRob2QsIGJvZHkpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8qIGlnbm9yZWQgKi9cbiAgfVxufVxuXG5mdW5jdGlvbiByZXF1ZXN0KG9wdGlvbnMsIGNiKSB7XG4gIF9yZXF1ZXN0V2l0aFJldHJ5KG9wdGlvbnMsIDAsIGNiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlcXVlc3Q6IHJlcXVlc3QsXG59O1xuXG59LHtcIi4uLy4uL2xpYi9hc3NpZ25cIjoxMjEsXCIuLi8uLi9saWIvcXVlcnlzdHJpbmdcIjoxNTcsXCIuL2RlZmF1bHQtcmVxdWVzdFwiOjg0LFwiLi9ncmFwaHFsL3JlcXVlc3RcIjo5MSxcIi4vcGFyc2UtYm9keVwiOjkzLFwiLi9wcmVwLWJvZHlcIjo5NCxcIi4veGhyXCI6OTV9XSw4NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gRGVmYXVsdFJlcXVlc3Qob3B0aW9ucykge1xuICB0aGlzLl91cmwgPSBvcHRpb25zLnVybDtcbiAgdGhpcy5fZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgdGhpcy5fbWV0aG9kID0gb3B0aW9ucy5tZXRob2Q7XG4gIHRoaXMuX2hlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnM7XG59XG5cbkRlZmF1bHRSZXF1ZXN0LnByb3RvdHlwZS5nZXRVcmwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl91cmw7XG59O1xuXG5EZWZhdWx0UmVxdWVzdC5wcm90b3R5cGUuZ2V0Qm9keSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2RhdGE7XG59O1xuXG5EZWZhdWx0UmVxdWVzdC5wcm90b3R5cGUuZ2V0TWV0aG9kID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fbWV0aG9kO1xufTtcblxuRGVmYXVsdFJlcXVlc3QucHJvdG90eXBlLmdldEhlYWRlcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9oZWFkZXJzO1xufTtcblxuRGVmYXVsdFJlcXVlc3QucHJvdG90eXBlLmFkYXB0UmVzcG9uc2VCb2R5ID0gZnVuY3Rpb24gKHBhcnNlZEJvZHkpIHtcbiAgcmV0dXJuIHBhcnNlZEJvZHk7XG59O1xuXG5EZWZhdWx0UmVxdWVzdC5wcm90b3R5cGUuZGV0ZXJtaW5lU3RhdHVzID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICByZXR1cm4gc3RhdHVzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0UmVxdWVzdDtcblxufSx7fV0sODU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlcnJvclJlc3BvbnNlQWRhcHRlciA9IF9kZXJlcV8oXCIuL2Vycm9yXCIpO1xudmFyIGFzc2lnbiA9IF9kZXJlcV8oXCIuLi8uLi8uLi8uLi9saWIvYXNzaWduXCIpLmFzc2lnbjtcblxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG52YXIgY2FyZFR5cGVUcmFuc2Zvcm1zID0ge1xuICBjcmVkaXRDYXJkOiB7XG4gICAgQU1FUklDQU5fRVhQUkVTUzogXCJBbWVyaWNhbiBFeHByZXNzXCIsXG4gICAgRElTQ09WRVI6IFwiRGlzY292ZXJcIixcbiAgICBJTlRFUk5BVElPTkFMX01BRVNUUk86IFwiTWFlc3Ryb1wiLFxuICAgIEpDQjogXCJKQ0JcIixcbiAgICBNQVNURVJDQVJEOiBcIk1hc3RlckNhcmRcIixcbiAgICBTT0xPOiBcIlNvbG9cIixcbiAgICBVS19NQUVTVFJPOiBcIlVLIE1hZXN0cm9cIixcbiAgICBVTklPTl9QQVk6IFwiVW5pb25QYXlcIixcbiAgICBWSVNBOiBcIlZpc2FcIixcbiAgICBFTE86IFwiRWxvXCIsXG4gICAgSElQRVI6IFwiSGlwZXJcIixcbiAgICBISVBFUkNBUkQ6IFwiSGlwZXJjYXJkXCIsXG4gIH0sXG4gIGFwcGxlUGF5V2ViOiB7XG4gICAgVklTQTogXCJ2aXNhXCIsXG4gICAgTUFTVEVSQ0FSRDogXCJtYXN0ZXJjYXJkXCIsXG4gICAgRElTQ09WRVI6IFwiZGlzY292ZXJcIixcbiAgICBBTUVSSUNBTl9FWFBSRVNTOiBcImFtZXhcIixcbiAgICBJTlRFUk5BVElPTkFMX01BRVNUUk86IFwibWFlc3Ryb1wiLFxuICAgIEVMTzogXCJlbG9cIixcbiAgfSxcbiAgdmlzYUNoZWNrb3V0OiB7XG4gICAgVklTQTogXCJWaXNhXCIsXG4gICAgTUFTVEVSQ0FSRDogXCJNYXN0ZXJDYXJkXCIsXG4gICAgRElTQ09WRVI6IFwiRGlzY292ZXJcIixcbiAgICBBTUVSSUNBTl9FWFBSRVNTOiBcIkFtZXJpY2FuIEV4cHJlc3NcIixcbiAgfSxcbiAgZ29vZ2xlUGF5OiB7XG4gICAgVklTQTogXCJ2aXNhXCIsXG4gICAgTUFTVEVSQ0FSRDogXCJtYXN0ZXJjYXJkXCIsXG4gICAgRElTQ09WRVI6IFwiZGlzY292ZXJcIixcbiAgICBBTUVSSUNBTl9FWFBSRVNTOiBcImFtZXhcIixcbiAgICBJTlRFUk5BVElPTkFMX01BRVNUUk86IFwibWFlc3Ryb1wiLFxuICAgIEVMTzogXCJlbG9cIixcbiAgfSxcbiAgbWFzdGVycGFzczoge1xuICAgIFZJU0E6IFwidmlzYVwiLFxuICAgIE1BU1RFUkNBUkQ6IFwibWFzdGVyXCIsXG4gICAgRElTQ09WRVI6IFwiZGlzY292ZXJcIixcbiAgICBBTUVSSUNBTl9FWFBSRVNTOiBcImFtZXhcIixcbiAgICBESU5FUlM6IFwiZGluZXJzXCIsXG4gICAgSU5URVJOQVRJT05BTF9NQUVTVFJPOiBcIm1hZXN0cm9cIixcbiAgICBKQ0I6IFwiamNiXCIsXG4gIH0sXG59O1xuLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cblxuZnVuY3Rpb24gY29uZmlndXJhdGlvblJlc3BvbnNlQWRhcHRlcihyZXNwb25zZUJvZHksIGN0eCkge1xuICB2YXIgYWRhcHRlZFJlc3BvbnNlO1xuXG4gIGlmIChyZXNwb25zZUJvZHkuZGF0YSAmJiAhcmVzcG9uc2VCb2R5LmVycm9ycykge1xuICAgIGFkYXB0ZWRSZXNwb25zZSA9IGFkYXB0Q29uZmlndXJhdGlvblJlc3BvbnNlQm9keShyZXNwb25zZUJvZHksIGN0eCk7XG4gIH0gZWxzZSB7XG4gICAgYWRhcHRlZFJlc3BvbnNlID0gZXJyb3JSZXNwb25zZUFkYXB0ZXIocmVzcG9uc2VCb2R5KTtcbiAgfVxuXG4gIHJldHVybiBhZGFwdGVkUmVzcG9uc2U7XG59XG5cbmZ1bmN0aW9uIGFkYXB0Q29uZmlndXJhdGlvblJlc3BvbnNlQm9keShib2R5LCBjdHgpIHtcbiAgdmFyIGNvbmZpZ3VyYXRpb24gPSBib2R5LmRhdGEuY2xpZW50Q29uZmlndXJhdGlvbjtcbiAgdmFyIHJlc3BvbnNlO1xuXG4gIHJlc3BvbnNlID0ge1xuICAgIGVudmlyb25tZW50OiBjb25maWd1cmF0aW9uLmVudmlyb25tZW50LnRvTG93ZXJDYXNlKCksXG4gICAgY2xpZW50QXBpVXJsOiBjb25maWd1cmF0aW9uLmNsaWVudEFwaVVybCxcbiAgICBhc3NldHNVcmw6IGNvbmZpZ3VyYXRpb24uYXNzZXRzVXJsLFxuICAgIGFuYWx5dGljczoge1xuICAgICAgdXJsOiBjb25maWd1cmF0aW9uLmFuYWx5dGljc1VybCxcbiAgICB9LFxuICAgIG1lcmNoYW50SWQ6IGNvbmZpZ3VyYXRpb24ubWVyY2hhbnRJZCxcbiAgICB2ZW5tbzogXCJvZmZcIixcbiAgfTtcblxuICBpZiAoY29uZmlndXJhdGlvbi5zdXBwb3J0ZWRGZWF0dXJlcykge1xuICAgIHJlc3BvbnNlLmdyYXBoUUwgPSB7XG4gICAgICB1cmw6IGN0eC5fZ3JhcGhRTC5fY29uZmlnLnVybCxcbiAgICAgIGZlYXR1cmVzOiBjb25maWd1cmF0aW9uLnN1cHBvcnRlZEZlYXR1cmVzLm1hcChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICByZXR1cm4gZmVhdHVyZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgfSksXG4gICAgfTtcbiAgfVxuXG4gIGlmIChjb25maWd1cmF0aW9uLmJyYWludHJlZUFwaSkge1xuICAgIHJlc3BvbnNlLmJyYWludHJlZUFwaSA9IGNvbmZpZ3VyYXRpb24uYnJhaW50cmVlQXBpO1xuICB9XG5cbiAgaWYgKGNvbmZpZ3VyYXRpb24uYXBwbGVQYXlXZWIpIHtcbiAgICByZXNwb25zZS5hcHBsZVBheVdlYiA9IGNvbmZpZ3VyYXRpb24uYXBwbGVQYXlXZWI7XG4gICAgcmVzcG9uc2UuYXBwbGVQYXlXZWIuc3VwcG9ydGVkTmV0d29ya3MgPSBtYXBDYXJkVHlwZXMoXG4gICAgICBjb25maWd1cmF0aW9uLmFwcGxlUGF5V2ViLnN1cHBvcnRlZENhcmRCcmFuZHMsXG4gICAgICBjYXJkVHlwZVRyYW5zZm9ybXMuYXBwbGVQYXlXZWJcbiAgICApO1xuXG4gICAgZGVsZXRlIHJlc3BvbnNlLmFwcGxlUGF5V2ViLnN1cHBvcnRlZENhcmRCcmFuZHM7XG4gIH1cblxuICBpZiAoY29uZmlndXJhdGlvbi5pZGVhbCkge1xuICAgIHJlc3BvbnNlLmlkZWFsID0gY29uZmlndXJhdGlvbi5pZGVhbDtcbiAgfVxuXG4gIGlmIChjb25maWd1cmF0aW9uLmtvdW50KSB7XG4gICAgcmVzcG9uc2Uua291bnQgPSB7XG4gICAgICBrb3VudE1lcmNoYW50SWQ6IGNvbmZpZ3VyYXRpb24ua291bnQubWVyY2hhbnRJZCxcbiAgICB9O1xuICB9XG5cbiAgaWYgKGNvbmZpZ3VyYXRpb24uY3JlZGl0Q2FyZCkge1xuICAgIHJlc3BvbnNlLmNoYWxsZW5nZXMgPSBjb25maWd1cmF0aW9uLmNyZWRpdENhcmQuY2hhbGxlbmdlcy5tYXAoZnVuY3Rpb24gKFxuICAgICAgY2hhbGxlbmdlXG4gICAgKSB7XG4gICAgICByZXR1cm4gY2hhbGxlbmdlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICByZXNwb25zZS5jcmVkaXRDYXJkcyA9IHtcbiAgICAgIHN1cHBvcnRlZENhcmRUeXBlczogbWFwQ2FyZFR5cGVzKFxuICAgICAgICBjb25maWd1cmF0aW9uLmNyZWRpdENhcmQuc3VwcG9ydGVkQ2FyZEJyYW5kcyxcbiAgICAgICAgY2FyZFR5cGVUcmFuc2Zvcm1zLmNyZWRpdENhcmRcbiAgICAgICksXG4gICAgfTtcbiAgICByZXNwb25zZS50aHJlZURTZWN1cmVFbmFibGVkID0gY29uZmlndXJhdGlvbi5jcmVkaXRDYXJkLnRocmVlRFNlY3VyZUVuYWJsZWQ7XG4gICAgcmVzcG9uc2UudGhyZWVEU2VjdXJlID0gY29uZmlndXJhdGlvbi5jcmVkaXRDYXJkLnRocmVlRFNlY3VyZTtcbiAgfSBlbHNlIHtcbiAgICByZXNwb25zZS5jaGFsbGVuZ2VzID0gW107XG4gICAgcmVzcG9uc2UuY3JlZGl0Q2FyZHMgPSB7XG4gICAgICBzdXBwb3J0ZWRDYXJkVHlwZXM6IFtdLFxuICAgIH07XG4gICAgcmVzcG9uc2UudGhyZWVEU2VjdXJlRW5hYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGNvbmZpZ3VyYXRpb24uZ29vZ2xlUGF5KSB7XG4gICAgcmVzcG9uc2UuYW5kcm9pZFBheSA9IHtcbiAgICAgIGRpc3BsYXlOYW1lOiBjb25maWd1cmF0aW9uLmdvb2dsZVBheS5kaXNwbGF5TmFtZSxcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBlbnZpcm9ubWVudDogY29uZmlndXJhdGlvbi5nb29nbGVQYXkuZW52aXJvbm1lbnQudG9Mb3dlckNhc2UoKSxcbiAgICAgIGdvb2dsZUF1dGhvcml6YXRpb25GaW5nZXJwcmludDpcbiAgICAgICAgY29uZmlndXJhdGlvbi5nb29nbGVQYXkuZ29vZ2xlQXV0aG9yaXphdGlvbixcbiAgICAgIHBheXBhbENsaWVudElkOiBjb25maWd1cmF0aW9uLmdvb2dsZVBheS5wYXlwYWxDbGllbnRJZCxcbiAgICAgIHN1cHBvcnRlZE5ldHdvcmtzOiBtYXBDYXJkVHlwZXMoXG4gICAgICAgIGNvbmZpZ3VyYXRpb24uZ29vZ2xlUGF5LnN1cHBvcnRlZENhcmRCcmFuZHMsXG4gICAgICAgIGNhcmRUeXBlVHJhbnNmb3Jtcy5nb29nbGVQYXlcbiAgICAgICksXG4gICAgfTtcbiAgfVxuXG4gIGlmIChjb25maWd1cmF0aW9uLnZlbm1vKSB7XG4gICAgcmVzcG9uc2UucGF5V2l0aFZlbm1vID0ge1xuICAgICAgbWVyY2hhbnRJZDogY29uZmlndXJhdGlvbi52ZW5tby5tZXJjaGFudElkLFxuICAgICAgYWNjZXNzVG9rZW46IGNvbmZpZ3VyYXRpb24udmVubW8uYWNjZXNzVG9rZW4sXG4gICAgICBlbnZpcm9ubWVudDogY29uZmlndXJhdGlvbi52ZW5tby5lbnZpcm9ubWVudC50b0xvd2VyQ2FzZSgpLFxuICAgICAgZW5yaWNoZWRDdXN0b21lckRhdGFFbmFibGVkOlxuICAgICAgICBjb25maWd1cmF0aW9uLnZlbm1vLmVucmljaGVkQ3VzdG9tZXJEYXRhRW5hYmxlZCxcbiAgICB9O1xuICB9XG5cbiAgaWYgKGNvbmZpZ3VyYXRpb24ucGF5cGFsKSB7XG4gICAgcmVzcG9uc2UucGF5cGFsRW5hYmxlZCA9IHRydWU7XG4gICAgcmVzcG9uc2UucGF5cGFsID0gYXNzaWduKHt9LCBjb25maWd1cmF0aW9uLnBheXBhbCk7XG4gICAgcmVzcG9uc2UucGF5cGFsLmN1cnJlbmN5SXNvQ29kZSA9IHJlc3BvbnNlLnBheXBhbC5jdXJyZW5jeUNvZGU7XG4gICAgcmVzcG9uc2UucGF5cGFsLmVudmlyb25tZW50ID0gcmVzcG9uc2UucGF5cGFsLmVudmlyb25tZW50LnRvTG93ZXJDYXNlKCk7XG5cbiAgICBkZWxldGUgcmVzcG9uc2UucGF5cGFsLmN1cnJlbmN5Q29kZTtcbiAgfSBlbHNlIHtcbiAgICByZXNwb25zZS5wYXlwYWxFbmFibGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAoY29uZmlndXJhdGlvbi51bmlvblBheSkge1xuICAgIHJlc3BvbnNlLnVuaW9uUGF5ID0ge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG1lcmNoYW50QWNjb3VudElkOiBjb25maWd1cmF0aW9uLnVuaW9uUGF5Lm1lcmNoYW50QWNjb3VudElkLFxuICAgIH07XG4gIH1cblxuICBpZiAoY29uZmlndXJhdGlvbi52aXNhQ2hlY2tvdXQpIHtcbiAgICByZXNwb25zZS52aXNhQ2hlY2tvdXQgPSB7XG4gICAgICBhcGlrZXk6IGNvbmZpZ3VyYXRpb24udmlzYUNoZWNrb3V0LmFwaUtleSxcbiAgICAgIGVuY3J5cHRpb25LZXk6IGNvbmZpZ3VyYXRpb24udmlzYUNoZWNrb3V0LmVuY3J5cHRpb25LZXksXG4gICAgICBleHRlcm5hbENsaWVudElkOiBjb25maWd1cmF0aW9uLnZpc2FDaGVja291dC5leHRlcm5hbENsaWVudElkLFxuICAgICAgc3VwcG9ydGVkQ2FyZFR5cGVzOiBtYXBDYXJkVHlwZXMoXG4gICAgICAgIGNvbmZpZ3VyYXRpb24udmlzYUNoZWNrb3V0LnN1cHBvcnRlZENhcmRCcmFuZHMsXG4gICAgICAgIGNhcmRUeXBlVHJhbnNmb3Jtcy52aXNhQ2hlY2tvdXRcbiAgICAgICksXG4gICAgfTtcbiAgfVxuXG4gIGlmIChjb25maWd1cmF0aW9uLm1hc3RlcnBhc3MpIHtcbiAgICByZXNwb25zZS5tYXN0ZXJwYXNzID0ge1xuICAgICAgbWVyY2hhbnRDaGVja291dElkOiBjb25maWd1cmF0aW9uLm1hc3RlcnBhc3MubWVyY2hhbnRDaGVja291dElkLFxuICAgICAgc3VwcG9ydGVkTmV0d29ya3M6IG1hcENhcmRUeXBlcyhcbiAgICAgICAgY29uZmlndXJhdGlvbi5tYXN0ZXJwYXNzLnN1cHBvcnRlZENhcmRCcmFuZHMsXG4gICAgICAgIGNhcmRUeXBlVHJhbnNmb3Jtcy5tYXN0ZXJwYXNzXG4gICAgICApLFxuICAgIH07XG4gIH1cblxuICBpZiAoY29uZmlndXJhdGlvbi51c0JhbmtBY2NvdW50KSB7XG4gICAgcmVzcG9uc2UudXNCYW5rQWNjb3VudCA9IHtcbiAgICAgIHJvdXRlSWQ6IGNvbmZpZ3VyYXRpb24udXNCYW5rQWNjb3VudC5yb3V0ZUlkLFxuICAgICAgcGxhaWQ6IHtcbiAgICAgICAgcHVibGljS2V5OiBjb25maWd1cmF0aW9uLnVzQmFua0FjY291bnQucGxhaWRQdWJsaWNLZXksXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmZ1bmN0aW9uIG1hcENhcmRUeXBlcyhjYXJkVHlwZXMsIGNhcmRUeXBlVHJhbnNmb3JtTWFwKSB7XG4gIHJldHVybiBjYXJkVHlwZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHR5cGUpIHtcbiAgICBpZiAoY2FyZFR5cGVUcmFuc2Zvcm1NYXAuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgIHJldHVybiBhY2MuY29uY2F0KGNhcmRUeXBlVHJhbnNmb3JtTWFwW3R5cGVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uZmlndXJhdGlvblJlc3BvbnNlQWRhcHRlcjtcblxufSx7XCIuLi8uLi8uLi8uLi9saWIvYXNzaWduXCI6MTIxLFwiLi9lcnJvclwiOjg3fV0sODY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlcnJvclJlc3BvbnNlQWRhcHRlciA9IF9kZXJlcV8oXCIuL2Vycm9yXCIpO1xuXG52YXIgQ0FSRF9CUkFORF9NQVAgPSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuICBBTUVSSUNBTl9FWFBSRVNTOiBcIkFtZXJpY2FuIEV4cHJlc3NcIixcbiAgRElORVJTOiBcIkRpc2NvdmVyXCIsXG4gIERJU0NPVkVSOiBcIkRpc2NvdmVyXCIsXG4gIEVMTzogXCJFbG9cIixcbiAgSElQRVI6IFwiSGlwZXJcIixcbiAgSElQRVJDQVJEOiBcIkhpcGVyY2FyZFwiLFxuICBJTlRFUk5BVElPTkFMX01BRVNUUk86IFwiTWFlc3Ryb1wiLFxuICBKQ0I6IFwiSkNCXCIsXG4gIE1BU1RFUkNBUkQ6IFwiTWFzdGVyQ2FyZFwiLFxuICBVS19NQUVTVFJPOiBcIk1hZXN0cm9cIixcbiAgVU5JT05fUEFZOiBcIlVuaW9uUGF5XCIsXG4gIFZJU0E6IFwiVmlzYVwiLFxuICAvKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xufTtcblxudmFyIEJJTl9EQVRBX01BUCA9IHtcbiAgWUVTOiBcIlllc1wiLFxuICBOTzogXCJOb1wiLFxuICBVTktOT1dOOiBcIlVua25vd25cIixcbn07XG5cbnZhciBBVVRIRU5USUNBVElPTl9JTlNJR0hUX01BUCA9IHtcbiAgUFNEVFdPOiBcInBzZDJcIixcbn07XG5cbmZ1bmN0aW9uIGNyZWRpdENhcmRUb2tlbml6YXRpb25SZXNwb25zZUFkYXB0ZXIocmVzcG9uc2VCb2R5KSB7XG4gIHZhciBhZGFwdGVkUmVzcG9uc2U7XG5cbiAgaWYgKHJlc3BvbnNlQm9keS5kYXRhICYmICFyZXNwb25zZUJvZHkuZXJyb3JzKSB7XG4gICAgYWRhcHRlZFJlc3BvbnNlID0gYWRhcHRUb2tlbml6ZUNyZWRpdENhcmRSZXNwb25zZUJvZHkocmVzcG9uc2VCb2R5KTtcbiAgfSBlbHNlIHtcbiAgICBhZGFwdGVkUmVzcG9uc2UgPSBlcnJvclJlc3BvbnNlQWRhcHRlcihyZXNwb25zZUJvZHkpO1xuICB9XG5cbiAgcmV0dXJuIGFkYXB0ZWRSZXNwb25zZTtcbn1cblxuZnVuY3Rpb24gYWRhcHRUb2tlbml6ZUNyZWRpdENhcmRSZXNwb25zZUJvZHkoYm9keSkge1xuICB2YXIgZGF0YSA9IGJvZHkuZGF0YS50b2tlbml6ZUNyZWRpdENhcmQ7XG4gIHZhciBjcmVkaXRDYXJkID0gZGF0YS5jcmVkaXRDYXJkO1xuICB2YXIgbGFzdFR3byA9IGNyZWRpdENhcmQubGFzdDQgPyBjcmVkaXRDYXJkLmxhc3Q0LnN1YnN0cigyLCA0KSA6IFwiXCI7XG4gIHZhciBiaW5EYXRhID0gY3JlZGl0Q2FyZC5iaW5EYXRhO1xuICB2YXIgcmVzcG9uc2UsIHJlZ3VsYXRpb25FbnZpcm9ubWVudDtcblxuICBpZiAoYmluRGF0YSkge1xuICAgIFtcbiAgICAgIFwiY29tbWVyY2lhbFwiLFxuICAgICAgXCJkZWJpdFwiLFxuICAgICAgXCJkdXJiaW5SZWd1bGF0ZWRcIixcbiAgICAgIFwiaGVhbHRoY2FyZVwiLFxuICAgICAgXCJwYXlyb2xsXCIsXG4gICAgICBcInByZXBhaWRcIixcbiAgICBdLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGJpbkRhdGFba2V5XSkge1xuICAgICAgICBiaW5EYXRhW2tleV0gPSBCSU5fREFUQV9NQVBbYmluRGF0YVtrZXldXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbkRhdGFba2V5XSA9IFwiVW5rbm93blwiO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgW1wiaXNzdWluZ0JhbmtcIiwgXCJjb3VudHJ5T2ZJc3N1YW5jZVwiLCBcInByb2R1Y3RJZFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICghYmluRGF0YVtrZXldKSB7XG4gICAgICAgIGJpbkRhdGFba2V5XSA9IFwiVW5rbm93blwiO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmVzcG9uc2UgPSB7XG4gICAgY3JlZGl0Q2FyZHM6IFtcbiAgICAgIHtcbiAgICAgICAgYmluRGF0YTogYmluRGF0YSxcbiAgICAgICAgY29uc3VtZWQ6IGZhbHNlLFxuICAgICAgICBkZXNjcmlwdGlvbjogbGFzdFR3byA/IFwiZW5kaW5nIGluIFwiICsgbGFzdFR3byA6IFwiXCIsXG4gICAgICAgIG5vbmNlOiBkYXRhLnRva2VuLFxuICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgY2FyZGhvbGRlck5hbWU6IGNyZWRpdENhcmQuY2FyZGhvbGRlck5hbWUsXG4gICAgICAgICAgZXhwaXJhdGlvbk1vbnRoOiBjcmVkaXRDYXJkLmV4cGlyYXRpb25Nb250aCxcbiAgICAgICAgICBleHBpcmF0aW9uWWVhcjogY3JlZGl0Q2FyZC5leHBpcmF0aW9uWWVhcixcbiAgICAgICAgICBiaW46IGNyZWRpdENhcmQuYmluIHx8IFwiXCIsXG4gICAgICAgICAgY2FyZFR5cGU6IENBUkRfQlJBTkRfTUFQW2NyZWRpdENhcmQuYnJhbmRDb2RlXSB8fCBcIlVua25vd25cIixcbiAgICAgICAgICBsYXN0Rm91cjogY3JlZGl0Q2FyZC5sYXN0NCB8fCBcIlwiLFxuICAgICAgICAgIGxhc3RUd286IGxhc3RUd28sXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IFwiQ3JlZGl0Q2FyZFwiLFxuICAgICAgICB0aHJlZURTZWN1cmVJbmZvOiBudWxsLFxuICAgICAgfSxcbiAgICBdLFxuICB9O1xuXG4gIGlmIChkYXRhLmF1dGhlbnRpY2F0aW9uSW5zaWdodCkge1xuICAgIHJlZ3VsYXRpb25FbnZpcm9ubWVudCA9XG4gICAgICBkYXRhLmF1dGhlbnRpY2F0aW9uSW5zaWdodC5jdXN0b21lckF1dGhlbnRpY2F0aW9uUmVndWxhdGlvbkVudmlyb25tZW50O1xuICAgIHJlc3BvbnNlLmNyZWRpdENhcmRzWzBdLmF1dGhlbnRpY2F0aW9uSW5zaWdodCA9IHtcbiAgICAgIHJlZ3VsYXRpb25FbnZpcm9ubWVudDpcbiAgICAgICAgQVVUSEVOVElDQVRJT05fSU5TSUdIVF9NQVBbcmVndWxhdGlvbkVudmlyb25tZW50XSB8fFxuICAgICAgICByZWd1bGF0aW9uRW52aXJvbm1lbnQudG9Mb3dlckNhc2UoKSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWRpdENhcmRUb2tlbml6YXRpb25SZXNwb25zZUFkYXB0ZXI7XG5cbn0se1wiLi9lcnJvclwiOjg3fV0sODc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGVycm9yUmVzcG9uc2VBZGFwdGVyKHJlc3BvbnNlQm9keSkge1xuICB2YXIgcmVzcG9uc2U7XG4gIHZhciBlcnJvckNsYXNzID1cbiAgICByZXNwb25zZUJvZHkuZXJyb3JzICYmXG4gICAgcmVzcG9uc2VCb2R5LmVycm9yc1swXSAmJlxuICAgIHJlc3BvbnNlQm9keS5lcnJvcnNbMF0uZXh0ZW5zaW9ucyAmJlxuICAgIHJlc3BvbnNlQm9keS5lcnJvcnNbMF0uZXh0ZW5zaW9ucy5lcnJvckNsYXNzO1xuXG4gIGlmIChlcnJvckNsYXNzID09PSBcIlZBTElEQVRJT05cIikge1xuICAgIHJlc3BvbnNlID0gdXNlckVycm9yUmVzcG9uc2VBZGFwdGVyKHJlc3BvbnNlQm9keSk7XG4gIH0gZWxzZSBpZiAoZXJyb3JDbGFzcykge1xuICAgIHJlc3BvbnNlID0gZXJyb3JXaXRoQ2xhc3NSZXNwb25zZUFkYXB0ZXIocmVzcG9uc2VCb2R5KTtcbiAgfSBlbHNlIHtcbiAgICByZXNwb25zZSA9IHtcbiAgICAgIGVycm9yOiB7IG1lc3NhZ2U6IFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBzZXJ2aW5nIHlvdXIgcmVxdWVzdFwiIH0sXG4gICAgICBmaWVsZEVycm9yczogW10sXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiByZXNwb25zZTtcbn1cblxuZnVuY3Rpb24gZXJyb3JXaXRoQ2xhc3NSZXNwb25zZUFkYXB0ZXIocmVzcG9uc2VCb2R5KSB7XG4gIHJldHVybiB7XG4gICAgZXJyb3I6IHsgbWVzc2FnZTogcmVzcG9uc2VCb2R5LmVycm9yc1swXS5tZXNzYWdlIH0sXG4gICAgZmllbGRFcnJvcnM6IFtdLFxuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VyRXJyb3JSZXNwb25zZUFkYXB0ZXIocmVzcG9uc2VCb2R5KSB7XG4gIHZhciBmaWVsZEVycm9ycyA9IGJ1aWxkRmllbGRFcnJvcnMocmVzcG9uc2VCb2R5LmVycm9ycyk7XG5cbiAgaWYgKGZpZWxkRXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB7IGVycm9yOiB7IG1lc3NhZ2U6IHJlc3BvbnNlQm9keS5lcnJvcnNbMF0ubWVzc2FnZSB9IH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVycm9yOiB7IG1lc3NhZ2U6IGdldExlZ2FjeU1lc3NhZ2UoZmllbGRFcnJvcnMpIH0sXG4gICAgZmllbGRFcnJvcnM6IGZpZWxkRXJyb3JzLFxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZEZpZWxkRXJyb3JzKGVycm9ycykge1xuICB2YXIgZmllbGRFcnJvcnMgPSBbXTtcblxuICBlcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBpZiAoIShlcnJvci5leHRlbnNpb25zICYmIGVycm9yLmV4dGVuc2lvbnMuaW5wdXRQYXRoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhZGRGaWVsZEVycm9yKGVycm9yLmV4dGVuc2lvbnMuaW5wdXRQYXRoLnNsaWNlKDEpLCBlcnJvciwgZmllbGRFcnJvcnMpO1xuICB9KTtcblxuICByZXR1cm4gZmllbGRFcnJvcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEZpZWxkRXJyb3IoaW5wdXRQYXRoLCBlcnJvckRldGFpbCwgZmllbGRFcnJvcnMpIHtcbiAgdmFyIGZpZWxkRXJyb3I7XG4gIHZhciBsZWdhY3lDb2RlID0gZXJyb3JEZXRhaWwuZXh0ZW5zaW9ucy5sZWdhY3lDb2RlO1xuICB2YXIgaW5wdXRGaWVsZCA9IGlucHV0UGF0aFswXTtcblxuICBpZiAoaW5wdXRQYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGZpZWxkRXJyb3JzLnB1c2goe1xuICAgICAgY29kZTogbGVnYWN5Q29kZSxcbiAgICAgIGZpZWxkOiBpbnB1dEZpZWxkLFxuICAgICAgbWVzc2FnZTogZXJyb3JEZXRhaWwubWVzc2FnZSxcbiAgICB9KTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGZpZWxkRXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGNhbmRpZGF0ZSkge1xuICAgIGlmIChjYW5kaWRhdGUuZmllbGQgPT09IGlucHV0RmllbGQpIHtcbiAgICAgIGZpZWxkRXJyb3IgPSBjYW5kaWRhdGU7XG4gICAgfVxuICB9KTtcblxuICBpZiAoIWZpZWxkRXJyb3IpIHtcbiAgICBmaWVsZEVycm9yID0geyBmaWVsZDogaW5wdXRGaWVsZCwgZmllbGRFcnJvcnM6IFtdIH07XG4gICAgZmllbGRFcnJvcnMucHVzaChmaWVsZEVycm9yKTtcbiAgfVxuXG4gIGFkZEZpZWxkRXJyb3IoaW5wdXRQYXRoLnNsaWNlKDEpLCBlcnJvckRldGFpbCwgZmllbGRFcnJvci5maWVsZEVycm9ycyk7XG59XG5cbmZ1bmN0aW9uIGdldExlZ2FjeU1lc3NhZ2UoZXJyb3JzKSB7XG4gIHZhciBsZWdhY3lNZXNzYWdlcyA9IHtcbiAgICBjcmVkaXRDYXJkOiBcIkNyZWRpdCBjYXJkIGlzIGludmFsaWRcIixcbiAgfTtcblxuICB2YXIgZmllbGQgPSBlcnJvcnNbMF0uZmllbGQ7XG5cbiAgcmV0dXJuIGxlZ2FjeU1lc3NhZ2VzW2ZpZWxkXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcnJvclJlc3BvbnNlQWRhcHRlcjtcblxufSx7fV0sODg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBDT05GSUdVUkFUSU9OX1FVRVJZID1cbiAgXCJxdWVyeSBDbGllbnRDb25maWd1cmF0aW9uIHsgXCIgK1xuICBcIiAgY2xpZW50Q29uZmlndXJhdGlvbiB7IFwiICtcbiAgXCIgICAgYW5hbHl0aWNzVXJsIFwiICtcbiAgXCIgICAgZW52aXJvbm1lbnQgXCIgK1xuICBcIiAgICBtZXJjaGFudElkIFwiICtcbiAgXCIgICAgYXNzZXRzVXJsIFwiICtcbiAgXCIgICAgY2xpZW50QXBpVXJsIFwiICtcbiAgXCIgICAgY3JlZGl0Q2FyZCB7IFwiICtcbiAgXCIgICAgICBzdXBwb3J0ZWRDYXJkQnJhbmRzIFwiICtcbiAgXCIgICAgICBjaGFsbGVuZ2VzIFwiICtcbiAgXCIgICAgICB0aHJlZURTZWN1cmVFbmFibGVkIFwiICtcbiAgXCIgICAgICB0aHJlZURTZWN1cmUgeyBcIiArXG4gIFwiICAgICAgICBjYXJkaW5hbEF1dGhlbnRpY2F0aW9uSldUIFwiICtcbiAgXCIgICAgICB9IFwiICtcbiAgXCIgICAgfSBcIiArXG4gIFwiICAgIGFwcGxlUGF5V2ViIHsgXCIgK1xuICBcIiAgICAgIGNvdW50cnlDb2RlIFwiICtcbiAgXCIgICAgICBjdXJyZW5jeUNvZGUgXCIgK1xuICBcIiAgICAgIG1lcmNoYW50SWRlbnRpZmllciBcIiArXG4gIFwiICAgICAgc3VwcG9ydGVkQ2FyZEJyYW5kcyBcIiArXG4gIFwiICAgIH0gXCIgK1xuICBcIiAgICBnb29nbGVQYXkgeyBcIiArXG4gIFwiICAgICAgZGlzcGxheU5hbWUgXCIgK1xuICBcIiAgICAgIHN1cHBvcnRlZENhcmRCcmFuZHMgXCIgK1xuICBcIiAgICAgIGVudmlyb25tZW50IFwiICtcbiAgXCIgICAgICBnb29nbGVBdXRob3JpemF0aW9uIFwiICtcbiAgXCIgICAgICBwYXlwYWxDbGllbnRJZCBcIiArXG4gIFwiICAgIH0gXCIgK1xuICBcIiAgICBpZGVhbCB7IFwiICtcbiAgXCIgICAgICByb3V0ZUlkIFwiICtcbiAgXCIgICAgICBhc3NldHNVcmwgXCIgK1xuICBcIiAgICB9IFwiICtcbiAgXCIgICAga291bnQgeyBcIiArXG4gIFwiICAgICAgbWVyY2hhbnRJZCBcIiArXG4gIFwiICAgIH0gXCIgK1xuICBcIiAgICBtYXN0ZXJwYXNzIHsgXCIgK1xuICBcIiAgICAgIG1lcmNoYW50Q2hlY2tvdXRJZCBcIiArXG4gIFwiICAgICAgc3VwcG9ydGVkQ2FyZEJyYW5kcyBcIiArXG4gIFwiICAgIH0gXCIgK1xuICBcIiAgICBwYXlwYWwgeyBcIiArXG4gIFwiICAgICAgZGlzcGxheU5hbWUgXCIgK1xuICBcIiAgICAgIGNsaWVudElkIFwiICtcbiAgXCIgICAgICBhc3NldHNVcmwgXCIgK1xuICBcIiAgICAgIGVudmlyb25tZW50IFwiICtcbiAgXCIgICAgICBlbnZpcm9ubWVudE5vTmV0d29yayBcIiArXG4gIFwiICAgICAgdW52ZXR0ZWRNZXJjaGFudCBcIiArXG4gIFwiICAgICAgYnJhaW50cmVlQ2xpZW50SWQgXCIgK1xuICBcIiAgICAgIGJpbGxpbmdBZ3JlZW1lbnRzRW5hYmxlZCBcIiArXG4gIFwiICAgICAgbWVyY2hhbnRBY2NvdW50SWQgXCIgK1xuICBcIiAgICAgIGN1cnJlbmN5Q29kZSBcIiArXG4gIFwiICAgICAgcGF5ZWVFbWFpbCBcIiArXG4gIFwiICAgIH0gXCIgK1xuICBcIiAgICB1bmlvblBheSB7IFwiICtcbiAgXCIgICAgICBtZXJjaGFudEFjY291bnRJZCBcIiArXG4gIFwiICAgIH0gXCIgK1xuICBcIiAgICB1c0JhbmtBY2NvdW50IHsgXCIgK1xuICBcIiAgICAgIHJvdXRlSWQgXCIgK1xuICBcIiAgICAgIHBsYWlkUHVibGljS2V5IFwiICtcbiAgXCIgICAgfSBcIiArXG4gIFwiICAgIHZlbm1vIHsgXCIgK1xuICBcIiAgICAgIG1lcmNoYW50SWQgXCIgK1xuICBcIiAgICAgIGFjY2Vzc1Rva2VuIFwiICtcbiAgXCIgICAgICBlbnZpcm9ubWVudCBcIiArXG4gIFwiICAgICAgZW5yaWNoZWRDdXN0b21lckRhdGFFbmFibGVkXCIgK1xuICBcIiAgICB9IFwiICtcbiAgXCIgICAgdmlzYUNoZWNrb3V0IHsgXCIgK1xuICBcIiAgICAgIGFwaUtleSBcIiArXG4gIFwiICAgICAgZXh0ZXJuYWxDbGllbnRJZCBcIiArXG4gIFwiICAgICAgc3VwcG9ydGVkQ2FyZEJyYW5kcyBcIiArXG4gIFwiICAgIH0gXCIgK1xuICBcIiAgICBicmFpbnRyZWVBcGkgeyBcIiArXG4gIFwiICAgICAgYWNjZXNzVG9rZW4gXCIgK1xuICBcIiAgICAgIHVybCBcIiArXG4gIFwiICAgIH0gXCIgK1xuICBcIiAgICBzdXBwb3J0ZWRGZWF0dXJlcyBcIiArXG4gIFwiICB9IFwiICtcbiAgXCJ9XCI7XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyYXRpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcXVlcnk6IENPTkZJR1VSQVRJT05fUVVFUlksXG4gICAgb3BlcmF0aW9uTmFtZTogXCJDbGllbnRDb25maWd1cmF0aW9uXCIsXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uZmlndXJhdGlvbjtcblxufSx7fV0sODk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhc3NpZ24gPSBfZGVyZXFfKFwiLi4vLi4vLi4vLi4vbGliL2Fzc2lnblwiKS5hc3NpZ247XG5cbmZ1bmN0aW9uIGNyZWF0ZU11dGF0aW9uKGNvbmZpZykge1xuICB2YXIgaGFzQXV0aGVudGljYXRpb25JbnNpZ2h0ID0gY29uZmlnLmhhc0F1dGhlbnRpY2F0aW9uSW5zaWdodDtcbiAgdmFyIG11dGF0aW9uID0gXCJtdXRhdGlvbiBUb2tlbml6ZUNyZWRpdENhcmQoJGlucHV0OiBUb2tlbml6ZUNyZWRpdENhcmRJbnB1dCFcIjtcblxuICBpZiAoaGFzQXV0aGVudGljYXRpb25JbnNpZ2h0KSB7XG4gICAgbXV0YXRpb24gKz0gXCIsICRhdXRoZW50aWNhdGlvbkluc2lnaHRJbnB1dDogQXV0aGVudGljYXRpb25JbnNpZ2h0SW5wdXQhXCI7XG4gIH1cblxuICBtdXRhdGlvbiArPVxuICAgIFwiKSB7IFwiICtcbiAgICBcIiAgdG9rZW5pemVDcmVkaXRDYXJkKGlucHV0OiAkaW5wdXQpIHsgXCIgK1xuICAgIFwiICAgIHRva2VuIFwiICtcbiAgICBcIiAgICBjcmVkaXRDYXJkIHsgXCIgK1xuICAgIFwiICAgICAgYmluIFwiICtcbiAgICBcIiAgICAgIGJyYW5kQ29kZSBcIiArXG4gICAgXCIgICAgICBsYXN0NCBcIiArXG4gICAgXCIgICAgICBjYXJkaG9sZGVyTmFtZSBcIiArXG4gICAgXCIgICAgICBleHBpcmF0aW9uTW9udGhcIiArXG4gICAgXCIgICAgICBleHBpcmF0aW9uWWVhclwiICtcbiAgICBcIiAgICAgIGJpbkRhdGEgeyBcIiArXG4gICAgXCIgICAgICAgIHByZXBhaWQgXCIgK1xuICAgIFwiICAgICAgICBoZWFsdGhjYXJlIFwiICtcbiAgICBcIiAgICAgICAgZGViaXQgXCIgK1xuICAgIFwiICAgICAgICBkdXJiaW5SZWd1bGF0ZWQgXCIgK1xuICAgIFwiICAgICAgICBjb21tZXJjaWFsIFwiICtcbiAgICBcIiAgICAgICAgcGF5cm9sbCBcIiArXG4gICAgXCIgICAgICAgIGlzc3VpbmdCYW5rIFwiICtcbiAgICBcIiAgICAgICAgY291bnRyeU9mSXNzdWFuY2UgXCIgK1xuICAgIFwiICAgICAgICBwcm9kdWN0SWQgXCIgK1xuICAgIFwiICAgICAgfSBcIiArXG4gICAgXCIgICAgfSBcIjtcblxuICBpZiAoaGFzQXV0aGVudGljYXRpb25JbnNpZ2h0KSB7XG4gICAgbXV0YXRpb24gKz1cbiAgICAgIFwiICAgIGF1dGhlbnRpY2F0aW9uSW5zaWdodChpbnB1dDogJGF1dGhlbnRpY2F0aW9uSW5zaWdodElucHV0KSB7XCIgK1xuICAgICAgXCIgICAgICBjdXN0b21lckF1dGhlbnRpY2F0aW9uUmVndWxhdGlvbkVudmlyb25tZW50XCIgK1xuICAgICAgXCIgICAgfVwiO1xuICB9XG5cbiAgbXV0YXRpb24gKz0gXCIgIH0gfVwiO1xuXG4gIHJldHVybiBtdXRhdGlvbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ3JlZGl0Q2FyZFRva2VuaXphdGlvbkJvZHkoYm9keSwgb3B0aW9ucykge1xuICB2YXIgY2MgPSBib2R5LmNyZWRpdENhcmQ7XG4gIHZhciBiaWxsaW5nQWRkcmVzcyA9IGNjICYmIGNjLmJpbGxpbmdBZGRyZXNzO1xuICB2YXIgZXhwRGF0ZSA9IGNjICYmIGNjLmV4cGlyYXRpb25EYXRlO1xuICB2YXIgZXhwaXJhdGlvbk1vbnRoID1cbiAgICBjYyAmJiAoY2MuZXhwaXJhdGlvbk1vbnRoIHx8IChleHBEYXRlICYmIGV4cERhdGUuc3BsaXQoXCIvXCIpWzBdLnRyaW0oKSkpO1xuICB2YXIgZXhwaXJhdGlvblllYXIgPVxuICAgIGNjICYmIChjYy5leHBpcmF0aW9uWWVhciB8fCAoZXhwRGF0ZSAmJiBleHBEYXRlLnNwbGl0KFwiL1wiKVsxXS50cmltKCkpKTtcbiAgdmFyIHZhcmlhYmxlcyA9IHtcbiAgICBpbnB1dDoge1xuICAgICAgY3JlZGl0Q2FyZDoge1xuICAgICAgICBudW1iZXI6IGNjICYmIGNjLm51bWJlcixcbiAgICAgICAgZXhwaXJhdGlvbk1vbnRoOiBleHBpcmF0aW9uTW9udGgsXG4gICAgICAgIGV4cGlyYXRpb25ZZWFyOiBleHBpcmF0aW9uWWVhcixcbiAgICAgICAgY3Z2OiBjYyAmJiBjYy5jdnYsXG4gICAgICAgIGNhcmRob2xkZXJOYW1lOiBjYyAmJiBjYy5jYXJkaG9sZGVyTmFtZSxcbiAgICAgIH0sXG4gICAgICBvcHRpb25zOiB7fSxcbiAgICB9LFxuICB9O1xuXG4gIGlmIChvcHRpb25zLmhhc0F1dGhlbnRpY2F0aW9uSW5zaWdodCkge1xuICAgIHZhcmlhYmxlcy5hdXRoZW50aWNhdGlvbkluc2lnaHRJbnB1dCA9IHtcbiAgICAgIG1lcmNoYW50QWNjb3VudElkOiBib2R5Lm1lcmNoYW50QWNjb3VudElkLFxuICAgIH07XG4gIH1cblxuICBpZiAoYmlsbGluZ0FkZHJlc3MpIHtcbiAgICB2YXJpYWJsZXMuaW5wdXQuY3JlZGl0Q2FyZC5iaWxsaW5nQWRkcmVzcyA9IGJpbGxpbmdBZGRyZXNzO1xuICB9XG5cbiAgdmFyaWFibGVzLmlucHV0ID0gYWRkVmFsaWRhdGlvblJ1bGUoYm9keSwgdmFyaWFibGVzLmlucHV0KTtcblxuICByZXR1cm4gdmFyaWFibGVzO1xufVxuXG5mdW5jdGlvbiBhZGRWYWxpZGF0aW9uUnVsZShib2R5LCBpbnB1dCkge1xuICB2YXIgdmFsaWRhdGU7XG5cbiAgaWYgKFxuICAgIGJvZHkuY3JlZGl0Q2FyZCAmJlxuICAgIGJvZHkuY3JlZGl0Q2FyZC5vcHRpb25zICYmXG4gICAgdHlwZW9mIGJvZHkuY3JlZGl0Q2FyZC5vcHRpb25zLnZhbGlkYXRlID09PSBcImJvb2xlYW5cIlxuICApIHtcbiAgICB2YWxpZGF0ZSA9IGJvZHkuY3JlZGl0Q2FyZC5vcHRpb25zLnZhbGlkYXRlO1xuICB9IGVsc2UgaWYgKFxuICAgIChib2R5LmF1dGhvcml6YXRpb25GaW5nZXJwcmludCAmJiBib2R5LnRva2VuaXphdGlvbktleSkgfHxcbiAgICBib2R5LmF1dGhvcml6YXRpb25GaW5nZXJwcmludFxuICApIHtcbiAgICB2YWxpZGF0ZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAoYm9keS50b2tlbml6YXRpb25LZXkpIHtcbiAgICB2YWxpZGF0ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWxpZGF0ZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICBpbnB1dC5vcHRpb25zID0gYXNzaWduKFxuICAgICAge1xuICAgICAgICB2YWxpZGF0ZTogdmFsaWRhdGUsXG4gICAgICB9LFxuICAgICAgaW5wdXQub3B0aW9uc1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gaW5wdXQ7XG59XG5cbmZ1bmN0aW9uIGNyZWRpdENhcmRUb2tlbml6YXRpb24oYm9keSkge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBoYXNBdXRoZW50aWNhdGlvbkluc2lnaHQ6IEJvb2xlYW4oXG4gICAgICBib2R5LmF1dGhlbnRpY2F0aW9uSW5zaWdodCAmJiBib2R5Lm1lcmNoYW50QWNjb3VudElkXG4gICAgKSxcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHF1ZXJ5OiBjcmVhdGVNdXRhdGlvbihvcHRpb25zKSxcbiAgICB2YXJpYWJsZXM6IGNyZWF0ZUNyZWRpdENhcmRUb2tlbml6YXRpb25Cb2R5KGJvZHksIG9wdGlvbnMpLFxuICAgIG9wZXJhdGlvbk5hbWU6IFwiVG9rZW5pemVDcmVkaXRDYXJkXCIsXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlZGl0Q2FyZFRva2VuaXphdGlvbjtcblxufSx7XCIuLi8uLi8uLi8uLi9saWIvYXNzaWduXCI6MTIxfV0sOTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmZWF0dXJlcyA9IHtcbiAgdG9rZW5pemVfY3JlZGl0X2NhcmRzOiBcInBheW1lbnRfbWV0aG9kcy9jcmVkaXRfY2FyZHNcIiwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgY29uZmlndXJhdGlvbjogXCJjb25maWd1cmF0aW9uXCIsXG59O1xuXG52YXIgZGlzYWxsb3dlZElucHV0UGF0aHMgPSBbXCJjcmVkaXRDYXJkLm9wdGlvbnMudW5pb25QYXlFbnJvbGxtZW50XCJdO1xuXG5mdW5jdGlvbiBHcmFwaFFMKGNvbmZpZykge1xuICB0aGlzLl9jb25maWcgPSBjb25maWcuZ3JhcGhRTDtcbn1cblxuR3JhcGhRTC5wcm90b3R5cGUuZ2V0R3JhcGhRTEVuZHBvaW50ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fY29uZmlnLnVybDtcbn07XG5cbkdyYXBoUUwucHJvdG90eXBlLmlzR3JhcGhRTFJlcXVlc3QgPSBmdW5jdGlvbiAodXJsLCBib2R5KSB7XG4gIHZhciBmZWF0dXJlRW5hYmxlZDtcbiAgdmFyIHBhdGggPSB0aGlzLmdldENsaWVudEFwaVBhdGgodXJsKTtcblxuICBpZiAoIXRoaXMuX2lzR3JhcGhRTEVuYWJsZWQoKSB8fCAhcGF0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZlYXR1cmVFbmFibGVkID0gdGhpcy5fY29uZmlnLmZlYXR1cmVzLnNvbWUoZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICByZXR1cm4gZmVhdHVyZXNbZmVhdHVyZV0gPT09IHBhdGg7XG4gIH0pO1xuXG4gIGlmIChjb250YWluc0Rpc2FsbG93ZWRsaXN0ZWRLZXlzKGJvZHkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZlYXR1cmVFbmFibGVkO1xufTtcblxuR3JhcGhRTC5wcm90b3R5cGUuZ2V0Q2xpZW50QXBpUGF0aCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgdmFyIHBhdGg7XG4gIHZhciBjbGllbnRBcGlQcmVmaXggPSBcIi9jbGllbnRfYXBpL3YxL1wiO1xuICB2YXIgcGF0aFBhcnRzID0gdXJsLnNwbGl0KGNsaWVudEFwaVByZWZpeCk7XG5cbiAgaWYgKHBhdGhQYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgcGF0aCA9IHBhdGhQYXJ0c1sxXS5zcGxpdChcIj9cIilbMF07XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn07XG5cbkdyYXBoUUwucHJvdG90eXBlLl9pc0dyYXBoUUxFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gQm9vbGVhbih0aGlzLl9jb25maWcpO1xufTtcblxuZnVuY3Rpb24gY29udGFpbnNEaXNhbGxvd2VkbGlzdGVkS2V5cyhib2R5KSB7XG4gIHJldHVybiBkaXNhbGxvd2VkSW5wdXRQYXRocy5zb21lKGZ1bmN0aW9uIChrZXlzKSB7XG4gICAgdmFyIHZhbHVlID0ga2V5cy5zcGxpdChcIi5cIikucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwga2V5KSB7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3IgJiYgYWNjdW11bGF0b3Jba2V5XTtcbiAgICB9LCBib2R5KTtcblxuICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHcmFwaFFMO1xuXG59LHt9XSw5MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEJSQUlOVFJFRV9WRVJTSU9OID0gX2RlcmVxXyhcIi4uLy4uL2NvbnN0YW50c1wiKS5CUkFJTlRSRUVfVkVSU0lPTjtcblxudmFyIGFzc2lnbiA9IF9kZXJlcV8oXCIuLi8uLi8uLi9saWIvYXNzaWduXCIpLmFzc2lnbjtcbnZhciBzbmFrZUNhc2VUb0NhbWVsQ2FzZSA9IF9kZXJlcV8oXCIuLi8uLi8uLi9saWIvc25ha2UtY2FzZS10by1jYW1lbC1jYXNlXCIpO1xuXG52YXIgY3JlZGl0Q2FyZFRva2VuaXphdGlvbkJvZHlHZW5lcmF0b3IgPSBfZGVyZXFfKFwiLi9nZW5lcmF0b3JzL2NyZWRpdC1jYXJkLXRva2VuaXphdGlvblwiKTtcbnZhciBjcmVkaXRDYXJkVG9rZW5pemF0aW9uUmVzcG9uc2VBZGFwdGVyID0gX2RlcmVxXyhcIi4vYWRhcHRlcnMvY3JlZGl0LWNhcmQtdG9rZW5pemF0aW9uXCIpO1xuXG52YXIgY29uZmlndXJhdGlvbkJvZHlHZW5lcmF0b3IgPSBfZGVyZXFfKFwiLi9nZW5lcmF0b3JzL2NvbmZpZ3VyYXRpb25cIik7XG52YXIgY29uZmlndXJhdGlvblJlc3BvbnNlQWRhcHRlciA9IF9kZXJlcV8oXCIuL2FkYXB0ZXJzL2NvbmZpZ3VyYXRpb25cIik7XG5cbnZhciBnZW5lcmF0b3JzID0ge1xuICBcInBheW1lbnRfbWV0aG9kcy9jcmVkaXRfY2FyZHNcIjogY3JlZGl0Q2FyZFRva2VuaXphdGlvbkJvZHlHZW5lcmF0b3IsXG4gIGNvbmZpZ3VyYXRpb246IGNvbmZpZ3VyYXRpb25Cb2R5R2VuZXJhdG9yLFxufTtcbnZhciBhZGFwdGVycyA9IHtcbiAgXCJwYXltZW50X21ldGhvZHMvY3JlZGl0X2NhcmRzXCI6IGNyZWRpdENhcmRUb2tlbml6YXRpb25SZXNwb25zZUFkYXB0ZXIsXG4gIGNvbmZpZ3VyYXRpb246IGNvbmZpZ3VyYXRpb25SZXNwb25zZUFkYXB0ZXIsXG59O1xuXG5mdW5jdGlvbiBHcmFwaFFMUmVxdWVzdChvcHRpb25zKSB7XG4gIHZhciBjbGllbnRBcGlQYXRoID0gb3B0aW9ucy5ncmFwaFFMLmdldENsaWVudEFwaVBhdGgob3B0aW9ucy51cmwpO1xuXG4gIHRoaXMuX2dyYXBoUUwgPSBvcHRpb25zLmdyYXBoUUw7XG4gIHRoaXMuX2RhdGEgPSBvcHRpb25zLmRhdGE7XG4gIHRoaXMuX21ldGhvZCA9IG9wdGlvbnMubWV0aG9kO1xuICB0aGlzLl9oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzO1xuICB0aGlzLl9jbGllbnRTZGtNZXRhZGF0YSA9IHtcbiAgICBzb3VyY2U6IG9wdGlvbnMubWV0YWRhdGEuc291cmNlLFxuICAgIGludGVncmF0aW9uOiBvcHRpb25zLm1ldGFkYXRhLmludGVncmF0aW9uLFxuICAgIHNlc3Npb25JZDogb3B0aW9ucy5tZXRhZGF0YS5zZXNzaW9uSWQsXG4gIH07XG4gIHRoaXMuX3NlbmRBbmFseXRpY3NFdmVudCA9IG9wdGlvbnMuc2VuZEFuYWx5dGljc0V2ZW50IHx8IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuICB0aGlzLl9nZW5lcmF0b3IgPSBnZW5lcmF0b3JzW2NsaWVudEFwaVBhdGhdO1xuICB0aGlzLl9hZGFwdGVyID0gYWRhcHRlcnNbY2xpZW50QXBpUGF0aF07XG5cbiAgdGhpcy5fc2VuZEFuYWx5dGljc0V2ZW50KFwiZ3JhcGhxbC5pbml0XCIpO1xufVxuXG5HcmFwaFFMUmVxdWVzdC5wcm90b3R5cGUuZ2V0VXJsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fZ3JhcGhRTC5nZXRHcmFwaFFMRW5kcG9pbnQoKTtcbn07XG5cbkdyYXBoUUxSZXF1ZXN0LnByb3RvdHlwZS5nZXRCb2R5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZm9ybWF0dGVkQm9keSA9IGZvcm1hdEJvZHlLZXlzKHRoaXMuX2RhdGEpO1xuICB2YXIgZ2VuZXJhdGVkQm9keSA9IHRoaXMuX2dlbmVyYXRvcihmb3JtYXR0ZWRCb2R5KTtcbiAgdmFyIGJvZHkgPSBhc3NpZ24oXG4gICAgeyBjbGllbnRTZGtNZXRhZGF0YTogdGhpcy5fY2xpZW50U2RrTWV0YWRhdGEgfSxcbiAgICBnZW5lcmF0ZWRCb2R5XG4gICk7XG5cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGJvZHkpO1xufTtcblxuR3JhcGhRTFJlcXVlc3QucHJvdG90eXBlLmdldE1ldGhvZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFwiUE9TVFwiO1xufTtcblxuR3JhcGhRTFJlcXVlc3QucHJvdG90eXBlLmdldEhlYWRlcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhdXRob3JpemF0aW9uLCBoZWFkZXJzO1xuXG4gIGlmICh0aGlzLl9kYXRhLmF1dGhvcml6YXRpb25GaW5nZXJwcmludCkge1xuICAgIHRoaXMuX3NlbmRBbmFseXRpY3NFdmVudChcImdyYXBocWwuYXV0aG9yaXphdGlvbi1maW5nZXJwcmludFwiKTtcbiAgICBhdXRob3JpemF0aW9uID0gdGhpcy5fZGF0YS5hdXRob3JpemF0aW9uRmluZ2VycHJpbnQ7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fc2VuZEFuYWx5dGljc0V2ZW50KFwiZ3JhcGhxbC50b2tlbml6YXRpb24ta2V5XCIpO1xuICAgIGF1dGhvcml6YXRpb24gPSB0aGlzLl9kYXRhLnRva2VuaXphdGlvbktleTtcbiAgfVxuXG4gIGhlYWRlcnMgPSB7XG4gICAgQXV0aG9yaXphdGlvbjogXCJCZWFyZXIgXCIgKyBhdXRob3JpemF0aW9uLFxuICAgIFwiQnJhaW50cmVlLVZlcnNpb25cIjogQlJBSU5UUkVFX1ZFUlNJT04sXG4gIH07XG5cbiAgcmV0dXJuIGFzc2lnbih7fSwgdGhpcy5faGVhZGVycywgaGVhZGVycyk7XG59O1xuXG5HcmFwaFFMUmVxdWVzdC5wcm90b3R5cGUuYWRhcHRSZXNwb25zZUJvZHkgPSBmdW5jdGlvbiAocGFyc2VkQm9keSkge1xuICByZXR1cm4gdGhpcy5fYWRhcHRlcihwYXJzZWRCb2R5LCB0aGlzKTtcbn07XG5cbkdyYXBoUUxSZXF1ZXN0LnByb3RvdHlwZS5kZXRlcm1pbmVTdGF0dXMgPSBmdW5jdGlvbiAoXG4gIGh0dHBTdGF0dXMsXG4gIHBhcnNlZFJlc3BvbnNlXG4pIHtcbiAgdmFyIHN0YXR1cywgZXJyb3JDbGFzcztcblxuICBpZiAoaHR0cFN0YXR1cyA9PT0gMjAwKSB7XG4gICAgZXJyb3JDbGFzcyA9XG4gICAgICBwYXJzZWRSZXNwb25zZS5lcnJvcnMgJiZcbiAgICAgIHBhcnNlZFJlc3BvbnNlLmVycm9yc1swXSAmJlxuICAgICAgcGFyc2VkUmVzcG9uc2UuZXJyb3JzWzBdLmV4dGVuc2lvbnMgJiZcbiAgICAgIHBhcnNlZFJlc3BvbnNlLmVycm9yc1swXS5leHRlbnNpb25zLmVycm9yQ2xhc3M7XG5cbiAgICBpZiAocGFyc2VkUmVzcG9uc2UuZGF0YSAmJiAhcGFyc2VkUmVzcG9uc2UuZXJyb3JzKSB7XG4gICAgICBzdGF0dXMgPSAyMDA7XG4gICAgfSBlbHNlIGlmIChlcnJvckNsYXNzID09PSBcIlZBTElEQVRJT05cIikge1xuICAgICAgc3RhdHVzID0gNDIyO1xuICAgIH0gZWxzZSBpZiAoZXJyb3JDbGFzcyA9PT0gXCJBVVRIT1JJWkFUSU9OXCIpIHtcbiAgICAgIHN0YXR1cyA9IDQwMztcbiAgICB9IGVsc2UgaWYgKGVycm9yQ2xhc3MgPT09IFwiQVVUSEVOVElDQVRJT05cIikge1xuICAgICAgc3RhdHVzID0gNDAxO1xuICAgIH0gZWxzZSBpZiAoaXNHcmFwaFFMRXJyb3IoZXJyb3JDbGFzcywgcGFyc2VkUmVzcG9uc2UpKSB7XG4gICAgICBzdGF0dXMgPSA0MDM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXR1cyA9IDUwMDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWh0dHBTdGF0dXMpIHtcbiAgICBzdGF0dXMgPSA1MDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdHVzID0gaHR0cFN0YXR1cztcbiAgfVxuXG4gIHRoaXMuX3NlbmRBbmFseXRpY3NFdmVudChcImdyYXBocWwuc3RhdHVzLlwiICsgaHR0cFN0YXR1cyk7XG4gIHRoaXMuX3NlbmRBbmFseXRpY3NFdmVudChcImdyYXBocWwuZGV0ZXJtaW5lZFN0YXR1cy5cIiArIHN0YXR1cyk7XG5cbiAgcmV0dXJuIHN0YXR1cztcbn07XG5cbmZ1bmN0aW9uIGlzR3JhcGhRTEVycm9yKGVycm9yQ2xhc3MsIHBhcnNlZFJlc3BvbnNlKSB7XG4gIHJldHVybiAhZXJyb3JDbGFzcyAmJiBwYXJzZWRSZXNwb25zZS5lcnJvcnNbMF0ubWVzc2FnZTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Qm9keUtleXMob3JpZ2luYWxCb2R5KSB7XG4gIHZhciBib2R5ID0ge307XG5cbiAgT2JqZWN0LmtleXMob3JpZ2luYWxCb2R5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2FtZWxDYXNlS2V5ID0gc25ha2VDYXNlVG9DYW1lbENhc2Uoa2V5KTtcblxuICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxCb2R5W2tleV0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGJvZHlbY2FtZWxDYXNlS2V5XSA9IGZvcm1hdEJvZHlLZXlzKG9yaWdpbmFsQm9keVtrZXldKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcmlnaW5hbEJvZHlba2V5XSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgYm9keVtjYW1lbENhc2VLZXldID0gU3RyaW5nKG9yaWdpbmFsQm9keVtrZXldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm9keVtjYW1lbENhc2VLZXldID0gb3JpZ2luYWxCb2R5W2tleV07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gYm9keTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHcmFwaFFMUmVxdWVzdDtcblxufSx7XCIuLi8uLi8uLi9saWIvYXNzaWduXCI6MTIxLFwiLi4vLi4vLi4vbGliL3NuYWtlLWNhc2UtdG8tY2FtZWwtY2FzZVwiOjE1OSxcIi4uLy4uL2NvbnN0YW50c1wiOjc5LFwiLi9hZGFwdGVycy9jb25maWd1cmF0aW9uXCI6ODUsXCIuL2FkYXB0ZXJzL2NyZWRpdC1jYXJkLXRva2VuaXphdGlvblwiOjg2LFwiLi9nZW5lcmF0b3JzL2NvbmZpZ3VyYXRpb25cIjo4OCxcIi4vZ2VuZXJhdG9ycy9jcmVkaXQtY2FyZC10b2tlbml6YXRpb25cIjo4OX1dLDkyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgb25jZSA9IF9kZXJlcV8oXCIuLi8uLi9saWIvb25jZVwiKTtcbnZhciBBSkFYRHJpdmVyID0gX2RlcmVxXyhcIi4vYWpheC1kcml2ZXJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNiKSB7XG4gIGNiID0gb25jZShjYiB8fCBGdW5jdGlvbi5wcm90b3R5cGUpO1xuICBvcHRpb25zLm1ldGhvZCA9IChvcHRpb25zLm1ldGhvZCB8fCBcIkdFVFwiKS50b1VwcGVyQ2FzZSgpO1xuICBvcHRpb25zLnRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgPT0gbnVsbCA/IDYwMDAwIDogb3B0aW9ucy50aW1lb3V0O1xuICBvcHRpb25zLmRhdGEgPSBvcHRpb25zLmRhdGEgfHwge307XG5cbiAgQUpBWERyaXZlci5yZXF1ZXN0KG9wdGlvbnMsIGNiKTtcbn07XG5cbn0se1wiLi4vLi4vbGliL29uY2VcIjoxNTYsXCIuL2FqYXgtZHJpdmVyXCI6ODN9XSw5MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYm9keSkge1xuICB0cnkge1xuICAgIGJvZHkgPSBKU09OLnBhcnNlKGJvZHkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLyogaWdub3JlZCAqL1xuICB9XG5cbiAgcmV0dXJuIGJvZHk7XG59O1xuXG59LHt9XSw5NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBib2R5KSB7XG4gIGlmICh0eXBlb2YgbWV0aG9kICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gIH1cblxuICBpZiAobWV0aG9kLnRvTG93ZXJDYXNlKCkgIT09IFwiZ2V0XCIgJiYgYm9keSAhPSBudWxsKSB7XG4gICAgYm9keSA9IHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiID8gYm9keSA6IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xuICB9XG5cbiAgcmV0dXJuIGJvZHk7XG59O1xuXG59LHt9XSw5NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGlzWEhSQXZhaWxhYmxlID1cbiAgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgJiZcbiAgXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cbmZ1bmN0aW9uIGdldFJlcXVlc3RPYmplY3QoKSB7XG4gIHJldHVybiBpc1hIUkF2YWlsYWJsZVxuICAgID8gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpXG4gICAgOiBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0F2YWlsYWJsZTogaXNYSFJBdmFpbGFibGUsXG4gIGdldFJlcXVlc3RPYmplY3Q6IGdldFJlcXVlc3RPYmplY3QsXG59O1xuXG59LHt9XSw5NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5EYXRhIENvbGxlY3RvciAtIENyZWF0aW9uIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiBbY3JlYXRpbmcgdGhlIERhdGEgQ29sbGVjdG9yIGNvbXBvbmVudF0oLi9tb2R1bGUtYnJhaW50cmVlLXdlYl9kYXRhLWNvbGxlY3Rvci5odG1sIy5jcmVhdGUpLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gREFUQV9DT0xMRUNUT1JfS09VTlRfTk9UX0VOQUJMRUQgT2NjdXJzIHdoZW4gS291bnQgaXMgZW5hYmxlZCBpbiBjcmVhdGlvbiBvcHRpb25zIGJ1dCBpcyBub3QgZW5hYmxlZCBvbiB0aGUgQnJhaW50cmVlIGNvbnRyb2wgcGFuZWwuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBEQVRBX0NPTExFQ1RPUl9LT1VOVF9FUlJPUiBPY2N1cnMgd2hlbiBLb3VudCBlcnJvcnMgd2hpbGUgc2V0dGluZyB1cC5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IERBVEFfQ09MTEVDVE9SX1JFUVVJUkVTX0NSRUFURV9PUFRJT05TIE9jY3VycyB3aGVuIEtvdW50IG9yIFBheVBhbCBGcmF1ZG5ldCBjb3VsZCBub3QgYmUgZW5hYmxlZC5cbiAqL1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIERBVEFfQ09MTEVDVE9SX0tPVU5UX05PVF9FTkFCTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJEQVRBX0NPTExFQ1RPUl9LT1VOVF9OT1RfRU5BQkxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiS291bnQgaXMgbm90IGVuYWJsZWQgZm9yIHRoaXMgbWVyY2hhbnQuXCIsXG4gIH0sXG4gIERBVEFfQ09MTEVDVE9SX0tPVU5UX0VSUk9SOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJEQVRBX0NPTExFQ1RPUl9LT1VOVF9FUlJPUlwiLFxuICB9LFxuICBEQVRBX0NPTExFQ1RPUl9SRVFVSVJFU19DUkVBVEVfT1BUSU9OUzoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiREFUQV9DT0xMRUNUT1JfUkVRVUlSRVNfQ1JFQVRFX09QVElPTlNcIixcbiAgICBtZXNzYWdlOiBcIkRhdGEgQ29sbGVjdG9yIG11c3QgYmUgY3JlYXRlZCB3aXRoIEtvdW50IGFuZC9vciBQYXlQYWwuXCIsXG4gIH0sXG59O1xuXG59LHtcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjR9XSw5NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEZSQVVETkVUX0ZOQ0xTID0gX2RlcmVxXyhcIi4uL2xpYi9jb25zdGFudHNcIikuRlJBVURORVRfRk5DTFM7XG52YXIgRlJBVURORVRfU09VUkNFID0gX2RlcmVxXyhcIi4uL2xpYi9jb25zdGFudHNcIikuRlJBVURORVRfU09VUkNFO1xudmFyIEZSQVVETkVUX1VSTCA9IF9kZXJlcV8oXCIuLi9saWIvY29uc3RhbnRzXCIpLkZSQVVETkVUX1VSTDtcbnZhciBsb2FkU2NyaXB0ID0gX2RlcmVxXyhcIi4uL2xpYi9hc3NldHNcIikubG9hZFNjcmlwdDtcblxudmFyIGNhY2hlZFNlc3Npb25JZDtcblxuZnVuY3Rpb24gc2V0dXAob3B0aW9ucykge1xuICB2YXIgZnJhdWROZXQgPSBuZXcgRnJhdWRuZXQoKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAoIW9wdGlvbnMuc2Vzc2lvbklkICYmIGNhY2hlZFNlc3Npb25JZCkge1xuICAgIGZyYXVkTmV0LnNlc3Npb25JZCA9IGNhY2hlZFNlc3Npb25JZDtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZnJhdWROZXQpO1xuICB9XG5cbiAgcmV0dXJuIGZyYXVkTmV0LmluaXRpYWxpemUob3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyU2Vzc2lvbklkQ2FjaGUoKSB7XG4gIGNhY2hlZFNlc3Npb25JZCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIEZyYXVkbmV0KCkge31cblxuRnJhdWRuZXQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgZW52aXJvbm1lbnQgPSBvcHRpb25zLmVudmlyb25tZW50O1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5zZXNzaW9uSWQgPSBvcHRpb25zLnNlc3Npb25JZCB8fCBfZ2VuZXJhdGVTZXNzaW9uSWQoKTtcbiAgaWYgKCFvcHRpb25zLnNlc3Npb25JZCkge1xuICAgIGNhY2hlZFNlc3Npb25JZCA9IHRoaXMuc2Vzc2lvbklkO1xuICB9XG4gIHRoaXMuX2JlYWNvbklkID0gX2dlbmVyYXRlQmVhY29uSWQodGhpcy5zZXNzaW9uSWQpO1xuICB0aGlzLl9wYXJhbWV0ZXJCbG9jayA9IF9jcmVhdGVQYXJhbWV0ZXJCbG9jayhcbiAgICB0aGlzLnNlc3Npb25JZCxcbiAgICB0aGlzLl9iZWFjb25JZCxcbiAgICBlbnZpcm9ubWVudFxuICApO1xuXG4gIHJldHVybiBsb2FkU2NyaXB0KHtcbiAgICBzcmM6IEZSQVVETkVUX1VSTCxcbiAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHNlbGYuX3RoaXJkUGFydHlCbG9jayA9IGJsb2NrO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBpZiB0aGUgZnJhdWRuZXQgc2NyaXB0IGZhaWxzIHRvIGxvYWRcbiAgICAgIC8vIHdlIGp1c3QgcmVzb2x2ZSB3aXRoIG5vdGhpbmdcbiAgICAgIC8vIGFuZCBkYXRhIGNvbGxlY3RvciBpZ25vcmVzIGl0XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcbn07XG5cbkZyYXVkbmV0LnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgcmVtb3ZlRWxlbWVudElmT25QYWdlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZVt0aXRsZT1cInBwZm5pZnJhbWVcIl0nKSk7XG4gIHJlbW92ZUVsZW1lbnRJZk9uUGFnZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpZnJhbWVbdGl0bGU9XCJwYmZcIl0nKSk7XG5cbiAgcmVtb3ZlRWxlbWVudElmT25QYWdlKHRoaXMuX3BhcmFtZXRlckJsb2NrKTtcbiAgcmVtb3ZlRWxlbWVudElmT25QYWdlKHRoaXMuX3RoaXJkUGFydHlCbG9jayk7XG59O1xuXG5mdW5jdGlvbiByZW1vdmVFbGVtZW50SWZPblBhZ2UoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dlbmVyYXRlU2Vzc2lvbklkKCkge1xuICB2YXIgaTtcbiAgdmFyIGlkID0gXCJcIjtcblxuICBmb3IgKGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgIGlkICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2KS50b1N0cmluZygxNik7XG4gIH1cblxuICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIF9nZW5lcmF0ZUJlYWNvbklkKHNlc3Npb25JZCkge1xuICB2YXIgdGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwO1xuXG4gIHJldHVybiAoXG4gICAgXCJodHRwczovL2Iuc3RhdHMucGF5cGFsLmNvbS9jb3VudGVyLmNnaVwiICtcbiAgICBcIj9pPTEyNy4wLjAuMVwiICtcbiAgICBcIiZwPVwiICtcbiAgICBzZXNzaW9uSWQgK1xuICAgIFwiJnQ9XCIgK1xuICAgIHRpbWVzdGFtcCArXG4gICAgXCImYT0xNFwiXG4gICk7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVQYXJhbWV0ZXJCbG9jayhzZXNzaW9uSWQsIGJlYWNvbklkLCBlbnZpcm9ubWVudCkge1xuICB2YXIgZWwgPSBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpO1xuICB2YXIgY29uZmlnID0ge1xuICAgIGY6IHNlc3Npb25JZCxcbiAgICBzOiBGUkFVRE5FVF9TT1VSQ0UsXG4gICAgYjogYmVhY29uSWQsXG4gIH07XG5cbiAgLy8gZm9yIHNvbWUgcmVhc29uLCB0aGUgcHJlc2VuY2Ugb2YgdGhlIHNhbmRib3hcbiAgLy8gYXR0cmlidXRlIGluIGEgcHJvZHVjdGlvbiBlbnZpcm9ubWVudCBjYXVzZXNcbiAgLy8gc29tZSB3ZWlyZCBiZWhhdmlvciB3aXRoIHdoYXQgdXJsIHBhdGhzIGFyZVxuICAvLyBoaXQsIHNvIGluc3RlYWQsIHdlIG9ubHkgYXBwbHkgdGhpcyBhdHRyaWJ1dGVcbiAgLy8gd2hlbiBpdCBpcyBub3QgYSBwcm9kdWN0aW9uIGVudmlyb25tZW50XG4gIGlmIChlbnZpcm9ubWVudCAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25maWcuc2FuZGJveCA9IHRydWU7XG4gIH1cblxuICBlbC50eXBlID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XG4gIGVsLnNldEF0dHJpYnV0ZShcImZuY2xzXCIsIEZSQVVETkVUX0ZOQ0xTKTtcbiAgZWwudGV4dCA9IEpTT04uc3RyaW5naWZ5KGNvbmZpZyk7XG5cbiAgcmV0dXJuIGVsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0dXA6IHNldHVwLFxuICBjbGVhclNlc3Npb25JZENhY2hlOiBjbGVhclNlc3Npb25JZENhY2hlLFxufTtcblxufSx7XCIuLi9saWIvYXNzZXRzXCI6MTIwLFwiLi4vbGliL2NvbnN0YW50c1wiOjEyNn1dLDk4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgYnJhaW50cmVlLXdlYi9kYXRhLWNvbGxlY3RvciAqL1xuXG52YXIga291bnQgPSBfZGVyZXFfKFwiLi9rb3VudFwiKTtcbnZhciBmcmF1ZG5ldCA9IF9kZXJlcV8oXCIuL2ZyYXVkbmV0XCIpO1xudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG52YXIgYmFzaWNDb21wb25lbnRWZXJpZmljYXRpb24gPSBfZGVyZXFfKFwiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIik7XG52YXIgY3JlYXRlRGVmZXJyZWRDbGllbnQgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIik7XG52YXIgY3JlYXRlQXNzZXRzVXJsID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiKTtcbnZhciBtZXRob2RzID0gX2RlcmVxXyhcIi4uL2xpYi9tZXRob2RzXCIpO1xudmFyIGNvbnZlcnRNZXRob2RzVG9FcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvY29udmVydC1tZXRob2RzLXRvLWVycm9yXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG5cbi8qKlxuICogQGNsYXNzXG4gKiBAZ2xvYmFsXG4gKiBAbmFtZSBEYXRhQ29sbGVjdG9yXG4gKiBAZGVzY3JpcHRpb24gPHN0cm9uZz5EbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIFVzZSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvZGF0YS1jb2xsZWN0b3IuY3JlYXRlfGJyYWludHJlZS13ZWIuZGF0YS1jb2xsZWN0b3IuY3JlYXRlfSBpbnN0ZWFkLjwvc3Ryb25nPlxuICogQGNsYXNzZGVzYyBUaGlzIGNsYXNzIGlzIHVzZWQgZm9yIGZyYXVkIGludGVncmF0aW9uIHdpdGggUGF5UGFsIGFuZCBLb3VudC4gSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgaGF2ZSB7QGxpbmsgRGF0YUNvbGxlY3RvciNkZXZpY2VEYXRhfGRldmljZURhdGF9IHdoaWNoIGlzIHVzZWQgdG8gY29ycmVsYXRlIHVzZXIgc2Vzc2lvbnMgd2l0aCBzZXJ2ZXIgdHJhbnNhY3Rpb25zLlxuICovXG5cbi8qKlxuICogQG1lbWJlcm9mIERhdGFDb2xsZWN0b3JcbiAqIEBuYW1lIGRldmljZURhdGFcbiAqIEB0eXBlIHN0cmluZ1xuICogQGRlc2NyaXB0aW9uIEpTT04gc3RyaW5nIHRvIHBhc3Mgd2l0aCBzZXJ2ZXIgdHJhbnNhY3Rpb25zLlxuICogQGluc3RhbmNlXG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRGF0YUNvbGxlY3RvclxuICogQG5hbWUgcmF3RGV2aWNlRGF0YVxuICogQHR5cGUgb2JqZWN0XG4gKiBAZGVzY3JpcHRpb24gVGhlIGRldmljZSBkYXRhIGFzIGFuIG9iamVjdCBpbnN0ZWFkIG9mIGEgc3RyaW5nLlxuICogQGluc3RhbmNlXG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRGF0YUNvbGxlY3RvclxuICogQG5hbWUgdGVhcmRvd25cbiAqIEBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uIENsZWFubHkgcmVtb3ZlIGFueXRoaW5nIHNldCB1cCBieSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvZGF0YS1jb2xsZWN0b3IuY3JlYXRlfGNyZWF0ZX0uXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxlZCBvbiBjb21wbGV0aW9uLiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgYHRlYXJkb3duYCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqIEBpbnN0YW5jZVxuICogQGV4YW1wbGVcbiAqIGRhdGFDb2xsZWN0b3JJbnN0YW5jZS50ZWFyZG93bigpO1xuICogQGV4YW1wbGUgPGNhcHRpb24+V2l0aCBjYWxsYmFjazwvY2FwdGlvbj5cbiAqIGRhdGFDb2xsZWN0b3JJbnN0YW5jZS50ZWFyZG93bihmdW5jdGlvbiAoKSB7XG4gKiAgIC8vIHRlYXJkb3duIGlzIGNvbXBsZXRlXG4gKiB9KTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRGF0YUNvbGxlY3RvclxuICogQG5hbWUgZ2V0RGV2aWNlRGF0YVxuICogQGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb24gUmVzb2x2ZXMgd2l0aCBkZXZpY2UgZGF0YSBvbmNlIGl0IGlzIHJlYWR5LlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIGZvciBob3cgZGV2aWNlIGRhdGEgaXMgcmVzb2x2ZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJhdz1mYWxzZV0gV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIGRldmljZSBkYXRhIHdpbGwgcmVzb2x2ZSBhcyBhbiBvYmplY3QgaW5zdGVhZCBvZiBhIEpTT04gc3RyaW5nLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsZWQgb24gY29tcGxldGlvbi4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGBnZXREZXZpY2VEYXRhYCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqIEBpbnN0YW5jZVxuICogQGV4YW1wbGVcbiAqIGRhdGFDb2xsZWN0b3JJbnN0YW5jZS5nZXREZXZpY2VEYXRhKCk7XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5XaXRob3V0IG9wdGlvbnM8L2NhcHRpb24+XG4gKiBkYXRhQ29sbGVjdG9ySW5zdGFuY2UuZ2V0RGV2aWNlRGF0YSgpLnRoZW4oZnVuY3Rpb24gKGRldmljZURhdGEpIHtcbiAqICAgLy8gdHlwZW9mIGRldmljZURhdGEgPT09ICdzdHJpbmcnXG4gKiAgIC8vIHBhc3Mgb250byB5b3VyIHNlcnZlciB3aXRoIHRoZSBwYXltZW50IG1ldGhvZCBub25jZVxuICogfSk7XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5XaXRoIG9wdGlvbnM8L2NhcHRpb24+XG4gKiBkYXRhQ29sbGVjdG9ySW5zdGFuY2UuZ2V0RGV2aWNlRGF0YSh7XG4gKiAgIHJhdzogdHJ1ZVxuICogfSkudGhlbihmdW5jdGlvbiAoZGV2aWNlRGF0YSkge1xuICogICAvLyB0eXBlb2YgZGV2aWNlRGF0YSA9PT0gJ29iamVjdCdcbiAqICAgLy8gZm9yIGlmIHlvdSdkIGxpa2UgdG8gcGFyc2UgdGhlIGRhdGEgYmVmb3JlIHNlbmRpbmcgaXQgdG8geW91ciBzZXJ2ZXJcbiAqIH0pO1xuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBmdW5jdGlvbiBjcmVhdGVcbiAqIEBkZXNjcmlwdGlvbiBDcmVhdGVzIGEgRGF0YUNvbGxlY3RvciBpbnN0YW5jZSBhbmQgY29sbGVjdHMgZGV2aWNlIGRhdGEgYmFzZWQgb24geW91ciBtZXJjaGFudCBjb25maWd1cmF0aW9uLiBXZSByZWNvbW1lbmQgdGhhdCB5b3UgY2FsbCB0aGlzIG1ldGhvZCBhcyBlYXJseSBhcyBwb3NzaWJsZSwgZS5nLiBhcyBzb29uIGFzIHlvdXIgd2Vic2l0ZSBsb2Fkcy4gSWYgdGhhdCdzIHRvbyBlYXJseSwgY2FsbCBpdCBhdCB0aGUgYmVnaW5uaW5nIG9mIGN1c3RvbWVyIGNoZWNrb3V0LlxuICogKipOb3RlOioqIFRvIHVzZSB5b3VyIG93biBLb3VudCBJRCwgY29udGFjdCBvdXIgc3VwcG9ydCB0ZWFtIChbc3VwcG9ydEBicmFpbnRyZWVwYXltZW50cy5jb21dKG1haWx0bzpzdXBwb3J0QGJyYWludHJlZXBheW1lbnRzLmNvbSkgb3IgWzg3Ny40MzQuMjg5NF0odGVsOjg3Ny40MzQuMjg5NCkpLlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ3JlYXRpb24gb3B0aW9uczpcbiAqIEBwYXJhbSB7Q2xpZW50fSBbb3B0aW9ucy5jbGllbnRdIEEge0BsaW5rIENsaWVudH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYXV0aG9yaXphdGlvbl0gQSB0b2tlbml6YXRpb25LZXkgb3IgY2xpZW50VG9rZW4uIENhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGBvcHRpb25zLmNsaWVudGAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVzZURlZmVycmVkQ2xpZW50XSBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYGF1dGhvcml6YXRpb25gLCBhbGxvd3MgdGhlIERhdGEgQ29sbGVjdG9yIGluc3RhbmNlIHRvIGJlIGF2YWlsYWJsZSByaWdodCBhd2F5IGJ5IGZldGNoaW5nIHRoZSBjbGllbnQgY29uZmlndXJhdGlvbiBpbiB0aGUgYmFja2dyb3VuZC4gV2hlbiB0aGlzIG9wdGlvbiBpcyB1c2VkLCB7QGxpbmsgR29vZ2xlUGF5bWVudCNnZXREZXZpY2VEYXRhfSBtdXN0IGJlIHVzZWQgdG8gY29sbGVjdCB0aGUgZGV2aWNlIGRhdGEuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmtvdW50XSBLb3VudCBmcmF1ZCBkYXRhIGNvbGxlY3Rpb24gd2lsbCBvY2N1ciBpZiB0aGUgbWVyY2hhbnQgY29uZmlndXJhdGlvbiBoYXMgaXQgZW5hYmxlZC5cbiAqICoqTm90ZToqKiB0aGUgZGF0YSBzZW50IHRvIEtvdW50IGlzIGFzeW5jaHJvbm91cyBhbmQgbWF5IG5vdCBoYXZlIGNvbXBsZXRlZCBieSB0aGUgdGltZSB0aGUgZGF0YSBjb2xsZWN0b3IgY3JlYXRlIGNhbGwgaXMgY29tcGxldGUuIEluIG1vc3QgY2FzZXMsIHRoaXMgd2lsbCBub3QgbWF0dGVyLCBidXQgaWYgeW91IGNyZWF0ZSB0aGUgZGF0YSBjb2xsZWN0b3IgaW5zdGFuY2UgYW5kIGltbWVkaWF0ZWx5IG5hdmlnYXRlIGF3YXkgZnJvbSB0aGUgcGFnZSwgdGhlIGRldmljZSBpbmZvcm1hdGlvbiBtYXkgZmFpbCB0byBiZSBzZW50IHRvIEtvdW50LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wYXlwYWxdICpEZXByZWNhdGVkOiogUGF5UGFsIGZyYXVkIGRhdGEgY29sbGVjdGlvbiB3aWxsIG9jY3VyIHdoZW4gdGhlIERhdGFDb2xsZWN0b3IgaW5zdGFuY2UgaXMgY3JlYXRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5yaXNrQ29ycmVsYXRpb25JZF0gUGFzcyBhIGN1c3RvbSByaXNrIGNvcnJlbGF0aW9uIGlkIHdoZW4gY3JlYXRpbmcgdGhlIGRhdGEgY29sbGVjdG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmNsaWVudE1ldGFkYXRhSWRdIERlcHJlY2F0ZWQuIFVzZSBgb3B0aW9ucy5yaXNrQ29ycmVsYXRpb25JZGAgaW5zdGVhZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jb3JyZWxhdGlvbklkXSBEZXByZWNhdGVkLiBVc2UgYG9wdGlvbnMucmlza0NvcnJlbGF0aW9uSWRgIGluc3RlYWQuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIGBkYXRhYCwgaXMgdGhlIHtAbGluayBEYXRhQ29sbGVjdG9yfSBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0aGUge0BsaW5rIERhdGFDb2xsZWN0b3J9IGluc3RhbmNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IFwiRGF0YSBDb2xsZWN0b3JcIjtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBfaW5zdGFuY2VzOiBbXSxcbiAgfTtcbiAgdmFyIGRhdGE7XG5cbiAgcmV0dXJuIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uXG4gICAgLnZlcmlmeSh7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgY2xpZW50OiBvcHRpb25zLmNsaWVudCxcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc3VsdC5faW5zdGFudGlhdGVkV2l0aEFDbGllbnQgPSAhb3B0aW9ucy51c2VEZWZlcnJlZENsaWVudDtcbiAgICAgIHJlc3VsdC5fY3JlYXRlUHJvbWlzZSA9IGNyZWF0ZURlZmVycmVkQ2xpZW50XG4gICAgICAgIC5jcmVhdGUoe1xuICAgICAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgICAgIGRlYnVnOiBvcHRpb25zLmRlYnVnLFxuICAgICAgICAgIGFzc2V0c1VybDogY3JlYXRlQXNzZXRzVXJsLmNyZWF0ZShvcHRpb25zLmF1dGhvcml6YXRpb24pLFxuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICB2YXIga291bnRJbnN0YW5jZTtcbiAgICAgICAgICB2YXIgY29uZmlnID0gY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLmtvdW50ID09PSB0cnVlICYmIGNvbmZpZy5nYXRld2F5Q29uZmlndXJhdGlvbi5rb3VudCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAga291bnRJbnN0YW5jZSA9IGtvdW50LnNldHVwKHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogY29uZmlnLmdhdGV3YXlDb25maWd1cmF0aW9uLmVudmlyb25tZW50LFxuICAgICAgICAgICAgICAgIG1lcmNoYW50SWQ6IGNvbmZpZy5nYXRld2F5Q29uZmlndXJhdGlvbi5rb3VudC5rb3VudE1lcmNoYW50SWQsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgdHlwZTogZXJyb3JzLkRBVEFfQ09MTEVDVE9SX0tPVU5UX0VSUk9SLnR5cGUsXG4gICAgICAgICAgICAgICAgICBjb2RlOiBlcnJvcnMuREFUQV9DT0xMRUNUT1JfS09VTlRfRVJST1IuY29kZSxcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEgPSBrb3VudEluc3RhbmNlLmRldmljZURhdGE7XG4gICAgICAgICAgICByZXN1bHQuX2luc3RhbmNlcy5wdXNoKGtvdW50SW5zdGFuY2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0ge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjbGllbnQpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGZyYXVkbmV0XG4gICAgICAgICAgICAuc2V0dXAoe1xuICAgICAgICAgICAgICBzZXNzaW9uSWQ6XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5yaXNrQ29ycmVsYXRpb25JZCB8fFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuY2xpZW50TWV0YWRhdGFJZCB8fFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuY29ycmVsYXRpb25JZCxcbiAgICAgICAgICAgICAgZW52aXJvbm1lbnQ6XG4gICAgICAgICAgICAgICAgY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKS5nYXRld2F5Q29uZmlndXJhdGlvbi5lbnZpcm9ubWVudCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZnJhdWRuZXRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICBpZiAoZnJhdWRuZXRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGRhdGEuY29ycmVsYXRpb25faWQgPSBmcmF1ZG5ldEluc3RhbmNlLnNlc3Npb25JZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgICAgICAgICAgICByZXN1bHQuX2luc3RhbmNlcy5wdXNoKGZyYXVkbmV0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChyZXN1bHQuX2luc3RhbmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIE5FWFRfTUFKT1JfVkVSU0lPTiBlaXRoZXIgdGhpcyBzaG91bGQgZXJyb3Igd2l0aCBhIHNwZWNpZmljIGVycm9yIHRoYXRcbiAgICAgICAgICAgIC8vIG5vIGRhdGEgY29sbGVjdG9yIGluc3RhbmNlcyBjb3VsZCBiZSBzZXQgdXAsIG9yIHdlIHNob3VsZCBqdXN0IHN3YWxsb3dcbiAgICAgICAgICAgIC8vIHRoZSBlcnJvciBhbmQgZG9jdW1lbnQgdGhhdCBubyBkZXZpY2UgZGF0YSB3aWxsIGJlIHJldHVybmVkIGlmXG4gICAgICAgICAgICAvLyBkYXRhIGNvbGxlY3RvciBjYW5ub3QgYmUgaW5zdGFudGlhdGVkLiBXZSBjYW4ndCBjaGFuZ2UgdGhlIGVycm9yIGNvZGUgaGVyZVxuICAgICAgICAgICAgLy8gd2l0aG91dCBwb3NzaWJseSBicmVha2luZyBtZXJjaGFudCBpbnRlZ3JhdGlvbnMgcmVseWluZyBvbiB0aGlzIGluY2NvcnJlY3RcbiAgICAgICAgICAgIC8vIGJlaGF2aW9yLlxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLkRBVEFfQ09MTEVDVE9SX1JFUVVJUkVTX0NSRUFURV9PUFRJT05TKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXN1bHQuZGV2aWNlRGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICAgIHJlc3VsdC5yYXdEZXZpY2VEYXRhID0gZGF0YTtcblxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICByZXN1bHQudGVhcmRvd24gPSBjcmVhdGVUZWFyZG93bk1ldGhvZChyZXN1bHQpO1xuICAgICAgcmVzdWx0LmdldERldmljZURhdGEgPSBjcmVhdGVHZXREZXZpY2VEYXRhTWV0aG9kKHJlc3VsdCk7XG5cbiAgICAgIGlmIChyZXN1bHQuX2luc3RhbnRpYXRlZFdpdGhBQ2xpZW50KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuX2NyZWF0ZVByb21pc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRlYXJkb3duTWV0aG9kKHJlc3VsdCkge1xuICByZXR1cm4gd3JhcFByb21pc2UoZnVuY3Rpb24gdGVhcmRvd24oKSB7XG4gICAgcmV0dXJuIHJlc3VsdC5fY3JlYXRlUHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc3VsdC5faW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgIGluc3RhbmNlLnRlYXJkb3duKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb252ZXJ0TWV0aG9kc1RvRXJyb3IocmVzdWx0LCBtZXRob2RzKHJlc3VsdCkpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0RGV2aWNlRGF0YU1ldGhvZChyZXN1bHQpIHtcbiAgcmV0dXJuIHdyYXBQcm9taXNlKGZ1bmN0aW9uIGdldERldmljZURhdGEob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgcmV0dXJuIHJlc3VsdC5fY3JlYXRlUHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvcHRpb25zLnJhdykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdC5yYXdEZXZpY2VEYXRhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQuZGV2aWNlRGF0YSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiB3cmFwUHJvbWlzZShjcmVhdGUpLFxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIFNESywgaS5lLiBge0Bwa2cgdmVyc2lvbn1gLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgVkVSU0lPTjogVkVSU0lPTixcbn07XG5cbn0se1wiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIjoxMjIsXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vbGliL2NvbnZlcnQtbWV0aG9kcy10by1lcnJvclwiOjEyNyxcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiOjEyOSxcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCI6MTMxLFwiLi4vbGliL21ldGhvZHNcIjoxNTUsXCIuL2Vycm9yc1wiOjk2LFwiLi9mcmF1ZG5ldFwiOjk3LFwiLi9rb3VudFwiOjk5LFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0M31dLDk5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgc2pjbCA9IF9kZXJlcV8oXCIuL3ZlbmRvci9zamNsXCIpO1xudmFyIGNhbWVsQ2FzZVRvU25ha2VDYXNlID0gX2RlcmVxXyhcIi4uL2xpYi9jYW1lbC1jYXNlLXRvLXNuYWtlLWNhc2VcIik7XG5cbnZhciBRQV9VUkwgPSBcImh0dHBzOi8vYXNzZXRzLnFhLmJyYWludHJlZXBheW1lbnRzLmNvbS9kYXRhXCI7XG52YXIgSUZSQU1FX0lEX1BSRUZJWCA9IFwiYnJhaW50cmVlRGF0YUZyYW1lLVwiO1xudmFyIGVudmlyb25tZW50VXJscyA9IHtcbiAgZGV2ZWxvcG1lbnQ6IFFBX1VSTCxcbiAgcWE6IFFBX1VSTCxcbiAgc2FuZGJveDogXCJodHRwczovL2Fzc2V0cy5icmFpbnRyZWVnYXRld2F5LmNvbS9zYW5kYm94L2RhdGFcIixcbiAgcHJvZHVjdGlvbjogXCJodHRwczovL2Fzc2V0cy5icmFpbnRyZWVnYXRld2F5LmNvbS9kYXRhXCIsXG59O1xudmFyIGNhY2hlZERldmljZURhdGEgPSB7fTtcblxuZnVuY3Rpb24gc2V0dXAobykge1xuICB2YXIgb3B0aW9ucyA9IG8gIT0gbnVsbCA/IG8gOiB7fTtcblxuICByZXR1cm4gbmV3IEtvdW50KG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBLb3VudChvcHRpb25zKSB7XG4gIHZhciBwcmV2aW91c2x5SW5pdGlhbGl6ZWREZXZpY2VEYXRhID0gS291bnQuZ2V0Q2FjaGVkRGV2aWNlRGF0YShcbiAgICBvcHRpb25zLm1lcmNoYW50SWRcbiAgKTtcblxuICBpZiAocHJldmlvdXNseUluaXRpYWxpemVkRGV2aWNlRGF0YSkge1xuICAgIHRoaXMuZGV2aWNlRGF0YSA9IHByZXZpb3VzbHlJbml0aWFsaXplZERldmljZURhdGE7XG4gICAgdGhpcy5faXNDYWNoZWQgPSB0cnVlO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fY3VycmVudEVudmlyb25tZW50ID0gdGhpcy5faW5pdGlhbGl6ZUVudmlyb25tZW50KG9wdGlvbnMpO1xuXG4gIHNqY2wucmFuZG9tLnN0YXJ0Q29sbGVjdG9ycygpO1xuXG4gIHRoaXMuX2RldmljZVNlc3Npb25JZCA9IHRoaXMuX2dlbmVyYXRlRGV2aWNlU2Vzc2lvbklkKCk7XG4gIHRoaXMuZGV2aWNlRGF0YSA9IHRoaXMuX2dldERldmljZURhdGEoKTtcblxuICBLb3VudC5zZXRDYWNoZWREZXZpY2VEYXRhKG9wdGlvbnMubWVyY2hhbnRJZCwgdGhpcy5kZXZpY2VEYXRhKTtcblxuICB0aGlzLl9pZnJhbWUgPSB0aGlzLl9zZXR1cElGcmFtZSgpO1xufVxuXG5Lb3VudC5nZXRDYWNoZWREZXZpY2VEYXRhID0gZnVuY3Rpb24gKG1lcmNoYW50SWQpIHtcbiAgcmV0dXJuIGNhY2hlZERldmljZURhdGFbbWVyY2hhbnRJZF07XG59O1xuXG5Lb3VudC5zZXRDYWNoZWREZXZpY2VEYXRhID0gZnVuY3Rpb24gKG1lcmNoYW50SWQsIGRhdGEpIHtcbiAgY2FjaGVkRGV2aWNlRGF0YVttZXJjaGFudElkXSA9IGRhdGE7XG59O1xuXG5Lb3VudC5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5faXNDYWNoZWQpIHtcbiAgICBzamNsLnJhbmRvbS5zdG9wQ29sbGVjdG9ycygpO1xuXG4gICAgdGhpcy5fcmVtb3ZlSWZyYW1lKCk7XG4gIH1cbn07XG5cbktvdW50LnByb3RvdHlwZS5fcmVtb3ZlSWZyYW1lID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9pZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLl9pZnJhbWUpO1xufTtcblxuS291bnQucHJvdG90eXBlLl9nZXREZXZpY2VEYXRhID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FtZWxDYXNlVG9TbmFrZUNhc2Uoe1xuICAgIGRldmljZVNlc3Npb25JZDogdGhpcy5fZGV2aWNlU2Vzc2lvbklkLFxuICAgIGZyYXVkTWVyY2hhbnRJZDogdGhpcy5fY3VycmVudEVudmlyb25tZW50LmlkLFxuICB9KTtcbn07XG5cbktvdW50LnByb3RvdHlwZS5fZ2VuZXJhdGVEZXZpY2VTZXNzaW9uSWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBiaXRzLCBoZXhTdHJpbmc7XG5cbiAgYml0cyA9IHNqY2wucmFuZG9tLnJhbmRvbVdvcmRzKDQsIDApO1xuICBoZXhTdHJpbmcgPSBzamNsLmNvZGVjLmhleC5mcm9tQml0cyhiaXRzKTtcblxuICByZXR1cm4gaGV4U3RyaW5nO1xufTtcblxuS291bnQucHJvdG90eXBlLl9zZXR1cElGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHBhcmFtcywgaWZyYW1lO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgcGFyYW1zID0gXCI/bT1cIiArIHRoaXMuX2N1cnJlbnRFbnZpcm9ubWVudC5pZCArIFwiJnM9XCIgKyB0aGlzLl9kZXZpY2VTZXNzaW9uSWQ7XG5cbiAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgaWZyYW1lLndpZHRoID0gMTtcbiAgaWZyYW1lLmlkID0gSUZSQU1FX0lEX1BSRUZJWCArIHRoaXMuX2RldmljZVNlc3Npb25JZDtcbiAgaWZyYW1lLmhlaWdodCA9IDE7XG4gIGlmcmFtZS5mcmFtZUJvcmRlciA9IDA7XG4gIGlmcmFtZS5zY3JvbGxpbmcgPSBcIm5vXCI7XG4gIGlmcmFtZS5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgaWZyYW1lLnN0eWxlLmxlZnQgPSBcIi05OTk5OTlweFwiO1xuICBpZnJhbWUuc3R5bGUudG9wID0gXCItOTk5OTk5cHhcIjtcbiAgaWZyYW1lLnRpdGxlID0gXCJCcmFpbnRyZWUtS291bnQtaWZyYW1lXCI7XG4gIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZnJhbWUuc3JjID0gc2VsZi5fY3VycmVudEVudmlyb25tZW50LnVybCArIFwiL2xvZ28uaHRtXCIgKyBwYXJhbXM7XG4gICAgaWZyYW1lLmlubmVySFRNTCA9XG4gICAgICAnPGltZyBzcmM9XCInICtcbiAgICAgIHNlbGYuX2N1cnJlbnRFbnZpcm9ubWVudC51cmwgK1xuICAgICAgXCIvbG9nby5naWZcIiArXG4gICAgICBwYXJhbXMgK1xuICAgICAgJ1wiIGFsdD1cIlwiIC8+JztcbiAgfSwgMTApO1xuXG4gIHJldHVybiBpZnJhbWU7XG59O1xuXG5Lb3VudC5wcm90b3R5cGUuX2luaXRpYWxpemVFbnZpcm9ubWVudCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciB1cmwgPSBlbnZpcm9ubWVudFVybHNbb3B0aW9ucy5lbnZpcm9ubWVudF07XG5cbiAgaWYgKHVybCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgb3B0aW9ucy5lbnZpcm9ubWVudCArIFwiIGlzIG5vdCBhIHZhbGlkIGVudmlyb25tZW50IGZvciBrb3VudC5lbnZpcm9ubWVudFwiXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdXJsOiB1cmwsXG4gICAgbmFtZTogb3B0aW9ucy5lbnZpcm9ubWVudCxcbiAgICBpZDogb3B0aW9ucy5tZXJjaGFudElkLFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldHVwOiBzZXR1cCxcbiAgS291bnQ6IEtvdW50LFxuICBlbnZpcm9ubWVudFVybHM6IGVudmlyb25tZW50VXJscyxcbn07XG5cbn0se1wiLi4vbGliL2NhbWVsLWNhc2UtdG8tc25ha2UtY2FzZVwiOjEyNSxcIi4vdmVuZG9yL3NqY2xcIjoxMDB9XSwxMDA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgc2pjbCA9IHtcbiAgY2lwaGVyOiB7fSxcbiAgaGFzaDoge30sXG4gIGtleWV4Y2hhbmdlOiB7fSxcbiAgbW9kZToge30sXG4gIG1pc2M6IHt9LFxuICBjb2RlYzoge30sXG4gIGV4Y2VwdGlvbjoge1xuICAgIGNvcnJ1cHQ6IGZ1bmN0aW9uIChhKSB7XG4gICAgICB0aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJDT1JSVVBUOiBcIiArIHRoaXMubWVzc2FnZTtcbiAgICAgIH07XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBhO1xuICAgIH0sXG4gICAgaW52YWxpZDogZnVuY3Rpb24gKGEpIHtcbiAgICAgIHRoaXMudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIklOVkFMSUQ6IFwiICsgdGhpcy5tZXNzYWdlO1xuICAgICAgfTtcbiAgICAgIHRoaXMubWVzc2FnZSA9IGE7XG4gICAgfSxcbiAgICBidWc6IGZ1bmN0aW9uIChhKSB7XG4gICAgICB0aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJCVUc6IFwiICsgdGhpcy5tZXNzYWdlO1xuICAgICAgfTtcbiAgICAgIHRoaXMubWVzc2FnZSA9IGE7XG4gICAgfSxcbiAgICBub3RSZWFkeTogZnVuY3Rpb24gKGEpIHtcbiAgICAgIHRoaXMudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIk5PVCBSRUFEWTogXCIgKyB0aGlzLm1lc3NhZ2U7XG4gICAgICB9O1xuICAgICAgdGhpcy5tZXNzYWdlID0gYTtcbiAgICB9LFxuICB9LFxufTtcbnNqY2wuY2lwaGVyLmFlcyA9IGZ1bmN0aW9uIChhKSB7XG4gIHRoaXMubFswXVswXVswXSB8fCB0aGlzLkcoKTtcbiAgdmFyIGIsXG4gICAgYyxcbiAgICBkLFxuICAgIGUsXG4gICAgZiA9IHRoaXMubFswXVs0XSxcbiAgICBnID0gdGhpcy5sWzFdO1xuICBiID0gYS5sZW5ndGg7XG4gIHZhciBrID0gMTtcbiAgaWYgKDQgIT09IGIgJiYgNiAhPT0gYiAmJiA4ICE9PSBiKVxuICAgIHRocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5pbnZhbGlkKFwiaW52YWxpZCBhZXMga2V5IHNpemVcIik7XG4gIHRoaXMuYiA9IFsoZCA9IGEuc2xpY2UoMCkpLCAoZSA9IFtdKV07XG4gIGZvciAoYSA9IGI7IGEgPCA0ICogYiArIDI4OyBhKyspIHtcbiAgICBjID0gZFthIC0gMV07XG4gICAgaWYgKDAgPT09IGEgJSBiIHx8ICg4ID09PSBiICYmIDQgPT09IGEgJSBiKSlcbiAgICAgIChjID1cbiAgICAgICAgKGZbYyA+Pj4gMjRdIDw8IDI0KSBeXG4gICAgICAgIChmWyhjID4+IDE2KSAmIDI1NV0gPDwgMTYpIF5cbiAgICAgICAgKGZbKGMgPj4gOCkgJiAyNTVdIDw8IDgpIF5cbiAgICAgICAgZltjICYgMjU1XSksXG4gICAgICAgIDAgPT09IGEgJSBiICYmXG4gICAgICAgICAgKChjID0gKGMgPDwgOCkgXiAoYyA+Pj4gMjQpIF4gKGsgPDwgMjQpKSxcbiAgICAgICAgICAoayA9IChrIDw8IDEpIF4gKDI4MyAqIChrID4+IDcpKSkpO1xuICAgIGRbYV0gPSBkW2EgLSBiXSBeIGM7XG4gIH1cbiAgZm9yIChiID0gMDsgYTsgYisrLCBhLS0pXG4gICAgKGMgPSBkW2IgJiAzID8gYSA6IGEgLSA0XSksXG4gICAgICAoZVtiXSA9XG4gICAgICAgIDQgPj0gYSB8fCA0ID4gYlxuICAgICAgICAgID8gY1xuICAgICAgICAgIDogZ1swXVtmW2MgPj4+IDI0XV0gXlxuICAgICAgICAgICAgZ1sxXVtmWyhjID4+IDE2KSAmIDI1NV1dIF5cbiAgICAgICAgICAgIGdbMl1bZlsoYyA+PiA4KSAmIDI1NV1dIF5cbiAgICAgICAgICAgIGdbM11bZltjICYgMjU1XV0pO1xufTtcbnNqY2wuY2lwaGVyLmFlcy5wcm90b3R5cGUgPSB7XG4gIGVuY3J5cHQ6IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIHQodGhpcywgYSwgMCk7XG4gIH0sXG4gIGRlY3J5cHQ6IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIHQodGhpcywgYSwgMSk7XG4gIH0sXG4gIGw6IFtcbiAgICBbW10sIFtdLCBbXSwgW10sIFtdXSxcbiAgICBbW10sIFtdLCBbXSwgW10sIFtdXSxcbiAgXSxcbiAgRzogZnVuY3Rpb24gKCkge1xuICAgIHZhciBhID0gdGhpcy5sWzBdLFxuICAgICAgYiA9IHRoaXMubFsxXSxcbiAgICAgIGMgPSBhWzRdLFxuICAgICAgZCA9IGJbNF0sXG4gICAgICBlLFxuICAgICAgZixcbiAgICAgIGcsXG4gICAgICBrID0gW10sXG4gICAgICBsID0gW10sXG4gICAgICBwLFxuICAgICAgbixcbiAgICAgIGgsXG4gICAgICBtO1xuICAgIGZvciAoZSA9IDA7IDB4MTAwID4gZTsgZSsrKSBsWyhrW2VdID0gKGUgPDwgMSkgXiAoMjgzICogKGUgPj4gNykpKSBeIGVdID0gZTtcbiAgICBmb3IgKGYgPSBnID0gMDsgIWNbZl07IGYgXj0gcCB8fCAxLCBnID0gbFtnXSB8fCAxKVxuICAgICAgZm9yIChcbiAgICAgICAgaCA9IGcgXiAoZyA8PCAxKSBeIChnIDw8IDIpIF4gKGcgPDwgMykgXiAoZyA8PCA0KSxcbiAgICAgICAgICBoID0gKGggPj4gOCkgXiAoaCAmIDI1NSkgXiA5OSxcbiAgICAgICAgICBjW2ZdID0gaCxcbiAgICAgICAgICBkW2hdID0gZixcbiAgICAgICAgICBuID0ga1soZSA9IGtbKHAgPSBrW2ZdKV0pXSxcbiAgICAgICAgICBtID0gKDB4MTAxMDEwMSAqIG4pIF4gKDB4MTAwMDEgKiBlKSBeICgweDEwMSAqIHApIF4gKDB4MTAxMDEwMCAqIGYpLFxuICAgICAgICAgIG4gPSAoMHgxMDEgKiBrW2hdKSBeICgweDEwMTAxMDAgKiBoKSxcbiAgICAgICAgICBlID0gMDtcbiAgICAgICAgNCA+IGU7XG4gICAgICAgIGUrK1xuICAgICAgKVxuICAgICAgICAoYVtlXVtmXSA9IG4gPSAobiA8PCAyNCkgXiAobiA+Pj4gOCkpLFxuICAgICAgICAgIChiW2VdW2hdID0gbSA9IChtIDw8IDI0KSBeIChtID4+PiA4KSk7XG4gICAgZm9yIChlID0gMDsgNSA+IGU7IGUrKykgKGFbZV0gPSBhW2VdLnNsaWNlKDApKSwgKGJbZV0gPSBiW2VdLnNsaWNlKDApKTtcbiAgfSxcbn07XG5mdW5jdGlvbiB0KGEsIGIsIGMpIHtcbiAgaWYgKDQgIT09IGIubGVuZ3RoKVxuICAgIHRocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5pbnZhbGlkKFwiaW52YWxpZCBhZXMgYmxvY2sgc2l6ZVwiKTtcbiAgdmFyIGQgPSBhLmJbY10sXG4gICAgZSA9IGJbMF0gXiBkWzBdLFxuICAgIGYgPSBiW2MgPyAzIDogMV0gXiBkWzFdLFxuICAgIGcgPSBiWzJdIF4gZFsyXTtcbiAgYiA9IGJbYyA/IDEgOiAzXSBeIGRbM107XG4gIHZhciBrLFxuICAgIGwsXG4gICAgcCxcbiAgICBuID0gZC5sZW5ndGggLyA0IC0gMixcbiAgICBoLFxuICAgIG0gPSA0LFxuICAgIHEgPSBbMCwgMCwgMCwgMF07XG4gIGsgPSBhLmxbY107XG4gIGEgPSBrWzBdO1xuICB2YXIgciA9IGtbMV0sXG4gICAgdiA9IGtbMl0sXG4gICAgdyA9IGtbM10sXG4gICAgeCA9IGtbNF07XG4gIGZvciAoaCA9IDA7IGggPCBuOyBoKyspXG4gICAgKGsgPVxuICAgICAgYVtlID4+PiAyNF0gXiByWyhmID4+IDE2KSAmIDI1NV0gXiB2WyhnID4+IDgpICYgMjU1XSBeIHdbYiAmIDI1NV0gXiBkW21dKSxcbiAgICAgIChsID1cbiAgICAgICAgYVtmID4+PiAyNF0gXlxuICAgICAgICByWyhnID4+IDE2KSAmIDI1NV0gXlxuICAgICAgICB2WyhiID4+IDgpICYgMjU1XSBeXG4gICAgICAgIHdbZSAmIDI1NV0gXlxuICAgICAgICBkW20gKyAxXSksXG4gICAgICAocCA9XG4gICAgICAgIGFbZyA+Pj4gMjRdIF5cbiAgICAgICAgclsoYiA+PiAxNikgJiAyNTVdIF5cbiAgICAgICAgdlsoZSA+PiA4KSAmIDI1NV0gXlxuICAgICAgICB3W2YgJiAyNTVdIF5cbiAgICAgICAgZFttICsgMl0pLFxuICAgICAgKGIgPVxuICAgICAgICBhW2IgPj4+IDI0XSBeXG4gICAgICAgIHJbKGUgPj4gMTYpICYgMjU1XSBeXG4gICAgICAgIHZbKGYgPj4gOCkgJiAyNTVdIF5cbiAgICAgICAgd1tnICYgMjU1XSBeXG4gICAgICAgIGRbbSArIDNdKSxcbiAgICAgIChtICs9IDQpLFxuICAgICAgKGUgPSBrKSxcbiAgICAgIChmID0gbCksXG4gICAgICAoZyA9IHApO1xuICBmb3IgKGggPSAwOyA0ID4gaDsgaCsrKVxuICAgIChxW2MgPyAzICYgLWggOiBoXSA9XG4gICAgICAoeFtlID4+PiAyNF0gPDwgMjQpIF5cbiAgICAgICh4WyhmID4+IDE2KSAmIDI1NV0gPDwgMTYpIF5cbiAgICAgICh4WyhnID4+IDgpICYgMjU1XSA8PCA4KSBeXG4gICAgICB4W2IgJiAyNTVdIF5cbiAgICAgIGRbbSsrXSksXG4gICAgICAoayA9IGUpLFxuICAgICAgKGUgPSBmKSxcbiAgICAgIChmID0gZyksXG4gICAgICAoZyA9IGIpLFxuICAgICAgKGIgPSBrKTtcbiAgcmV0dXJuIHE7XG59XG5zamNsLmJpdEFycmF5ID0ge1xuICBiaXRTbGljZTogZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICBhID0gc2pjbC5iaXRBcnJheS5NKGEuc2xpY2UoYiAvIDMyKSwgMzIgLSAoYiAmIDMxKSkuc2xpY2UoMSk7XG4gICAgcmV0dXJuIHZvaWQgMCA9PT0gYyA/IGEgOiBzamNsLmJpdEFycmF5LmNsYW1wKGEsIGMgLSBiKTtcbiAgfSxcbiAgZXh0cmFjdDogZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICB2YXIgZCA9IE1hdGguZmxvb3IoKC1iIC0gYykgJiAzMSk7XG4gICAgcmV0dXJuIChcbiAgICAgICgoKGIgKyBjIC0gMSkgXiBiKSAmIC0zMlxuICAgICAgICA/IChhWyhiIC8gMzIpIHwgMF0gPDwgKDMyIC0gZCkpIF4gKGFbKGIgLyAzMiArIDEpIHwgMF0gPj4+IGQpXG4gICAgICAgIDogYVsoYiAvIDMyKSB8IDBdID4+PiBkKSAmXG4gICAgICAoKDEgPDwgYykgLSAxKVxuICAgICk7XG4gIH0sXG4gIGNvbmNhdDogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoMCA9PT0gYS5sZW5ndGggfHwgMCA9PT0gYi5sZW5ndGgpIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICB2YXIgYyA9IGFbYS5sZW5ndGggLSAxXSxcbiAgICAgIGQgPSBzamNsLmJpdEFycmF5LmdldFBhcnRpYWwoYyk7XG4gICAgcmV0dXJuIDMyID09PSBkXG4gICAgICA/IGEuY29uY2F0KGIpXG4gICAgICA6IHNqY2wuYml0QXJyYXkuTShiLCBkLCBjIHwgMCwgYS5zbGljZSgwLCBhLmxlbmd0aCAtIDEpKTtcbiAgfSxcbiAgYml0TGVuZ3RoOiBmdW5jdGlvbiAoYSkge1xuICAgIHZhciBiID0gYS5sZW5ndGg7XG4gICAgcmV0dXJuIDAgPT09IGIgPyAwIDogMzIgKiAoYiAtIDEpICsgc2pjbC5iaXRBcnJheS5nZXRQYXJ0aWFsKGFbYiAtIDFdKTtcbiAgfSxcbiAgY2xhbXA6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKDMyICogYS5sZW5ndGggPCBiKSByZXR1cm4gYTtcbiAgICBhID0gYS5zbGljZSgwLCBNYXRoLmNlaWwoYiAvIDMyKSk7XG4gICAgdmFyIGMgPSBhLmxlbmd0aDtcbiAgICBiID0gYiAmIDMxO1xuICAgIDAgPCBjICYmXG4gICAgICBiICYmXG4gICAgICAoYVtjIC0gMV0gPSBzamNsLmJpdEFycmF5LnBhcnRpYWwoXG4gICAgICAgIGIsXG4gICAgICAgIGFbYyAtIDFdICYgKDIxNDc0ODM2NDggPj4gKGIgLSAxKSksXG4gICAgICAgIDFcbiAgICAgICkpO1xuICAgIHJldHVybiBhO1xuICB9LFxuICBwYXJ0aWFsOiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgIHJldHVybiAzMiA9PT0gYSA/IGIgOiAoYyA/IGIgfCAwIDogYiA8PCAoMzIgLSBhKSkgKyAweDEwMDAwMDAwMDAwICogYTtcbiAgfSxcbiAgZ2V0UGFydGlhbDogZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhIC8gMHgxMDAwMDAwMDAwMCkgfHwgMzI7XG4gIH0sXG4gIGVxdWFsOiBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChzamNsLmJpdEFycmF5LmJpdExlbmd0aChhKSAhPT0gc2pjbC5iaXRBcnJheS5iaXRMZW5ndGgoYikpIHJldHVybiAhMTtcbiAgICB2YXIgYyA9IDAsXG4gICAgICBkO1xuICAgIGZvciAoZCA9IDA7IGQgPCBhLmxlbmd0aDsgZCsrKSBjIHw9IGFbZF0gXiBiW2RdO1xuICAgIHJldHVybiAwID09PSBjO1xuICB9LFxuICBNOiBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgIHZhciBlO1xuICAgIGUgPSAwO1xuICAgIGZvciAodm9pZCAwID09PSBkICYmIChkID0gW10pOyAzMiA8PSBiOyBiIC09IDMyKSBkLnB1c2goYyksIChjID0gMCk7XG4gICAgaWYgKDAgPT09IGIpIHJldHVybiBkLmNvbmNhdChhKTtcbiAgICBmb3IgKGUgPSAwOyBlIDwgYS5sZW5ndGg7IGUrKylcbiAgICAgIGQucHVzaChjIHwgKGFbZV0gPj4+IGIpKSwgKGMgPSBhW2VdIDw8ICgzMiAtIGIpKTtcbiAgICBlID0gYS5sZW5ndGggPyBhW2EubGVuZ3RoIC0gMV0gOiAwO1xuICAgIGEgPSBzamNsLmJpdEFycmF5LmdldFBhcnRpYWwoZSk7XG4gICAgZC5wdXNoKHNqY2wuYml0QXJyYXkucGFydGlhbCgoYiArIGEpICYgMzEsIDMyIDwgYiArIGEgPyBjIDogZC5wb3AoKSwgMSkpO1xuICAgIHJldHVybiBkO1xuICB9LFxuICBZOiBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBbYVswXSBeIGJbMF0sIGFbMV0gXiBiWzFdLCBhWzJdIF4gYlsyXSwgYVszXSBeIGJbM11dO1xuICB9LFxuICBieXRlc3dhcE06IGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIGIsIGM7XG4gICAgZm9yIChiID0gMDsgYiA8IGEubGVuZ3RoOyArK2IpXG4gICAgICAoYyA9IGFbYl0pLFxuICAgICAgICAoYVtiXSA9XG4gICAgICAgICAgKGMgPj4+IDI0KSB8ICgoYyA+Pj4gOCkgJiAweGZmMDApIHwgKChjICYgMHhmZjAwKSA8PCA4KSB8IChjIDw8IDI0KSk7XG4gICAgcmV0dXJuIGE7XG4gIH0sXG59O1xuc2pjbC5jb2RlYy51dGY4U3RyaW5nID0ge1xuICBmcm9tQml0czogZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgYiA9IFwiXCIsXG4gICAgICBjID0gc2pjbC5iaXRBcnJheS5iaXRMZW5ndGgoYSksXG4gICAgICBkLFxuICAgICAgZTtcbiAgICBmb3IgKGQgPSAwOyBkIDwgYyAvIDg7IGQrKylcbiAgICAgIDAgPT09IChkICYgMykgJiYgKGUgPSBhW2QgLyA0XSksXG4gICAgICAgIChiICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChlID4+PiA4KSA+Pj4gOCkgPj4+IDgpKSxcbiAgICAgICAgKGUgPDw9IDgpO1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGIpKTtcbiAgfSxcbiAgdG9CaXRzOiBmdW5jdGlvbiAoYSkge1xuICAgIGEgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpO1xuICAgIHZhciBiID0gW10sXG4gICAgICBjLFxuICAgICAgZCA9IDA7XG4gICAgZm9yIChjID0gMDsgYyA8IGEubGVuZ3RoOyBjKyspXG4gICAgICAoZCA9IChkIDw8IDgpIHwgYS5jaGFyQ29kZUF0KGMpKSwgMyA9PT0gKGMgJiAzKSAmJiAoYi5wdXNoKGQpLCAoZCA9IDApKTtcbiAgICBjICYgMyAmJiBiLnB1c2goc2pjbC5iaXRBcnJheS5wYXJ0aWFsKDggKiAoYyAmIDMpLCBkKSk7XG4gICAgcmV0dXJuIGI7XG4gIH0sXG59O1xuc2pjbC5jb2RlYy5oZXggPSB7XG4gIGZyb21CaXRzOiBmdW5jdGlvbiAoYSkge1xuICAgIHZhciBiID0gXCJcIixcbiAgICAgIGM7XG4gICAgZm9yIChjID0gMDsgYyA8IGEubGVuZ3RoOyBjKyspXG4gICAgICBiICs9ICgoYVtjXSB8IDApICsgMHhmMDAwMDAwMDAwMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoNCk7XG4gICAgcmV0dXJuIGIuc3Vic3RyKDAsIHNqY2wuYml0QXJyYXkuYml0TGVuZ3RoKGEpIC8gNCk7XG4gIH0sXG4gIHRvQml0czogZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgYixcbiAgICAgIGMgPSBbXSxcbiAgICAgIGQ7XG4gICAgYSA9IGEucmVwbGFjZSgvXFxzfDB4L2csIFwiXCIpO1xuICAgIGQgPSBhLmxlbmd0aDtcbiAgICBhID0gYSArIFwiMDAwMDAwMDBcIjtcbiAgICBmb3IgKGIgPSAwOyBiIDwgYS5sZW5ndGg7IGIgKz0gOCkgYy5wdXNoKHBhcnNlSW50KGEuc3Vic3RyKGIsIDgpLCAxNikgXiAwKTtcbiAgICByZXR1cm4gc2pjbC5iaXRBcnJheS5jbGFtcChjLCA0ICogZCk7XG4gIH0sXG59O1xuc2pjbC5oYXNoLnNoYTI1NiA9IGZ1bmN0aW9uIChhKSB7XG4gIHRoaXMuYlswXSB8fCB0aGlzLkcoKTtcbiAgYVxuICAgID8gKCh0aGlzLnUgPSBhLnUuc2xpY2UoMCkpLCAodGhpcy5vID0gYS5vLnNsaWNlKDApKSwgKHRoaXMuaCA9IGEuaCkpXG4gICAgOiB0aGlzLnJlc2V0KCk7XG59O1xuc2pjbC5oYXNoLnNoYTI1Ni5oYXNoID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIG5ldyBzamNsLmhhc2guc2hhMjU2KCkudXBkYXRlKGEpLmZpbmFsaXplKCk7XG59O1xuc2pjbC5oYXNoLnNoYTI1Ni5wcm90b3R5cGUgPSB7XG4gIGJsb2NrU2l6ZTogNTEyLFxuICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudSA9IHRoaXMuSy5zbGljZSgwKTtcbiAgICB0aGlzLm8gPSBbXTtcbiAgICB0aGlzLmggPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIChhKSB7XG4gICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEgJiYgKGEgPSBzamNsLmNvZGVjLnV0ZjhTdHJpbmcudG9CaXRzKGEpKTtcbiAgICB2YXIgYixcbiAgICAgIGMgPSAodGhpcy5vID0gc2pjbC5iaXRBcnJheS5jb25jYXQodGhpcy5vLCBhKSk7XG4gICAgYiA9IHRoaXMuaDtcbiAgICBhID0gdGhpcy5oID0gYiArIHNqY2wuYml0QXJyYXkuYml0TGVuZ3RoKGEpO1xuICAgIGlmICgweDFmZmZmZmZmZmZmZmZmIDwgYSlcbiAgICAgIHRocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5pbnZhbGlkKFwiQ2Fubm90IGhhc2ggbW9yZSB0aGFuIDJeNTMgLSAxIGJpdHNcIik7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBVaW50MzJBcnJheSkge1xuICAgICAgdmFyIGQgPSBuZXcgVWludDMyQXJyYXkoYyksXG4gICAgICAgIGUgPSAwO1xuICAgICAgZm9yIChiID0gNTEyICsgYiAtICgoNTEyICsgYikgJiAweDFmZik7IGIgPD0gYTsgYiArPSA1MTIpXG4gICAgICAgIHUodGhpcywgZC5zdWJhcnJheSgxNiAqIGUsIDE2ICogKGUgKyAxKSkpLCAoZSArPSAxKTtcbiAgICAgIGMuc3BsaWNlKDAsIDE2ICogZSk7XG4gICAgfSBlbHNlXG4gICAgICBmb3IgKGIgPSA1MTIgKyBiIC0gKCg1MTIgKyBiKSAmIDB4MWZmKTsgYiA8PSBhOyBiICs9IDUxMilcbiAgICAgICAgdSh0aGlzLCBjLnNwbGljZSgwLCAxNikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBmaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBhLFxuICAgICAgYiA9IHRoaXMubyxcbiAgICAgIGMgPSB0aGlzLnUsXG4gICAgICBiID0gc2pjbC5iaXRBcnJheS5jb25jYXQoYiwgW3NqY2wuYml0QXJyYXkucGFydGlhbCgxLCAxKV0pO1xuICAgIGZvciAoYSA9IGIubGVuZ3RoICsgMjsgYSAmIDE1OyBhKyspIGIucHVzaCgwKTtcbiAgICBiLnB1c2goTWF0aC5mbG9vcih0aGlzLmggLyAweDEwMDAwMDAwMCkpO1xuICAgIGZvciAoYi5wdXNoKHRoaXMuaCB8IDApOyBiLmxlbmd0aDsgKSB1KHRoaXMsIGIuc3BsaWNlKDAsIDE2KSk7XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHJldHVybiBjO1xuICB9LFxuICBLOiBbXSxcbiAgYjogW10sXG4gIEc6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBhKGEpIHtcbiAgICAgIHJldHVybiAoMHgxMDAwMDAwMDAgKiAoYSAtIE1hdGguZmxvb3IoYSkpKSB8IDA7XG4gICAgfVxuICAgIGZvciAodmFyIGIgPSAwLCBjID0gMiwgZCwgZTsgNjQgPiBiOyBjKyspIHtcbiAgICAgIGUgPSAhMDtcbiAgICAgIGZvciAoZCA9IDI7IGQgKiBkIDw9IGM7IGQrKylcbiAgICAgICAgaWYgKDAgPT09IGMgJSBkKSB7XG4gICAgICAgICAgZSA9ICExO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBlICYmXG4gICAgICAgICg4ID4gYiAmJiAodGhpcy5LW2JdID0gYShNYXRoLnBvdyhjLCAwLjUpKSksXG4gICAgICAgICh0aGlzLmJbYl0gPSBhKE1hdGgucG93KGMsIDEgLyAzKSkpLFxuICAgICAgICBiKyspO1xuICAgIH1cbiAgfSxcbn07XG5mdW5jdGlvbiB1KGEsIGIpIHtcbiAgdmFyIGMsXG4gICAgZCxcbiAgICBlLFxuICAgIGYgPSBhLnUsXG4gICAgZyA9IGEuYixcbiAgICBrID0gZlswXSxcbiAgICBsID0gZlsxXSxcbiAgICBwID0gZlsyXSxcbiAgICBuID0gZlszXSxcbiAgICBoID0gZls0XSxcbiAgICBtID0gZls1XSxcbiAgICBxID0gZls2XSxcbiAgICByID0gZls3XTtcbiAgZm9yIChjID0gMDsgNjQgPiBjOyBjKyspXG4gICAgMTYgPiBjXG4gICAgICA/IChkID0gYltjXSlcbiAgICAgIDogKChkID0gYlsoYyArIDEpICYgMTVdKSxcbiAgICAgICAgKGUgPSBiWyhjICsgMTQpICYgMTVdKSxcbiAgICAgICAgKGQgPSBiW2MgJiAxNV0gPVxuICAgICAgICAgICgoKGQgPj4+IDcpIF4gKGQgPj4+IDE4KSBeIChkID4+PiAzKSBeIChkIDw8IDI1KSBeIChkIDw8IDE0KSkgK1xuICAgICAgICAgICAgKChlID4+PiAxNykgXiAoZSA+Pj4gMTkpIF4gKGUgPj4+IDEwKSBeIChlIDw8IDE1KSBeIChlIDw8IDEzKSkgK1xuICAgICAgICAgICAgYltjICYgMTVdICtcbiAgICAgICAgICAgIGJbKGMgKyA5KSAmIDE1XSkgfFxuICAgICAgICAgIDApKSxcbiAgICAgIChkID1cbiAgICAgICAgZCArXG4gICAgICAgIHIgK1xuICAgICAgICAoKGggPj4+IDYpIF5cbiAgICAgICAgICAoaCA+Pj4gMTEpIF5cbiAgICAgICAgICAoaCA+Pj4gMjUpIF5cbiAgICAgICAgICAoaCA8PCAyNikgXlxuICAgICAgICAgIChoIDw8IDIxKSBeXG4gICAgICAgICAgKGggPDwgNykpICtcbiAgICAgICAgKHEgXiAoaCAmIChtIF4gcSkpKSArXG4gICAgICAgIGdbY10pLFxuICAgICAgKHIgPSBxKSxcbiAgICAgIChxID0gbSksXG4gICAgICAobSA9IGgpLFxuICAgICAgKGggPSAobiArIGQpIHwgMCksXG4gICAgICAobiA9IHApLFxuICAgICAgKHAgPSBsKSxcbiAgICAgIChsID0gayksXG4gICAgICAoayA9XG4gICAgICAgIChkICtcbiAgICAgICAgICAoKGwgJiBwKSBeIChuICYgKGwgXiBwKSkpICtcbiAgICAgICAgICAoKGwgPj4+IDIpIF5cbiAgICAgICAgICAgIChsID4+PiAxMykgXlxuICAgICAgICAgICAgKGwgPj4+IDIyKSBeXG4gICAgICAgICAgICAobCA8PCAzMCkgXlxuICAgICAgICAgICAgKGwgPDwgMTkpIF5cbiAgICAgICAgICAgIChsIDw8IDEwKSkpIHxcbiAgICAgICAgMCk7XG4gIGZbMF0gPSAoZlswXSArIGspIHwgMDtcbiAgZlsxXSA9IChmWzFdICsgbCkgfCAwO1xuICBmWzJdID0gKGZbMl0gKyBwKSB8IDA7XG4gIGZbM10gPSAoZlszXSArIG4pIHwgMDtcbiAgZls0XSA9IChmWzRdICsgaCkgfCAwO1xuICBmWzVdID0gKGZbNV0gKyBtKSB8IDA7XG4gIGZbNl0gPSAoZls2XSArIHEpIHwgMDtcbiAgZls3XSA9IChmWzddICsgcikgfCAwO1xufVxuc2pjbC5wcm5nID0gZnVuY3Rpb24gKGEpIHtcbiAgdGhpcy5jID0gW25ldyBzamNsLmhhc2guc2hhMjU2KCldO1xuICB0aGlzLmkgPSBbMF07XG4gIHRoaXMuSCA9IDA7XG4gIHRoaXMudiA9IHt9O1xuICB0aGlzLkYgPSAwO1xuICB0aGlzLkogPSB7fTtcbiAgdGhpcy5MID0gdGhpcy5mID0gdGhpcy5qID0gdGhpcy5UID0gMDtcbiAgdGhpcy5iID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB0aGlzLmcgPSBbMCwgMCwgMCwgMF07XG4gIHRoaXMuQyA9IHZvaWQgMDtcbiAgdGhpcy5EID0gYTtcbiAgdGhpcy5zID0gITE7XG4gIHRoaXMuQiA9IHsgcHJvZ3Jlc3M6IHt9LCBzZWVkZWQ6IHt9IH07XG4gIHRoaXMubSA9IHRoaXMuUyA9IDA7XG4gIHRoaXMudyA9IDE7XG4gIHRoaXMuQSA9IDI7XG4gIHRoaXMuTyA9IDB4MTAwMDA7XG4gIHRoaXMuSSA9IFswLCA0OCwgNjQsIDk2LCAxMjgsIDE5MiwgMHgxMDAsIDM4NCwgNTEyLCA3NjgsIDEwMjRdO1xuICB0aGlzLlAgPSAzZTQ7XG4gIHRoaXMuTiA9IDgwO1xufTtcbnNqY2wucHJuZy5wcm90b3R5cGUgPSB7XG4gIHJhbmRvbVdvcmRzOiBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBjID0gW10sXG4gICAgICBkO1xuICAgIGQgPSB0aGlzLmlzUmVhZHkoYik7XG4gICAgdmFyIGU7XG4gICAgaWYgKGQgPT09IHRoaXMubSlcbiAgICAgIHRocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5ub3RSZWFkeShcImdlbmVyYXRvciBpc24ndCBzZWVkZWRcIik7XG4gICAgaWYgKGQgJiB0aGlzLkEpIHtcbiAgICAgIGQgPSAhKGQgJiB0aGlzLncpO1xuICAgICAgZSA9IFtdO1xuICAgICAgdmFyIGYgPSAwLFxuICAgICAgICBnO1xuICAgICAgdGhpcy5MID0gZVswXSA9IG5ldyBEYXRlKCkudmFsdWVPZigpICsgdGhpcy5QO1xuICAgICAgZm9yIChnID0gMDsgMTYgPiBnOyBnKyspIGUucHVzaCgoMHgxMDAwMDAwMDAgKiBNYXRoLnJhbmRvbSgpKSB8IDApO1xuICAgICAgZm9yIChcbiAgICAgICAgZyA9IDA7XG4gICAgICAgIGcgPCB0aGlzLmMubGVuZ3RoICYmXG4gICAgICAgICgoZSA9IGUuY29uY2F0KHRoaXMuY1tnXS5maW5hbGl6ZSgpKSksXG4gICAgICAgIChmICs9IHRoaXMuaVtnXSksXG4gICAgICAgICh0aGlzLmlbZ10gPSAwKSxcbiAgICAgICAgZCB8fCAhKHRoaXMuSCAmICgxIDw8IGcpKSk7XG4gICAgICAgIGcrK1xuICAgICAgKTtcbiAgICAgIHRoaXMuSCA+PSAxIDw8IHRoaXMuYy5sZW5ndGggJiZcbiAgICAgICAgKHRoaXMuYy5wdXNoKG5ldyBzamNsLmhhc2guc2hhMjU2KCkpLCB0aGlzLmkucHVzaCgwKSk7XG4gICAgICB0aGlzLmYgLT0gZjtcbiAgICAgIGYgPiB0aGlzLmogJiYgKHRoaXMuaiA9IGYpO1xuICAgICAgdGhpcy5IKys7XG4gICAgICB0aGlzLmIgPSBzamNsLmhhc2guc2hhMjU2Lmhhc2godGhpcy5iLmNvbmNhdChlKSk7XG4gICAgICB0aGlzLkMgPSBuZXcgc2pjbC5jaXBoZXIuYWVzKHRoaXMuYik7XG4gICAgICBmb3IgKFxuICAgICAgICBkID0gMDtcbiAgICAgICAgNCA+IGQgJiYgKCh0aGlzLmdbZF0gPSAodGhpcy5nW2RdICsgMSkgfCAwKSwgIXRoaXMuZ1tkXSk7XG4gICAgICAgIGQrK1xuICAgICAgKTtcbiAgICB9XG4gICAgZm9yIChkID0gMDsgZCA8IGE7IGQgKz0gNClcbiAgICAgIDAgPT09IChkICsgMSkgJSB0aGlzLk8gJiYgeSh0aGlzKSxcbiAgICAgICAgKGUgPSB6KHRoaXMpKSxcbiAgICAgICAgYy5wdXNoKGVbMF0sIGVbMV0sIGVbMl0sIGVbM10pO1xuICAgIHkodGhpcyk7XG4gICAgcmV0dXJuIGMuc2xpY2UoMCwgYSk7XG4gIH0sXG4gIHNldERlZmF1bHRQYXJhbm9pYTogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoXG4gICAgICAwID09PSBhICYmXG4gICAgICBcIlNldHRpbmcgcGFyYW5vaWE9MCB3aWxsIHJ1aW4geW91ciBzZWN1cml0eTsgdXNlIGl0IG9ubHkgZm9yIHRlc3RpbmdcIiAhPT1cbiAgICAgICAgYlxuICAgIClcbiAgICAgIHRocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5pbnZhbGlkKFxuICAgICAgICBcIlNldHRpbmcgcGFyYW5vaWE9MCB3aWxsIHJ1aW4geW91ciBzZWN1cml0eTsgdXNlIGl0IG9ubHkgZm9yIHRlc3RpbmdcIlxuICAgICAgKTtcbiAgICB0aGlzLkQgPSBhO1xuICB9LFxuICBhZGRFbnRyb3B5OiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgIGMgPSBjIHx8IFwidXNlclwiO1xuICAgIHZhciBkLFxuICAgICAgZSxcbiAgICAgIGYgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKSxcbiAgICAgIGcgPSB0aGlzLnZbY10sXG4gICAgICBrID0gdGhpcy5pc1JlYWR5KCksXG4gICAgICBsID0gMDtcbiAgICBkID0gdGhpcy5KW2NdO1xuICAgIHZvaWQgMCA9PT0gZCAmJiAoZCA9IHRoaXMuSltjXSA9IHRoaXMuVCsrKTtcbiAgICB2b2lkIDAgPT09IGcgJiYgKGcgPSB0aGlzLnZbY10gPSAwKTtcbiAgICB0aGlzLnZbY10gPSAodGhpcy52W2NdICsgMSkgJSB0aGlzLmMubGVuZ3RoO1xuICAgIHN3aXRjaCAodHlwZW9mIGEpIHtcbiAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgdm9pZCAwID09PSBiICYmIChiID0gMSk7XG4gICAgICAgIHRoaXMuY1tnXS51cGRhdGUoW2QsIHRoaXMuRisrLCAxLCBiLCBmLCAxLCBhIHwgMF0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgYyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKTtcbiAgICAgICAgaWYgKFwiW29iamVjdCBVaW50MzJBcnJheV1cIiA9PT0gYykge1xuICAgICAgICAgIGUgPSBbXTtcbiAgICAgICAgICBmb3IgKGMgPSAwOyBjIDwgYS5sZW5ndGg7IGMrKykgZS5wdXNoKGFbY10pO1xuICAgICAgICAgIGEgPSBlO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgXCJbb2JqZWN0IEFycmF5XVwiICE9PSBjICYmIChsID0gMSksIGMgPSAwO1xuICAgICAgICAgICAgYyA8IGEubGVuZ3RoICYmICFsO1xuICAgICAgICAgICAgYysrXG4gICAgICAgICAgKVxuICAgICAgICAgICAgXCJudW1iZXJcIiAhPT0gdHlwZW9mIGFbY10gJiYgKGwgPSAxKTtcbiAgICAgICAgaWYgKCFsKSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCA9PT0gYilcbiAgICAgICAgICAgIGZvciAoYyA9IGIgPSAwOyBjIDwgYS5sZW5ndGg7IGMrKylcbiAgICAgICAgICAgICAgZm9yIChlID0gYVtjXTsgMCA8IGU7ICkgYisrLCAoZSA9IGUgPj4+IDEpO1xuICAgICAgICAgIHRoaXMuY1tnXS51cGRhdGUoW2QsIHRoaXMuRisrLCAyLCBiLCBmLCBhLmxlbmd0aF0uY29uY2F0KGEpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgdm9pZCAwID09PSBiICYmIChiID0gYS5sZW5ndGgpO1xuICAgICAgICB0aGlzLmNbZ10udXBkYXRlKFtkLCB0aGlzLkYrKywgMywgYiwgZiwgYS5sZW5ndGhdKTtcbiAgICAgICAgdGhpcy5jW2ddLnVwZGF0ZShhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsID0gMTtcbiAgICB9XG4gICAgaWYgKGwpXG4gICAgICB0aHJvdyBuZXcgc2pjbC5leGNlcHRpb24uYnVnKFxuICAgICAgICBcInJhbmRvbTogYWRkRW50cm9weSBvbmx5IHN1cHBvcnRzIG51bWJlciwgYXJyYXkgb2YgbnVtYmVycyBvciBzdHJpbmdcIlxuICAgICAgKTtcbiAgICB0aGlzLmlbZ10gKz0gYjtcbiAgICB0aGlzLmYgKz0gYjtcbiAgICBrID09PSB0aGlzLm0gJiZcbiAgICAgICh0aGlzLmlzUmVhZHkoKSAhPT0gdGhpcy5tICYmIEEoXCJzZWVkZWRcIiwgTWF0aC5tYXgodGhpcy5qLCB0aGlzLmYpKSxcbiAgICAgIEEoXCJwcm9ncmVzc1wiLCB0aGlzLmdldFByb2dyZXNzKCkpKTtcbiAgfSxcbiAgaXNSZWFkeTogZnVuY3Rpb24gKGEpIHtcbiAgICBhID0gdGhpcy5JW3ZvaWQgMCAhPT0gYSA/IGEgOiB0aGlzLkRdO1xuICAgIHJldHVybiB0aGlzLmogJiYgdGhpcy5qID49IGFcbiAgICAgID8gdGhpcy5pWzBdID4gdGhpcy5OICYmIG5ldyBEYXRlKCkudmFsdWVPZigpID4gdGhpcy5MXG4gICAgICAgID8gdGhpcy5BIHwgdGhpcy53XG4gICAgICAgIDogdGhpcy53XG4gICAgICA6IHRoaXMuZiA+PSBhXG4gICAgICA/IHRoaXMuQSB8IHRoaXMubVxuICAgICAgOiB0aGlzLm07XG4gIH0sXG4gIGdldFByb2dyZXNzOiBmdW5jdGlvbiAoYSkge1xuICAgIGEgPSB0aGlzLklbYSA/IGEgOiB0aGlzLkRdO1xuICAgIHJldHVybiB0aGlzLmogPj0gYSA/IDEgOiB0aGlzLmYgPiBhID8gMSA6IHRoaXMuZiAvIGE7XG4gIH0sXG4gIHN0YXJ0Q29sbGVjdG9yczogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5zKSB7XG4gICAgICB0aGlzLmEgPSB7XG4gICAgICAgIGxvYWRUaW1lQ29sbGVjdG9yOiBCKHRoaXMsIHRoaXMuViksXG4gICAgICAgIG1vdXNlQ29sbGVjdG9yOiBCKHRoaXMsIHRoaXMuVyksXG4gICAgICAgIGtleWJvYXJkQ29sbGVjdG9yOiBCKHRoaXMsIHRoaXMuVSksXG4gICAgICAgIGFjY2VsZXJvbWV0ZXJDb2xsZWN0b3I6IEIodGhpcywgdGhpcy5SKSxcbiAgICAgICAgdG91Y2hDb2xsZWN0b3I6IEIodGhpcywgdGhpcy5YKSxcbiAgICAgIH07XG4gICAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCB0aGlzLmEubG9hZFRpbWVDb2xsZWN0b3IsICExKSxcbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLmEubW91c2VDb2xsZWN0b3IsICExKSxcbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIHRoaXMuYS5rZXlib2FyZENvbGxlY3RvciwgITEpLFxuICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgXCJkZXZpY2Vtb3Rpb25cIixcbiAgICAgICAgICAgIHRoaXMuYS5hY2NlbGVyb21ldGVyQ29sbGVjdG9yLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApLFxuICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuYS50b3VjaENvbGxlY3RvciwgITEpO1xuICAgICAgZWxzZSBpZiAoZG9jdW1lbnQuYXR0YWNoRXZlbnQpXG4gICAgICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KFwib25sb2FkXCIsIHRoaXMuYS5sb2FkVGltZUNvbGxlY3RvciksXG4gICAgICAgICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoXCJvbm1vdXNlbW92ZVwiLCB0aGlzLmEubW91c2VDb2xsZWN0b3IpLFxuICAgICAgICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KFwia2V5cHJlc3NcIiwgdGhpcy5hLmtleWJvYXJkQ29sbGVjdG9yKTtcbiAgICAgIGVsc2UgdGhyb3cgbmV3IHNqY2wuZXhjZXB0aW9uLmJ1ZyhcImNhbid0IGF0dGFjaCBldmVudFwiKTtcbiAgICAgIHRoaXMucyA9ICEwO1xuICAgIH1cbiAgfSxcbiAgc3RvcENvbGxlY3RvcnM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnMgJiZcbiAgICAgICh3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lclxuICAgICAgICA/ICh3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgdGhpcy5hLmxvYWRUaW1lQ29sbGVjdG9yLCAhMSksXG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5hLm1vdXNlQ29sbGVjdG9yLCAhMSksXG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCB0aGlzLmEua2V5Ym9hcmRDb2xsZWN0b3IsICExKSxcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgIFwiZGV2aWNlbW90aW9uXCIsXG4gICAgICAgICAgICB0aGlzLmEuYWNjZWxlcm9tZXRlckNvbGxlY3RvcixcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLmEudG91Y2hDb2xsZWN0b3IsICExKSlcbiAgICAgICAgOiBkb2N1bWVudC5kZXRhY2hFdmVudCAmJlxuICAgICAgICAgIChkb2N1bWVudC5kZXRhY2hFdmVudChcIm9ubG9hZFwiLCB0aGlzLmEubG9hZFRpbWVDb2xsZWN0b3IpLFxuICAgICAgICAgIGRvY3VtZW50LmRldGFjaEV2ZW50KFwib25tb3VzZW1vdmVcIiwgdGhpcy5hLm1vdXNlQ29sbGVjdG9yKSxcbiAgICAgICAgICBkb2N1bWVudC5kZXRhY2hFdmVudChcImtleXByZXNzXCIsIHRoaXMuYS5rZXlib2FyZENvbGxlY3RvcikpLFxuICAgICAgKHRoaXMucyA9ICExKSk7XG4gIH0sXG4gIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdGhpcy5CW2FdW3RoaXMuUysrXSA9IGI7XG4gIH0sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGMsXG4gICAgICBkLFxuICAgICAgZSA9IHRoaXMuQlthXSxcbiAgICAgIGYgPSBbXTtcbiAgICBmb3IgKGQgaW4gZSkgZS5oYXNPd25Qcm9wZXJ0eShkKSAmJiBlW2RdID09PSBiICYmIGYucHVzaChkKTtcbiAgICBmb3IgKGMgPSAwOyBjIDwgZi5sZW5ndGg7IGMrKykgKGQgPSBmW2NdKSwgZGVsZXRlIGVbZF07XG4gIH0sXG4gIFU6IGZ1bmN0aW9uICgpIHtcbiAgICBDKHRoaXMsIDEpO1xuICB9LFxuICBXOiBmdW5jdGlvbiAoYSkge1xuICAgIHZhciBiLCBjO1xuICAgIHRyeSB7XG4gICAgICAoYiA9IGEueCB8fCBhLmNsaWVudFggfHwgYS5vZmZzZXRYIHx8IDApLFxuICAgICAgICAoYyA9IGEueSB8fCBhLmNsaWVudFkgfHwgYS5vZmZzZXRZIHx8IDApO1xuICAgIH0gY2F0Y2ggKGQpIHtcbiAgICAgIGMgPSBiID0gMDtcbiAgICB9XG4gICAgMCAhPSBiICYmIDAgIT0gYyAmJiB0aGlzLmFkZEVudHJvcHkoW2IsIGNdLCAyLCBcIm1vdXNlXCIpO1xuICAgIEModGhpcywgMCk7XG4gIH0sXG4gIFg6IGZ1bmN0aW9uIChhKSB7XG4gICAgYSA9IGEudG91Y2hlc1swXSB8fCBhLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgIHRoaXMuYWRkRW50cm9weShbYS5wYWdlWCB8fCBhLmNsaWVudFgsIGEucGFnZVkgfHwgYS5jbGllbnRZXSwgMSwgXCJ0b3VjaFwiKTtcbiAgICBDKHRoaXMsIDApO1xuICB9LFxuICBWOiBmdW5jdGlvbiAoKSB7XG4gICAgQyh0aGlzLCAyKTtcbiAgfSxcbiAgUjogZnVuY3Rpb24gKGEpIHtcbiAgICBhID1cbiAgICAgIGEuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS54IHx8XG4gICAgICBhLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueSB8fFxuICAgICAgYS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5Lno7XG4gICAgaWYgKHdpbmRvdy5vcmllbnRhdGlvbikge1xuICAgICAgdmFyIGIgPSB3aW5kb3cub3JpZW50YXRpb247XG4gICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgYiAmJiB0aGlzLmFkZEVudHJvcHkoYiwgMSwgXCJhY2NlbGVyb21ldGVyXCIpO1xuICAgIH1cbiAgICBhICYmIHRoaXMuYWRkRW50cm9weShhLCAyLCBcImFjY2VsZXJvbWV0ZXJcIik7XG4gICAgQyh0aGlzLCAwKTtcbiAgfSxcbn07XG5mdW5jdGlvbiBBKGEsIGIpIHtcbiAgdmFyIGMsXG4gICAgZCA9IHNqY2wucmFuZG9tLkJbYV0sXG4gICAgZSA9IFtdO1xuICBmb3IgKGMgaW4gZCkgZC5oYXNPd25Qcm9wZXJ0eShjKSAmJiBlLnB1c2goZFtjXSk7XG4gIGZvciAoYyA9IDA7IGMgPCBlLmxlbmd0aDsgYysrKSBlW2NdKGIpO1xufVxuZnVuY3Rpb24gQyhhLCBiKSB7XG4gIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiB3aW5kb3cgJiZcbiAgd2luZG93LnBlcmZvcm1hbmNlICYmXG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3dcbiAgICA/IGEuYWRkRW50cm9weSh3aW5kb3cucGVyZm9ybWFuY2Uubm93KCksIGIsIFwibG9hZHRpbWVcIilcbiAgICA6IGEuYWRkRW50cm9weShuZXcgRGF0ZSgpLnZhbHVlT2YoKSwgYiwgXCJsb2FkdGltZVwiKTtcbn1cbmZ1bmN0aW9uIHkoYSkge1xuICBhLmIgPSB6KGEpLmNvbmNhdCh6KGEpKTtcbiAgYS5DID0gbmV3IHNqY2wuY2lwaGVyLmFlcyhhLmIpO1xufVxuZnVuY3Rpb24geihhKSB7XG4gIGZvciAodmFyIGIgPSAwOyA0ID4gYiAmJiAoKGEuZ1tiXSA9IChhLmdbYl0gKyAxKSB8IDApLCAhYS5nW2JdKTsgYisrKTtcbiAgcmV0dXJuIGEuQy5lbmNyeXB0KGEuZyk7XG59XG5mdW5jdGlvbiBCKGEsIGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBiLmFwcGx5KGEsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5zamNsLnJhbmRvbSA9IG5ldyBzamNsLnBybmcoNik7XG5hOiB0cnkge1xuICB2YXIgRCwgRSwgRiwgRztcbiAgaWYgKChHID0gXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykpIHtcbiAgICB2YXIgSDtcbiAgICB0cnkge1xuICAgICAgSCA9IF9kZXJlcV8oXCJjcnlwdG9cIik7XG4gICAgfSBjYXRjaCAoYSkge1xuICAgICAgSCA9IG51bGw7XG4gICAgfVxuICAgIEcgPSBFID0gSDtcbiAgfVxuICBpZiAoRyAmJiBFLnJhbmRvbUJ5dGVzKVxuICAgIChEID0gRS5yYW5kb21CeXRlcygxMjgpKSxcbiAgICAgIChEID0gbmV3IFVpbnQzMkFycmF5KG5ldyBVaW50OEFycmF5KEQpLmJ1ZmZlcikpLFxuICAgICAgc2pjbC5yYW5kb20uYWRkRW50cm9weShELCAxMDI0LCBcImNyeXB0b1sncmFuZG9tQnl0ZXMnXVwiKTtcbiAgZWxzZSBpZiAoXG4gICAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHdpbmRvdyAmJlxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBVaW50MzJBcnJheVxuICApIHtcbiAgICBGID0gbmV3IFVpbnQzMkFycmF5KDMyKTtcbiAgICBpZiAod2luZG93LmNyeXB0byAmJiB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcylcbiAgICAgIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKEYpO1xuICAgIGVsc2UgaWYgKHdpbmRvdy5tc0NyeXB0byAmJiB3aW5kb3cubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKVxuICAgICAgd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhGKTtcbiAgICBlbHNlIGJyZWFrIGE7XG4gICAgc2pjbC5yYW5kb20uYWRkRW50cm9weShGLCAxMDI0LCBcImNyeXB0b1snZ2V0UmFuZG9tVmFsdWVzJ11cIik7XG4gIH1cbn0gY2F0Y2ggKGEpIHtcbiAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHdpbmRvdyAmJlxuICAgIHdpbmRvdy5jb25zb2xlICYmXG4gICAgKGNvbnNvbGUubG9nKFwiVGhlcmUgd2FzIGFuIGVycm9yIGNvbGxlY3RpbmcgZW50cm9weSBmcm9tIHRoZSBicm93c2VyOlwiKSxcbiAgICBjb25zb2xlLmxvZyhhKSk7XG59XG5cInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzICYmIChtb2R1bGUuZXhwb3J0cyA9IHNqY2wpO1xuXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGVmaW5lICYmXG4gIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzamNsO1xuICB9KTtcblxufSx7XCJjcnlwdG9cIjp1bmRlZmluZWR9XSwxMDE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuR29vZ2xlIFBheW1lbnQgLSBDcmVhdGlvbiBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gW2NyZWF0aW5nIHRoZSBHb29nbGUgUGF5bWVudCBjb21wb25lbnRdKC4vbW9kdWxlLWJyYWludHJlZS13ZWJfZ29vZ2xlLXBheW1lbnQuaHRtbCMuY3JlYXRlKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IEdPT0dMRV9QQVlNRU5UX05PVF9FTkFCTEVEIE9jY3VycyB3aGVuIEdvb2dsZSBQYXkgaXMgbm90IGVuYWJsZWQgb24gdGhlIEJyYWludHJlZSBjb250cm9sIHBhbmVsLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gR09PR0xFX1BBWU1FTlRfVU5TVVBQT1JURURfVkVSU0lPTiBPY2N1cnMgd2hlbiBhIEdvb2dsZSBQYXkgdmVyc2lvbiBpcyB1c2VkIHRoYXQgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgQnJhaW50cmVlIFNESy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLkdvb2dsZSBQYXltZW50IC0gcGFyc2VSZXNwb25zZSBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gW3BhcnNpbmcgdGhlIHJlc3BvbnNlIGZyb20gR29vZ2xlXSguL0dvb2dsZVBheW1lbnQuaHRtbCNwYXJzZVJlc3BvbnNlKS5cbiAqIEBwcm9wZXJ0eSB7VU5LTk9XTn0gR09PR0xFX1BBWU1FTlRfR0FURVdBWV9FUlJPUiBPY2N1cnMgd2hlbiBHb29nbGUgUGF5IGNvdWxkIG5vdCBiZSB0b2tlbml6ZWQuXG4gKi9cblxudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBHT09HTEVfUEFZTUVOVF9OT1RfRU5BQkxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiR09PR0xFX1BBWU1FTlRfTk9UX0VOQUJMRURcIixcbiAgICBtZXNzYWdlOiBcIkdvb2dsZSBQYXkgaXMgbm90IGVuYWJsZWQgZm9yIHRoaXMgbWVyY2hhbnQuXCIsXG4gIH0sXG4gIEdPT0dMRV9QQVlNRU5UX0dBVEVXQVlfRVJST1I6IHtcbiAgICBjb2RlOiBcIkdPT0dMRV9QQVlNRU5UX0dBVEVXQVlfRVJST1JcIixcbiAgICBtZXNzYWdlOlxuICAgICAgXCJUaGVyZSB3YXMgYW4gZXJyb3Igd2hlbiB0b2tlbml6aW5nIHRoZSBHb29nbGUgUGF5IHBheW1lbnQgbWV0aG9kLlwiLFxuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLlVOS05PV04sXG4gIH0sXG4gIEdPT0dMRV9QQVlNRU5UX1VOU1VQUE9SVEVEX1ZFUlNJT046IHtcbiAgICBjb2RlOiBcIkdPT0dMRV9QQVlNRU5UX1VOU1VQUE9SVEVEX1ZFUlNJT05cIixcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgfSxcbn07XG5cbn0se1wiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNH1dLDEwMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFuYWx5dGljcyA9IF9kZXJlcV8oXCIuLi9saWIvYW5hbHl0aWNzXCIpO1xudmFyIGFzc2lnbiA9IF9kZXJlcV8oXCIuLi9saWIvYXNzaWduXCIpLmFzc2lnbjtcbnZhciBjb252ZXJ0TWV0aG9kc1RvRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2NvbnZlcnQtbWV0aG9kcy10by1lcnJvclwiKTtcbnZhciBmaW5kID0gX2RlcmVxXyhcIi4uL2xpYi9maW5kXCIpO1xudmFyIGdlbmVyYXRlR29vZ2xlUGF5Q29uZmlndXJhdGlvbiA9IF9kZXJlcV8oXCIuLi9saWIvZ2VuZXJhdGUtZ29vZ2xlLXBheS1jb25maWd1cmF0aW9uXCIpO1xudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpO1xudmFyIG1ldGhvZHMgPSBfZGVyZXFfKFwiLi4vbGliL21ldGhvZHNcIik7XG52YXIgd3JhcFByb21pc2UgPSBfZGVyZXFfKFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIik7XG5cbnZhciBDUkVBVEVfUEFZTUVOVF9EQVRBX1JFUVVFU1RfTUVUSE9EUyA9IHtcbiAgMTogXCJfY3JlYXRlVjFQYXltZW50RGF0YVJlcXVlc3RcIixcbiAgMjogXCJfY3JlYXRlVjJQYXltZW50RGF0YVJlcXVlc3RcIixcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gR29vZ2xlUGF5bWVudH50b2tlbml6ZVBheWxvYWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBub25jZSBUaGUgcGF5bWVudCBtZXRob2Qgbm9uY2UuXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGV0YWlscyBBZGRpdGlvbmFsIGFjY291bnQgZGV0YWlscy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmNhcmRUeXBlIFR5cGUgb2YgY2FyZCwgZXg6IFZpc2EsIE1hc3RlckNhcmQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5sYXN0Rm91ciBMYXN0IGZvdXIgZGlnaXRzIG9mIGNhcmQgbnVtYmVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMubGFzdFR3byBMYXN0IHR3byBkaWdpdHMgb2YgY2FyZCBudW1iZXIuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGRldGFpbHMuaXNOZXR3b3JrVG9rZW5pemVkIFRydWUgaWYgdGhlIGNhcmQgaXMgbmV0d29yayB0b2tlbml6ZWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5iaW4gRmlyc3Qgc2l4IGRpZ2l0cyBvZiBjYXJkIG51bWJlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXNjcmlwdGlvbiBBIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIHBheW1lbnQgbWV0aG9kIHR5cGUsIGBDcmVkaXRDYXJkYCBvciBgQW5kcm9pZFBheUNhcmRgLlxuICogQHByb3BlcnR5IHtvYmplY3R9IGJpbkRhdGEgSW5mb3JtYXRpb24gYWJvdXQgdGhlIGNhcmQgYmFzZWQgb24gdGhlIGJpbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmNvbW1lcmNpYWwgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuY291bnRyeU9mSXNzdWFuY2UgVGhlIGNvdW50cnkgb2YgaXNzdWFuY2UuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5kZWJpdCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5kdXJiaW5SZWd1bGF0ZWQgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuaGVhbHRoY2FyZSBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5pc3N1aW5nQmFuayBUaGUgaXNzdWluZyBiYW5rLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEucGF5cm9sbCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5wcmVwYWlkIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLnByb2R1Y3RJZCBUaGUgcHJvZHVjdCBpZC5cbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBHb29nbGVQYXltZW50XG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBHb29nbGUgUGF5bWVudCB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvZ29vZ2xlLXBheW1lbnQuY3JlYXRlIGNyZWF0ZX0gb3B0aW9ucy5cbiAqIEBkZXNjcmlwdGlvbiA8c3Ryb25nPkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gVXNlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9nb29nbGUtcGF5bWVudC5jcmVhdGV8YnJhaW50cmVlLXdlYi5nb29nbGUtcGF5bWVudC5jcmVhdGV9IGluc3RlYWQuPC9zdHJvbmc+XG4gKiBAY2xhc3NkZXNjIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIEdvb2dsZSBQYXltZW50IGNvbXBvbmVudCBwcm9kdWNlZCBieSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvZ29vZ2xlLXBheW1lbnQuY3JlYXRlfGJyYWludHJlZS13ZWIvZ29vZ2xlLXBheW1lbnQuY3JlYXRlfS4gSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgaGF2ZSBtZXRob2RzIGZvciBpbml0aWFsaXppbmcgdGhlIEdvb2dsZSBQYXkgZmxvdy5cbiAqL1xuZnVuY3Rpb24gR29vZ2xlUGF5bWVudChvcHRpb25zKSB7XG4gIHRoaXMuX2NyZWF0ZVByb21pc2UgPSBvcHRpb25zLmNyZWF0ZVByb21pc2U7XG4gIHRoaXMuX2NsaWVudCA9IG9wdGlvbnMuY2xpZW50O1xuICB0aGlzLl91c2VEZWZlcnJlZENsaWVudCA9IG9wdGlvbnMudXNlRGVmZXJyZWRDbGllbnQ7XG4gIC8vIE5FWFRfTUFKT1JfVkVSU0lPTiB0aGlzIHNob3VsZCBiZSB1cGRhdGVkIHRvIDIgKG9yIHdoYXRldmVyIHRoZSBjdXJyZW50IGxhdGVzdCB2ZXJzaW9uIGlzKVxuICB0aGlzLl9nb29nbGVQYXlWZXJzaW9uID0gb3B0aW9ucy5nb29nbGVQYXlWZXJzaW9uIHx8IDE7XG4gIHRoaXMuX2dvb2dsZU1lcmNoYW50SWQgPSBvcHRpb25zLmdvb2dsZU1lcmNoYW50SWQ7XG5cbiAgaWYgKHRoaXMuX2lzVW5zdXBwb3J0ZWRHb29nbGVQYXlBUElWZXJzaW9uKCkpIHtcbiAgICB0aHJvdyBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgY29kZTogZXJyb3JzLkdPT0dMRV9QQVlNRU5UX1VOU1VQUE9SVEVEX1ZFUlNJT04uY29kZSxcbiAgICAgIG1lc3NhZ2U6XG4gICAgICAgIFwiVGhlIEJyYWludHJlZSBTREsgZG9lcyBub3Qgc3VwcG9ydCBHb29nbGUgUGF5IHZlcnNpb24gXCIgK1xuICAgICAgICB0aGlzLl9nb29nbGVQYXlWZXJzaW9uICtcbiAgICAgICAgXCIuIFBsZWFzZSB1cGdyYWRlIHRoZSB2ZXJzaW9uIG9mIHlvdXIgQnJhaW50cmVlIFNESyBhbmQgY29udGFjdCBzdXBwb3J0IGlmIHRoaXMgZXJyb3IgcGVyc2lzdHMuXCIsXG4gICAgICB0eXBlOiBlcnJvcnMuR09PR0xFX1BBWU1FTlRfVU5TVVBQT1JURURfVkVSU0lPTi50eXBlLFxuICAgIH0pO1xuICB9XG59XG5cbkdvb2dsZVBheW1lbnQucHJvdG90eXBlLl93YWl0Rm9yQ2xpZW50ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fY2xpZW50KSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZVByb21pc2UudGhlbihcbiAgICBmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG59O1xuXG5Hb29nbGVQYXltZW50LnByb3RvdHlwZS5faXNVbnN1cHBvcnRlZEdvb2dsZVBheUFQSVZlcnNpb24gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGlmIHdlIGRvbid0IGhhdmUgY3JlYXRlUGF5bWVudERhdHFSZXF1ZXN0IG1ldGhvZCBmb3IgdGhlIHNwZWNpZmljXG4gIC8vIEFQSSB2ZXJzaW9uLCB0aGVuIHRoZSB2ZXJzaW9uIGlzIG5vdCBzdXBwb3J0ZWRcbiAgcmV0dXJuICEodGhpcy5fZ29vZ2xlUGF5VmVyc2lvbiBpbiBDUkVBVEVfUEFZTUVOVF9EQVRBX1JFUVVFU1RfTUVUSE9EUyk7XG59O1xuXG5Hb29nbGVQYXltZW50LnByb3RvdHlwZS5fZ2V0RGVmYXVsdENvbmZpZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLl9kZWZhdWx0Q29uZmlnKSB7XG4gICAgdGhpcy5fZGVmYXVsdENvbmZpZyA9IGdlbmVyYXRlR29vZ2xlUGF5Q29uZmlndXJhdGlvbihcbiAgICAgIHRoaXMuX2NsaWVudC5nZXRDb25maWd1cmF0aW9uKCksXG4gICAgICB0aGlzLl9nb29nbGVQYXlWZXJzaW9uLFxuICAgICAgdGhpcy5fZ29vZ2xlTWVyY2hhbnRJZFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fZGVmYXVsdENvbmZpZztcbn07XG5cbkdvb2dsZVBheW1lbnQucHJvdG90eXBlLl9jcmVhdGVWMVBheW1lbnREYXRhUmVxdWVzdCA9IGZ1bmN0aW9uIChcbiAgcGF5bWVudERhdGFSZXF1ZXN0XG4pIHtcbiAgdmFyIGRlZmF1bHRDb25maWcgPSB0aGlzLl9nZXREZWZhdWx0Q29uZmlnKCk7XG4gIHZhciBvdmVycmlkZUNhcmROZXR3b3JrcyA9XG4gICAgcGF5bWVudERhdGFSZXF1ZXN0LmNhcmRSZXF1aXJlbWVudHMgJiZcbiAgICBwYXltZW50RGF0YVJlcXVlc3QuY2FyZFJlcXVpcmVtZW50cy5hbGxvd2VkQ2FyZE5ldHdvcmtzO1xuICB2YXIgZGVmYXVsdENvbmZpZ0NhcmROZXR3b3JrcyA9XG4gICAgZGVmYXVsdENvbmZpZy5jYXJkUmVxdWlyZW1lbnRzLmFsbG93ZWRDYXJkTmV0d29ya3M7XG4gIHZhciBhbGxvd2VkQ2FyZE5ldHdvcmtzID0gb3ZlcnJpZGVDYXJkTmV0d29ya3MgfHwgZGVmYXVsdENvbmZpZ0NhcmROZXR3b3JrcztcblxuICBwYXltZW50RGF0YVJlcXVlc3QgPSBhc3NpZ24oe30sIGRlZmF1bHRDb25maWcsIHBheW1lbnREYXRhUmVxdWVzdCk7XG5cbiAgLy8gdGhpcyB3YXkgd2UgY2FuIHByZXNlcnZlIGFsbG93ZWRDYXJkTmV0d29ya3MgZnJvbSBkZWZhdWx0IGludGVncmF0aW9uXG4gIC8vIGlmIG1lcmNoYW50IGRpZCBub3QgcGFzcyBhbnkgaW4gYGNhcmRSZXF1aXJlbWVudHNgXG4gIHBheW1lbnREYXRhUmVxdWVzdC5jYXJkUmVxdWlyZW1lbnRzLmFsbG93ZWRDYXJkTmV0d29ya3MgPSBhbGxvd2VkQ2FyZE5ldHdvcmtzO1xuXG4gIHJldHVybiBwYXltZW50RGF0YVJlcXVlc3Q7XG59O1xuXG5Hb29nbGVQYXltZW50LnByb3RvdHlwZS5fY3JlYXRlVjJQYXltZW50RGF0YVJlcXVlc3QgPSBmdW5jdGlvbiAoXG4gIHBheW1lbnREYXRhUmVxdWVzdFxuKSB7XG4gIHZhciBkZWZhdWx0Q29uZmlnID0gdGhpcy5fZ2V0RGVmYXVsdENvbmZpZygpO1xuXG4gIGlmIChwYXltZW50RGF0YVJlcXVlc3QuYWxsb3dlZFBheW1lbnRNZXRob2RzKSB7XG4gICAgcGF5bWVudERhdGFSZXF1ZXN0LmFsbG93ZWRQYXltZW50TWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXltZW50TWV0aG9kKSB7XG4gICAgICB2YXIgZGVmYXVsdFBheW1lbnRNZXRob2QgPSBmaW5kKFxuICAgICAgICBkZWZhdWx0Q29uZmlnLmFsbG93ZWRQYXltZW50TWV0aG9kcyxcbiAgICAgICAgXCJ0eXBlXCIsXG4gICAgICAgIHBheW1lbnRNZXRob2QudHlwZVxuICAgICAgKTtcblxuICAgICAgaWYgKGRlZmF1bHRQYXltZW50TWV0aG9kKSB7XG4gICAgICAgIGFwcGx5RGVmYXVsdHNUb1BheW1lbnRNZXRob2RDb25maWd1cmF0aW9uKFxuICAgICAgICAgIHBheW1lbnRNZXRob2QsXG4gICAgICAgICAgZGVmYXVsdFBheW1lbnRNZXRob2RcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHBheW1lbnREYXRhUmVxdWVzdCA9IGFzc2lnbih7fSwgZGVmYXVsdENvbmZpZywgcGF5bWVudERhdGFSZXF1ZXN0KTtcblxuICByZXR1cm4gcGF5bWVudERhdGFSZXF1ZXN0O1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBjb25maWd1cmF0aW9uIG9iamVjdCBmb3IgdXNlIGluIHRoZSBgbG9hZFBheW1lbnREYXRhYCBtZXRob2QuXG4gKlxuICogKipOb3RlKio6IFZlcnNpb24gMSBvZiB0aGUgR29vZ2xlIFBheSBBcGkgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZWNvbWUgdW5zdXBwb3J0ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi4gVW50aWwgdGhlbiwgdmVyc2lvbiAxIHdpbGwgY29udGludWUgdG8gYmUgdXNlZCBieSBkZWZhdWx0LCBhbmQgdmVyc2lvbiAxIHNjaGVtYSBwYXJhbWV0ZXJzIGFuZCBvdmVycmlkZXMgd2lsbCByZW1haW4gZnVuY3Rpb25hbCBvbiBleGlzdGluZyBpbnRlZ3JhdGlvbnMuIEhvd2V2ZXIsIG5ldyBpbnRlZ3JhdGlvbnMgYW5kIGFsbCBmb2xsb3dpbmcgZXhhbXBsZXMgd2lsbCBiZSBwcmVzZW50ZWQgaW4gdGhlIEdvb2dsZVBheSB2ZXJzaW9uIDIgc2NoZW1hLiBTZWUgW0dvb2dsZSBQYXkncyB1cGdyYWRlIGd1aWRlXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wYXkvYXBpL3dlYi9ndWlkZXMvcmVzb3VyY2VzL3VwZGF0ZS10by1sYXRlc3QtdmVyc2lvbikgdG8gc2VlIGhvdyB0byB1cGRhdGUgeW91ciBpbnRlZ3JhdGlvbi5cbiAqXG4gKiBJZiBgb3B0aW9ucy5nb29nbGVQYXlWZXJzaW9uID09PSAyYCB3YXMgc2V0IGR1cmluZyB0aGUgaW5pdGlhbCB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvZ29vZ2xlLXBheW1lbnQuY3JlYXRlfGNyZWF0ZX0gY2FsbCwgb3ZlcnJpZGVzIG11c3QgbWF0Y2ggdGhlIEdvb2dsZSBQYXkgdjIgc2NoZW1hIHRvIGJlIHZhbGlkLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvdmVycmlkZXMgVGhlIHN1cHBsaWVkIHBhcmFtZXRlcnMgZm9yIGNyZWF0aW5nIHRoZSBQYXltZW50RGF0YVJlcXVlc3Qgb2JqZWN0LiBSZXF1aXJlZCBwYXJhbWV0ZXJzIGFyZTpcbiAqICBAcGFyYW0ge29iamVjdH0gb3ZlcnJpZGVzLnRyYW5zYWN0aW9uSW5mbyBPYmplY3QgYWNjb3JkaW5nIHRvIHRoZSBbR29vZ2xlIFBheSBUcmFuc2FjdGlvbiBJbmZvXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wYXkvYXBpL3dlYi9yZWZlcmVuY2Uvb2JqZWN0I1RyYW5zYWN0aW9uSW5mbykgc3BlYy5cbiAqICBPcHRpb25hbGx5LCBhbnkgb2YgdGhlIHBhcmFtZXRlcnMgaW4gdGhlIFtQYXltZW50RGF0YVJlcXVlc3RdKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3BheS9hcGkvd2ViL3JlZmVyZW5jZS9vYmplY3QjUGF5bWVudERhdGFSZXF1ZXN0KSBwYXJhbWV0ZXJzIGNhbiBiZSBvdmVycmlkZGVuLCBidXQgbm90ZSB0aGF0IGl0IGlzIHJlY29tbWVuZGVkIG9ubHkgdG8gb3ZlcnJpZGUgdG9wIGxldmVsIHBhcmFtZXRlcnMgdG8gYXZvaWQgc3F1YXNoaW5nIGRlZXBseSBuZXN0ZWQgY29uZmlndXJhdGlvbiBvYmplY3RzLiBBbiBleGFtcGxlIGNhbiBiZSBmb3VuZCBiZWxvdyBzaG93aW5nIGhvdyB0byBzYWZlbHkgZWRpdCB0aGVzZSBkZWVwbHkgbmVzdGVkIG9iamVjdHMuXG4gKiBAZXhhbXBsZVxuICogdmFyIHBheW1lbnREYXRhUmVxdWVzdCA9IGdvb2dsZVBheW1lbnRJbnN0YW5jZS5jcmVhdGVQYXltZW50RGF0YVJlcXVlc3Qoe1xuICogICBtZXJjaGFudEluZm86IHtcbiAqICAgICBtZXJjaGFudElkOiAnbXktbWVyY2hhbnQtaWQtZnJvbS1nb29nbGUnXG4gKiAgIH0sXG4gKiAgIHRyYW5zYWN0aW9uSW5mbzoge1xuICogICAgIGN1cnJlbmN5Q29kZTogJ1VTRCcsXG4gKiAgICAgdG90YWxQcmljZVN0YXR1czogJ0ZJTkFMJyxcbiAqICAgICB0b3RhbFByaWNlOiAnMTAwLjAwJ1xuICogICB9XG4gKiB9KTtcbiAqXG4gKiAvLyBVcGRhdGUgY2FyZCBwYXltZW50IG1ldGhvZHMgdG8gcmVxdWlyZSBiaWxsaW5nIGFkZHJlc3NcbiAqIHZhciBjYXJkUGF5bWVudE1ldGhvZCA9IHBheW1lbnREYXRhUmVxdWVzdC5hbGxvd2VkUGF5bWVudE1ldGhvZHM7XG4gKiBjYXJkUGF5bWVudE1ldGhvZC5wYXJhbWV0ZXJzLmJpbGxpbmdBZGRyZXNzUmVxdWlyZWQgPSB0cnVlO1xuICogY2FyZFBheW1lbnRNZXRob2QucGFyYW1ldGVycy5iaWxsaW5nQWRkcmVzc1BhcmFtZXRlcnMgPSB7XG4gKiAgIGZvcm1hdDogJ0ZVTEwnLFxuICogICBwaG9uZU51bWJlclJlcXVpcmVkOiB0cnVlXG4gKiB9O1xuICpcbiAqIHZhciBwYXltZW50c0NsaWVudCA9IG5ldyBnb29nbGUucGF5bWVudHMuYXBpLlBheW1lbnRzQ2xpZW50KHtcbiAqICAgZW52aXJvbm1lbnQ6ICdURVNUJyAvLyBvciAnUFJPRFVDVElPTidcbiAqIH0pXG4gKlxuICogcGF5bWVudHNDbGllbnQubG9hZFBheW1lbnREYXRhKHBheW1lbnREYXRhUmVxdWVzdCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAqICAgLy8gaGFuZGxlIHJlc3BvbnNlIHdpdGggZ29vZ2xlUGF5bWVudEluc3RhbmNlLnBhcnNlUmVzcG9uc2VcbiAqICAgLy8gKHNlZSBiZWxvdylcbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+V2l0aCBkZWZlcnJlZCBjbGllbnQ8L2NhcHRpb24+XG4gKiBnb29nbGVQYXltZW50SW5zdGFuY2UuY3JlYXRlUGF5bWVudERhdGFSZXF1ZXN0KHtcbiAqICAgbWVyY2hhbnRJbmZvOiB7XG4gKiAgICAgbWVyY2hhbnRJZDogJ215LW1lcmNoYW50LWlkLWZyb20tZ29vZ2xlJ1xuICogICB9LFxuICogICB0cmFuc2FjdGlvbkluZm86IHtcbiAqICAgICBjdXJyZW5jeUNvZGU6ICdVU0QnLFxuICogICAgIHRvdGFsUHJpY2VTdGF0dXM6ICdGSU5BTCcsXG4gKiAgICAgdG90YWxQcmljZTogJzEwMC4wMCdcbiAqICAgfVxuICogfSkudGhlbihmdW5jdGlvbiAocGF5bWVudERhdGFSZXF1ZXN0KSB7XG4gKiAgIC8vIFVwZGF0ZSBjYXJkIHBheW1lbnQgbWV0aG9kcyB0byByZXF1aXJlIGJpbGxpbmcgYWRkcmVzc1xuICogICB2YXIgY2FyZFBheW1lbnRNZXRob2QgPSBwYXltZW50RGF0YVJlcXVlc3QuYWxsb3dlZFBheW1lbnRNZXRob2RzO1xuICogICBjYXJkUGF5bWVudE1ldGhvZC5wYXJhbWV0ZXJzLmJpbGxpbmdBZGRyZXNzUmVxdWlyZWQgPSB0cnVlO1xuICogICBjYXJkUGF5bWVudE1ldGhvZC5wYXJhbWV0ZXJzLmJpbGxpbmdBZGRyZXNzUGFyYW1ldGVycyA9IHtcbiAqICAgICBmb3JtYXQ6ICdGVUxMJyxcbiAqICAgICBwaG9uZU51bWJlclJlcXVpcmVkOiB0cnVlXG4gKiAgIH07XG4gKlxuICogICB2YXIgcGF5bWVudHNDbGllbnQgPSBuZXcgZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50c0NsaWVudCh7XG4gKiAgICAgZW52aXJvbm1lbnQ6ICdURVNUJyAvLyBvciAnUFJPRFVDVElPTidcbiAqICAgfSlcbiAqXG4gKiAgIHJldHVybiBwYXltZW50c0NsaWVudC5sb2FkUGF5bWVudERhdGEocGF5bWVudERhdGFSZXF1ZXN0KTtcbiAqIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gKiAgIC8vIGhhbmRsZSByZXNwb25zZSB3aXRoIGdvb2dsZVBheW1lbnRJbnN0YW5jZS5wYXJzZVJlc3BvbnNlXG4gKiAgIC8vIChzZWUgYmVsb3cpXG4gKiB9KTtcbiAqIEByZXR1cm5zIHtvYmplY3R8UHJvbWlzZX0gUmV0dXJucyBhIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBHb29nbGUgUGF5bWVudERhdGFSZXF1ZXN0LiBJZiBpbnN0YW50aWF0ZWQgd2l0aCBgdXNlRGVmZXJyZWRDbGllbnRgIGFuZCBhbiBgYXV0aG9yaXphdGlvbmAgaXQgd2lsbCByZXR1cm4gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgY29uZmlndXJhdGlvbi5cbiAqL1xuR29vZ2xlUGF5bWVudC5wcm90b3R5cGUuY3JlYXRlUGF5bWVudERhdGFSZXF1ZXN0ID0gZnVuY3Rpb24gKG92ZXJyaWRlcykge1xuICBpZiAoIXRoaXMuX3VzZURlZmVycmVkQ2xpZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZVBheW1lbnREYXRhUmVxdWVzdFN5bmNyb25vdXNseShvdmVycmlkZXMpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX3dhaXRGb3JDbGllbnQoKS50aGVuKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVQYXltZW50RGF0YVJlcXVlc3RTeW5jcm9ub3VzbHkob3ZlcnJpZGVzKTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcbn07XG5cbkdvb2dsZVBheW1lbnQucHJvdG90eXBlLl9jcmVhdGVQYXltZW50RGF0YVJlcXVlc3RTeW5jcm9ub3VzbHkgPSBmdW5jdGlvbiAoXG4gIG92ZXJyaWRlc1xuKSB7XG4gIHZhciBwYXltZW50RGF0YVJlcXVlc3QgPSBhc3NpZ24oe30sIG92ZXJyaWRlcyk7XG4gIHZhciB2ZXJzaW9uID0gdGhpcy5fZ29vZ2xlUGF5VmVyc2lvbjtcbiAgdmFyIGNyZWF0ZVBheW1lbnREYXRhUmVxdWVzdE1ldGhvZCA9XG4gICAgQ1JFQVRFX1BBWU1FTlRfREFUQV9SRVFVRVNUX01FVEhPRFNbdmVyc2lvbl07XG5cbiAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICB0aGlzLl9jcmVhdGVQcm9taXNlLFxuICAgIFwiZ29vZ2xlLXBheW1lbnQudlwiICsgdmVyc2lvbiArIFwiLmNyZWF0ZVBheW1lbnREYXRhUmVxdWVzdFwiXG4gICk7XG5cbiAgcmV0dXJuIHRoaXNbY3JlYXRlUGF5bWVudERhdGFSZXF1ZXN0TWV0aG9kXShwYXltZW50RGF0YVJlcXVlc3QpO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgdG9rZW5pemF0aW9uLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZSBiYWNrIGZyb20gdGhlIEdvb2dsZSBQYXkgdG9rZW5pemF0aW9uLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgc2Vjb25kIGFyZ3VtZW50LCA8Y29kZT5kYXRhPC9jb2RlPiwgaXMgYSB7QGxpbmsgR29vZ2xlUGF5fnRva2VuaXplUGF5bG9hZHx0b2tlbml6ZVBheWxvYWR9LiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgYHBhcnNlUmVzcG9uc2VgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIHtAbGluayBHb29nbGVQYXltZW50fnRva2VuaXplUGF5bG9hZHx0b2tlbml6ZVBheWxvYWR9LlxuICogQGV4YW1wbGUgd2l0aCBjYWxsYmFja1xuICogdmFyIHBheW1lbnRzQ2xpZW50ID0gbmV3IGdvb2dsZS5wYXltZW50cy5hcGkuUGF5bWVudHNDbGllbnQoe1xuICogICBlbnZpcm9ubWVudDogJ1RFU1QnIC8vIG9yICdQUk9EVUNUSU9OJ1xuICogfSlcbiAqXG4gKiBwYXltZW50c0NsaWVudC5sb2FkUGF5bWVudERhdGEocGF5bWVudERhdGFSZXF1ZXN0RnJvbUNyZWF0ZVBheW1lbnREYXRhUmVxdWVzdCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAqICAgZ29vZ2xlUGF5bWVudEluc3RhbmNlLnBhcnNlUmVzcG9uc2UocmVzcG9uc2UsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAqICAgICBpZiAoZXJyKSB7XG4gKiAgICAgICAvLyBoYW5kbGUgZXJyb3JzXG4gKiAgICAgfVxuICogICAgIC8vIHNlbmQgcGFyc2VkUmVzcG9uc2Uubm9uY2UgdG8geW91ciBzZXJ2ZXJcbiAqICAgfSk7XG4gKiB9KTtcbiAqIEBleGFtcGxlIHdpdGggcHJvbWlzZVxuICogdmFyIHBheW1lbnRzQ2xpZW50ID0gbmV3IGdvb2dsZS5wYXltZW50cy5hcGkuUGF5bWVudHNDbGllbnQoe1xuICogICBlbnZpcm9ubWVudDogJ1RFU1QnIC8vIG9yICdQUk9EVUNUSU9OJ1xuICogfSlcbiAqXG4gKiBwYXltZW50c0NsaWVudC5sb2FkUGF5bWVudERhdGEocGF5bWVudERhdGFSZXF1ZXN0RnJvbUNyZWF0ZVBheW1lbnREYXRhUmVxdWVzdCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAqICAgcmV0dXJuIGdvb2dsZVBheW1lbnRJbnN0YW5jZS5wYXJzZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAqIH0pLnRoZW4oZnVuY3Rpb24gKHBhcnNlZFJlc3BvbnNlKSB7XG4gKiAgIC8vIHNlbmQgcGFyc2VkUmVzcG9uc2Uubm9uY2UgdG8geW91ciBzZXJ2ZXJcbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgLy8gaGFuZGxlIGVycm9yc1xuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdGhlIHBhcnNlZCByZXNwb25zZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuR29vZ2xlUGF5bWVudC5wcm90b3R5cGUucGFyc2VSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBheWxvYWQ7XG4gICAgICB2YXIgcmF3UmVzcG9uc2UgPVxuICAgICAgICByZXNwb25zZS5hcGlWZXJzaW9uID09PSAyXG4gICAgICAgICAgPyByZXNwb25zZS5wYXltZW50TWV0aG9kRGF0YS50b2tlbml6YXRpb25EYXRhLnRva2VuXG4gICAgICAgICAgOiByZXNwb25zZS5wYXltZW50TWV0aG9kVG9rZW4udG9rZW47XG4gICAgICB2YXIgcGFyc2VkUmVzcG9uc2UgPSBKU09OLnBhcnNlKHJhd1Jlc3BvbnNlKTtcbiAgICAgIHZhciBlcnJvciA9IHBhcnNlZFJlc3BvbnNlLmVycm9yO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIH1cblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgXCJnb29nbGUtcGF5bWVudC5wYXJzZVJlc3BvbnNlLnN1Y2NlZWRlZFwiXG4gICAgICApO1xuXG4gICAgICBpZiAocGFyc2VkUmVzcG9uc2UucGF5cGFsQWNjb3VudHMpIHtcbiAgICAgICAgcGF5bG9hZCA9IHBhcnNlZFJlc3BvbnNlLnBheXBhbEFjY291bnRzWzBdO1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICAgICAgXCJnb29nbGUtcGF5bWVudC5wYXJzZVJlc3BvbnNlLnN1Y2NlZWRlZC5wYXlwYWxcIlxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIG5vbmNlOiBwYXlsb2FkLm5vbmNlLFxuICAgICAgICAgIHR5cGU6IHBheWxvYWQudHlwZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogcGF5bG9hZC5kZXNjcmlwdGlvbixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBwYXlsb2FkID0gcGFyc2VkUmVzcG9uc2UuYW5kcm9pZFBheUNhcmRzWzBdO1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgXCJnb29nbGUtcGF5bWVudC5wYXJzZVJlc3BvbnNlLnN1Y2NlZWRlZC5nb29nbGUtcGF5bWVudFwiXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgbm9uY2U6IHBheWxvYWQubm9uY2UsXG4gICAgICAgIHR5cGU6IHBheWxvYWQudHlwZSxcbiAgICAgICAgZGVzY3JpcHRpb246IHBheWxvYWQuZGVzY3JpcHRpb24sXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBjYXJkVHlwZTogcGF5bG9hZC5kZXRhaWxzLmNhcmRUeXBlLFxuICAgICAgICAgIGxhc3RGb3VyOiBwYXlsb2FkLmRldGFpbHMubGFzdEZvdXIsXG4gICAgICAgICAgbGFzdFR3bzogcGF5bG9hZC5kZXRhaWxzLmxhc3RUd28sXG4gICAgICAgICAgaXNOZXR3b3JrVG9rZW5pemVkOiBwYXlsb2FkLmRldGFpbHMuaXNOZXR3b3JrVG9rZW5pemVkLFxuICAgICAgICAgIGJpbjogcGF5bG9hZC5kZXRhaWxzLmJpbixcbiAgICAgICAgfSxcbiAgICAgICAgYmluRGF0YTogcGF5bG9hZC5iaW5EYXRhLFxuICAgICAgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICBzZWxmLl9jcmVhdGVQcm9taXNlLFxuICAgICAgICBcImdvb2dsZS1wYXltZW50LnBhcnNlUmVzcG9uc2UuZmFpbGVkXCJcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICBjb2RlOiBlcnJvcnMuR09PR0xFX1BBWU1FTlRfR0FURVdBWV9FUlJPUi5jb2RlLFxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9ycy5HT09HTEVfUEFZTUVOVF9HQVRFV0FZX0VSUk9SLm1lc3NhZ2UsXG4gICAgICAgICAgdHlwZTogZXJyb3JzLkdPT0dMRV9QQVlNRU5UX0dBVEVXQVlfRVJST1IudHlwZSxcbiAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvcixcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogQ2xlYW5seSB0ZWFyIGRvd24gYW55dGhpbmcgc2V0IHVwIGJ5IHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9nb29nbGUtcGF5bWVudC5jcmVhdGV8Y3JlYXRlfS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGVkIG9uY2UgdGVhcmRvd24gaXMgY29tcGxldGUuIE5vIGRhdGEgaXMgcmV0dXJuZWQgaWYgdGVhcmRvd24gY29tcGxldGVzIHN1Y2Nlc3NmdWxseS5cbiAqIEBleGFtcGxlXG4gKiBnb29nbGVQYXltZW50SW5zdGFuY2UudGVhcmRvd24oKTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggY2FsbGJhY2s8L2NhcHRpb24+XG4gKiBnb29nbGVQYXltZW50SW5zdGFuY2UudGVhcmRvd24oZnVuY3Rpb24gKCkge1xuICogICAvLyB0ZWFyZG93biBpcyBjb21wbGV0ZVxuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5Hb29nbGVQYXltZW50LnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgY29udmVydE1ldGhvZHNUb0Vycm9yKHRoaXMsIG1ldGhvZHMoR29vZ2xlUGF5bWVudC5wcm90b3R5cGUpKTtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59O1xuXG5mdW5jdGlvbiBhcHBseURlZmF1bHRzVG9QYXltZW50TWV0aG9kQ29uZmlndXJhdGlvbihcbiAgbWVyY2hhbnRTdWJtaXR0ZWRQYXltZW50TWV0aG9kLFxuICBkZWZhdWx0UGF5bWVudE1ldGhvZFxuKSB7XG4gIE9iamVjdC5rZXlzKGRlZmF1bHRQYXltZW50TWV0aG9kKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbWV0ZXIpIHtcbiAgICBpZiAodHlwZW9mIGRlZmF1bHRQYXltZW50TWV0aG9kW3BhcmFtZXRlcl0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIG1lcmNoYW50U3VibWl0dGVkUGF5bWVudE1ldGhvZFtwYXJhbWV0ZXJdID0gYXNzaWduKFxuICAgICAgICB7fSxcbiAgICAgICAgZGVmYXVsdFBheW1lbnRNZXRob2RbcGFyYW1ldGVyXSxcbiAgICAgICAgbWVyY2hhbnRTdWJtaXR0ZWRQYXltZW50TWV0aG9kW3BhcmFtZXRlcl1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lcmNoYW50U3VibWl0dGVkUGF5bWVudE1ldGhvZFtwYXJhbWV0ZXJdID1cbiAgICAgICAgbWVyY2hhbnRTdWJtaXR0ZWRQYXltZW50TWV0aG9kW3BhcmFtZXRlcl0gfHxcbiAgICAgICAgZGVmYXVsdFBheW1lbnRNZXRob2RbcGFyYW1ldGVyXTtcbiAgICB9XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBQcm9taXNlLndyYXBQcm90b3R5cGUoR29vZ2xlUGF5bWVudCk7XG5cbn0se1wiLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uL2xpYi9hc3NpZ25cIjoxMjEsXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vbGliL2NvbnZlcnQtbWV0aG9kcy10by1lcnJvclwiOjEyNyxcIi4uL2xpYi9maW5kXCI6MTM3LFwiLi4vbGliL2dlbmVyYXRlLWdvb2dsZS1wYXktY29uZmlndXJhdGlvblwiOjE0OSxcIi4uL2xpYi9tZXRob2RzXCI6MTU1LFwiLi9lcnJvcnNcIjoxMDEsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMTAzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbW9kdWxlIGJyYWludHJlZS13ZWIvZ29vZ2xlLXBheW1lbnRcbiAqIEBkZXNjcmlwdGlvbiBBIGNvbXBvbmVudCB0byBpbnRlZ3JhdGUgd2l0aCBHb29nbGUgUGF5LiBUaGUgbWFqb3JpdHkgb2YgdGhlIGludGVncmF0aW9uIHVzZXMgW0dvb2dsZSdzIHBheS5qcyBKYXZhU2NyaXB0IGZpbGVdKGh0dHBzOi8vcGF5Lmdvb2dsZS5jb20vZ3AvcC9qcy9wYXkuanMpLiBUaGUgQnJhaW50cmVlIGNvbXBvbmVudCBnZW5lcmF0ZXMgdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IG5lY2Vzc2FyeSBmb3IgR29vZ2xlIFBheSB0byBpbml0aWF0ZSB0aGUgUGF5bWVudCBSZXF1ZXN0IGFuZCBwYXJzZSB0aGUgcmV0dXJuZWQgZGF0YSB0byByZXRyaWV2ZSB0aGUgcGF5bWVudCBtZXRob2Qgbm9uY2Ugd2hpY2ggaXMgdXNlZCB0byBwcm9jZXNzIHRoZSB0cmFuc2FjdGlvbiBvbiB0aGUgc2VydmVyLlxuICovXG5cbnZhciBHb29nbGVQYXltZW50ID0gX2RlcmVxXyhcIi4vZ29vZ2xlLXBheW1lbnRcIik7XG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBjcmVhdGVBc3NldHNVcmwgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCIpO1xudmFyIGNyZWF0ZURlZmVycmVkQ2xpZW50ID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCIpO1xudmFyIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uID0gX2RlcmVxXyhcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCIpO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG5cbi8qKlxuICogQHN0YXRpY1xuICogQGZ1bmN0aW9uIGNyZWF0ZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ3JlYXRpb24gb3B0aW9uczpcbiAqIEBwYXJhbSB7Q2xpZW50fSBbb3B0aW9ucy5jbGllbnRdIEEge0BsaW5rIENsaWVudH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYXV0aG9yaXphdGlvbl0gQSB0b2tlbml6YXRpb25LZXkgb3IgY2xpZW50VG9rZW4uIENhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGBvcHRpb25zLmNsaWVudGAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVzZURlZmVycmVkQ2xpZW50XSBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYGF1dGhvcml6YXRpb25gLCBhbGxvd3MgdGhlIEdvb2dsZSBQYXltZW50IGluc3RhbmNlIHRvIGJlIGF2YWlsYWJsZSByaWdodCBhd2F5IGJ5IGZldGNoaW5nIHRoZSBjbGllbnQgY29uZmlndXJhdGlvbiBpbiB0aGUgYmFja2dyb3VuZC4gV2hlbiB0aGlzIG9wdGlvbiBpcyB1c2VkLCB7QGxpbmsgR29vZ2xlUGF5bWVudCNjcmVhdGVQYXltZW50RGF0YVJlcXVlc3R9IHdpbGwgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGNvbmZpZ3VyYXRpb24gaW5zdGVhZCBvZiByZXR1cm5pbmcgc3luY2hyb25vdXNseS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5nb29nbGVQYXlWZXJzaW9uXSBUaGUgdmVyc2lvbiBvZiB0aGUgR29vZ2xlIFBheSBBUEkgdG8gdXNlLiBWYWx1ZSBvZiAyIGlzIHJlcXVpcmVkIHRvIGFjY2VwdCBwYXJhbWV0ZXJzIGRvY3VtZW50ZWQgW2J5IEdvb2dsZV0oaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcGF5L2FwaS93ZWIvcmVmZXJlbmNlL29iamVjdCkuIE9taXQgdGhpcyBwYXJhbWV0ZXIgdG8gdXNlIHRoZSBkZXByZWNhdGVkIEdvb2dsZSBQYXkgVmVyc2lvbiAxLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmdvb2dsZU1lcmNoYW50SWRdIEEgR29vZ2xlIG1lcmNoYW50IGlkZW50aWZpZXIgaXNzdWVkIGFmdGVyIHlvdXIgd2Vic2l0ZSBpcyBhcHByb3ZlZCBieSBHb29nbGUuIFJlcXVpcmVkIHdoZW4gUGF5bWVudHNDbGllbnQgaXMgaW5pdGlhbGl6ZWQgd2l0aCBhbiBlbnZpcm9ubWVudCBwcm9wZXJ0eSBvZiBQUk9EVUNUSU9OLCBidXQgbWF5IGJlIG9taXR0ZWQgaW4gVEVTVCBlbnZpcm9ubWVudC5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgYGRhdGFgLCBpcyB0aGUge0BsaW5rIEdvb2dsZVBheW1lbnR9IGluc3RhbmNlLiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgYGNyZWF0ZWAgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB7QGxpbmsgR29vZ2xlUGF5bWVudH0gaW5zdGFuY2UuXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5TaW1wbGUgRXhhbXBsZTwvY2FwdGlvbj5cbiAqIC8vIGluY2x1ZGUgaHR0cHM6Ly9wYXkuZ29vZ2xlLmNvbS9ncC9wL2pzL3BheS5qcyBpbiBhIHNjcmlwdCB0YWdcbiAqIC8vIG9uIHlvdXIgcGFnZSB0byBsb2FkIHRoZSBgZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50c0NsaWVudGAgZ2xvYmFsIG9iamVjdC5cbiAqXG4gKiB2YXIgcGF5bWVudEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnb29nbGUtcGF5LWJ1dHRvbicpO1xuICogdmFyIHBheW1lbnRzQ2xpZW50ID0gbmV3IGdvb2dsZS5wYXltZW50cy5hcGkuUGF5bWVudHNDbGllbnQoe1xuICogICBlbnZpcm9ubWVudDogJ1RFU1QnIC8vIG9yICdQUk9EVUNUSU9OJ1xuICogfSk7XG4gKlxuICogYnJhaW50cmVlLmNsaWVudC5jcmVhdGUoe1xuICogICBhdXRob3JpemF0aW9uOiAndG9rZW5pemF0aW9uLWtleS1vci1jbGllbnQtdG9rZW4nXG4gKiB9KS50aGVuKGZ1bmN0aW9uIChjbGllbnRJbnN0YW5jZSkge1xuICogICByZXR1cm4gYnJhaW50cmVlLmdvb2dsZVBheW1lbnQuY3JlYXRlKHtcbiAqICAgICBjbGllbnQ6IGNsaWVudEluc3RhbmNlLFxuICogICAgICBnb29nbGVQYXlWZXJzaW9uOiAyLFxuICogICAgICBnb29nbGVNZXJjaGFudElkOiAneW91ci1tZXJjaGFudC1pZC1mcm9tLWdvb2dsZSdcbiAqICAgfSk7XG4gKiB9KS50aGVuKGZ1bmN0aW9uIChnb29nbGVQYXltZW50SW5zdGFuY2UpIHtcbiAqICAgcGF5bWVudEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICogICAgIHZhciBwYXltZW50RGF0YVJlcXVlc3Q7XG4gKlxuICogICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gKlxuICogICAgIHBheW1lbnREYXRhUmVxdWVzdCA9IGdvb2dsZVBheW1lbnRJbnN0YW5jZS5jcmVhdGVQYXltZW50RGF0YVJlcXVlc3Qoe1xuICogICAgICAgdHJhbnNhY3Rpb25JbmZvOiB7XG4gKiAgICAgICAgIGN1cnJlbmN5Q29kZTogJ1VTRCcsXG4gKiAgICAgICAgIHRvdGFsUHJpY2VTdGF0dXM6ICdGSU5BTCcsXG4gKiAgICAgICAgIHRvdGFsUHJpY2U6ICcxMDAuMDAnXG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogICAgIHBheW1lbnRzQ2xpZW50LmxvYWRQYXltZW50RGF0YShwYXltZW50RGF0YVJlcXVlc3QpLnRoZW4oZnVuY3Rpb24gKHBheW1lbnREYXRhKSB7XG4gKiAgICAgICByZXR1cm4gZ29vZ2xlUGF5bWVudEluc3RhbmNlLnBhcnNlUmVzcG9uc2UocGF5bWVudERhdGEpO1xuICogICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICogICAgICAgLy8gc2VuZCByZXN1bHQubm9uY2UgdG8geW91ciBzZXJ2ZXJcbiAqICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gKiAgICAgICAvLyBoYW5kbGUgZXJyXG4gKiAgICAgfSk7XG4gKiAgIH0pO1xuICogfSk7XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5DaGVjayBCcm93c2VyIGFuZCBDdXN0b21lciBDb21wYXRpYmlsaXR5PC9jYXB0aW9uPlxuICogdmFyIHBheW1lbnRzQ2xpZW50ID0gbmV3IGdvb2dsZS5wYXltZW50cy5hcGkuUGF5bWVudHNDbGllbnQoe1xuICogICBlbnZpcm9ubWVudDogJ1RFU1QnIC8vIG9yICdQUk9EVUNUSU9OJ1xuICogfSk7XG4gKlxuICogZnVuY3Rpb24gc2V0dXBHb29nbGVQYXlCdXR0b24oZ29vZ2xlUGF5bWVudEluc3RhbmNlKSB7XG4gKiAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAqXG4gKiAgIGJ1dHRvbi5pZCA9ICdnb29nbGUtcGF5JztcbiAqICAgYnV0dG9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdHb29nbGUgUGF5JykpO1xuICogICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAqICAgICB2YXIgcGF5bWVudFJlcXVlc3REYXRhO1xuICpcbiAqICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICpcbiAqICAgICBwYXltZW50RGF0YVJlcXVlc3QgPSBnb29nbGVQYXltZW50SW5zdGFuY2UuY3JlYXRlUGF5bWVudERhdGFSZXF1ZXN0KHtcbiAqICAgICAgIHRyYW5zYWN0aW9uSW5mbzoge1xuICogICAgICAgICBjdXJyZW5jeUNvZGU6ICdVU0QnLFxuICogICAgICAgICB0b3RhbFByaWNlU3RhdHVzOiAnRklOQUwnLFxuICogICAgICAgICB0b3RhbFByaWNlOiAnMTAwLjAwJyAvLyB5b3VyIGFtb3VudFxuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqICAgICBwYXltZW50c0NsaWVudC5sb2FkUGF5bWVudERhdGEocGF5bWVudERhdGFSZXF1ZXN0KS50aGVuKGZ1bmN0aW9uIChwYXltZW50RGF0YSkge1xuICogICAgICAgcmV0dXJuIGdvb2dsZVBheW1lbnRJbnN0YW5jZS5wYXJzZVJlc3BvbnNlKHBheW1lbnREYXRhKTtcbiAqICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICogICAgICAgLy8gc2VuZCByZXN1bHQubm9uY2UgdG8geW91ciBzZXJ2ZXJcbiAqICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gKiAgICAgICAvLyBoYW5kbGUgZXJyb3JzXG4gKiAgICAgfSk7XG4gKiAgIH0pO1xuICpcbiAqICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gKiB9XG4gKlxuICogYnJhaW50cmVlLmNsaWVudC5jcmVhdGUoe1xuICogICBhdXRob3JpemF0aW9uOiAndG9rZW5pemF0aW9uLWtleS1vci1jbGllbnQtdG9rZW4nXG4gKiB9KS50aGVuKGZ1bmN0aW9uIChjbGllbnRJbnN0YW5jZSkge1xuICogICByZXR1cm4gYnJhaW50cmVlLmdvb2dsZVBheW1lbnQuY3JlYXRlKHtcbiAqICAgICBjbGllbnQ6IGNsaWVudEluc3RhbmNlLFxuICogICAgIGdvb2dsZVBheVZlcnNpb246IDIsXG4gKiAgICAgZ29vZ2xlTWVyY2hhbnRJZDogJ3lvdXItbWVyY2hhbnQtaWQtZnJvbS1nb29nbGUnXG4gKiAgIH0pO1xuICogfSkudGhlbihmdW5jdGlvbiAoZ29vZ2xlUGF5bWVudEluc3RhbmNlKSB7XG4gKlxuICogICByZXR1cm4gcGF5bWVudHNDbGllbnQuaXNSZWFkeVRvUGF5KHtcbiAqICAgICAvLyBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcGF5L2FwaS93ZWIvcmVmZXJlbmNlL29iamVjdCNJc1JlYWR5VG9QYXlSZXF1ZXN0IGZvciBhbGwgb3B0aW9uc1xuICogICAgIGFwaVZlcnNpb246IDIsXG4gKiAgICAgYXBpVmVyc2lvbk1pbm9yOiAwLFxuICogICAgIGFsbG93ZWRQYXltZW50TWV0aG9kczogZ29vZ2xlUGF5bWVudEluc3RhbmNlLmNyZWF0ZVBheW1lbnREYXRhUmVxdWVzdCgpLmFsbG93ZWRQYXltZW50TWV0aG9kcyxcbiAqICAgICBleGlzdGluZ1BheW1lbnRNZXRob2RSZXF1aXJlZDogdHJ1ZVxuICogICB9KTtcbiAqIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gKiAgIGlmIChyZXNwb25zZS5yZXN1bHQpIHtcbiAqICAgICBzZXR1cEdvb2dsZVBheUJ1dHRvbihnb29nbGVQYXltZW50SW5zdGFuY2UpO1xuICogICB9XG4gKiB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gKiAgIC8vIGhhbmRsZSBzZXR1cCBlcnJvcnNcbiAqIH0pO1xuICpcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHZhciBuYW1lID0gXCJHb29nbGUgUGF5XCI7XG5cbiAgcmV0dXJuIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uXG4gICAgLnZlcmlmeSh7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgY2xpZW50OiBvcHRpb25zLmNsaWVudCxcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjcmVhdGVQcm9taXNlLCBpbnN0YW5jZTtcblxuICAgICAgY3JlYXRlUHJvbWlzZSA9IGNyZWF0ZURlZmVycmVkQ2xpZW50XG4gICAgICAgIC5jcmVhdGUoe1xuICAgICAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgICAgIGRlYnVnOiBvcHRpb25zLmRlYnVnLFxuICAgICAgICAgIGFzc2V0c1VybDogY3JlYXRlQXNzZXRzVXJsLmNyZWF0ZShvcHRpb25zLmF1dGhvcml6YXRpb24pLFxuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICB2YXIgY29uZmlndXJhdGlvbiA9IGNsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG5cbiAgICAgICAgICBvcHRpb25zLmNsaWVudCA9IGNsaWVudDtcbiAgICAgICAgICBpZiAoIWNvbmZpZ3VyYXRpb24uZ2F0ZXdheUNvbmZpZ3VyYXRpb24uYW5kcm9pZFBheSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLkdPT0dMRV9QQVlNRU5UX05PVF9FTkFCTEVEKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY2xpZW50O1xuICAgICAgICB9KTtcblxuICAgICAgb3B0aW9ucy5jcmVhdGVQcm9taXNlID0gY3JlYXRlUHJvbWlzZTtcbiAgICAgIGluc3RhbmNlID0gbmV3IEdvb2dsZVBheW1lbnQob3B0aW9ucyk7XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VEZWZlcnJlZENsaWVudCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICBpbnN0YW5jZS5fY2xpZW50ID0gY2xpZW50O1xuXG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiB3cmFwUHJvbWlzZShjcmVhdGUpLFxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIFNESywgaS5lLiBge0Bwa2cgdmVyc2lvbn1gLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgVkVSU0lPTjogVkVSU0lPTixcbn07XG5cbn0se1wiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIjoxMjIsXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCI6MTI5LFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIjoxMzEsXCIuL2Vycm9yc1wiOjEwMSxcIi4vZ29vZ2xlLXBheW1lbnRcIjoxMDIsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMTA0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi4vc2hhcmVkL2Vycm9yc1wiKTtcbnZhciBhbGxvd2VkQXR0cmlidXRlcyA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvY29uc3RhbnRzXCIpLmFsbG93ZWRBdHRyaWJ1dGVzO1xuXG5mdW5jdGlvbiBhdHRyaWJ1dGVWYWxpZGF0aW9uRXJyb3IoYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgZXJyO1xuXG4gIGlmICghYWxsb3dlZEF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlKSkge1xuICAgIGVyciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19BVFRSSUJVVEVfTk9UX1NVUFBPUlRFRC50eXBlLFxuICAgICAgY29kZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfQVRUUklCVVRFX05PVF9TVVBQT1JURUQuY29kZSxcbiAgICAgIG1lc3NhZ2U6XG4gICAgICAgICdUaGUgXCInICsgYXR0cmlidXRlICsgJ1wiIGF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkIGluIEhvc3RlZCBGaWVsZHMuJyxcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsICYmICFfaXNWYWxpZChhdHRyaWJ1dGUsIHZhbHVlKSkge1xuICAgIGVyciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19BVFRSSUJVVEVfVkFMVUVfTk9UX0FMTE9XRUQudHlwZSxcbiAgICAgIGNvZGU6IGVycm9ycy5IT1NURURfRklFTERTX0FUVFJJQlVURV9WQUxVRV9OT1RfQUxMT1dFRC5jb2RlLFxuICAgICAgbWVzc2FnZTpcbiAgICAgICAgJ1ZhbHVlIFwiJyArXG4gICAgICAgIHZhbHVlICtcbiAgICAgICAgJ1wiIGlzIG5vdCBhbGxvd2VkIGZvciBcIicgK1xuICAgICAgICBhdHRyaWJ1dGUgK1xuICAgICAgICAnXCIgYXR0cmlidXRlLicsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZXJyO1xufVxuXG5mdW5jdGlvbiBfaXNWYWxpZChhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIGlmIChhbGxvd2VkQXR0cmlidXRlc1thdHRyaWJ1dGVdID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG4gIH0gZWxzZSBpZiAoYWxsb3dlZEF0dHJpYnV0ZXNbYXR0cmlidXRlXSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gU3RyaW5nKHZhbHVlKSA9PT0gXCJ0cnVlXCIgfHwgU3RyaW5nKHZhbHVlKSA9PT0gXCJmYWxzZVwiO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGF0dHJpYnV0ZVZhbGlkYXRpb25FcnJvcjtcblxufSx7XCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vc2hhcmVkL2NvbnN0YW50c1wiOjExMixcIi4uL3NoYXJlZC9lcnJvcnNcIjoxMTN9XSwxMDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKFwiLi4vc2hhcmVkL2NvbnN0YW50c1wiKTtcbnZhciB1c2VNaW4gPSBfZGVyZXFfKFwiLi4vLi4vbGliL3VzZS1taW5cIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tcG9zZVVybChhc3NldHNVcmwsIGNvbXBvbmVudElkLCBpc0RlYnVnKSB7XG4gIHJldHVybiAoXG4gICAgYXNzZXRzVXJsICtcbiAgICBcIi93ZWIvXCIgK1xuICAgIGNvbnN0YW50cy5WRVJTSU9OICtcbiAgICBcIi9odG1sL2hvc3RlZC1maWVsZHMtZnJhbWVcIiArXG4gICAgdXNlTWluKGlzRGVidWcpICtcbiAgICBcIi5odG1sI1wiICtcbiAgICBjb21wb25lbnRJZFxuICApO1xufTtcblxufSx7XCIuLi8uLi9saWIvdXNlLW1pblwiOjE2MCxcIi4uL3NoYXJlZC9jb25zdGFudHNcIjoxMTJ9XSwxMDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBkaXJlY3Rpb25zID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9jb25zdGFudHNcIikubmF2aWdhdGlvbkRpcmVjdGlvbnM7XG52YXIgYnJvd3NlckRldGVjdGlvbiA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvYnJvd3Nlci1kZXRlY3Rpb25cIik7XG52YXIgZm9jdXNJbnRlcmNlcHQgPSBfZGVyZXFfKFwiLi4vc2hhcmVkL2ZvY3VzLWludGVyY2VwdFwiKTtcbnZhciBmaW5kUGFyZW50VGFncyA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvZmluZC1wYXJlbnQtdGFnc1wiKTtcbnZhciB1c2VyRm9jdXNhYmxlVGFnTmFtZXMgPSBbXCJJTlBVVFwiLCBcIlNFTEVDVFwiLCBcIlRFWFRBUkVBXCJdO1xuLy8gRGV2aWNlcyB3aXRoIHNvZnR3YXJlIGtleWJvYXJkcyBkbyBub3Qgb3IgY2Fubm90IGZvY3VzIG9uIGlucHV0IHR5cGVzXG4vLyB0aGF0IGRvIG5vdCByZXF1aXJlIGtleWJvYXJkLWJhc2VkIGludGVyYWN0aW9uLlxudmFyIHVuZm9jdXNlZElucHV0VHlwZXMgPSBbXG4gIFwiaGlkZGVuXCIsXG4gIFwiYnV0dG9uXCIsXG4gIFwicmVzZXRcIixcbiAgXCJzdWJtaXRcIixcbiAgXCJjaGVja2JveFwiLFxuICBcInJhZGlvXCIsXG4gIFwiZmlsZVwiLFxuXTtcblxuZnVuY3Rpb24gX2lzVXNlckZvY3VzYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICBpZiAoIWJyb3dzZXJEZXRlY3Rpb24uaGFzU29mdHdhcmVLZXlib2FyZCgpKSB7XG4gICAgLy8gb24gZGVza3RvcCBicm93c2VycywgdGhlIG9ubHkgaW5wdXQgdHlwZSB0aGF0IGlzbid0IGZvY3VzYWJsZVxuICAgIC8vIGlzIHRoZSBoaWRkZW4gaW5wdXRcbiAgICByZXR1cm4gZWxlbWVudC50eXBlICE9PSBcImhpZGRlblwiO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICB1c2VyRm9jdXNhYmxlVGFnTmFtZXMuaW5kZXhPZihlbGVtZW50LnRhZ05hbWUpID4gLTEgJiZcbiAgICB1bmZvY3VzZWRJbnB1dFR5cGVzLmluZGV4T2YoZWxlbWVudC50eXBlKSA8IDBcbiAgKTtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZU5hdmlnYXRpb25IZWxwZXIoZGlyZWN0aW9uLCBudW1iZXJPZkVsZW1lbnRzSW5Gb3JtKSB7XG4gIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgY2FzZSBkaXJlY3Rpb25zLkJBQ0s6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGVja0luZGV4Qm91bmRzOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXggPCAwO1xuICAgICAgICB9LFxuICAgICAgICBpbmRleENoYW5nZTogLTEsXG4gICAgICB9O1xuICAgIGNhc2UgZGlyZWN0aW9ucy5GT1JXQVJEOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hlY2tJbmRleEJvdW5kczogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4ID4gbnVtYmVyT2ZFbGVtZW50c0luRm9ybSAtIDE7XG4gICAgICAgIH0sXG4gICAgICAgIGluZGV4Q2hhbmdlOiAxLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICB9XG5cbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBfZmluZEZpcnN0Rm9jdXNhYmxlRWxlbWVudChlbGVtZW50c0luRm9ybSkge1xuICB2YXIgZWxlbWVudHNJbmRleCwgZWxlbWVudDtcblxuICBmb3IgKFxuICAgIGVsZW1lbnRzSW5kZXggPSAwO1xuICAgIGVsZW1lbnRzSW5kZXggPCBlbGVtZW50c0luRm9ybS5sZW5ndGg7XG4gICAgZWxlbWVudHNJbmRleCsrXG4gICkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50c0luRm9ybVtlbGVtZW50c0luZGV4XTtcblxuICAgIGlmIChfaXNVc2VyRm9jdXNhYmxlRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZW1vdmVFeHRyYUZvY3VzRWxlbWVudHM6IGZ1bmN0aW9uIChjaGVja291dEZvcm0sIG9uUmVtb3ZlRm9jdXNJbnRlcmNlcHRzKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY2hlY2tvdXRGb3JtLmVsZW1lbnRzKTtcbiAgICB2YXIgZmlyc3RGb2N1c2FibGVJbnB1dCA9IF9maW5kRmlyc3RGb2N1c2FibGVFbGVtZW50KGVsZW1lbnRzKTtcbiAgICB2YXIgbGFzdEZvY3VzYWJsZUlucHV0ID0gX2ZpbmRGaXJzdEZvY3VzYWJsZUVsZW1lbnQoZWxlbWVudHMucmV2ZXJzZSgpKTtcblxuICAgIC8vIHRoZXNlIHNob3VsZCBuZXZlciBiZSBpZGVudGljYWwsIGJlY2F1c2UgdGhlcmUgd2lsbCBhdCBsZWFzdCBiZSB0aGVcbiAgICAvLyBiZWZvcmUgYW5kIHRoZSBhZnRlciBpbnB1dFxuICAgIFtmaXJzdEZvY3VzYWJsZUlucHV0LCBsYXN0Rm9jdXNhYmxlSW5wdXRdLmZvckVhY2goZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvY3VzSW50ZXJjZXB0Lm1hdGNoRm9jdXNFbGVtZW50KGlucHV0LmdldEF0dHJpYnV0ZShcImlkXCIpKSkge1xuICAgICAgICBvblJlbW92ZUZvY3VzSW50ZXJjZXB0cyhpbnB1dC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgY3JlYXRlRm9jdXNDaGFuZ2VIYW5kbGVyOiBmdW5jdGlvbiAoaG9zdGVkRmllbGRzSWQsIGNhbGxiYWNrcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdmFyIGN1cnJlbnRJbmRleCwgdGFyZ2V0RWxlbWVudCwgY2hlY2tvdXRGb3JtLCBuYXZIZWxwZXI7XG4gICAgICB2YXIgc291cmNlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICBcImJ0LVwiICsgZGF0YS5maWVsZCArIFwiLVwiICsgZGF0YS5kaXJlY3Rpb24gKyBcIi1cIiArIGhvc3RlZEZpZWxkc0lkXG4gICAgICApO1xuXG4gICAgICBpZiAoIXNvdXJjZUVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjaGVja291dEZvcm0gPSBmaW5kUGFyZW50VGFncyhzb3VyY2VFbGVtZW50LCBcImZvcm1cIilbMF07XG5cbiAgICAgIGlmIChkb2N1bWVudC5mb3Jtcy5sZW5ndGggPCAxIHx8ICFjaGVja291dEZvcm0pIHtcbiAgICAgICAgY2FsbGJhY2tzLm9uUmVtb3ZlRm9jdXNJbnRlcmNlcHRzKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjaGVja291dEZvcm0gPSBbXS5zbGljZS5jYWxsKGNoZWNrb3V0Rm9ybS5lbGVtZW50cyk7XG4gICAgICBjdXJyZW50SW5kZXggPSBjaGVja291dEZvcm0uaW5kZXhPZihzb3VyY2VFbGVtZW50KTtcbiAgICAgIG5hdkhlbHBlciA9IF9jcmVhdGVOYXZpZ2F0aW9uSGVscGVyKGRhdGEuZGlyZWN0aW9uLCBjaGVja291dEZvcm0ubGVuZ3RoKTtcblxuICAgICAgZG8ge1xuICAgICAgICBjdXJyZW50SW5kZXggKz0gbmF2SGVscGVyLmluZGV4Q2hhbmdlO1xuICAgICAgICBpZiAobmF2SGVscGVyLmNoZWNrSW5kZXhCb3VuZHMoY3VycmVudEluZGV4KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXRFbGVtZW50ID0gY2hlY2tvdXRGb3JtW2N1cnJlbnRJbmRleF07XG4gICAgICB9IHdoaWxlICghX2lzVXNlckZvY3VzYWJsZUVsZW1lbnQodGFyZ2V0RWxlbWVudCkpO1xuXG4gICAgICBpZiAoZm9jdXNJbnRlcmNlcHQubWF0Y2hGb2N1c0VsZW1lbnQodGFyZ2V0RWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSkpIHtcbiAgICAgICAgY2FsbGJhY2tzLm9uVHJpZ2dlcklucHV0Rm9jdXMoXG4gICAgICAgICAgdGFyZ2V0RWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJyYWludHJlZS10eXBlXCIpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbn07XG5cbn0se1wiLi4vc2hhcmVkL2Jyb3dzZXItZGV0ZWN0aW9uXCI6MTExLFwiLi4vc2hhcmVkL2NvbnN0YW50c1wiOjExMixcIi4uL3NoYXJlZC9maW5kLXBhcmVudC10YWdzXCI6MTE0LFwiLi4vc2hhcmVkL2ZvY3VzLWludGVyY2VwdFwiOjExNX1dLDEwNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFsbG93ZWRTdHlsZXMgPSBfZGVyZXFfKFwiLi4vc2hhcmVkL2NvbnN0YW50c1wiKS5hbGxvd2VkU3R5bGVzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFN0eWxlc0Zyb21DbGFzcyhjc3NDbGFzcykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICB2YXIgY29tcHV0ZWRTdHlsZXM7XG5cbiAgaWYgKGNzc0NsYXNzWzBdID09PSBcIi5cIikge1xuICAgIGNzc0NsYXNzID0gY3NzQ2xhc3Muc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgZWxlbWVudC5jbGFzc05hbWUgPSBjc3NDbGFzcztcbiAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lICFpbXBvcnRhbnRcIjtcbiAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWQgIWltcG9ydGFudFwiO1xuICBlbGVtZW50LnN0eWxlLmxlZnQgPSBcIi05OTk5OXB4ICFpbXBvcnRhbnRcIjtcbiAgZWxlbWVudC5zdHlsZS50b3AgPSBcIi05OTk5OXB4ICFpbXBvcnRhbnRcIjtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTtcblxuICBjb21wdXRlZFN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gIGFsbG93ZWRTdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICB2YXIgdmFsdWUgPSBjb21wdXRlZFN0eWxlc1tzdHlsZV07XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHN0eWxlc1tzdHlsZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG5cbiAgcmV0dXJuIHN0eWxlcztcbn07XG5cbn0se1wiLi4vc2hhcmVkL2NvbnN0YW50c1wiOjExMn1dLDEwODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFzc2lnbiA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYXNzaWduXCIpLmFzc2lnbjtcbnZhciBjcmVhdGVBc3NldHNVcmwgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCIpO1xudmFyIGlzVmVyaWZpZWREb21haW4gPSBfZGVyZXFfKFwiLi4vLi4vbGliL2lzLXZlcmlmaWVkLWRvbWFpblwiKTtcbnZhciBEZXN0cnVjdG9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9kZXN0cnVjdG9yXCIpO1xudmFyIGlGcmFtZXIgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9pZnJhbWVyXCIpO1xudmFyIEJ1cyA9IF9kZXJlcV8oXCJmcmFtZWJ1c1wiKTtcbnZhciBjcmVhdGVEZWZlcnJlZENsaWVudCA9IF9kZXJlcV8oXCIuLi8uLi9saWIvY3JlYXRlLWRlZmVycmVkLWNsaWVudFwiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGNvbXBvc2VVcmwgPSBfZGVyZXFfKFwiLi9jb21wb3NlLXVybFwiKTtcbnZhciBnZXRTdHlsZXNGcm9tQ2xhc3MgPSBfZGVyZXFfKFwiLi9nZXQtc3R5bGVzLWZyb20tY2xhc3NcIik7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9jb25zdGFudHNcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9lcnJvcnNcIik7XG52YXIgSU5URUdSQVRJT05fVElNRU9VVF9NUyA9XG4gIF9kZXJlcV8oXCIuLi8uLi9saWIvY29uc3RhbnRzXCIpLklOVEVHUkFUSU9OX1RJTUVPVVRfTVM7XG52YXIgdXVpZCA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3V1aWRcIik7XG52YXIgZmluZFBhcmVudFRhZ3MgPSBfZGVyZXFfKFwiLi4vc2hhcmVkL2ZpbmQtcGFyZW50LXRhZ3NcIik7XG52YXIgYnJvd3NlckRldGVjdGlvbiA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvYnJvd3Nlci1kZXRlY3Rpb25cIik7XG52YXIgZXZlbnRzID0gY29uc3RhbnRzLmV2ZW50cztcbnZhciBFdmVudEVtaXR0ZXIgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9ldmVudC1lbWl0dGVyXCIpO1xudmFyIGluamVjdEZyYW1lID0gX2RlcmVxXyhcIi4vaW5qZWN0LWZyYW1lXCIpO1xudmFyIGFuYWx5dGljcyA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYW5hbHl0aWNzXCIpO1xudmFyIGFsbG93ZWRGaWVsZHMgPSBjb25zdGFudHMuYWxsb3dlZEZpZWxkcztcbnZhciBtZXRob2RzID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9tZXRob2RzXCIpO1xudmFyIHNoYWRvdyA9IF9kZXJlcV8oXCIuLi8uLi9saWIvc2hhZG93XCIpO1xudmFyIGZpbmRSb290Tm9kZSA9IF9kZXJlcV8oXCIuLi8uLi9saWIvZmluZC1yb290LW5vZGVcIik7XG52YXIgY29udmVydE1ldGhvZHNUb0Vycm9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIik7XG52YXIgc2hhcmVkRXJyb3JzID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9lcnJvcnNcIik7XG52YXIgZ2V0Q2FyZFR5cGVzID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9nZXQtY2FyZC10eXBlc1wiKTtcbnZhciBhdHRyaWJ1dGVWYWxpZGF0aW9uRXJyb3IgPSBfZGVyZXFfKFwiLi9hdHRyaWJ1dGUtdmFsaWRhdGlvbi1lcnJvclwiKTtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcbnZhciBmb2N1c0NoYW5nZSA9IF9kZXJlcV8oXCIuL2ZvY3VzLWNoYW5nZVwiKTtcbnZhciBkZXN0cm95Rm9jdXNJbnRlcmNlcHQgPSBfZGVyZXFfKFwiLi4vc2hhcmVkL2ZvY3VzLWludGVyY2VwdFwiKS5kZXN0cm95O1xuXG52YXIgU0FGQVJJX0ZPQ1VTX1RJTUVPVVQgPSA1O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IEhvc3RlZEZpZWxkc350b2tlbml6ZVBheWxvYWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBub25jZSBUaGUgcGF5bWVudCBtZXRob2Qgbm9uY2UuXG4gKiBAcHJvcGVydHkge29iamVjdH0gYXV0aGVudGljYXRpb25JbnNpZ2h0IEluZm8gYWJvdXQgdGhlIFtyZWd1bGF0b3J5IGVudmlyb25tZW50XShodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2JyYWludHJlZS9kb2NzL2d1aWRlcy8zZC1zZWN1cmUvYWR2YW5jZWQtb3B0aW9ucy9qYXZhc2NyaXB0L3YzI2F1dGhlbnRpY2F0aW9uLWluc2lnaHQpIG9mIHRoZSB0b2tlbml6ZWQgY2FyZC4gT25seSBhdmFpbGFibGUgaWYgYGF1dGhlbnRpY2F0aW9uSW5zaWdodC5tZXJjaGFudEFjY291bnRJZGAgaXMgcGFzc2VkIGluIHRoZSBgdG9rZW5pemVgIG1ldGhvZCBvcHRpb25zLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGF1dGhlbnRpY2F0aW9uSW5zaWdodC5yZWd1bGF0aW9uRW52aXJvbm1lbnQgVGhlIFtyZWd1bGF0aW9uIGVudmlyb25tZW50XShodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2JyYWludHJlZS9kb2NzL2d1aWRlcy8zZC1zZWN1cmUvYWR2YW5jZWQtb3B0aW9ucy9qYXZhc2NyaXB0L3YzI2F1dGhlbnRpY2F0aW9uLWluc2lnaHQpIGZvciB0aGUgdG9rZW5pemVkIGNhcmQuXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGV0YWlscyBBZGRpdGlvbmFsIGFjY291bnQgZGV0YWlscy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmJpbiBUaGUgQklOIG51bWJlciBvZiB0aGUgY2FyZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmNhcmRUeXBlIFR5cGUgb2YgY2FyZCwgZXg6IFZpc2EsIE1hc3RlckNhcmQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5leHBpcmF0aW9uTW9udGggVGhlIGV4cGlyYXRpb24gbW9udGggb2YgdGhlIGNhcmQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5leHBpcmF0aW9uWWVhciBUaGUgZXhwaXJhdGlvbiB5ZWFyIG9mIHRoZSBjYXJkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuY2FyZGhvbGRlck5hbWUgVGhlIGNhcmRob2xkZXIgbmFtZSB0b2tlbml6ZWQgd2l0aCB0aGUgY2FyZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmxhc3RGb3VyIExhc3QgZm91ciBkaWdpdHMgb2YgY2FyZCBudW1iZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5sYXN0VHdvIExhc3QgdHdvIGRpZ2l0cyBvZiBjYXJkIG51bWJlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXNjcmlwdGlvbiBBIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIHBheW1lbnQgbWV0aG9kIHR5cGUsIGFsd2F5cyBgQ3JlZGl0Q2FyZGAuXG4gKiBAcHJvcGVydHkge29iamVjdH0gYmluRGF0YSBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY2FyZCBiYXNlZCBvbiB0aGUgYmluLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuY29tbWVyY2lhbCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5jb3VudHJ5T2ZJc3N1YW5jZSBUaGUgY291bnRyeSBvZiBpc3N1YW5jZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmRlYml0IFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmR1cmJpblJlZ3VsYXRlZCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5oZWFsdGhjYXJlIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmlzc3VpbmdCYW5rIFRoZSBpc3N1aW5nIGJhbmsuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5wYXlyb2xsIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLnByZXBhaWQgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEucHJvZHVjdElkIFRoZSBwcm9kdWN0IGlkLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gSG9zdGVkRmllbGRzfnN0YXRlT2JqZWN0XG4gKiBAZGVzY3JpcHRpb24gVGhlIGV2ZW50IHBheWxvYWQgc2VudCBmcm9tIHtAbGluayBIb3N0ZWRGaWVsZHMjb258b259IG9yIHtAbGluayBIb3N0ZWRGaWVsZHMjZ2V0U3RhdGV8Z2V0U3RhdGV9LlxuICogQHByb3BlcnR5IHtIb3N0ZWRGaWVsZHN+aG9zdGVkRmllbGRzQ2FyZFtdfSBjYXJkc1xuICogVGhpcyB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBwb3RlbnRpYWwge0BsaW5rIEhvc3RlZEZpZWxkc35ob3N0ZWRGaWVsZHNDYXJkfGNhcmRzfS4gSWYgdGhlIGNhcmQgdHlwZSBoYXMgYmVlbiBkZXRlcm1pbmVkLCB0aGUgYXJyYXkgd2lsbCBjb250YWluIG9ubHkgb25lIGNhcmQuXG4gKiBJbnRlcm5hbGx5LCBIb3N0ZWQgRmllbGRzIHVzZXMgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9icmFpbnRyZWUvY3JlZGl0LWNhcmQtdHlwZVwiPmNyZWRpdC1jYXJkLXR5cGU8L2E+LFxuICogYW4gb3Blbi1zb3VyY2UgY2FyZCBkZXRlY3Rpb24gbGlicmFyeS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBlbWl0dGVkQnlcbiAqIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCBhc3NvY2lhdGVkIHdpdGggYW4gZXZlbnQuIFRoaXMgd2lsbCBub3QgYmUgaW5jbHVkZWQgaWYgcmV0dXJuZWQgYnkge0BsaW5rIEhvc3RlZEZpZWxkcyNnZXRTdGF0ZXxnZXRTdGF0ZX0uIEl0IHdpbGwgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgc3RyaW5nczo8YnI+XG4gKiAtIGBcIm51bWJlclwiYFxuICogLSBgXCJjdnZcImBcbiAqIC0gYFwiZXhwaXJhdGlvbkRhdGVcImBcbiAqIC0gYFwiZXhwaXJhdGlvbk1vbnRoXCJgXG4gKiAtIGBcImV4cGlyYXRpb25ZZWFyXCJgXG4gKiAtIGBcInBvc3RhbENvZGVcImBcbiAqIC0gYFwiY2FyZGhvbGRlck5hbWVcImBcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBmaWVsZHNcbiAqIEBwcm9wZXJ0eSB7P0hvc3RlZEZpZWxkc35ob3N0ZWRGaWVsZHNGaWVsZERhdGF9IGZpZWxkcy5udW1iZXIge0BsaW5rIEhvc3RlZEZpZWxkc35ob3N0ZWRGaWVsZHNGaWVsZERhdGF8aG9zdGVkRmllbGRzRmllbGREYXRhfSBmb3IgdGhlIG51bWJlciBmaWVsZCwgaWYgaXQgaXMgcHJlc2VudC5cbiAqIEBwcm9wZXJ0eSB7P0hvc3RlZEZpZWxkc35ob3N0ZWRGaWVsZHNGaWVsZERhdGF9IGZpZWxkcy5jdnYge0BsaW5rIEhvc3RlZEZpZWxkc35ob3N0ZWRGaWVsZHNGaWVsZERhdGF8aG9zdGVkRmllbGRzRmllbGREYXRhfSBmb3IgdGhlIENWViBmaWVsZCwgaWYgaXQgaXMgcHJlc2VudC5cbiAqIEBwcm9wZXJ0eSB7P0hvc3RlZEZpZWxkc35ob3N0ZWRGaWVsZHNGaWVsZERhdGF9IGZpZWxkcy5leHBpcmF0aW9uRGF0ZSB7QGxpbmsgSG9zdGVkRmllbGRzfmhvc3RlZEZpZWxkc0ZpZWxkRGF0YXxob3N0ZWRGaWVsZHNGaWVsZERhdGF9IGZvciB0aGUgZXhwaXJhdGlvbiBkYXRlIGZpZWxkLCBpZiBpdCBpcyBwcmVzZW50LlxuICogQHByb3BlcnR5IHs/SG9zdGVkRmllbGRzfmhvc3RlZEZpZWxkc0ZpZWxkRGF0YX0gZmllbGRzLmV4cGlyYXRpb25Nb250aCB7QGxpbmsgSG9zdGVkRmllbGRzfmhvc3RlZEZpZWxkc0ZpZWxkRGF0YXxob3N0ZWRGaWVsZHNGaWVsZERhdGF9IGZvciB0aGUgZXhwaXJhdGlvbiBtb250aCBmaWVsZCwgaWYgaXQgaXMgcHJlc2VudC5cbiAqIEBwcm9wZXJ0eSB7P0hvc3RlZEZpZWxkc35ob3N0ZWRGaWVsZHNGaWVsZERhdGF9IGZpZWxkcy5leHBpcmF0aW9uWWVhciB7QGxpbmsgSG9zdGVkRmllbGRzfmhvc3RlZEZpZWxkc0ZpZWxkRGF0YXxob3N0ZWRGaWVsZHNGaWVsZERhdGF9IGZvciB0aGUgZXhwaXJhdGlvbiB5ZWFyIGZpZWxkLCBpZiBpdCBpcyBwcmVzZW50LlxuICogQHByb3BlcnR5IHs/SG9zdGVkRmllbGRzfmhvc3RlZEZpZWxkc0ZpZWxkRGF0YX0gZmllbGRzLnBvc3RhbENvZGUge0BsaW5rIEhvc3RlZEZpZWxkc35ob3N0ZWRGaWVsZHNGaWVsZERhdGF8aG9zdGVkRmllbGRzRmllbGREYXRhfSBmb3IgdGhlIHBvc3RhbCBjb2RlIGZpZWxkLCBpZiBpdCBpcyBwcmVzZW50LlxuICogQHByb3BlcnR5IHs/SG9zdGVkRmllbGRzfmhvc3RlZEZpZWxkc0ZpZWxkRGF0YX0gZmllbGRzLmNhcmRob2xkZXJOYW1lIHtAbGluayBIb3N0ZWRGaWVsZHN+aG9zdGVkRmllbGRzRmllbGREYXRhfGhvc3RlZEZpZWxkc0ZpZWxkRGF0YX0gZm9yIHRoZSBjYXJkaG9sZGVyIG5hbWUgZmllbGQsIGlmIGl0IGlzIHByZXNlbnQuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBIb3N0ZWRGaWVsZHN+YmluUGF5bG9hZFxuICogQGRlc2NyaXB0aW9uIFRoZSBldmVudCBwYXlsb2FkIHNlbnQgZnJvbSB7QGxpbmsgSG9zdGVkRmllbGRzI29ufG9ufSB3aGVuIHRoZSB7QGxpbmsgSG9zdGVkRmllbGRzI2V2ZW50OmJpbkF2YWlsYWJsZXxiaW5BdmFpbGFibGV9IGV2ZW50IGlzIGVtaXR0ZWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluIFRoZSBmaXJzdCA2IGRpZ2l0cyBvZiB0aGUgY2FyZCBudW1iZXIuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBIb3N0ZWRGaWVsZHN+aG9zdGVkRmllbGRzRmllbGREYXRhXG4gKiBAZGVzY3JpcHRpb24gRGF0YSBhYm91dCBIb3N0ZWQgRmllbGRzIGZpZWxkcywgc2VudCBpbiB7QGxpbmsgSG9zdGVkRmllbGRzfnN0YXRlT2JqZWN0fHN0YXRlT2JqZWN0c30uXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBjb250YWluZXIgUmVmZXJlbmNlIHRvIHRoZSBjb250YWluZXIgRE9NIGVsZW1lbnQgb24geW91ciBwYWdlIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBldmVudC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNGb2N1c2VkIFdoZXRoZXIgb3Igbm90IHRoZSBpbnB1dCBpcyBjdXJyZW50bHkgZm9jdXNlZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNFbXB0eSBXaGV0aGVyIG9yIG5vdCB0aGUgdXNlciBoYXMgZW50ZXJlZCBhIHZhbHVlIGluIHRoZSBpbnB1dC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNQb3RlbnRpYWxseVZhbGlkXG4gKiBBIGRldGVybWluYXRpb24gYmFzZWQgb24gdGhlIGZ1dHVyZSB2YWxpZGl0eSBvZiB0aGUgaW5wdXQgdmFsdWUuXG4gKiBUaGlzIGlzIGhlbHBmdWwgd2hlbiBhIHVzZXIgaXMgZW50ZXJpbmcgYSBjYXJkIG51bWJlciBhbmQgdHlwZXMgPGNvZGU+XCI0MVwiPC9jb2RlPi5cbiAqIFdoaWxlIHRoYXQgdmFsdWUgaXMgbm90IHZhbGlkIGZvciBzdWJtaXNzaW9uLCBpdCBpcyBzdGlsbCBwb3NzaWJsZSBmb3JcbiAqIGl0IHRvIGJlY29tZSBhIGZ1bGx5IHF1YWxpZmllZCBlbnRyeS4gSG93ZXZlciwgaWYgdGhlIHVzZXIgZW50ZXJzIDxjb2RlPlwiNHhcIjwvY29kZT5cbiAqIGl0IGlzIGNsZWFyIHRoYXQgdGhlIGNhcmQgbnVtYmVyIGNhbiBuZXZlciBiZWNvbWUgdmFsaWQgYW5kIGlzUG90ZW50aWFsbHlWYWxpZCB3aWxsXG4gKiByZXR1cm4gZmFsc2UuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzVmFsaWQgV2hldGhlciBvciBub3QgdGhlIHZhbHVlIG9mIHRoZSBhc3NvY2lhdGVkIGlucHV0IGlzIDxpPmZ1bGx5PC9pPiBxdWFsaWZpZWQgZm9yIHN1Ym1pc3Npb24uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBIb3N0ZWRGaWVsZHN+aG9zdGVkRmllbGRzQ2FyZFxuICogQGRlc2NyaXB0aW9uIEluZm9ybWF0aW9uIGFib3V0IHRoZSBjYXJkIHR5cGUsIHNlbnQgaW4ge0BsaW5rIEhvc3RlZEZpZWxkc35zdGF0ZU9iamVjdHxzdGF0ZU9iamVjdHN9LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIGNvZGUtZnJpZW5kbHkgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNhcmQgdHlwZS4gSXQgd2lsbCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBzdHJpbmdzOlxuICogLSBgYW1lcmljYW4tZXhwcmVzc2BcbiAqIC0gYGRpbmVycy1jbHViYFxuICogLSBgZGlzY292ZXJgXG4gKiAtIGBqY2JgXG4gKiAtIGBtYWVzdHJvYFxuICogLSBgbWFzdGVyLWNhcmRgXG4gKiAtIGB1bmlvbnBheWBcbiAqIC0gYHZpc2FgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmljZVR5cGUgVGhlIHByZXR0eS1wcmludGVkIGNhcmQgdHlwZS4gSXQgd2lsbCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBzdHJpbmdzOlxuICogLSBgQW1lcmljYW4gRXhwcmVzc2BcbiAqIC0gYERpbmVycyBDbHViYFxuICogLSBgRGlzY292ZXJgXG4gKiAtIGBKQ0JgXG4gKiAtIGBNYWVzdHJvYFxuICogLSBgTWFzdGVyQ2FyZGBcbiAqIC0gYFVuaW9uUGF5YFxuICogLSBgVmlzYWBcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb2RlXG4gKiBUaGlzIG9iamVjdCBjb250YWlucyBkYXRhIHJlbGV2YW50IHRvIHRoZSBzZWN1cml0eSBjb2RlIHJlcXVpcmVtZW50cyBvZiB0aGUgY2FyZCBicmFuZC5cbiAqIEZvciBleGFtcGxlLCBvbiBhIFZpc2EgY2FyZCB0aGVyZSB3aWxsIGJlIGEgPGNvZGU+Q1ZWPC9jb2RlPiBvZiAzIGRpZ2l0cywgd2hlcmVhcyBhblxuICogQW1lcmljYW4gRXhwcmVzcyBjYXJkIHJlcXVpcmVzIGEgNC1kaWdpdCA8Y29kZT5DSUQ8L2NvZGU+LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvZGUubmFtZSA8Y29kZT5cIkNWVlwiPC9jb2RlPiA8Y29kZT5cIkNJRFwiPC9jb2RlPiA8Y29kZT5cIkNWQ1wiPC9jb2RlPlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGNvZGUuc2l6ZSBUaGUgZXhwZWN0ZWQgbGVuZ3RoIG9mIHRoZSBzZWN1cml0eSBjb2RlLiBUeXBpY2FsbHksIHRoaXMgaXMgMyBvciA0LlxuICovXG5cbi8qKlxuICogQG5hbWUgSG9zdGVkRmllbGRzI29uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gd2hpY2ggeW91IGFyZSBzdWJzY3JpYmluZy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhbmRsZXIgQSBjYWxsYmFjayB0byBoYW5kbGUgdGhlIGV2ZW50LlxuICogQGRlc2NyaXB0aW9uIFN1YnNjcmliZXMgYSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGEgbmFtZWQgZXZlbnQuXG4gKlxuICogKipFdmVudHMgdGhhdCBlbWl0IGEge0BsaW5rIEhvc3RlZEZpZWxkc35zdGF0ZU9iamVjdHxzdGF0ZU9iamVjdH0uKipcbiAqICoge0BsaW5rIEhvc3RlZEZpZWxkcyNldmVudDpibHVyfGJsdXJ9XG4gKiAqIHtAbGluayBIb3N0ZWRGaWVsZHMjZXZlbnQ6Zm9jdXN8Zm9jdXN9XG4gKiAqIHtAbGluayBIb3N0ZWRGaWVsZHMjZXZlbnQ6ZW1wdHl8ZW1wdHl9XG4gKiAqIHtAbGluayBIb3N0ZWRGaWVsZHMjZXZlbnQ6bm90RW1wdHl8bm90RW1wdHl9XG4gKiAqIHtAbGluayBIb3N0ZWRGaWVsZHMjZXZlbnQ6Y2FyZFR5cGVDaGFuZ2V8Y2FyZFR5cGVDaGFuZ2V9XG4gKiAqIHtAbGluayBIb3N0ZWRGaWVsZHMjZXZlbnQ6dmFsaWRpdHlDaGFuZ2V8dmFsaWRpdHlDaGFuZ2V9XG4gKiAqIHtAbGluayBIb3N0ZWRGaWVsZHMjZXZlbnQ6aW5wdXRTdWJtaXRSZXF1ZXN0fGlucHV0U3VibWl0UmVxdWVzdH1cbiAqXG4gKiAqKk90aGVyIEV2ZW50cyoqXG4gKiAqIHtAbGluayBIb3N0ZWRGaWVsZHMjZXZlbnQ6YmluQXZhaWxhYmxlfGJpbkF2YWlsYWJsZX0gLSBlbWl0cyBhIHtAbGluayBIb3N0ZWRGaWVsZHN+YmluUGF5bG9hZHxiaW4gcGF5bG9hZH0uIE5vdGU6IElmIHlvdSBhcmUgdXNpbmcgYSBbUmVmZXJyZXItUG9saWN5XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvUmVmZXJyZXItUG9saWN5KSBoZWFkZXIgdGhhdCBwcmV2ZW50cyB0aGUgb3JpZ2luIGZyb20gYmVpbmcgc2VudCwgdGhpcyBldmVudCB3aWxsIG5vdCBmaXJlLlxuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPkxpc3RlbmluZyB0byBhIEhvc3RlZCBGaWVsZCBldmVudCwgaW4gdGhpcyBjYXNlICdmb2N1cyc8L2NhcHRpb24+XG4gKiBob3N0ZWRGaWVsZHMuY3JlYXRlKHsgLi4uIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIGhvc3RlZEZpZWxkc0luc3RhbmNlKSB7XG4gKiAgIGhvc3RlZEZpZWxkc0luc3RhbmNlLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChldmVudCkge1xuICogICAgIGNvbnNvbGUubG9nKGV2ZW50LmVtaXR0ZWRCeSwgJ2hhcyBiZWVuIGZvY3VzZWQnKTtcbiAqICAgfSk7XG4gKiB9KTtcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cbi8qKlxuICogQG5hbWUgSG9zdGVkRmllbGRzI29mZlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIHdoaWNoIHlvdSBhcmUgdW5zdWJzY3JpYmluZy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhbmRsZXIgVGhlIGNhbGxiYWNrIGZvciB0aGUgZXZlbnQgeW91IGFyZSB1bnN1YnNjcmliaW5nIGZyb20uXG4gKiBAZGVzY3JpcHRpb24gVW5zdWJzY3JpYmVzIHRoZSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGEgbmFtZWQgZXZlbnQuXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+U3Vic2NyaWJpbmcgYW5kIHRoZW4gdW5zdWJzY3JpYmluZyBmcm9tIGEgSG9zdGVkIEZpZWxkIGV2ZW50LCBpbiB0aGlzIGNhc2UgJ2ZvY3VzJzwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkcy5jcmVhdGUoeyAuLi4gfSwgZnVuY3Rpb24gKGNyZWF0ZUVyciwgaG9zdGVkRmllbGRzSW5zdGFuY2UpIHtcbiAqICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgY29uc29sZS5sb2coZXZlbnQuZW1pdHRlZEJ5LCAnaGFzIGJlZW4gZm9jdXNlZCcpO1xuICogICB9O1xuICogICBob3N0ZWRGaWVsZHNJbnN0YW5jZS5vbignZm9jdXMnLCBjYWxsYmFjayk7XG4gKlxuICogICAvLyBsYXRlciBvblxuICogICBob3N0ZWRGaWVsZHNJbnN0YW5jZS5vZmYoJ2ZvY3VzJywgY2FsbGJhY2spO1xuICogfSk7XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vKipcbiAqIFRoaXMgZXZlbnQgaXMgZW1pdHRlZCB3aGVuIHRoZSB1c2VyIHJlcXVlc3RzIHN1Ym1pc3Npb24gb2YgYW4gaW5wdXQgZmllbGQsIHN1Y2ggYXMgYnkgcHJlc3NpbmcgdGhlIEVudGVyIG9yIFJldHVybiBrZXkgb24gdGhlaXIga2V5Ym9hcmQsIG9yIG1vYmlsZSBlcXVpdmFsZW50LlxuICogQGV2ZW50IEhvc3RlZEZpZWxkcyNpbnB1dFN1Ym1pdFJlcXVlc3RcbiAqIEB0eXBlIHtIb3N0ZWRGaWVsZHN+c3RhdGVPYmplY3R9XG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+Q2xpY2tpbmcgYSBzdWJtaXQgYnV0dG9uIHVwb24gaGl0dGluZyBFbnRlciAob3IgZXF1aXZhbGVudCkgd2l0aGluIGEgSG9zdGVkIEZpZWxkPC9jYXB0aW9uPlxuICogdmFyIGhvc3RlZEZpZWxkcyA9IHJlcXVpcmUoJ2JyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkcycpO1xuICogdmFyIHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJzdWJtaXRcIl0nKTtcbiAqXG4gKiBob3N0ZWRGaWVsZHMuY3JlYXRlKHsgLi4uIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIGhvc3RlZEZpZWxkc0luc3RhbmNlKSB7XG4gKiAgIGhvc3RlZEZpZWxkc0luc3RhbmNlLm9uKCdpbnB1dFN1Ym1pdFJlcXVlc3QnLCBmdW5jdGlvbiAoKSB7XG4gKiAgICAgLy8gVXNlciByZXF1ZXN0ZWQgc3VibWlzc2lvbiwgZS5nLiBieSBwcmVzc2luZyBFbnRlciBvciBlcXVpdmFsZW50XG4gKiAgICAgc3VibWl0QnV0dG9uLmNsaWNrKCk7XG4gKiAgIH0pO1xuICogfSk7XG4gKi9cblxuLyoqXG4gKiBUaGlzIGV2ZW50IGlzIGVtaXR0ZWQgd2hlbiBhIGZpZWxkIHRyYW5zaXRpb25zIGZyb20gaGF2aW5nIGRhdGEgdG8gYmVpbmcgZW1wdHkuXG4gKiBAZXZlbnQgSG9zdGVkRmllbGRzI2VtcHR5XG4gKiBAdHlwZSB7SG9zdGVkRmllbGRzfnN0YXRlT2JqZWN0fVxuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPkxpc3RlbmluZyB0byBhbiBlbXB0eSBldmVudDwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkcy5jcmVhdGUoeyAuLi4gfSwgZnVuY3Rpb24gKGNyZWF0ZUVyciwgaG9zdGVkRmllbGRzSW5zdGFuY2UpIHtcbiAqICAgaG9zdGVkRmllbGRzSW5zdGFuY2Uub24oJ2VtcHR5JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgY29uc29sZS5sb2coZXZlbnQuZW1pdHRlZEJ5LCAnaXMgbm93IGVtcHR5Jyk7XG4gKiAgIH0pO1xuICogfSk7XG4gKi9cblxuLyoqXG4gKiBUaGlzIGV2ZW50IGlzIGVtaXR0ZWQgd2hlbiBhIGZpZWxkIHRyYW5zaXRpb25zIGZyb20gYmVpbmcgZW1wdHkgdG8gaGF2aW5nIGRhdGEuXG4gKiBAZXZlbnQgSG9zdGVkRmllbGRzI25vdEVtcHR5XG4gKiBAdHlwZSB7SG9zdGVkRmllbGRzfnN0YXRlT2JqZWN0fVxuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPkxpc3RlbmluZyB0byBhbiBub3RFbXB0eSBldmVudDwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkcy5jcmVhdGUoeyAuLi4gfSwgZnVuY3Rpb24gKGNyZWF0ZUVyciwgaG9zdGVkRmllbGRzSW5zdGFuY2UpIHtcbiAqICAgaG9zdGVkRmllbGRzSW5zdGFuY2Uub24oJ25vdEVtcHR5JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgY29uc29sZS5sb2coZXZlbnQuZW1pdHRlZEJ5LCAnaXMgbm93IG5vdCBlbXB0eScpO1xuICogICB9KTtcbiAqIH0pO1xuICovXG5cbi8qKlxuICogVGhpcyBldmVudCBpcyBlbWl0dGVkIHdoZW4gYSBmaWVsZCBsb3NlcyBmb2N1cy5cbiAqIEBldmVudCBIb3N0ZWRGaWVsZHMjYmx1clxuICogQHR5cGUge0hvc3RlZEZpZWxkc35zdGF0ZU9iamVjdH1cbiAqIEBleGFtcGxlXG4gKiA8Y2FwdGlvbj5MaXN0ZW5pbmcgdG8gYSBibHVyIGV2ZW50PC9jYXB0aW9uPlxuICogaG9zdGVkRmllbGRzLmNyZWF0ZSh7IC4uLiB9LCBmdW5jdGlvbiAoY3JlYXRlRXJyLCBob3N0ZWRGaWVsZHNJbnN0YW5jZSkge1xuICogICBob3N0ZWRGaWVsZHNJbnN0YW5jZS5vbignYmx1cicsIGZ1bmN0aW9uIChldmVudCkge1xuICogICAgIGNvbnNvbGUubG9nKGV2ZW50LmVtaXR0ZWRCeSwgJ2xvc3QgZm9jdXMnKTtcbiAqICAgfSk7XG4gKiB9KTtcbiAqL1xuXG4vKipcbiAqIFRoaXMgZXZlbnQgaXMgZW1pdHRlZCB3aGVuIGEgZmllbGQgZ2FpbnMgZm9jdXMuXG4gKiBAZXZlbnQgSG9zdGVkRmllbGRzI2ZvY3VzXG4gKiBAdHlwZSB7SG9zdGVkRmllbGRzfnN0YXRlT2JqZWN0fVxuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPkxpc3RlbmluZyB0byBhIGZvY3VzIGV2ZW50PC9jYXB0aW9uPlxuICogaG9zdGVkRmllbGRzLmNyZWF0ZSh7IC4uLiB9LCBmdW5jdGlvbiAoY3JlYXRlRXJyLCBob3N0ZWRGaWVsZHNJbnN0YW5jZSkge1xuICogICBob3N0ZWRGaWVsZHNJbnN0YW5jZS5vbignZm9jdXMnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAqICAgICBjb25zb2xlLmxvZyhldmVudC5lbWl0dGVkQnksICdnYWluZWQgZm9jdXMnKTtcbiAqICAgfSk7XG4gKiB9KTtcbiAqL1xuXG4vKipcbiAqIFRoaXMgZXZlbnQgaXMgZW1pdHRlZCB3aGVuIGFjdGl2aXR5IHdpdGhpbiB0aGUgbnVtYmVyIGZpZWxkIGhhcyBjaGFuZ2VkIHN1Y2ggdGhhdCB0aGUgcG9zc2libGUgY2FyZCB0eXBlIGhhcyBjaGFuZ2VkLlxuICogQGV2ZW50IEhvc3RlZEZpZWxkcyNjYXJkVHlwZUNoYW5nZVxuICogQHR5cGUge0hvc3RlZEZpZWxkc35zdGF0ZU9iamVjdH1cbiAqIEBleGFtcGxlXG4gKiA8Y2FwdGlvbj5MaXN0ZW5pbmcgdG8gYSBjYXJkVHlwZUNoYW5nZSBldmVudDwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkcy5jcmVhdGUoeyAuLi4gfSwgZnVuY3Rpb24gKGNyZWF0ZUVyciwgaG9zdGVkRmllbGRzSW5zdGFuY2UpIHtcbiAqICAgaG9zdGVkRmllbGRzSW5zdGFuY2Uub24oJ2NhcmRUeXBlQ2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgaWYgKGV2ZW50LmNhcmRzLmxlbmd0aCA9PT0gMSkge1xuICogICAgICAgY29uc29sZS5sb2coZXZlbnQuY2FyZHNbMF0udHlwZSk7XG4gKiAgICAgfSBlbHNlIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdUeXBlIG9mIGNhcmQgbm90IHlldCBrbm93bicpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKiB9KTtcbiAqL1xuXG4vKipcbiAqIFRoaXMgZXZlbnQgaXMgZW1pdHRlZCB3aGVuIHRoZSB2YWxpZGl0eSBvZiBhIGZpZWxkIGhhcyBjaGFuZ2VkLiBWYWxpZGl0eSBpcyByZXByZXNlbnRlZCBpbiB0aGUge0BsaW5rIEhvc3RlZEZpZWxkc35zdGF0ZU9iamVjdHxzdGF0ZU9iamVjdH0gYXMgdHdvIGJvb2xlYW5zOiBgaXNWYWxpZGAgYW5kIGBpc1BvdGVudGlhbGx5VmFsaWRgLlxuICogQGV2ZW50IEhvc3RlZEZpZWxkcyN2YWxpZGl0eUNoYW5nZVxuICogQHR5cGUge0hvc3RlZEZpZWxkc35zdGF0ZU9iamVjdH1cbiAqIEBleGFtcGxlXG4gKiA8Y2FwdGlvbj5MaXN0ZW5pbmcgdG8gYSB2YWxpZGl0eUNoYW5nZSBldmVudDwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkcy5jcmVhdGUoeyAuLi4gfSwgZnVuY3Rpb24gKGNyZWF0ZUVyciwgaG9zdGVkRmllbGRzSW5zdGFuY2UpIHtcbiAqICAgaG9zdGVkRmllbGRzSW5zdGFuY2Uub24oJ3ZhbGlkaXR5Q2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgdmFyIGZpZWxkID0gZXZlbnQuZmllbGRzW2V2ZW50LmVtaXR0ZWRCeV07XG4gKlxuICogICAgIGlmIChmaWVsZC5pc1ZhbGlkKSB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhldmVudC5lbWl0dGVkQnksICdpcyBmdWxseSB2YWxpZCcpO1xuICogICAgIH0gZWxzZSBpZiAoZmllbGQuaXNQb3RlbnRpYWxseVZhbGlkKSB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhldmVudC5lbWl0dGVkQnksICdpcyBwb3RlbnRpYWxseSB2YWxpZCcpO1xuICogICAgIH0gZWxzZSB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhldmVudC5lbWl0dGVkQnksICdpcyBub3QgdmFsaWQnKTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICogfSk7XG4gKi9cblxuLyoqXG4gKiBUaGlzIGV2ZW50IGlzIGVtaXR0ZWQgd2hlbiB0aGUgZmlyc3QgNiBkaWdpdHMgb2YgdGhlIGNhcmQgbnVtYmVyIGhhdmUgYmVlbiBlbnRlcmVkIGJ5IHRoZSBjdXN0b21lci5cbiAqIEBldmVudCBIb3N0ZWRGaWVsZHMjYmluQXZhaWxhYmxlXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPkxpc3RlbmluZyB0byBhIGBiaW5BdmFpbGFibGVgIGV2ZW50PC9jYXB0aW9uPlxuICogaG9zdGVkRmllbGRzLmNyZWF0ZSh7IC4uLiB9LCBmdW5jdGlvbiAoY3JlYXRlRXJyLCBob3N0ZWRGaWVsZHNJbnN0YW5jZSkge1xuICogICBob3N0ZWRGaWVsZHNJbnN0YW5jZS5vbignYmluQXZhaWxhYmxlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgZXZlbnQuYmluIC8vIHNlbmQgYmluIHRvIDNyZCBwYXJ0eSBiaW4gc2VydmljZVxuICogICB9KTtcbiAqIH0pO1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0RXZlbnRIYW5kbGVyKGZpZWxkcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50RGF0YSkge1xuICAgIHZhciBmaWVsZDtcbiAgICB2YXIgbWVyY2hhbnRQYXlsb2FkID0gZXZlbnREYXRhLm1lcmNoYW50UGF5bG9hZDtcbiAgICB2YXIgZW1pdHRlZEJ5ID0gbWVyY2hhbnRQYXlsb2FkLmVtaXR0ZWRCeTtcbiAgICB2YXIgY29udGFpbmVyID0gZmllbGRzW2VtaXR0ZWRCeV0uY29udGFpbmVyRWxlbWVudDtcblxuICAgIE9iamVjdC5rZXlzKG1lcmNoYW50UGF5bG9hZC5maWVsZHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgbWVyY2hhbnRQYXlsb2FkLmZpZWxkc1trZXldLmNvbnRhaW5lciA9IGZpZWxkc1trZXldLmNvbnRhaW5lckVsZW1lbnQ7XG4gICAgfSk7XG5cbiAgICBmaWVsZCA9IG1lcmNoYW50UGF5bG9hZC5maWVsZHNbZW1pdHRlZEJ5XTtcblxuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKFxuICAgICAgY29uc3RhbnRzLmV4dGVybmFsQ2xhc3Nlcy5GT0NVU0VELFxuICAgICAgZmllbGQuaXNGb2N1c2VkXG4gICAgKTtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZShjb25zdGFudHMuZXh0ZXJuYWxDbGFzc2VzLlZBTElELCBmaWVsZC5pc1ZhbGlkKTtcblxuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKFxuICAgICAgY29uc3RhbnRzLmV4dGVybmFsQ2xhc3Nlcy5JTlZBTElELFxuICAgICAgIWZpZWxkLmlzUG90ZW50aWFsbHlWYWxpZFxuICAgICk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW52YWxpZC10aGlzXG4gICAgdGhpcy5fc3RhdGUgPSB7XG4gICAgICBjYXJkczogbWVyY2hhbnRQYXlsb2FkLmNhcmRzLFxuICAgICAgZmllbGRzOiBtZXJjaGFudFBheWxvYWQuZmllbGRzLFxuICAgIH07XG5cbiAgICB0aGlzLl9lbWl0KGV2ZW50RGF0YS50eXBlLCBtZXJjaGFudFBheWxvYWQpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuICB9O1xufVxuXG5mdW5jdGlvbiBpc1Zpc2libGVFbm91Z2gobm9kZSkge1xuICB2YXIgYm91bmRpbmdCb3ggPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdmVydGljYWxNaWRwb2ludCA9IE1hdGguZmxvb3IoYm91bmRpbmdCb3guaGVpZ2h0IC8gMik7XG4gIHZhciBob3Jpem9udGFsTWlkcG9pbnQgPSBNYXRoLmZsb29yKGJvdW5kaW5nQm94LndpZHRoIC8gMik7XG5cbiAgcmV0dXJuIChcbiAgICBib3VuZGluZ0JveC50b3AgPFxuICAgICAgKHdpbmRvdy5pbm5lckhlaWdodCAtIHZlcnRpY2FsTWlkcG9pbnQgfHxcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCAtIHZlcnRpY2FsTWlkcG9pbnQpICYmXG4gICAgYm91bmRpbmdCb3gucmlnaHQgPiBob3Jpem9udGFsTWlkcG9pbnQgJiZcbiAgICBib3VuZGluZ0JveC5ib3R0b20gPiB2ZXJ0aWNhbE1pZHBvaW50ICYmXG4gICAgYm91bmRpbmdCb3gubGVmdCA8XG4gICAgICAod2luZG93LmlubmVyV2lkdGggLSBob3Jpem9udGFsTWlkcG9pbnQgfHxcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIC0gaG9yaXpvbnRhbE1pZHBvaW50KVxuICApO1xufVxuXG4vKipcbiAqIEBjbGFzcyBIb3N0ZWRGaWVsZHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFRoZSBIb3N0ZWQgRmllbGRzIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9ob3N0ZWQtZmllbGRzLmNyZWF0ZSBjcmVhdGV9IG9wdGlvbnMuXG4gKiBAZGVzY3JpcHRpb24gPHN0cm9uZz5EbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIFVzZSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkcy5jcmVhdGV8YnJhaW50cmVlLXdlYi5ob3N0ZWQtZmllbGRzLmNyZWF0ZX0gaW5zdGVhZC48L3N0cm9uZz5cbiAqIEBjbGFzc2Rlc2MgVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgSG9zdGVkIEZpZWxkcyBjb21wb25lbnQgcHJvZHVjZWQgYnkge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2hvc3RlZC1maWVsZHMuY3JlYXRlfGJyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkcy5jcmVhdGV9LiBJbnN0YW5jZXMgb2YgdGhpcyBjbGFzcyBoYXZlIG1ldGhvZHMgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIGlucHV0IGZpZWxkcyB3aXRoaW4gSG9zdGVkIEZpZWxkcycgaWZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gSG9zdGVkRmllbGRzKG9wdGlvbnMpIHtcbiAgdmFyIGZhaWx1cmVUaW1lb3V0LCBjbGllbnRDb25maWcsIGFzc2V0c1VybCwgaXNEZWJ1ZywgaG9zdGVkRmllbGRzVXJsO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBmaWVsZHMgPSB7fTtcbiAgdmFyIGZyYW1lUmVhZHlQcm9taXNlUmVzb2x2ZUZ1bmN0aW9ucyA9IHt9O1xuICB2YXIgZnJhbWVSZWFkeVByb21pc2VzID0gW107XG4gIHZhciBjb21wb25lbnRJZCA9IHV1aWQoKTtcblxuICB0aGlzLl9tZXJjaGFudENvbmZpZ3VyYXRpb25PcHRpb25zID0gYXNzaWduKHt9LCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucy5jbGllbnQpIHtcbiAgICBjbGllbnRDb25maWcgPSBvcHRpb25zLmNsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG4gICAgYXNzZXRzVXJsID0gY2xpZW50Q29uZmlnLmdhdGV3YXlDb25maWd1cmF0aW9uLmFzc2V0c1VybDtcbiAgICBpc0RlYnVnID0gY2xpZW50Q29uZmlnLmlzRGVidWc7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXRzVXJsID0gY3JlYXRlQXNzZXRzVXJsLmNyZWF0ZShvcHRpb25zLmF1dGhvcml6YXRpb24pO1xuICAgIGlzRGVidWcgPSBCb29sZWFuKG9wdGlvbnMuaXNEZWJ1Zyk7XG4gIH1cblxuICB0aGlzLl9jbGllbnRQcm9taXNlID0gY3JlYXRlRGVmZXJyZWRDbGllbnQuY3JlYXRlKHtcbiAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICBkZWJ1ZzogaXNEZWJ1ZyxcbiAgICBhc3NldHNVcmw6IGFzc2V0c1VybCxcbiAgICBuYW1lOiBcIkhvc3RlZCBGaWVsZHNcIixcbiAgfSk7XG5cbiAgaG9zdGVkRmllbGRzVXJsID0gY29tcG9zZVVybChhc3NldHNVcmwsIGNvbXBvbmVudElkLCBpc0RlYnVnKTtcblxuICBpZiAoIW9wdGlvbnMuZmllbGRzIHx8IE9iamVjdC5rZXlzKG9wdGlvbnMuZmllbGRzKS5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgdHlwZTogc2hhcmVkRXJyb3JzLklOU1RBTlRJQVRJT05fT1BUSU9OX1JFUVVJUkVELnR5cGUsXG4gICAgICBjb2RlOiBzaGFyZWRFcnJvcnMuSU5TVEFOVElBVElPTl9PUFRJT05fUkVRVUlSRUQuY29kZSxcbiAgICAgIG1lc3NhZ2U6IFwib3B0aW9ucy5maWVsZHMgaXMgcmVxdWlyZWQgd2hlbiBpbnN0YW50aWF0aW5nIEhvc3RlZCBGaWVsZHMuXCIsXG4gICAgfSk7XG4gIH1cblxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB0aGlzLl9pbmplY3RlZE5vZGVzID0gW107XG4gIHRoaXMuX2Rlc3RydWN0b3IgPSBuZXcgRGVzdHJ1Y3RvcigpO1xuICB0aGlzLl9maWVsZHMgPSBmaWVsZHM7XG4gIHRoaXMuX3N0YXRlID0ge1xuICAgIGZpZWxkczoge30sXG4gICAgY2FyZHM6IGdldENhcmRUeXBlcyhcIlwiKSxcbiAgfTtcblxuICB0aGlzLl9idXMgPSBuZXcgQnVzKHtcbiAgICBjaGFubmVsOiBjb21wb25lbnRJZCxcbiAgICB2ZXJpZnlEb21haW46IGlzVmVyaWZpZWREb21haW4sXG4gICAgdGFyZ2V0RnJhbWVzOiBbd2luZG93XSxcbiAgfSk7XG5cbiAgdGhpcy5fZGVzdHJ1Y3Rvci5yZWdpc3RlckZ1bmN0aW9uRm9yVGVhcmRvd24oZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuX2J1cy50ZWFyZG93bigpO1xuICB9KTtcblxuICAvLyBORVhUX01BSk9SX1ZFUlNJT04gYW5hbHl0aWNzIGV2ZW50cyBzaG91bGQgaGF2ZSBwcmVzZW50IHRlbnNlIHZlcmJzXG4gIGlmICghb3B0aW9ucy5jbGllbnQpIHtcbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgdGhpcy5fY2xpZW50UHJvbWlzZSxcbiAgICAgIFwiY3VzdG9tLmhvc3RlZC1maWVsZHMuaW5pdGlhbGl6ZWQuZGVmZXJyZWQtY2xpZW50XCJcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICB0aGlzLl9jbGllbnRQcm9taXNlLFxuICAgICAgXCJjdXN0b20uaG9zdGVkLWZpZWxkcy5pbml0aWFsaXplZFwiXG4gICAgKTtcbiAgfVxuXG4gIE9iamVjdC5rZXlzKG9wdGlvbnMuZmllbGRzKS5mb3JFYWNoKFxuICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBmaWVsZCwgZXh0ZXJuYWxDb250YWluZXIsIGludGVybmFsQ29udGFpbmVyLCBmcmFtZSwgZnJhbWVSZWFkeVByb21pc2U7XG5cbiAgICAgIGlmICghY29uc3RhbnRzLmFsbG93ZWRGaWVsZHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB0aHJvdyBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICAgIHR5cGU6IGVycm9ycy5IT1NURURfRklFTERTX0lOVkFMSURfRklFTERfS0VZLnR5cGUsXG4gICAgICAgICAgY29kZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfSU5WQUxJRF9GSUVMRF9LRVkuY29kZSxcbiAgICAgICAgICBtZXNzYWdlOiAnXCInICsga2V5ICsgJ1wiIGlzIG5vdCBhIHZhbGlkIGZpZWxkLicsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmaWVsZCA9IG9wdGlvbnMuZmllbGRzW2tleV07XG4gICAgICAvLyBORVhUX01BSk9SX1ZFUlNJT04gcmVtb3ZlIHNlbGVjdG9yIGFzIGFuIG9wdGlvblxuICAgICAgLy8gYW5kIHNpbXBseSBtYWtlIHRoZSBBUEkgdGFrZSBhIGNvbnRhaW5lclxuICAgICAgZXh0ZXJuYWxDb250YWluZXIgPSBmaWVsZC5jb250YWluZXIgfHwgZmllbGQuc2VsZWN0b3I7XG5cbiAgICAgIGlmICh0eXBlb2YgZXh0ZXJuYWxDb250YWluZXIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZXh0ZXJuYWxDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGV4dGVybmFsQ29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFleHRlcm5hbENvbnRhaW5lciB8fCBleHRlcm5hbENvbnRhaW5lci5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICAgIHR5cGU6IGVycm9ycy5IT1NURURfRklFTERTX0lOVkFMSURfRklFTERfU0VMRUNUT1IudHlwZSxcbiAgICAgICAgICBjb2RlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19JTlZBTElEX0ZJRUxEX1NFTEVDVE9SLmNvZGUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfSU5WQUxJRF9GSUVMRF9TRUxFQ1RPUi5tZXNzYWdlLFxuICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgIGZpZWxkU2VsZWN0b3I6IGZpZWxkLnNlbGVjdG9yLFxuICAgICAgICAgICAgZmllbGRDb250YWluZXI6IGZpZWxkLmNvbnRhaW5lcixcbiAgICAgICAgICAgIGZpZWxkS2V5OiBrZXksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBleHRlcm5hbENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpZnJhbWVbbmFtZV49XCJicmFpbnRyZWUtXCJdJylcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICAgIHR5cGU6IGVycm9ycy5IT1NURURfRklFTERTX0ZJRUxEX0RVUExJQ0FURV9JRlJBTUUudHlwZSxcbiAgICAgICAgICBjb2RlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9EVVBMSUNBVEVfSUZSQU1FLmNvZGUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfRklFTERfRFVQTElDQVRFX0lGUkFNRS5tZXNzYWdlLFxuICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgIGZpZWxkU2VsZWN0b3I6IGZpZWxkLnNlbGVjdG9yLFxuICAgICAgICAgICAgZmllbGRDb250YWluZXI6IGZpZWxkLmNvbnRhaW5lcixcbiAgICAgICAgICAgIGZpZWxkS2V5OiBrZXksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGludGVybmFsQ29udGFpbmVyID0gZXh0ZXJuYWxDb250YWluZXI7XG5cbiAgICAgIGlmIChzaGFkb3cuaXNTaGFkb3dFbGVtZW50KGludGVybmFsQ29udGFpbmVyKSkge1xuICAgICAgICBpbnRlcm5hbENvbnRhaW5lciA9IHNoYWRvdy50cmFuc2Zvcm1Ub1Nsb3QoXG4gICAgICAgICAgaW50ZXJuYWxDb250YWluZXIsXG4gICAgICAgICAgXCJoZWlnaHQ6IDEwMCVcIlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmllbGQubWF4bGVuZ3RoICYmIHR5cGVvZiBmaWVsZC5tYXhsZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9QUk9QRVJUWV9JTlZBTElELnR5cGUsXG4gICAgICAgICAgY29kZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfRklFTERfUFJPUEVSVFlfSU5WQUxJRC5jb2RlLFxuICAgICAgICAgIG1lc3NhZ2U6IFwiVGhlIHZhbHVlIGZvciBtYXhsZW5ndGggbXVzdCBiZSBhIG51bWJlci5cIixcbiAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICBmaWVsZEtleToga2V5LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmllbGQubWlubGVuZ3RoICYmIHR5cGVvZiBmaWVsZC5taW5sZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9QUk9QRVJUWV9JTlZBTElELnR5cGUsXG4gICAgICAgICAgY29kZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfRklFTERfUFJPUEVSVFlfSU5WQUxJRC5jb2RlLFxuICAgICAgICAgIG1lc3NhZ2U6IFwiVGhlIHZhbHVlIGZvciBtaW5sZW5ndGggbXVzdCBiZSBhIG51bWJlci5cIixcbiAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICBmaWVsZEtleToga2V5LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmcmFtZSA9IGlGcmFtZXIoe1xuICAgICAgICB0eXBlOiBrZXksXG4gICAgICAgIG5hbWU6IFwiYnJhaW50cmVlLWhvc3RlZC1maWVsZC1cIiArIGtleSxcbiAgICAgICAgc3R5bGU6IGNvbnN0YW50cy5kZWZhdWx0SUZyYW1lU3R5bGUsXG4gICAgICAgIHRpdGxlOlxuICAgICAgICAgIGZpZWxkLmlmcmFtZVRpdGxlIHx8XG4gICAgICAgICAgXCJTZWN1cmUgQ3JlZGl0IENhcmQgRnJhbWUgLSBcIiArIGNvbnN0YW50cy5hbGxvd2VkRmllbGRzW2tleV0ubGFiZWwsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2J1cy5hZGRUYXJnZXRGcmFtZShmcmFtZSk7XG5cbiAgICAgIHRoaXMuX2luamVjdGVkTm9kZXMucHVzaC5hcHBseShcbiAgICAgICAgdGhpcy5faW5qZWN0ZWROb2RlcyxcbiAgICAgICAgaW5qZWN0RnJhbWUoY29tcG9uZW50SWQsIGZyYW1lLCBpbnRlcm5hbENvbnRhaW5lciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYuZm9jdXMoa2V5KTtcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuX3NldHVwTGFiZWxGb2N1cyhrZXksIGV4dGVybmFsQ29udGFpbmVyKTtcbiAgICAgIGZpZWxkc1trZXldID0ge1xuICAgICAgICBmcmFtZUVsZW1lbnQ6IGZyYW1lLFxuICAgICAgICBjb250YWluZXJFbGVtZW50OiBleHRlcm5hbENvbnRhaW5lcixcbiAgICAgIH07XG4gICAgICBmcmFtZVJlYWR5UHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGZyYW1lUmVhZHlQcm9taXNlUmVzb2x2ZUZ1bmN0aW9uc1trZXldID0gcmVzb2x2ZTtcbiAgICAgIH0pO1xuICAgICAgZnJhbWVSZWFkeVByb21pc2VzLnB1c2goZnJhbWVSZWFkeVByb21pc2UpO1xuXG4gICAgICB0aGlzLl9zdGF0ZS5maWVsZHNba2V5XSA9IHtcbiAgICAgICAgaXNFbXB0eTogdHJ1ZSxcbiAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgIGlzUG90ZW50aWFsbHlWYWxpZDogdHJ1ZSxcbiAgICAgICAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgICAgICAgY29udGFpbmVyOiBleHRlcm5hbENvbnRhaW5lcixcbiAgICAgIH07XG5cbiAgICAgIC8vIHByZXZlbnRzIGxvYWRpbmcgdGhlIGlmcmFtZSBmcm9tIGJsb2NraW5nIHRoZSBjb2RlXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnJhbWUuc3JjID0gaG9zdGVkRmllbGRzVXJsO1xuICAgICAgfSwgMCk7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG5cbiAgaWYgKHRoaXMuX21lcmNoYW50Q29uZmlndXJhdGlvbk9wdGlvbnMuc3R5bGVzKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5fbWVyY2hhbnRDb25maWd1cmF0aW9uT3B0aW9ucy5zdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKFxuICAgICAgc2VsZWN0b3JcbiAgICApIHtcbiAgICAgIHZhciBjbGFzc05hbWUgPSBzZWxmLl9tZXJjaGFudENvbmZpZ3VyYXRpb25PcHRpb25zLnN0eWxlc1tzZWxlY3Rvcl07XG5cbiAgICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHNlbGYuX21lcmNoYW50Q29uZmlndXJhdGlvbk9wdGlvbnMuc3R5bGVzW3NlbGVjdG9yXSA9XG4gICAgICAgICAgZ2V0U3R5bGVzRnJvbUNsYXNzKGNsYXNzTmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLl9idXMub24oZXZlbnRzLlJFTU9WRV9GT0NVU19JTlRFUkNFUFRTLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRlc3Ryb3lGb2N1c0ludGVyY2VwdChkYXRhICYmIGRhdGEuaWQpO1xuICB9KTtcblxuICB0aGlzLl9idXMub24oXG4gICAgZXZlbnRzLlRSSUdHRVJfRk9DVVNfQ0hBTkdFLFxuICAgIGZvY3VzQ2hhbmdlLmNyZWF0ZUZvY3VzQ2hhbmdlSGFuZGxlcihjb21wb25lbnRJZCwge1xuICAgICAgb25SZW1vdmVGb2N1c0ludGVyY2VwdHM6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHNlbGYuX2J1cy5lbWl0KGV2ZW50cy5SRU1PVkVfRk9DVVNfSU5URVJDRVBUUywge1xuICAgICAgICAgIGlkOiBlbGVtZW50LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvblRyaWdnZXJJbnB1dEZvY3VzOiBmdW5jdGlvbiAodGFyZ2V0VHlwZSkge1xuICAgICAgICBzZWxmLmZvY3VzKHRhcmdldFR5cGUpO1xuICAgICAgfSxcbiAgICB9KVxuICApO1xuXG4gIHRoaXMuX2J1cy5vbihldmVudHMuUkVBRFlfRk9SX0NMSUVOVCwgZnVuY3Rpb24gKHJlcGx5KSB7XG4gICAgc2VsZi5fY2xpZW50UHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIHJlcGx5KGNsaWVudCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRoaXMuX2J1cy5vbihldmVudHMuQ0FSRF9GT1JNX0VOVFJZX0hBU19CRUdVTiwgZnVuY3Rpb24gKCkge1xuICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoc2VsZi5fY2xpZW50UHJvbWlzZSwgXCJob3N0ZWQtZmllbGRzLmlucHV0LnN0YXJ0ZWRcIik7XG4gIH0pO1xuXG4gIHRoaXMuX2J1cy5vbihldmVudHMuQklOX0FWQUlMQUJMRSwgZnVuY3Rpb24gKGJpbikge1xuICAgIHNlbGYuX2VtaXQoXCJiaW5BdmFpbGFibGVcIiwge1xuICAgICAgYmluOiBiaW4sXG4gICAgfSk7XG4gIH0pO1xuXG4gIGZhaWx1cmVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgIHNlbGYuX2NsaWVudFByb21pc2UsXG4gICAgICBcImN1c3RvbS5ob3N0ZWQtZmllbGRzLmxvYWQudGltZWQtb3V0XCJcbiAgICApO1xuICAgIHNlbGYuX2VtaXQoXCJ0aW1lb3V0XCIpO1xuICB9LCBJTlRFR1JBVElPTl9USU1FT1VUX01TKTtcblxuICBQcm9taXNlLmFsbChmcmFtZVJlYWR5UHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICB2YXIgcmVwbHkgPSByZXN1bHRzWzBdO1xuXG4gICAgY2xlYXJUaW1lb3V0KGZhaWx1cmVUaW1lb3V0KTtcbiAgICByZXBseShcbiAgICAgIGZvcm1hdE1lcmNoYW50Q29uZmlndXJhdGlvbkZvcklmcmFtZXMoc2VsZi5fbWVyY2hhbnRDb25maWd1cmF0aW9uT3B0aW9ucylcbiAgICApO1xuXG4gICAgc2VsZi5fY2xlYW5VcEZvY3VzSW50ZXJjZXB0cygpO1xuXG4gICAgc2VsZi5fZW1pdChcInJlYWR5XCIpO1xuICB9KTtcblxuICB0aGlzLl9idXMub24oZXZlbnRzLkZSQU1FX1JFQURZLCBmdW5jdGlvbiAoZGF0YSwgcmVwbHkpIHtcbiAgICBmcmFtZVJlYWR5UHJvbWlzZVJlc29sdmVGdW5jdGlvbnNbZGF0YS5maWVsZF0ocmVwbHkpO1xuICB9KTtcblxuICB0aGlzLl9idXMub24oZXZlbnRzLklOUFVUX0VWRU5ULCBjcmVhdGVJbnB1dEV2ZW50SGFuZGxlcihmaWVsZHMpLmJpbmQodGhpcykpO1xuXG4gIHRoaXMuX2Rlc3RydWN0b3IucmVnaXN0ZXJGdW5jdGlvbkZvclRlYXJkb3duKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaiwgbm9kZSwgcGFyZW50O1xuXG4gICAgZm9yIChqID0gMDsgaiA8IHNlbGYuX2luamVjdGVkTm9kZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIG5vZGUgPSBzZWxmLl9pbmplY3RlZE5vZGVzW2pdO1xuICAgICAgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuXG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobm9kZSk7XG5cbiAgICAgIHBhcmVudC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICBjb25zdGFudHMuZXh0ZXJuYWxDbGFzc2VzLkZPQ1VTRUQsXG4gICAgICAgIGNvbnN0YW50cy5leHRlcm5hbENsYXNzZXMuSU5WQUxJRCxcbiAgICAgICAgY29uc3RhbnRzLmV4dGVybmFsQ2xhc3Nlcy5WQUxJRFxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIHRoaXMuX2Rlc3RydWN0b3IucmVnaXN0ZXJGdW5jdGlvbkZvclRlYXJkb3duKGZ1bmN0aW9uICgpIHtcbiAgICBkZXN0cm95Rm9jdXNJbnRlcmNlcHQoKTtcbiAgfSk7XG5cbiAgdGhpcy5fZGVzdHJ1Y3Rvci5yZWdpc3RlckZ1bmN0aW9uRm9yVGVhcmRvd24oZnVuY3Rpb24gKCkge1xuICAgIHZhciBtZXRob2ROYW1lcyA9IG1ldGhvZHMoSG9zdGVkRmllbGRzLnByb3RvdHlwZSkuY29uY2F0KFxuICAgICAgbWV0aG9kcyhFdmVudEVtaXR0ZXIucHJvdG90eXBlKVxuICAgICk7XG5cbiAgICBjb252ZXJ0TWV0aG9kc1RvRXJyb3Ioc2VsZiwgbWV0aG9kTmFtZXMpO1xuICB9KTtcbn1cblxuRXZlbnRFbWl0dGVyLmNyZWF0ZUNoaWxkKEhvc3RlZEZpZWxkcyk7XG5cbkhvc3RlZEZpZWxkcy5wcm90b3R5cGUuX3NldHVwTGFiZWxGb2N1cyA9IGZ1bmN0aW9uICh0eXBlLCBjb250YWluZXIpIHtcbiAgdmFyIGxhYmVscywgaTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgcm9vdE5vZGUgPSBmaW5kUm9vdE5vZGUoY29udGFpbmVyKTtcblxuICBpZiAoY29udGFpbmVyLmlkID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiB0cmlnZ2VyRm9jdXMoKSB7XG4gICAgc2VsZi5mb2N1cyh0eXBlKTtcbiAgfVxuXG4gIC8vIGZpbmQgYW55IGxhYmVscyBpbiB0aGUgbm9ybWFsIERPTVxuICBsYWJlbHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsYWJlbFtmb3I9XCInICsgY29udGFpbmVyLmlkICsgJ1wiXScpXG4gICk7XG4gIGlmIChyb290Tm9kZSAhPT0gZG9jdW1lbnQpIHtcbiAgICAvLyBmaW5kIGFueSBsYWJlbHMgd2l0aGluIHRoZSBzaGFkb3cgZG9tXG4gICAgbGFiZWxzID0gbGFiZWxzLmNvbmNhdChcbiAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuICAgICAgICByb290Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdsYWJlbFtmb3I9XCInICsgY29udGFpbmVyLmlkICsgJ1wiXScpXG4gICAgICApXG4gICAgKTtcbiAgfVxuICAvLyBmaW5kIGFueSBsYWJlbHMgc3Vycm91bmRpbmcgdGhlIGNvbnRhaW5lciB0aGF0IGRvbid0IGFsc28gaGF2ZSB0aGUgYGZvcmAgYXR0cmlidXRlXG4gIGxhYmVscyA9IGxhYmVscy5jb25jYXQoZmluZFBhcmVudFRhZ3MoY29udGFpbmVyLCBcImxhYmVsXCIpKTtcbiAgLy8gZmlsdGVyIG91dCBhbnkgYWNjaWRlbnRhbCBkdXBsaWNhdGVzXG4gIGxhYmVscyA9IGxhYmVscy5maWx0ZXIoZnVuY3Rpb24gKGxhYmVsLCBpbmRleCwgYXJyKSB7XG4gICAgcmV0dXJuIGFyci5pbmRleE9mKGxhYmVsKSA9PT0gaW5kZXg7XG4gIH0pO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICBsYWJlbHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRyaWdnZXJGb2N1cywgZmFsc2UpO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJ1Y3Rvci5yZWdpc3RlckZ1bmN0aW9uRm9yVGVhcmRvd24oZnVuY3Rpb24gKCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxhYmVsc1tpXS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdHJpZ2dlckZvY3VzLCBmYWxzZSk7XG4gICAgfVxuICB9KTtcbn07XG5cbkhvc3RlZEZpZWxkcy5wcm90b3R5cGUuX2dldEFueUZpZWxkQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2ZpZWxkcykucmVkdWNlKGZ1bmN0aW9uIChmb3VuZCwgZmllbGQpIHtcbiAgICByZXR1cm4gZm91bmQgfHwgc2VsZi5fZmllbGRzW2ZpZWxkXS5jb250YWluZXJFbGVtZW50O1xuICB9LCBudWxsKTtcbn07XG5cbkhvc3RlZEZpZWxkcy5wcm90b3R5cGUuX2NsZWFuVXBGb2N1c0ludGVyY2VwdHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZnJhbWVDb250YWluZXIsIGNoZWNrb3V0Rm9ybTtcblxuICBpZiAoZG9jdW1lbnQuZm9ybXMubGVuZ3RoIDwgMSkge1xuICAgIHRoaXMuX2J1cy5lbWl0KGV2ZW50cy5SRU1PVkVfRk9DVVNfSU5URVJDRVBUUyk7XG4gIH0gZWxzZSB7XG4gICAgaWZyYW1lQ29udGFpbmVyID0gdGhpcy5fZ2V0QW55RmllbGRDb250YWluZXIoKTtcbiAgICBjaGVja291dEZvcm0gPSBmaW5kUGFyZW50VGFncyhpZnJhbWVDb250YWluZXIsIFwiZm9ybVwiKVswXTtcblxuICAgIGlmIChjaGVja291dEZvcm0pIHtcbiAgICAgIGZvY3VzQ2hhbmdlLnJlbW92ZUV4dHJhRm9jdXNFbGVtZW50cyhcbiAgICAgICAgY2hlY2tvdXRGb3JtLFxuICAgICAgICBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICB0aGlzLl9idXMuZW1pdChldmVudHMuUkVNT1ZFX0ZPQ1VTX0lOVEVSQ0VQVFMsIHtcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9idXMuZW1pdChldmVudHMuUkVNT1ZFX0ZPQ1VTX0lOVEVSQ0VQVFMpO1xuICAgIH1cbiAgfVxufTtcblxuSG9zdGVkRmllbGRzLnByb3RvdHlwZS5fYXR0YWNoSW52YWxpZEZpZWxkQ29udGFpbmVyc1RvRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGlmIChcbiAgICAhKFxuICAgICAgZXJyLmRldGFpbHMgJiZcbiAgICAgIGVyci5kZXRhaWxzLmludmFsaWRGaWVsZEtleXMgJiZcbiAgICAgIGVyci5kZXRhaWxzLmludmFsaWRGaWVsZEtleXMubGVuZ3RoID4gMFxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVyci5kZXRhaWxzLmludmFsaWRGaWVsZHMgPSB7fTtcbiAgZXJyLmRldGFpbHMuaW52YWxpZEZpZWxkS2V5cy5mb3JFYWNoKFxuICAgIGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgZXJyLmRldGFpbHMuaW52YWxpZEZpZWxkc1tmaWVsZF0gPSB0aGlzLl9maWVsZHNbZmllbGRdLmNvbnRhaW5lckVsZW1lbnQ7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG59O1xuXG4vKipcbiAqIEdldCBjYXJkIHZlcmlmaWNhdGlvbiBjaGFsbGVuZ2VzLCBzdWNoIGFzIHJlcXVpcmVtZW50cyBmb3IgY3Z2IGFuZCBwb3N0YWwgY29kZS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGVkIG9uIGNvbXBsZXRpb24sIGNvbnRhaW5pbmcgYW4gZXJyb3IgaWYgb25lIG9jY3VycmVkLiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgYGdldENoYWxsZW5nZXNgIHJldHVybnMgYSBwcm9taXNlLlxuICogQGV4YW1wbGVcbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLmdldENoYWxsZW5nZXMoKS50aGVuKGZ1bmN0aW9uIChjaGFsbGVuZ2VzKSB7XG4gKiAgIGNoYWxsZW5nZXMgLy8gWydjdnYnLCAncG9zdGFsX2NvZGUnXVxuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLmdldENoYWxsZW5nZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9jbGllbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgIHJldHVybiBjbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpLmdhdGV3YXlDb25maWd1cmF0aW9uLmNoYWxsZW5nZXM7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXQgc3VwcG9ydGVkIGNhcmQgdHlwZXMgY29uZmlndXJlZCBpbiB0aGUgQnJhaW50cmVlIENvbnRyb2wgUGFuZWxcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGVkIG9uIGNvbXBsZXRpb24sIGNvbnRhaW5pbmcgYW4gZXJyb3IgaWYgb25lIG9jY3VycmVkLiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgYGdldFN1cHBvcnRlZENhcmRUeXBlc2AgcmV0dXJucyBhIHByb21pc2UuXG4gKiBAZXhhbXBsZVxuICogaG9zdGVkRmllbGRzSW5zdGFuY2UuZ2V0U3VwcG9ydGVkQ2FyZFR5cGVzKCkudGhlbihmdW5jdGlvbiAoY2FyZFR5cGVzKSB7XG4gKiAgIGNhcmRUeXBlcyAvLyBbJ1Zpc2EnLCAnQW1lcmljYW4gRXhwcmVzcycsICdNYXN0ZXJjYXJkJ11cbiAqIH0pO1xuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuSG9zdGVkRmllbGRzLnByb3RvdHlwZS5nZXRTdXBwb3J0ZWRDYXJkVHlwZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9jbGllbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgIHZhciBjYXJkcyA9IGNsaWVudFxuICAgICAgLmdldENvbmZpZ3VyYXRpb24oKVxuICAgICAgLmdhdGV3YXlDb25maWd1cmF0aW9uLmNyZWRpdENhcmRzLnN1cHBvcnRlZENhcmRUeXBlcy5tYXAoZnVuY3Rpb24gKFxuICAgICAgICBjYXJkVHlwZVxuICAgICAgKSB7XG4gICAgICAgIGlmIChjYXJkVHlwZSA9PT0gXCJNYXN0ZXJDYXJkXCIpIHtcbiAgICAgICAgICAvLyBNYXN0ZXJjYXJkIGNoYW5nZWQgdGhlaXIgYnJhbmRpbmcuIFdlIGNhbid0IHVwZGF0ZSBvdXJcbiAgICAgICAgICAvLyBjb25maWcgd2l0aG91dCBjcmVhdGluZyBhIGJyZWFraW5nIGNoYW5nZSwgc28gd2UganVzdFxuICAgICAgICAgIC8vIGhhcmQgY29kZSB0aGUgY2hhbmdlIGhlcmVcbiAgICAgICAgICByZXR1cm4gXCJNYXN0ZXJjYXJkXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FyZFR5cGU7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBjYXJkcztcbiAgfSk7XG59O1xuXG4vKipcbiAqIENsZWFubHkgcmVtb3ZlIGFueXRoaW5nIHNldCB1cCBieSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkcy5jcmVhdGV8Y3JlYXRlfS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGVkIG9uIGNvbXBsZXRpb24sIGNvbnRhaW5pbmcgYW4gZXJyb3IgaWYgb25lIG9jY3VycmVkLiBObyBkYXRhIGlzIHJldHVybmVkIGlmIHRlYXJkb3duIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBgdGVhcmRvd25gIHJldHVybnMgYSBwcm9taXNlLlxuICogQGV4YW1wbGVcbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLnRlYXJkb3duKGZ1bmN0aW9uICh0ZWFyZG93bkVycikge1xuICogICBpZiAodGVhcmRvd25FcnIpIHtcbiAqICAgICBjb25zb2xlLmVycm9yKCdDb3VsZCBub3QgdGVhciBkb3duIEhvc3RlZCBGaWVsZHMhJyk7XG4gKiAgIH0gZWxzZSB7XG4gKiAgICAgY29uc29sZS5pbmZvKCdIb3N0ZWQgRmllbGRzIGhhcyBiZWVuIHRvcm4gZG93biEnKTtcbiAqICAgfVxuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZWxmLl9kZXN0cnVjdG9yLnRlYXJkb3duKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgIHNlbGYuX2NsaWVudFByb21pc2UsXG4gICAgICAgIFwiY3VzdG9tLmhvc3RlZC1maWVsZHMudGVhcmRvd24tY29tcGxldGVkXCJcbiAgICAgICk7XG5cbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBUb2tlbml6ZXMgZmllbGRzIGFuZCByZXR1cm5zIGEgbm9uY2UgcGF5bG9hZC5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gQWxsIHRva2VuaXphdGlvbiBvcHRpb25zIGZvciB0aGUgSG9zdGVkIEZpZWxkcyBjb21wb25lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnZhdWx0PWZhbHNlXSBXaGVuIHRydWUsIHdpbGwgdmF1bHQgdGhlIHRva2VuaXplZCBjYXJkLiBDYXJkcyB3aWxsIG9ubHkgYmUgdmF1bHRlZCB3aGVuIHVzaW5nIGEgY2xpZW50IGNyZWF0ZWQgd2l0aCBhIGNsaWVudCB0b2tlbiB0aGF0IGluY2x1ZGVzIGEgY3VzdG9tZXIgSUQuIE5vdGU6IG1lcmNoYW50cyB1c2luZyBBZHZhbmNlZCBGcmF1ZCBUb29scyBzaG91bGQgbm90IHVzZSB0aGlzIG9wdGlvbiwgYXMgZGV2aWNlIGRhdGEgd2lsbCBub3QgYmUgaW5jbHVkZWQuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuYXV0aGVudGljYXRpb25JbnNpZ2h0XSBPcHRpb25zIGZvciBjaGVja2luZyBhdXRoZW50aWNhdGlvbiBpbnNpZ2h0IC0gdGhlIFtyZWd1bGF0b3J5IGVudmlyb25tZW50XShodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2JyYWludHJlZS9kb2NzL2d1aWRlcy8zZC1zZWN1cmUvYWR2YW5jZWQtb3B0aW9ucy9qYXZhc2NyaXB0L3YzI2F1dGhlbnRpY2F0aW9uLWluc2lnaHQpIG9mIHRoZSB0b2tlbml6ZWQgY2FyZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmF1dGhlbnRpY2F0aW9uSW5zaWdodC5tZXJjaGFudEFjY291bnRJZCBUaGUgQnJhaW50cmVlIG1lcmNoYW50IGFjY291bnQgaWQgdG8gdXNlIHRvIGxvb2sgdXAgdGhlIGF1dGhlbnRpY2F0aW9uIGluc2lnaHQgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0ge2FycmF5fSBbb3B0aW9ucy5maWVsZHNUb1Rva2VuaXplXSBCeSBkZWZhdWx0LCBhbGwgZmllbGRzIHdpbGwgYmUgdG9rZW5pemVkLiBZb3UgbWF5IHNwZWNpZnkgd2hpY2ggZmllbGRzIHNwZWNpZmljYWxseSB5b3Ugd2lzaCB0byB0b2tlbml6ZSB3aXRoIHRoaXMgcHJvcGVydHkuIFZhbGlkIG9wdGlvbnMgYXJlIGAnbnVtYmVyJ2AsIGAnY3Z2J2AsIGAnZXhwaXJhdGlvbkRhdGUnYCwgYCdleHBpcmF0aW9uTW9udGgnYCwgYCdleHBpcmF0aW9uWWVhcidgLCBgJ3Bvc3RhbENvZGUnYCwgYCdjYXJkaG9sZGVyTmFtZSdgLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmNhcmRob2xkZXJOYW1lXSBXaGVuIHN1cHBsaWVkLCB0aGUgY2FyZGhvbGRlciBuYW1lIHRvIGJlIHRva2VuaXplZCB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgZmllbGRzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJpbGxpbmdBZGRyZXNzLnBvc3RhbENvZGVdIFdoZW4gc3VwcGxpZWQsIHRoaXMgcG9zdGFsIGNvZGUgd2lsbCBiZSB0b2tlbml6ZWQgYWxvbmcgd2l0aCB0aGUgY29udGVudHMgb2YgdGhlIGZpZWxkcy4gSWYgYSBwb3N0YWwgY29kZSBpcyBwcm92aWRlZCBhcyBwYXJ0IG9mIHRoZSBIb3N0ZWQgRmllbGRzIGNvbmZpZ3VyYXRpb24sIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgd2lsbCBiZSB0b2tlbml6ZWQgYW5kIHRoaXMgdmFsdWUgd2lsbCBiZSBpZ25vcmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJpbGxpbmdBZGRyZXNzLmZpcnN0TmFtZV0gV2hlbiBzdXBwbGllZCwgdGhpcyBjdXN0b21lciBmaXJzdCBuYW1lIHdpbGwgYmUgdG9rZW5pemVkIGFsb25nIHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBmaWVsZHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmlsbGluZ0FkZHJlc3MubGFzdE5hbWVdIFdoZW4gc3VwcGxpZWQsIHRoaXMgY3VzdG9tZXIgbGFzdCBuYW1lIHdpbGwgYmUgdG9rZW5pemVkIGFsb25nIHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBmaWVsZHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmlsbGluZ0FkZHJlc3MuY29tcGFueV0gV2hlbiBzdXBwbGllZCwgdGhpcyBjb21wYW55IG5hbWUgd2lsbCBiZSB0b2tlbml6ZWQgYWxvbmcgd2l0aCB0aGUgY29udGVudHMgb2YgdGhlIGZpZWxkcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5iaWxsaW5nQWRkcmVzcy5zdHJlZXRBZGRyZXNzXSBXaGVuIHN1cHBsaWVkLCB0aGlzIHN0cmVldCBhZGRyZXNzIHdpbGwgYmUgdG9rZW5pemVkIGFsb25nIHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBmaWVsZHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmlsbGluZ0FkZHJlc3MuZXh0ZW5kZWRBZGRyZXNzXSBXaGVuIHN1cHBsaWVkLCB0aGlzIGV4dGVuZGVkIGFkZHJlc3Mgd2lsbCBiZSB0b2tlbml6ZWQgYWxvbmcgd2l0aCB0aGUgY29udGVudHMgb2YgdGhlIGZpZWxkcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5iaWxsaW5nQWRkcmVzcy5sb2NhbGl0eV0gV2hlbiBzdXBwbGllZCwgdGhpcyBsb2NhbGl0eSAodGhlIGNpdHkpIHdpbGwgYmUgdG9rZW5pemVkIGFsb25nIHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBmaWVsZHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmlsbGluZ0FkZHJlc3MucmVnaW9uXSBXaGVuIHN1cHBsaWVkLCB0aGlzIHJlZ2lvbiAodGhlIHN0YXRlKSB3aWxsIGJlIHRva2VuaXplZCBhbG9uZyB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgZmllbGRzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJpbGxpbmdBZGRyZXNzLmNvdW50cnlDb2RlTnVtZXJpY10gV2hlbiBzdXBwbGllZCwgdGhpcyBudW1lcmljIGNvdW50cnkgY29kZSB3aWxsIGJlIHRva2VuaXplZCBhbG9uZyB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgZmllbGRzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJpbGxpbmdBZGRyZXNzLmNvdW50cnlDb2RlQWxwaGEyXSBXaGVuIHN1cHBsaWVkLCB0aGlzIGFscGhhIDIgcmVwcmVzZW50YXRpb24gb2YgYSBjb3VudHJ5IHdpbGwgYmUgdG9rZW5pemVkIGFsb25nIHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBmaWVsZHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmlsbGluZ0FkZHJlc3MuY291bnRyeUNvZGVBbHBoYTNdIFdoZW4gc3VwcGxpZWQsIHRoaXMgYWxwaGEgMyByZXByZXNlbnRhdGlvbiBvZiBhIGNvdW50cnkgd2lsbCBiZSB0b2tlbml6ZWQgYWxvbmcgd2l0aCB0aGUgY29udGVudHMgb2YgdGhlIGZpZWxkcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5iaWxsaW5nQWRkcmVzcy5jb3VudHJ5TmFtZV0gV2hlbiBzdXBwbGllZCwgdGhpcyBjb3VudHJ5IG5hbWUgd2lsbCBiZSB0b2tlbml6ZWQgYWxvbmcgd2l0aCB0aGUgY29udGVudHMgb2YgdGhlIGZpZWxkcy5cbiAqXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIE1heSBiZSB1c2VkIGFzIHRoZSBvbmx5IHBhcmFtZXRlciBvZiB0aGUgZnVuY3Rpb24gaWYgbm8gb3B0aW9ucyBhcmUgcGFzc2VkIGluLiBUaGUgc2Vjb25kIGFyZ3VtZW50LCA8Y29kZT5kYXRhPC9jb2RlPiwgaXMgYSB7QGxpbmsgSG9zdGVkRmllbGRzfnRva2VuaXplUGF5bG9hZHx0b2tlbml6ZVBheWxvYWR9LiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgYHRva2VuaXplYCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB3aXRoIGEge0BsaW5rIEhvc3RlZEZpZWxkc350b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfS5cbiAqIEBleGFtcGxlIDxjYXB0aW9uPlRva2VuaXplIGEgY2FyZDwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLnRva2VuaXplKGZ1bmN0aW9uICh0b2tlbml6ZUVyciwgcGF5bG9hZCkge1xuICogICBpZiAodG9rZW5pemVFcnIpIHtcbiAqICAgICBzd2l0Y2ggKHRva2VuaXplRXJyLmNvZGUpIHtcbiAqICAgICAgIGNhc2UgJ0hPU1RFRF9GSUVMRFNfRklFTERTX0VNUFRZJzpcbiAqICAgICAgICAgLy8gb2NjdXJzIHdoZW4gbm9uZSBvZiB0aGUgZmllbGRzIGFyZSBmaWxsZWQgaW5cbiAqICAgICAgICAgY29uc29sZS5lcnJvcignQWxsIGZpZWxkcyBhcmUgZW1wdHkhIFBsZWFzZSBmaWxsIG91dCB0aGUgZm9ybS4nKTtcbiAqICAgICAgICAgYnJlYWs7XG4gKiAgICAgICBjYXNlICdIT1NURURfRklFTERTX0ZJRUxEU19JTlZBTElEJzpcbiAqICAgICAgICAgLy8gb2NjdXJzIHdoZW4gY2VydGFpbiBmaWVsZHMgZG8gbm90IHBhc3MgY2xpZW50IHNpZGUgdmFsaWRhdGlvblxuICogICAgICAgICBjb25zb2xlLmVycm9yKCdTb21lIGZpZWxkcyBhcmUgaW52YWxpZDonLCB0b2tlbml6ZUVyci5kZXRhaWxzLmludmFsaWRGaWVsZEtleXMpO1xuICpcbiAqICAgICAgICAgLy8geW91IGNhbiBhbHNvIHByb2dyYW1tYXRpY2FsbHkgYWNjZXNzIHRoZSBmaWVsZCBjb250YWluZXJzIGZvciB0aGUgaW52YWxpZCBmaWVsZHNcbiAqICAgICAgICAgdG9rZW5pemVFcnIuZGV0YWlscy5pbnZhbGlkRmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkQ29udGFpbmVyKSB7XG4gKiAgICAgICAgICAgZmllbGRDb250YWluZXIuY2xhc3NOYW1lID0gJ2ludmFsaWQnO1xuICogICAgICAgICB9KTtcbiAqICAgICAgICAgYnJlYWs7XG4gKiAgICAgICBjYXNlICdIT1NURURfRklFTERTX1RPS0VOSVpBVElPTl9GQUlMX09OX0RVUExJQ0FURSc6XG4gKiAgICAgICAgIC8vIG9jY3VycyB3aGVuOlxuICogICAgICAgICAvLyAgICogdGhlIGNsaWVudCB0b2tlbiB1c2VkIGZvciBjbGllbnQgYXV0aG9yaXphdGlvbiB3YXMgZ2VuZXJhdGVkXG4gKiAgICAgICAgIC8vICAgICB3aXRoIGEgY3VzdG9tZXIgSUQgYW5kIHRoZSBmYWlsIG9uIGR1cGxpY2F0ZSBwYXltZW50IG1ldGhvZFxuICogICAgICAgICAvLyAgICAgb3B0aW9uIGlzIHNldCB0byB0cnVlXG4gKiAgICAgICAgIC8vICAgKiB0aGUgY2FyZCBiZWluZyB0b2tlbml6ZWQgaGFzIHByZXZpb3VzbHkgYmVlbiB2YXVsdGVkICh3aXRoIGFueSBjdXN0b21lcilcbiAqICAgICAgICAgLy8gU2VlOiBodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2JyYWludHJlZS9kb2NzL3JlZmVyZW5jZS9yZXF1ZXN0L2NsaWVudC10b2tlbi9nZW5lcmF0ZSNvcHRpb25zLmZhaWxfb25fZHVwbGljYXRlX3BheW1lbnRfbWV0aG9kXG4gKiAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoaXMgcGF5bWVudCBtZXRob2QgYWxyZWFkeSBleGlzdHMgaW4geW91ciB2YXVsdC4nKTtcbiAqICAgICAgICAgYnJlYWs7XG4gKiAgICAgICBjYXNlICdIT1NURURfRklFTERTX1RPS0VOSVpBVElPTl9DVlZfVkVSSUZJQ0FUSU9OX0ZBSUxFRCc6XG4gKiAgICAgICAgIC8vIG9jY3VycyB3aGVuOlxuICogICAgICAgICAvLyAgICogdGhlIGNsaWVudCB0b2tlbiB1c2VkIGZvciBjbGllbnQgYXV0aG9yaXphdGlvbiB3YXMgZ2VuZXJhdGVkXG4gKiAgICAgICAgIC8vICAgICB3aXRoIGEgY3VzdG9tZXIgSUQgYW5kIHRoZSB2ZXJpZnkgY2FyZCBvcHRpb24gaXMgc2V0IHRvIHRydWVcbiAqICAgICAgICAgLy8gICAgIGFuZCB5b3UgaGF2ZSBjcmVkaXQgY2FyZCB2ZXJpZmljYXRpb24gdHVybmVkIG9uIGluIHRoZSBCcmFpbnRyZWVcbiAqICAgICAgICAgLy8gICAgIGNvbnRyb2wgcGFuZWxcbiAqICAgICAgICAgLy8gICAqIHRoZSBjdnYgZG9lcyBub3QgcGFzcyB2ZXJpZmljYXRpb24gKGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vYnJhaW50cmVlL2RvY3MvcmVmZXJlbmNlL2dlbmVyYWwvdGVzdGluZyNhdnMtYW5kLWN2di9jaWQtcmVzcG9uc2VzKVxuICogICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vYnJhaW50cmVlL2RvY3MvcmVmZXJlbmNlL3JlcXVlc3QvY2xpZW50LXRva2VuL2dlbmVyYXRlI29wdGlvbnMudmVyaWZ5X2NhcmRcbiAqICAgICAgICAgY29uc29sZS5lcnJvcignQ1ZWIGRpZCBub3QgcGFzcyB2ZXJpZmljYXRpb24nKTtcbiAqICAgICAgICAgYnJlYWs7XG4gKiAgICAgICBjYXNlICdIT1NURURfRklFTERTX0ZBSUxFRF9UT0tFTklaQVRJT04nOlxuICogICAgICAgICAvLyBvY2N1cnMgZm9yIGFueSBvdGhlciB0b2tlbml6YXRpb24gZXJyb3Igb24gdGhlIHNlcnZlclxuICogICAgICAgICBjb25zb2xlLmVycm9yKCdUb2tlbml6YXRpb24gZmFpbGVkIHNlcnZlciBzaWRlLiBJcyB0aGUgY2FyZCB2YWxpZD8nKTtcbiAqICAgICAgICAgYnJlYWs7XG4gKiAgICAgICBjYXNlICdIT1NURURfRklFTERTX1RPS0VOSVpBVElPTl9ORVRXT1JLX0VSUk9SJzpcbiAqICAgICAgICAgLy8gb2NjdXJzIHdoZW4gdGhlIEJyYWludHJlZSBnYXRld2F5IGNhbm5vdCBiZSBjb250YWN0ZWRcbiAqICAgICAgICAgY29uc29sZS5lcnJvcignTmV0d29yayBlcnJvciBvY2N1cnJlZCB3aGVuIHRva2VuaXppbmcuJyk7XG4gKiAgICAgICAgIGJyZWFrO1xuICogICAgICAgZGVmYXVsdDpcbiAqICAgICAgICAgY29uc29sZS5lcnJvcignU29tZXRoaW5nIGJhZCBoYXBwZW5lZCEnLCB0b2tlbml6ZUVycik7XG4gKiAgICAgfVxuICogICB9IGVsc2Uge1xuICogICAgIGNvbnNvbGUubG9nKCdHb3Qgbm9uY2U6JywgcGF5bG9hZC5ub25jZSk7XG4gKiAgIH1cbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+VG9rZW5pemUgYW5kIHZhdWx0IGEgY2FyZDwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLnRva2VuaXplKHtcbiAqICAgdmF1bHQ6IHRydWVcbiAqIH0sIGZ1bmN0aW9uICh0b2tlbml6ZUVyciwgcGF5bG9hZCkge1xuICogICBpZiAodG9rZW5pemVFcnIpIHtcbiAqICAgICBjb25zb2xlLmVycm9yKHRva2VuaXplRXJyKTtcbiAqICAgfSBlbHNlIHtcbiAqICAgICBjb25zb2xlLmxvZygnR290IG5vbmNlOicsIHBheWxvYWQubm9uY2UpO1xuICogICB9XG4gKiB9KTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlRva2VuaXplIGEgY2FyZCB3aXRoIG5vbi1Ib3N0ZWQgRmllbGRzIGNhcmRob2xkZXIgbmFtZTwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLnRva2VuaXplKHtcbiAqICAgY2FyZGhvbGRlck5hbWU6ICdGaXJzdCBMYXN0J1xuICogfSwgZnVuY3Rpb24gKHRva2VuaXplRXJyLCBwYXlsb2FkKSB7XG4gKiAgIGlmICh0b2tlbml6ZUVycikge1xuICogICAgIGNvbnNvbGUuZXJyb3IodG9rZW5pemVFcnIpO1xuICogICB9IGVsc2Uge1xuICogICAgIGNvbnNvbGUubG9nKCdHb3Qgbm9uY2U6JywgcGF5bG9hZC5ub25jZSk7XG4gKiAgIH1cbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+VG9rZW5pemUgYSBjYXJkIHdpdGggbm9uLUhvc3RlZCBGaWVsZHMgcG9zdGFsIGNvZGUgb3B0aW9uPC9jYXB0aW9uPlxuICogaG9zdGVkRmllbGRzSW5zdGFuY2UudG9rZW5pemUoe1xuICogICBiaWxsaW5nQWRkcmVzczoge1xuICogICAgIHBvc3RhbENvZGU6ICcxMTExMSdcbiAqICAgfVxuICogfSwgZnVuY3Rpb24gKHRva2VuaXplRXJyLCBwYXlsb2FkKSB7XG4gKiAgIGlmICh0b2tlbml6ZUVycikge1xuICogICAgIGNvbnNvbGUuZXJyb3IodG9rZW5pemVFcnIpO1xuICogICB9IGVsc2Uge1xuICogICAgIGNvbnNvbGUubG9nKCdHb3Qgbm9uY2U6JywgcGF5bG9hZC5ub25jZSk7XG4gKiAgIH1cbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+VG9rZW5pemUgYSBjYXJkIHdpdGggYWRkaXRpb25hbCBiaWxsaW5nIGFkZHJlc3Mgb3B0aW9uczwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLnRva2VuaXplKHtcbiAqICAgYmlsbGluZ0FkZHJlc3M6IHtcbiAqICAgICBmaXJzdE5hbWU6ICdGaXJzdCcsXG4gKiAgICAgbGFzdE5hbWU6ICdMYXN0JyxcbiAqICAgICBjb21wYW55OiAnQ29tcGFueScsXG4gKiAgICAgc3RyZWV0QWRkcmVzczogJzEyMyBTdHJlZXQnLFxuICogICAgIGV4dGVuZGVkQWRkcmVzczogJ1VuaXQgMScsXG4gKiAgICAgLy8gcGFzc2luZyBqdXN0IG9uZSBvZiB0aGUgY291bnRyeSBvcHRpb25zIGlzIHN1ZmZpY2llbnQgdG9cbiAqICAgICAvLyBhc3NvY2lhdGUgdGhlIGNhcmQgZGV0YWlscyB3aXRoIGEgcGFydGljdWxhciBjb3VudHJ5XG4gKiAgICAgLy8gdmFsaWQgY291bnRyeSBuYW1lcyBhbmQgY29kZXMgY2FuIGJlIGZvdW5kIGhlcmU6XG4gKiAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9icmFpbnRyZWUvZG9jcy9yZWZlcmVuY2UvZ2VuZXJhbC9jb3VudHJpZXMvcnVieSNsaXN0LW9mLWNvdW50cmllc1xuICogICAgIGNvdW50cnlOYW1lOiAnVW5pdGVkIFN0YXRlcycsXG4gKiAgICAgY291bnRyeUNvZGVBbHBoYTI6ICdVUycsXG4gKiAgICAgY291bnRyeUNvZGVBbHBoYTM6ICdVU0EnLFxuICogICAgIGNvdW50cnlDb2RlTnVtZXJpYzogJzg0MCdcbiAqICAgfVxuICogfSwgZnVuY3Rpb24gKHRva2VuaXplRXJyLCBwYXlsb2FkKSB7XG4gKiAgIGlmICh0b2tlbml6ZUVycikge1xuICogICAgIGNvbnNvbGUuZXJyb3IodG9rZW5pemVFcnIpO1xuICogICB9IGVsc2Uge1xuICogICAgIGNvbnNvbGUubG9nKCdHb3Qgbm9uY2U6JywgcGF5bG9hZC5ub25jZSk7XG4gKiAgIH1cbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+QWxsb3cgdG9rZW5pemF0aW9uIHdpdGggZW1wdHkgY2FyZGhvbGRlciBuYW1lIGZpZWxkPC9jYXB0aW9uPlxuICogdmFyIHN0YXRlID0gaG9zdGVkRmllbGRzSW5zdGFuY2UuZ2V0U3RhdGUoKTtcbiAqIHZhciBmaWVsZHMgPSBPYmplY3Qua2V5cyhzdGF0ZS5maWVsZHMpO1xuICpcbiAqIC8vIG5vcm1hbGx5LCBpZiB5b3UgdHJpZWQgdG8gdG9rZW5pemUgYW4gZW1wdHkgY2FyZGhvbGRlciBuYW1lIGZpZWxkXG4gKiAvLyB5b3Ugd291bGQgZ2V0IGFuIGVycm9yLCB0byBhbGxvdyBtYWtpbmcgdGhpcyBmaWVsZCBvcHRpb25hbCxcbiAqIC8vIHRva2VuaXplIGFsbCB0aGUgZmllbGRzIGV4Y2VwdCBmb3IgdGhlIGNhcmRob2xkZXIgbmFtZSBmaWVsZFxuICogLy8gd2hlbiB0aGUgY2FyZGhvbGRlciBuYW1lIGZpZWxkIGlzIGVtcHR5LiBPdGhlcndpc2UsIHRva2VuaXplXG4gKiAvLyBhbGwgdGhlIGZpZWxkc1xuICogaWYgKHN0YXRlLmZpZWxkcy5jYXJkaG9sZGVyTmFtZS5pc0VtcHR5KSB7XG4gKiAgZmllbGRzID0gZmllbGRzLmZpbHRlcihmdW5jdGlvbiAoZmllbGQpIHtcbiAqICAgIHJldHVybiBmaWVsZCAhPT0gJ2NhcmRob2xkZXJOYW1lJztcbiAqICB9KTtcbiAqIH1cbiAqXG4gKiBob3N0ZWRGaWVsZHNJbnN0YW5jZS50b2tlbml6ZSh7XG4gKiAgZmllbGRzVG9Ub2tlbml6ZTogZmllbGRzXG4gKiB9LCBmdW5jdGlvbiAodG9rZW5pemVFcnIsIHBheWxvYWQpIHtcbiAqICAgaWYgKHRva2VuaXplRXJyKSB7XG4gKiAgICAgY29uc29sZS5lcnJvcih0b2tlbml6ZUVycik7XG4gKiAgIH0gZWxzZSB7XG4gKiAgICAgY29uc29sZS5sb2coJ0dvdCBub25jZTonLCBwYXlsb2FkLm5vbmNlKTtcbiAqICAgfVxuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLnRva2VuaXplID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgc2VsZi5fYnVzLmVtaXQoZXZlbnRzLlRPS0VOSVpBVElPTl9SRVFVRVNULCBvcHRpb25zLCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHZhciBlcnIgPSByZXNwb25zZVswXTtcbiAgICAgIHZhciBwYXlsb2FkID0gcmVzcG9uc2VbMV07XG5cbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgc2VsZi5fYXR0YWNoSW52YWxpZEZpZWxkQ29udGFpbmVyc1RvRXJyb3IoZXJyKTtcbiAgICAgICAgcmVqZWN0KG5ldyBCcmFpbnRyZWVFcnJvcihlcnIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUocGF5bG9hZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBBZGQgYSBjbGFzcyB0byBhIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9ob3N0ZWQtZmllbGRzfmZpZWxkIGZpZWxkfS4gVXNlZnVsIGZvciB1cGRhdGluZyBmaWVsZCBzdHlsZXMgd2hlbiBldmVudHMgb2NjdXIgZWxzZXdoZXJlIGluIHlvdXIgY2hlY2tvdXQuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgVGhlIGZpZWxkIHlvdSB3aXNoIHRvIGFkZCBhIGNsYXNzIHRvLiBNdXN0IGJlIGEgdmFsaWQge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2hvc3RlZC1maWVsZHN+ZmllbGRPcHRpb25zIGZpZWxkT3B0aW9ufS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc25hbWUgVGhlIGNsYXNzIHRvIGJlIGFkZGVkLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsYmFjayBleGVjdXRlZCBvbiBjb21wbGV0aW9uLCBjb250YWluaW5nIGFuIGVycm9yIGlmIG9uZSBvY2N1cnJlZC4gTm8gZGF0YSBpcyByZXR1cm5lZCBpZiB0aGUgY2xhc3MgaXMgYWRkZWQgc3VjY2Vzc2Z1bGx5LlxuICpcbiAqIEBleGFtcGxlXG4gKiBob3N0ZWRGaWVsZHNJbnN0YW5jZS5hZGRDbGFzcygnbnVtYmVyJywgJ2N1c3RvbS1jbGFzcycsIGZ1bmN0aW9uIChhZGRDbGFzc0Vycikge1xuICogICBpZiAoYWRkQ2xhc3NFcnIpIHtcbiAqICAgICBjb25zb2xlLmVycm9yKGFkZENsYXNzRXJyKTtcbiAqICAgfVxuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLmFkZENsYXNzID0gZnVuY3Rpb24gKGZpZWxkLCBjbGFzc25hbWUpIHtcbiAgdmFyIGVycjtcblxuICBpZiAoIWFsbG93ZWRGaWVsZHMuaGFzT3duUHJvcGVydHkoZmllbGQpKSB7XG4gICAgZXJyID0gbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgIHR5cGU6IGVycm9ycy5IT1NURURfRklFTERTX0ZJRUxEX0lOVkFMSUQudHlwZSxcbiAgICAgIGNvZGU6IGVycm9ycy5IT1NURURfRklFTERTX0ZJRUxEX0lOVkFMSUQuY29kZSxcbiAgICAgIG1lc3NhZ2U6XG4gICAgICAgICdcIicgK1xuICAgICAgICBmaWVsZCArXG4gICAgICAgICdcIiBpcyBub3QgYSB2YWxpZCBmaWVsZC4gWW91IG11c3QgdXNlIGEgdmFsaWQgZmllbGQgb3B0aW9uIHdoZW4gYWRkaW5nIGEgY2xhc3MuJyxcbiAgICB9KTtcbiAgfSBlbHNlIGlmICghdGhpcy5fZmllbGRzLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgIGVyciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9OT1RfUFJFU0VOVC50eXBlLFxuICAgICAgY29kZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfRklFTERfTk9UX1BSRVNFTlQuY29kZSxcbiAgICAgIG1lc3NhZ2U6XG4gICAgICAgICdDYW5ub3QgYWRkIGNsYXNzIHRvIFwiJyArXG4gICAgICAgIGZpZWxkICtcbiAgICAgICAgJ1wiIGZpZWxkIGJlY2F1c2UgaXQgaXMgbm90IHBhcnQgb2YgdGhlIGN1cnJlbnQgSG9zdGVkIEZpZWxkcyBvcHRpb25zLicsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYnVzLmVtaXQoZXZlbnRzLkFERF9DTEFTUywge1xuICAgICAgZmllbGQ6IGZpZWxkLFxuICAgICAgY2xhc3NuYW1lOiBjbGFzc25hbWUsXG4gICAgfSk7XG4gIH1cblxuICBpZiAoZXJyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSBjbGFzcyB0byBhIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9ob3N0ZWQtZmllbGRzfmZpZWxkIGZpZWxkfS4gVXNlZnVsIGZvciB1cGRhdGluZyBmaWVsZCBzdHlsZXMgd2hlbiBldmVudHMgb2NjdXIgZWxzZXdoZXJlIGluIHlvdXIgY2hlY2tvdXQuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgVGhlIGZpZWxkIHlvdSB3aXNoIHRvIHJlbW92ZSBhIGNsYXNzIGZyb20uIE11c3QgYmUgYSB2YWxpZCB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkc35maWVsZE9wdGlvbnMgZmllbGRPcHRpb259LlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzbmFtZSBUaGUgY2xhc3MgdG8gYmUgcmVtb3ZlZC5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGJhY2sgZXhlY3V0ZWQgb24gY29tcGxldGlvbiwgY29udGFpbmluZyBhbiBlcnJvciBpZiBvbmUgb2NjdXJyZWQuIE5vIGRhdGEgaXMgcmV0dXJuZWQgaWYgdGhlIGNsYXNzIGlzIHJlbW92ZWQgc3VjY2Vzc2Z1bGx5LlxuICpcbiAqIEBleGFtcGxlXG4gKiBob3N0ZWRGaWVsZHNJbnN0YW5jZS5hZGRDbGFzcygnbnVtYmVyJywgJ2N1c3RvbS1jbGFzcycsIGZ1bmN0aW9uIChhZGRDbGFzc0Vycikge1xuICogICBpZiAoYWRkQ2xhc3NFcnIpIHtcbiAqICAgICBjb25zb2xlLmVycm9yKGFkZENsYXNzRXJyKTtcbiAqICAgICByZXR1cm47XG4gKiAgIH1cbiAqXG4gKiAgIC8vIHNvbWUgdGltZSBsYXRlci4uLlxuICogICBob3N0ZWRGaWVsZHNJbnN0YW5jZS5yZW1vdmVDbGFzcygnbnVtYmVyJywgJ2N1c3RvbS1jbGFzcycpO1xuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGZpZWxkLCBjbGFzc25hbWUpIHtcbiAgdmFyIGVycjtcblxuICBpZiAoIWFsbG93ZWRGaWVsZHMuaGFzT3duUHJvcGVydHkoZmllbGQpKSB7XG4gICAgZXJyID0gbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgIHR5cGU6IGVycm9ycy5IT1NURURfRklFTERTX0ZJRUxEX0lOVkFMSUQudHlwZSxcbiAgICAgIGNvZGU6IGVycm9ycy5IT1NURURfRklFTERTX0ZJRUxEX0lOVkFMSUQuY29kZSxcbiAgICAgIG1lc3NhZ2U6XG4gICAgICAgICdcIicgK1xuICAgICAgICBmaWVsZCArXG4gICAgICAgICdcIiBpcyBub3QgYSB2YWxpZCBmaWVsZC4gWW91IG11c3QgdXNlIGEgdmFsaWQgZmllbGQgb3B0aW9uIHdoZW4gcmVtb3ZpbmcgYSBjbGFzcy4nLFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKCF0aGlzLl9maWVsZHMuaGFzT3duUHJvcGVydHkoZmllbGQpKSB7XG4gICAgZXJyID0gbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgIHR5cGU6IGVycm9ycy5IT1NURURfRklFTERTX0ZJRUxEX05PVF9QUkVTRU5ULnR5cGUsXG4gICAgICBjb2RlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9OT1RfUFJFU0VOVC5jb2RlLFxuICAgICAgbWVzc2FnZTpcbiAgICAgICAgJ0Nhbm5vdCByZW1vdmUgY2xhc3MgZnJvbSBcIicgK1xuICAgICAgICBmaWVsZCArXG4gICAgICAgICdcIiBmaWVsZCBiZWNhdXNlIGl0IGlzIG5vdCBwYXJ0IG9mIHRoZSBjdXJyZW50IEhvc3RlZCBGaWVsZHMgb3B0aW9ucy4nLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2J1cy5lbWl0KGV2ZW50cy5SRU1PVkVfQ0xBU1MsIHtcbiAgICAgIGZpZWxkOiBmaWVsZCxcbiAgICAgIGNsYXNzbmFtZTogY2xhc3NuYW1lLFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGVycikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufTtcblxuLyoqXG4gKiBTZXRzIGFuIGF0dHJpYnV0ZSBvZiBhIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9ob3N0ZWQtZmllbGRzfmZpZWxkIGZpZWxkfS5cbiAqIFN1cHBvcnRlZCBhdHRyaWJ1dGVzIGFyZSBgYXJpYS1pbnZhbGlkYCwgYGFyaWEtcmVxdWlyZWRgLCBgZGlzYWJsZWRgLCBhbmQgYHBsYWNlaG9sZGVyYC5cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgdGhlIGF0dHJpYnV0ZSB5b3Ugd2lzaCB0byBzZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5maWVsZCBUaGUgZmllbGQgdG8gd2hpY2ggeW91IHdpc2ggdG8gYWRkIGFuIGF0dHJpYnV0ZS4gTXVzdCBiZSBhIHZhbGlkIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9ob3N0ZWQtZmllbGRzfmZpZWxkT3B0aW9ucyBmaWVsZE9wdGlvbn0uXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5hdHRyaWJ1dGUgVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB5b3Ugd2lzaCB0byBhZGQgdG8gdGhlIGZpZWxkLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudmFsdWUgVGhlIHZhbHVlIGZvciB0aGUgYXR0cmlidXRlLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsYmFjayBleGVjdXRlZCBvbiBjb21wbGV0aW9uLCBjb250YWluaW5nIGFuIGVycm9yIGlmIG9uZSBvY2N1cnJlZC4gTm8gZGF0YSBpcyByZXR1cm5lZCBpZiB0aGUgYXR0cmlidXRlIGlzIHNldCBzdWNjZXNzZnVsbHkuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+U2V0IHRoZSBwbGFjZWhvbGRlciBhdHRyaWJ1dGUgb2YgYSBmaWVsZDwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLnNldEF0dHJpYnV0ZSh7XG4gKiAgIGZpZWxkOiAnbnVtYmVyJyxcbiAqICAgYXR0cmlidXRlOiAncGxhY2Vob2xkZXInLFxuICogICB2YWx1ZTogJzExMTEgMTExMSAxMTExIDExMTEnXG4gKiB9LCBmdW5jdGlvbiAoYXR0cmlidXRlRXJyKSB7XG4gKiAgIGlmIChhdHRyaWJ1dGVFcnIpIHtcbiAqICAgICBjb25zb2xlLmVycm9yKGF0dHJpYnV0ZUVycik7XG4gKiAgIH1cbiAqIH0pO1xuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlNldCB0aGUgYXJpYS1yZXF1aXJlZCBhdHRyaWJ1dGUgb2YgYSBmaWVsZDwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLnNldEF0dHJpYnV0ZSh7XG4gKiAgIGZpZWxkOiAnbnVtYmVyJyxcbiAqICAgYXR0cmlidXRlOiAnYXJpYS1yZXF1aXJlZCcsXG4gKiAgIHZhbHVlOiB0cnVlXG4gKiB9LCBmdW5jdGlvbiAoYXR0cmlidXRlRXJyKSB7XG4gKiAgIGlmIChhdHRyaWJ1dGVFcnIpIHtcbiAqICAgICBjb25zb2xlLmVycm9yKGF0dHJpYnV0ZUVycik7XG4gKiAgIH1cbiAqIH0pO1xuICpcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cbkhvc3RlZEZpZWxkcy5wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIGF0dHJpYnV0ZUVyciwgZXJyO1xuXG4gIGlmICghYWxsb3dlZEZpZWxkcy5oYXNPd25Qcm9wZXJ0eShvcHRpb25zLmZpZWxkKSkge1xuICAgIGVyciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9JTlZBTElELnR5cGUsXG4gICAgICBjb2RlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9JTlZBTElELmNvZGUsXG4gICAgICBtZXNzYWdlOlxuICAgICAgICAnXCInICtcbiAgICAgICAgb3B0aW9ucy5maWVsZCArXG4gICAgICAgICdcIiBpcyBub3QgYSB2YWxpZCBmaWVsZC4gWW91IG11c3QgdXNlIGEgdmFsaWQgZmllbGQgb3B0aW9uIHdoZW4gc2V0dGluZyBhbiBhdHRyaWJ1dGUuJyxcbiAgICB9KTtcbiAgfSBlbHNlIGlmICghdGhpcy5fZmllbGRzLmhhc093blByb3BlcnR5KG9wdGlvbnMuZmllbGQpKSB7XG4gICAgZXJyID0gbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgIHR5cGU6IGVycm9ycy5IT1NURURfRklFTERTX0ZJRUxEX05PVF9QUkVTRU5ULnR5cGUsXG4gICAgICBjb2RlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9OT1RfUFJFU0VOVC5jb2RlLFxuICAgICAgbWVzc2FnZTpcbiAgICAgICAgJ0Nhbm5vdCBzZXQgYXR0cmlidXRlIGZvciBcIicgK1xuICAgICAgICBvcHRpb25zLmZpZWxkICtcbiAgICAgICAgJ1wiIGZpZWxkIGJlY2F1c2UgaXQgaXMgbm90IHBhcnQgb2YgdGhlIGN1cnJlbnQgSG9zdGVkIEZpZWxkcyBvcHRpb25zLicsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYXR0cmlidXRlRXJyID0gYXR0cmlidXRlVmFsaWRhdGlvbkVycm9yKG9wdGlvbnMuYXR0cmlidXRlLCBvcHRpb25zLnZhbHVlKTtcblxuICAgIGlmIChhdHRyaWJ1dGVFcnIpIHtcbiAgICAgIGVyciA9IGF0dHJpYnV0ZUVycjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYnVzLmVtaXQoZXZlbnRzLlNFVF9BVFRSSUJVVEUsIHtcbiAgICAgICAgZmllbGQ6IG9wdGlvbnMuZmllbGQsXG4gICAgICAgIGF0dHJpYnV0ZTogb3B0aW9ucy5hdHRyaWJ1dGUsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLnZhbHVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVycikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtb250aCBvcHRpb25zIGZvciB0aGUgZXhwaXJhdGlvbiBtb250aCBmaWVsZCB3aGVuIHByZXNlbnRlZCBhcyBhIHNlbGVjdCBlbGVtZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7YXJyYXl9IG9wdGlvbnMgQW4gYXJyYXkgb2YgMTIgZW50cmllcyBjb3JyZXNwb25kaW5nIHRvIHRoZSAxMiBtb250aHMuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxiYWNrIGV4ZWN1dGVkIG9uIGNvbXBsZXRpb24sIGNvbnRhaW5pbmcgYW4gZXJyb3IgaWYgb25lIG9jY3VycmVkLiBObyBkYXRhIGlzIHJldHVybmVkIGlmIHRoZSBvcHRpb25zIGFyZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseS4gRXJyb3JzIGlmIGV4cGlyYXRpb25Nb250aCBpcyBub3QgY29uZmlndXJlZCBvbiB0aGUgSG9zdGVkIEZpZWxkcyBpbnN0YW5jZSBvciBpZiB0aGUgZXhwaXJhdGlvbk1vbnRoIGZpZWxkIGlzIG5vdCBjb25maWd1cmVkIHRvIGJlIGEgc2VsZWN0IGlucHV0LlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlVwZGF0ZSB0aGUgbW9udGggb3B0aW9ucyB0byBzcGFuaXNoPC9jYXB0aW9uPlxuICogaG9zdGVkRmllbGRzSW5zdGFuY2Uuc2V0TW9udGhPcHRpb25zKFtcbiAqICAgJzAxIC0gZW5lcm8nLFxuICogICAnMDIgLSBmZWJyZXJvJyxcbiAqICAgJzAzIC0gbWFyem8nLFxuICogICAnMDQgLSBhYnJpbCcsXG4gKiAgICcwNSAtIG1heW8nLFxuICogICAnMDYgLSBqdW5pbycsXG4gKiAgICcwNyAtIGp1bGlvJyxcbiAqICAgJzA4IC0gYWdvc3RvJyxcbiAqICAgJzA5IC0gc2VwdGllbWJyZScsXG4gKiAgICcxMCAtIG9jdHVicmUnLFxuICogICAnMTEgLSBub3ZpZW1icmUnLFxuICogICAnMTIgLSBkaWNpZW1icmUnXG4gKiBdKTtcbiAqXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLnNldE1vbnRoT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG1lcmNoYW50T3B0aW9ucyA9IHRoaXMuX21lcmNoYW50Q29uZmlndXJhdGlvbk9wdGlvbnMuZmllbGRzO1xuICB2YXIgZXJyb3JNZXNzYWdlO1xuXG4gIGlmICghbWVyY2hhbnRPcHRpb25zLmV4cGlyYXRpb25Nb250aCkge1xuICAgIGVycm9yTWVzc2FnZSA9IFwiRXhwaXJhdGlvbiBtb250aCBmaWVsZCBtdXN0IGV4aXN0IHRvIHVzZSBzZXRNb250aE9wdGlvbnMuXCI7XG4gIH0gZWxzZSBpZiAoIW1lcmNoYW50T3B0aW9ucy5leHBpcmF0aW9uTW9udGguc2VsZWN0KSB7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJFeHBpcmF0aW9uIG1vbnRoIGZpZWxkIG11c3QgYmUgYSBzZWxlY3QgZWxlbWVudC5cIjtcbiAgfVxuXG4gIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9QUk9QRVJUWV9JTlZBTElELnR5cGUsXG4gICAgICAgIGNvZGU6IGVycm9ycy5IT1NURURfRklFTERTX0ZJRUxEX1BST1BFUlRZX0lOVkFMSUQuY29kZSxcbiAgICAgICAgbWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgc2VsZi5fYnVzLmVtaXQoZXZlbnRzLlNFVF9NT05USF9PUFRJT05TLCBvcHRpb25zLCByZXNvbHZlKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFNldHMgYSB2aXN1YWxseSBoaWRkZW4gbWVzc2FnZSAoZm9yIHNjcmVlbiByZWFkZXJzKSBvbiBhIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9ob3N0ZWQtZmllbGRzfmZpZWxkIGZpZWxkfS5cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgdGhlIGF0dHJpYnV0ZSB5b3Ugd2lzaCB0byBzZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5maWVsZCBUaGUgZmllbGQgdG8gd2hpY2ggeW91IHdpc2ggdG8gYWRkIGFuIGF0dHJpYnV0ZS4gTXVzdCBiZSBhIHZhbGlkIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9ob3N0ZWQtZmllbGRzfmZpZWxkIGZpZWxkfS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc2V0LlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlNldCBhbiBlcnJvciBtZXNzYWdlIG9uIGEgZmllbGQ8L2NhcHRpb24+XG4gKiBob3N0ZWRGaWVsZHNJbnN0YW5jZS5zZXRNZXNzYWdlKHtcbiAqICAgZmllbGQ6ICdudW1iZXInLFxuICogICBtZXNzYWdlOiAnSW52YWxpZCBjYXJkIG51bWJlcidcbiAqIH0pO1xuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlJlbW92ZSB0aGUgbWVzc2FnZSBvbiBhIGZpZWxkPC9jYXB0aW9uPlxuICogaG9zdGVkRmllbGRzSW5zdGFuY2Uuc2V0TWVzc2FnZSh7XG4gKiAgIGZpZWxkOiAnbnVtYmVyJyxcbiAqICAgbWVzc2FnZTogJydcbiAqIH0pO1xuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLnNldE1lc3NhZ2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB0aGlzLl9idXMuZW1pdChldmVudHMuU0VUX01FU1NBR0UsIHtcbiAgICBmaWVsZDogb3B0aW9ucy5maWVsZCxcbiAgICBtZXNzYWdlOiBvcHRpb25zLm1lc3NhZ2UsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGEgc3VwcG9ydGVkIGF0dHJpYnV0ZSBmcm9tIGEge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2hvc3RlZC1maWVsZHN+ZmllbGQgZmllbGR9LlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFRoZSBvcHRpb25zIGZvciB0aGUgYXR0cmlidXRlIHlvdSB3aXNoIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmZpZWxkIFRoZSBmaWVsZCBmcm9tIHdoaWNoIHlvdSB3aXNoIHRvIHJlbW92ZSBhbiBhdHRyaWJ1dGUuIE11c3QgYmUgYSB2YWxpZCB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkc35maWVsZE9wdGlvbnMgZmllbGRPcHRpb259LlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYXR0cmlidXRlIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgeW91IHdpc2ggdG8gcmVtb3ZlIGZyb20gdGhlIGZpZWxkLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsYmFjayBleGVjdXRlZCBvbiBjb21wbGV0aW9uLCBjb250YWluaW5nIGFuIGVycm9yIGlmIG9uZSBvY2N1cnJlZC4gTm8gZGF0YSBpcyByZXR1cm5lZCBpZiB0aGUgYXR0cmlidXRlIGlzIHJlbW92ZWQgc3VjY2Vzc2Z1bGx5LlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlJlbW92ZSB0aGUgcGxhY2Vob2xkZXIgYXR0cmlidXRlIG9mIGEgZmllbGQ8L2NhcHRpb24+XG4gKiBob3N0ZWRGaWVsZHNJbnN0YW5jZS5yZW1vdmVBdHRyaWJ1dGUoe1xuICogICBmaWVsZDogJ251bWJlcicsXG4gKiAgIGF0dHJpYnV0ZTogJ3BsYWNlaG9sZGVyJ1xuICogfSwgZnVuY3Rpb24gKGF0dHJpYnV0ZUVycikge1xuICogICBpZiAoYXR0cmlidXRlRXJyKSB7XG4gKiAgICAgY29uc29sZS5lcnJvcihhdHRyaWJ1dGVFcnIpO1xuICogICB9XG4gKiB9KTtcbiAqXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBhdHRyaWJ1dGVFcnIsIGVycjtcblxuICBpZiAoIWFsbG93ZWRGaWVsZHMuaGFzT3duUHJvcGVydHkob3B0aW9ucy5maWVsZCkpIHtcbiAgICBlcnIgPSBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgdHlwZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfRklFTERfSU5WQUxJRC50eXBlLFxuICAgICAgY29kZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfRklFTERfSU5WQUxJRC5jb2RlLFxuICAgICAgbWVzc2FnZTpcbiAgICAgICAgJ1wiJyArXG4gICAgICAgIG9wdGlvbnMuZmllbGQgK1xuICAgICAgICAnXCIgaXMgbm90IGEgdmFsaWQgZmllbGQuIFlvdSBtdXN0IHVzZSBhIHZhbGlkIGZpZWxkIG9wdGlvbiB3aGVuIHJlbW92aW5nIGFuIGF0dHJpYnV0ZS4nLFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKCF0aGlzLl9maWVsZHMuaGFzT3duUHJvcGVydHkob3B0aW9ucy5maWVsZCkpIHtcbiAgICBlcnIgPSBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgdHlwZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfRklFTERfTk9UX1BSRVNFTlQudHlwZSxcbiAgICAgIGNvZGU6IGVycm9ycy5IT1NURURfRklFTERTX0ZJRUxEX05PVF9QUkVTRU5ULmNvZGUsXG4gICAgICBtZXNzYWdlOlxuICAgICAgICAnQ2Fubm90IHJlbW92ZSBhdHRyaWJ1dGUgZm9yIFwiJyArXG4gICAgICAgIG9wdGlvbnMuZmllbGQgK1xuICAgICAgICAnXCIgZmllbGQgYmVjYXVzZSBpdCBpcyBub3QgcGFydCBvZiB0aGUgY3VycmVudCBIb3N0ZWQgRmllbGRzIG9wdGlvbnMuJyxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBhdHRyaWJ1dGVFcnIgPSBhdHRyaWJ1dGVWYWxpZGF0aW9uRXJyb3Iob3B0aW9ucy5hdHRyaWJ1dGUpO1xuXG4gICAgaWYgKGF0dHJpYnV0ZUVycikge1xuICAgICAgZXJyID0gYXR0cmlidXRlRXJyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9idXMuZW1pdChldmVudHMuUkVNT1ZFX0FUVFJJQlVURSwge1xuICAgICAgICBmaWVsZDogb3B0aW9ucy5maWVsZCxcbiAgICAgICAgYXR0cmlidXRlOiBvcHRpb25zLmF0dHJpYnV0ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlcnIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn07XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAzLjguMC4gVXNlIHtAbGluayBIb3N0ZWRGaWVsZHMjc2V0QXR0cmlidXRlfHNldEF0dHJpYnV0ZX0gaW5zdGVhZC5cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgVGhlIGZpZWxkIHdob3NlIHBsYWNlaG9sZGVyIHlvdSB3aXNoIHRvIGNoYW5nZS4gTXVzdCBiZSBhIHZhbGlkIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9ob3N0ZWQtZmllbGRzfmZpZWxkT3B0aW9ucyBmaWVsZE9wdGlvbn0uXG4gKiBAcGFyYW0ge3N0cmluZ30gcGxhY2Vob2xkZXIgV2lsbCBiZSB1c2VkIGFzIHRoZSBgcGxhY2Vob2xkZXJgIGF0dHJpYnV0ZSBvZiB0aGUgaW5wdXQuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxiYWNrIGV4ZWN1dGVkIG9uIGNvbXBsZXRpb24sIGNvbnRhaW5pbmcgYW4gZXJyb3IgaWYgb25lIG9jY3VycmVkLiBObyBkYXRhIGlzIHJldHVybmVkIGlmIHRoZSBwbGFjZWhvbGRlciB1cGRhdGVkIHN1Y2Nlc3NmdWxseS5cbiAqXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLnNldFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKGZpZWxkLCBwbGFjZWhvbGRlcikge1xuICByZXR1cm4gdGhpcy5zZXRBdHRyaWJ1dGUoe1xuICAgIGZpZWxkOiBmaWVsZCxcbiAgICBhdHRyaWJ1dGU6IFwicGxhY2Vob2xkZXJcIixcbiAgICB2YWx1ZTogcGxhY2Vob2xkZXIsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDbGVhciB0aGUgdmFsdWUgb2YgYSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkc35maWVsZCBmaWVsZH0uXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgVGhlIGZpZWxkIHlvdSB3aXNoIHRvIGNsZWFyLiBNdXN0IGJlIGEgdmFsaWQge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2hvc3RlZC1maWVsZHN+ZmllbGRPcHRpb25zIGZpZWxkT3B0aW9ufS5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGJhY2sgZXhlY3V0ZWQgb24gY29tcGxldGlvbiwgY29udGFpbmluZyBhbiBlcnJvciBpZiBvbmUgb2NjdXJyZWQuIE5vIGRhdGEgaXMgcmV0dXJuZWQgaWYgdGhlIGZpZWxkIGNsZWFyZWQgc3VjY2Vzc2Z1bGx5LlxuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqIEBleGFtcGxlXG4gKiBob3N0ZWRGaWVsZHNJbnN0YW5jZS5jbGVhcignbnVtYmVyJywgZnVuY3Rpb24gKGNsZWFyRXJyKSB7XG4gKiAgIGlmIChjbGVhckVycikge1xuICogICAgIGNvbnNvbGUuZXJyb3IoY2xlYXJFcnIpO1xuICogICB9XG4gKiB9KTtcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5DbGVhciBzZXZlcmFsIGZpZWxkczwvY2FwdGlvbj5cbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLmNsZWFyKCdudW1iZXInKTtcbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLmNsZWFyKCdjdnYnKTtcbiAqIGhvc3RlZEZpZWxkc0luc3RhbmNlLmNsZWFyKCdleHBpcmF0aW9uRGF0ZScpO1xuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gIHZhciBlcnI7XG5cbiAgaWYgKCFhbGxvd2VkRmllbGRzLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgIGVyciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9JTlZBTElELnR5cGUsXG4gICAgICBjb2RlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9JTlZBTElELmNvZGUsXG4gICAgICBtZXNzYWdlOlxuICAgICAgICAnXCInICtcbiAgICAgICAgZmllbGQgK1xuICAgICAgICAnXCIgaXMgbm90IGEgdmFsaWQgZmllbGQuIFlvdSBtdXN0IHVzZSBhIHZhbGlkIGZpZWxkIG9wdGlvbiB3aGVuIGNsZWFyaW5nIGEgZmllbGQuJyxcbiAgICB9KTtcbiAgfSBlbHNlIGlmICghdGhpcy5fZmllbGRzLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgIGVyciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9OT1RfUFJFU0VOVC50eXBlLFxuICAgICAgY29kZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfRklFTERfTk9UX1BSRVNFTlQuY29kZSxcbiAgICAgIG1lc3NhZ2U6XG4gICAgICAgICdDYW5ub3QgY2xlYXIgXCInICtcbiAgICAgICAgZmllbGQgK1xuICAgICAgICAnXCIgZmllbGQgYmVjYXVzZSBpdCBpcyBub3QgcGFydCBvZiB0aGUgY3VycmVudCBIb3N0ZWQgRmllbGRzIG9wdGlvbnMuJyxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9idXMuZW1pdChldmVudHMuQ0xFQVJfRklFTEQsIHtcbiAgICAgIGZpZWxkOiBmaWVsZCxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChlcnIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn07XG5cbi8qKlxuICogUHJvZ3JhbW1hdGljYWxseSBmb2N1cyBhIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9ob3N0ZWQtZmllbGRzfmZpZWxkIGZpZWxkfS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCBUaGUgZmllbGQgeW91IHdhbnQgdG8gZm9jdXMuIE11c3QgYmUgYSB2YWxpZCB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkc35maWVsZE9wdGlvbnMgZmllbGRPcHRpb259LlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsYmFjayBleGVjdXRlZCBvbiBjb21wbGV0aW9uLCBjb250YWluaW5nIGFuIGVycm9yIGlmIG9uZSBvY2N1cnJlZC4gTm8gZGF0YSBpcyByZXR1cm5lZCBpZiB0aGUgZmllbGQgZm9jdXNlZCBzdWNjZXNzZnVsbHkuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqIEBleGFtcGxlXG4gKiBob3N0ZWRGaWVsZHNJbnN0YW5jZS5mb2N1cygnbnVtYmVyJywgZnVuY3Rpb24gKGZvY3VzRXJyKSB7XG4gKiAgIGlmIChmb2N1c0Vycikge1xuICogICAgIGNvbnNvbGUuZXJyb3IoZm9jdXNFcnIpO1xuICogICB9XG4gKiB9KTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlVzaW5nIGFuIGV2ZW50IGxpc3RlbmVyPC9jYXB0aW9uPlxuICogbXlFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAqICAgLy8gSW4gRmlyZWZveCwgdGhlIGZvY3VzIG1ldGhvZCBjYW4gYmUgc3VwcHJlc3NlZFxuICogICAvLyAgIGlmIHRoZSBlbGVtZW50IGhhcyBhIHRhYmluZGV4IHByb3BlcnR5IG9yIHRoZSBlbGVtZW50XG4gKiAgIC8vICAgaXMgYW4gYW5jaG9yIGxpbmsgd2l0aCBhbiBocmVmIHByb3BlcnR5LlxuICogICBlLnByZXZlbnREZWZhdWx0KCk7XG4gKiAgIGhvc3RlZEZpZWxkc0luc3RhbmNlLmZvY3VzKCdudW1iZXInKTtcbiAqIH0pO1xuICovXG5Ib3N0ZWRGaWVsZHMucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gIHZhciBlcnI7XG4gIHZhciBmaWVsZENvbmZpZyA9IHRoaXMuX2ZpZWxkc1tmaWVsZF07XG5cbiAgaWYgKCFhbGxvd2VkRmllbGRzLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgIGVyciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9JTlZBTElELnR5cGUsXG4gICAgICBjb2RlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9JTlZBTElELmNvZGUsXG4gICAgICBtZXNzYWdlOlxuICAgICAgICAnXCInICtcbiAgICAgICAgZmllbGQgK1xuICAgICAgICAnXCIgaXMgbm90IGEgdmFsaWQgZmllbGQuIFlvdSBtdXN0IHVzZSBhIHZhbGlkIGZpZWxkIG9wdGlvbiB3aGVuIGZvY3VzaW5nIGEgZmllbGQuJyxcbiAgICB9KTtcbiAgfSBlbHNlIGlmICghdGhpcy5fZmllbGRzLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgIGVyciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICB0eXBlOiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19GSUVMRF9OT1RfUFJFU0VOVC50eXBlLFxuICAgICAgY29kZTogZXJyb3JzLkhPU1RFRF9GSUVMRFNfRklFTERfTk9UX1BSRVNFTlQuY29kZSxcbiAgICAgIG1lc3NhZ2U6XG4gICAgICAgICdDYW5ub3QgZm9jdXMgXCInICtcbiAgICAgICAgZmllbGQgK1xuICAgICAgICAnXCIgZmllbGQgYmVjYXVzZSBpdCBpcyBub3QgcGFydCBvZiB0aGUgY3VycmVudCBIb3N0ZWQgRmllbGRzIG9wdGlvbnMuJyxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBmaWVsZENvbmZpZy5mcmFtZUVsZW1lbnQuZm9jdXMoKTtcblxuICAgIHRoaXMuX2J1cy5lbWl0KGV2ZW50cy5UUklHR0VSX0lOUFVUX0ZPQ1VTLCB7XG4gICAgICBmaWVsZDogZmllbGQsXG4gICAgfSk7XG5cbiAgICBpZiAoYnJvd3NlckRldGVjdGlvbi5pc0lvcygpKSB7XG4gICAgICAvLyBJbnB1dHMgb3V0c2lkZSBvZiB0aGUgdmlld3BvcnQgZG9uJ3QgYWx3YXlzIHNjcm9sbCBpbnRvIHZpZXcgb25cbiAgICAgIC8vIGZvY3VzIGluIGlPUyBTYWZhcmkuIDVtcyB0aW1lb3V0IGdpdmVzIHRoZSBicm93c2VyIGEgY2hhbmNlIHRvXG4gICAgICAvLyBkbyB0aGUgcmlnaHQgdGhpbmcgYW5kIHByZXZlbnRzIHN0dXR0ZXJpbmcuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Zpc2libGVFbm91Z2goZmllbGRDb25maWcuY29udGFpbmVyRWxlbWVudCkpIHtcbiAgICAgICAgICBmaWVsZENvbmZpZy5jb250YWluZXJFbGVtZW50LnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgIH1cbiAgICAgIH0sIFNBRkFSSV9GT0NVU19USU1FT1VUKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZXJyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4ge0BsaW5rIEhvc3RlZEZpZWxkc35zdGF0ZU9iamVjdHxvYmplY3R9IHRoYXQgaW5jbHVkZXMgdGhlIHN0YXRlIG9mIGFsbCBmaWVsZHMgYW5kIHBvc3NpYmxlIGNhcmQgdHlwZXMuXG4gKiBAcHVibGljXG4gKiBAcmV0dXJucyB7b2JqZWN0fSB7QGxpbmsgSG9zdGVkRmllbGRzfnN0YXRlT2JqZWN0fHN0YXRlT2JqZWN0fVxuICogQGV4YW1wbGUgPGNhcHRpb24+Q2hlY2sgaWYgYWxsIGZpZWxkcyBhcmUgdmFsaWQ8L2NhcHRpb24+XG4gKiB2YXIgc3RhdGUgPSBob3N0ZWRGaWVsZHNJbnN0YW5jZS5nZXRTdGF0ZSgpO1xuICpcbiAqIHZhciBmb3JtVmFsaWQgPSBPYmplY3Qua2V5cyhzdGF0ZS5maWVsZHMpLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAqICAgcmV0dXJuIHN0YXRlLmZpZWxkc1trZXldLmlzVmFsaWQ7XG4gKiB9KTtcbiAqL1xuSG9zdGVkRmllbGRzLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3N0YXRlO1xufTtcblxuLy8gUmVhY3QgYWRkcyBkZWNvcmF0aW9ucyB0byBET00gbm9kZXMgdGhhdCBjYXVzZVxuLy8gY2lyY3VsYXIgZGVwZW5kZW5jaWVzLCBzbyB3ZSByZW1vdmUgdGhlbSBmcm9tIHRoZVxuLy8gY29uZmlnIGJlZm9yZSBzZW5kaW5nIGl0IHRvIHRoZSBpZnJhbWVzLiBIb3dldmVyLFxuLy8gd2UgZG9uJ3Qgd2FudCB0byBtdXRhdGUgdGhlIG9yaWdpbmFsIG9iamVjdCB0aGF0XG4vLyB3YXMgcGFzc2VkIGluLCBzbyB3ZSBjcmVhdGUgZnJlc2ggb2JqZWN0cyB2aWEgYXNzaWduXG5mdW5jdGlvbiBmb3JtYXRNZXJjaGFudENvbmZpZ3VyYXRpb25Gb3JJZnJhbWVzKGNvbmZpZykge1xuICB2YXIgZm9ybWF0dGVkQ29uZmlnID0gYXNzaWduKHt9LCBjb25maWcpO1xuXG4gIGZvcm1hdHRlZENvbmZpZy5maWVsZHMgPSBhc3NpZ24oe30sIGZvcm1hdHRlZENvbmZpZy5maWVsZHMpO1xuICBPYmplY3Qua2V5cyhmb3JtYXR0ZWRDb25maWcuZmllbGRzKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIGZvcm1hdHRlZENvbmZpZy5maWVsZHNbZmllbGRdID0gYXNzaWduKHt9LCBmb3JtYXR0ZWRDb25maWcuZmllbGRzW2ZpZWxkXSk7XG4gICAgZGVsZXRlIGZvcm1hdHRlZENvbmZpZy5maWVsZHNbZmllbGRdLmNvbnRhaW5lcjtcbiAgfSk7XG5cbiAgcmV0dXJuIGZvcm1hdHRlZENvbmZpZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3cmFwUHJvbWlzZS53cmFwUHJvdG90eXBlKEhvc3RlZEZpZWxkcyk7XG5cbn0se1wiLi4vLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uLy4uL2xpYi9hc3NpZ25cIjoxMjEsXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vLi4vbGliL2NvbnN0YW50c1wiOjEyNixcIi4uLy4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIjoxMjcsXCIuLi8uLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIjoxMjksXCIuLi8uLi9saWIvY3JlYXRlLWRlZmVycmVkLWNsaWVudFwiOjEzMSxcIi4uLy4uL2xpYi9kZXN0cnVjdG9yXCI6MTMzLFwiLi4vLi4vbGliL2Vycm9yc1wiOjEzNSxcIi4uLy4uL2xpYi9maW5kLXJvb3Qtbm9kZVwiOjEzNixcIi4uLy4uL2xpYi9pcy12ZXJpZmllZC1kb21haW5cIjoxNTMsXCIuLi8uLi9saWIvbWV0aG9kc1wiOjE1NSxcIi4uLy4uL2xpYi9zaGFkb3dcIjoxNTgsXCIuLi9zaGFyZWQvYnJvd3Nlci1kZXRlY3Rpb25cIjoxMTEsXCIuLi9zaGFyZWQvY29uc3RhbnRzXCI6MTEyLFwiLi4vc2hhcmVkL2Vycm9yc1wiOjExMyxcIi4uL3NoYXJlZC9maW5kLXBhcmVudC10YWdzXCI6MTE0LFwiLi4vc2hhcmVkL2ZvY3VzLWludGVyY2VwdFwiOjExNSxcIi4uL3NoYXJlZC9nZXQtY2FyZC10eXBlc1wiOjExNixcIi4vYXR0cmlidXRlLXZhbGlkYXRpb24tZXJyb3JcIjoxMDQsXCIuL2NvbXBvc2UtdXJsXCI6MTA1LFwiLi9mb2N1cy1jaGFuZ2VcIjoxMDYsXCIuL2dldC1zdHlsZXMtZnJvbS1jbGFzc1wiOjEwNyxcIi4vaW5qZWN0LWZyYW1lXCI6MTA5LFwiQGJyYWludHJlZS9ldmVudC1lbWl0dGVyXCI6MzMsXCJAYnJhaW50cmVlL2lmcmFtZXJcIjozNSxcIkBicmFpbnRyZWUvdXVpZFwiOjM5LFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0MyxcImZyYW1lYnVzXCI6NTJ9XSwxMDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmb2N1c0ludGVyY2VwdCA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvZm9jdXMtaW50ZXJjZXB0XCIpO1xudmFyIGRpcmVjdGlvbnMgPSBfZGVyZXFfKFwiLi4vc2hhcmVkL2NvbnN0YW50c1wiKS5uYXZpZ2F0aW9uRGlyZWN0aW9ucztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmplY3RGcmFtZShpZCwgZnJhbWUsIGNvbnRhaW5lciwgZm9jdXNIYW5kbGVyKSB7XG4gIHZhciBmcmFtZVR5cGUgPSBmcmFtZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICB2YXIgY2xlYXJib3RoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICB2YXIgZm9jdXNJbnRlcmNlcHRCZWZvcmUgPSBmb2N1c0ludGVyY2VwdC5nZW5lcmF0ZShcbiAgICBpZCxcbiAgICBmcmFtZVR5cGUsXG4gICAgZGlyZWN0aW9ucy5CQUNLLFxuICAgIGZvY3VzSGFuZGxlclxuICApO1xuICB2YXIgZm9jdXNJbnRlcmNlcHRBZnRlciA9IGZvY3VzSW50ZXJjZXB0LmdlbmVyYXRlKFxuICAgIGlkLFxuICAgIGZyYW1lVHlwZSxcbiAgICBkaXJlY3Rpb25zLkZPUldBUkQsXG4gICAgZm9jdXNIYW5kbGVyXG4gICk7XG5cbiAgY2xlYXJib3RoLnN0eWxlLmNsZWFyID0gXCJib3RoXCI7XG5cbiAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZm9jdXNJbnRlcmNlcHRCZWZvcmUpO1xuICBmcmFnbWVudC5hcHBlbmRDaGlsZChmcmFtZSk7XG4gIGZyYWdtZW50LmFwcGVuZENoaWxkKGZvY3VzSW50ZXJjZXB0QWZ0ZXIpO1xuICBmcmFnbWVudC5hcHBlbmRDaGlsZChjbGVhcmJvdGgpO1xuXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG5cbiAgcmV0dXJuIFtmcmFtZSwgY2xlYXJib3RoXTtcbn07XG5cbn0se1wiLi4vc2hhcmVkL2NvbnN0YW50c1wiOjExMixcIi4uL3NoYXJlZC9mb2N1cy1pbnRlcmNlcHRcIjoxMTV9XSwxMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vKiogQG1vZHVsZSBicmFpbnRyZWUtd2ViL2hvc3RlZC1maWVsZHMgKi9cblxudmFyIEhvc3RlZEZpZWxkcyA9IF9kZXJlcV8oXCIuL2V4dGVybmFsL2hvc3RlZC1maWVsZHNcIik7XG52YXIgYmFzaWNDb21wb25lbnRWZXJpZmljYXRpb24gPSBfZGVyZXFfKFwiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vc2hhcmVkL2Vycm9yc1wiKTtcbnZhciBzdXBwb3J0c0lucHV0Rm9ybWF0dGluZyA9IF9kZXJlcV8oXCJyZXN0cmljdGVkLWlucHV0L3N1cHBvcnRzLWlucHV0LWZvcm1hdHRpbmdcIik7XG52YXIgd3JhcFByb21pc2UgPSBfZGVyZXFfKFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIik7XG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBWRVJTSU9OID0gXCIzLjEwMC4wXCI7XG5cbi8qKlxuICogRmllbGRzIHVzZWQgaW4ge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2hvc3RlZC1maWVsZHN+ZmllbGRPcHRpb25zIGZpZWxkcyBvcHRpb25zfVxuICogQHR5cGVkZWYge29iamVjdH0gZmllbGRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzZWxlY3RvciBEZXByZWNhdGVkOiBOb3cgYW4gYWxpYXMgZm9yIGBvcHRpb25zLmNvbnRhaW5lcmAuXG4gKiBAcHJvcGVydHkgeyhzdHJpbmd8SFRNTEVsZW1lbnQpfSBjb250YWluZXIgQSBET00gbm9kZSBvciBDU1Mgc2VsZWN0b3IgdG8gZmluZCB0aGUgY29udGFpbmVyIHdoZXJlIHRoZSBob3N0ZWQgZmllbGQgd2lsbCBiZSBpbnNlcnRlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGxhY2Vob2xkZXJdIFdpbGwgYmUgdXNlZCBhcyB0aGUgYHBsYWNlaG9sZGVyYCBhdHRyaWJ1dGUgb2YgdGhlIGlucHV0LiBJZiBgcGxhY2Vob2xkZXJgIGlzIG5vdCBuYXRpdmVseSBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIsIGl0IHdpbGwgYmUgcG9seWZpbGxlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHlwZV0gV2lsbCBiZSB1c2VkIGFzIHRoZSBgdHlwZWAgYXR0cmlidXRlIG9mIHRoZSBpbnB1dC4gVG8gbWFzayBgY3Z2YCBpbnB1dCwgZm9yIGluc3RhbmNlLCBgdHlwZTogXCJwYXNzd29yZFwiYCBjYW4gYmUgdXNlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaWZyYW1lVGl0bGVdIFRoZSB0aXRsZSB1c2VkIGZvciB0aGUgaWZyYW1lIGNvbnRhaW5pbmcgdGhlIGNyZWRpdCBjYXJkIGlucHV0LiBCeSBkZWZhdWx0LCB0aGlzIHdpbGwgYmUgYFNlY3VyZSBDcmVkaXQgQ2FyZCBGcmFtZSAtIDx0aGUgbmFtZSBvZiB0aGUgc3BlY2lmaWMgZmllbGQ+YC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaW50ZXJuYWxMYWJlbF0gRWFjaCBIb3N0ZWQgRmllbGQgaWZyYW1lIGhhcyBhIGhpZGRlbiBsYWJlbCB0aGF0IGlzIHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMgdG8gaWRlbnRpZnkgdGhlIGlucHV0LiBUaGUgYGludGVybmFsTGFiZWxgIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIGN1c3RvbWl6ZSB0aGUgZmllbGQgZm9yIGxvY2FsaXphdGlvbiBwdXJwb3Nlcy4gVGhlIGRlZmF1bHQgdmFsdWVzIGFyZTpcbiAqICogbnVtYmVyOiBDcmVkaXQgQ2FyZCBOdW1iZXJcbiAqICogY3Z2OiBDVlZcbiAqICogZXhwaXJhdGlvbkRhdGU6IEV4cGlyYXRpb24gRGF0ZVxuICogKiBleHBpcmF0aW9uTW9udGg6IEV4cGlyYXRpb24gTW9udGhcbiAqICogZXhwaXJhdGlvblllYXI6IEV4cGlyYXRpb24gWWVhclxuICogKiBwb3N0YWxDb2RlOiBQb3N0YWwgQ29kZVxuICogKiBjYXJkaG9sZGVyTmFtZTogQ2FyZGhvbGRlciBOYW1lXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtmb3JtYXRJbnB1dD10cnVlXSBFbmFibGUgb3IgZGlzYWJsZSBhdXRvbWF0aWMgZm9ybWF0dGluZyBvbiB0aGlzIGZpZWxkLlxuICogQHByb3BlcnR5IHsob2JqZWN0fGJvb2xlYW4pfSBbbWFza0lucHV0PWZhbHNlXSBFbmFibGUgb3IgZGlzYWJsZSBpbnB1dCBtYXNraW5nIHdoZW4gaW5wdXQgaXMgbm90IGZvY3VzZWQuIElmIHNldCB0byBgdHJ1ZWAgaW5zdGVhZCBvZiBhbiBvYmplY3QsIHRoZSBkZWZhdWx0cyBmb3IgdGhlIGBtYXNrSW5wdXRgIHBhcmFtZXRlcnMgd2lsbCBiZSB1c2VkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFttYXNrSW5wdXQuY2hhcmFjdGVyPeKAol0gVGhlIGNoYXJhY3RlciB0byB1c2Ugd2hlbiBtYXNraW5nIHRoZSBpbnB1dC4gVGhlIGRlZmF1bHQgY2hhcmFjdGVyICgn4oCiJykgdXNlcyBhIHVuaWNvZGUgc3ltYm9sLCBzbyB0aGUgd2VicGFnZSBtdXN0IHN1cHBvcnQgVVRGLTggY2hhcmFjdGVycyB3aGVuIHVzaW5nIHRoZSBkZWZhdWx0LlxuICogQHByb3BlcnR5IHtCb29sZWFufSBbbWFza0lucHV0LnNob3dMYXN0Rm91cj1mYWxzZV0gT25seSBhcHBsaWNhYmxlIGZvciB0aGUgY3JlZGl0IGNhcmQgZmllbGQuIFdoZXRoZXIgb3Igbm90IHRvIHNob3cgdGhlIGxhc3QgNCBkaWdpdHMgb2YgdGhlIGNhcmQgd2hlbiBtYXNraW5nLlxuICogQHByb3BlcnR5IHsob2JqZWN0fGJvb2xlYW4pfSBbc2VsZWN0XSBJZiB0cnV0aHksIHRoaXMgZmllbGQgYmVjb21lcyBhIGA8c2VsZWN0PmAgZHJvcGRvd24gbGlzdC4gVGhpcyBjYW4gb25seSBiZSB1c2VkIGZvciBgZXhwaXJhdGlvbk1vbnRoYCBhbmQgYGV4cGlyYXRpb25ZZWFyYCBmaWVsZHMuIElmIHlvdSBkbyBub3QgdXNlIGEgYHBsYWNlaG9sZGVyYCBwcm9wZXJ0eSBmb3IgdGhlIGZpZWxkLCB0aGUgY3VycmVudCBtb250aC95ZWFyIHdpbGwgYmUgdGhlIGRlZmF1bHQgc2VsZWN0ZWQgdmFsdWUuXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBbc2VsZWN0Lm9wdGlvbnNdIEFuIGFycmF5IG9mIDEyIHN0cmluZ3MsIG9uZSBwZXIgbW9udGguIFRoaXMgY2FuIG9ubHkgYmUgdXNlZCBmb3IgdGhlIGBleHBpcmF0aW9uTW9udGhgIGZpZWxkLiBGb3IgZXhhbXBsZSwgdGhlIGFycmF5IGNhbiBsb29rIGxpa2UgYFsnMDEgLSBKYW51YXJ5JywgJzAyIC0gRmVicnVhcnknLCAuLi5dYC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWF4Q2FyZExlbmd0aF0gVGhpcyBvcHRpb24gYXBwbGllcyBvbmx5IHRvIHRoZSBudW1iZXIgZmllbGQuIEFsbG93cyBhIGxpbWl0IHRvIHRoZSBsZW5ndGggb2YgdGhlIGNhcmQgbnVtYmVyLCBldmVuIGlmIHRoZSBjYXJkIGJyYW5kIG1heSBzdXBwb3J0IG51bWJlcnMgb2YgYSBncmVhdGVyIGxlbmd0aC4gSWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBncmVhdGVyIHRoYW4gdGhlIG1heCBsZW5ndGggZm9yIGEgY2FyZCBicmFuZCwgdGhlIHNtYWxsZXIgbnVtYmVyIG9mIHRoZSAyIHZhbHVlcyB3aWxsIGJlIHVzZWQuIEZvciBleGFtcGxlLCBpcyBgbWF4Q2FyZExlbmd0aGAgaXMgc2V0IHRvIDE2LCBidXQgYW4gQW1lcmljYW4gRXhwcmVzcyBjYXJkIGlzIGVudGVyZWQgKHdoaWNoIGhhcyBhIG1heCBjYXJkIGxlbmd0aCBvZiAxNSksIGEgbWF4IGNhcmQgbGVuZ3RoIG9mIDE1IHdpbGwgYmUgdXNlZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWF4bGVuZ3RoXSBUaGlzIG9wdGlvbiBhcHBsaWVzIG9ubHkgdG8gdGhlIENWViBhbmQgcG9zdGFsIGNvZGUgZmllbGRzLiBXaWxsIGJlIHVzZWQgYXMgdGhlIGBtYXhsZW5ndGhgIGF0dHJpYnV0ZSBvZiB0aGUgaW5wdXQuIFRoZSBwcmltYXJ5IHVzZSBjYXNlcyBmb3IgdGhlIGBtYXhsZW5ndGhgIG9wdGlvbiBhcmU6IGxpbWl0aW5nIHRoZSBsZW5ndGggb2YgdGhlIENWViBpbnB1dCBmb3IgQ1ZWLW9ubHkgdmVyaWZpY2F0aW9ucyB3aGVuIHRoZSBjYXJkIHR5cGUgaXMga25vd24gYW5kIHNldHRpbmcgdGhlIGxlbmd0aCBvZiB0aGUgcG9zdGFsIGNvZGUgaW5wdXQgd2hlbiBjYXJkcyBhcmUgY29taW5nIGZyb20gYSBrbm93biByZWdpb24uIFRoZSBkZWZhdWx0IGBtYXhsZW5ndGhgIGZvciB0aGUgcG9zdGFsIGNvZGUgaW5wdXQgaXMgYDEwYC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWlubGVuZ3RoPTNdIFRoaXMgb3B0aW9uIGFwcGxpZXMgb25seSB0byB0aGUgY3Z2IGFuZCBwb3N0YWwgY29kZSBmaWVsZHMuIFdpbGwgYmUgdXNlZCBhcyB0aGUgYG1pbmxlbmd0aGAgYXR0cmlidXRlIG9mIHRoZSBpbnB1dC5cbiAqIEZvciBwb3N0YWwgY29kZSBmaWVsZHMsIHRoZSBkZWZhdWx0IHZhbHVlIGlzIDMsIHJlcHJlc2VudGluZyB0aGUgSWNlbGFuZGljIHBvc3RhbCBjb2RlIGxlbmd0aC4gVGhpcyBvcHRpb24ncyBwcmltYXJ5IHVzZSBjYXNlIGlzIHRvIGluY3JlYXNlIHRoZSBgbWlubGVuZ3RoYCwgZS5nLiBmb3IgVVMgY3VzdG9tZXJzLCB0aGUgcG9zdGFsIGNvZGUgYG1pbmxlbmd0aGAgY2FuIGJlIHNldCB0byA1LlxuICogRm9yIGN2diBmaWVsZHMsIHRoZSBkZWZhdWx0IHZhbHVlIGlzIDMuIFRoZSBgbWlubGVuZ3RoYCBhdHRyaWJ1dGUgb25seSBhcHBsaWVzIHRvIGludGVncmF0aW9ucyBjYXB0dXJpbmcgYSBjdnYgd2l0aG91dCBhIG51bWJlciBmaWVsZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcHJlZmlsbF0gQSB2YWx1ZSB0byBwcmVmaWxsIHRoZSBmaWVsZCB3aXRoLiBGb3IgZXhhbXBsZSwgd2hlbiBjcmVhdGluZyBhbiB1cGRhdGUgY2FyZCBmb3JtLCB5b3UgY2FuIHByZWZpbGwgdGhlIGV4cGlyYXRpb24gZGF0ZSBmaWVsZHMgd2l0aCB0aGUgb2xkIGV4cGlyYXRpb24gZGF0ZSBkYXRhLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbcmVqZWN0VW5zdXBwb3J0ZWRDYXJkcz1mYWxzZV0gRGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDMuNDYuMCwgdXNlIGBzdXBwb3J0ZWRDYXJkQnJhbmRzYCBpbnN0ZWFkLiBPbmx5IGFsbG93IGNhcmQgdHlwZXMgdGhhdCB5b3VyIG1lcmNoYW50IGFjY291bnQgaXMgYWJsZSB0byBwcm9jZXNzLiBVbnN1cHBvcnRlZCBjYXJkIHR5cGVzIHdpbGwgaW52YWxpZGF0ZSB0aGUgY2FyZCBmb3JtLiBlLmcuIGlmIHlvdSBvbmx5IHByb2Nlc3MgVmlzYSBjYXJkcywgYSBjdXN0b21lciBlbnRlcmluZyBhIEFtZXJpY2FuIEV4cHJlc3MgY2FyZCB3b3VsZCBnZXQgYW4gaW52YWxpZCBjYXJkIGZpZWxkLiBUaGlzIGNhbiBvbmx5IGJlIHVzZWQgZm9yIHRoZSBgbnVtYmVyYCBmaWVsZC5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbc3VwcG9ydGVkQ2FyZEJyYW5kc10gT3ZlcnJpZGUgY2FyZCBicmFuZHMgdGhhdCBhcmUgc3VwcG9ydGVkIGJ5IHRoZSBjYXJkIGZvcm0uIFBhc3MgYCdjYXJkLWJyYW5kLWlkJzogdHJ1ZWAgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgaW4gdGhlIG1lcmNoYW50IGNvbmZpZ3VyYXRpb24gYW5kIGVuYWJsZSBhIGNhcmQgYnJhbmQuIFBhc3MgYCdjYXJkLWJyYW5kLWlkJzogZmFsc2VgIHRvIGRpc2FibGUgYSBjYXJkIGJyYW5kLiBVbnN1cHBvcnRlZCBjYXJkIHR5cGVzIHdpbGwgaW52YWxpZGF0ZSB0aGUgY2FyZCBmb3JtLiBlLmcuIGlmIHlvdSBvbmx5IHByb2Nlc3MgVmlzYSBjYXJkcywgYSBjdXN0b21lciBlbnRlcmluZyBhbiBBbWVyaWNhbiBFeHByZXNzIGNhcmQgd291bGQgZ2V0IGFuIGludmFsaWQgY2FyZCBmaWVsZC4gVGhpcyBjYW4gb25seSBiZSB1c2VkIGZvciB0aGUgIGBudW1iZXJgIGZpZWxkLiAoTm90ZTogb25seSBhbGxvdyBjYXJkIHR5cGVzIHRoYXQgeW91ciBtZXJjaGFudCBhY2NvdW50IGlzIGFjdHVhbGx5IGFibGUgdG8gcHJvY2Vzcy4pXG4gKlxuICogVmFsaWQgY2FyZCBicmFuZCBpZHMgYXJlOlxuICogKiB2aXNhXG4gKiAqIG1hc3RlcmNhcmRcbiAqICogYW1lcmljYW4tZXhwcmVzc1xuICogKiBkaW5lcnMtY2x1YlxuICogKiBkaXNjb3ZlclxuICogKiBqY2JcbiAqICogdW5pb24tcGF5XG4gKiAqIG1hZXN0cm9cbiAqICogZWxvXG4gKiAqIG1pclxuICogKiBoaXBlclxuICogKiBoaXBlcmNhcmRcbiAqL1xuXG4vKipcbiAqIEFuIG9iamVjdCB0aGF0IGhhcyB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkc35maWVsZCBmaWVsZCBvYmplY3RzfSBmb3IgZWFjaCBmaWVsZC4gVXNlZCBpbiB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkc35jcmVhdGUgY3JlYXRlfS5cbiAqIEB0eXBlZGVmIHtvYmplY3R9IGZpZWxkT3B0aW9uc1xuICogQHByb3BlcnR5IHtmaWVsZH0gW251bWJlcl0gQSBmaWVsZCBmb3IgY2FyZCBudW1iZXIuXG4gKiBAcHJvcGVydHkge2ZpZWxkfSBbZXhwaXJhdGlvbkRhdGVdIEEgZmllbGQgZm9yIGV4cGlyYXRpb24gZGF0ZSBpbiBgTU0vWVlZWWAgb3IgYE1NL1lZYCBmb3JtYXQuIFRoaXMgc2hvdWxkIG5vdCBiZSB1c2VkIHdpdGggdGhlIGBleHBpcmF0aW9uTW9udGhgIGFuZCBgZXhwaXJhdGlvblllYXJgIHByb3BlcnRpZXMuXG4gKiBAcHJvcGVydHkge2ZpZWxkfSBbZXhwaXJhdGlvbk1vbnRoXSBBIGZpZWxkIGZvciBleHBpcmF0aW9uIG1vbnRoIGluIGBNTWAgZm9ybWF0LiBUaGlzIHNob3VsZCBiZSB1c2VkIHdpdGggdGhlIGBleHBpcmF0aW9uWWVhcmAgcHJvcGVydHkuXG4gKiBAcHJvcGVydHkge2ZpZWxkfSBbZXhwaXJhdGlvblllYXJdIEEgZmllbGQgZm9yIGV4cGlyYXRpb24geWVhciBpbiBgWVlZWWAgb3IgYFlZYCBmb3JtYXQuIFRoaXMgc2hvdWxkIGJlIHVzZWQgd2l0aCB0aGUgYGV4cGlyYXRpb25Nb250aGAgcHJvcGVydHkuXG4gKiBAcHJvcGVydHkge2ZpZWxkfSBbY3Z2XSBBIGZpZWxkIGZvciAzIG9yIDQgZGlnaXQgY2FyZCB2ZXJpZmljYXRpb24gY29kZSAobGlrZSBDVlYgb3IgQ0lEKS4gSWYgeW91IHdpc2ggdG8gY3JlYXRlIGEgQ1ZWLW9ubHkgcGF5bWVudCBtZXRob2Qgbm9uY2UgdG8gdmVyaWZ5IGEgY2FyZCBhbHJlYWR5IHN0b3JlZCBpbiB5b3VyIFZhdWx0LCBvbWl0IGFsbCBvdGhlciBmaWVsZHMgdG8gb25seSBjb2xsZWN0IENWVi5cbiAqIEBwcm9wZXJ0eSB7ZmllbGR9IFtwb3N0YWxDb2RlXSBBIGZpZWxkIGZvciBwb3N0YWwgb3IgcmVnaW9uIGNvZGUuXG4gKiBAcHJvcGVydHkge2ZpZWxkfSBbY2FyZGhvbGRlck5hbWVdIEEgZmllbGQgZm9yIHRoZSBjYXJkaG9sZGVyIG5hbWUgb24gdGhlIGN1c3RvbWVyJ3MgY3JlZGl0IGNhcmQuXG4gKi9cblxuLyoqXG4gKiBBbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIENTUyB0aGF0IHdpbGwgYmUgYXBwbGllZCBpbiBlYWNoIGhvc3RlZCBmaWVsZC4gVGhpcyBvYmplY3QgbG9va3Mgc2ltaWxhciB0byBDU1MuIFR5cGljYWxseSwgdGhlc2Ugc3R5bGVzIGludm9sdmUgZm9udHMgKHN1Y2ggYXMgYGZvbnQtZmFtaWx5YCBvciBgY29sb3JgKS5cbiAqXG4gKiBZb3UgbWF5IGFsc28gcGFzcyB0aGUgbmFtZSBvZiBhIGNsYXNzIG9uIHlvdXIgc2l0ZSB0aGF0IGNvbnRhaW5zIHRoZSBzdHlsZXMgeW91IHdvdWxkIGxpa2UgdG8gYXBwbHkuIFRoZSBzdHlsZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYXV0b21hdGljYWxseSBwdWxsZWQgb2ZmIHRoZSBjbGFzcyBhbmQgYXBwbGllZCB0byB0aGUgSG9zdGVkIEZpZWxkcyBpbnB1dHMuIE5vdGU6IHRoaXMgaXMgcmVjb21tZW5kZWQgZm9yIGBpbnB1dGAgZWxlbWVudHMgb25seS4gSWYgdXNpbmcgYSBgc2VsZWN0YCBmb3IgdGhlIGV4cGlyYXRpb24gZGF0ZSwgdW5leHBlY3RlZCBzdHlsaW5nIG1heSBvY2N1ci5cbiAqXG4gKiBUaGVzZSBhcmUgdGhlIENTUyBwcm9wZXJ0aWVzIHRoYXQgSG9zdGVkIEZpZWxkcyBzdXBwb3J0cy4gQW55IG90aGVyIENTUyBzaG91bGQgYmUgc3BlY2lmaWVkIG9uIHlvdXIgcGFnZSBhbmQgb3V0c2lkZSBvZiBhbnkgQnJhaW50cmVlIGNvbmZpZ3VyYXRpb24uIFRyeWluZyB0byBzZXQgdW5zdXBwb3J0ZWQgcHJvcGVydGllcyB3aWxsIGZhaWwgYW5kIHB1dCBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUuXG4gKlxuICogU3VwcG9ydGVkIENTUyBwcm9wZXJ0aWVzIGFyZTpcbiAqIGBhcHBlYXJhbmNlYFxuICogYGJveC1zaGFkb3dgXG4gKiBgY29sb3JgXG4gKiBgZGlyZWN0aW9uYFxuICogYGZvbnQtZmFtaWx5YFxuICogYGZvbnQtc2l6ZS1hZGp1c3RgXG4gKiBgZm9udC1zaXplYFxuICogYGZvbnQtc3RyZXRjaGBcbiAqIGBmb250LXN0eWxlYFxuICogYGZvbnQtdmFyaWFudC1hbHRlcm5hdGVzYFxuICogYGZvbnQtdmFyaWFudC1jYXBzYFxuICogYGZvbnQtdmFyaWFudC1lYXN0LWFzaWFuYFxuICogYGZvbnQtdmFyaWFudC1saWdhdHVyZXNgXG4gKiBgZm9udC12YXJpYW50LW51bWVyaWNgXG4gKiBgZm9udC12YXJpYW50YFxuICogYGZvbnQtd2VpZ2h0YFxuICogYGZvbnRgXG4gKiBgbGV0dGVyLXNwYWNpbmdgXG4gKiBgbGluZS1oZWlnaHRgXG4gKiBgb3BhY2l0eWBcbiAqIGBvdXRsaW5lYFxuICogYG1hcmdpbmBcbiAqIGBtYXJnaW4tdG9wYFxuICogYG1hcmdpbi1yaWdodGBcbiAqIGBtYXJnaW4tYm90dG9tYFxuICogYG1hcmdpbi1sZWZ0YFxuICogYHBhZGRpbmdgXG4gKiBgcGFkZGluZy10b3BgXG4gKiBgcGFkZGluZy1yaWdodGBcbiAqIGBwYWRkaW5nLWJvdHRvbWBcbiAqIGBwYWRkaW5nLWxlZnRgXG4gKiBgdGV4dC1hbGlnbmBcbiAqIGB0ZXh0LXNoYWRvd2BcbiAqIGB0cmFuc2l0aW9uYFxuICogYC1tb3otYXBwZWFyYW5jZWBcbiAqIGAtbW96LWJveC1zaGFkb3dgXG4gKiBgLW1vei1vc3gtZm9udC1zbW9vdGhpbmdgXG4gKiBgLW1vei10YXAtaGlnaGxpZ2h0LWNvbG9yYFxuICogYC1tb3otdHJhbnNpdGlvbmBcbiAqIGAtd2Via2l0LWFwcGVhcmFuY2VgXG4gKiBgLXdlYmtpdC1ib3gtc2hhZG93YFxuICogYC13ZWJraXQtZm9udC1zbW9vdGhpbmdgXG4gKiBgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yYFxuICogYC13ZWJraXQtdHJhbnNpdGlvbmBcbiAqIEB0eXBlZGVmIHtvYmplY3R9IHN0eWxlT3B0aW9uc1xuICovXG5cbi8qKlxuICogQHN0YXRpY1xuICogQGZ1bmN0aW9uIGNyZWF0ZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ3JlYXRpb24gb3B0aW9uczpcbiAqIEBwYXJhbSB7Q2xpZW50fSBbb3B0aW9ucy5jbGllbnRdIEEge0BsaW5rIENsaWVudH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYXV0aG9yaXphdGlvbl0gQSB0b2tlbml6YXRpb25LZXkgb3IgY2xpZW50VG9rZW4uIENhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGBvcHRpb25zLmNsaWVudGAuXG4gKiBAcGFyYW0ge2ZpZWxkT3B0aW9uc30gb3B0aW9ucy5maWVsZHMgQSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvaG9zdGVkLWZpZWxkc35maWVsZE9wdGlvbnMgc2V0IG9mIG9wdGlvbnMgZm9yIGVhY2ggZmllbGR9LlxuICogQHBhcmFtIHtzdHlsZU9wdGlvbnN9IFtvcHRpb25zLnN0eWxlc10ge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2hvc3RlZC1maWVsZHN+c3R5bGVPcHRpb25zIFN0eWxlc30gYXBwbGllZCB0byBlYWNoIGZpZWxkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wcmV2ZW50QXV0b2ZpbGw9ZmFsc2VdIFdoZW4gdHJ1ZSwgYnJvd3NlcnMgd2lsbCBub3QgdHJ5IHRvIHByb21wdCB0aGUgY3VzdG9tZXIgdG8gYXV0b2ZpbGwgdGhlaXIgY3JlZGl0IGNhcmQgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIGBkYXRhYCwgaXMgdGhlIHtAbGluayBIb3N0ZWRGaWVsZHN9IGluc3RhbmNlLiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgYGNyZWF0ZWAgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB7QGxpbmsgSG9zdGVkRmllbGRzfSBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQGV4YW1wbGVcbiAqIGJyYWludHJlZS5ob3N0ZWRGaWVsZHMuY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAqICAgc3R5bGVzOiB7XG4gKiAgICAgJ2lucHV0Jzoge1xuICogICAgICAgJ2ZvbnQtc2l6ZSc6ICcxNnB0JyxcbiAqICAgICAgICdjb2xvcic6ICcjM0EzQTNBJ1xuICogICAgIH0sXG4gKiAgICAgJy5udW1iZXInOiB7XG4gKiAgICAgICAnZm9udC1mYW1pbHknOiAnbW9ub3NwYWNlJ1xuICogICAgIH0sXG4gKiAgICAgJy52YWxpZCc6IHtcbiAqICAgICAgICdjb2xvcic6ICdncmVlbidcbiAqICAgICB9XG4gKiAgIH0sXG4gKiAgIGZpZWxkczoge1xuICogICAgIG51bWJlcjoge1xuICogICAgICAgY29udGFpbmVyOiAnI2NhcmQtbnVtYmVyJ1xuICogICAgIH0sXG4gKiAgICAgY3Z2OiB7XG4gKiAgICAgICBjb250YWluZXI6ICcjY3Z2JyxcbiAqICAgICAgIHBsYWNlaG9sZGVyOiAn4oCi4oCi4oCiJ1xuICogICAgIH0sXG4gKiAgICAgZXhwaXJhdGlvbkRhdGU6IHtcbiAqICAgICAgIGNvbnRhaW5lcjogJyNleHBpcmF0aW9uLWRhdGUnXG4gKiAgICAgfVxuICogICB9XG4gKiB9LCBjYWxsYmFjayk7XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5XaXRoIGNhcmRob2xkZXIgbmFtZTwvY2FwdGlvbj5cbiAqIGJyYWludHJlZS5ob3N0ZWRGaWVsZHMuY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAqICAgZmllbGRzOiB7XG4gKiAgICAgbnVtYmVyOiB7XG4gKiAgICAgICBjb250YWluZXI6ICcjY2FyZC1udW1iZXInXG4gKiAgICAgfSxcbiAqICAgICBjYXJkaG9sZGVyTmFtZToge1xuICogICAgICAgY29udGFpbmVyOiAnI2NhcmRob2xkZXItbmFtZSdcbiAqICAgICB9LFxuICogICAgIGN2djoge1xuICogICAgICAgY29udGFpbmVyOiAnI2N2dicsXG4gKiAgICAgfSxcbiAqICAgICBleHBpcmF0aW9uRGF0ZToge1xuICogICAgICAgY29udGFpbmVyOiAnI2V4cGlyYXRpb24tZGF0ZSdcbiAqICAgICB9XG4gKiAgIH1cbiAqIH0sIGNhbGxiYWNrKTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkFwcGx5aW5nIHN0eWxlcyB3aXRoIGEgY2xhc3MgbmFtZTwvY2FwdGlvbj5cbiAqIC8vIGluIGRvY3VtZW50IGhlYWRcbiAqIDxzdHlsZT5cbiAqICAgLmJyYWludHJlZS1pbnB1dC1jbGFzcyB7XG4gKiAgICAgY29sb3I6IGJsYWNrO1xuICogICB9XG4gKiAgIC5icmFpbnRyZWUtdmFsaWQtY2xhc3Mge1xuICogICAgIGNvbG9yOiBncmVlbjtcbiAqICAgfVxuICogICAuYnJhaW50cmVlLWludmFsaWQtY2xhc3Mge1xuICogICAgIGNvbG9yOiByZWQ7XG4gKiAgIH1cbiAqIDwvc3R5bGU+XG4gKiAvLyBpbiBhIHNjcmlwdCB0YWdcbiAqIGJyYWludHJlZS5ob3N0ZWRGaWVsZHMuY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAqICAgc3R5bGVzOiB7XG4gKiAgICAgJ2lucHV0JzogJ2JyYWludHJlZS1pbnB1dC1jbGFzcycsXG4gKiAgICAgJy5pbnZhbGlkJzogJ2JyYWludHJlZS1pbnZhbGlkLWNsYXNzJyxcbiAqICAgICAnLnZhbGlkJzoge1xuICogICAgICAgLy8geW91IGNhbiBhbHNvIHVzZSB0aGUgb2JqZWN0IHN5bnRheCBhbG9uZ3NpZGVcbiAqICAgICAgIC8vIHRoZSBjbGFzcyBuYW1lIHN5bnRheFxuICogICAgICAgY29sb3I6IGdyZWVuO1xuICogICAgIH1cbiAqICAgfSxcbiAqICAgZmllbGRzOiB7XG4gKiAgICAgbnVtYmVyOiB7XG4gKiAgICAgICBjb250YWluZXI6ICcjY2FyZC1udW1iZXInXG4gKiAgICAgfSxcbiAqICAgICAvLyBldGMuLi5cbiAqICAgfVxuICogfSwgY2FsbGJhY2spO1xuICogQGV4YW1wbGUgPGNhcHRpb24+UmlnaHQgdG8gTGVmdCBMYW5ndWFnZSBTdXBwb3J0PC9jYXB0aW9uPlxuICogYnJhaW50cmVlLmhvc3RlZEZpZWxkcy5jcmVhdGUoe1xuICogICBjbGllbnQ6IGNsaWVudEluc3RhbmNlLFxuICogICBzdHlsZXM6IHtcbiAqICAgICAnaW5wdXQnOiB7XG4gKiAgICAgICAvLyBvdGhlciBzdHlsZXNcbiAqICAgICAgIGRpcmVjdGlvbjogJ3J0bCdcbiAqICAgICB9LFxuICogICB9LFxuICogICBmaWVsZHM6IHtcbiAqICAgICBudW1iZXI6IHtcbiAqICAgICAgIGNvbnRhaW5lcjogJyNjYXJkLW51bWJlcicsXG4gKiAgICAgICAvLyBDcmVkaXQgY2FyZCBmb3JtYXR0aW5nIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkXG4gKiAgICAgICAvLyB3aXRoIFJUTCBsYW5ndWFnZXMsIHNvIHdlIG5lZWQgdG8gdHVybiBpdCBvZmYgZm9yIHRoZSBudW1iZXIgaW5wdXRcbiAqICAgICAgIGZvcm1hdElucHV0OiBmYWxzZVxuICogICAgIH0sXG4gKiAgICAgY3Z2OiB7XG4gKiAgICAgICBjb250YWluZXI6ICcjY3Z2JyxcbiAqICAgICAgIHBsYWNlaG9sZGVyOiAn4oCi4oCi4oCiJ1xuICogICAgIH0sXG4gKiAgICAgZXhwaXJhdGlvbkRhdGU6IHtcbiAqICAgICAgIGNvbnRhaW5lcjogJyNleHBpcmF0aW9uLWRhdGUnLFxuICogICAgICAgdHlwZTogJ21vbnRoJ1xuICogICAgIH1cbiAqICAgfVxuICogfSwgY2FsbGJhY2spO1xuICogQGV4YW1wbGUgPGNhcHRpb24+U2V0dGluZyB1cCBIb3N0ZWQgRmllbGRzIHRvIHRva2VuaXplIENWViBvbmx5PC9jYXB0aW9uPlxuICogYnJhaW50cmVlLmhvc3RlZEZpZWxkcy5jcmVhdGUoe1xuICogICBjbGllbnQ6IGNsaWVudEluc3RhbmNlLFxuICogICBmaWVsZHM6IHtcbiAqICAgICAvLyBPbmx5IGFkZCB0aGUgYGN2dmAgb3B0aW9uLlxuICogICAgIGN2djoge1xuICogICAgICAgY29udGFpbmVyOiAnI2N2dicsXG4gKiAgICAgICBwbGFjZWhvbGRlcjogJ+KAouKAouKAoidcbiAqICAgICB9XG4gKiAgIH1cbiAqIH0sIGNhbGxiYWNrKTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkNyZWF0aW5nIGFuIGV4cGlyYXRpb24gZGF0ZSB1cGRhdGUgZm9ybSB3aXRoIHByZWZpbGxlZCBkYXRhPC9jYXB0aW9uPlxuICogdmFyIHN0b3JlZENyZWRpdENhcmRJbmZvcm1hdGlvbiA9IHtcbiAqICAgLy8gZ2V0IHRoaXMgaW5mbyBmcm9tIHlvdXIgc2VydmVyXG4gKiAgIC8vIHdpdGggYSBwYXltZW50IG1ldGhvZCBsb29rdXBcbiAqICAgbW9udGg6ICcwOScsXG4gKiAgIHllYXI6ICcyMDE3J1xuICogfTtcbiAqXG4gKiBicmFpbnRyZWUuaG9zdGVkRmllbGRzLmNyZWF0ZSh7XG4gKiAgIGNsaWVudDogY2xpZW50SW5zdGFuY2UsXG4gKiAgIGZpZWxkczoge1xuICogICAgIGV4cGlyYXRpb25Nb250aDoge1xuICogICAgICAgY29udGFpbmVyOiAnI2V4cGlyYXRpb24tbW9udGgnLFxuICogICAgICAgcHJlZmlsbDogc3RvcmVkQ3JlZGl0Q2FyZEluZm9ybWF0aW9uLm1vbnRoXG4gKiAgICAgfSxcbiAqICAgICBleHBpcmF0aW9uWWVhcjoge1xuICogICAgICAgY29udGFpbmVyOiAnI2V4cGlyYXRpb24teWVhcicsXG4gKiAgICAgICBwcmVmaWxsOiBzdG9yZWRDcmVkaXRDYXJkSW5mb3JtYXRpb24ueWVhclxuICogICAgIH1cbiAqICAgfVxuICogfSwgY2FsbGJhY2spO1xuICogQGV4YW1wbGUgPGNhcHRpb24+VmFsaWRhdGUgdGhlIGNhcmQgZm9ybSBmb3Igc3VwcG9ydGVkIGNhcmQgdHlwZXM8L2NhcHRpb24+XG4gKiBicmFpbnRyZWUuaG9zdGVkRmllbGRzLmNyZWF0ZSh7XG4gKiAgIGNsaWVudDogY2xpZW50SW5zdGFuY2UsXG4gKiAgIGZpZWxkczoge1xuICogICAgIG51bWJlcjoge1xuICogICAgICAgY29udGFpbmVyOiAnI2NhcmQtbnVtYmVyJyxcbiAqICAgICAgIHN1cHBvcnRlZENhcmRCcmFuZHM6IHtcbiAqICAgICAgICAgdmlzYTogZmFsc2UsIC8vIHByZXZlbnRzIFZpc2FzIGZyb20gc2hvd2luZyB1cCBhcyB2YWxpZCBldmVuIHdoZW4gdGhlIEJyYWludHJlZSBjb250cm9sIHBhbmVsIGlzIGNvbmZpZ3VyZWQgdG8gYWxsb3cgdGhlbVxuICogICAgICAgICAnZGluZXJzLWNsdWInOiB0cnVlIC8vIGFsbG93IERpbmVycyBDbHViIGNhcmRzIHRvIGJlIHZhbGlkIChwcm9jZXNzZWQgYXMgRGlzY292ZXIgY2FyZHMgb24gdGhlIEJyYWludHJlZSBiYWNrZW5kKVxuICogICAgICAgfVxuICogICAgIH0sXG4gKiAgICAgY3Z2OiB7XG4gKiAgICAgICBjb250YWluZXI6ICcjY3Z2JyxcbiAqICAgICAgIHBsYWNlaG9sZGVyOiAn4oCi4oCi4oCiJ1xuICogICAgIH0sXG4gKiAgICAgZXhwaXJhdGlvbkRhdGU6IHtcbiAqICAgICAgIGNvbnRhaW5lcjogJyNleHBpcmF0aW9uLWRhdGUnLFxuICogICAgICAgdHlwZTogJ21vbnRoJ1xuICogICAgIH1cbiAqICAgfSxcbiAqIH0sIGNhbGxiYWNrKTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uXG4gICAgLnZlcmlmeSh7XG4gICAgICBuYW1lOiBcIkhvc3RlZCBGaWVsZHNcIixcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW50ZWdyYXRpb24gPSBuZXcgSG9zdGVkRmllbGRzKG9wdGlvbnMpO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpbnRlZ3JhdGlvbi5vbihcInJlYWR5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXNvbHZlKGludGVncmF0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGludGVncmF0aW9uLm9uKFwidGltZW91dFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuSE9TVEVEX0ZJRUxEU19USU1FT1VUKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvKipcbiAgICogQHN0YXRpY1xuICAgKiBAZnVuY3Rpb24gc3VwcG9ydHNJbnB1dEZvcm1hdHRpbmdcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgZmFsc2UgaWYgaW5wdXQgZm9ybWF0dGluZyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZGlzYWJsZWQgZHVlIHRvIGJyb3dzZXIgaW5jb21wYXRpYmlsaXR5LiBPdGhlcndpc2UsIHJldHVybnMgdHJ1ZS4gRm9yIGEgbGlzdCBvZiB1bnN1cHBvcnRlZCBicm93c2VycywgW2dvIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9icmFpbnRyZWUvcmVzdHJpY3RlZC1pbnB1dC9ibG9iL21haW4vUkVBRE1FLm1kI2Jyb3dzZXJzLXdoZXJlLWZvcm1hdHRpbmctaXMtdHVybmVkLW9mZi1hdXRvbWF0aWNhbGx5KS5cbiAgICogQHJldHVybnMge0Jvb2xlYW59IFJldHVybnMgZmFsc2UgaWYgaW5wdXQgZm9ybWF0dGluZyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZGlzYWJsZWQgZHVlIHRvIGJyb3dzZXIgaW5jb21wYXRpYmlsaXR5LiBPdGhlcndpc2UsIHJldHVybnMgdHJ1ZS5cbiAgICogQGV4YW1wbGVcbiAgICogPGNhcHRpb24+Q29uZGl0aW9uYWxseSBjaG9vc2luZyBzcGxpdCBleHBpcmF0aW9uIGRhdGUgaW5wdXRzIGlmIGZvcm1hdHRpbmcgaXMgdW5hdmFpbGFibGU8L2NhcHRpb24+XG4gICAqIHZhciBjYW5Gb3JtYXQgPSBicmFpbnRyZWUuaG9zdGVkRmllbGRzLnN1cHBvcnRzSW5wdXRGb3JtYXR0aW5nKCk7XG4gICAqIHZhciBmaWVsZHMgPSB7XG4gICAqICAgbnVtYmVyOiB7XG4gICAqICAgICBjb250YWluZXI6ICcjY2FyZC1udW1iZXInXG4gICAqICAgfSxcbiAgICogICBjdnY6IHtcbiAgICogICAgIGNvbnRhaW5lcjogJyNjdnYnXG4gICAqICAgfVxuICAgKiB9O1xuICAgKlxuICAgKiBpZiAoY2FuRm9ybWF0KSB7XG4gICAqICAgZmllbGRzLmV4cGlyYXRpb25EYXRlID0ge1xuICAgKiAgICAgc2VsZWN0aW9uOiAnI2V4cGlyYXRpb24tZGF0ZSdcbiAgICogICB9O1xuICAgKiAgIGZ1bmN0aW9uVG9DcmVhdGVBbmRJbnNlcnRFeHBpcmF0aW9uRGF0ZURpdlRvRm9ybSgpO1xuICAgKiB9IGVsc2Uge1xuICAgKiAgIGZpZWxkcy5leHBpcmF0aW9uTW9udGggPSB7XG4gICAqICAgICBzZWxlY3Rpb246ICcjZXhwaXJhdGlvbi1tb250aCdcbiAgICogICB9O1xuICAgKiAgIGZpZWxkcy5leHBpcmF0aW9uWWVhciA9IHtcbiAgICogICAgIHNlbGVjdGlvbjogJyNleHBpcmF0aW9uLXllYXInXG4gICAqICAgfTtcbiAgICogICBmdW5jdGlvblRvQ3JlYXRlQW5kSW5zZXJ0RXhwaXJhdGlvbk1vbnRoQW5kWWVhckRpdnNUb0Zvcm0oKTtcbiAgICogfVxuICAgKlxuICAgKiBicmFpbnRyZWUuaG9zdGVkRmllbGRzLmNyZWF0ZSh7XG4gICAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAgICogICBzdHlsZXM6IHtcbiAgICogICAgIC8vIFN0eWxlc1xuICAgKiAgIH0sXG4gICAqICAgZmllbGRzOiBmaWVsZHNcbiAgICogfSwgY2FsbGJhY2spO1xuICAgKi9cbiAgc3VwcG9ydHNJbnB1dEZvcm1hdHRpbmc6IHN1cHBvcnRzSW5wdXRGb3JtYXR0aW5nLFxuICBjcmVhdGU6IHdyYXBQcm9taXNlKGNyZWF0ZSksXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgU0RLLCBpLmUuIGB7QHBrZyB2ZXJzaW9ufWAuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBWRVJTSU9OOiBWRVJTSU9OLFxufTtcblxufSx7XCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiOjEyMixcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuL2V4dGVybmFsL2hvc3RlZC1maWVsZHNcIjoxMDgsXCIuL3NoYXJlZC9lcnJvcnNcIjoxMTMsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzLFwicmVzdHJpY3RlZC1pbnB1dC9zdXBwb3J0cy1pbnB1dC1mb3JtYXR0aW5nXCI6NzF9XSwxMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc0FuZHJvaWQgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1hbmRyb2lkXCIpO1xudmFyIGlzQ2hyb21lT1MgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1jaHJvbWUtb3NcIik7XG52YXIgaXNJb3MgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1pb3NcIik7XG52YXIgaXNDaHJvbWUgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1jaHJvbWVcIik7XG5cbmZ1bmN0aW9uIGhhc1NvZnR3YXJlS2V5Ym9hcmQoKSB7XG4gIHJldHVybiBpc0FuZHJvaWQoKSB8fCBpc0Nocm9tZU9TKCkgfHwgaXNJb3MoKTtcbn1cblxuZnVuY3Rpb24gaXNDaHJvbWVJb3MoKSB7XG4gIHJldHVybiBpc0Nocm9tZSgpICYmIGlzSW9zKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FuZHJvaWQ6IGlzQW5kcm9pZCxcbiAgaXNDaHJvbWVPUzogaXNDaHJvbWVPUyxcbiAgaXNDaHJvbWVJb3M6IGlzQ2hyb21lSW9zLFxuICBpc0ZpcmVmb3g6IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWZpcmVmb3hcIiksXG4gIGlzSW9zOiBpc0lvcyxcbiAgaXNJb3NXZWJ2aWV3OiBfZGVyZXFfKFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1pb3Mtd2Vidmlld1wiKSxcbiAgaGFzU29mdHdhcmVLZXlib2FyZDogaGFzU29mdHdhcmVLZXlib2FyZCxcbn07XG5cbn0se1wiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1hbmRyb2lkXCI6MjIsXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWNocm9tZVwiOjI0LFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1jaHJvbWUtb3NcIjoyMyxcIkBicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24vaXMtZmlyZWZveFwiOjI1LFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1pb3NcIjozMCxcIkBicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24vaXMtaW9zLXdlYnZpZXdcIjoyOH1dLDExMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGVudW1lcmF0ZSA9IF9kZXJlcV8oXCIuLi8uLi9saWIvZW51bWVyYXRlXCIpO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL2Vycm9yc1wiKTtcbnZhciBWRVJTSU9OID0gXCIzLjEwMC4wXCI7XG5cbnZhciBjb25zdGFudHMgPSB7XG4gIFZFUlNJT046IFZFUlNJT04sXG4gIG1heEV4cGlyYXRpb25ZZWFyQWdlOiAxOSxcbiAgZXh0ZXJuYWxFdmVudHM6IHtcbiAgICBGT0NVUzogXCJmb2N1c1wiLFxuICAgIEJMVVI6IFwiYmx1clwiLFxuICAgIEVNUFRZOiBcImVtcHR5XCIsXG4gICAgTk9UX0VNUFRZOiBcIm5vdEVtcHR5XCIsXG4gICAgVkFMSURJVFlfQ0hBTkdFOiBcInZhbGlkaXR5Q2hhbmdlXCIsXG4gICAgQ0FSRF9UWVBFX0NIQU5HRTogXCJjYXJkVHlwZUNoYW5nZVwiLFxuICB9LFxuICBkZWZhdWx0TWF4TGVuZ3Roczoge1xuICAgIG51bWJlcjogMTksXG4gICAgcG9zdGFsQ29kZTogOCxcbiAgICBleHBpcmF0aW9uRGF0ZTogNyxcbiAgICBleHBpcmF0aW9uTW9udGg6IDIsXG4gICAgZXhwaXJhdGlvblllYXI6IDQsXG4gICAgY3Z2OiAzLFxuICB9LFxuICBleHRlcm5hbENsYXNzZXM6IHtcbiAgICBGT0NVU0VEOiBcImJyYWludHJlZS1ob3N0ZWQtZmllbGRzLWZvY3VzZWRcIixcbiAgICBJTlZBTElEOiBcImJyYWludHJlZS1ob3N0ZWQtZmllbGRzLWludmFsaWRcIixcbiAgICBWQUxJRDogXCJicmFpbnRyZWUtaG9zdGVkLWZpZWxkcy12YWxpZFwiLFxuICB9LFxuICBuYXZpZ2F0aW9uRGlyZWN0aW9uczoge1xuICAgIEJBQ0s6IFwiYmVmb3JlXCIsXG4gICAgRk9SV0FSRDogXCJhZnRlclwiLFxuICB9LFxuICBkZWZhdWx0SUZyYW1lU3R5bGU6IHtcbiAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgIGZsb2F0OiBcImxlZnRcIixcbiAgfSxcbiAgdG9rZW5pemF0aW9uRXJyb3JDb2Rlczoge1xuICAgIDgxNzI0OiBlcnJvcnMuSE9TVEVEX0ZJRUxEU19UT0tFTklaQVRJT05fRkFJTF9PTl9EVVBMSUNBVEUsXG4gICAgLy8gTkVYVF9NQUpPUl9WRVJTSU9OIHRoaXMgZXJyb3IgdHJpZ2dlcnMgZm9yIGJvdGggQVZTIGFuZCBDVlYgZXJyb3JzXG4gICAgLy8gYnV0IHRoZSBjb2RlIG5hbWUgaW1wbGllcyB0aGF0IGl0IHdvdWxkIG9ubHkgdHJpZ2dlciBmb3IgQ1ZWIHZlcmlmaWNhdGlvblxuICAgIC8vIGZhaWx1cmVzXG4gICAgODE3MzY6IGVycm9ycy5IT1NURURfRklFTERTX1RPS0VOSVpBVElPTl9DVlZfVkVSSUZJQ0FUSU9OX0ZBSUxFRCxcbiAgfSxcbiAgYWxsb3dlZFN0eWxlczogW1xuICAgIFwiLW1vei1hcHBlYXJhbmNlXCIsXG4gICAgXCItbW96LWJveC1zaGFkb3dcIixcbiAgICBcIi1tb3otb3N4LWZvbnQtc21vb3RoaW5nXCIsXG4gICAgXCItbW96LXRhcC1oaWdobGlnaHQtY29sb3JcIixcbiAgICBcIi1tb3otdHJhbnNpdGlvblwiLFxuICAgIFwiLXdlYmtpdC1hcHBlYXJhbmNlXCIsXG4gICAgXCItd2Via2l0LWJveC1zaGFkb3dcIixcbiAgICBcIi13ZWJraXQtZm9udC1zbW9vdGhpbmdcIixcbiAgICBcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLFxuICAgIFwiLXdlYmtpdC10cmFuc2l0aW9uXCIsXG4gICAgXCJhcHBlYXJhbmNlXCIsXG4gICAgXCJib3gtc2hhZG93XCIsXG4gICAgXCJjb2xvclwiLFxuICAgIFwiZGlyZWN0aW9uXCIsXG4gICAgXCJmb250XCIsXG4gICAgXCJmb250LWZhbWlseVwiLFxuICAgIFwiZm9udC1zaXplXCIsXG4gICAgXCJmb250LXNpemUtYWRqdXN0XCIsXG4gICAgXCJmb250LXN0cmV0Y2hcIixcbiAgICBcImZvbnQtc3R5bGVcIixcbiAgICBcImZvbnQtdmFyaWFudFwiLFxuICAgIFwiZm9udC12YXJpYW50LWFsdGVybmF0ZXNcIixcbiAgICBcImZvbnQtdmFyaWFudC1jYXBzXCIsXG4gICAgXCJmb250LXZhcmlhbnQtZWFzdC1hc2lhblwiLFxuICAgIFwiZm9udC12YXJpYW50LWxpZ2F0dXJlc1wiLFxuICAgIFwiZm9udC12YXJpYW50LW51bWVyaWNcIixcbiAgICBcImZvbnQtd2VpZ2h0XCIsXG4gICAgXCJsZXR0ZXItc3BhY2luZ1wiLFxuICAgIFwibGluZS1oZWlnaHRcIixcbiAgICBcIm1hcmdpblwiLFxuICAgIFwibWFyZ2luLXRvcFwiLFxuICAgIFwibWFyZ2luLXJpZ2h0XCIsXG4gICAgXCJtYXJnaW4tYm90dG9tXCIsXG4gICAgXCJtYXJnaW4tbGVmdFwiLFxuICAgIFwib3BhY2l0eVwiLFxuICAgIFwib3V0bGluZVwiLFxuICAgIFwicGFkZGluZ1wiLFxuICAgIFwicGFkZGluZy10b3BcIixcbiAgICBcInBhZGRpbmctcmlnaHRcIixcbiAgICBcInBhZGRpbmctYm90dG9tXCIsXG4gICAgXCJwYWRkaW5nLWxlZnRcIixcbiAgICBcInRleHQtYWxpZ25cIixcbiAgICBcInRleHQtc2hhZG93XCIsXG4gICAgXCJ0cmFuc2l0aW9uXCIsXG4gIF0sXG4gIGFsbG93ZWRGaWVsZHM6IHtcbiAgICBjYXJkaG9sZGVyTmFtZToge1xuICAgICAgbmFtZTogXCJjYXJkaG9sZGVyLW5hbWVcIixcbiAgICAgIGxhYmVsOiBcIkNhcmRob2xkZXIgTmFtZVwiLFxuICAgIH0sXG4gICAgbnVtYmVyOiB7XG4gICAgICBuYW1lOiBcImNyZWRpdC1jYXJkLW51bWJlclwiLFxuICAgICAgbGFiZWw6IFwiQ3JlZGl0IENhcmQgTnVtYmVyXCIsXG4gICAgfSxcbiAgICBjdnY6IHtcbiAgICAgIG5hbWU6IFwiY3Z2XCIsXG4gICAgICBsYWJlbDogXCJDVlZcIixcbiAgICB9LFxuICAgIGV4cGlyYXRpb25EYXRlOiB7XG4gICAgICBuYW1lOiBcImV4cGlyYXRpb25cIixcbiAgICAgIGxhYmVsOiBcIkV4cGlyYXRpb24gRGF0ZVwiLFxuICAgIH0sXG4gICAgZXhwaXJhdGlvbk1vbnRoOiB7XG4gICAgICBuYW1lOiBcImV4cGlyYXRpb24tbW9udGhcIixcbiAgICAgIGxhYmVsOiBcIkV4cGlyYXRpb24gTW9udGhcIixcbiAgICB9LFxuICAgIGV4cGlyYXRpb25ZZWFyOiB7XG4gICAgICBuYW1lOiBcImV4cGlyYXRpb24teWVhclwiLFxuICAgICAgbGFiZWw6IFwiRXhwaXJhdGlvbiBZZWFyXCIsXG4gICAgfSxcbiAgICBwb3N0YWxDb2RlOiB7XG4gICAgICBuYW1lOiBcInBvc3RhbC1jb2RlXCIsXG4gICAgICBsYWJlbDogXCJQb3N0YWwgQ29kZVwiLFxuICAgIH0sXG4gIH0sXG4gIGFsbG93ZWRBdHRyaWJ1dGVzOiB7XG4gICAgXCJhcmlhLWludmFsaWRcIjogXCJib29sZWFuXCIsXG4gICAgXCJhcmlhLXJlcXVpcmVkXCI6IFwiYm9vbGVhblwiLFxuICAgIGRpc2FibGVkOiBcImJvb2xlYW5cIixcbiAgICBwbGFjZWhvbGRlcjogXCJzdHJpbmdcIixcbiAgfSxcbiAgYXV0b2NvbXBsZXRlTWFwcGluZ3M6IHtcbiAgICBcImNhcmRob2xkZXItbmFtZVwiOiBcImNjLW5hbWVcIixcbiAgICBcImNyZWRpdC1jYXJkLW51bWJlclwiOiBcImNjLW51bWJlclwiLFxuICAgIGV4cGlyYXRpb246IFwiY2MtZXhwXCIsXG4gICAgXCJleHBpcmF0aW9uLW1vbnRoXCI6IFwiY2MtZXhwLW1vbnRoXCIsXG4gICAgXCJleHBpcmF0aW9uLXllYXJcIjogXCJjYy1leHAteWVhclwiLFxuICAgIGN2djogXCJjYy1jc2NcIixcbiAgICBcInBvc3RhbC1jb2RlXCI6IFwiYmlsbGluZyBwb3N0YWwtY29kZVwiLFxuICB9LFxufTtcblxuY29uc3RhbnRzLmV2ZW50cyA9IGVudW1lcmF0ZShcbiAgW1xuICAgIFwiQUREX0NMQVNTXCIsXG4gICAgXCJBVVRPRklMTF9EQVRBX0FWQUlMQUJMRVwiLFxuICAgIFwiQklOX0FWQUlMQUJMRVwiLFxuICAgIFwiQ0FSRF9GT1JNX0VOVFJZX0hBU19CRUdVTlwiLFxuICAgIFwiQ0xFQVJfRklFTERcIixcbiAgICBcIkNPTkZJR1VSQVRJT05cIixcbiAgICBcIkZSQU1FX1JFQURZXCIsXG4gICAgXCJJTlBVVF9FVkVOVFwiLFxuICAgIFwiUkVBRFlfRk9SX0NMSUVOVFwiLFxuICAgIFwiUkVNT1ZFX0FUVFJJQlVURVwiLFxuICAgIFwiUkVNT1ZFX0NMQVNTXCIsXG4gICAgXCJSRU1PVkVfRk9DVVNfSU5URVJDRVBUU1wiLFxuICAgIFwiU0VUX0FUVFJJQlVURVwiLFxuICAgIFwiU0VUX01FU1NBR0VcIixcbiAgICBcIlNFVF9NT05USF9PUFRJT05TXCIsXG4gICAgXCJUT0tFTklaQVRJT05fUkVRVUVTVFwiLFxuICAgIFwiVFJJR0dFUl9GT0NVU19DSEFOR0VcIixcbiAgICBcIlRSSUdHRVJfSU5QVVRfRk9DVVNcIixcbiAgICBcIlZBTElEQVRFX1NUUklDVFwiLFxuICBdLFxuICBcImhvc3RlZC1maWVsZHM6XCJcbik7XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc3RhbnRzO1xuXG59LHtcIi4uLy4uL2xpYi9lbnVtZXJhdGVcIjoxMzQsXCIuL2Vycm9yc1wiOjExM31dLDExMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5Ib3N0ZWQgRmllbGRzIC0gQ3JlYXRpb24gRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIFtjcmVhdGluZyB0aGUgSG9zdGVkIEZpZWxkcyBjb21wb25lbnRdKC4vbW9kdWxlLWJyYWludHJlZS13ZWJfaG9zdGVkLWZpZWxkcy5odG1sIy5jcmVhdGUpLlxuICogQHByb3BlcnR5IHtVTktOT1dOfSBIT1NURURfRklFTERTX1RJTUVPVVQgT2NjdXJzIHdoZW4gSG9zdGVkIEZpZWxkcyBkb2VzIG5vdCBmaW5pc2ggc2V0dGluZyB1cCB3aXRoaW4gNjAgc2Vjb25kcy5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IEhPU1RFRF9GSUVMRFNfSU5WQUxJRF9GSUVMRF9LRVkgT2NjdXJzIHdoZW4gSG9zdGVkIEZpZWxkcyBpcyBpbnN0YW50aWF0ZWQgd2l0aCBhbiBpbnZhbGlkIEZpZWxkIG9wdGlvbi5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IEhPU1RFRF9GSUVMRFNfSU5WQUxJRF9GSUVMRF9TRUxFQ1RPUiBPY2N1cnMgd2hlbiBIb3N0ZWQgRmllbGRzIGdpdmVuIGEgZmllbGQgc2VsZWN0b3IgdGhhdCBpcyBub3QgdmFsaWQuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBIT1NURURfRklFTERTX0ZJRUxEX0RVUExJQ0FURV9JRlJBTUUgT2NjdXJzIHdoZW4gSG9zdGVkIEZpZWxkcyBnaXZlbiBhIGZpZWxkIHNlbGVjdG9yIHRoYXQgYWxyZWFkeSBjb250YWlucyBhbiBpZnJhbWUuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBIT1NURURfRklFTERTX0ZJRUxEX1BST1BFUlRZX0lOVkFMSUQgT2NjdXJzIHdoZW4gYSBmaWVsZCBjb25maWd1cmF0aW9uIG9wdGlvbiBpcyBub3QgdmFsaWQuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5Ib3N0ZWQgRmllbGRzIC0gRmllbGQgTWFuaXB1bGF0aW9uIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiBtb2RpZnlpbmcgZmllbGRzIHRocm91Z2ggW2BhZGRDbGFzc2BdKC4vSG9zdGVkRmllbGRzLmh0bWwjYWRkQ2xhc3MpLCBbYHJlbW92ZUNsYXNzYF0oLi9Ib3N0ZWRGaWVsZHMuaHRtbCNyZW1vdmVDbGFzcyksIFtgc2V0QXR0cmlidXRlYF0oLi9Ib3N0ZWRGaWVsZHMuaHRtbCNzZXRBdHRyaWJ1dGUpLCBbYHJlbW92ZUF0dHJpYnV0ZWBdKC4vSG9zdGVkRmllbGRzLmh0bWwjcmVtb3ZlQXR0cmlidXRlKSwgW2BjbGVhcmBdKC4vSG9zdGVkRmllbGRzLmh0bWwjY2xlYXIpLCBbYGZvY3VzYF0oLi9Ib3N0ZWRGaWVsZHMuaHRtbCNmb2N1cyksIGFuZCBbYHNldE1vbnRoT3B0aW9uc2BdKC4vSG9zdGVkRmllbGRzLmh0bWwjc2V0TW9udGhPcHRpb25zKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IEhPU1RFRF9GSUVMRFNfRklFTERfSU5WQUxJRCBPY2N1cnMgd2hlbiBhdHRlbXB0aW5nIHRvIG1vZGlmeSBhIGZpZWxkIHRoYXQgaXMgbm90IGEgdmFsaWQgSG9zdGVkIEZpZWxkcyBvcHRpb24uXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBIT1NURURfRklFTERTX0ZJRUxEX05PVF9QUkVTRU5UIE9jY3VycyB3aGVuIGF0dGVtcHRpbmcgdG8gbW9kaWZ5IGEgZmllbGQgdGhhdCBpcyBub3QgY29uZmlndXJlZCB3aXRoIEhvc3RlZCBGaWVsZHMuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBIT1NURURfRklFTERTX0ZJRUxEX1BST1BFUlRZX0lOVkFMSUQgT2NjdXJzIHdoZW4gYSBmaWVsZCBjb25maWd1cmF0aW9uIG9wdGlvbiBpcyBub3QgdmFsaWQuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5Ib3N0ZWQgRmllbGRzIC0gU2V0IEF0dHJpYnV0ZSBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gdXNpbmcgdGhlIFtgc2V0QXR0cmlidXRlYCBtZXRob2RdKC4vSG9zdGVkRmllbGRzLmh0bWwjc2V0QXR0cmlidXRlKVxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gSE9TVEVEX0ZJRUxEU19BVFRSSUJVVEVfTk9UX1NVUFBPUlRFRCBPY2N1cnMgd2hlbiB0cnlpbmcgdG8gc2V0IGFuIGF0dHJpYnV0ZSB0aGF0IGlzIG5vdCBzdXBwb3J0ZWQgdG8gYmUgc2V0LlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gSE9TVEVEX0ZJRUxEU19BVFRSSUJVVEVfVkFMVUVfTk9UX0FMTE9XRUQgT2NjdXJzIHdoZW4gdGhlIHR5cGUgb2YgdmFsdWUgZm9yIGFuIGF0dHJpYnV0ZSBpcyBub3QgYWxsb3dlZCB0byBiZSBzZXQuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5Ib3N0ZWQgRmllbGRzIC0gVG9rZW5pemUgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIFt0b2tlbml6aW5nIHRoZSBjYXJkIGRldGFpbHMgd2l0aCBIb3N0ZWQgRmllbGRzXSguL0hvc3RlZEZpZWxkcy5odG1sI3Rva2VuaXplKS5cbiAqIEBwcm9wZXJ0eSB7TkVUV09SS30gSE9TVEVEX0ZJRUxEU19UT0tFTklaQVRJT05fTkVUV09SS19FUlJPUiBPY2N1cnMgd2hlbiB0aGUgQnJhaW50cmVlIGdhdGV3YXkgY2Fubm90IGJlIGNvbnRhY3RlZC5cbiAqIEBwcm9wZXJ0eSB7Q1VTVE9NRVJ9IEhPU1RFRF9GSUVMRFNfVE9LRU5JWkFUSU9OX0ZBSUxfT05fRFVQTElDQVRFIE9jY3VycyB3aGVuIGF0dGVtcHRpbmcgdG8gdmF1bHQgYSBjYXJkLCBidXQgdGhlIGNsaWVudCB0b2tlbiBiZWluZyB1c2VkIGlzIGNvbmZpZ3VyZWQgdG8gZmFpbCBpZiB0aGUgY2FyZCBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgdmF1bHQuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBIT1NURURfRklFTERTX1RPS0VOSVpBVElPTl9DVlZfVkVSSUZJQ0FUSU9OX0ZBSUxFRCBPY2N1cnMgd2hlbiBjdnYgdmVyaWZpY2F0aW9uIGlzIHR1cm5lZCBvbiBpbiB0aGUgQnJhaW50cmVlIGNvbnRyb2wgcGFuZWwuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBIT1NURURfRklFTERTX0ZBSUxFRF9UT0tFTklaQVRJT04gT2NjdXJzIHdoZW4gdGhlIGNyZWRpdCBjYXJkIGRldGFpbHMgd2VyZSBzZW50IHRvIEJyYWludHJlZSwgYnV0IGZhaWxlZCB0byB0b2tlbml6ZS5cbiAqIEBwcm9wZXJ0eSB7Q1VTVE9NRVJ9IEhPU1RFRF9GSUVMRFNfRklFTERTX0VNUFRZIE9jY3VycyB3aGVuIGFsbCB0aGUgSG9zdGVkIEZpZWxkcyBpbnB1dHMgYXJlIGVtcHR5LlxuICogQHByb3BlcnR5IHtDVVNUT01FUn0gSE9TVEVEX0ZJRUxEU19GSUVMRFNfSU5WQUxJRCBPY2N1cnMgd2hlbiBvbmUgb3JlIG1vcmUgZmllbGRzIGFyZSBpbnZhbGlkLlxuICovXG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSE9TVEVEX0ZJRUxEU19USU1FT1VUOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuVU5LTk9XTixcbiAgICBjb2RlOiBcIkhPU1RFRF9GSUVMRFNfVElNRU9VVFwiLFxuICAgIG1lc3NhZ2U6IFwiSG9zdGVkIEZpZWxkcyB0aW1lZCBvdXQgd2hlbiBhdHRlbXB0aW5nIHRvIHNldCB1cC5cIixcbiAgfSxcbiAgSE9TVEVEX0ZJRUxEU19JTlZBTElEX0ZJRUxEX0tFWToge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiSE9TVEVEX0ZJRUxEU19JTlZBTElEX0ZJRUxEX0tFWVwiLFxuICB9LFxuICBIT1NURURfRklFTERTX0lOVkFMSURfRklFTERfU0VMRUNUT1I6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIkhPU1RFRF9GSUVMRFNfSU5WQUxJRF9GSUVMRF9TRUxFQ1RPUlwiLFxuICAgIG1lc3NhZ2U6IFwiU2VsZWN0b3IgZG9lcyBub3QgcmVmZXJlbmNlIGEgdmFsaWQgRE9NIG5vZGUuXCIsXG4gIH0sXG4gIEhPU1RFRF9GSUVMRFNfRklFTERfRFVQTElDQVRFX0lGUkFNRToge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiSE9TVEVEX0ZJRUxEU19GSUVMRF9EVVBMSUNBVEVfSUZSQU1FXCIsXG4gICAgbWVzc2FnZTogXCJFbGVtZW50IGFscmVhZHkgY29udGFpbnMgYSBCcmFpbnRyZWUgaWZyYW1lLlwiLFxuICB9LFxuICBIT1NURURfRklFTERTX0ZJRUxEX0lOVkFMSUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIkhPU1RFRF9GSUVMRFNfRklFTERfSU5WQUxJRFwiLFxuICB9LFxuICBIT1NURURfRklFTERTX0ZJRUxEX05PVF9QUkVTRU5UOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJIT1NURURfRklFTERTX0ZJRUxEX05PVF9QUkVTRU5UXCIsXG4gIH0sXG4gIEhPU1RFRF9GSUVMRFNfVE9LRU5JWkFUSU9OX05FVFdPUktfRVJST1I6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5ORVRXT1JLLFxuICAgIGNvZGU6IFwiSE9TVEVEX0ZJRUxEU19UT0tFTklaQVRJT05fTkVUV09SS19FUlJPUlwiLFxuICAgIG1lc3NhZ2U6IFwiQSB0b2tlbml6YXRpb24gbmV0d29yayBlcnJvciBvY2N1cnJlZC5cIixcbiAgfSxcbiAgSE9TVEVEX0ZJRUxEU19UT0tFTklaQVRJT05fRkFJTF9PTl9EVVBMSUNBVEU6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5DVVNUT01FUixcbiAgICBjb2RlOiBcIkhPU1RFRF9GSUVMRFNfVE9LRU5JWkFUSU9OX0ZBSUxfT05fRFVQTElDQVRFXCIsXG4gICAgbWVzc2FnZTogXCJUaGlzIGNyZWRpdCBjYXJkIGFscmVhZHkgZXhpc3RzIGluIHRoZSBtZXJjaGFudCdzIHZhdWx0LlwiLFxuICB9LFxuICBIT1NURURfRklFTERTX1RPS0VOSVpBVElPTl9DVlZfVkVSSUZJQ0FUSU9OX0ZBSUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiSE9TVEVEX0ZJRUxEU19UT0tFTklaQVRJT05fQ1ZWX1ZFUklGSUNBVElPTl9GQUlMRURcIixcbiAgICBtZXNzYWdlOiBcIkNWViB2ZXJpZmljYXRpb24gZmFpbGVkIGR1cmluZyB0b2tlbml6YXRpb24uXCIsXG4gIH0sXG4gIEhPU1RFRF9GSUVMRFNfRkFJTEVEX1RPS0VOSVpBVElPTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiSE9TVEVEX0ZJRUxEU19GQUlMRURfVE9LRU5JWkFUSU9OXCIsXG4gICAgbWVzc2FnZTogXCJUaGUgc3VwcGxpZWQgY2FyZCBkYXRhIGZhaWxlZCB0b2tlbml6YXRpb24uXCIsXG4gIH0sXG4gIEhPU1RFRF9GSUVMRFNfRklFTERTX0VNUFRZOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuQ1VTVE9NRVIsXG4gICAgY29kZTogXCJIT1NURURfRklFTERTX0ZJRUxEU19FTVBUWVwiLFxuICAgIG1lc3NhZ2U6IFwiQWxsIGZpZWxkcyBhcmUgZW1wdHkuIENhbm5vdCB0b2tlbml6ZSBlbXB0eSBjYXJkIGZpZWxkcy5cIixcbiAgfSxcbiAgSE9TVEVEX0ZJRUxEU19GSUVMRFNfSU5WQUxJRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiSE9TVEVEX0ZJRUxEU19GSUVMRFNfSU5WQUxJRFwiLFxuICAgIG1lc3NhZ2U6XG4gICAgICBcIlNvbWUgcGF5bWVudCBpbnB1dCBmaWVsZHMgYXJlIGludmFsaWQuIENhbm5vdCB0b2tlbml6ZSBpbnZhbGlkIGNhcmQgZmllbGRzLlwiLFxuICB9LFxuICBIT1NURURfRklFTERTX0FUVFJJQlVURV9OT1RfU1VQUE9SVEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJIT1NURURfRklFTERTX0FUVFJJQlVURV9OT1RfU1VQUE9SVEVEXCIsXG4gIH0sXG4gIEhPU1RFRF9GSUVMRFNfQVRUUklCVVRFX1ZBTFVFX05PVF9BTExPV0VEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJIT1NURURfRklFTERTX0FUVFJJQlVURV9WQUxVRV9OT1RfQUxMT1dFRFwiLFxuICB9LFxuICBIT1NURURfRklFTERTX0ZJRUxEX1BST1BFUlRZX0lOVkFMSUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIkhPU1RFRF9GSUVMRFNfRklFTERfUFJPUEVSVFlfSU5WQUxJRFwiLFxuICB9LFxufTtcblxufSx7XCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0fV0sMTE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBmaW5kUGFyZW50VGFncyhlbGVtZW50LCB0YWcpIHtcbiAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgdmFyIHBhcmVudHMgPSBbXTtcblxuICB3aGlsZSAocGFyZW50ICE9IG51bGwpIHtcbiAgICBpZiAocGFyZW50LnRhZ05hbWUgIT0gbnVsbCAmJiBwYXJlbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0YWcpIHtcbiAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgIH1cblxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICB9XG5cbiAgcmV0dXJuIHBhcmVudHM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZFBhcmVudFRhZ3M7XG5cbn0se31dLDExNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGJyb3dzZXJEZXRlY3Rpb24gPSBfZGVyZXFfKFwiLi9icm93c2VyLWRldGVjdGlvblwiKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKFwiLi9jb25zdGFudHNcIik7XG52YXIgYWxsb3dlZEZpZWxkcyA9IE9iamVjdC5rZXlzKGNvbnN0YW50cy5hbGxvd2VkRmllbGRzKTtcbnZhciBkaXJlY3Rpb25zID0gY29uc3RhbnRzLm5hdmlnYXRpb25EaXJlY3Rpb25zO1xuXG52YXIgZm9jdXNJbnRlcmNlcHQgPSB7XG4gIGdlbmVyYXRlOiBmdW5jdGlvbiAoaG9zdGVkRmllbGRzSWQsIHR5cGUsIGRpcmVjdGlvbiwgaGFuZGxlcikge1xuICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICB2YXIgZm9jdXNJbnRlcmNlcHRTdHlsZXMgPSB7XG4gICAgICBib3JkZXI6IFwibm9uZSAhaW1wb3J0YW50XCIsXG4gICAgICBkaXNwbGF5OiBcImJsb2NrICFpbXBvcnRhbnRcIixcbiAgICAgIGhlaWdodDogXCIxcHggIWltcG9ydGFudFwiLFxuICAgICAgbGVmdDogXCItMXB4ICFpbXBvcnRhbnRcIixcbiAgICAgIG9wYWNpdHk6IFwiMCAhaW1wb3J0YW50XCIsXG4gICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZSAhaW1wb3J0YW50XCIsXG4gICAgICB0b3A6IFwiLTFweCAhaW1wb3J0YW50XCIsXG4gICAgICB3aWR0aDogXCIxcHggIWltcG9ydGFudFwiLFxuICAgIH07XG4gICAgdmFyIHNob3VsZENyZWF0ZUZvY3VzSW50ZXJjZXB0ID1cbiAgICAgIGJyb3dzZXJEZXRlY3Rpb24uaGFzU29mdHdhcmVLZXlib2FyZCgpIHx8IGJyb3dzZXJEZXRlY3Rpb24uaXNGaXJlZm94KCk7XG5cbiAgICBpZiAoIXNob3VsZENyZWF0ZUZvY3VzSW50ZXJjZXB0KSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIH1cblxuICAgIGlucHV0LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJhdXRvY29tcGxldGVcIiwgXCJvZmZcIik7XG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiZGF0YS1icmFpbnRyZWUtZGlyZWN0aW9uXCIsIGRpcmVjdGlvbik7XG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiZGF0YS1icmFpbnRyZWUtdHlwZVwiLCB0eXBlKTtcbiAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXG4gICAgICBcImlkXCIsXG4gICAgICBcImJ0LVwiICsgdHlwZSArIFwiLVwiICsgZGlyZWN0aW9uICsgXCItXCIgKyBob3N0ZWRGaWVsZHNJZFxuICAgICk7XG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKFxuICAgICAgXCJzdHlsZVwiLFxuICAgICAgSlNPTi5zdHJpbmdpZnkoZm9jdXNJbnRlcmNlcHRTdHlsZXMpXG4gICAgICAgIC5yZXBsYWNlKC9be31cIl0vZywgXCJcIilcbiAgICAgICAgLnJlcGxhY2UoLywvZywgXCI7XCIpXG4gICAgKTtcblxuICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoXCJmb2N1cy1pbnRlcmNlcHRcIik7XG5cbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBoYW5kbGVyKGV2ZW50KTtcblxuICAgICAgLypcbiAgICAgICAgQ2VydGFpbiBicm93c2VycyB3aXRob3V0IHNvZnR3YXJlIGtleWJvYXJkcyAoRmlyZWZveCwgSW50ZXJuZXRcbiAgICAgICAgRXhwbG9yZXIpIG5lZWQgdGhlIGZvY3VzIGludGVyY2VwdCBpbnB1dHMgdGhhdCBnZXQgaW5zZXJ0ZWRcbiAgICAgICAgYXJvdW5kIHRoZSBhY3R1YWwgaW5wdXQgdG8gYmx1ciB0aGVtc2VsdmVzLCBvdGhlcndpc2UgdGhlXG4gICAgICAgIGJyb3dzZXIgZ2V0cyBjb25mdXNlZCBhYm91dCB3aGF0IHNob3VsZCBoYXZlIGZvY3VzLiBDYW4ndFxuICAgICAgICBhcHBseSB0aGlzIHRvIGJyb3dzZXJzIHdpdGggc29mdHdhcmUga2V5Ym9hcmRzIGhvd2V2ZXIsXG4gICAgICAgIGJlY2F1c2UgaXQgYmx1cnMgZXZlcnl0aGluZywgYW5kIGZvY3VzIG9uIHRoZSBhY3R1YWwgaW5wdXQgaXNcbiAgICAgICAgYWxzbyBsb3N0LlxuICAgICAgKi9cbiAgICAgIGlmICghYnJvd3NlckRldGVjdGlvbi5oYXNTb2Z0d2FyZUtleWJvYXJkKCkpIHtcbiAgICAgICAgaW5wdXQuYmx1cigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGlucHV0O1xuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiAoaWRTdHJpbmcpIHtcbiAgICB2YXIgZm9jdXNJbnB1dHM7XG5cbiAgICBpZiAoIWlkU3RyaW5nKSB7XG4gICAgICBmb2N1c0lucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1icmFpbnRyZWUtZGlyZWN0aW9uXVwiKTtcbiAgICAgIGZvY3VzSW5wdXRzID0gW10uc2xpY2UuY2FsbChmb2N1c0lucHV0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvY3VzSW5wdXRzID0gW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkU3RyaW5nKV07XG4gICAgfVxuXG4gICAgZm9jdXNJbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKFxuICAgICAgICBub2RlICYmXG4gICAgICAgIG5vZGUubm9kZVR5cGUgPT09IDEgJiZcbiAgICAgICAgZm9jdXNJbnRlcmNlcHQubWF0Y2hGb2N1c0VsZW1lbnQobm9kZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSlcbiAgICAgICkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIG1hdGNoRm9jdXNFbGVtZW50OiBmdW5jdGlvbiAoaWRTdHJpbmcpIHtcbiAgICB2YXIgaWRDb21wb25lbnRzLCBoYXNCVFByZWZpeCwgaXNBbGxvd2VkVHlwZSwgaXNWYWxpZERpcmVjdGlvbjtcblxuICAgIGlmICghaWRTdHJpbmcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZENvbXBvbmVudHMgPSBpZFN0cmluZy5zcGxpdChcIi1cIik7XG5cbiAgICBpZiAoaWRDb21wb25lbnRzLmxlbmd0aCA8IDQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBoYXNCVFByZWZpeCA9IGlkQ29tcG9uZW50c1swXSA9PT0gXCJidFwiO1xuICAgIGlzQWxsb3dlZFR5cGUgPSBhbGxvd2VkRmllbGRzLmluZGV4T2YoaWRDb21wb25lbnRzWzFdKSA+IC0xO1xuICAgIGlzVmFsaWREaXJlY3Rpb24gPVxuICAgICAgaWRDb21wb25lbnRzWzJdID09PSBkaXJlY3Rpb25zLkJBQ0sgfHxcbiAgICAgIGlkQ29tcG9uZW50c1syXSA9PT0gZGlyZWN0aW9ucy5GT1JXQVJEO1xuXG4gICAgcmV0dXJuIEJvb2xlYW4oaGFzQlRQcmVmaXggJiYgaXNBbGxvd2VkVHlwZSAmJiBpc1ZhbGlkRGlyZWN0aW9uKTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZm9jdXNJbnRlcmNlcHQ7XG5cbn0se1wiLi9icm93c2VyLWRldGVjdGlvblwiOjExMSxcIi4vY29uc3RhbnRzXCI6MTEyfV0sMTE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgY3JlZGl0Q2FyZFR5cGUgPSBfZGVyZXFfKFwiY3JlZGl0LWNhcmQtdHlwZVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHZhciByZXN1bHRzID0gY3JlZGl0Q2FyZFR5cGUobnVtYmVyKTtcblxuICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKGNhcmQpIHtcbiAgICAvLyBORVhUX01BSk9SX1ZFUlNJT04gY3JlZGl0LWNhcmQtdHlwZSBmaXhlZCB0aGUgbWFzdGVyY2FyZCBlbnVtXG4gICAgLy8gYnV0IHdlIHN0aWxsIHBhc3MgbWFzdGVyLWNhcmQgaW4gdGhlIGJyYWludHJlZSBBUElcbiAgICAvLyBpbiBhIG1ham9yIHZlcnNpb24gYnVtcCwgd2UgY2FuIHJlbW92ZSB0aGlzIGFuZFxuICAgIC8vIHRoaXMgd2lsbCBiZSBtYXN0ZXJjYXJkIGluc3RlYWQgb2YgbWFzdGVyLWNhcmRcbiAgICBpZiAoY2FyZC50eXBlID09PSBcIm1hc3RlcmNhcmRcIikge1xuICAgICAgY2FyZC50eXBlID0gXCJtYXN0ZXItY2FyZFwiO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG59LHtcImNyZWRpdC1jYXJkLXR5cGVcIjo0NH1dLDExNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQG1vZHVsZSBicmFpbnRyZWUtd2ViXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBpcyB0aGUgdG9wLWxldmVsIG1vZHVsZSBleHBvcnRlZCBieSB0aGUgQnJhaW50cmVlIEphdmFTY3JpcHQgU0RLLiBJbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQsIHRoaXMgd2lsbCBiZSB0aGUgZ2xvYmFsIDxjb2RlPmJyYWludHJlZTwvY29kZT4gb2JqZWN0LiBJbiBhIENvbW1vbkpTIGVudmlyb25tZW50IChsaWtlIEJyb3dzZXJpZnkgb3IgV2VicGFjayksIGl0IHdpbGwgYmUgdGhlIGRlZmF1bHQgZXhwb3J0IG9mIHRoZSA8Y29kZT5icmFpbnRyZWUtd2ViPC9jb2RlPiBwYWNrYWdlLiBJbiBBTUQgZW52aXJvbm1lbnRzIChsaWtlIFJlcXVpcmVKUyksIGl0IGNhbiBiZSBgcmVxdWlyZWBkIGxpa2Ugb3RoZXIgbW9kdWxlcy5cbiAqIEBleGFtcGxlXG4gKiA8Y2FwdGlvbj5Db21tb25KUzwvY2FwdGlvbj5cbiAqIHZhciBicmFpbnRyZWUgPSByZXF1aXJlKCdicmFpbnRyZWUtd2ViJyk7XG4gKlxuICogYnJhaW50cmVlLmNsaWVudC5jcmVhdGUoLi4uKTtcbiAqIEBleGFtcGxlXG4gKiA8Y2FwdGlvbj5JbiB0aGUgYnJvd3NlcjwvY2FwdGlvbj5cbiAqIDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly9qcy5icmFpbnRyZWVnYXRld2F5LmNvbS93ZWIve0Bwa2cgdmVyc2lvbn0vanMvY2xpZW50Lm1pbi5qc1wiPjwvc2NyaXB0PlxuICogPHNjcmlwdD5cbiAqICAgd2luZG93LmJyYWludHJlZS5jbGllbnQuY3JlYXRlKC4uLik7XG4gKiA8L3NjcmlwdD5cbiAqIEBleGFtcGxlXG4gKiA8Y2FwdGlvbj5BTUQ8L2NhcHRpb24+XG4gKiAvLyBtYWluLmpzXG4gKiByZXF1aXJlLmNvbmZpZyh7XG4gKiAgIHBhdGhzOiB7XG4gKiAgICAgYnJhaW50cmVlQ2xpZW50OiAnaHR0cHM6Ly9qcy5icmFpbnRyZWVnYXRld2F5LmNvbS93ZWIve0Bwa2cgdmVyc2lvbn0vanMvY2xpZW50Lm1pbidcbiAqICAgfVxuICogfSk7XG4gKlxuICogcmVxdWlyZShbJ2JyYWludHJlZUNsaWVudCddLCBmdW5jdGlvbiAoYnJhaW50cmVlQ2xpZW50KSB7XG4gKiAgIGJyYWludHJlZUNsaWVudC5jcmVhdGUoLi4uKTtcbiAqIH0pO1xuICovXG5cbi8qKlxuICogQGdsb2JhbFxuICogQGNhbGxiYWNrIGNhbGxiYWNrXG4gKiBAcGFyYW0gez9CcmFpbnRyZWVFcnJvcn0gW2Vycl0gYG51bGxgIG9yIGB1bmRlZmluZWRgIGlmIHRoZXJlIHdhcyBubyBlcnJvci5cbiAqIEBwYXJhbSB7P2FueX0gW2RhdGFdIFRoZSBzdWNjZXNzZnVsIHJlc3VsdCBvZiB0aGUgYXN5bmNocm9ub3VzIGZ1bmN0aW9uIGNhbGwgKGlmIGRhdGEgZXhpc3RzKS5cbiAqIEBkZXNjcmlwdGlvbiBUaGUgTm9kZS5qcy1zdHlsZSBjYWxsYmFjayBwYXR0ZXJuIHVzZWQgdGhyb3VnaG91dCB0aGUgU0RLLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblxudmFyIGFtZXJpY2FuRXhwcmVzcyA9IF9kZXJlcV8oXCIuL2FtZXJpY2FuLWV4cHJlc3NcIik7XG52YXIgYXBwbGVQYXkgPSBfZGVyZXFfKFwiLi9hcHBsZS1wYXlcIik7XG52YXIgY2xpZW50ID0gX2RlcmVxXyhcIi4vY2xpZW50XCIpO1xudmFyIGRhdGFDb2xsZWN0b3IgPSBfZGVyZXFfKFwiLi9kYXRhLWNvbGxlY3RvclwiKTtcbnZhciBob3N0ZWRGaWVsZHMgPSBfZGVyZXFfKFwiLi9ob3N0ZWQtZmllbGRzXCIpO1xudmFyIGxvY2FsUGF5bWVudCA9IF9kZXJlcV8oXCIuL2xvY2FsLXBheW1lbnRcIik7XG52YXIgbWFzdGVycGFzcyA9IF9kZXJlcV8oXCIuL21hc3RlcnBhc3NcIik7XG52YXIgcGF5bWVudFJlcXVlc3QgPSBfZGVyZXFfKFwiLi9wYXltZW50LXJlcXVlc3RcIik7XG52YXIgcGF5cGFsID0gX2RlcmVxXyhcIi4vcGF5cGFsXCIpO1xudmFyIHBheXBhbENoZWNrb3V0ID0gX2RlcmVxXyhcIi4vcGF5cGFsLWNoZWNrb3V0XCIpO1xudmFyIGdvb2dsZVBheW1lbnQgPSBfZGVyZXFfKFwiLi9nb29nbGUtcGF5bWVudFwiKTtcbnZhciBzZXBhID0gX2RlcmVxXyhcIi4vc2VwYVwiKTtcbnZhciB0aHJlZURTZWN1cmUgPSBfZGVyZXFfKFwiLi90aHJlZS1kLXNlY3VyZVwiKTtcbnZhciB1bmlvbnBheSA9IF9kZXJlcV8oXCIuL3VuaW9ucGF5XCIpO1xudmFyIHVzQmFua0FjY291bnQgPSBfZGVyZXFfKFwiLi91cy1iYW5rLWFjY291bnRcIik7XG52YXIgdmF1bHRNYW5hZ2VyID0gX2RlcmVxXyhcIi4vdmF1bHQtbWFuYWdlclwiKTtcbnZhciB2ZW5tbyA9IF9kZXJlcV8oXCIuL3Zlbm1vXCIpO1xudmFyIHZpc2FDaGVja291dCA9IF9kZXJlcV8oXCIuL3Zpc2EtY2hlY2tvdXRcIik7XG52YXIgcHJlZmVycmVkUGF5bWVudE1ldGhvZHMgPSBfZGVyZXFfKFwiLi9wcmVmZXJyZWQtcGF5bWVudC1tZXRob2RzXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKiBAdHlwZSB7bW9kdWxlOmJyYWludHJlZS13ZWIvYW1lcmljYW4tZXhwcmVzc30gKi9cbiAgYW1lcmljYW5FeHByZXNzOiBhbWVyaWNhbkV4cHJlc3MsXG4gIC8qKiBAdHlwZSB7bW9kdWxlOmJyYWludHJlZS13ZWIvYXBwbGUtcGF5fSAqL1xuICBhcHBsZVBheTogYXBwbGVQYXksXG4gIC8qKiBAdHlwZSB7bW9kdWxlOmJyYWludHJlZS13ZWIvY2xpZW50fSAqL1xuICBjbGllbnQ6IGNsaWVudCxcbiAgLyoqIEB0eXBlIHttb2R1bGU6YnJhaW50cmVlLXdlYi9kYXRhLWNvbGxlY3Rvcn0gKi9cbiAgZGF0YUNvbGxlY3RvcjogZGF0YUNvbGxlY3RvcixcbiAgLyoqIEB0eXBlIHttb2R1bGU6YnJhaW50cmVlLXdlYi9ob3N0ZWQtZmllbGRzfSAqL1xuICBob3N0ZWRGaWVsZHM6IGhvc3RlZEZpZWxkcyxcbiAgLyoqIEB0eXBlIHttb2R1bGU6YnJhaW50cmVlLXdlYi9sb2NhbC1wYXltZW50fSAqL1xuICBsb2NhbFBheW1lbnQ6IGxvY2FsUGF5bWVudCxcbiAgLyoqIEB0eXBlIHttb2R1bGU6YnJhaW50cmVlLXdlYi9tYXN0ZXJwYXNzfSAqL1xuICBtYXN0ZXJwYXNzOiBtYXN0ZXJwYXNzLFxuICAvKiogQHR5cGUge21vZHVsZTpicmFpbnRyZWUtd2ViL2dvb2dsZS1wYXltZW50fSAqL1xuICBnb29nbGVQYXltZW50OiBnb29nbGVQYXltZW50LFxuICAvKiogQHR5cGUge21vZHVsZTpicmFpbnRyZWUtd2ViL3BheW1lbnQtcmVxdWVzdH0gKi9cbiAgcGF5bWVudFJlcXVlc3Q6IHBheW1lbnRSZXF1ZXN0LFxuICAvKiogQHR5cGUge21vZHVsZTpicmFpbnRyZWUtd2ViL3BheXBhbH0gKi9cbiAgcGF5cGFsOiBwYXlwYWwsXG4gIC8qKiBAdHlwZSB7bW9kdWxlOmJyYWludHJlZS13ZWIvcGF5cGFsLWNoZWNrb3V0fSAqL1xuICBwYXlwYWxDaGVja291dDogcGF5cGFsQ2hlY2tvdXQsXG4gIC8qKiBAdHlwZSB7bW9kdWxlOmJyYWludHJlZS13ZWIvdGhyZWUtZC1zZWN1cmV9ICovXG4gIHRocmVlRFNlY3VyZTogdGhyZWVEU2VjdXJlLFxuICAvKiogQHR5cGUge21vZHVsZTpicmFpbnRyZWUtd2ViL3VuaW9ucGF5fSAqL1xuICB1bmlvbnBheTogdW5pb25wYXksXG4gIC8qKiBAdHlwZSB7bW9kdWxlOmJyYWludHJlZS13ZWIvdXMtYmFuay1hY2NvdW50fSAqL1xuICB1c0JhbmtBY2NvdW50OiB1c0JhbmtBY2NvdW50LFxuICAvKiogQHR5cGUge21vZHVsZTpicmFpbnRyZWUtd2ViL3ZhdWx0LW1hbmFnZXJ9ICovXG4gIHZhdWx0TWFuYWdlcjogdmF1bHRNYW5hZ2VyLFxuICAvKiogQHR5cGUge21vZHVsZTpicmFpbnRyZWUtd2ViL3Zlbm1vfSAqL1xuICB2ZW5tbzogdmVubW8sXG4gIC8qKiBAdHlwZSB7bW9kdWxlOmJyYWludHJlZS13ZWIvdmlzYS1jaGVja291dH0gKi9cbiAgdmlzYUNoZWNrb3V0OiB2aXNhQ2hlY2tvdXQsXG4gIC8qKiBAdHlwZSB7bW9kdWxlOmJyYWludHJlZS13ZWIvc2VwYX0gKi9cbiAgc2VwYTogc2VwYSxcbiAgLyoqIEB0eXBlIHttb2R1bGU6YnJhaW50cmVlLXdlYi9wcmVmZXJyZWQtcGF5bWVudC1tZXRob2RzfSAqL1xuICBwcmVmZXJyZWRQYXltZW50TWV0aG9kczogcHJlZmVycmVkUGF5bWVudE1ldGhvZHMsXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgU0RLLCBpLmUuIGB7QHBrZyB2ZXJzaW9ufWAuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBWRVJTSU9OOiBWRVJTSU9OLFxufTtcblxufSx7XCIuL2FtZXJpY2FuLWV4cHJlc3NcIjo3NCxcIi4vYXBwbGUtcGF5XCI6NzcsXCIuL2NsaWVudFwiOjgyLFwiLi9kYXRhLWNvbGxlY3RvclwiOjk4LFwiLi9nb29nbGUtcGF5bWVudFwiOjEwMyxcIi4vaG9zdGVkLWZpZWxkc1wiOjExMCxcIi4vbG9jYWwtcGF5bWVudFwiOjE2NCxcIi4vbWFzdGVycGFzc1wiOjE2NyxcIi4vcGF5bWVudC1yZXF1ZXN0XCI6MTcyLFwiLi9wYXlwYWxcIjoxNzksXCIuL3BheXBhbC1jaGVja291dFwiOjE3NixcIi4vcHJlZmVycmVkLXBheW1lbnQtbWV0aG9kc1wiOjE4MixcIi4vc2VwYVwiOjE4NixcIi4vdGhyZWUtZC1zZWN1cmVcIjoxOTgsXCIuL3VuaW9ucGF5XCI6MjAyLFwiLi91cy1iYW5rLWFjY291bnRcIjoyMDgsXCIuL3ZhdWx0LW1hbmFnZXJcIjoyMTEsXCIuL3Zlbm1vXCI6MjE2LFwiLi92aXNhLWNoZWNrb3V0XCI6MjI2fV0sMTE4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgY3JlYXRlQXV0aG9yaXphdGlvbkRhdGEgPSBfZGVyZXFfKFwiLi9jcmVhdGUtYXV0aG9yaXphdGlvbi1kYXRhXCIpO1xudmFyIGpzb25DbG9uZSA9IF9kZXJlcV8oXCIuL2pzb24tY2xvbmVcIik7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXyhcIi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBhZGRNZXRhZGF0YShjb25maWd1cmF0aW9uLCBkYXRhKSB7XG4gIHZhciBrZXk7XG4gIHZhciBhdHRycyA9IGRhdGEgPyBqc29uQ2xvbmUoZGF0YSkgOiB7fTtcbiAgdmFyIGF1dGhBdHRycyA9IGNyZWF0ZUF1dGhvcml6YXRpb25EYXRhKGNvbmZpZ3VyYXRpb24uYXV0aG9yaXphdGlvbikuYXR0cnM7XG4gIHZhciBfbWV0YSA9IGpzb25DbG9uZShjb25maWd1cmF0aW9uLmFuYWx5dGljc01ldGFkYXRhKTtcblxuICBhdHRycy5icmFpbnRyZWVMaWJyYXJ5VmVyc2lvbiA9IGNvbnN0YW50cy5CUkFJTlRSRUVfTElCUkFSWV9WRVJTSU9OO1xuXG4gIGZvciAoa2V5IGluIGF0dHJzLl9tZXRhKSB7XG4gICAgaWYgKGF0dHJzLl9tZXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIF9tZXRhW2tleV0gPSBhdHRycy5fbWV0YVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIGF0dHJzLl9tZXRhID0gX21ldGE7XG5cbiAgaWYgKGF1dGhBdHRycy50b2tlbml6YXRpb25LZXkpIHtcbiAgICBhdHRycy50b2tlbml6YXRpb25LZXkgPSBhdXRoQXR0cnMudG9rZW5pemF0aW9uS2V5O1xuICB9IGVsc2Uge1xuICAgIGF0dHJzLmF1dGhvcml6YXRpb25GaW5nZXJwcmludCA9IGF1dGhBdHRycy5hdXRob3JpemF0aW9uRmluZ2VycHJpbnQ7XG4gIH1cblxuICByZXR1cm4gYXR0cnM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRkTWV0YWRhdGE7XG5cbn0se1wiLi9jb25zdGFudHNcIjoxMjYsXCIuL2NyZWF0ZS1hdXRob3JpemF0aW9uLWRhdGFcIjoxMzAsXCIuL2pzb24tY2xvbmVcIjoxNTR9XSwxMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKFwiLi9jb25zdGFudHNcIik7XG52YXIgYWRkTWV0YWRhdGEgPSBfZGVyZXFfKFwiLi9hZGQtbWV0YWRhdGFcIik7XG5cbmZ1bmN0aW9uIHNlbmRBbmFseXRpY3NFdmVudChjbGllbnRJbnN0YW5jZU9yUHJvbWlzZSwga2luZCwgY2FsbGJhY2spIHtcbiAgdmFyIHRpbWVzdGFtcCA9IERhdGUubm93KCk7IC8vIG1pbGxpc2Vjb25kc1xuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2xpZW50SW5zdGFuY2VPclByb21pc2UpXG4gICAgLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgdmFyIHRpbWVzdGFtcEluUHJvbWlzZSA9IERhdGUubm93KCk7XG4gICAgICB2YXIgY29uZmlndXJhdGlvbiA9IGNsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG4gICAgICB2YXIgcmVxdWVzdCA9IGNsaWVudC5fcmVxdWVzdDtcbiAgICAgIHZhciB1cmwgPSBjb25maWd1cmF0aW9uLmdhdGV3YXlDb25maWd1cmF0aW9uLmFuYWx5dGljcy51cmw7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgYW5hbHl0aWNzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAga2luZDogY29uc3RhbnRzLkFOQUxZVElDU19QUkVGSVggKyBraW5kLFxuICAgICAgICAgICAgaXNBc3luYzpcbiAgICAgICAgICAgICAgTWF0aC5mbG9vcih0aW1lc3RhbXBJblByb21pc2UgLyAxMDAwKSAhPT1cbiAgICAgICAgICAgICAgTWF0aC5mbG9vcih0aW1lc3RhbXAgLyAxMDAwKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0KFxuICAgICAgICB7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICAgICAgICBkYXRhOiBhZGRNZXRhZGF0YShjb25maWd1cmF0aW9uLCBkYXRhKSxcbiAgICAgICAgICB0aW1lb3V0OiBjb25zdGFudHMuQU5BTFlUSUNTX1JFUVVFU1RfVElNRU9VVF9NUyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgICk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgLy8gZm9yIGFsbCBub24tdGVzdCBjYXNlcywgd2UgZG9uJ3QgcHJvdmlkZSBhIGNhbGxiYWNrLFxuICAgICAgLy8gc28gdGhpcyBlcnJvciB3aWxsIGFsd2F5cyBiZSBzd2FsbG93ZWQuIEluIHRoaXMgY2FzZSxcbiAgICAgIC8vIHRoYXQncyBmaW5lLCBpdCBzaG91bGQgb25seSBlcnJvciB3aGVuIHRoZSBkZWZlcnJlZFxuICAgICAgLy8gY2xpZW50IGZhaWxzIHRvIHNldCB1cCwgaW4gd2hpY2ggY2FzZSB3ZSBkb24ndCB3YW50XG4gICAgICAvLyB0aGF0IGVycm9yIHRvIHJlcG9ydCBvdmVyIGFuZCBvdmVyIGFnYWluIHZpYSB0aGVzZVxuICAgICAgLy8gZGVmZXJyZWQgYW5hbHl0aWNzIGV2ZW50c1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZW5kRXZlbnQ6IHNlbmRBbmFseXRpY3NFdmVudCxcbn07XG5cbn0se1wiLi9hZGQtbWV0YWRhdGFcIjoxMTgsXCIuL2NvbnN0YW50c1wiOjEyNn1dLDEyMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGxvYWRTY3JpcHQgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9hc3NldC1sb2FkZXIvbG9hZC1zY3JpcHRcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBsb2FkU2NyaXB0OiBsb2FkU2NyaXB0LFxufTtcblxufSx7XCJAYnJhaW50cmVlL2Fzc2V0LWxvYWRlci9sb2FkLXNjcmlwdFwiOjN9XSwxMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhc3NpZ25Ob3JtYWxpemVkID1cbiAgdHlwZW9mIE9iamVjdC5hc3NpZ24gPT09IFwiZnVuY3Rpb25cIiA/IE9iamVjdC5hc3NpZ24gOiBhc3NpZ25Qb2x5ZmlsbDtcblxuZnVuY3Rpb24gYXNzaWduUG9seWZpbGwoZGVzdGluYXRpb24pIHtcbiAgdmFyIGksIHNvdXJjZSwga2V5O1xuXG4gIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2lnbjogYXNzaWduTm9ybWFsaXplZCxcbiAgX2Fzc2lnbjogYXNzaWduUG9seWZpbGwsXG59O1xuXG59LHt9XSwxMjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBzaGFyZWRFcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xuXG5mdW5jdGlvbiBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvbihvcHRpb25zKSB7XG4gIHZhciBjbGllbnQsIGF1dGhvcml6YXRpb24sIG5hbWU7XG5cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgdHlwZTogc2hhcmVkRXJyb3JzLklOVkFMSURfVVNFX09GX0lOVEVSTkFMX0ZVTkNUSU9OLnR5cGUsXG4gICAgICAgIGNvZGU6IHNoYXJlZEVycm9ycy5JTlZBTElEX1VTRV9PRl9JTlRFUk5BTF9GVU5DVElPTi5jb2RlLFxuICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgIFwiT3B0aW9ucyBtdXN0IGJlIHBhc3NlZCB0byBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvbiBmdW5jdGlvbi5cIixcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG5hbWUgPSBvcHRpb25zLm5hbWU7XG4gIGNsaWVudCA9IG9wdGlvbnMuY2xpZW50O1xuICBhdXRob3JpemF0aW9uID0gb3B0aW9ucy5hdXRob3JpemF0aW9uO1xuXG4gIGlmICghY2xpZW50ICYmICFhdXRob3JpemF0aW9uKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgdHlwZTogc2hhcmVkRXJyb3JzLklOU1RBTlRJQVRJT05fT1BUSU9OX1JFUVVJUkVELnR5cGUsXG4gICAgICAgIGNvZGU6IHNoYXJlZEVycm9ycy5JTlNUQU5USUFUSU9OX09QVElPTl9SRVFVSVJFRC5jb2RlLFxuICAgICAgICAvLyBORVhUX01BSk9SX1ZFUlNJT04gaW4gbWFqb3IgdmVyc2lvbiwgd2UgZXhwb3NlIHBhc3NpbmcgaW4gYXV0aG9yaXphdGlvbiBmb3IgYWxsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gaW5zdGVhZCBvZiBwYXNzaW5nIGluIGEgY2xpZW50IGluc3RhbmNlLiBMZWF2ZSB0aGlzIGEgc2lsZW50IGZlYXR1cmUgZm9yIG5vdy5cbiAgICAgICAgbWVzc2FnZTogXCJvcHRpb25zLmNsaWVudCBpcyByZXF1aXJlZCB3aGVuIGluc3RhbnRpYXRpbmcgXCIgKyBuYW1lICsgXCIuXCIsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAoIWF1dGhvcml6YXRpb24gJiYgY2xpZW50LmdldFZlcnNpb24oKSAhPT0gVkVSU0lPTikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IHNoYXJlZEVycm9ycy5JTkNPTVBBVElCTEVfVkVSU0lPTlMudHlwZSxcbiAgICAgICAgY29kZTogc2hhcmVkRXJyb3JzLklOQ09NUEFUSUJMRV9WRVJTSU9OUy5jb2RlLFxuICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgIFwiQ2xpZW50ICh2ZXJzaW9uIFwiICtcbiAgICAgICAgICBjbGllbnQuZ2V0VmVyc2lvbigpICtcbiAgICAgICAgICBcIikgYW5kIFwiICtcbiAgICAgICAgICBuYW1lICtcbiAgICAgICAgICBcIiAodmVyc2lvbiBcIiArXG4gICAgICAgICAgVkVSU0lPTiArXG4gICAgICAgICAgXCIpIGNvbXBvbmVudHMgbXVzdCBiZSBmcm9tIHRoZSBzYW1lIFNESyB2ZXJzaW9uLlwiLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmVyaWZ5OiBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvbixcbn07XG5cbn0se1wiLi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuL2Vycm9yc1wiOjEzNX1dLDEyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIG9uY2UgPSBfZGVyZXFfKFwiLi9vbmNlXCIpO1xuXG5mdW5jdGlvbiBjYWxsKGZuLCBjYWxsYmFjaykge1xuICB2YXIgaXNTeW5jID0gZm4ubGVuZ3RoID09PSAwO1xuXG4gIGlmIChpc1N5bmMpIHtcbiAgICBmbigpO1xuICAgIGNhbGxiYWNrKG51bGwpO1xuICB9IGVsc2Uge1xuICAgIGZuKGNhbGxiYWNrKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmdW5jdGlvbnMsIGNiKSB7XG4gIHZhciBpO1xuICB2YXIgbGVuZ3RoID0gZnVuY3Rpb25zLmxlbmd0aDtcbiAgdmFyIHJlbWFpbmluZyA9IGxlbmd0aDtcbiAgdmFyIGNhbGxiYWNrID0gb25jZShjYik7XG5cbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIGNhbGxiYWNrKG51bGwpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluaXNoKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVycik7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZW1haW5pbmcgLT0gMTtcbiAgICBpZiAocmVtYWluaW5nID09PSAwKSB7XG4gICAgICBjYWxsYmFjayhudWxsKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBjYWxsKGZ1bmN0aW9uc1tpXSwgZmluaXNoKTtcbiAgfVxufTtcblxufSx7XCIuL29uY2VcIjoxNTZ9XSwxMjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlbnVtZXJhdGUgPSBfZGVyZXFfKFwiLi9lbnVtZXJhdGVcIik7XG5cbi8qKlxuICogQGNsYXNzXG4gKiBAZ2xvYmFsXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDb25zdHJ1Y3Rpb24gb3B0aW9uc1xuICogQGNsYXNzZGVzYyBUaGlzIGNsYXNzIGlzIHVzZWQgdG8gcmVwb3J0IGVycm9yIGNvbmRpdGlvbnMsIGZyZXF1ZW50bHkgYXMgdGhlIGZpcnN0IHBhcmFtZXRlciB0byBjYWxsYmFja3MgdGhyb3VnaG91dCB0aGUgQnJhaW50cmVlIFNESy5cbiAqIEBkZXNjcmlwdGlvbiA8c3Ryb25nPllvdSBjYW5ub3QgdXNlIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIEludGVyYWN0IHdpdGggaW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgdGhyb3VnaCB7QGxpbmsgY2FsbGJhY2sgY2FsbGJhY2tzfS48L3N0cm9uZz5cbiAqL1xuZnVuY3Rpb24gQnJhaW50cmVlRXJyb3Iob3B0aW9ucykge1xuICBpZiAoIUJyYWludHJlZUVycm9yLnR5cGVzLmhhc093blByb3BlcnR5KG9wdGlvbnMudHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3Iob3B0aW9ucy50eXBlICsgXCIgaXMgbm90IGEgdmFsaWQgdHlwZS5cIik7XG4gIH1cblxuICBpZiAoIW9wdGlvbnMuY29kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIGNvZGUgcmVxdWlyZWQuXCIpO1xuICB9XG5cbiAgaWYgKCFvcHRpb25zLm1lc3NhZ2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBtZXNzYWdlIHJlcXVpcmVkLlwiKTtcbiAgfVxuXG4gIHRoaXMubmFtZSA9IFwiQnJhaW50cmVlRXJyb3JcIjtcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlc2NyaXB0aW9uIEEgY29kZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHNwZWNpZmljIGVycm9ycy5cbiAgICovXG4gIHRoaXMuY29kZSA9IG9wdGlvbnMuY29kZTtcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlc2NyaXB0aW9uIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yLlxuICAgKi9cbiAgdGhpcy5tZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7QnJhaW50cmVlRXJyb3IudHlwZXN9XG4gICAqIEBkZXNjcmlwdGlvbiBUaGUgdHlwZSBvZiBlcnJvci5cbiAgICovXG4gIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcblxuICAvKipcbiAgICogQHR5cGUge29iamVjdD19XG4gICAqIEBkZXNjcmlwdGlvbiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlcnJvciwgc3VjaCBhcyBhbiB1bmRlcmx5aW5nIG5ldHdvcmsgZXJyb3IgcmVzcG9uc2UuXG4gICAqL1xuICB0aGlzLmRldGFpbHMgPSBvcHRpb25zLmRldGFpbHM7XG59XG5cbkJyYWludHJlZUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbkJyYWludHJlZUVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJyYWludHJlZUVycm9yO1xuXG4vKipcbiAqIEVudW0gZm9yIHtAbGluayBCcmFpbnRyZWVFcnJvcn0gdHlwZXMuXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci50eXBlc1xuICogQGVudW1cbiAqIEByZWFkb25seVxuICogQG1lbWJlcm9mIEJyYWludHJlZUVycm9yXG4gKiBAcHJvcGVydHkge3N0cmluZ30gQ1VTVE9NRVIgQW4gZXJyb3IgY2F1c2VkIGJ5IHRoZSBjdXN0b21lci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBNRVJDSEFOVCBBbiBlcnJvciB0aGF0IGlzIGFjdGlvbmFibGUgYnkgdGhlIG1lcmNoYW50LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IE5FVFdPUksgQW4gZXJyb3IgZHVlIHRvIGEgbmV0d29yayBwcm9ibGVtLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IElOVEVSTkFMIEFuIGVycm9yIGNhdXNlZCBieSBCcmFpbnRyZWUgY29kZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBVTktOT1dOIEFuIGVycm9yIHdoZXJlIHRoZSBvcmlnaW4gaXMgdW5rbm93bi5cbiAqL1xuQnJhaW50cmVlRXJyb3IudHlwZXMgPSBlbnVtZXJhdGUoW1xuICBcIkNVU1RPTUVSXCIsXG4gIFwiTUVSQ0hBTlRcIixcbiAgXCJORVRXT1JLXCIsXG4gIFwiSU5URVJOQUxcIixcbiAgXCJVTktOT1dOXCIsXG5dKTtcblxuQnJhaW50cmVlRXJyb3IuZmluZFJvb3RFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgaWYgKFxuICAgIGVyciBpbnN0YW5jZW9mIEJyYWludHJlZUVycm9yICYmXG4gICAgZXJyLmRldGFpbHMgJiZcbiAgICBlcnIuZGV0YWlscy5vcmlnaW5hbEVycm9yXG4gICkge1xuICAgIHJldHVybiBCcmFpbnRyZWVFcnJvci5maW5kUm9vdEVycm9yKGVyci5kZXRhaWxzLm9yaWdpbmFsRXJyb3IpO1xuICB9XG5cbiAgcmV0dXJuIGVycjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnJhaW50cmVlRXJyb3I7XG5cbn0se1wiLi9lbnVtZXJhdGVcIjoxMzR9XSwxMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9kZWNhbWVsaXplL2Jsb2IvOTU5ODBhYjZmYjQ0YzQwZWFjYTc3OTJiZGY5M2FmZjdjMjEwYzgwNS9pbmRleC5qc1xuZnVuY3Rpb24gdHJhbnNmb3JtS2V5KGtleSkge1xuICByZXR1cm4ga2V5XG4gICAgLnJlcGxhY2UoLyhbYS16XFxkXSkoW0EtWl0pL2csIFwiJDFfJDJcIilcbiAgICAucmVwbGFjZSgvKFtBLVpdKykoW0EtWl1bYS16XFxkXSspL2csIFwiJDFfJDJcIilcbiAgICAudG9Mb3dlckNhc2UoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAobmV3T2JqLCBrZXkpIHtcbiAgICB2YXIgdHJhbnNmb3JtZWRLZXkgPSB0cmFuc2Zvcm1LZXkoa2V5KTtcblxuICAgIG5ld09ialt0cmFuc2Zvcm1lZEtleV0gPSBvYmpba2V5XTtcblxuICAgIHJldHVybiBuZXdPYmo7XG4gIH0sIHt9KTtcbn07XG5cbn0se31dLDEyNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcbnZhciBQTEFURk9STSA9IFwid2ViXCI7XG5cbnZhciBDTElFTlRfQVBJX1VSTFMgPSB7XG4gIHByb2R1Y3Rpb246IFwiaHR0cHM6Ly9hcGkuYnJhaW50cmVlZ2F0ZXdheS5jb206NDQzXCIsXG4gIHNhbmRib3g6IFwiaHR0cHM6Ly9hcGkuc2FuZGJveC5icmFpbnRyZWVnYXRld2F5LmNvbTo0NDNcIixcbn07XG5cbnZhciBBU1NFVFNfVVJMUyA9IHtcbiAgcHJvZHVjdGlvbjogXCJodHRwczovL2Fzc2V0cy5icmFpbnRyZWVnYXRld2F5LmNvbVwiLFxuICBzYW5kYm94OiBcImh0dHBzOi8vYXNzZXRzLmJyYWludHJlZWdhdGV3YXkuY29tXCIsXG59O1xuXG52YXIgR1JBUEhRTF9VUkxTID0ge1xuICBwcm9kdWN0aW9uOiBcImh0dHBzOi8vcGF5bWVudHMuYnJhaW50cmVlLWFwaS5jb20vZ3JhcGhxbFwiLFxuICBzYW5kYm94OiBcImh0dHBzOi8vcGF5bWVudHMuc2FuZGJveC5icmFpbnRyZWUtYXBpLmNvbS9ncmFwaHFsXCIsXG59O1xuXG4vLyBlbmRSZW1vdmVJZihwcm9kdWN0aW9uKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQU5BTFlUSUNTX1BSRUZJWDogUExBVEZPUk0gKyBcIi5cIixcbiAgQU5BTFlUSUNTX1JFUVVFU1RfVElNRU9VVF9NUzogMjAwMCxcbiAgQVNTRVRTX1VSTFM6IEFTU0VUU19VUkxTLFxuICBDTElFTlRfQVBJX1VSTFM6IENMSUVOVF9BUElfVVJMUyxcbiAgRlJBVURORVRfU09VUkNFOiBcIkJSQUlOVFJFRV9TSUdOSU5cIixcbiAgRlJBVURORVRfRk5DTFM6IFwiZm5wYXJhbXMtZGVkZTdjYzUtMTVmZC00Yzc1LWE5ZjQtMzZjNDMwZWUzYTk5XCIsXG4gIEZSQVVETkVUX1VSTDogXCJodHRwczovL2MucGF5cGFsLmNvbS9kYS9yL2ZiLmpzXCIsXG4gIEJVU19DT05GSUdVUkFUSU9OX1JFUVVFU1RfRVZFTlQ6IFwiQlVTX0NPTkZJR1VSQVRJT05fUkVRVUVTVFwiLFxuICBHUkFQSFFMX1VSTFM6IEdSQVBIUUxfVVJMUyxcbiAgSU5URUdSQVRJT05fVElNRU9VVF9NUzogNjAwMDAsXG4gIFZFUlNJT046IFZFUlNJT04sXG4gIElOVEVHUkFUSU9OOiBcImN1c3RvbVwiLFxuICBTT1VSQ0U6IFwiY2xpZW50XCIsXG4gIFBMQVRGT1JNOiBQTEFURk9STSxcbiAgQlJBSU5UUkVFX0xJQlJBUllfVkVSU0lPTjogXCJicmFpbnRyZWUvXCIgKyBQTEFURk9STSArIFwiL1wiICsgVkVSU0lPTixcbn07XG5cbn0se31dLDEyNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4vYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIHNoYXJlZEVycm9ycyA9IF9kZXJlcV8oXCIuL2Vycm9yc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIG1ldGhvZE5hbWVzKSB7XG4gIG1ldGhvZE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICBpbnN0YW5jZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IHNoYXJlZEVycm9ycy5NRVRIT0RfQ0FMTEVEX0FGVEVSX1RFQVJET1dOLnR5cGUsXG4gICAgICAgIGNvZGU6IHNoYXJlZEVycm9ycy5NRVRIT0RfQ0FMTEVEX0FGVEVSX1RFQVJET1dOLmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IG1ldGhvZE5hbWUgKyBcIiBjYW5ub3QgYmUgY2FsbGVkIGFmdGVyIHRlYXJkb3duLlwiLFxuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG59O1xuXG59LHtcIi4vYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi9lcnJvcnNcIjoxMzV9XSwxMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuL2JyYWludHJlZS1lcnJvclwiKTtcblxuZnVuY3Rpb24gY29udmVydFRvQnJhaW50cmVlRXJyb3Iob3JpZ2luYWxFcnIsIGJ0RXJyb3JPYmplY3QpIHtcbiAgaWYgKG9yaWdpbmFsRXJyIGluc3RhbmNlb2YgQnJhaW50cmVlRXJyb3IpIHtcbiAgICByZXR1cm4gb3JpZ2luYWxFcnI7XG4gIH1cblxuICByZXR1cm4gbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICB0eXBlOiBidEVycm9yT2JqZWN0LnR5cGUsXG4gICAgY29kZTogYnRFcnJvck9iamVjdC5jb2RlLFxuICAgIG1lc3NhZ2U6IGJ0RXJyb3JPYmplY3QubWVzc2FnZSxcbiAgICBkZXRhaWxzOiB7XG4gICAgICBvcmlnaW5hbEVycm9yOiBvcmlnaW5hbEVycixcbiAgICB9LFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0VG9CcmFpbnRyZWVFcnJvcjtcblxufSx7XCIuL2JyYWludHJlZS1lcnJvclwiOjEyNH1dLDEyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLy8gZW5kUmVtb3ZlSWYocHJvZHVjdGlvbilcbnZhciBBU1NFVFNfVVJMUyA9IF9kZXJlcV8oXCIuL2NvbnN0YW50c1wiKS5BU1NFVFNfVVJMUztcblxuZnVuY3Rpb24gY3JlYXRlQXNzZXRzVXJsKGF1dGhvcml6YXRpb24pIHtcbiAgLy8gZW5kUmVtb3ZlSWYocHJvZHVjdGlvbilcblxuICByZXR1cm4gQVNTRVRTX1VSTFMucHJvZHVjdGlvbjtcbn1cbi8qIGVzbGludC1lbmFibGUgKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogY3JlYXRlQXNzZXRzVXJsLFxufTtcblxufSx7XCIuL2NvbnN0YW50c1wiOjEyNn1dLDEzMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGF0b2IgPSBfZGVyZXFfKFwiLi4vbGliL3ZlbmRvci9wb2x5ZmlsbFwiKS5hdG9iO1xudmFyIENMSUVOVF9BUElfVVJMUyA9IF9kZXJlcV8oXCIuLi9saWIvY29uc3RhbnRzXCIpLkNMSUVOVF9BUElfVVJMUztcblxuZnVuY3Rpb24gX2lzVG9rZW5pemF0aW9uS2V5KHN0cikge1xuICByZXR1cm4gL15bYS16QS1aMC05XStfW2EtekEtWjAtOV0rX1thLXpBLVowLTlfXSskLy50ZXN0KHN0cik7XG59XG5cbmZ1bmN0aW9uIF9wYXJzZVRva2VuaXphdGlvbktleSh0b2tlbml6YXRpb25LZXkpIHtcbiAgdmFyIHRva2VucyA9IHRva2VuaXphdGlvbktleS5zcGxpdChcIl9cIik7XG4gIHZhciBlbnZpcm9ubWVudCA9IHRva2Vuc1swXTtcbiAgdmFyIG1lcmNoYW50SWQgPSB0b2tlbnMuc2xpY2UoMikuam9pbihcIl9cIik7XG5cbiAgcmV0dXJuIHtcbiAgICBtZXJjaGFudElkOiBtZXJjaGFudElkLFxuICAgIGVudmlyb25tZW50OiBlbnZpcm9ubWVudCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXV0aG9yaXphdGlvbkRhdGEoYXV0aG9yaXphdGlvbikge1xuICB2YXIgcGFyc2VkQ2xpZW50VG9rZW4sIHBhcnNlZFRva2VuaXphdGlvbktleTtcbiAgdmFyIGRhdGEgPSB7XG4gICAgYXR0cnM6IHt9LFxuICAgIGNvbmZpZ1VybDogXCJcIixcbiAgfTtcblxuICBpZiAoX2lzVG9rZW5pemF0aW9uS2V5KGF1dGhvcml6YXRpb24pKSB7XG4gICAgcGFyc2VkVG9rZW5pemF0aW9uS2V5ID0gX3BhcnNlVG9rZW5pemF0aW9uS2V5KGF1dGhvcml6YXRpb24pO1xuICAgIGRhdGEuZW52aXJvbm1lbnQgPSBwYXJzZWRUb2tlbml6YXRpb25LZXkuZW52aXJvbm1lbnQ7XG4gICAgZGF0YS5hdHRycy50b2tlbml6YXRpb25LZXkgPSBhdXRob3JpemF0aW9uO1xuICAgIGRhdGEuY29uZmlnVXJsID1cbiAgICAgIENMSUVOVF9BUElfVVJMU1twYXJzZWRUb2tlbml6YXRpb25LZXkuZW52aXJvbm1lbnRdICtcbiAgICAgIFwiL21lcmNoYW50cy9cIiArXG4gICAgICBwYXJzZWRUb2tlbml6YXRpb25LZXkubWVyY2hhbnRJZCArXG4gICAgICBcIi9jbGllbnRfYXBpL3YxL2NvbmZpZ3VyYXRpb25cIjtcbiAgfSBlbHNlIHtcbiAgICBwYXJzZWRDbGllbnRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihhdXRob3JpemF0aW9uKSk7XG4gICAgZGF0YS5lbnZpcm9ubWVudCA9IHBhcnNlZENsaWVudFRva2VuLmVudmlyb25tZW50O1xuICAgIGRhdGEuYXR0cnMuYXV0aG9yaXphdGlvbkZpbmdlcnByaW50ID1cbiAgICAgIHBhcnNlZENsaWVudFRva2VuLmF1dGhvcml6YXRpb25GaW5nZXJwcmludDtcbiAgICBkYXRhLmNvbmZpZ1VybCA9IHBhcnNlZENsaWVudFRva2VuLmNvbmZpZ1VybDtcbiAgICBkYXRhLmdyYXBoUUwgPSBwYXJzZWRDbGllbnRUb2tlbi5ncmFwaFFMO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXV0aG9yaXphdGlvbkRhdGE7XG5cbn0se1wiLi4vbGliL2NvbnN0YW50c1wiOjEyNixcIi4uL2xpYi92ZW5kb3IvcG9seWZpbGxcIjoxNjF9XSwxMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBhc3NldHMgPSBfZGVyZXFfKFwiLi9hc3NldHNcIik7XG52YXIgc2hhcmVkRXJyb3JzID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpO1xuXG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xuXG5mdW5jdGlvbiBjcmVhdGVEZWZlcnJlZENsaWVudChvcHRpb25zKSB7XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgaWYgKG9wdGlvbnMuY2xpZW50KSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShvcHRpb25zLmNsaWVudCk7XG4gIH1cblxuICBpZiAoISh3aW5kb3cuYnJhaW50cmVlICYmIHdpbmRvdy5icmFpbnRyZWUuY2xpZW50KSkge1xuICAgIHByb21pc2UgPSBhc3NldHNcbiAgICAgIC5sb2FkU2NyaXB0KHtcbiAgICAgICAgc3JjOiBvcHRpb25zLmFzc2V0c1VybCArIFwiL3dlYi9cIiArIFZFUlNJT04gKyBcIi9qcy9jbGllbnQubWluLmpzXCIsXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgICB0eXBlOiBzaGFyZWRFcnJvcnMuQ0xJRU5UX1NDUklQVF9GQUlMRURfVE9fTE9BRC50eXBlLFxuICAgICAgICAgICAgY29kZTogc2hhcmVkRXJyb3JzLkNMSUVOVF9TQ1JJUFRfRkFJTEVEX1RPX0xPQUQuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHNoYXJlZEVycm9ycy5DTElFTlRfU0NSSVBUX0ZBSUxFRF9UT19MT0FELm1lc3NhZ2UsXG4gICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHdpbmRvdy5icmFpbnRyZWUuY2xpZW50LlZFUlNJT04gIT09IFZFUlNJT04pIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICB0eXBlOiBzaGFyZWRFcnJvcnMuSU5DT01QQVRJQkxFX1ZFUlNJT05TLnR5cGUsXG4gICAgICAgICAgY29kZTogc2hhcmVkRXJyb3JzLklOQ09NUEFUSUJMRV9WRVJTSU9OUy5jb2RlLFxuICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICBcIkNsaWVudCAodmVyc2lvbiBcIiArXG4gICAgICAgICAgICB3aW5kb3cuYnJhaW50cmVlLmNsaWVudC5WRVJTSU9OICtcbiAgICAgICAgICAgIFwiKSBhbmQgXCIgK1xuICAgICAgICAgICAgb3B0aW9ucy5uYW1lICtcbiAgICAgICAgICAgIFwiICh2ZXJzaW9uIFwiICtcbiAgICAgICAgICAgIFZFUlNJT04gK1xuICAgICAgICAgICAgXCIpIGNvbXBvbmVudHMgbXVzdCBiZSBmcm9tIHRoZSBzYW1lIFNESyB2ZXJzaW9uLlwiLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd2luZG93LmJyYWludHJlZS5jbGllbnQuY3JlYXRlKHtcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgIGRlYnVnOiBvcHRpb25zLmRlYnVnLFxuICAgIH0pO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogY3JlYXRlRGVmZXJyZWRDbGllbnQsXG59O1xuXG59LHtcIi4vYXNzZXRzXCI6MTIwLFwiLi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuL2Vycm9yc1wiOjEzNX1dLDEzMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBJRTkgZG9lc24ndCBzdXBwb3J0IHBhc3NpbmcgYXJndW1lbnRzIHRvIHNldFRpbWVvdXQgc28gd2UgaGF2ZSB0byBlbXVsYXRlIGl0LlxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9LCAxKTtcbiAgfTtcbn07XG5cbn0se31dLDEzMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGJhdGNoRXhlY3V0ZUZ1bmN0aW9ucyA9IF9kZXJlcV8oXCIuL2JhdGNoLWV4ZWN1dGUtZnVuY3Rpb25zXCIpO1xuXG5mdW5jdGlvbiBEZXN0cnVjdG9yKCkge1xuICB0aGlzLl90ZWFyZG93blJlZ2lzdHJ5ID0gW107XG5cbiAgdGhpcy5faXNUZWFyaW5nRG93biA9IGZhbHNlO1xufVxuXG5EZXN0cnVjdG9yLnByb3RvdHlwZS5yZWdpc3RlckZ1bmN0aW9uRm9yVGVhcmRvd24gPSBmdW5jdGlvbiAoZm4pIHtcbiAgaWYgKHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhpcy5fdGVhcmRvd25SZWdpc3RyeS5wdXNoKGZuKTtcbiAgfVxufTtcblxuRGVzdHJ1Y3Rvci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgaWYgKHRoaXMuX2lzVGVhcmluZ0Rvd24pIHtcbiAgICBjYWxsYmFjayhuZXcgRXJyb3IoXCJEZXN0cnVjdG9yIGlzIGFscmVhZHkgdGVhcmluZyBkb3duXCIpKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX2lzVGVhcmluZ0Rvd24gPSB0cnVlO1xuXG4gIGJhdGNoRXhlY3V0ZUZ1bmN0aW9ucyhcbiAgICB0aGlzLl90ZWFyZG93blJlZ2lzdHJ5LFxuICAgIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHRoaXMuX3RlYXJkb3duUmVnaXN0cnkgPSBbXTtcbiAgICAgIHRoaXMuX2lzVGVhcmluZ0Rvd24gPSBmYWxzZTtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERlc3RydWN0b3I7XG5cbn0se1wiLi9iYXRjaC1leGVjdXRlLWZ1bmN0aW9uc1wiOjEyM31dLDEzNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZW51bWVyYXRlKHZhbHVlcywgcHJlZml4KSB7XG4gIHByZWZpeCA9IHByZWZpeCA9PSBudWxsID8gXCJcIiA6IHByZWZpeDtcblxuICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoZW51bWVyYXRpb24sIHZhbHVlKSB7XG4gICAgZW51bWVyYXRpb25bdmFsdWVdID0gcHJlZml4ICsgdmFsdWU7XG5cbiAgICByZXR1cm4gZW51bWVyYXRpb247XG4gIH0sIHt9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbnVtZXJhdGU7XG5cbn0se31dLDEzNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5TaGFyZWQgSW50ZXJuYWwgRXJyb3IgQ29kZXNcbiAqIEBpZ25vcmVcbiAqIEBkZXNjcmlwdGlvbiBUaGVzZSBjb2RlcyBzaG91bGQgbmV2ZXIgYmUgZXhwZXJpZW5jZWQgYnkgdGhlIG1lcmNoYW50IGRpcmVjdGx5LlxuICogQHByb3BlcnR5IHtJTlRFUk5BTH0gSU5WQUxJRF9VU0VfT0ZfSU5URVJOQUxfRlVOQ1RJT04gT2NjdXJzIHdoZW4gdGhlIGNsaWVudCBpcyBjcmVhdGVkIHdpdGhvdXQgYSBnYXRld2F5IGNvbmZpZ3VyYXRpb24uIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5TaGFyZWQgRXJyb3JzIC0gQ29tcG9uZW50IENyZWF0aW9uIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiBjcmVhdGluZyBjb21wb25lbnRzLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gSU5TVEFOVElBVElPTl9PUFRJT05fUkVRVUlSRUQgT2NjdXJzIHdoZW4gYSBjb21wb25lbnQgaXMgY3JlYXRlZCB0aGF0IGlzIG1pc3NpbmcgYSByZXF1aXJlZCBvcHRpb24uXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBJTkNPTVBBVElCTEVfVkVSU0lPTlMgT2NjdXJzIHdoZW4gYSBjb21wb25lbnQgaXMgY3JlYXRlZCB3aXRoIGEgY2xpZW50IHdpdGggYSBkaWZmZXJlbnQgdmVyc2lvbiB0aGFuIHRoZSBjb21wb25lbnQuXG4gKiBAcHJvcGVydHkge05FVFdPUkt9IENMSUVOVF9TQ1JJUFRfRkFJTEVEX1RPX0xPQUQgT2NjdXJzIHdoZW4gYSBjb21wb25lbnQgYXR0ZW1wdHMgdG8gbG9hZCB0aGUgQnJhaW50cmVlIGNsaWVudCBzY3JpcHQsIGJ1dCB0aGUgcmVxdWVzdCBmYWlscy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlNoYXJlZCBFcnJvcnMgLSBDb21wb25lbnQgSW5zdGFuY2UgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIHVzaW5nIGluc3RhbmNlcyBvZiBjb21wb25lbnRzLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gTUVUSE9EX0NBTExFRF9BRlRFUl9URUFSRE9XTiBPY2N1cnMgd2hlbiBhIG1ldGhvZCBpcyBjYWxsZWQgb24gYSBjb21wb25lbnQgaW5zdGFuY2UgYWZ0ZXIgaXQgaGFzIGJlZW4gdG9ybiBkb3duLlxuICovXG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuL2JyYWludHJlZS1lcnJvclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIElOVkFMSURfVVNFX09GX0lOVEVSTkFMX0ZVTkNUSU9OOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuSU5URVJOQUwsXG4gICAgY29kZTogXCJJTlZBTElEX1VTRV9PRl9JTlRFUk5BTF9GVU5DVElPTlwiLFxuICB9LFxuICBJTlNUQU5USUFUSU9OX09QVElPTl9SRVFVSVJFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiSU5TVEFOVElBVElPTl9PUFRJT05fUkVRVUlSRURcIixcbiAgfSxcbiAgSU5DT01QQVRJQkxFX1ZFUlNJT05TOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJJTkNPTVBBVElCTEVfVkVSU0lPTlNcIixcbiAgfSxcbiAgQ0xJRU5UX1NDUklQVF9GQUlMRURfVE9fTE9BRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk5FVFdPUkssXG4gICAgY29kZTogXCJDTElFTlRfU0NSSVBUX0ZBSUxFRF9UT19MT0FEXCIsXG4gICAgbWVzc2FnZTogXCJCcmFpbnRyZWUgY2xpZW50IHNjcmlwdCBjb3VsZCBub3QgYmUgbG9hZGVkLlwiLFxuICB9LFxuICBNRVRIT0RfQ0FMTEVEX0FGVEVSX1RFQVJET1dOOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJNRVRIT0RfQ0FMTEVEX0FGVEVSX1RFQVJET1dOXCIsXG4gIH0sXG59O1xuXG59LHtcIi4vYnJhaW50cmVlLWVycm9yXCI6MTI0fV0sMTM2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbmRSb290Tm9kZShlbGVtZW50KSB7XG4gIHdoaWxlIChlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59O1xuXG59LHt9XSwxMzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFycmF5LCBrZXksIHZhbHVlKSB7XG4gIHZhciBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJheVtpXS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGFycmF5W2ldW2tleV0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gYXJyYXlbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG59LHt9XSwxMzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBQb3B1cCA9IF9kZXJlcV8oXCIuL3N0cmF0ZWdpZXMvcG9wdXBcIik7XG52YXIgUG9wdXBCcmlkZ2UgPSBfZGVyZXFfKFwiLi9zdHJhdGVnaWVzL3BvcHVwLWJyaWRnZVwiKTtcbnZhciBNb2RhbCA9IF9kZXJlcV8oXCIuL3N0cmF0ZWdpZXMvbW9kYWxcIik7XG52YXIgQnVzID0gX2RlcmVxXyhcImZyYW1lYnVzXCIpO1xudmFyIGV2ZW50cyA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvZXZlbnRzXCIpO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvZXJyb3JzXCIpO1xudmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvY29uc3RhbnRzXCIpO1xudmFyIHV1aWQgPSBfZGVyZXFfKFwiQGJyYWludHJlZS91dWlkXCIpO1xudmFyIGlGcmFtZXIgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9pZnJhbWVyXCIpO1xudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uLy4uL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBicm93c2VyRGV0ZWN0aW9uID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9icm93c2VyLWRldGVjdGlvblwiKTtcbnZhciBhc3NpZ24gPSBfZGVyZXFfKFwiLi8uLi8uLi9hc3NpZ25cIikuYXNzaWduO1xudmFyIEJVU19DT05GSUdVUkFUSU9OX1JFUVVFU1RfRVZFTlQgPVxuICBfZGVyZXFfKFwiLi4vLi4vY29uc3RhbnRzXCIpLkJVU19DT05GSUdVUkFUSU9OX1JFUVVFU1RfRVZFTlQ7XG5cbnZhciBSRVFVSVJFRF9DT05GSUdfS0VZUyA9IFtcIm5hbWVcIiwgXCJkaXNwYXRjaEZyYW1lVXJsXCIsIFwib3BlbkZyYW1lVXJsXCJdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gX3ZhbGlkYXRlRnJhbWVDb25maWd1cmF0aW9uKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsaWQgY29uZmlndXJhdGlvbiBpcyByZXF1aXJlZFwiKTtcbiAgfVxuXG4gIFJFUVVJUkVEX0NPTkZJR19LRVlTLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIHZhbGlkIGZyYW1lIFwiICsga2V5ICsgXCIgbXVzdCBiZSBwcm92aWRlZFwiKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmICghL15bXFx3X10rJC8udGVzdChvcHRpb25zLm5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSB2YWxpZCBmcmFtZSBuYW1lIG11c3QgYmUgcHJvdmlkZWRcIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gRnJhbWVTZXJ2aWNlKG9wdGlvbnMpIHtcbiAgX3ZhbGlkYXRlRnJhbWVDb25maWd1cmF0aW9uKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3NlcnZpY2VJZCA9IHV1aWQoKS5yZXBsYWNlKC8tL2csIFwiXCIpO1xuXG4gIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgbmFtZTogb3B0aW9ucy5uYW1lICsgXCJfXCIgKyB0aGlzLl9zZXJ2aWNlSWQsXG4gICAgZGlzcGF0Y2hGcmFtZVVybDogb3B0aW9ucy5kaXNwYXRjaEZyYW1lVXJsLFxuICAgIG9wZW5GcmFtZVVybDogb3B0aW9ucy5vcGVuRnJhbWVVcmwsXG4gICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCxcbiAgICB3aWR0aDogb3B0aW9ucy53aWR0aCxcbiAgICB0b3A6IG9wdGlvbnMudG9wLFxuICAgIGxlZnQ6IG9wdGlvbnMubGVmdCxcbiAgfTtcbiAgdGhpcy5zdGF0ZSA9IG9wdGlvbnMuc3RhdGUgfHwge307XG5cbiAgdGhpcy5fYnVzID0gbmV3IEJ1cyh7IGNoYW5uZWw6IHRoaXMuX3NlcnZpY2VJZCB9KTtcbiAgdGhpcy5fc2V0QnVzRXZlbnRzKCk7XG59XG5cbkZyYW1lU2VydmljZS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgZGlzcGF0Y2hGcmFtZVJlYWR5SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjaygpO1xuICAgIHRoaXMuX2J1cy5vZmYoZXZlbnRzLkRJU1BBVENIX0ZSQU1FX1JFQURZLCBkaXNwYXRjaEZyYW1lUmVhZHlIYW5kbGVyKTtcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMuX2J1cy5vbihldmVudHMuRElTUEFUQ0hfRlJBTUVfUkVBRFksIGRpc3BhdGNoRnJhbWVSZWFkeUhhbmRsZXIpO1xuICB0aGlzLl93cml0ZURpc3BhdGNoRnJhbWUoKTtcbn07XG5cbkZyYW1lU2VydmljZS5wcm90b3R5cGUuX3dyaXRlRGlzcGF0Y2hGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGZyYW1lTmFtZSA9IGNvbnN0YW50cy5ESVNQQVRDSF9GUkFNRV9OQU1FICsgXCJfXCIgKyB0aGlzLl9zZXJ2aWNlSWQ7XG4gIHZhciBmcmFtZVNyYyA9IHRoaXMuX29wdGlvbnMuZGlzcGF0Y2hGcmFtZVVybDtcblxuICB0aGlzLl9kaXNwYXRjaEZyYW1lID0gaUZyYW1lcih7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIG5hbWU6IGZyYW1lTmFtZSxcbiAgICB0aXRsZTogZnJhbWVOYW1lLFxuICAgIHNyYzogZnJhbWVTcmMsXG4gICAgY2xhc3M6IGNvbnN0YW50cy5ESVNQQVRDSF9GUkFNRV9DTEFTUyxcbiAgICBoZWlnaHQ6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgc3R5bGU6IHtcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICBsZWZ0OiBcIi05OTk5cHhcIixcbiAgICB9LFxuICB9KTtcblxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2Rpc3BhdGNoRnJhbWUpO1xufTtcblxuRnJhbWVTZXJ2aWNlLnByb3RvdHlwZS5fc2V0QnVzRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9idXMub24oXG4gICAgZXZlbnRzLkRJU1BBVENIX0ZSQU1FX1JFUE9SVCxcbiAgICBmdW5jdGlvbiAocmVzLCByZXBseSkge1xuICAgICAgaWYgKHRoaXMuX29uQ29tcGxldGVDYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9vbkNvbXBsZXRlQ2FsbGJhY2suY2FsbChudWxsLCByZXMuZXJyLCByZXMucGF5bG9hZCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9mcmFtZS5jbG9zZSgpO1xuXG4gICAgICB0aGlzLl9vbkNvbXBsZXRlQ2FsbGJhY2sgPSBudWxsO1xuXG4gICAgICBpZiAocmVwbHkpIHtcbiAgICAgICAgcmVwbHkoKTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcylcbiAgKTtcblxuICB0aGlzLl9idXMub24oXG4gICAgQlVTX0NPTkZJR1VSQVRJT05fUkVRVUVTVF9FVkVOVCxcbiAgICBmdW5jdGlvbiAocmVwbHkpIHtcbiAgICAgIHJlcGx5KHRoaXMuc3RhdGUpO1xuICAgIH0uYmluZCh0aGlzKVxuICApO1xufTtcblxuRnJhbWVTZXJ2aWNlLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB0aGlzLl9mcmFtZSA9IHRoaXMuX2dldEZyYW1lRm9yRW52aXJvbm1lbnQob3B0aW9ucyk7XG5cbiAgdGhpcy5fZnJhbWUuaW5pdGlhbGl6ZShjYWxsYmFjayk7XG5cbiAgaWYgKHRoaXMuX2ZyYW1lIGluc3RhbmNlb2YgUG9wdXBCcmlkZ2UpIHtcbiAgICAvLyBGcmFtZXNlcnZpY2UgbG9hZHMgYSBzcGlubmVyIHRoZW4gcmVkaXJlY3RzIHRvIHRoZSBmaW5hbCBkZXN0aW5hdGlvbiB1cmwuXG4gICAgLy8gRm9yIFBvcHVwYnJpZGdlIGl0IGRvZXNuJ3QgaGF2ZSB0aGUgc2FtZSBydWxlcyBhcm91bmQgcG9wdXBzIHNpbmNlIGl0J3MgZGVmZXJyZWQgdG8gdGhlIG1vYmlsZSBzaWRlXG4gICAgLy8gdGhlcmVmb3JlLCBza2lwcyB0aGUgcmVndWxhciBvcGVuIHBhdGggYW5kIGluc3RlYWQgdXNlcyBgI3JlZGlyZWN0YCB0byBoYW5kbGUgdGhpbmdzXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXNzaWduKHRoaXMuc3RhdGUsIG9wdGlvbnMuc3RhdGUpO1xuXG4gIHRoaXMuX29uQ29tcGxldGVDYWxsYmFjayA9IGNhbGxiYWNrO1xuICB0aGlzLl9mcmFtZS5vcGVuKCk7XG5cbiAgaWYgKHRoaXMuaXNGcmFtZUNsb3NlZCgpKSB7XG4gICAgdGhpcy5fY2xlYW51cEZyYW1lKCk7XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuRlJBTUVfU0VSVklDRV9GUkFNRV9PUEVOX0ZBSUxFRCkpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLl9wb2xsRm9yUG9wdXBDbG9zZSgpO1xufTtcblxuRnJhbWVTZXJ2aWNlLnByb3RvdHlwZS5yZWRpcmVjdCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgaWYgKHRoaXMuX2ZyYW1lICYmICF0aGlzLmlzRnJhbWVDbG9zZWQoKSkge1xuICAgIHRoaXMuX2ZyYW1lLnJlZGlyZWN0KHVybCk7XG4gIH1cbn07XG5cbkZyYW1lU2VydmljZS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5pc0ZyYW1lQ2xvc2VkKCkpIHtcbiAgICB0aGlzLl9mcmFtZS5jbG9zZSgpO1xuICB9XG59O1xuXG5GcmFtZVNlcnZpY2UucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuaXNGcmFtZUNsb3NlZCgpKSB7XG4gICAgdGhpcy5fZnJhbWUuZm9jdXMoKTtcbiAgfVxufTtcblxuRnJhbWVTZXJ2aWNlLnByb3RvdHlwZS5jcmVhdGVIYW5kbGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgcmV0dXJuIHtcbiAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG9wdGlvbnMuYmVmb3JlQ2xvc2UpIHtcbiAgICAgICAgb3B0aW9ucy5iZWZvcmVDbG9zZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfS5iaW5kKHRoaXMpLFxuICAgIGZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAob3B0aW9ucy5iZWZvcmVGb2N1cykge1xuICAgICAgICBvcHRpb25zLmJlZm9yZUZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICB9LmJpbmQodGhpcyksXG4gIH07XG59O1xuXG5GcmFtZVNlcnZpY2UucHJvdG90eXBlLmNyZWF0ZU5vb3BIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGNsb3NlOiBub29wLFxuICAgIGZvY3VzOiBub29wLFxuICB9O1xufTtcblxuRnJhbWVTZXJ2aWNlLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jbG9zZSgpO1xuICB0aGlzLl9kaXNwYXRjaEZyYW1lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5fZGlzcGF0Y2hGcmFtZSk7XG4gIHRoaXMuX2Rpc3BhdGNoRnJhbWUgPSBudWxsO1xuICB0aGlzLl9jbGVhbnVwRnJhbWUoKTtcbn07XG5cbkZyYW1lU2VydmljZS5wcm90b3R5cGUuaXNGcmFtZUNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2ZyYW1lID09IG51bGwgfHwgdGhpcy5fZnJhbWUuaXNDbG9zZWQoKTtcbn07XG5cbkZyYW1lU2VydmljZS5wcm90b3R5cGUuX2NsZWFudXBGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fZnJhbWUgPSBudWxsO1xuICBjbGVhckludGVydmFsKHRoaXMuX3BvcHVwSW50ZXJ2YWwpO1xuICB0aGlzLl9wb3B1cEludGVydmFsID0gbnVsbDtcbn07XG5cbkZyYW1lU2VydmljZS5wcm90b3R5cGUuX3BvbGxGb3JQb3B1cENsb3NlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9wb3B1cEludGVydmFsID0gc2V0SW50ZXJ2YWwoXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuaXNGcmFtZUNsb3NlZCgpKSB7XG4gICAgICAgIHRoaXMuX2NsZWFudXBGcmFtZSgpO1xuICAgICAgICBpZiAodGhpcy5fb25Db21wbGV0ZUNhbGxiYWNrKSB7XG4gICAgICAgICAgdGhpcy5fb25Db21wbGV0ZUNhbGxiYWNrKFxuICAgICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5GUkFNRV9TRVJWSUNFX0ZSQU1FX0NMT1NFRClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpLFxuICAgIGNvbnN0YW50cy5QT1BVUF9QT0xMX0lOVEVSVkFMXG4gICk7XG5cbiAgcmV0dXJuIHRoaXMuX3BvcHVwSW50ZXJ2YWw7XG59O1xuXG5GcmFtZVNlcnZpY2UucHJvdG90eXBlLl9nZXRGcmFtZUZvckVudmlyb25tZW50ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHVzZVBvcHVwID0gYnJvd3NlckRldGVjdGlvbi5zdXBwb3J0c1BvcHVwcygpO1xuICB2YXIgcG9wdXBCcmlkZ2VFeGlzdHMgPSBCb29sZWFuKHdpbmRvdy5wb3B1cEJyaWRnZSk7XG5cbiAgdmFyIGluaXRPcHRpb25zID0gYXNzaWduKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcblxuICBpZiAocG9wdXBCcmlkZ2VFeGlzdHMpIHtcbiAgICByZXR1cm4gbmV3IFBvcHVwQnJpZGdlKGluaXRPcHRpb25zKTtcbiAgfSBlbHNlIGlmICh1c2VQb3B1cCkge1xuICAgIHJldHVybiBuZXcgUG9wdXAoaW5pdE9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBNb2RhbChpbml0T3B0aW9ucyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZyYW1lU2VydmljZTtcblxufSx7XCIuLi8uLi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuLi8uLi9jb25zdGFudHNcIjoxMjYsXCIuLi9zaGFyZWQvYnJvd3Nlci1kZXRlY3Rpb25cIjoxNDUsXCIuLi9zaGFyZWQvY29uc3RhbnRzXCI6MTQ2LFwiLi4vc2hhcmVkL2Vycm9yc1wiOjE0NyxcIi4uL3NoYXJlZC9ldmVudHNcIjoxNDgsXCIuLy4uLy4uL2Fzc2lnblwiOjEyMSxcIi4vc3RyYXRlZ2llcy9tb2RhbFwiOjE0MCxcIi4vc3RyYXRlZ2llcy9wb3B1cFwiOjE0MyxcIi4vc3RyYXRlZ2llcy9wb3B1cC1icmlkZ2VcIjoxNDEsXCJAYnJhaW50cmVlL2lmcmFtZXJcIjozNSxcIkBicmFpbnRyZWUvdXVpZFwiOjM5LFwiZnJhbWVidXNcIjo1Mn1dLDEzOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEZyYW1lU2VydmljZSA9IF9kZXJlcV8oXCIuL2ZyYW1lLXNlcnZpY2VcIik7XG5cbi8qKlxuICogQGlnbm9yZVxuICogQGZ1bmN0aW9uIGNyZWF0ZVxuICogSW5pdGlhbGl6aW5nIEZyYW1lU2VydmljZSBzaG91bGQgYmUgZG9uZSBhdCB0aGUgcG9pbnQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQsIHNvIGl0IGlzIHJlYWR5IHdoZW5ldmVyIGEgY29tcG9uZW50IG5lZWRzIHRvIG9wZW4gYSBwb3B1cCB3aW5kb3cuXG4gKiBCcm93c2VycyBoYXZlIHZhcnlpbmcgcnVsZXMgYXJvdW5kIHdoYXQgY29uc3RpdHV0ZXMgYW5kIGFzeW5jIGFjdGlvbiB3b3J0aCBibG9ja2luZyBhIHBvcHVwIGZvciwgYnV0IHRoZSBsaWtlcyBvZiBTYWZhcmlcbiAqIHdpbGwgYmxvY2sgdGhlIHBvcHVwIGlmIGBmcmFtZVNlcnZpY2UjY3JlYXRlYCBpcyBpbnZva2VkIGR1cmluZyBhbnkgYXN5bmNocm9ub3VzIHByb2Nlc3MgKHN1Y2ggYXMgYW4gQVBJIHJlcXVlc3QgdG8gdG9rZW5pemUgcGF5bWVudCBkZXRhaWxzKS5cbiAqXG4gKiBUaGUgcHJvY2VzcyBvZiBzZXR0aW5nIHVwIHRoZSBkaXNwYXRjaCBmcmFtZSBhbmQgc3Vic2VxdWVudCBmcmFtZWJ1cyBjb21tdW5pY2F0aW9ucyB2aWEgZXZlbnQgbGlzdGVuZXJzIGFyZSBjb25zaWRlcmVkIGFzeW5jIGJ5IFNhZmFyaSdzIHN0YW5kYXJkcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyBwcm92aWRlZCB0byBmcmFtZXNlcnZpY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm5hbWUgVGhlIG5hbWUgdG8gdXNlIGZvciBpZGVudGlmeWluZyB0aGUgdmFyaW91cyBwaWVjZXMgYXNzb2NpYXRlZCB3aXRoIGZyYW1lc2VydmljZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmRpc3BhdGNoRnJhbWVVcmwgVGhlIHN0YXRpYyBhc3NldCB0byBsb2FkIGZvciB1c2UgYXMgdGhlIGRpc3BhdGNoIGZyYW1lLiBUaGlzIGFsbG93cyBmb3Igc2VjdXJlIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgaWZyYW1lIGFuZCB0aGUgcG9wdXAsIHNpbmNlIHRoZXkgYXJlIG9uIHRoZSBzYW1lIGFzc2V0IGRvbWFpbiAodXN1YWxseSBjaGVja291dC5wYXlwYWwuY29tIG9yIGFzc2V0cy5icmFpbnRyZWVnYXRld2F5LmNvbSlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm9wZW5GcmFtZVVybCBUaGUgdXJsIHRvIGxvYWQgaW4gdGhlIHBvcHVwLiBTb21ldGltZXMgaXQgaXMgdGhlIGNhc2UgdGhhdCB5b3UnbGwgbmVlZCBpbmZvIHRoYXQgY29tZXMgX2FmdGVyXyB0aGUgcG9wdXAgbG9hZHMgaW4gd2hpY2ggY2FzZSB3ZSBsb2FkIHRoZSBgbGFuZGluZy1mcmFtZWAgdGhhdCdzIGEgbG9hZGluZyBzcGlubmVyIHRoZW4gcmVkaXJlY3QgdG8gdGhlIHByb3Blci9maW5hbCBkZXN0aW5hdGlvbi4gU2VlIHRoZSBQYXlQYWwgY29tcG9uZW50IGZvciBhbiBleGFtcGxlLlxuICogT3RoZXJ3aXNlIGlmIGFsbCB0aGUgaW5mbyBuZWVkZWQgaXMgcmVhZHkgdXAtZnJvbnQsIHRoZW4geW91IGNhbiBmb3JlZ28gYSBsYW5kaW5nIGZyYW1lIGFuZCBnbyBzdHJhaWdodCB0byB0aGUgZmluYWwgZGVzdGluYXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaGVpZ2h0XSBUaGUgZGVzaXJlZCBwb3B1cCBoZWlnaHQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMud2lkdGhdIFRoZSBkZXNpcmVkIHBvcHVwIHdpZHRoLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnRvcF0gVGhlIGRlc2lyZWQgdG9wIHZhbHVlIG9mIHRoZSBwb3B1cCBmb3IgcG9zaXRpb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGVmdF0gVGhlIGRlc2lyZWQgbGVmdCB2YWx1ZSBvZiB0aGUgcG9wdXAgZm9yIHBvc2l0aW9uaW5nLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnN0YXRlXSBTZWVtcyB0byBiZSBkZWFkIGNvZGUsIGJ1dCBhbGxvd3MgZm9yIGluamVjdGluZyBkYXRhIGluIHRvIHBvcHVwLiBORVhUX01BSk9SX1ZFUlNJT04gcmVtb3ZlIHRoaXMgcGFyYW0gaWYgbm8gdXNhZ2UgZXhpc3RzLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGludm9rZSBvbmNlIHRoZSBmcmFtZXNlcnZpY2UgaXMgY3JlYXRlZCBhbmQgcmVhZHkgdG8gdXNlLiBGcmFtZVNlcnZpY2UgaW5zdGFuY2UgaXMgcmV0dXJuZWQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lU2VydmljZShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBmcmFtZVNlcnZpY2UgPSBuZXcgRnJhbWVTZXJ2aWNlKG9wdGlvbnMpO1xuXG4gICAgZnJhbWVTZXJ2aWNlLmluaXRpYWxpemUoZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZnJhbWVTZXJ2aWNlKTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbn0se1wiLi9mcmFtZS1zZXJ2aWNlXCI6MTM4fV0sMTQwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgaUZyYW1lciA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2lmcmFtZXJcIik7XG52YXIgYXNzaWduID0gX2RlcmVxXyhcIi4uLy4uLy4uL2Fzc2lnblwiKS5hc3NpZ247XG52YXIgYnJvd3NlckRldGVjdGlvbiA9IF9kZXJlcV8oXCIuLi8uLi9zaGFyZWQvYnJvd3Nlci1kZXRlY3Rpb25cIik7XG5cbnZhciBFTEVNRU5UX1NUWUxFUyA9IHtcbiAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBib3R0b206IDAsXG4gIHBhZGRpbmc6IDAsXG4gIG1hcmdpbjogMCxcbiAgYm9yZGVyOiAwLFxuICBvdXRsaW5lOiBcIm5vbmVcIixcbiAgekluZGV4OiAyMDAwMSxcbiAgYmFja2dyb3VuZDogXCIjRkZGRkZGXCIsXG59O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuLyoqXG4gKlxuICogV2Ugc2hvdWxkIG5vdCBldmVyIHJlYWxseSB1c2UgdGhlIE1vZGFsLiBNb2RhbHMgYXJlIF9saWtlXyAgcG9wdXBzLCBidXQgdGhlIGtleSBkaWZmZXJlbmNlIGlzIHRoYXQgdGhlIGN1c3RvbWVyIGNhbid0IGFjdHVhbGx5IHZlcmlmeSBpdCdzIGFwcCBkb21haW4gYW5kIHRodXMgc2VjdXJlL3ZhbGlkLiBPbGQgUFAgc2RrICguL3NyYy9wYXlwYWwpIHVzZXMgdGhpc1xuICogdG8gZ2V0IGluZm8gZnJvbSB3ZWJ2aWV3cyAoZS5nLiBmYWNlYm9vaykuXG4gKi9cblxuZnVuY3Rpb24gTW9kYWwob3B0aW9ucykge1xuICB0aGlzLl9jbG9zZWQgPSBudWxsO1xuICB0aGlzLl9mcmFtZSA9IG51bGw7XG4gIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB0aGlzLl9jb250YWluZXIgPSB0aGlzLl9vcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5O1xufVxuXG5Nb2RhbC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IG5vb3A7XG5cbk1vZGFsLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWZyYW1lckNvbmZpZyA9IHtcbiAgICBzcmM6IHRoaXMuX29wdGlvbnMub3BlbkZyYW1lVXJsLFxuICAgIG5hbWU6IHRoaXMuX29wdGlvbnMubmFtZSxcbiAgICBzY3JvbGxpbmc6IFwieWVzXCIsXG4gICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgc3R5bGU6IGFzc2lnbih7fSwgRUxFTUVOVF9TVFlMRVMpLFxuICAgIHRpdGxlOiBcIkxpZ2h0Ym94IEZyYW1lXCIsXG4gIH07XG5cbiAgaWYgKGJyb3dzZXJEZXRlY3Rpb24uaXNJb3MoKSkge1xuICAgIC8vIFdLV2ViVmlldyBoYXMgYnVnZ3kgYmVoYXZpb3Igd2hlbiBzY3JvbGxpbmcgYSBmaXhlZCBwb3NpdGlvbiBtb2RhbC4gVGhlIHdvcmthcm91bmQgaXMgdG8gbG9jayBzY3JvbGxpbmcgaW5cbiAgICAvLyB0aGUgYmFja2dyb3VuZC4gV2hlbiBtb2RhbCBpcyBjbG9zZWQsIHdlIHJlc3RvcmUgc2Nyb2xsaW5nIGFuZCByZXR1cm4gdG8gdGhlIHByZXZpb3VzIHNjcm9sbCBwb3NpdGlvbi5cbiAgICBpZiAoYnJvd3NlckRldGVjdGlvbi5pc0lvc1dLV2VidmlldygpKSB7XG4gICAgICB0aGlzLl9sb2NrU2Nyb2xsaW5nKCk7XG4gICAgICAvLyBBbGxvd3MgV0tXZWJWaWV3IHRvIHNjcm9sbCBhbGwgdGhlIHdheSBkb3duIHRvIGJvdHRvbVxuICAgICAgaWZyYW1lckNvbmZpZy5zdHlsZSA9IHt9O1xuICAgIH1cblxuICAgIHRoaXMuX2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgIGFzc2lnbih0aGlzLl9lbC5zdHlsZSwgRUxFTUVOVF9TVFlMRVMsIHtcbiAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICBvdmVyZmxvdzogXCJhdXRvXCIsXG4gICAgICBcIi13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nXCI6IFwidG91Y2hcIixcbiAgICB9KTtcblxuICAgIHRoaXMuX2ZyYW1lID0gaUZyYW1lcihpZnJhbWVyQ29uZmlnKTtcbiAgICB0aGlzLl9lbC5hcHBlbmRDaGlsZCh0aGlzLl9mcmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZWwgPSB0aGlzLl9mcmFtZSA9IGlGcmFtZXIoaWZyYW1lckNvbmZpZyk7XG4gIH1cbiAgdGhpcy5fY2xvc2VkID0gZmFsc2U7XG5cbiAgdGhpcy5fY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX2VsKTtcbn07XG5cbk1vZGFsLnByb3RvdHlwZS5mb2N1cyA9IG5vb3A7XG5cbk1vZGFsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuX2VsKTtcbiAgdGhpcy5fZnJhbWUgPSBudWxsO1xuICB0aGlzLl9jbG9zZWQgPSB0cnVlO1xuICBpZiAoYnJvd3NlckRldGVjdGlvbi5pc0lvc1dLV2VidmlldygpKSB7XG4gICAgdGhpcy5fdW5sb2NrU2Nyb2xsaW5nKCk7XG4gIH1cbn07XG5cbk1vZGFsLnByb3RvdHlwZS5pc0Nsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEJvb2xlYW4odGhpcy5fY2xvc2VkKTtcbn07XG5cbk1vZGFsLnByb3RvdHlwZS5yZWRpcmVjdCA9IGZ1bmN0aW9uIChyZWRpcmVjdFVybCkge1xuICB0aGlzLl9mcmFtZS5zcmMgPSByZWRpcmVjdFVybDtcbn07XG5cbk1vZGFsLnByb3RvdHlwZS5fdW5sb2NrU2Nyb2xsaW5nID0gZnVuY3Rpb24gKCkge1xuICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gdGhpcy5fc2F2ZWRCb2R5UHJvcGVydGllcy5vdmVyZmxvd1N0eWxlO1xuICBkb2N1bWVudC5ib2R5LnN0eWxlLnBvc2l0aW9uID0gdGhpcy5fc2F2ZWRCb2R5UHJvcGVydGllcy5wb3NpdGlvblN0eWxlO1xuICB3aW5kb3cuc2Nyb2xsVG8oXG4gICAgdGhpcy5fc2F2ZWRCb2R5UHJvcGVydGllcy5sZWZ0LFxuICAgIHRoaXMuX3NhdmVkQm9keVByb3BlcnRpZXMudG9wXG4gICk7XG4gIGRlbGV0ZSB0aGlzLl9zYXZlZEJvZHlQcm9wZXJ0aWVzO1xufTtcblxuTW9kYWwucHJvdG90eXBlLl9sb2NrU2Nyb2xsaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gIC8vIEZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTUzODg2OC9wcmV2ZW50LWJvZHktZnJvbS1zY3JvbGxpbmctd2hlbi1hLW1vZGFsLWlzLW9wZW5lZCNjb21tZW50NjU2MjY3NDNfMjQ3MjcyMDZcbiAgdGhpcy5fc2F2ZWRCb2R5UHJvcGVydGllcyA9IHtcbiAgICBsZWZ0OiAod2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvYy5zY3JvbGxMZWZ0KSAtIChkb2MuY2xpZW50TGVmdCB8fCAwKSxcbiAgICB0b3A6ICh3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jLnNjcm9sbFRvcCkgLSAoZG9jLmNsaWVudFRvcCB8fCAwKSxcbiAgICBvdmVyZmxvd1N0eWxlOiBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93LFxuICAgIHBvc2l0aW9uU3R5bGU6IGRvY3VtZW50LmJvZHkuc3R5bGUucG9zaXRpb24sXG4gIH07XG4gIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICBkb2N1bWVudC5ib2R5LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vZGFsO1xuXG59LHtcIi4uLy4uLy4uL2Fzc2lnblwiOjEyMSxcIi4uLy4uL3NoYXJlZC9icm93c2VyLWRldGVjdGlvblwiOjE0NSxcIkBicmFpbnRyZWUvaWZyYW1lclwiOjM1fV0sMTQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vLi4vYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuLi8uLi9zaGFyZWQvZXJyb3JzXCIpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gUG9wdXBCcmlkZ2Uob3B0aW9ucykge1xuICB0aGlzLl9jbG9zZWQgPSBudWxsO1xuICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbn1cblxuUG9wdXBCcmlkZ2UucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHdpbmRvdy5wb3B1cEJyaWRnZS5vbkNvbXBsZXRlID0gZnVuY3Rpb24gKGVyciwgcGF5bG9hZCkge1xuICAgIHZhciBwb3B1cERpc21pc3NlZCA9ICFwYXlsb2FkICYmICFlcnI7XG5cbiAgICBzZWxmLl9jbG9zZWQgPSB0cnVlO1xuXG4gICAgaWYgKGVyciB8fCBwb3B1cERpc21pc3NlZCkge1xuICAgICAgLy8gVXNlciBjbGlja2VkIFwiRG9uZVwiIGJ1dHRvbiBvZiBicm93c2VyIHZpZXdcbiAgICAgIGNhbGxiYWNrKG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuRlJBTUVfU0VSVklDRV9GUkFNRV9DTE9TRUQpKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBVc2VyIGNvbXBsZXRlZCBwb3B1cCBmbG93IChpbmNsdWRlcyBzdWNjZXNzIGFuZCBjYW5jZWwgY2FzZXMpXG4gICAgY2FsbGJhY2sobnVsbCwgcGF5bG9hZCk7XG4gIH07XG59O1xuXG5Qb3B1cEJyaWRnZS5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciB1cmw7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHVybCA9IG9wdGlvbnMub3BlbkZyYW1lVXJsIHx8IHRoaXMuX29wdGlvbnMub3BlbkZyYW1lVXJsO1xuXG4gIHRoaXMuX2Nsb3NlZCA9IGZhbHNlO1xuICB3aW5kb3cucG9wdXBCcmlkZ2Uub3Blbih1cmwpO1xufTtcblxuUG9wdXBCcmlkZ2UucHJvdG90eXBlLmZvY3VzID0gbm9vcDtcblxuUG9wdXBCcmlkZ2UucHJvdG90eXBlLmNsb3NlID0gbm9vcDtcblxuUG9wdXBCcmlkZ2UucHJvdG90eXBlLmlzQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gQm9vbGVhbih0aGlzLl9jbG9zZWQpO1xufTtcblxuUG9wdXBCcmlkZ2UucHJvdG90eXBlLnJlZGlyZWN0ID0gZnVuY3Rpb24gKHJlZGlyZWN0VXJsKSB7XG4gIHRoaXMub3Blbih7IG9wZW5GcmFtZVVybDogcmVkaXJlY3RVcmwgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvcHVwQnJpZGdlO1xuXG59LHtcIi4uLy4uLy4uL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uLy4uL3NoYXJlZC9lcnJvcnNcIjoxNDd9XSwxNDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKFwiLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50c1wiKTtcbnZhciBwb3NpdGlvbiA9IF9kZXJlcV8oXCIuL3Bvc2l0aW9uXCIpO1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVQb3NpdGlvbih0eXBlLCB1c2VyRGVmaW5lZFBvc2l0aW9uLCBzaXplKSB7XG4gIGlmICh0eXBlb2YgdXNlckRlZmluZWRQb3NpdGlvbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB1c2VyRGVmaW5lZFBvc2l0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9uW3R5cGVdKHNpemUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbXBvc2VQb3B1cE9wdGlvbnMob3B0aW9ucykge1xuICB2YXIgaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgfHwgY29uc3RhbnRzLkRFRkFVTFRfUE9QVVBfSEVJR0hUO1xuICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoIHx8IGNvbnN0YW50cy5ERUZBVUxUX1BPUFVQX1dJRFRIO1xuICB2YXIgdG9wID0gY2FsY3VsYXRlUG9zaXRpb24oXCJ0b3BcIiwgb3B0aW9ucy50b3AsIGhlaWdodCk7XG4gIHZhciBsZWZ0ID0gY2FsY3VsYXRlUG9zaXRpb24oXCJsZWZ0XCIsIG9wdGlvbnMubGVmdCwgd2lkdGgpO1xuXG4gIHJldHVybiBbXG4gICAgY29uc3RhbnRzLlBPUFVQX0JBU0VfT1BUSU9OUyxcbiAgICBcImhlaWdodD1cIiArIGhlaWdodCxcbiAgICBcIndpZHRoPVwiICsgd2lkdGgsXG4gICAgXCJ0b3A9XCIgKyB0b3AsXG4gICAgXCJsZWZ0PVwiICsgbGVmdCxcbiAgXS5qb2luKFwiLFwiKTtcbn07XG5cbn0se1wiLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50c1wiOjE0NixcIi4vcG9zaXRpb25cIjoxNDR9XSwxNDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjb21wb3NlT3B0aW9ucyA9IF9kZXJlcV8oXCIuL2NvbXBvc2Utb3B0aW9uc1wiKTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIFBvcHVwKG9wdGlvbnMpIHtcbiAgdGhpcy5fZnJhbWUgPSBudWxsO1xuICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbn1cblxuUG9wdXAucHJvdG90eXBlLmluaXRpYWxpemUgPSBub29wO1xuXG5Qb3B1cC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fZnJhbWUgPSB3aW5kb3cub3BlbihcbiAgICB0aGlzLl9vcHRpb25zLm9wZW5GcmFtZVVybCxcbiAgICB0aGlzLl9vcHRpb25zLm5hbWUsXG4gICAgY29tcG9zZU9wdGlvbnModGhpcy5fb3B0aW9ucylcbiAgKTtcbn07XG5cblBvcHVwLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fZnJhbWUuZm9jdXMoKTtcbn07XG5cblBvcHVwLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2ZyYW1lLmNsb3NlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLl9mcmFtZS5jbG9zZSgpO1xufTtcblxuUG9wdXAucHJvdG90eXBlLmlzQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIXRoaXMuX2ZyYW1lIHx8IEJvb2xlYW4odGhpcy5fZnJhbWUuY2xvc2VkKTtcbn07XG5cblBvcHVwLnByb3RvdHlwZS5yZWRpcmVjdCA9IGZ1bmN0aW9uIChyZWRpcmVjdFVybCkge1xuICB0aGlzLl9mcmFtZS5sb2NhdGlvbi5ocmVmID0gcmVkaXJlY3RVcmw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvcHVwO1xuXG59LHtcIi4vY29tcG9zZS1vcHRpb25zXCI6MTQyfV0sMTQ0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiB0b3AoaGVpZ2h0KSB7XG4gIHZhciB3aW5kb3dIZWlnaHQgPVxuICAgIHdpbmRvdy5vdXRlckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICB2YXIgd2luZG93VG9wID0gd2luZG93LnNjcmVlblkgPT0gbnVsbCA/IHdpbmRvdy5zY3JlZW5Ub3AgOiB3aW5kb3cuc2NyZWVuWTtcblxuICByZXR1cm4gY2VudGVyKHdpbmRvd0hlaWdodCwgaGVpZ2h0LCB3aW5kb3dUb3ApO1xufVxuXG5mdW5jdGlvbiBsZWZ0KHdpZHRoKSB7XG4gIHZhciB3aW5kb3dXaWR0aCA9IHdpbmRvdy5vdXRlcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgdmFyIHdpbmRvd0xlZnQgPSB3aW5kb3cuc2NyZWVuWCA9PSBudWxsID8gd2luZG93LnNjcmVlbkxlZnQgOiB3aW5kb3cuc2NyZWVuWDtcblxuICByZXR1cm4gY2VudGVyKHdpbmRvd1dpZHRoLCB3aWR0aCwgd2luZG93TGVmdCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRlcih3aW5kb3dNZXRyaWMsIHBvcHVwTWV0cmljLCBvZmZzZXQpIHtcbiAgcmV0dXJuICh3aW5kb3dNZXRyaWMgLSBwb3B1cE1ldHJpYykgLyAyICsgb2Zmc2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdG9wOiB0b3AsXG4gIGxlZnQ6IGxlZnQsXG4gIGNlbnRlcjogY2VudGVyLFxufTtcblxufSx7fV0sMTQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNJb3M6IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWlvc1wiKSxcbiAgaXNJb3NXS1dlYnZpZXc6IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWlvcy13a3dlYnZpZXdcIiksXG4gIHN1cHBvcnRzUG9wdXBzOiBfZGVyZXFfKFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9zdXBwb3J0cy1wb3B1cHNcIiksXG59O1xuXG59LHtcIkBicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24vaXMtaW9zXCI6MzAsXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWlvcy13a3dlYnZpZXdcIjoyOSxcIkBicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24vc3VwcG9ydHMtcG9wdXBzXCI6MzJ9XSwxNDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBESVNQQVRDSF9GUkFNRV9OQU1FOiBcImRpc3BhdGNoXCIsXG4gIERJU1BBVENIX0ZSQU1FX0NMQVNTOiBcImJyYWludHJlZS1kaXNwYXRjaC1mcmFtZVwiLFxuICBQT1BVUF9CQVNFX09QVElPTlM6IFwicmVzaXphYmxlLHNjcm9sbGJhcnNcIixcbiAgREVGQVVMVF9QT1BVUF9XSURUSDogNDUwLFxuICBERUZBVUxUX1BPUFVQX0hFSUdIVDogNTM1LFxuICBQT1BVUF9QT0xMX0lOVEVSVkFMOiAxMDAsXG4gIFBPUFVQX0NMT1NFX1RJTUVPVVQ6IDEwMCxcbn07XG5cbn0se31dLDE0NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5Qb3B1cCBSZWxhdGVkIEVycm9yIENvZGVzXG4gKiBAaWdub3JlXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiB1c2luZyBhIGNvbXBvbmVudCB0aGF0IG9wZW5zIGEgcG9wdXAgd2luZG93LlxuICogQHByb3BlcnR5IHtJTlRFUk5BTH0gRlJBTUVfU0VSVklDRV9GUkFNRV9DTE9TRUQgLSBPY2N1cnMgd2hlbiB0aGUgZnJhbWUgaXMgY2xvc2VkIGJlZm9yZSB0b2tlbml6YXRpb24gY2FuIG9jY3VyLlxuICogQHByb3BlcnR5IHtJTlRFUk5BTH0gRlJBTUVfU0VSVklDRV9GUkFNRV9PUEVOX0ZBSUxFRCAtIE9jY3VycyB3aGVuIHRoZSBwb3B1cCBjb3VsZCBub3QgYmUgb3BlbmVkLlxuICovXG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9icmFpbnRyZWUtZXJyb3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBGUkFNRV9TRVJWSUNFX0ZSQU1FX0NMT1NFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLklOVEVSTkFMLFxuICAgIGNvZGU6IFwiRlJBTUVfU0VSVklDRV9GUkFNRV9DTE9TRURcIixcbiAgICBtZXNzYWdlOiBcIkZyYW1lIGNsb3NlZCBiZWZvcmUgdG9rZW5pemF0aW9uIGNvdWxkIG9jY3VyLlwiLFxuICB9LFxuICBGUkFNRV9TRVJWSUNFX0ZSQU1FX09QRU5fRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuSU5URVJOQUwsXG4gICAgY29kZTogXCJGUkFNRV9TRVJWSUNFX0ZSQU1FX09QRU5fRkFJTEVEXCIsXG4gICAgbWVzc2FnZTogXCJGcmFtZSBmYWlsZWQgdG8gb3Blbi5cIixcbiAgfSxcbn07XG5cbn0se1wiLi4vLi4vYnJhaW50cmVlLWVycm9yXCI6MTI0fV0sMTQ4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgZW51bWVyYXRlID0gX2RlcmVxXyhcIi4uLy4uL2VudW1lcmF0ZVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbnVtZXJhdGUoXG4gIFtcIkRJU1BBVENIX0ZSQU1FX1JFQURZXCIsIFwiRElTUEFUQ0hfRlJBTUVfUkVQT1JUXCJdLFxuICBcImZyYW1lU2VydmljZTpcIlxuKTtcblxufSx7XCIuLi8uLi9lbnVtZXJhdGVcIjoxMzR9XSwxNDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBWRVJTSU9OID0gXCIzLjEwMC4wXCI7XG52YXIgYXNzaWduID0gX2RlcmVxXyhcIi4vYXNzaWduXCIpLmFzc2lnbjtcblxuZnVuY3Rpb24gZ2VuZXJhdGVUb2tlbml6YXRpb25QYXJhbWV0ZXJzKGNvbmZpZ3VyYXRpb24sIG92ZXJyaWRlcykge1xuICB2YXIgbWV0YWRhdGEgPSBjb25maWd1cmF0aW9uLmFuYWx5dGljc01ldGFkYXRhO1xuICB2YXIgYmFzaWNUb2tlbml6YXRpb25QYXJhbWV0ZXJzID0ge1xuICAgIGdhdGV3YXk6IFwiYnJhaW50cmVlXCIsXG4gICAgXCJicmFpbnRyZWU6bWVyY2hhbnRJZFwiOiBjb25maWd1cmF0aW9uLmdhdGV3YXlDb25maWd1cmF0aW9uLm1lcmNoYW50SWQsXG4gICAgXCJicmFpbnRyZWU6YXBpVmVyc2lvblwiOiBcInYxXCIsXG4gICAgXCJicmFpbnRyZWU6c2RrVmVyc2lvblwiOiBWRVJTSU9OLFxuICAgIFwiYnJhaW50cmVlOm1ldGFkYXRhXCI6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHNvdXJjZTogbWV0YWRhdGEuc291cmNlLFxuICAgICAgaW50ZWdyYXRpb246IG1ldGFkYXRhLmludGVncmF0aW9uLFxuICAgICAgc2Vzc2lvbklkOiBtZXRhZGF0YS5zZXNzaW9uSWQsXG4gICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgcGxhdGZvcm06IG1ldGFkYXRhLnBsYXRmb3JtLFxuICAgIH0pLFxuICB9O1xuXG4gIHJldHVybiBhc3NpZ24oe30sIGJhc2ljVG9rZW5pemF0aW9uUGFyYW1ldGVycywgb3ZlcnJpZGVzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbiwgZ29vZ2xlUGF5VmVyc2lvbiwgZ29vZ2xlTWVyY2hhbnRJZCkge1xuICB2YXIgZGF0YSwgcGF5cGFsUGF5bWVudE1ldGhvZDtcbiAgdmFyIGFuZHJvaWRQYXlDb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbi5nYXRld2F5Q29uZmlndXJhdGlvbi5hbmRyb2lkUGF5O1xuICB2YXIgZW52aXJvbm1lbnQgPVxuICAgIGNvbmZpZ3VyYXRpb24uZ2F0ZXdheUNvbmZpZ3VyYXRpb24uZW52aXJvbm1lbnQgPT09IFwicHJvZHVjdGlvblwiXG4gICAgICA/IFwiUFJPRFVDVElPTlwiXG4gICAgICA6IFwiVEVTVFwiO1xuXG4gIGlmIChnb29nbGVQYXlWZXJzaW9uID09PSAyKSB7XG4gICAgZGF0YSA9IHtcbiAgICAgIGFwaVZlcnNpb246IDIsXG4gICAgICBhcGlWZXJzaW9uTWlub3I6IDAsXG4gICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gICAgICBhbGxvd2VkUGF5bWVudE1ldGhvZHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiQ0FSRFwiLFxuICAgICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgIGFsbG93ZWRBdXRoTWV0aG9kczogW1wiUEFOX09OTFlcIiwgXCJDUllQVE9HUkFNXzNEU1wiXSxcbiAgICAgICAgICAgIGFsbG93ZWRDYXJkTmV0d29ya3M6IGFuZHJvaWRQYXlDb25maWd1cmF0aW9uLnN1cHBvcnRlZE5ldHdvcmtzLm1hcChcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGNhcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9rZW5pemF0aW9uU3BlY2lmaWNhdGlvbjoge1xuICAgICAgICAgICAgdHlwZTogXCJQQVlNRU5UX0dBVEVXQVlcIixcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IGdlbmVyYXRlVG9rZW5pemF0aW9uUGFyYW1ldGVycyhjb25maWd1cmF0aW9uLCB7XG4gICAgICAgICAgICAgIFwiYnJhaW50cmVlOmF1dGhvcml6YXRpb25GaW5nZXJwcmludFwiOlxuICAgICAgICAgICAgICAgIGFuZHJvaWRQYXlDb25maWd1cmF0aW9uLmdvb2dsZUF1dGhvcml6YXRpb25GaW5nZXJwcmludCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG5cbiAgICBpZiAoZ29vZ2xlTWVyY2hhbnRJZCkge1xuICAgICAgZGF0YS5tZXJjaGFudEluZm8gPSB7XG4gICAgICAgIG1lcmNoYW50SWQ6IGdvb2dsZU1lcmNoYW50SWQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChhbmRyb2lkUGF5Q29uZmlndXJhdGlvbi5wYXlwYWxDbGllbnRJZCkge1xuICAgICAgcGF5cGFsUGF5bWVudE1ldGhvZCA9IHtcbiAgICAgICAgdHlwZTogXCJQQVlQQUxcIixcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuICAgICAgICAgIHB1cmNoYXNlX2NvbnRleHQ6IHtcbiAgICAgICAgICAgIHB1cmNoYXNlX3VuaXRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXllZToge1xuICAgICAgICAgICAgICAgICAgY2xpZW50X2lkOiBhbmRyb2lkUGF5Q29uZmlndXJhdGlvbi5wYXlwYWxDbGllbnRJZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlY3VycmluZ19wYXltZW50OiB0cnVlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgY2FtZWxjYXNlICovXG4gICAgICAgIH0sXG4gICAgICAgIHRva2VuaXphdGlvblNwZWNpZmljYXRpb246IHtcbiAgICAgICAgICB0eXBlOiBcIlBBWU1FTlRfR0FURVdBWVwiLFxuICAgICAgICAgIHBhcmFtZXRlcnM6IGdlbmVyYXRlVG9rZW5pemF0aW9uUGFyYW1ldGVycyhjb25maWd1cmF0aW9uLCB7XG4gICAgICAgICAgICBcImJyYWludHJlZTpwYXlwYWxDbGllbnRJZFwiOiBhbmRyb2lkUGF5Q29uZmlndXJhdGlvbi5wYXlwYWxDbGllbnRJZCxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGRhdGEuYWxsb3dlZFBheW1lbnRNZXRob2RzLnB1c2gocGF5cGFsUGF5bWVudE1ldGhvZCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGRhdGEgPSB7XG4gICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gICAgICBhbGxvd2VkUGF5bWVudE1ldGhvZHM6IFtcIkNBUkRcIiwgXCJUT0tFTklaRURfQ0FSRFwiXSxcbiAgICAgIHBheW1lbnRNZXRob2RUb2tlbml6YXRpb25QYXJhbWV0ZXJzOiB7XG4gICAgICAgIHRva2VuaXphdGlvblR5cGU6IFwiUEFZTUVOVF9HQVRFV0FZXCIsXG4gICAgICAgIHBhcmFtZXRlcnM6IGdlbmVyYXRlVG9rZW5pemF0aW9uUGFyYW1ldGVycyhjb25maWd1cmF0aW9uLCB7XG4gICAgICAgICAgXCJicmFpbnRyZWU6YXV0aG9yaXphdGlvbkZpbmdlcnByaW50XCI6XG4gICAgICAgICAgICBhbmRyb2lkUGF5Q29uZmlndXJhdGlvbi5nb29nbGVBdXRob3JpemF0aW9uRmluZ2VycHJpbnQsXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICAgIGNhcmRSZXF1aXJlbWVudHM6IHtcbiAgICAgICAgYWxsb3dlZENhcmROZXR3b3JrczogYW5kcm9pZFBheUNvbmZpZ3VyYXRpb24uc3VwcG9ydGVkTmV0d29ya3MubWFwKFxuICAgICAgICAgIGZ1bmN0aW9uIChjYXJkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FyZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmIChjb25maWd1cmF0aW9uLmF1dGhvcml6YXRpb25UeXBlID09PSBcIlRPS0VOSVpBVElPTl9LRVlcIikge1xuICAgICAgZGF0YS5wYXltZW50TWV0aG9kVG9rZW5pemF0aW9uUGFyYW1ldGVycy5wYXJhbWV0ZXJzW1xuICAgICAgICBcImJyYWludHJlZTpjbGllbnRLZXlcIlxuICAgICAgXSA9IGNvbmZpZ3VyYXRpb24uYXV0aG9yaXphdGlvbjtcbiAgICB9XG5cbiAgICBpZiAoZ29vZ2xlTWVyY2hhbnRJZCkge1xuICAgICAgZGF0YS5tZXJjaGFudElkID0gZ29vZ2xlTWVyY2hhbnRJZDtcbiAgICB9XG5cbiAgICBpZiAoZ29vZ2xlUGF5VmVyc2lvbikge1xuICAgICAgZGF0YS5hcGlWZXJzaW9uID0gZ29vZ2xlUGF5VmVyc2lvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn07XG5cbn0se1wiLi9hc3NpZ25cIjoxMjF9XSwxNTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5JZnJhbWUod2luKSB7XG4gIHdpbiA9IHdpbiB8fCB3aW5kb3c7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luLnNlbGYgIT09IHdpbi50b3A7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxufSx7fV0sMTUxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBjb252ZXJ0RGF0ZVN0cmluZ1RvRGF0ZShkYXRlU3RyaW5nKSB7XG4gIHZhciBzcGxpdERhdGUgPSBkYXRlU3RyaW5nLnNwbGl0KFwiLVwiKTtcblxuICByZXR1cm4gbmV3IERhdGUoc3BsaXREYXRlWzBdLCBzcGxpdERhdGVbMV0sIHNwbGl0RGF0ZVsyXSk7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZVN0cmluZ0JlZm9yZU9yT24oZmlyc3REYXRlLCBzZWNvbmREYXRlKSB7XG4gIHJldHVybiAoXG4gICAgY29udmVydERhdGVTdHJpbmdUb0RhdGUoZmlyc3REYXRlKSA8PSBjb252ZXJ0RGF0ZVN0cmluZ1RvRGF0ZShzZWNvbmREYXRlKVxuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRGF0ZVN0cmluZ0JlZm9yZU9yT247XG5cbn0se31dLDE1MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gaXNIVFRQUyhwcm90b2NvbCkge1xuICBwcm90b2NvbCA9IHByb3RvY29sIHx8IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbDtcblxuICByZXR1cm4gcHJvdG9jb2wgPT09IFwiaHR0cHM6XCI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0hUVFBTOiBpc0hUVFBTLFxufTtcblxufSx7fV0sMTUzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgcGFyc2VyO1xudmFyIGxlZ2FsSG9zdHMgPSB7XG4gIFwicGF5cGFsLmNvbVwiOiAxLFxuICBcImJyYWludHJlZXBheW1lbnRzLmNvbVwiOiAxLFxuICBcImJyYWludHJlZWdhdGV3YXkuY29tXCI6IDEsXG4gIFwiYnJhaW50cmVlLWFwaS5jb21cIjogMSxcbn07XG5cbi8vIGVuZFJlbW92ZUlmKHByb2R1Y3Rpb24pXG5cbmZ1bmN0aW9uIHN0cmlwU3ViZG9tYWlucyhkb21haW4pIHtcbiAgcmV0dXJuIGRvbWFpbi5zcGxpdChcIi5cIikuc2xpY2UoLTIpLmpvaW4oXCIuXCIpO1xufVxuXG5mdW5jdGlvbiBpc1ZlcmlmaWVkRG9tYWluKHVybCkge1xuICB2YXIgbWFpbkRvbWFpbjtcblxuICB1cmwgPSB1cmwudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoIS9eaHR0cHM6Ly50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwYXJzZXIgPSBwYXJzZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gIHBhcnNlci5ocmVmID0gdXJsO1xuICBtYWluRG9tYWluID0gc3RyaXBTdWJkb21haW5zKHBhcnNlci5ob3N0bmFtZSk7XG5cbiAgcmV0dXJuIGxlZ2FsSG9zdHMuaGFzT3duUHJvcGVydHkobWFpbkRvbWFpbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNWZXJpZmllZERvbWFpbjtcblxufSx7fV0sMTU0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xufTtcblxufSx7fV0sMTU1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9ialtrZXldID09PSBcImZ1bmN0aW9uXCI7XG4gIH0pO1xufTtcblxufSx7fV0sMTU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb25jZTtcblxufSx7fV0sMTU3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfbm90RW1wdHkob2JqKSB7XG4gIHZhciBrZXk7XG5cbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLW1peGVkLW9wZXJhdG9ycyAqL1xuZnVuY3Rpb24gX2lzQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICAodmFsdWUgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKSB8fFxuICAgIGZhbHNlXG4gICk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLW1peGVkLW9wZXJhdG9ycyAqL1xuXG5mdW5jdGlvbiBoYXNRdWVyeVBhcmFtcyh1cmwpIHtcbiAgdXJsID0gdXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXG4gIHJldHVybiAvXFw/Ly50ZXN0KHVybCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHVybCkge1xuICB2YXIgcXVlcnksIHBhcmFtcztcblxuICB1cmwgPSB1cmwgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgaWYgKCFoYXNRdWVyeVBhcmFtcyh1cmwpKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgcXVlcnkgPSB1cmwuc3BsaXQoXCI/XCIpWzFdIHx8IFwiXCI7XG4gIHF1ZXJ5ID0gcXVlcnkucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnNwbGl0KFwiJlwiKTtcblxuICBwYXJhbXMgPSBxdWVyeS5yZWR1Y2UoZnVuY3Rpb24gKHRvUmV0dXJuLCBrZXlWYWx1ZSkge1xuICAgIHZhciBwYXJ0cyA9IGtleVZhbHVlLnNwbGl0KFwiPVwiKTtcbiAgICB2YXIga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRzWzBdKTtcbiAgICB2YXIgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQocGFydHNbMV0pO1xuXG4gICAgdG9SZXR1cm5ba2V5XSA9IHZhbHVlO1xuXG4gICAgcmV0dXJuIHRvUmV0dXJuO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KHBhcmFtcywgbmFtZXNwYWNlKSB7XG4gIHZhciBrLCB2LCBwO1xuICB2YXIgcXVlcnkgPSBbXTtcblxuICBmb3IgKHAgaW4gcGFyYW1zKSB7XG4gICAgaWYgKCFwYXJhbXMuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHYgPSBwYXJhbXNbcF07XG5cbiAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICBpZiAoX2lzQXJyYXkocGFyYW1zKSkge1xuICAgICAgICBrID0gbmFtZXNwYWNlICsgXCJbXVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgayA9IG5hbWVzcGFjZSArIFwiW1wiICsgcCArIFwiXVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrID0gcDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBxdWVyeS5wdXNoKHN0cmluZ2lmeSh2LCBrKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXJ5LnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGspICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodikpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBxdWVyeS5qb2luKFwiJlwiKTtcbn1cblxuZnVuY3Rpb24gcXVlcnlpZnkodXJsLCBwYXJhbXMpIHtcbiAgdXJsID0gdXJsIHx8IFwiXCI7XG5cbiAgaWYgKHBhcmFtcyAhPSBudWxsICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgJiYgX25vdEVtcHR5KHBhcmFtcykpIHtcbiAgICB1cmwgKz0gdXJsLmluZGV4T2YoXCI/XCIpID09PSAtMSA/IFwiP1wiIDogXCJcIjtcbiAgICB1cmwgKz0gdXJsLmluZGV4T2YoXCI9XCIpICE9PSAtMSA/IFwiJlwiIDogXCJcIjtcbiAgICB1cmwgKz0gc3RyaW5naWZ5KHBhcmFtcyk7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcGFyc2U6IHBhcnNlLFxuICBzdHJpbmdpZnk6IHN0cmluZ2lmeSxcbiAgcXVlcnlpZnk6IHF1ZXJ5aWZ5LFxuICBoYXNRdWVyeVBhcmFtczogaGFzUXVlcnlQYXJhbXMsXG59O1xuXG59LHt9XSwxNTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB1dWlkID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvdXVpZFwiKTtcbnZhciBmaW5kUm9vdE5vZGUgPSBfZGVyZXFfKFwiLi9maW5kLXJvb3Qtbm9kZVwiKTtcblxuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2tyYWtlbmpzL2JlbHRlci9ibG9iL2NkZGRjNGY4ZGRiMTcyZDI5ZGI5ZTdlMWFkMWVlZWFjZmI5M2UyMTUvc3JjL2RvbS5qcyNMOTgxLUwxMDMxXG4vLyB0aGFua3MgQGJsdWVwbnVtZVxuXG5mdW5jdGlvbiBpc1NoYWRvd0VsZW1lbnQoZWxlbWVudCkge1xuICBlbGVtZW50ID0gZmluZFJvb3ROb2RlKGVsZW1lbnQpO1xuXG4gIHJldHVybiBlbGVtZW50LnRvU3RyaW5nKCkgPT09IFwiW29iamVjdCBTaGFkb3dSb290XVwiO1xufVxuXG5mdW5jdGlvbiBnZXRTaGFkb3dIb3N0KGVsZW1lbnQpIHtcbiAgZWxlbWVudCA9IGZpbmRSb290Tm9kZShlbGVtZW50KTtcblxuICBpZiAoIWlzU2hhZG93RWxlbWVudChlbGVtZW50KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQuaG9zdDtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVG9TbG90KGVsZW1lbnQsIHN0eWxlcykge1xuICB2YXIgc3R5bGVOb2RlID0gZmluZFJvb3ROb2RlKGVsZW1lbnQpLnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVwiKTtcbiAgdmFyIHNoYWRvd0hvc3QgPSBnZXRTaGFkb3dIb3N0KGVsZW1lbnQpO1xuICB2YXIgc2xvdE5hbWUgPSBcInNoYWRvdy1zbG90LVwiICsgdXVpZCgpO1xuICB2YXIgc2xvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzbG90XCIpO1xuICB2YXIgc2xvdFByb3ZpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICBzbG90LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgc2xvdE5hbWUpO1xuICBlbGVtZW50LmFwcGVuZENoaWxkKHNsb3QpO1xuXG4gIHNsb3RQcm92aWRlci5zZXRBdHRyaWJ1dGUoXCJzbG90XCIsIHNsb3ROYW1lKTtcbiAgc2hhZG93SG9zdC5hcHBlbmRDaGlsZChzbG90UHJvdmlkZXIpO1xuXG4gIGlmIChzdHlsZXMpIHtcbiAgICBpZiAoIXN0eWxlTm9kZSkge1xuICAgICAgc3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZU5vZGUpO1xuICAgIH1cblxuICAgIHN0eWxlTm9kZS5zaGVldC5pbnNlcnRSdWxlKFxuICAgICAgJzo6c2xvdHRlZChbc2xvdD1cIicgKyBzbG90TmFtZSArICdcIl0pIHsgJyArIHN0eWxlcyArIFwiIH1cIlxuICAgICk7XG4gIH1cblxuICBpZiAoaXNTaGFkb3dFbGVtZW50KHNoYWRvd0hvc3QpKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVRvU2xvdChzbG90UHJvdmlkZXIsIHN0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gc2xvdFByb3ZpZGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTaGFkb3dFbGVtZW50OiBpc1NoYWRvd0VsZW1lbnQsXG4gIGdldFNoYWRvd0hvc3Q6IGdldFNoYWRvd0hvc3QsXG4gIHRyYW5zZm9ybVRvU2xvdDogdHJhbnNmb3JtVG9TbG90LFxufTtcblxufSx7XCIuL2ZpbmQtcm9vdC1ub2RlXCI6MTM2LFwiQGJyYWludHJlZS91dWlkXCI6Mzl9XSwxNTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNuYWtlU3RyaW5nKSB7XG4gIGlmIChzbmFrZVN0cmluZy5pbmRleE9mKFwiX1wiKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gc25ha2VTdHJpbmc7XG4gIH1cblxuICByZXR1cm4gc25ha2VTdHJpbmcudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oXFxfXFx3KS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gbWF0Y2hbMV0udG9VcHBlckNhc2UoKTtcbiAgfSk7XG59O1xuXG59LHt9XSwxNjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIHVzZU1pbihpc0RlYnVnKSB7XG4gIHJldHVybiBpc0RlYnVnID8gXCJcIiA6IFwiLm1pblwiO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZU1pbjtcblxufSx7fV0sMTYxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG4vLyBORVhUX01BSk9SX1ZFUlNJT04gb2xkIHZlcnNpb25zIG9mIElFIGRvbid0IGhhdmUgYXRvYiwgaW4gdGhlXG4vLyBuZXh0IG1ham9yIHZlcnNpb24sIHdlJ3JlIGRyb3BwaW5nIHN1cHBvcnQgZm9yIHRob3NlIHZlcnNpb25zXG4vLyBzbyB3ZSBjYW4gZWxpbWluYXRlIHRoZSBuZWVkIHRvIGhhdmUgdGhpcyBhdG9iIHBvbHlmaWxsXG52YXIgYXRvYk5vcm1hbGl6ZWQgPSB0eXBlb2YgYXRvYiA9PT0gXCJmdW5jdGlvblwiID8gYXRvYiA6IGF0b2JQb2x5ZmlsbDtcblxuZnVuY3Rpb24gYXRvYlBvbHlmaWxsKGJhc2U2NFN0cmluZykge1xuICB2YXIgYSwgYiwgYywgYjEsIGIyLCBiMywgYjQsIGk7XG4gIHZhciBiYXNlNjRNYXRjaGVyID0gbmV3IFJlZ0V4cChcbiAgICBcIl4oPzpbQS1aYS16MC05Ky9dezR9KSooPzpbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT18W0EtWmEtejAtOSsvXXs0fSkoWz1dezEsMn0pPyRcIlxuICApO1xuICB2YXIgY2hhcmFjdGVycyA9XG4gICAgXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO1xuICB2YXIgcmVzdWx0ID0gXCJcIjtcblxuICBpZiAoIWJhc2U2NE1hdGNoZXIudGVzdChiYXNlNjRTdHJpbmcpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm9uIGJhc2U2NCBlbmNvZGVkIGlucHV0IHBhc3NlZCB0byB3aW5kb3cuYXRvYiBwb2x5ZmlsbFwiKTtcbiAgfVxuXG4gIGkgPSAwO1xuICBkbyB7XG4gICAgYjEgPSBjaGFyYWN0ZXJzLmluZGV4T2YoYmFzZTY0U3RyaW5nLmNoYXJBdChpKyspKTtcbiAgICBiMiA9IGNoYXJhY3RlcnMuaW5kZXhPZihiYXNlNjRTdHJpbmcuY2hhckF0KGkrKykpO1xuICAgIGIzID0gY2hhcmFjdGVycy5pbmRleE9mKGJhc2U2NFN0cmluZy5jaGFyQXQoaSsrKSk7XG4gICAgYjQgPSBjaGFyYWN0ZXJzLmluZGV4T2YoYmFzZTY0U3RyaW5nLmNoYXJBdChpKyspKTtcblxuICAgIGEgPSAoKGIxICYgMHgzZikgPDwgMikgfCAoKGIyID4+IDQpICYgMHgzKTtcbiAgICBiID0gKChiMiAmIDB4ZikgPDwgNCkgfCAoKGIzID4+IDIpICYgMHhmKTtcbiAgICBjID0gKChiMyAmIDB4MykgPDwgNikgfCAoYjQgJiAweDNmKTtcblxuICAgIHJlc3VsdCArPVxuICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShhKSArXG4gICAgICAoYiA/IFN0cmluZy5mcm9tQ2hhckNvZGUoYikgOiBcIlwiKSArXG4gICAgICAoYyA/IFN0cmluZy5mcm9tQ2hhckNvZGUoYykgOiBcIlwiKTtcbiAgfSB3aGlsZSAoaSA8IGJhc2U2NFN0cmluZy5sZW5ndGgpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhdG9iOiBmdW5jdGlvbiAoYmFzZTY0U3RyaW5nKSB7XG4gICAgcmV0dXJuIGF0b2JOb3JtYWxpemVkLmNhbGwod2luZG93LCBiYXNlNjRTdHJpbmcpO1xuICB9LFxuICBfYXRvYjogYXRvYlBvbHlmaWxsLFxufTtcblxufSx7fV0sMTYyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUkVRVUlSRURfT1BUSU9OU19GT1JfU1RBUlRfUEFZTUVOVDogW1xuICAgIFwiZ2l2ZW5OYW1lXCIsXG4gICAgXCJzdXJuYW1lXCIsXG4gICAgXCJjdXJyZW5jeUNvZGVcIixcbiAgICBcIm9uUGF5bWVudFN0YXJ0XCIsXG4gICAgXCJwYXltZW50VHlwZVwiLFxuICAgIFwiYW1vdW50XCIsXG4gICAgXCJmYWxsYmFja1wiLFxuICBdLFxuICBSRVFVSVJFRF9PUFRJT05TX0ZPUl9QQVlfVVBPTl9JTlZPSUNFX1BBWU1FTlRfVFlQRTogW1xuICAgIFwiZ2l2ZW5OYW1lXCIsXG4gICAgXCJzdXJuYW1lXCIsXG4gICAgXCJjdXJyZW5jeUNvZGVcIixcbiAgICBcIm9uUGF5bWVudFN0YXJ0XCIsXG4gICAgXCJwYXltZW50VHlwZVwiLFxuICAgIFwiYW1vdW50XCIsXG4gICAgXCJhZGRyZXNzXCIsXG4gICAgXCJiaWxsaW5nQWRkcmVzc1wiLFxuICAgIFwiYmlydGhEYXRlXCIsXG4gICAgXCJlbWFpbFwiLFxuICAgIFwibG9jYWxlXCIsXG4gICAgXCJjdXN0b21lclNlcnZpY2VJbnN0cnVjdGlvbnNcIixcbiAgICBcImNvcnJlbGF0aW9uSWRcIixcbiAgICBcInBob25lXCIsXG4gICAgXCJwaG9uZUNvdW50cnlDb2RlXCIsXG4gICAgXCJsaW5lSXRlbXNcIixcbiAgXSxcbiAgUkVRVUlSRURfT1BUSU9OU19GT1JfQUREUkVTUzogW1xuICAgIFwic3RyZWV0QWRkcmVzc1wiLFxuICAgIFwibG9jYWxpdHlcIixcbiAgICBcInBvc3RhbENvZGVcIixcbiAgICBcImNvdW50cnlDb2RlXCIsXG4gIF0sXG4gIFJFUVVJUkVEX09QVElPTlNfRk9SX0xJTkVfSVRFTVM6IFtcbiAgICBcImNhdGVnb3J5XCIsXG4gICAgXCJuYW1lXCIsXG4gICAgXCJxdWFudGl0eVwiLFxuICAgIFwidW5pdEFtb3VudFwiLFxuICAgIFwidW5pdFRheEFtb3VudFwiLFxuICBdLFxuICBSRVFVSVJFRF9PUFRJT05TX0ZPUl9CTElLX1NFQU1MRVNTX1BBWU1FTlRfVFlQRTogW1xuICAgIFwiZ2l2ZW5OYW1lXCIsXG4gICAgXCJzdXJuYW1lXCIsXG4gICAgXCJjdXJyZW5jeUNvZGVcIixcbiAgICBcIm9uUGF5bWVudFN0YXJ0XCIsXG4gICAgXCJwYXltZW50VHlwZVwiLFxuICAgIFwiYW1vdW50XCIsXG4gIF0sXG4gIFJFUVVJUkVEX09QVElPTlNfRk9SX0JMSUtfT1BUSU9OU19MRVZFTF8wOiBbXCJhdXRoQ29kZVwiXSxcbiAgUkVRVUlSRURfT1BUSU9OU19GT1JfQkxJS19PUFRJT05TX09ORV9DTElDS19GSVJTVDogW1xuICAgIFwiYXV0aENvZGVcIixcbiAgICBcImNvbnN1bWVyUmVmZXJlbmNlXCIsXG4gICAgXCJhbGlhc0xhYmVsXCIsXG4gIF0sXG4gIFJFUVVJUkVEX09QVElPTlNfRk9SX0JMSUtfT1BUSU9OU19PTkVfQ0xJQ0tfU1VCU0VRVUVOVDogW1xuICAgIFwiY29uc3VtZXJSZWZlcmVuY2VcIixcbiAgICBcImFsaWFzS2V5XCIsXG4gIF0sXG59O1xuXG59LHt9XSwxNjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmcmFtZVNlcnZpY2UgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2ZyYW1lLXNlcnZpY2UvZXh0ZXJuYWxcIik7XG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciB1c2VNaW4gPSBfZGVyZXFfKFwiLi4vLi4vbGliL3VzZS1taW5cIik7XG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xudmFyIElOVEVHUkFUSU9OX1RJTUVPVVRfTVMgPVxuICBfZGVyZXFfKFwiLi4vLi4vbGliL2NvbnN0YW50c1wiKS5JTlRFR1JBVElPTl9USU1FT1VUX01TO1xudmFyIGFuYWx5dGljcyA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYW5hbHl0aWNzXCIpO1xudmFyIG1ldGhvZHMgPSBfZGVyZXFfKFwiLi4vLi4vbGliL21ldGhvZHNcIik7XG52YXIgY29udmVydE1ldGhvZHNUb0Vycm9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIik7XG52YXIgY29udmVydFRvQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2NvbnZlcnQtdG8tYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIEV4dGVuZGVkUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2V4dGVuZGVkLXByb21pc2VcIik7XG52YXIgcXVlcnlzdHJpbmcgPSBfZGVyZXFfKFwiLi4vLi4vbGliL3F1ZXJ5c3RyaW5nXCIpO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oXCIuL2NvbnN0YW50c1wiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi4vc2hhcmVkL2Vycm9yc1wiKTtcblxudmFyIERFRkFVTFRfV0lORE9XX1dJRFRIID0gMTI4MjtcbnZhciBERUZBVUxUX1dJTkRPV19IRUlHSFQgPSA3MjA7XG5cbkV4dGVuZGVkUHJvbWlzZS5zdXBwcmVzc1VuaGFuZGxlZFByb21pc2VNZXNzYWdlID0gdHJ1ZTtcblxuLyoqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIHNlZSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvbG9jYWwtcGF5bWVudC5jcmVhdGV8bG9jYWwtcGF5bWVudC5jcmVhdGV9XG4gKiBAY2xhc3NkZXNjIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIExvY2FsUGF5bWVudCBjb21wb25lbnQuIEluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIGNhbiBvcGVuIGEgTG9jYWxQYXltZW50IHdpbmRvdyBmb3IgcGF5aW5nIHdpdGggYWx0ZXJuYXRlIHBheW1lbnRzIGxvY2FsIHRvIGEgc3BlY2lmaWMgY291bnRyeS4gQW55IGFkZGl0aW9uYWwgVUksIHN1Y2ggYXMgZGlzYWJsaW5nIHRoZSBwYWdlIHdoaWxlIGF1dGhlbnRpY2F0aW9uIGlzIHRha2luZyBwbGFjZSwgaXMgdXAgdG8gdGhlIGRldmVsb3Blci5cbiAqXG4gKiBAZGVzY3JpcHRpb24gPHN0cm9uZz5EbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIFVzZSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvbG9jYWwtcGF5bWVudC5jcmVhdGV8YnJhaW50cmVlLXdlYi5sb2NhbC1wYXltZW50LmNyZWF0ZX0gaW5zdGVhZC48L3N0cm9uZz5cbiAqL1xuZnVuY3Rpb24gTG9jYWxQYXltZW50KG9wdGlvbnMpIHtcbiAgdGhpcy5fY2xpZW50ID0gb3B0aW9ucy5jbGllbnQ7XG4gIHRoaXMuX2Fzc2V0c1VybCA9XG4gICAgb3B0aW9ucy5jbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpLmdhdGV3YXlDb25maWd1cmF0aW9uLmFzc2V0c1VybCArXG4gICAgXCIvd2ViL1wiICtcbiAgICBWRVJTSU9OO1xuICB0aGlzLl9pc0RlYnVnID0gb3B0aW9ucy5jbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpLmlzRGVidWc7XG4gIHRoaXMuX2xvYWRpbmdGcmFtZVVybCA9XG4gICAgdGhpcy5fYXNzZXRzVXJsICtcbiAgICBcIi9odG1sL2xvY2FsLXBheW1lbnQtbGFuZGluZy1mcmFtZVwiICtcbiAgICB1c2VNaW4odGhpcy5faXNEZWJ1ZykgK1xuICAgIFwiLmh0bWxcIjtcbiAgdGhpcy5fYXV0aG9yaXphdGlvbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgdGhpcy5fcGF5bWVudFR5cGUgPSBcInVua25vd25cIjtcbiAgdGhpcy5fbWVyY2hhbnRBY2NvdW50SWQgPSBvcHRpb25zLm1lcmNoYW50QWNjb3VudElkO1xufVxuXG5Mb2NhbFBheW1lbnQucHJvdG90eXBlLl9pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjbGllbnQgPSB0aGlzLl9jbGllbnQ7XG4gIHZhciBmYWlsdXJlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcImxvY2FsLXBheW1lbnQubG9hZC50aW1lZC1vdXRcIik7XG4gIH0sIElOVEVHUkFUSU9OX1RJTUVPVVRfTVMpO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIGZyYW1lU2VydmljZS5jcmVhdGUoXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwibG9jYWxwYXltZW50bGFuZGluZ3BhZ2VcIixcbiAgICAgICAgZGlzcGF0Y2hGcmFtZVVybDpcbiAgICAgICAgICBzZWxmLl9hc3NldHNVcmwgK1xuICAgICAgICAgIFwiL2h0bWwvZGlzcGF0Y2gtZnJhbWVcIiArXG4gICAgICAgICAgdXNlTWluKHNlbGYuX2lzRGVidWcpICtcbiAgICAgICAgICBcIi5odG1sXCIsXG4gICAgICAgIG9wZW5GcmFtZVVybDogc2VsZi5fbG9hZGluZ0ZyYW1lVXJsLFxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChzZXJ2aWNlKSB7XG4gICAgICAgIHNlbGYuX2ZyYW1lU2VydmljZSA9IHNlcnZpY2U7XG4gICAgICAgIGNsZWFyVGltZW91dChmYWlsdXJlVGltZW91dCk7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcImxvY2FsLXBheW1lbnQubG9hZC5zdWNjZWVkZWRcIik7XG4gICAgICAgIHJlc29sdmUoc2VsZik7XG4gICAgICB9XG4gICAgKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIE9wdGlvbnMgdXNlZCBmb3IgbW9zdCBsb2NhbCBwYXltZW50IHR5cGVzLlxuICogQHR5cGVkZWYge29iamVjdH0gTG9jYWxQYXltZW50flN0YXJ0UGF5bWVudE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBmYWxsYmFjayBDb25maWd1cmF0aW9uIGZvciB3aGF0IHRvIGRvIHdoZW4gYXBwIHN3aXRjaGluZyBiYWNrIGZyb20gYSBCYW5rIGFwcCBvbiBhIG1vYmlsZSBkZXZpY2UuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZmFsbGJhY2suYnV0dG9uVGV4dCBUaGUgdGV4dCB0byBkaXNwbGF5IGluIGEgYnV0dG9uIHRvIHJlZGlyZWN0IGJhY2sgdG8gdGhlIG1lcmNoYW50IHBhZ2UuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZmFsbGJhY2sudXJsIFRoZSB1cmwgdG8gcmVkaXJlY3QgdG8gd2hlbiB0aGUgcmVkaXJlY3QgYnV0dG9uIGlzIHByZXNzZWQuIFF1ZXJ5IHBhcmFtcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSB1cmwgdG8gcHJvY2VzcyB0aGUgZGF0YSByZXR1cm5lZCBmcm9tIHRoZSBiYW5rLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGZhbGxiYWNrLmNhbmNlbEJ1dHRvblRleHQgVGhlIHRleHQgdG8gZGlzcGxheSBpbiBhIGJ1dHRvbiB0byByZWRpcmVjdCBiYWNrIHRvIHRoZSBtZXJjaGFudCBwYWdlIHdoZW4gdGhlIGN1c3RvbWVyIGNhbmNlbHMuIElmIG5vIGBjYW5jZWxCdXR0b25UZXh0YCBpcyBwcm92aWRlZCwgYGJ1dHRvblRleHRgIHdpbGwgYmUgdXNlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBmYWxsYmFjay5jYW5jZWxVcmwgVGhlIHVybCB0byByZWRpcmVjdCB0byB3aGVuIHRoZSByZWRpcmVjdCBidXR0b24gaXMgcHJlc3NlZCB3aGVuIHRoZSBjdXN0b21lciBjYW5jZWxzLiBRdWVyeSBwYXJhbXMgd2lsbCBiZSBhZGRlZCB0byB0aGUgdXJsIHRvIGNoZWNrIHRoZSBzdGF0ZSBvZiB0aGUgcGF5bWVudC4gSWYgbm8gYGNhbmNlbFVybGAgaXMgcHJvdmlkZWQsIGB1cmxgIHdpbGwgYmUgdXNlZC5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbd2luZG93T3B0aW9uc10gVGhlIG9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHRoZSB3aW5kb3cgdGhhdCBpcyBvcGVuZWQgd2hlbiBzdGFydGluZyB0aGUgcGF5bWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbd2luZG93T3B0aW9ucy53aWR0aD0xMjgyXSBUaGUgd2lkdGggaW4gcGl4ZWxzIG9mIHRoZSB3aW5kb3cgb3BlbmVkIHdoZW4gc3RhcnRpbmcgdGhlIHBheW1lbnQuIFRoZSBkZWZhdWx0IHdpZHRoIHNpemUgaXMgdGhpcyBsYXJnZSB0byBhbGxvdyB2YXJpb3VzIGJhbmtpbmcgcGFydG5lciBsYW5kaW5nIHBhZ2VzIHRvIGRpc3BsYXkgdGhlIFFSIENvZGUgdG8gYmUgc2Nhbm5lZCBieSB0aGUgYmFuaydzIG1vYmlsZSBhcHAuIE1hbnkgd2lsbCBub3QgZGlzcGxheSB0aGUgUVIgY29kZSB3aGVuIHRoZSB3aW5kb3cgc2l6ZSBpcyBzbWFsbGVyIHRoYW4gYSBzdGFuZGFyZCBkZXNrdG9wIHNjcmVlbi5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbd2luZG93T3B0aW9ucy5oZWlnaHQ9NzIwXSBUaGUgaGVpZ2h0IGluIHBpeGVscyBvZiB0aGUgd2luZG93IG9wZW5lZCB3aGVuIHN0YXJ0aW5nIHRoZSBwYXltZW50LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFtb3VudCBUaGUgYW1vdW50IHRvIGF1dGhvcml6ZSBmb3IgdGhlIHRyYW5zYWN0aW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGN1cnJlbmN5Q29kZSBUaGUgY3VycmVuY3kgdG8gcHJvY2VzcyB0aGUgcGF5bWVudCAodGhyZWUtY2hhcmFjdGVyIElTTy00MjE3KS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZGlzcGxheU5hbWVdIFRoZSBtZXJjaGFudCBuYW1lIGRpc3BsYXllZCBpbnNpZGUgb2YgdGhlIHdpbmRvdyB0aGF0IGlzIG9wZW5lZCB3aGVuIHN0YXJ0aW5nIHRoZSBwYXltZW50LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBheW1lbnRUeXBlIFRoZSB0eXBlIG9mIGxvY2FsIHBheW1lbnQuIFNlZSBodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2JyYWludHJlZS9kb2NzL2d1aWRlcy9sb2NhbC1wYXltZW50LW1ldGhvZHMvY2xpZW50LXNpZGUtY3VzdG9tXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGF5bWVudFR5cGVDb3VudHJ5Q29kZSBUaGUgY291bnRyeSBjb2RlIG9mIHRoZSBsb2NhbCBwYXltZW50LiBUaGlzIHZhbHVlIG11c3QgYmUgb25lIG9mIHRoZSBzdXBwb3J0ZWQgY291bnRyeSBjb2RlcyBmb3IgYSBnaXZlbiBsb2NhbCBwYXltZW50IHR5cGUgbGlzdGVkIHtAbGluayBodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2JyYWludHJlZS9kb2NzL2d1aWRlcy9sb2NhbC1wYXltZW50LW1ldGhvZHMvY2xpZW50LXNpZGUtY3VzdG9tL2phdmFzY3JpcHQvdjMjcmVuZGVyLWxvY2FsLXBheW1lbnQtbWV0aG9kLWJ1dHRvbnN8aGVyZX0uIEZvciBsb2NhbCBwYXltZW50cyBzdXBwb3J0ZWQgaW4gbXVsdGlwbGUgY291bnRyaWVzLCB0aGlzIHZhbHVlIG1heSBkZXRlcm1pbmUgd2hpY2ggYmFua3MgYXJlIHByZXNlbnRlZCB0byB0aGUgY3VzdG9tZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZW1haWwgUGF5ZXIgZW1haWwgb2YgdGhlIGN1c3RvbWVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGdpdmVuTmFtZSBGaXJzdCBuYW1lIG9mIHRoZSBjdXN0b21lci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdXJuYW1lIExhc3QgbmFtZSBvZiB0aGUgY3VzdG9tZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGhvbmUgUGhvbmUgbnVtYmVyIG9mIHRoZSBjdXN0b21lci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaWMgQmFuayBJZGVudGlmaWNhdGlvbiBDb2RlIG9mIHRoZSBjdXN0b21lciAoc3BlY2lmaWMgdG8gaURFQUwgdHJhbnNhY3Rpb25zKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcmVjdXJyZW50IEVuYWJsZSByZWN1cnJlbnQgcGF5bWVudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXN0b21lcklkIFRoZSBjdXN0b21lcidzIGlkIGluIG1lcmNoYW50J3Mgc3lzdGVtIChyZXF1aXJlZCBmb3IgcmVjdXJyZW50IHBheW1lbnRzKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2hpcHBpbmdBZGRyZXNzUmVxdWlyZWQgSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRoZSBwYXltZW50IG5lZWRzIHRvIGJlIHNoaXBwZWQuIEZvciBkaWdpdGFsIGdvb2RzLCB0aGlzIHNob3VsZCBiZSBmYWxzZS4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gKiBAcHJvcGVydHkge29iamVjdH0gYWRkcmVzcyBUaGUgc2hpcHBpbmcgYWRkcmVzcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZGRyZXNzLnN0cmVldEFkZHJlc3MgTGluZSAxIG9mIHRoZSBBZGRyZXNzIChlZy4gbnVtYmVyLCBzdHJlZXQsIGV0YykuIEFuIGVycm9yIHdpbGwgb2NjdXIgaWYgdGhpcyBhZGRyZXNzIGlzIG5vdCB2YWxpZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZGRyZXNzLmV4dGVuZGVkQWRkcmVzcyBMaW5lIDIgb2YgdGhlIEFkZHJlc3MgKGVnLiBzdWl0ZSwgYXB0ICMsIGV0Yy4pLiBBbiBlcnJvciB3aWxsIG9jY3VyIGlmIHRoaXMgYWRkcmVzcyBpcyBub3QgdmFsaWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYWRkcmVzcy5sb2NhbGl0eSBDdXN0b21lcidzIGNpdHkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYWRkcmVzcy5yZWdpb24gQ3VzdG9tZXIncyByZWdpb24gb3Igc3RhdGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYWRkcmVzcy5wb3N0YWxDb2RlIEN1c3RvbWVyJ3MgcG9zdGFsIGNvZGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYWRkcmVzcy5jb3VudHJ5Q29kZSBDdXN0b21lcidzIGNvdW50cnkgY29kZSAodHdvLWNoYXJhY3RlciBJU08gMzE2Ni0xIGNvZGUpLlxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25QYXltZW50U3RhcnQgQSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdpdGggdHdvIHBhcmFtZXRlcnM6IGFuIG9iamVjdCBjb250YWluaW5nIHRoZSAgYHBheW1lbnRJZGAgYW5kIGEgYGNvbnRpbnVlQ2FsbGJhY2tgIHRoYXQgbXVzdCBiZSBjYWxsZWQgdG8gbGF1bmNoIHRoZSBmbG93LiBZb3UgY2FuIHVzZSBtZXRob2QgdG8gZG8gYW55IHByZXByb2Nlc3Npbmcgb24geW91ciBzZXJ2ZXIgYmVmb3JlIHRoZSBmbG93IGJlZ2lucy4uXG4gKi9cblxuLyoqXG4gKiBPcHRpb25zIHVzZWQgZm9yIHRoZSBQYXkgVXBvbiBJbnZvaWNlIGxvY2FsIHBheW1lbnQgdHlwZS5cbiAqIEB0eXBlZGVmIHtvYmplY3R9IExvY2FsUGF5bWVudH5TdGFydFBheW1lbnRQYXlVcG9uSW52b2ljZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhbW91bnQgVGhlIGFtb3VudCB0byBhdXRob3JpemUgZm9yIHRoZSB0cmFuc2FjdGlvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXJyZW5jeUNvZGUgVGhlIGN1cnJlbmN5IHRvIHByb2Nlc3MgdGhlIHBheW1lbnQgKHRocmVlLWNoYXJhY3RlciBJU08tNDIxNykuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2Rpc3BsYXlOYW1lXSBUaGUgbWVyY2hhbnQgbmFtZSBkaXNwbGF5ZWQgaW5zaWRlIG9mIHRoZSB3aW5kb3cgdGhhdCBpcyBvcGVuZWQgd2hlbiBzdGFydGluZyB0aGUgcGF5bWVudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYXltZW50VHlwZSBUaGUgdHlwZSBvZiBsb2NhbCBwYXltZW50LiBNdXN0IGJlIGBwYXlfdXBvbl9pbnZvaWNlYC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGF5bWVudFR5cGVDb3VudHJ5Q29kZV0gVGhlIGNvdW50cnkgY29kZSBvZiB0aGUgbG9jYWwgcGF5bWVudC4gVGhpcyB2YWx1ZSBtdXN0IGJlIG9uZSBvZiB0aGUgc3VwcG9ydGVkIGNvdW50cnkgY29kZXMgZm9yIGEgZ2l2ZW4gbG9jYWwgcGF5bWVudCB0eXBlIGxpc3RlZCB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9icmFpbnRyZWUvZG9jcy9ndWlkZXMvbG9jYWwtcGF5bWVudC1tZXRob2RzL2NsaWVudC1zaWRlLWN1c3RvbS9qYXZhc2NyaXB0L3YzI3JlbmRlci1sb2NhbC1wYXltZW50LW1ldGhvZC1idXR0b25zfGhlcmV9LiBGb3IgbG9jYWwgcGF5bWVudHMgc3VwcG9ydGVkIGluIG11bHRpcGxlIGNvdW50cmllcywgdGhpcyB2YWx1ZSBtYXkgZGV0ZXJtaW5lIHdoaWNoIGJhbmtzIGFyZSBwcmVzZW50ZWQgdG8gdGhlIGN1c3RvbWVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGVtYWlsIFBheWVyIGVtYWlsIG9mIHRoZSBjdXN0b21lci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBnaXZlbk5hbWUgRmlyc3QgbmFtZSBvZiB0aGUgY3VzdG9tZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3VybmFtZSBMYXN0IG5hbWUgb2YgdGhlIGN1c3RvbWVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBob25lIFBob25lIG51bWJlciBvZiB0aGUgY3VzdG9tZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGhvbmVDb3VudHJ5Q29kZSBUaGUgY291bnRyeSBjYWxsaW5nIGNvZGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmlydGhEYXRlIFRoZSBiaXJ0aCBkYXRlIG9mIHRoZSBjdXN0b21lciBpbiBgWVlZWS1NTS1ERGAgZm9ybWF0LlxuICogQHByb3BlcnR5IHtvYmplY3R9IGFkZHJlc3MgVGhlIHNoaXBwaW5nIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYWRkcmVzcy5zdHJlZXRBZGRyZXNzIExpbmUgMSBvZiB0aGUgQWRkcmVzcyAoZWcuIG51bWJlciwgc3RyZWV0LCBldGMpLiBBbiBlcnJvciB3aWxsIG9jY3VyIGlmIHRoaXMgYWRkcmVzcyBpcyBub3QgdmFsaWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2FkZHJlc3MuZXh0ZW5kZWRBZGRyZXNzXSBMaW5lIDIgb2YgdGhlIEFkZHJlc3MgKGVnLiBzdWl0ZSwgYXB0ICMsIGV0Yy4pLiBBbiBlcnJvciB3aWxsIG9jY3VyIGlmIHRoaXMgYWRkcmVzcyBpcyBub3QgdmFsaWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYWRkcmVzcy5sb2NhbGl0eSBDdXN0b21lcidzIGNpdHkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2FkZHJlc3MucmVnaW9uXSBDdXN0b21lcidzIHJlZ2lvbiBvciBzdGF0ZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZGRyZXNzLnBvc3RhbENvZGUgQ3VzdG9tZXIncyBwb3N0YWwgY29kZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZGRyZXNzLmNvdW50cnlDb2RlIEN1c3RvbWVyJ3MgY291bnRyeSBjb2RlICh0d28tY2hhcmFjdGVyIElTTyAzMTY2LTEgY29kZSkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NoaXBwaW5nQW1vdW50XSBUaGUgc2hpcHBpbmcgZmVlIGZvciBhbGwgaXRlbXMuIFRoaXMgdmFsdWUgY2FuIG5vdCBiZSBhIG5lZ2F0aXZlIG51bWJlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZGlzY291bnRBbW91bnRdIFRoZSBkaXNjb3VudCBmb3IgYWxsIGl0ZW1zLiBUaGlzIHZhbHVlIGNhbiBub3QgYmUgYSBuZWdhdGl2ZSBudW1iZXIuXG4gKiBAcHJvcGVydHkge29iamVjdH0gYmlsbGluZ0FkZHJlc3MgVGhlIGJpbGxpbmcgYWRkcmVzcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaWxsaW5nQWRkcmVzcy5zdHJlZXRBZGRyZXNzIExpbmUgMSBvZiB0aGUgQWRkcmVzcyAoZWcuIG51bWJlciwgc3RyZWV0LCBldGMpLiBBbiBlcnJvciB3aWxsIG9jY3VyIGlmIHRoaXMgYWRkcmVzcyBpcyBub3QgdmFsaWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2JpbGxpbmdBZGRyZXNzLmV4dGVuZGVkQWRkcmVzc10gTGluZSAyIG9mIHRoZSBBZGRyZXNzIChlZy4gc3VpdGUsIGFwdCAjLCBldGMuKS4gQW4gZXJyb3Igd2lsbCBvY2N1ciBpZiB0aGlzIGFkZHJlc3MgaXMgbm90IHZhbGlkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbGxpbmdBZGRyZXNzLmxvY2FsaXR5IEN1c3RvbWVyJ3MgY2l0eS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYmlsbGluZ0FkZHJlc3MucmVnaW9uXSBDdXN0b21lcidzIHJlZ2lvbiBvciBzdGF0ZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaWxsaW5nQWRkcmVzcy5wb3N0YWxDb2RlIEN1c3RvbWVyJ3MgcG9zdGFsIGNvZGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmlsbGluZ0FkZHJlc3MuY291bnRyeUNvZGUgQ3VzdG9tZXIncyBjb3VudHJ5IGNvZGUgKHR3by1jaGFyYWN0ZXIgSVNPIDMxNjYtMSBjb2RlKS5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0W119IGxpbmVJdGVtcyBMaXN0IG9mIGxpbmUgaXRlbXMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbGluZUl0ZW1zLmNhdGVnb3J5IFRoZSBpdGVtIGNhdGVnb3J5IHR5cGU6IGAnRElHSVRBTF9HT09EUydgLCBgJ1BIWVNJQ0FMX0dPT0RTJ2AsIG9yIGAnRE9OQVRJT04nYC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBsaW5lSXRlbXMubmFtZSBJdGVtIG5hbWUuIE1heGltdW0gMTI3IGNoYXJhY3RlcnMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbGluZUl0ZW1zLnF1YW50aXR5IE51bWJlciBvZiB1bml0cyBvZiB0aGUgaXRlbSBwdXJjaGFzZWQuIFRoaXMgdmFsdWUgbXVzdCBiZSBhIHdob2xlIG51bWJlciBhbmQgY2FuJ3QgYmUgbmVnYXRpdmUgb3IgemVyby5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBsaW5lSXRlbXMudW5pdEFtb3VudCBQZXItdW5pdCBwcmljZSBvZiB0aGUgaXRlbS4gQ2FuIGluY2x1ZGUgdXAgdG8gMiBkZWNpbWFsIHBsYWNlcy4gVGhpcyB2YWx1ZSBjYW4ndCBiZSBuZWdhdGl2ZSBvciB6ZXJvLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGxpbmVJdGVtcy51bml0VGF4QW1vdW50IFBlci11bml0IHRheCBwcmljZSBvZiB0aGUgaXRlbS4gQ2FuIGluY2x1ZGUgdXAgdG8gMiBkZWNpbWFsIHBsYWNlcy4gVGhpcyB2YWx1ZSBjYW4ndCBiZSBuZWdhdGl2ZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBsb2NhbGUgVGhlIEJDUCA0Ny1mb3JtYXR0ZWQgbG9jYWxlLiBQYXlQYWwgc3VwcG9ydHMgYSBmaXZlLWNoYXJhY3RlciBjb2RlLiBGb3IgZXhhbXBsZSwgYGVuLURFYCwgYGRhLURLYCwgYGhlLUlMYCwgYGlkLUlEYCwgYGphLUpQYCwgYG5vLU5PYCwgYHB0LUJSYCwgYHJ1LVJVYCwgYHN2LVNFYCwgYHRoLVRIYCwgYHpoLUNOYCwgYHpoLUhLYCwgb3IgYHpoLVRXYC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXN0b21lclNlcnZpY2VJbnN0cnVjdGlvbnMgSW5zdHJ1Y3Rpb25zIGZvciBob3cgdG8gY29udGFjdCB0aGUgbWVyY2hhbnQncyBjdXN0b21lciBzZXJ2aWNlLiBNYXhpbXVtIDQsMDAwIGNoYXJhY3RlcnMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29ycmVsYXRpb25JZCBVc2VkIHRvIGNvcnJlbGF0ZSB1c2VyIHNlc3Npb25zIHdpdGggc2VydmVyIHRyYW5zYWN0aW9ucy5cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IG9uUGF5bWVudFN0YXJ0IEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgcGF5bWVudElkYC4gVGhlIGBjb250aW51ZUNhbGxiYWNrYCBpcyBub3QgcHJvdmlkZWQgYXMgaXQgaXMgbm90IG5lZWRlZCBmb3IgdGhpcyB1c2UgY2FzZS5cbiAqL1xuXG4vKipcbiAqIE9wdGlvbnMgdXNlZCBmb3IgdGhlIHNlYW1sZXNzL29uZWNsaWNrIEJMSUsgbG9jYWwgcGF5bWVudCB0eXBlLlxuICogQHR5cGVkZWYge29iamVjdH0gTG9jYWxQYXltZW50flN0YXJ0UGF5bWVudE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhbW91bnQgVGhlIGFtb3VudCB0byBhdXRob3JpemUgZm9yIHRoZSB0cmFuc2FjdGlvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXJyZW5jeUNvZGUgVGhlIGN1cnJlbmN5IHRvIHByb2Nlc3MgdGhlIHBheW1lbnQgKHRocmVlLWNoYXJhY3RlciBJU08tNDIxNykuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2Rpc3BsYXlOYW1lXSBUaGUgbWVyY2hhbnQgbmFtZSBkaXNwbGF5ZWQgaW5zaWRlIG9mIHRoZSB3aW5kb3cgdGhhdCBpcyBvcGVuZWQgd2hlbiBzdGFydGluZyB0aGUgcGF5bWVudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYXltZW50VHlwZSBUaGUgdHlwZSBvZiBsb2NhbCBwYXltZW50LiBNdXN0IGJlIGBibGlrYC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYXltZW50VHlwZUNvdW50cnlDb2RlIFRoZSBjb3VudHJ5IGNvZGUgb2YgdGhlIGxvY2FsIHBheW1lbnQuIFRoaXMgdmFsdWUgbXVzdCBiZSBvbmUgb2YgdGhlIHN1cHBvcnRlZCBjb3VudHJ5IGNvZGVzIGZvciBhIGdpdmVuIGxvY2FsIHBheW1lbnQgdHlwZSBsaXN0ZWQge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vYnJhaW50cmVlL2RvY3MvZ3VpZGVzL2xvY2FsLXBheW1lbnQtbWV0aG9kcy9jbGllbnQtc2lkZS1jdXN0b20vamF2YXNjcmlwdC92MyNyZW5kZXItbG9jYWwtcGF5bWVudC1tZXRob2QtYnV0dG9uc3xoZXJlfS4gRm9yIGxvY2FsIHBheW1lbnRzIHN1cHBvcnRlZCBpbiBtdWx0aXBsZSBjb3VudHJpZXMsIHRoaXMgdmFsdWUgbWF5IGRldGVybWluZSB3aGljaCBiYW5rcyBhcmUgcHJlc2VudGVkIHRvIHRoZSBjdXN0b21lci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBlbWFpbCBQYXllciBlbWFpbCBvZiB0aGUgY3VzdG9tZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZ2l2ZW5OYW1lIEZpcnN0IG5hbWUgb2YgdGhlIGN1c3RvbWVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN1cm5hbWUgTGFzdCBuYW1lIG9mIHRoZSBjdXN0b21lci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwaG9uZSBQaG9uZSBudW1iZXIgb2YgdGhlIGN1c3RvbWVyLlxuICogQHByb3BlcnR5IHtib29sZWFufSBzaGlwcGluZ0FkZHJlc3NSZXF1aXJlZCBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdGhlIHBheW1lbnQgbmVlZHMgdG8gYmUgc2hpcHBlZC4gRm9yIGRpZ2l0YWwgZ29vZHMsIHRoaXMgc2hvdWxkIGJlIGZhbHNlLiBEZWZhdWx0cyB0byBmYWxzZS5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBhZGRyZXNzIFRoZSBzaGlwcGluZyBhZGRyZXNzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFkZHJlc3Muc3RyZWV0QWRkcmVzcyBMaW5lIDEgb2YgdGhlIEFkZHJlc3MgKGVnLiBudW1iZXIsIHN0cmVldCwgZXRjKS4gQW4gZXJyb3Igd2lsbCBvY2N1ciBpZiB0aGlzIGFkZHJlc3MgaXMgbm90IHZhbGlkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFkZHJlc3MuZXh0ZW5kZWRBZGRyZXNzIExpbmUgMiBvZiB0aGUgQWRkcmVzcyAoZWcuIHN1aXRlLCBhcHQgIywgZXRjLikuIEFuIGVycm9yIHdpbGwgb2NjdXIgaWYgdGhpcyBhZGRyZXNzIGlzIG5vdCB2YWxpZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZGRyZXNzLmxvY2FsaXR5IEN1c3RvbWVyJ3MgY2l0eS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZGRyZXNzLnJlZ2lvbiBDdXN0b21lcidzIHJlZ2lvbiBvciBzdGF0ZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZGRyZXNzLnBvc3RhbENvZGUgQ3VzdG9tZXIncyBwb3N0YWwgY29kZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZGRyZXNzLmNvdW50cnlDb2RlIEN1c3RvbWVyJ3MgY291bnRyeSBjb2RlICh0d28tY2hhcmFjdGVyIElTTyAzMTY2LTEgY29kZSkuXG4gKiBAcHJvcGVydHkge29iamVjdH0gYmxpa09wdGlvbnMgQmxpayBzZWFtbGVzcy9vbmVjbGljayBzcGVjaWZpYyBvcHRpb25zLiBTaG91bGQgY29udGFpbiBvbmx5IG9uZSBvYmplY3Q6IGBsZXZlbF8wYCBvciBgb25lQ2xpY2tgLlxuICogQHByb3BlcnR5IHtvYmplY3R9IGJsaWtPcHRpb25zLmxldmVsXzAgQmxpayBzZWFtbGVzcyBzcGVjaWZpYyBvcHRpb25zLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJsaWtPcHRpb25zLmxldmVsXzAuYXV0aENvZGUgNi1kaWdpdCBjb2RlIHVzZWQgdG8gYXV0aGVudGljYXRlIGEgY29uc3VtZXIgd2l0aGluIEJMSUsuXG4gKiBAcHJvcGVydHkge29iamVjdH0gYmxpa09wdGlvbnMub25lQ2xpY2sgQmxpayBvbmVjbGljayBzcGVjaWZpYyBvcHRpb25zLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJsaWtPcHRpb25zLm9uZUNsaWNrLmF1dGhDb2RlIDYtZGlnaXQgY29kZSB1c2VkIHRvIGF1dGhlbnRpY2F0ZSBhIGNvbnN1bWVyIHdpdGhpbiBCTElLLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJsaWtPcHRpb25zLm9uZUNsaWNrLmNvbnN1bWVyUmVmZXJlbmNlIFRoZSBtZXJjaGFudCBnZW5lcmF0ZWQsIHVuaXF1ZSByZWZlcmVuY2Ugc2VydmluZyBhcyBhIHByaW1hcnkgaWRlbnRpZmllciBmb3IgYWNjb3VudHMgY29ubmVjdGVkIGJldHdlZW4gQmxpayBhbmQgYSBtZXJjaGFudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBibGlrT3B0aW9ucy5vbmVDbGljay5hbGlhc0xhYmVsIEEgYmFuayBkZWZpbmVkIGlkZW50aWZpZXIgdXNlZCBhcyBhIGRpc3BsYXkgbmFtZSB0byBhbGxvdyB0aGUgcGF5ZXIgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIG11bHRpcGxlIHJlZ2lzdGVyZWQgYmFuayBhY2NvdW50cy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBibGlrT3B0aW9ucy5vbmVDbGljay5hbGlhc0tleSBBIEJsaWstZGVmaW5lZCBpZGVudGlmaWVyIGZvciBhIHNwZWNpZmljIEJsaWstZW5hYmxlZCBiYW5rIGFjY291bnQgdGhhdCBpcyBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBtZXJjaGFudC4gVXNlZCBvbmx5IGluIGNvbmp1bmN0aW9uIHdpdGggYSBDb25zdW1lciBSZWZlcmVuY2UuXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBvblBheW1lbnRTdGFydCBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHBheW1lbnRJZGAuIFRoZSBgY29udGludWVDYWxsYmFja2AgaXMgbm90IHByb3ZpZGVkIGFzIGl0IGlzIG5vdCBuZWVkZWQgZm9yIHRoaXMgdXNlIGNhc2UuXG4gKi9cblxuLyoqXG4gKiBMYXVuY2hlcyB0aGUgbG9jYWwgcGF5bWVudCBmbG93IGFuZCByZXR1cm5zIGEgbm9uY2UgcGF5bG9hZC4gT25seSBvbmUgbG9jYWwgcGF5bWVudCBmbG93IHNob3VsZCBiZSBhY3RpdmUgYXQgYSB0aW1lLiBPbmUgd2F5IHRvIGFjaGlldmUgdGhpcyBpcyB0byBkaXNhYmxlIHlvdXIgbG9jYWwgcGF5bWVudCBidXR0b24gd2hpbGUgdGhlIGZsb3cgaXMgb3Blbi5cbiAqIEBwdWJsaWNcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMb2NhbFBheW1lbnR+U3RhcnRQYXltZW50T3B0aW9uc3xMb2NhbFBheW1lbnR+U3RhcnRQYXltZW50UGF5VXBvbkludm9pY2VPcHRpb25zfSBvcHRpb25zIE9wdGlvbnMgZm9yIGluaXRpYXRpbmcgdGhlIGxvY2FsIHBheW1lbnQgcGF5bWVudCBmbG93LlxuICogQHBhcmFtIHtjYWxsYmFja30gY2FsbGJhY2sgVGhlIHNlY29uZCBhcmd1bWVudCwgPGNvZGU+ZGF0YTwvY29kZT4sIGlzIGEge0BsaW5rIExvY2FsUGF5bWVudH5zdGFydFBheW1lbnRQYXlsb2FkfHN0YXJ0UGF5bWVudFBheWxvYWR9LiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgdGhlIG1ldGhvZCB3aWxsIHJldHVybiBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEge0BsaW5rIExvY2FsUGF5bWVudH5zdGFydFBheW1lbnRQYXlsb2FkfHN0YXJ0UGF5bWVudFBheWxvYWR9LlxuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqIEBleGFtcGxlXG4gKiBsb2NhbFBheW1lbnRJbnN0YW5jZS5zdGFydFBheW1lbnQoe1xuICogICBwYXltZW50VHlwZTogJ2lkZWFsJyxcbiAqICAgcGF5bWVudFR5cGVDb3VudHJ5Q29kZTogJ05MJyxcbiAqICAgZmFsbGJhY2s6IHtcbiAqICAgICBidXR0b25UZXh0OiAnUmV0dXJuIHRvIE1lcmNoYW50JyxcbiAqICAgICB1cmw6ICdodHRwczovL2V4YW1wbGUuY29tL215LWNoZWNrb3V0LXBhZ2UnXG4gKiAgIH0sXG4gKiAgIGFtb3VudDogJzEwLjAwJyxcbiAqICAgY3VycmVuY3lDb2RlOiAnRVVSJyxcbiAqICAgZ2l2ZW5OYW1lOiAnSm9lJyxcbiAqICAgc3VybmFtZTogJ0RvZScsXG4gKiAgIGFkZHJlc3M6IHtcbiAqICAgICBjb3VudHJ5Q29kZTogJ05MJ1xuICogICB9LFxuICogICBvblBheW1lbnRTdGFydDogZnVuY3Rpb24gKGRhdGEsIGNvbnRpbnVlQ2FsbGJhY2spIHtcbiAqICAgICAvLyBEbyBhbnkgcHJlcHJvY2Vzc2luZyBiZWZvcmUgc3RhcnRpbmcgdGhlIGZsb3dcbiAqICAgICAvLyBkYXRhLnBheW1lbnRJZCBpcyB0aGUgSUQgb2YgdGhlIGxvY2FsUGF5bWVudFxuICogICAgIGNvbnRpbnVlQ2FsbGJhY2soKTtcbiAqICAgfVxuICogfSkudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICogICAvLyBTdWJtaXQgcGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlclxuICogfSkuY2F0Y2goZnVuY3Rpb24gKHN0YXJ0UGF5bWVudEVycm9yKSB7XG4gKiAgIC8vIEhhbmRsZSBmbG93IGVycm9ycyBvciBwcmVtYXR1cmUgZmxvdyBjbG9zdXJlXG4gKiAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIScsIHN0YXJ0UGF5bWVudEVycm9yKTtcbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+UGF5IFVwb24gSW52b2ljZTwvY2FwdGlvbj5cbiAqIGxvY2FsUGF5bWVudEluc3RhbmNlLnN0YXJ0UGF5bWVudCh7XG4gKiAgIHBheW1lbnRUeXBlOiAncGF5X3Vwb25faW52b2ljZScsXG4gKiAgIGFtb3VudDogJzEwMC4wMCcsXG4gKiAgIGN1cnJlbmN5Q29kZTogJ0VVUicsXG4gKiAgIGdpdmVuTmFtZTogJ01heCcsXG4gKiAgIHN1cm5hbWU6ICdNdXN0ZXJtYW5uJyxcbiAqICAgYWRkcmVzczogeyAvLyBUaGlzIGlzIHVzZWQgYXMgdGhlIHNoaXBwaW5nIGFkZHJlc3MuXG4gKiAgICAgc3RyZWV0QWRkcmVzczogJ1RhdW51c2FubGFnZSAxMicsXG4gKiAgICAgbG9jYWxpdHk6ICdGcmFua2Z1cnQnLFxuICogICAgIHBvc3RhbENvZGU6ICc2MDMyNScsXG4gKiAgICAgY291bnRyeUNvZGU6ICdERScsXG4gKiAgIH0sXG4gKiAgIGJpbGxpbmdBZGRyZXNzOiB7XG4gKiAgICAgc3RyZWV0QWRkcmVzczogJ1NjaMO2bmhhdXNlciBBbGxlZSA4NCcsXG4gKiAgICAgbG9jYWxpdHk6ICdCZXJsaW4nLFxuICogICAgIHBvc3RhbENvZGU6ICcxMDQzOScsXG4gKiAgICAgY291bnRyeUNvZGU6ICdERSdcbiAqICAgfSxcbiAqICAgYmlydGhEYXRlOiAnMTk5MC0wMS0wMScsXG4gKiAgIGVtYWlsOiAnYnV5ZXJAZXhhbXBsZS5jb20nLFxuICogICBsb2NhbGU6ICdlbi1ERScsXG4gKiAgIGN1c3RvbWVyU2VydmljZUluc3RydWN0aW9uczogJ0N1c3RvbWVyIHNlcnZpY2UgcGhvbmUgaXMgKzQ5IDY5MTIzNDU2NzguJyxcbiAqICAgbGluZUl0ZW1zOiBbe1xuICogICAgIGNhdGVnb3J5OiAnUEhZU0lDQUxfR09PRFMnLFxuICogICAgIG5hbWU6ICdCYXNrZXRiYWxsIFNob2VzJyxcbiAqICAgICBxdWFudGl0eTogJzEnLFxuICogICAgIHVuaXRBbW91bnQ6ICc4MS4wMCcsXG4gKiAgICAgdW5pdFRheEFtb3VudDogJzE5LjAwJyxcbiAqICAgfV0sXG4gKiAgIHBob25lOiAnNjkxMjM0NTY3OCcsXG4gKiAgIHBob25lQ291bnRyeUNvZGU6ICc0OScsXG4gKiAgIGNvcnJlbGF0aW9uSWQ6IGNvcnJlbGF0aW9uSWQsXG4gKiAgIG9uUGF5bWVudFN0YXJ0OiBmdW5jdGlvbiAoZGF0YSkge1xuICogICAgIC8vIE5PVEU6IEl0IGlzIGNyaXRpY2FsIGhlcmUgdG8gc3RvcmUgZGF0YS5wYXltZW50SWQgb24geW91ciBzZXJ2ZXJcbiAqICAgICAvLyAgICAgICBzbyBpdCBjYW4gYmUgbWFwcGVkIHRvIGEgd2ViaG9vayBzZW50IGJ5IEJyYWludHJlZSBvbmNlIHRoZVxuICogICAgIC8vICAgICAgIGJ1eWVyIGNvbXBsZXRlcyB0aGVpciBwYXltZW50LlxuICogICAgIGNvbnNvbGUubG9nKCdQYXltZW50IElEOicsIGRhdGEucGF5bWVudElkKTtcbiAqICAgfSxcbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgLy8gSGFuZGxlIGFueSBlcnJvciBjYWxsaW5nIHN0YXJ0UGF5bWVudC5cbiAqICAgY29uc29sZS5lcnJvcihlcnIpO1xuICogfSk7XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5CTElLIHNlYW1sZXNzPC9jYXB0aW9uPlxuICogbG9jYWxQYXltZW50SW5zdGFuY2Uuc3RhcnRQYXltZW50KHtcbiAqICAgcGF5bWVudFR5cGU6ICdibGlrJyxcbiAqICAgcGF5bWVudFR5cGVDb3VudHJ5Q29kZTogJ1BMJyxcbiAqICAgYW1vdW50OiAnMTAuMDAnLFxuICogICBjdXJyZW5jeUNvZGU6ICdQTE4nLFxuICogICBnaXZlbk5hbWU6ICdKb2UnLFxuICogICBzdXJuYW1lOiAnRG9lJyxcbiAqICAgcGhvbmU6ICcxMjM0NTY2Nzg5JyxcbiAqICAgYWRkcmVzczoge1xuICogICAgIHN0cmVldEFkZHJlc3M6ICdNb2tvdG93c2thIDEyMzQnLFxuICogICAgIGxvY2FsaXR5OiAnV2Fyc2F3JyxcbiAqICAgICBwb3N0YWxDb2RlOiAnMDItNjk3JyxcbiAqICAgICBjb3VudHJ5Q29kZTogJ1BMJyxcbiAqICAgfSxcbiAqICAgYmxpa09wdGlvbnM6IHtcbiAqICAgICBsZXZlbF8wOiB7XG4gKiAgICAgICBhdXRoQ29kZTogXCIxMjM0NTZcIixcbiAqICAgICB9LFxuICogICB9LFxuICogICBvblBheW1lbnRTdGFydDogZnVuY3Rpb24gKGRhdGEpIHtcbiAqICAgICAvLyBOT1RFOiBJdCBpcyBjcml0aWNhbCBoZXJlIHRvIHN0b3JlIGRhdGEucGF5bWVudElkIG9uIHlvdXIgc2VydmVyXG4gKiAgICAgLy8gICAgICAgc28gaXQgY2FuIGJlIG1hcHBlZCB0byBhIHdlYmhvb2sgc2VudCBieSBCcmFpbnRyZWUgb25jZSB0aGVcbiAqICAgICAvLyAgICAgICBidXllciBjb21wbGV0ZXMgdGhlaXIgcGF5bWVudC5cbiAqICAgICBjb25zb2xlLmxvZygnUGF5bWVudCBJRDonLCBkYXRhLnBheW1lbnRJZCk7XG4gKiAgIH0sXG4gKiB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gKiAgIC8vIEhhbmRsZSBhbnkgZXJyb3IgY2FsbGluZyBzdGFydFBheW1lbnQuXG4gKiAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+QkxJSyBvbmVjbGljayBmaXJzdCBwYXltZW50PC9jYXB0aW9uPlxuICogbG9jYWxQYXltZW50SW5zdGFuY2Uuc3RhcnRQYXltZW50KHtcbiAqICAgcGF5bWVudFR5cGU6ICdibGlrJyxcbiAqICAgcGF5bWVudFR5cGVDb3VudHJ5Q29kZTogJ1BMJyxcbiAqICAgYW1vdW50OiAnMTAuMDAnLFxuICogICBjdXJyZW5jeUNvZGU6ICdQTE4nLFxuICogICBnaXZlbk5hbWU6ICdKb2UnLFxuICogICBzdXJuYW1lOiAnRG9lJyxcbiAqICAgcGhvbmU6ICcxMjM0NTY2Nzg5JyxcbiAqICAgYWRkcmVzczoge1xuICogICAgIHN0cmVldEFkZHJlc3M6ICdNb2tvdG93c2thIDEyMzQnLFxuICogICAgIGxvY2FsaXR5OiAnV2Fyc2F3JyxcbiAqICAgICBwb3N0YWxDb2RlOiAnMDItNjk3JyxcbiAqICAgICBjb3VudHJ5Q29kZTogJ1BMJyxcbiAqICAgfSxcbiAqICAgYmxpa09wdGlvbnM6IHtcbiAqICAgICBvbmVDbGljazoge1xuICogICAgICAgYXV0aENvZGU6IFwiMTIzNDU2XCIsXG4gKiAgICAgICBjb25zdW1lclJlZmVyZW5jZTogXCJBQkNkZTEyM1wiLFxuICogICAgICAgYWxpYXNMYWJlbDogXCJteSB1bmlxIGFsaWFzXCIsXG4gKiAgICAgfSxcbiAqICAgfSxcbiAqICAgb25QYXltZW50U3RhcnQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gKiAgICAgLy8gTk9URTogSXQgaXMgY3JpdGljYWwgaGVyZSB0byBzdG9yZSBkYXRhLnBheW1lbnRJZCBvbiB5b3VyIHNlcnZlclxuICogICAgIC8vICAgICAgIHNvIGl0IGNhbiBiZSBtYXBwZWQgdG8gYSB3ZWJob29rIHNlbnQgYnkgQnJhaW50cmVlIG9uY2UgdGhlXG4gKiAgICAgLy8gICAgICAgYnV5ZXIgY29tcGxldGVzIHRoZWlyIHBheW1lbnQuXG4gKiAgICAgY29uc29sZS5sb2coJ1BheW1lbnQgSUQ6JywgZGF0YS5wYXltZW50SWQpO1xuICogICB9LFxuICogfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICogICAvLyBIYW5kbGUgYW55IGVycm9yIGNhbGxpbmcgc3RhcnRQYXltZW50LlxuICogICBjb25zb2xlLmVycm9yKGVycik7XG4gKiB9KTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkJMSUsgb25lY2xpY2sgc3Vic2VxdWVudCBwYXltZW50PC9jYXB0aW9uPlxuICogbG9jYWxQYXltZW50SW5zdGFuY2Uuc3RhcnRQYXltZW50KHtcbiAqICAgcGF5bWVudFR5cGU6ICdibGlrJyxcbiAqICAgcGF5bWVudFR5cGVDb3VudHJ5Q29kZTogJ1BMJyxcbiAqICAgYW1vdW50OiAnMTAuMDAnLFxuICogICBjdXJyZW5jeUNvZGU6ICdQTE4nLFxuICogICBnaXZlbk5hbWU6ICdKb2UnLFxuICogICBzdXJuYW1lOiAnRG9lJyxcbiAqICAgcGhvbmU6ICcxMjM0NTY2Nzg5JyxcbiAqICAgYWRkcmVzczoge1xuICogICAgIHN0cmVldEFkZHJlc3M6ICdNb2tvdG93c2thIDEyMzQnLFxuICogICAgIGxvY2FsaXR5OiAnV2Fyc2F3JyxcbiAqICAgICBwb3N0YWxDb2RlOiAnMDItNjk3JyxcbiAqICAgICBjb3VudHJ5Q29kZTogJ1BMJyxcbiAqICAgfSxcbiAqICAgYmxpa09wdGlvbnM6IHtcbiAqICAgICBvbmVDbGljazoge1xuICogICAgICAgY29uc3VtZXJSZWZlcmVuY2U6IFwiQUJDZGUxMjNcIixcbiAqICAgICAgIGFsaWFzS2V5OiBcIjEyMzQ1Njc4OVwiLFxuICogICAgIH0sXG4gKiAgIH0sXG4gKiAgIG9uUGF5bWVudFN0YXJ0OiBmdW5jdGlvbiAoZGF0YSkge1xuICogICAgIC8vIE5PVEU6IEl0IGlzIGNyaXRpY2FsIGhlcmUgdG8gc3RvcmUgZGF0YS5wYXltZW50SWQgb24geW91ciBzZXJ2ZXJcbiAqICAgICAvLyAgICAgICBzbyBpdCBjYW4gYmUgbWFwcGVkIHRvIGEgd2ViaG9vayBzZW50IGJ5IEJyYWludHJlZSBvbmNlIHRoZVxuICogICAgIC8vICAgICAgIGJ1eWVyIGNvbXBsZXRlcyB0aGVpciBwYXltZW50LlxuICogICAgIGNvbnNvbGUubG9nKCdQYXltZW50IElEOicsIGRhdGEucGF5bWVudElkKTtcbiAqICAgfSxcbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgLy8gSGFuZGxlIGFueSBlcnJvciBjYWxsaW5nIHN0YXJ0UGF5bWVudC5cbiAqICAgY29uc29sZS5lcnJvcihlcnIpO1xuICogfSk7XG4gKi9cbkxvY2FsUGF5bWVudC5wcm90b3R5cGUuc3RhcnRQYXltZW50ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIG1pc3NpbmdPcHRpb24sXG4gICAgbWlzc2luZ0Vycm9yLFxuICAgIGFkZHJlc3MsXG4gICAgZmFsbGJhY2ssXG4gICAgcGFyYW1zLFxuICAgIHByb21pc2UsXG4gICAgYmlsbGluZ0FkZHJlc3MsXG4gICAgd2luZG93T3B0aW9ucyxcbiAgICBvblBheW1lbnRTdGFydFByb21pc2U7XG4gIHZhciBzZWxmID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgdmFyIHNlcnZpY2VJZCA9IHRoaXMuX2ZyYW1lU2VydmljZS5fc2VydmljZUlkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuXG4gIC8vIEluIG9yZGVyIHRvIHByb3ZpZGUgdGhlIG1lcmNoYW50IHdpdGggYXBwcm9wcmlhdGUgZXJyb3IgbWVzc2FnaW5nLFxuICAvLyBtb3JlIHJvYnVzdCB2YWxpZGF0aW9uIGlzIGJlaW5nIGRvbmUgb24gdGhlIGNsaWVudC1zaWRlLCBzaW5jZSBzb21lXG4gIC8vIG9wdGlvbiBuYW1lcyBhcmUgbWFwcGVkIHRvIGxlZ2FjeSBuYW1lcyBmb3IgdGhlIHNha2Ugb2YgdGhlIEFQSS5cbiAgLy8gRm9yIGV4YW1wbGUsIGlmIGBiaWxsaW5nQWRkcmVzcy5zdHJlZXRBZGRyZXNzYCB3YXMgbWlzc2luZywgdGhlblxuICAvLyB0aGUgQVBJIGVycm9yIHJlc3BvbnNlIHdvdWxkIHNheSB0aGF0IGBiaWxsaW5nX2FkZHJlc3MubGluZTFgIHdhc1xuICAvLyBtaXNzaW5nLiBUaGlzIGNsaWVudC1zaWRlIHZhbGlkYXRpb24gd2lsbCBjb3JyZWN0bHkgdGVsbCB0aGVcbiAgLy8gbWVyY2hhbnQgdGhhdCBgYmlsbGluZ0FkZHJlc3Muc3RyZWV0QWRkcmVzc2Agd2FzIG1pc3NpbmcuXG4gIG1pc3NpbmdPcHRpb24gPSBoYXNNaXNzaW5nT3B0aW9uKG9wdGlvbnMpO1xuICBpZiAobWlzc2luZ09wdGlvbikge1xuICAgIG1pc3NpbmdFcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcihcbiAgICAgIGVycm9ycy5MT0NBTF9QQVlNRU5UX1NUQVJUX1BBWU1FTlRfTUlTU0lOR19SRVFVSVJFRF9PUFRJT05cbiAgICApO1xuICAgIGlmICh0eXBlb2YgbWlzc2luZ09wdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbWlzc2luZ0Vycm9yLmRldGFpbHMgPSBcIk1pc3NpbmcgcmVxdWlyZWQgJ1wiICsgbWlzc2luZ09wdGlvbiArIFwiJyBvcHRpb24uXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1pc3NpbmdFcnJvcik7XG4gIH1cbiAgd2luZG93T3B0aW9ucyA9IG9wdGlvbnMud2luZG93T3B0aW9ucyB8fCB7fTtcbiAgYWRkcmVzcyA9IG9wdGlvbnMuYWRkcmVzcyB8fCB7fTtcbiAgZmFsbGJhY2sgPSBvcHRpb25zLmZhbGxiYWNrIHx8IHt9O1xuICBiaWxsaW5nQWRkcmVzcyA9IG9wdGlvbnMuYmlsbGluZ0FkZHJlc3MgfHwge307XG4gIHBhcmFtcyA9IHtcbiAgICBhbW91bnQ6IG9wdGlvbnMuYW1vdW50LFxuICAgIGJpYzogb3B0aW9ucy5iaWMsXG4gICAgYmlsbGluZ0FkZHJlc3M6IHtcbiAgICAgIGxpbmUxOiBiaWxsaW5nQWRkcmVzcy5zdHJlZXRBZGRyZXNzLFxuICAgICAgbGluZTI6IGJpbGxpbmdBZGRyZXNzLmV4dGVuZGVkQWRkcmVzcyxcbiAgICAgIGNpdHk6IGJpbGxpbmdBZGRyZXNzLmxvY2FsaXR5LFxuICAgICAgc3RhdGU6IGJpbGxpbmdBZGRyZXNzLnJlZ2lvbixcbiAgICAgIHBvc3RhbENvZGU6IGJpbGxpbmdBZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICBjb3VudHJ5Q29kZTogYmlsbGluZ0FkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgfSxcbiAgICBiaXJ0aERhdGU6IG9wdGlvbnMuYmlydGhEYXRlLFxuICAgIGJsaWtPcHRpb25zOiBvcHRpb25zLmJsaWtPcHRpb25zLFxuICAgIGNhbmNlbFVybDogcXVlcnlzdHJpbmcucXVlcnlpZnkoXG4gICAgICBzZWxmLl9hc3NldHNVcmwgK1xuICAgICAgICBcIi9odG1sL2xvY2FsLXBheW1lbnQtcmVkaXJlY3QtZnJhbWVcIiArXG4gICAgICAgIHVzZU1pbihzZWxmLl9pc0RlYnVnKSArXG4gICAgICAgIFwiLmh0bWxcIixcbiAgICAgIHtcbiAgICAgICAgY2hhbm5lbDogc2VydmljZUlkLFxuICAgICAgICByOiBmYWxsYmFjay5jYW5jZWxVcmwgfHwgZmFsbGJhY2sudXJsLFxuICAgICAgICB0OiBmYWxsYmFjay5jYW5jZWxCdXR0b25UZXh0IHx8IGZhbGxiYWNrLmJ1dHRvblRleHQsXG4gICAgICAgIGM6IDEsIC8vIGluZGljYXRpbmcgd2Ugd2VudCB0aHJvdWdoIHRoZSBjYW5jZWwgZmxvd1xuICAgICAgfVxuICAgICksXG4gICAgY2l0eTogYWRkcmVzcy5sb2NhbGl0eSxcbiAgICBjb3JyZWxhdGlvbklkOiBvcHRpb25zLmNvcnJlbGF0aW9uSWQsXG4gICAgY291bnRyeUNvZGU6IGFkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgY3VycmVuY3lJc29Db2RlOiBvcHRpb25zLmN1cnJlbmN5Q29kZSxcbiAgICBkaXNjb3VudEFtb3VudDogb3B0aW9ucy5kaXNjb3VudEFtb3VudCxcbiAgICBleHBlcmllbmNlUHJvZmlsZToge1xuICAgICAgYnJhbmROYW1lOiBvcHRpb25zLmRpc3BsYXlOYW1lLFxuICAgICAgY3VzdG9tZXJTZXJ2aWNlSW5zdHJ1Y3Rpb25zOiBvcHRpb25zLmN1c3RvbWVyU2VydmljZUluc3RydWN0aW9ucyxcbiAgICAgIGxvY2FsZTogb3B0aW9ucy5sb2NhbGUsXG4gICAgICBub1NoaXBwaW5nOiAhb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3NSZXF1aXJlZCxcbiAgICB9LFxuICAgIGZpcnN0TmFtZTogb3B0aW9ucy5naXZlbk5hbWUsXG4gICAgZnVuZGluZ1NvdXJjZTogb3B0aW9ucy5wYXltZW50VHlwZSxcbiAgICBpbnRlbnQ6IFwic2FsZVwiLFxuICAgIGxhc3ROYW1lOiBvcHRpb25zLnN1cm5hbWUsXG4gICAgbGluZTE6IGFkZHJlc3Muc3RyZWV0QWRkcmVzcyxcbiAgICBsaW5lMjogYWRkcmVzcy5leHRlbmRlZEFkZHJlc3MsXG4gICAgbGluZUl0ZW1zOiBvcHRpb25zLmxpbmVJdGVtcyxcbiAgICBtZXJjaGFudEFjY291bnRJZDogc2VsZi5fbWVyY2hhbnRBY2NvdW50SWQsXG4gICAgbWVyY2hhbnRPclBhcnRuZXJDdXN0b21lcklkOiBvcHRpb25zLmN1c3RvbWVySWQsXG4gICAgcGF5ZXJFbWFpbDogb3B0aW9ucy5lbWFpbCxcbiAgICBwYXltZW50VHlwZUNvdW50cnlDb2RlOiBvcHRpb25zLnBheW1lbnRUeXBlQ291bnRyeUNvZGUsXG4gICAgcGhvbmU6IG9wdGlvbnMucGhvbmUsXG4gICAgcGhvbmVDb3VudHJ5Q29kZTogb3B0aW9ucy5waG9uZUNvdW50cnlDb2RlLFxuICAgIHBvc3RhbENvZGU6IGFkZHJlc3MucG9zdGFsQ29kZSxcbiAgICByZWN1cnJlbnQ6IG9wdGlvbnMucmVjdXJyZW50LFxuICAgIHJldHVyblVybDogcXVlcnlzdHJpbmcucXVlcnlpZnkoXG4gICAgICBzZWxmLl9hc3NldHNVcmwgK1xuICAgICAgICBcIi9odG1sL2xvY2FsLXBheW1lbnQtcmVkaXJlY3QtZnJhbWVcIiArXG4gICAgICAgIHVzZU1pbihzZWxmLl9pc0RlYnVnKSArXG4gICAgICAgIFwiLmh0bWxcIixcbiAgICAgIHtcbiAgICAgICAgY2hhbm5lbDogc2VydmljZUlkLFxuICAgICAgICByOiBmYWxsYmFjay51cmwsXG4gICAgICAgIHQ6IGZhbGxiYWNrLmJ1dHRvblRleHQsXG4gICAgICB9XG4gICAgKSxcbiAgICBzaGlwcGluZ0Ftb3VudDogb3B0aW9ucy5zaGlwcGluZ0Ftb3VudCxcbiAgICBzdGF0ZTogYWRkcmVzcy5yZWdpb24sXG4gIH07XG5cbiAgc2VsZi5fcGF5bWVudFR5cGUgPSBvcHRpb25zLnBheW1lbnRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChzZWxmLl9hdXRob3JpemF0aW9uSW5Qcm9ncmVzcykge1xuICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICBzZWxmLl9jbGllbnQsXG4gICAgICBzZWxmLl9wYXltZW50VHlwZSArIFwiLmxvY2FsLXBheW1lbnQuc3RhcnQtcGF5bWVudC5lcnJvci5hbHJlYWR5LW9wZW5lZFwiXG4gICAgKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuTE9DQUxfUEFZTUVOVF9BTFJFQURZX0lOX1BST0dSRVNTKVxuICAgICk7XG4gIH1cblxuICBzZWxmLl9hdXRob3JpemF0aW9uSW5Qcm9ncmVzcyA9IHRydWU7XG5cbiAgcHJvbWlzZSA9IG5ldyBFeHRlbmRlZFByb21pc2UoKTtcblxuICAvLyBGb3IgZGVmZXJyZWQgcGF5bWVudCB0eXBlcywgdGhlIHBvcHVwIHdpbmRvdyBzaG91bGQgbm90IGJlIG9wZW5lZCxcbiAgLy8gc2luY2UgdGhlIGFjdHVhbCBwYXltZW50IHdpbGwgYmUgZG9uZSBvdXRzaWRlIG9mIHRoaXMgc2Vzc2lvbi5cbiAgaWYgKCFpc0RlZmVycmVkUGF5bWVudFR5cGVPcHRpb25zKG9wdGlvbnMpKSB7XG4gICAgc2VsZi5fc3RhcnRQYXltZW50Q2FsbGJhY2sgPSBzZWxmLl9jcmVhdGVTdGFydFBheW1lbnRDYWxsYmFjayhcbiAgICAgIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHZhbCk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBwcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBzZWxmLl9mcmFtZVNlcnZpY2Uub3BlbihcbiAgICAgIHtcbiAgICAgICAgd2lkdGg6IHdpbmRvd09wdGlvbnMud2lkdGggfHwgREVGQVVMVF9XSU5ET1dfV0lEVEgsXG4gICAgICAgIGhlaWdodDogd2luZG93T3B0aW9ucy5oZWlnaHQgfHwgREVGQVVMVF9XSU5ET1dfSEVJR0hULFxuICAgICAgfSxcbiAgICAgIHNlbGYuX3N0YXJ0UGF5bWVudENhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHNlbGYuX2NsaWVudFxuICAgIC5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICBlbmRwb2ludDogXCJsb2NhbF9wYXltZW50cy9jcmVhdGVcIixcbiAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgdmFyIHJlZGlyZWN0VXJsID0gcmVzcG9uc2UucGF5bWVudFJlc291cmNlLnJlZGlyZWN0VXJsO1xuXG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICBzZWxmLl9jbGllbnQsXG4gICAgICAgIHNlbGYuX3BheW1lbnRUeXBlICsgXCIubG9jYWwtcGF5bWVudC5zdGFydC1wYXltZW50Lm9wZW5lZFwiXG4gICAgICApO1xuICAgICAgc2VsZi5fc3RhcnRQYXltZW50T3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgIGlmIChpc0RlZmVycmVkUGF5bWVudFR5cGVPcHRpb25zKG9wdGlvbnMpKSB7XG4gICAgICAgIHNlbGYuX2F1dGhvcml6YXRpb25JblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZWRpcmVjdFVybCA9PT0gXCJzdHJpbmdcIiAmJiByZWRpcmVjdFVybC5sZW5ndGgpIHtcbiAgICAgICAgICBwcm9taXNlLnJlamVjdChcbiAgICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihcbiAgICAgICAgICAgICAgZXJyb3JzLkxPQ0FMX1BBWU1FTlRfU1RBUlRfUEFZTUVOVF9ERUZFUlJFRF9QQVlNRU5UX0ZBSUxFRFxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25QYXltZW50U3RhcnRQcm9taXNlID0gb3B0aW9ucy5vblBheW1lbnRTdGFydCh7XG4gICAgICAgICAgICBwYXltZW50SWQ6IHJlc3BvbnNlLnBheW1lbnRSZXNvdXJjZS5wYXltZW50VG9rZW4sXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAob25QYXltZW50U3RhcnRQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgb25QYXltZW50U3RhcnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMub25QYXltZW50U3RhcnQoXG4gICAgICAgICAgeyBwYXltZW50SWQ6IHJlc3BvbnNlLnBheW1lbnRSZXNvdXJjZS5wYXltZW50VG9rZW4gfSxcbiAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLl9mcmFtZVNlcnZpY2UucmVkaXJlY3QocmVzcG9uc2UucGF5bWVudFJlc291cmNlLnJlZGlyZWN0VXJsKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgdmFyIHN0YXR1cyA9IGVyci5kZXRhaWxzICYmIGVyci5kZXRhaWxzLmh0dHBTdGF0dXM7XG5cbiAgICAgIHNlbGYuX2ZyYW1lU2VydmljZS5jbG9zZSgpO1xuICAgICAgc2VsZi5fYXV0aG9yaXphdGlvbkluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgICAgaWYgKHN0YXR1cyA9PT0gNDIyKSB7XG4gICAgICAgIHByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgICB0eXBlOiBlcnJvcnMuTE9DQUxfUEFZTUVOVF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OLnR5cGUsXG4gICAgICAgICAgICBjb2RlOiBlcnJvcnMuTE9DQUxfUEFZTUVOVF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OLmNvZGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvcnMuTE9DQUxfUEFZTUVOVF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OLm1lc3NhZ2UsXG4gICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHByb21pc2UucmVqZWN0KFxuICAgICAgICBjb252ZXJ0VG9CcmFpbnRyZWVFcnJvcihlcnIsIHtcbiAgICAgICAgICB0eXBlOiBlcnJvcnMuTE9DQUxfUEFZTUVOVF9TVEFSVF9QQVlNRU5UX0ZBSUxFRC50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5MT0NBTF9QQVlNRU5UX1NUQVJUX1BBWU1FTlRfRkFJTEVELmNvZGUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JzLkxPQ0FMX1BBWU1FTlRfU1RBUlRfUEFZTUVOVF9GQUlMRUQubWVzc2FnZSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vKipcbiAqIE1hbnVhbGx5IHRva2VuaXplcyBwYXJhbXMgZm9yIGEgbG9jYWwgcGF5bWVudCByZWNlaXZlZCBmcm9tIFBheVBhbC5XaGVuIGFwcCBzd2l0Y2hpbmcgYmFjayBmcm9tIGEgbW9iaWxlIGFwcGxpY2F0aW9uIChzdWNoIGFzIGEgYmFuayBhcHBsaWNhdGlvbiBmb3IgYW4gaURFQUwgcGF5bWVudCksIHRoZSB3aW5kb3cgbWF5IGxvc2UgY29udGV4dCB3aXRoIHRoZSBwYXJlbnQgcGFnZS4gSW4gdGhhdCBjYXNlLCBhIGZhbGxiYWNrIHVybCBpcyB1c2VkLCBhbmQgdGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgdG8gZmluaXNoIHRoZSBmbG93LlxuICogQHB1YmxpY1xuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gQWxsIG9wdGlvbnMgZm9yIHRva2VuaXppbmcgbG9jYWwgcGF5bWVudCBwYXJhbWV0ZXJzLiBJZiBubyBwYXJhbXMgYXJlIHBhc3NlZCBpbiwgdGhlIHBhcmFtcyB3aWxsIGJlIHB1bGxlZCBvZmYgb2YgdGhlIHF1ZXJ5IHN0cmluZyBvZiB0aGUgcGFnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuYnRMcFRva2VuIFRoZSB0b2tlbiByZXByZXNlbnRpbmcgdGhlIGxvY2FsIHBheW1lbnQuIEFsaWFzZWQgdG8gYHRva2VuYCBpZiBgYnRMcFRva2VuYCBpcyBub3QgcHJlc2VudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuYnRMcFBheW1lbnRJZCBUaGUgcGF5bWVudCBpZCBmb3IgdGhlIGxvY2FsIHBheW1lbnQuIEFsaWFzZWQgdG8gYHBheW1lbnRJZGAgaWYgYGJ0THBQYXltZW50SWRgIGlzIG5vdCBwcmVzZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5idExwUGF5ZXJJZCBUaGUgcGF5ZXIgaWQgZm9yIHRoZSBsb2NhbCBwYXltZW50LiBBbGlhc2VkIHRvIGBQYXllcklEYCBpZiBgYnRMcFBheWVySWRgIGlzIG5vdCBwcmVzZW50LlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgc2Vjb25kIGFyZ3VtZW50LCA8Y29kZT5kYXRhPC9jb2RlPiwgaXMgYSB7QGxpbmsgTG9jYWxQYXltZW50fnN0YXJ0UGF5bWVudFBheWxvYWR8c3RhcnRQYXltZW50UGF5bG9hZH0uIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCB0aGUgbWV0aG9kIHdpbGwgcmV0dXJuIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSB7QGxpbmsgTG9jYWxQYXltZW50fnN0YXJ0UGF5bWVudFBheWxvYWR8c3RhcnRQYXltZW50UGF5bG9hZH0uXG4gKiBAZXhhbXBsZVxuICogbG9jYWxQYXltZW50SW5zdGFuY2UudG9rZW5pemUoKS50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gKiAgIC8vIHNlbmQgcGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlclxuICogfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICogICAvLyBoYW5kbGUgdG9rZW5pemF0aW9uIGVycm9yXG4gKiB9KTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cbkxvY2FsUGF5bWVudC5wcm90b3R5cGUudG9rZW5pemUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNsaWVudCA9IHRoaXMuX2NsaWVudDtcblxuICBwYXJhbXMgPSBwYXJhbXMgfHwgcXVlcnlzdHJpbmcucGFyc2UoKTtcblxuICAvLyBpT1MgU2FmYXJpIHBhcnNlcyBxdWVyeSBwYXJhbXMgYnkgYWRkaW5nIHRoZSBwYXJhbXMgaW5zaWRlIGFuIG9iamVjdCBjYWxsZWQ6IHF1ZXJ5SXRlbXNcbiAgaWYgKHBhcmFtcy5xdWVyeUl0ZW1zKSB7XG4gICAgcGFyYW1zID0gcGFyYW1zLnF1ZXJ5SXRlbXM7XG4gIH1cblxuICBpZiAocGFyYW1zLmMgfHwgcGFyYW1zLndhc0NhbmNlbGVkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgdHlwZTogZXJyb3JzLkxPQ0FMX1BBWU1FTlRfQ0FOQ0VMRUQudHlwZSxcbiAgICAgICAgY29kZTogZXJyb3JzLkxPQ0FMX1BBWU1FTlRfQ0FOQ0VMRUQuY29kZSxcbiAgICAgICAgbWVzc2FnZTogZXJyb3JzLkxPQ0FMX1BBWU1FTlRfQ0FOQ0VMRUQubWVzc2FnZSxcbiAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IHtcbiAgICAgICAgICAgIGVycm9yY29kZTogcGFyYW1zLmVycm9yY29kZSxcbiAgICAgICAgICAgIHRva2VuOiBwYXJhbXMuYnRMcFRva2VuLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG4gIH0gZWxzZSBpZiAocGFyYW1zLmVycm9yY29kZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5MT0NBTF9QQVlNRU5UX1NUQVJUX1BBWU1FTlRfRkFJTEVELnR5cGUsXG4gICAgICAgIGNvZGU6IGVycm9ycy5MT0NBTF9QQVlNRU5UX1NUQVJUX1BBWU1FTlRfRkFJTEVELmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9ycy5MT0NBTF9QQVlNRU5UX1NUQVJUX1BBWU1FTlRfRkFJTEVELm1lc3NhZ2UsXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBvcmlnaW5hbEVycm9yOiB7XG4gICAgICAgICAgICBlcnJvcmNvZGU6IHBhcmFtcy5lcnJvcmNvZGUsXG4gICAgICAgICAgICB0b2tlbjogcGFyYW1zLmJ0THBUb2tlbixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGNsaWVudFxuICAgIC5yZXF1ZXN0KHtcbiAgICAgIGVuZHBvaW50OiBcInBheW1lbnRfbWV0aG9kcy9wYXlwYWxfYWNjb3VudHNcIixcbiAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICBkYXRhOiB0aGlzLl9mb3JtYXRUb2tlbml6ZURhdGEocGFyYW1zKSxcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgdmFyIHBheWxvYWQgPSBzZWxmLl9mb3JtYXRUb2tlbml6ZVBheWxvYWQocmVzcG9uc2UpO1xuXG4gICAgICBpZiAod2luZG93LnBvcHVwQnJpZGdlKSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgY2xpZW50LFxuICAgICAgICAgIHNlbGYuX3BheW1lbnRUeXBlICsgXCIubG9jYWwtcGF5bWVudC50b2tlbml6YXRpb24uc3VjY2Vzcy1wb3B1cGJyaWRnZVwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICBzZWxmLl9wYXltZW50VHlwZSArIFwiLmxvY2FsLXBheW1lbnQudG9rZW5pemF0aW9uLnN1Y2Nlc3NcIlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICBjbGllbnQsXG4gICAgICAgIHNlbGYuX3BheW1lbnRUeXBlICsgXCIubG9jYWwtcGF5bWVudC50b2tlbml6YXRpb24uZmFpbGVkXCJcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgY29udmVydFRvQnJhaW50cmVlRXJyb3IoZXJyLCB7XG4gICAgICAgICAgdHlwZTogZXJyb3JzLkxPQ0FMX1BBWU1FTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRC50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5MT0NBTF9QQVlNRU5UX1RPS0VOSVpBVElPTl9GQUlMRUQuY29kZSxcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvcnMuTE9DQUxfUEFZTUVOVF9UT0tFTklaQVRJT05fRkFJTEVELm1lc3NhZ2UsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIExvY2FsUGF5bWVudCB3aW5kb3cgaWYgaXQgaXMgb3Blbi5cbiAqIEBwdWJsaWNcbiAqIEBleGFtcGxlXG4gKiBsb2NhbFBheW1lbnRJbnN0YW5jZS5jbG9zZVdpbmRvdygpO1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkxvY2FsUGF5bWVudC5wcm90b3R5cGUuY2xvc2VXaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9hdXRob3JpenRpb25JblByb2dyZXNzKSB7XG4gICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgIHRoaXMuX2NsaWVudCxcbiAgICAgIHRoaXMuX3BheW1lbnRUeXBlICsgXCIubG9jYWwtcGF5bWVudC5zdGFydC1wYXltZW50LmNsb3NlZC5ieS1tZXJjaGFudFwiXG4gICAgKTtcbiAgfVxuICB0aGlzLl9mcmFtZVNlcnZpY2UuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogRm9jdXNlcyB0aGUgTG9jYWxQYXltZW50IHdpbmRvdyBpZiBpdCBpcyBvcGVuLlxuICogQHB1YmxpY1xuICogQGV4YW1wbGVcbiAqIGxvY2FsUGF5bWVudEluc3RhbmNlLmZvY3VzV2luZG93KCk7XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuTG9jYWxQYXltZW50LnByb3RvdHlwZS5mb2N1c1dpbmRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fZnJhbWVTZXJ2aWNlLmZvY3VzKCk7XG59O1xuXG5Mb2NhbFBheW1lbnQucHJvdG90eXBlLl9jcmVhdGVTdGFydFBheW1lbnRDYWxsYmFjayA9IGZ1bmN0aW9uIChcbiAgcmVzb2x2ZSxcbiAgcmVqZWN0XG4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2xpZW50ID0gdGhpcy5fY2xpZW50O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoZXJyLCBwYXJhbXMpIHtcbiAgICBzZWxmLl9hdXRob3JpemF0aW9uSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGlmIChlcnIuY29kZSA9PT0gXCJGUkFNRV9TRVJWSUNFX0ZSQU1FX0NMT1NFRFwiKSB7XG4gICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmVycm9yY29kZSA9PT0gXCJwcm9jZXNzaW5nX2Vycm9yXCIpIHtcbiAgICAgICAgICAvLyBzb21ldGhpbmcgZmFpbGVkIHdpdGhpbiB0aGUgcGF5bWVudCB3aW5kb3cgKHJhdGhlciB0aGFuIHdoZW5cbiAgICAgICAgICAvLyB0b2tlbml6aW5nIHdpdGggQnJhaW50cmVlKVxuICAgICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICBzZWxmLl9wYXltZW50VHlwZSArIFwiLmxvY2FsLXBheW1lbnQuZmFpbGVkLWluLXdpbmRvd1wiXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZWplY3QobmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5MT0NBTF9QQVlNRU5UX1NUQVJUX1BBWU1FTlRfRkFJTEVEKSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpdHMgcG9zc2libGUgdG8gaGF2ZSBhIHF1ZXJ5IHBhcmFtIHdpdGggZXJyb3Jjb2RlPXBheW1lbnRfZXJyb3IsIHdoaWNoXG4gICAgICAgIC8vIGluZGljYXRlcyB0aGF0IHRoZSBjdXN0b21lciBjYW5jZWxsZWQgdGhlIGZsb3cgZnJvbSB3aXRoaW4gdGhlIFVJLFxuICAgICAgICAvLyBidXQgYXMgdGhlcmUncyBubyBtZWFuaW5nZnVsIGRpZmZlcmVuY2UgdG8gdGhlIG1lcmNoYW50IHdoZXRoZXIgdGhlXG4gICAgICAgIC8vIGN1c3RvbWVyIGNsb3NlcyB2aWEgdGhlIFVJIG9yIGJ5IG1hbnVhbGx5IGNsb3NpbmcgdGhlIHdpbmRvdywgd2VcbiAgICAgICAgLy8gZG9uJ3QgZGlmZmVyZW50aWF0ZSB0aGVzZVxuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICBzZWxmLl9wYXltZW50VHlwZSArIFwiLmxvY2FsLXBheW1lbnQudG9rZW5pemF0aW9uLmNsb3NlZC5ieS11c2VyXCJcbiAgICAgICAgKTtcbiAgICAgICAgcmVqZWN0KG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuTE9DQUxfUEFZTUVOVF9XSU5ET1dfQ0xPU0VEKSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBlcnIuY29kZSAmJlxuICAgICAgICBlcnIuY29kZS5pbmRleE9mKFwiRlJBTUVfU0VSVklDRV9GUkFNRV9PUEVOX0ZBSUxFRFwiKSA+IC0xXG4gICAgICApIHtcbiAgICAgICAgcmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgICBjb2RlOiBlcnJvcnMuTE9DQUxfUEFZTUVOVF9XSU5ET1dfT1BFTl9GQUlMRUQuY29kZSxcbiAgICAgICAgICAgIHR5cGU6IGVycm9ycy5MT0NBTF9QQVlNRU5UX1dJTkRPV19PUEVOX0ZBSUxFRC50eXBlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JzLkxPQ0FMX1BBWU1FTlRfV0lORE9XX09QRU5fRkFJTEVELm1lc3NhZ2UsXG4gICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtcykge1xuICAgICAgaWYgKCF3aW5kb3cucG9wdXBCcmlkZ2UpIHtcbiAgICAgICAgc2VsZi5fZnJhbWVTZXJ2aWNlLnJlZGlyZWN0KHNlbGYuX2xvYWRpbmdGcmFtZVVybCk7XG4gICAgICB9XG5cbiAgICAgIHNlbGZcbiAgICAgICAgLnRva2VuaXplKHBhcmFtcylcbiAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgLmNhdGNoKHJlamVjdClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYuX2ZyYW1lU2VydmljZS5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG5Mb2NhbFBheW1lbnQucHJvdG90eXBlLl9mb3JtYXRUb2tlbml6ZVBheWxvYWQgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgdmFyIHBheWxvYWQ7XG4gIHZhciBhY2NvdW50ID0ge307XG5cbiAgaWYgKHJlc3BvbnNlLnBheXBhbEFjY291bnRzKSB7XG4gICAgYWNjb3VudCA9IHJlc3BvbnNlLnBheXBhbEFjY291bnRzWzBdO1xuICB9XG5cbiAgcGF5bG9hZCA9IHtcbiAgICBub25jZTogYWNjb3VudC5ub25jZSxcbiAgICBkZXRhaWxzOiB7fSxcbiAgICB0eXBlOiBhY2NvdW50LnR5cGUsXG4gIH07XG5cbiAgaWYgKGFjY291bnQuZGV0YWlscykge1xuICAgIGlmIChhY2NvdW50LmRldGFpbHMucGF5ZXJJbmZvKSB7XG4gICAgICBwYXlsb2FkLmRldGFpbHMgPSBhY2NvdW50LmRldGFpbHMucGF5ZXJJbmZvO1xuICAgIH1cbiAgICBpZiAoYWNjb3VudC5kZXRhaWxzLmNvcnJlbGF0aW9uSWQpIHtcbiAgICAgIHBheWxvYWQuY29ycmVsYXRpb25JZCA9IGFjY291bnQuZGV0YWlscy5jb3JyZWxhdGlvbklkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXlsb2FkO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgcmVxdWlyZWQgdG9rZW5pemF0aW9uIHBhcmFtZXRlcnMgYXJlIGF2YWlsYWJsZSBpbiBxdWVyeXN0cmluZyBmb3IgbWFudWFsIHRva2VuaXphdGlvbiByZXF1ZXN0cy5cbiAqIEBwdWJsaWNcbiAqIEBmdW5jdGlvblxuICogQGV4YW1wbGVcbiAqIC8vIGlmIHF1ZXJ5IHN0cmluZyBjb250YWluc1xuICogLy8gP2J0THBUb2tlbj10b2tlbiZidExwUGF5bWVudElkPXBheW1lbnQtaWQmYnRMcFBheWVySWQ9cGF5ZXItaWRcbiAqIGxvY2FsUGF5bWVudEluc3RhbmNlLmhhc1Rva2VuaXphdGlvblBhcmFtcygpOyAvLyB0cnVlXG4gKlxuICogLy8gaWYgcXVlcnkgc3RyaW5nIGlzIG1pc3NpbmcgcmVxdWlyZWQgcGFyYW1zXG4gKiBsb2NhbFBheW1lbnRJbnN0YW5jZS5oYXNUb2tlbml6YXRpb25QYXJhbXMoKTsgLy8gZmFsc2VcbiAqXG4gKiBpZiAobG9jYWxQYXltZW50SW5zdGFuY2UuaGFzVG9rZW5pemF0aW9uUGFyYW1zKCkpIHtcbiAqICAgbG9jYWxQYXltZW50SW5zdGFuY2UudG9rZW5pemUoKTtcbiAqIH1cbiAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGEgQm9vbGVhbiB2YWx1ZSBmb3IgdGhlIHN0YXRlIG9mIHRoZSBxdWVyeSBzdHJpbmcuXG4gKi9cbkxvY2FsUGF5bWVudC5wcm90b3R5cGUuaGFzVG9rZW5pemF0aW9uUGFyYW1zID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcGFyYW1zID0gcXVlcnlzdHJpbmcucGFyc2UoKTtcblxuICBpZiAocGFyYW1zLmVycm9yY29kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgcGFyYW1zLmJ0THBUb2tlbiAmJiBwYXJhbXMuYnRMcFBheW1lbnRJZCAmJiBwYXJhbXMuYnRMcFBheWVySWRcbiAgKTtcbn07XG5cbkxvY2FsUGF5bWVudC5wcm90b3R5cGUuX2Zvcm1hdFRva2VuaXplRGF0YSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgdmFyIGNsaWVudENvbmZpZ3VyYXRpb24gPSB0aGlzLl9jbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpO1xuICB2YXIgZ2F0ZXdheUNvbmZpZ3VyYXRpb24gPSBjbGllbnRDb25maWd1cmF0aW9uLmdhdGV3YXlDb25maWd1cmF0aW9uO1xuICB2YXIgZGF0YSA9IHtcbiAgICBtZXJjaGFudEFjY291bnRJZDogdGhpcy5fbWVyY2hhbnRBY2NvdW50SWQsXG4gICAgcGF5cGFsQWNjb3VudDoge1xuICAgICAgY29ycmVsYXRpb25JZDogcGFyYW1zLmJ0THBUb2tlbiB8fCBwYXJhbXMudG9rZW4sXG4gICAgICBwYXltZW50VG9rZW46IHBhcmFtcy5idExwUGF5bWVudElkIHx8IHBhcmFtcy5wYXltZW50SWQsXG4gICAgICBwYXllcklkOiBwYXJhbXMuYnRMcFBheWVySWQgfHwgcGFyYW1zLlBheWVySUQsXG4gICAgICB1bmlsYXRlcmFsOiBnYXRld2F5Q29uZmlndXJhdGlvbi5wYXlwYWwudW52ZXR0ZWRNZXJjaGFudCxcbiAgICAgIGludGVudDogXCJzYWxlXCIsXG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn07XG5cbi8vIFNvbWUgcGF5bWVudCB0eXBlcyBhcmUgZGVmZXJyZWQuIE1lYW5pbmcsIHRoZSBhY3R1YWwgcGF5bWVudCB3aWxsXG4vLyBvY2N1ciBhdCBhIGxhdGVyIHRpbWUgb3V0c2lkZSBvZiB0aGlzIHNlc3Npb24uIEZvciBleGFtcGxlLCB3aXRoXG4vLyBQYXkgVXBvbiBJbnZvaWNlLCB0aGUgY3VzdG9tZXIgd2lsbCBsYXRlciByZWNlaXZlIGFuIGVtYWlsIHRoYXQgd2lsbFxuLy8gYmUgdXNlZCB0byBtYWtlIHRoZSBhY3R1YWwgcGF5bWVudCB0aHJvdWdoIFJhdGVQYXkuIFRoaXMgZnVuY3Rpb25cbi8vIHdpbGwgcmV0dXJuIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gb3B0aW9ucyBjb250YWluIGBwYXltZW50VHlwZWAgb2Zcbi8vIGEgZGVmZXJyZWQgcGF5bWVudCB0eXBlOyBhbmQvb3Igc29tZSBwYXltZW50cywgbGlrZSBibGlrLCBtYXkgaGF2ZVxuLy8gc3BlY2lmaWMgZXh0cmEgb3B0aW9ucyB0byBiZSB0cmVhdGVkIGFzIGRlZmVycmVkLiBPdGhlcndpc2UsIGl0XG4vLyB3aWxsIHJldHVybiBgZmFsc2VgLlxuZnVuY3Rpb24gaXNEZWZlcnJlZFBheW1lbnRUeXBlT3B0aW9ucyhvcHRpb25zKSB7XG4gIHZhciBibGlrT3B0aW9ucyA9IG9wdGlvbnMuYmxpa09wdGlvbnMgfHwge307XG4gIHZhciBwYXltZW50VHlwZSA9XG4gICAgdHlwZW9mIG9wdGlvbnMucGF5bWVudFR5cGUgPT09IFwic3RyaW5nXCJcbiAgICAgID8gb3B0aW9ucy5wYXltZW50VHlwZS50b0xvd2VyQ2FzZSgpXG4gICAgICA6IG9wdGlvbnMucGF5bWVudFR5cGU7XG5cbiAgaWYgKHBheW1lbnRUeXBlID09PSBcInBheV91cG9uX2ludm9pY2VcIikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKHBheW1lbnRUeXBlID09PSBcImJsaWtcIikge1xuICAgIHJldHVybiAoXG4gICAgICBibGlrT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcImxldmVsXzBcIikgfHxcbiAgICAgIGJsaWtPcHRpb25zLmhhc093blByb3BlcnR5KFwib25lQ2xpY2tcIilcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYXNNaXNzaW5nQWRkcmVzc09wdGlvbihvcHRpb25zKSB7XG4gIHZhciBpLCBvcHRpb247XG5cbiAgZm9yIChpID0gMDsgaSA8IGNvbnN0YW50cy5SRVFVSVJFRF9PUFRJT05TX0ZPUl9BRERSRVNTLmxlbmd0aDsgaSsrKSB7XG4gICAgb3B0aW9uID0gY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlNfRk9SX0FERFJFU1NbaV07XG4gICAgaWYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KG9wdGlvbikpIHtcbiAgICAgIHJldHVybiBvcHRpb247XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYXNNaXNzaW5nTGluZUl0ZW1zT3B0aW9uKGl0ZW1zKSB7XG4gIHZhciBpLCBqLCBpdGVtLCBvcHRpb247XG5cbiAgZm9yIChqID0gMDsgaiA8IGl0ZW1zLmxlbmd0aDsgaisrKSB7XG4gICAgaXRlbSA9IGl0ZW1zW2pdO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb25zdGFudHMuUkVRVUlSRURfT1BUSU9OU19GT1JfTElORV9JVEVNUy5sZW5ndGg7IGkrKykge1xuICAgICAgb3B0aW9uID0gY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlNfRk9SX0xJTkVfSVRFTVNbaV07XG4gICAgICBpZiAoIWl0ZW0uaGFzT3duUHJvcGVydHkob3B0aW9uKSkge1xuICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFzTWlzc2luZ0JsaWtPcHRpb25zKG9wdGlvbnMpIHtcbiAgdmFyIGksIG9wdGlvbiwgb25lQ2xpY2s7XG4gIHZhciBibGlrT3B0aW9ucyA9IG9wdGlvbnMuYmxpa09wdGlvbnMgfHwge307XG5cbiAgZm9yIChcbiAgICBpID0gMDtcbiAgICBpIDwgY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlNfRk9SX0JMSUtfU0VBTUxFU1NfUEFZTUVOVF9UWVBFLmxlbmd0aDtcbiAgICBpKytcbiAgKSB7XG4gICAgb3B0aW9uID0gY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlNfRk9SX0JMSUtfU0VBTUxFU1NfUEFZTUVOVF9UWVBFW2ldO1xuICAgIGlmICghb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSB7XG4gICAgICByZXR1cm4gb3B0aW9uO1xuICAgIH1cbiAgfVxuXG4gIGlmIChibGlrT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcImxldmVsXzBcIikpIHtcbiAgICBmb3IgKFxuICAgICAgaSA9IDA7XG4gICAgICBpIDwgY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlNfRk9SX0JMSUtfT1BUSU9OU19MRVZFTF8wLmxlbmd0aDtcbiAgICAgIGkrK1xuICAgICkge1xuICAgICAgb3B0aW9uID0gY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlNfRk9SX0JMSUtfT1BUSU9OU19MRVZFTF8wW2ldO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgICBpZiAoIWJsaWtPcHRpb25zLmxldmVsXzAuaGFzT3duUHJvcGVydHkob3B0aW9uKSkge1xuICAgICAgICByZXR1cm4gXCJibGlrT3B0aW9ucy5sZXZlbF8wLlwiICsgb3B0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChibGlrT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcIm9uZUNsaWNrXCIpKSB7XG4gICAgb25lQ2xpY2sgPSBibGlrT3B0aW9ucy5vbmVDbGljayB8fCB7fTtcblxuICAgIGlmIChvbmVDbGljay5oYXNPd25Qcm9wZXJ0eShcImFsaWFzS2V5XCIpKSB7XG4gICAgICBmb3IgKFxuICAgICAgICBpID0gMDtcbiAgICAgICAgaSA8XG4gICAgICAgIGNvbnN0YW50cy5SRVFVSVJFRF9PUFRJT05TX0ZPUl9CTElLX09QVElPTlNfT05FX0NMSUNLX1NVQlNFUVVFTlQubGVuZ3RoO1xuICAgICAgICBpKytcbiAgICAgICkge1xuICAgICAgICBvcHRpb24gPVxuICAgICAgICAgIGNvbnN0YW50cy5SRVFVSVJFRF9PUFRJT05TX0ZPUl9CTElLX09QVElPTlNfT05FX0NMSUNLX1NVQlNFUVVFTlRbaV07XG5cbiAgICAgICAgaWYgKCFvbmVDbGljay5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIFwiYmxpa09wdGlvbnMub25lQ2xpY2suXCIgKyBvcHRpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIGkgPCBjb25zdGFudHMuUkVRVUlSRURfT1BUSU9OU19GT1JfQkxJS19PUFRJT05TX09ORV9DTElDS19GSVJTVC5sZW5ndGg7XG4gICAgICAgIGkrK1xuICAgICAgKSB7XG4gICAgICAgIG9wdGlvbiA9IGNvbnN0YW50cy5SRVFVSVJFRF9PUFRJT05TX0ZPUl9CTElLX09QVElPTlNfT05FX0NMSUNLX0ZJUlNUW2ldO1xuXG4gICAgICAgIGlmICghb25lQ2xpY2suaGFzT3duUHJvcGVydHkob3B0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBcImJsaWtPcHRpb25zLm9uZUNsaWNrLlwiICsgb3B0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBUaGlzIHdpbGwgcmV0dXJuIHRoZSBuYW1lIG9mIHRoZSBmaXJzdCBtaXNzaW5nIHJlcXVpcmVkIG9wdGlvbiB0aGF0XG4vLyBpcyBmb3VuZCBvciBgdHJ1ZWAgaWYgYG9wdGlvbnNgIGl0c2VsZiBpcyBub3QgZGVmaW5lZC4gT3RoZXJ3aXNlLCBpdFxuLy8gd2lsbCByZXR1cm4gYGZhbHNlYC5cbmZ1bmN0aW9uIGhhc01pc3NpbmdPcHRpb24ob3B0aW9ucykge1xuICB2YXIgaSwgb3B0aW9uLCBtaXNzaW5nQWRkcmVzc09wdGlvbiwgbWlzc2luZ0xpbmVJdGVtT3B0aW9uLCBwYXltZW50VHlwZTtcblxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc0RlZmVycmVkUGF5bWVudFR5cGVPcHRpb25zKG9wdGlvbnMpKSB7XG4gICAgcGF5bWVudFR5cGUgPSBvcHRpb25zLnBheW1lbnRUeXBlIHx8IFwiXCI7XG5cbiAgICBpZiAocGF5bWVudFR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJwYXlfdXBvbl9pbnZvaWNlXCIpIHtcbiAgICAgIGZvciAoXG4gICAgICAgIGkgPSAwO1xuICAgICAgICBpIDwgY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlNfRk9SX1BBWV9VUE9OX0lOVk9JQ0VfUEFZTUVOVF9UWVBFLmxlbmd0aDtcbiAgICAgICAgaSsrXG4gICAgICApIHtcbiAgICAgICAgb3B0aW9uID1cbiAgICAgICAgICBjb25zdGFudHMuUkVRVUlSRURfT1BUSU9OU19GT1JfUEFZX1VQT05fSU5WT0lDRV9QQVlNRU5UX1RZUEVbaV07XG4gICAgICAgIGlmICghb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9uID09PSBcImFkZHJlc3NcIiB8fCBvcHRpb24gPT09IFwiYmlsbGluZ0FkZHJlc3NcIikge1xuICAgICAgICAgIG1pc3NpbmdBZGRyZXNzT3B0aW9uID0gaGFzTWlzc2luZ0FkZHJlc3NPcHRpb24ob3B0aW9uc1tvcHRpb25dKTtcbiAgICAgICAgICBpZiAobWlzc2luZ0FkZHJlc3NPcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb24gKyBcIi5cIiArIG1pc3NpbmdBZGRyZXNzT3B0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb24gPT09IFwibGluZUl0ZW1zXCIpIHtcbiAgICAgICAgICBtaXNzaW5nTGluZUl0ZW1PcHRpb24gPSBoYXNNaXNzaW5nTGluZUl0ZW1zT3B0aW9uKG9wdGlvbnNbb3B0aW9uXSk7XG4gICAgICAgICAgaWYgKG1pc3NpbmdMaW5lSXRlbU9wdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbiArIFwiLlwiICsgbWlzc2luZ0xpbmVJdGVtT3B0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGF5bWVudFR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJibGlrXCIpIHtcbiAgICAgIHJldHVybiBoYXNNaXNzaW5nQmxpa09wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb25zdGFudHMuUkVRVUlSRURfT1BUSU9OU19GT1JfU1RBUlRfUEFZTUVOVC5sZW5ndGg7IGkrKykge1xuICAgICAgb3B0aW9uID0gY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlNfRk9SX1NUQVJUX1BBWU1FTlRbaV07XG5cbiAgICAgIGlmICghb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSB7XG4gICAgICAgIHJldHVybiBvcHRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLmZhbGxiYWNrLnVybCkge1xuICAgICAgcmV0dXJuIFwiZmFsbGJhY2sudXJsXCI7XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5mYWxsYmFjay5idXR0b25UZXh0KSB7XG4gICAgICByZXR1cm4gXCJmYWxsYmFjay5idXR0b25UZXh0XCI7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnJlY3VycmVudCA9PT0gdHJ1ZSAmJiAhb3B0aW9ucy5jdXN0b21lcklkKSB7XG4gICAgICByZXR1cm4gXCJjdXN0b21lcklkXCI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENsZWFubHkgcmVtb3ZlIGFueXRoaW5nIHNldCB1cCBieSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvbG9jYWwtcGF5bWVudC5jcmVhdGV8Y3JlYXRlfS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGVkIG9uIGNvbXBsZXRpb24uXG4gKiBAZXhhbXBsZVxuICogbG9jYWxQYXltZW50SW5zdGFuY2UudGVhcmRvd24oKTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggY2FsbGJhY2s8L2NhcHRpb24+XG4gKiBsb2NhbFBheW1lbnRJbnN0YW5jZS50ZWFyZG93bihmdW5jdGlvbiAoKSB7XG4gKiAgIC8vIHRlYXJkb3duIGlzIGNvbXBsZXRlXG4gKiB9KTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cbkxvY2FsUGF5bWVudC5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcblxuICBzZWxmLl9mcmFtZVNlcnZpY2UudGVhcmRvd24oKTtcblxuICBjb252ZXJ0TWV0aG9kc1RvRXJyb3Ioc2VsZiwgbWV0aG9kcyhMb2NhbFBheW1lbnQucHJvdG90eXBlKSk7XG5cbiAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwibG9jYWwtcGF5bWVudC50ZWFyZG93bi1jb21wbGV0ZWRcIik7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB3cmFwUHJvbWlzZS53cmFwUHJvdG90eXBlKExvY2FsUGF5bWVudCk7XG5cbn0se1wiLi4vLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uLy4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuLi8uLi9saWIvY29uc3RhbnRzXCI6MTI2LFwiLi4vLi4vbGliL2NvbnZlcnQtbWV0aG9kcy10by1lcnJvclwiOjEyNyxcIi4uLy4uL2xpYi9jb252ZXJ0LXRvLWJyYWludHJlZS1lcnJvclwiOjEyOCxcIi4uLy4uL2xpYi9mcmFtZS1zZXJ2aWNlL2V4dGVybmFsXCI6MTM5LFwiLi4vLi4vbGliL21ldGhvZHNcIjoxNTUsXCIuLi8uLi9saWIvcXVlcnlzdHJpbmdcIjoxNTcsXCIuLi8uLi9saWIvdXNlLW1pblwiOjE2MCxcIi4uL3NoYXJlZC9lcnJvcnNcIjoxNjUsXCIuL2NvbnN0YW50c1wiOjE2MixcIkBicmFpbnRyZWUvZXh0ZW5kZWQtcHJvbWlzZVwiOjM0LFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0M31dLDE2NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQG1vZHVsZSBicmFpbnRyZWUtd2ViL2xvY2FsLXBheW1lbnRcbiAqIEBkZXNjcmlwdGlvbiBBIGNvbXBvbmVudCB0byBpbnRlZ3JhdGUgd2l0aCBsb2NhbCBwYXltZW50IG1ldGhvZHMuICpUaGlzIGNvbXBvbmVudCBpcyBjdXJyZW50bHkgaW4gYmV0YSBhbmQgaXMgc3ViamVjdCB0byBjaGFuZ2UuKlxuICovXG5cbnZhciBhbmFseXRpY3MgPSBfZGVyZXFfKFwiLi4vbGliL2FuYWx5dGljc1wiKTtcbnZhciBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvbiA9IF9kZXJlcV8oXCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiKTtcbnZhciBjcmVhdGVEZWZlcnJlZENsaWVudCA9IF9kZXJlcV8oXCIuLi9saWIvY3JlYXRlLWRlZmVycmVkLWNsaWVudFwiKTtcbnZhciBjcmVhdGVBc3NldHNVcmwgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCIpO1xudmFyIExvY2FsUGF5bWVudCA9IF9kZXJlcV8oXCIuL2V4dGVybmFsL2xvY2FsLXBheW1lbnRcIik7XG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vc2hhcmVkL2Vycm9yc1wiKTtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDcmVhdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5tZXJjaGFudEFjY291bnRJZF0gQSBub24tZGVmYXVsdCBtZXJjaGFudCBhY2NvdW50IElEIHRvIHVzZSBmb3IgdG9rZW5pemF0aW9uIGFuZCBjcmVhdGlvbiBvZiB0aGUgYXV0aG9yaXppbmcgdHJhbnNhY3Rpb24uIEJyYWludHJlZSBzdHJvbmdseSByZWNvbW1lbmRzIHNwZWNpZnlpbmcgdGhpcyBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBjYWxsYmFjayBUaGUgc2Vjb25kIGFyZ3VtZW50LCBgZGF0YWAsIGlzIHRoZSB7QGxpbmsgTG9jYWxQYXltZW50fSBpbnN0YW5jZS5cbiAqIEBleGFtcGxlIDxjYXB0aW9uPlVzaW5nIHRoZSBsb2NhbCBwYXltZW50IGNvbXBvbmVudCB0byBzZXQgdXAgYW4gaURFQUwgYnV0dG9uPC9jYXB0aW9uPlxuICogdmFyIGlkZWFsQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlkZWFsLWJ1dHRvbicpO1xuICpcbiAqIGJyYWludHJlZS5jbGllbnQuY3JlYXRlKHtcbiAqICAgYXV0aG9yaXphdGlvbjogQ0xJRU5UX0FVVEhPUklaQVRJT05cbiAqIH0sIGZ1bmN0aW9uIChjbGllbnRFcnIsIGNsaWVudEluc3RhbmNlKSB7XG4gKiAgIGlmIChjbGllbnRFcnIpIHtcbiAqICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBjbGllbnQ6JywgY2xpZW50RXJyKTtcbiAqICAgICByZXR1cm47XG4gKiAgIH1cbiAqXG4gKiAgIGJyYWludHJlZS5sb2NhbFBheW1lbnQuY3JlYXRlKHtcbiAqICAgICBjbGllbnQ6IGNsaWVudEluc3RhbmNlLFxuICogICAgIG1lcmNoYW50QWNjb3VudElkOiAnbWVyY2hhbnRBY2NvdW50RVVSJyxcbiAqICAgfSwgZnVuY3Rpb24gKGxvY2FsUGF5bWVudEVyciwgbG9jYWxQYXltZW50SW5zdGFuY2UpIHtcbiAqICAgICBpZiAobG9jYWxQYXltZW50RXJyKSB7XG4gKiAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBsb2NhbCBwYXltZW50IGNvbXBvbmVudDonLCBsb2NhbFBheW1lbnRFcnIpO1xuICogICAgICAgcmV0dXJuO1xuICogICAgIH1cbiAqXG4gKiAgICAgaWRlYWxCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICpcbiAqICAgICAvLyBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCwgYXR0ZW1wdCB0byBzdGFydCB0aGUgcGF5bWVudCBmbG93LlxuICogICAgIGlkZWFsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgICAvLyBCZWNhdXNlIHRoaXMgb3BlbnMgYSBwb3B1cCwgdGhpcyBoYXMgdG8gYmUgY2FsbGVkIGFzIGEgcmVzdWx0IG9mXG4gKiAgICAgICAvLyBjdXN0b21lciBhY3Rpb24sIGxpa2UgY2xpY2tpbmcgYSBidXR0b24uIFlvdSBjYW5ub3QgY2FsbCB0aGlzIGF0IGFueSB0aW1lLlxuICogICAgICAgbG9jYWxQYXltZW50SW5zdGFuY2Uuc3RhcnRQYXltZW50KHtcbiAqICAgICAgICAgcGF5bWVudFR5cGU6ICdpZGVhbCcsXG4gKiAgICAgICAgIGFtb3VudDogJzEwLjY3JyxcbiAqICAgICAgICAgY2l0eTogJ0RlbiBIYWFnJyxcbiAqICAgICAgICAgY291bnRyeUNvZGU6ICdOTCcsXG4gKiAgICAgICAgIGZpcnN0TmFtZTogJ1Rlc3QnLFxuICogICAgICAgICBsYXN0TmFtZTogJ01jVGVzdGVyJyxcbiAqICAgICAgICAgbGluZTE6ICcxMjMgb2YgNDU2IEZha2UgTGFuZScsXG4gKiAgICAgICAgIGxpbmUyOiAnQXBhcnRtZW50IDc4OScsXG4gKiAgICAgICAgIHBheWVyRW1haWw6ICdwYXllckBleGFtcGxlLmNvbScsXG4gKiAgICAgICAgIHBob25lOiAnMTIzNDU2Nzg5JyxcbiAqICAgICAgICAgcG9zdGFsQ29kZTogJzEyMzQgQUEnLFxuICogICAgICAgICBjdXJyZW5jeUNvZGU6ICdFVVInLFxuICogICAgICAgICBvblBheW1lbnRTdGFydDogZnVuY3Rpb24gKGRhdGEsIGNvbnRpbnVlQ2FsbGJhY2spIHtcbiAqICAgICAgICAgICAvLyBEbyBhbnkgcHJlcHJvY2Vzc2luZyB0byBzdG9yZSB0aGUgSUQgYW5kIHNldHVwIHdlYmhvb2tcbiAqICAgICAgICAgICAvLyBDYWxsIHN0YXJ0IHRvIGluaXRpYXRlIHRoZSBwb3B1cFxuICogICAgICAgICAgIGNvbnRpbnVlQ2FsbGJhY2soKTtcbiAqICAgICAgICAgfVxuICoqICAgICAgIH0sIGZ1bmN0aW9uIChzdGFydFBheW1lbnRFcnIsIHBheWxvYWQpIHtcbiAqICAgICAgICAgaWYgKHN0YXJ0UGF5bWVudEVycikge1xuICogICAgICAgICAgIGlmIChzdGFydFBheW1lbnRFcnIudHlwZSAhPT0gJ0NVU1RPTUVSJykge1xuICogICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc3RhcnRpbmcgcGF5bWVudDonLCBzdGFydFBheW1lbnRFcnIpO1xuICogICAgICAgICAgIH1cbiAqICAgICAgICAgICByZXR1cm47XG4gKiAgICAgICAgIH1cbiAqXG4gKiAgICAgICAgIGlkZWFsQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcbiAqXG4gKiAgICAgICAgIGNvbnNvbGUubG9nKHBheWxvYWQucGF5bWVudElkKTtcbiAqICAgICAgIH0pO1xuICogICAgIH0sIGZhbHNlKTtcbiAqICAgfSk7XG4gKiB9KTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHZhciBuYW1lID0gXCJMb2NhbCBQYXltZW50XCI7XG5cbiAgcmV0dXJuIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uXG4gICAgLnZlcmlmeSh7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgY2xpZW50OiBvcHRpb25zLmNsaWVudCxcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjcmVhdGVEZWZlcnJlZENsaWVudC5jcmVhdGUoe1xuICAgICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICAgIGRlYnVnOiBvcHRpb25zLmRlYnVnLFxuICAgICAgICBhc3NldHNVcmw6IGNyZWF0ZUFzc2V0c1VybC5jcmVhdGUob3B0aW9ucy5hdXRob3JpemF0aW9uKSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgdmFyIGxvY2FsUGF5bWVudEluc3RhbmNlO1xuICAgICAgdmFyIGNvbmZpZyA9IGNsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG5cbiAgICAgIG9wdGlvbnMuY2xpZW50ID0gY2xpZW50O1xuXG4gICAgICBpZiAoY29uZmlnLmdhdGV3YXlDb25maWd1cmF0aW9uLnBheXBhbEVuYWJsZWQgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuTE9DQUxfUEFZTUVOVF9OT1RfRU5BQkxFRClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChjbGllbnQsIFwibG9jYWwtcGF5bWVudC5pbml0aWFsaXplZFwiKTtcblxuICAgICAgbG9jYWxQYXltZW50SW5zdGFuY2UgPSBuZXcgTG9jYWxQYXltZW50KG9wdGlvbnMpO1xuXG4gICAgICByZXR1cm4gbG9jYWxQYXltZW50SW5zdGFuY2UuX2luaXRpYWxpemUoKTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogd3JhcFByb21pc2UoY3JlYXRlKSxcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBTREssIGkuZS4gYHtAcGtnIHZlcnNpb259YC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIFZFUlNJT046IFZFUlNJT04sXG59O1xuXG59LHtcIi4uL2xpYi9hbmFseXRpY3NcIjoxMTksXCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiOjEyMixcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIjoxMjksXCIuLi9saWIvY3JlYXRlLWRlZmVycmVkLWNsaWVudFwiOjEzMSxcIi4vZXh0ZXJuYWwvbG9jYWwtcGF5bWVudFwiOjE2MyxcIi4vc2hhcmVkL2Vycm9yc1wiOjE2NSxcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCI6NDN9XSwxNjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuTG9jYWxQYXltZW50IC0gQ3JlYXRpb24gRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIFtjcmVhdGluZyB0aGUgTG9jYWwgUGF5bWVudCBjb21wb25lbnRdKC4vbW9kdWxlLWJyYWludHJlZS13ZWJfbG9jYWwtcGF5bWVudC5odG1sIy5jcmVhdGUpLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gTE9DQUxfUEFZTUVOVF9OT1RfRU5BQkxFRCBPY2N1cnMgd2hlbiBMb2NhbCBQYXltZW50IGlzIG5vdCBlbmFibGVkIG9uIHRoZSBCcmFpbnRyZWUgY29udHJvbCBwYW5lbC5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLkxvY2FsUGF5bWVudCAtIHN0YXJ0UGF5bWVudCBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gdXNpbmcgdGhlIFtgc3RhcnRQYXltZW50YCBtZXRob2RdKC4vTG9jYWxQYXltZW50Lmh0bWwjc3RhcnRQYXltZW50KS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IExPQ0FMX1BBWU1FTlRfU1RBUlRfUEFZTUVOVF9NSVNTSU5HX1JFUVVJUkVEX09QVElPTiBPY2N1cnMgd2hlbiBhIHN0YXJ0UGF5bWVudCBpcyBtaXNzaW5nIGEgcmVxdWlyZWQgb3B0aW9uLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gTE9DQUxfUEFZTUVOVF9BTFJFQURZX0lOX1BST0dSRVNTIE9jY3VycyB3aGVuIGEgc3RhcnRQYXltZW50IGNhbGwgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcy5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IExPQ0FMX1BBWU1FTlRfSU5WQUxJRF9QQVlNRU5UX09QVElPTiBPY2N1cnMgd2hlbiBhIHN0YXJ0UGF5bWVudCBjYWxsIGhhcyBhbiBpbnZhbGlkIG9wdGlvbi5cbiAqIEBwcm9wZXJ0eSB7TkVUV09SS30gTE9DQUxfUEFZTUVOVF9TVEFSVF9QQVlNRU5UX0ZBSUxFRCBPY2N1cnMgd2hlbiBhIHN0YXJ0UGF5bWVudCBjYWxsIGZhaWxzLlxuICogQHByb3BlcnR5IHtORVRXT1JLfSBMT0NBTF9QQVlNRU5UX1RPS0VOSVpBVElPTl9GQUlMRUQgT2NjdXJzIHdoZW4gYSBzdGFydFBheW1lbnQgY2FsbCBmYWlscyB0byB0b2tlbml6ZSB0aGUgcmVzdWx0IGZyb20gYXV0aG9yaXphdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Q1VTVE9NRVJ9IExPQ0FMX1BBWU1FTlRfQ0FOQ0VMRUQgT2NjdXJzIHdoZW4gdGhlIGN1c3RvbWVyIGNhbmNlbHMgdGhlIExvY2FsIFBheW1lbnQuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBMT0NBTF9QQVlNRU5UX1dJTkRPV19DTE9TRUQgT2NjdXJzIHdoZW4gdGhlIGN1c3RvbWVyIGNsb3NlcyB0aGUgTG9jYWwgUGF5bWVudCB3aW5kb3cuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBMT0NBTF9QQVlNRU5UX1dJTkRPV19PUEVOX0ZBSUxFRCBPY2N1cnMgd2hlbiB0aGUgTG9jYWwgUGF5bWVudCB3aW5kb3cgZmFpbHMgdG8gb3Blbi4gVXN1YWxseSBiZWNhdXNlIGBzdGFydFBheW1lbnRgIHdhcyBub3QgY2FsbGVkIGFzIGEgZGlyZWN0IHJlc3VsdCBvZiBhIHVzZXIgYWN0aW9uLlxuICovXG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTE9DQUxfUEFZTUVOVF9OT1RfRU5BQkxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiTE9DQUxfUEFZTUVOVF9OT1RfRU5BQkxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiTG9jYWxQYXltZW50IGlzIG5vdCBlbmFibGVkIGZvciB0aGlzIG1lcmNoYW50LlwiLFxuICB9LFxuICBMT0NBTF9QQVlNRU5UX0FMUkVBRFlfSU5fUFJPR1JFU1M6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIkxPQ0FMX1BBWU1FTlRfQUxSRUFEWV9JTl9QUk9HUkVTU1wiLFxuICAgIG1lc3NhZ2U6IFwiTG9jYWxQYXltZW50IHBheW1lbnQgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcy5cIixcbiAgfSxcbiAgTE9DQUxfUEFZTUVOVF9DQU5DRUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiTE9DQUxfUEFZTUVOVF9DQU5DRUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ3VzdG9tZXIgY2FuY2VsZWQgdGhlIExvY2FsUGF5bWVudCBiZWZvcmUgYXV0aG9yaXppbmcuXCIsXG4gIH0sXG4gIExPQ0FMX1BBWU1FTlRfV0lORE9XX0NMT1NFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiTE9DQUxfUEFZTUVOVF9XSU5ET1dfQ0xPU0VEXCIsXG4gICAgbWVzc2FnZTogXCJDdXN0b21lciBjbG9zZWQgTG9jYWxQYXltZW50IHdpbmRvdyBiZWZvcmUgYXV0aG9yaXppbmcuXCIsXG4gIH0sXG4gIExPQ0FMX1BBWU1FTlRfV0lORE9XX09QRU5fRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJMT0NBTF9QQVlNRU5UX1dJTkRPV19PUEVOX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6XG4gICAgICBcIkxvY2FsUGF5bWVudCB3aW5kb3cgZmFpbGVkIHRvIG9wZW47IG1ha2Ugc3VyZSBzdGFydFBheW1lbnQgd2FzIGNhbGxlZCBpbiByZXNwb25zZSB0byBhIHVzZXIgYWN0aW9uLlwiLFxuICB9LFxuICBMT0NBTF9QQVlNRU5UX1NUQVJUX1BBWU1FTlRfRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTkVUV09SSyxcbiAgICBjb2RlOiBcIkxPQ0FMX1BBWU1FTlRfU1RBUlRfUEFZTUVOVF9GQUlMRURcIixcbiAgICBtZXNzYWdlOiBcIkxvY2FsUGF5bWVudCBzdGFydFBheW1lbnQgZmFpbGVkLlwiLFxuICB9LFxuICBMT0NBTF9QQVlNRU5UX1NUQVJUX1BBWU1FTlRfTUlTU0lOR19SRVFVSVJFRF9PUFRJT046IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIkxPQ0FMX1BBWU1FTlRfU1RBUlRfUEFZTUVOVF9NSVNTSU5HX1JFUVVJUkVEX09QVElPTlwiLFxuICAgIG1lc3NhZ2U6IFwiTWlzc2luZyByZXF1aXJlZCBvcHRpb24gZm9yIHN0YXJ0UGF5bWVudC5cIixcbiAgfSxcbiAgTE9DQUxfUEFZTUVOVF9TVEFSVF9QQVlNRU5UX0RFRkVSUkVEX1BBWU1FTlRfRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuVU5LTk9XTixcbiAgICBjb2RlOiBcIkxPQ0FMX1BBWU1FTlRfU1RBUlRfUEFZTUVOVF9ERUZFUlJFRF9QQVlNRU5UX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiTG9jYWxQYXltZW50IHN0YXJ0UGF5bWVudCBkZWZlcnJlZCBwYXltZW50IGZhaWxlZC5cIixcbiAgfSxcbiAgTE9DQUxfUEFZTUVOVF9UT0tFTklaQVRJT05fRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTkVUV09SSyxcbiAgICBjb2RlOiBcIkxPQ0FMX1BBWU1FTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ291bGQgbm90IHRva2VuaXplIHVzZXIncyBsb2NhbCBwYXltZW50IG1ldGhvZC5cIixcbiAgfSxcbiAgTE9DQUxfUEFZTUVOVF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJMT0NBTF9QQVlNRU5UX0lOVkFMSURfUEFZTUVOVF9PUFRJT05cIixcbiAgICBtZXNzYWdlOiBcIkxvY2FsIHBheW1lbnQgb3B0aW9ucyBhcmUgaW52YWxpZC5cIixcbiAgfSxcbn07XG5cbn0se1wiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNH1dLDE2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZyYW1lU2VydmljZSA9IF9kZXJlcV8oXCIuLi8uLi9saWIvZnJhbWUtc2VydmljZS9leHRlcm5hbFwiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvZXJyb3JzXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcbnZhciBtZXRob2RzID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9tZXRob2RzXCIpO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIGFuYWx5dGljcyA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYW5hbHl0aWNzXCIpO1xudmFyIGNvbnZlcnRNZXRob2RzVG9FcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9saWIvY29udmVydC1tZXRob2RzLXRvLWVycm9yXCIpO1xudmFyIGNvbnZlcnRUb0JyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9jb252ZXJ0LXRvLWJyYWludHJlZS1lcnJvclwiKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKFwiLi4vc2hhcmVkL2NvbnN0YW50c1wiKTtcblxudmFyIElOVEVHUkFUSU9OX1RJTUVPVVRfTVMgPVxuICBfZGVyZXFfKFwiLi4vLi4vbGliL2NvbnN0YW50c1wiKS5JTlRFR1JBVElPTl9USU1FT1VUX01TO1xuXG4vKipcbiAqIE1hc3RlcnBhc3MgQWRkcmVzcyBvYmplY3QuXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBNYXN0ZXJwYXNzfkFkZHJlc3NcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb3VudHJ5Q29kZUFscGhhMiBUaGUgY3VzdG9tZXIncyBjb3VudHJ5IGNvZGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZXh0ZW5kZWRBZGRyZXNzIFRoZSBjdXN0b21lcidzIGV4dGVuZGVkIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbG9jYWxpdHkgVGhlIGN1c3RvbWVyJ3MgbG9jYWxpdHkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcG9zdGFsQ29kZSBUaGUgY3VzdG9tZXIncyBwb3N0YWwgY29kZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSByZWdpb24gVGhlIGN1c3RvbWVyJ3MgcmVnaW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0cmVldEFkZHJlc3MgVGhlIGN1c3RvbWVyJ3Mgc3RyZWV0IGFkZHJlc3MuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBNYXN0ZXJwYXNzfnRva2VuaXplUGF5bG9hZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5vbmNlIFRoZSBwYXltZW50IG1ldGhvZCBub25jZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXNjcmlwdGlvbiBUaGUgaHVtYW4gcmVhZGFibGUgZGVzY3JpcHRpb24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgcGF5bWVudCBtZXRob2QgdHlwZSwgYWx3YXlzIGBNYXN0ZXJwYXNzQ2FyZGAuXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGV0YWlscyBBZGRpdGlvbmFsIGFjY291bnQgZGV0YWlscy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmNhcmRUeXBlIFR5cGUgb2YgY2FyZCwgZXg6IFZpc2EsIE1hc3RlckNhcmQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5sYXN0Rm91ciBMYXN0IGZvdXIgZGlnaXRzIG9mIGNhcmQgbnVtYmVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMubGFzdFR3byBMYXN0IHR3byBkaWdpdHMgb2YgY2FyZCBudW1iZXIuXG4gKiBAcHJvcGVydHkge29iamVjdH0gY29udGFjdCBUaGUgY3VzdG9tZXIncyBjb250YWN0IGluZm9ybWF0aW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRhY3QuZmlyc3ROYW1lIFRoZSBjdXN0b21lcidzIGZpcnN0IG5hbWUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGFjdC5sYXN0TmFtZSBUaGUgY3VzdG9tZXIncyBsYXN0IG5hbWUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGFjdC5waG9uZU51bWJlciBUaGUgY3VzdG9tZXIncyBwaG9uZSBudW1iZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGFjdC5lbWFpbEFkZHJlc3MgVGhlIGN1c3RvbWVyJ3MgZW1haWwgYWRkcmVzcy5cbiAqIEBwcm9wZXJ0eSB7TWFzdGVycGFzc35BZGRyZXNzfSBiaWxsaW5nQWRkcmVzcyBUaGUgY3VzdG9tZXIncyBiaWxsaW5nIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge01hc3RlcnBhc3N+QWRkcmVzc30gc2hpcHBpbmdBZGRyZXNzIFRoZSBjdXN0b21lcidzIHNoaXBwaW5nIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge29iamVjdH0gYmluRGF0YSBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY2FyZCBiYXNlZCBvbiB0aGUgYmluLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuY29tbWVyY2lhbCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5jb3VudHJ5T2ZJc3N1YW5jZSBUaGUgY291bnRyeSBvZiBpc3N1YW5jZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmRlYml0IFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmR1cmJpblJlZ3VsYXRlZCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5oZWFsdGhjYXJlIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmlzc3VpbmdCYW5rIFRoZSBpc3N1aW5nIGJhbmsuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5wYXlyb2xsIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLnByZXBhaWQgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEucHJvZHVjdElkIFRoZSBwcm9kdWN0IGlkLlxuICovXG5cbi8qKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBzZWUge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL21hc3RlcnBhc3MuY3JlYXRlfG1hc3RlcnBhc3MuY3JlYXRlfVxuICogQGRlc2NyaXB0aW9uIDxzdHJvbmc+WW91IGNhbm5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gVXNlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9tYXN0ZXJwYXNzLmNyZWF0ZXxicmFpbnRyZWUubWFzdGVycGFzcy5jcmVhdGV9IGluc3RlYWQuPC9zdHJvbmc+XG4gKiBAY2xhc3NkZXNjIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhbiBNYXN0ZXJwYXNzIGNvbXBvbmVudC4gSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgaGF2ZSBtZXRob2RzIGZvciBsYXVuY2hpbmcgYSBuZXcgd2luZG93IHRvIHByb2Nlc3MgYSB0cmFuc2FjdGlvbiB3aXRoIE1hc3RlcnBhc3MuXG4gKi9cbmZ1bmN0aW9uIE1hc3RlcnBhc3Mob3B0aW9ucykge1xuICB2YXIgY29uZmlndXJhdGlvbiA9IG9wdGlvbnMuY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKTtcblxuICB0aGlzLl9jbGllbnQgPSBvcHRpb25zLmNsaWVudDtcbiAgdGhpcy5fYXNzZXRzVXJsID1cbiAgICBjb25maWd1cmF0aW9uLmdhdGV3YXlDb25maWd1cmF0aW9uLmFzc2V0c1VybCArIFwiL3dlYi9cIiArIFZFUlNJT047XG4gIHRoaXMuX2lzRGVidWcgPSBjb25maWd1cmF0aW9uLmlzRGVidWc7XG4gIHRoaXMuX2F1dGhJblByb2dyZXNzID0gZmFsc2U7XG4gIGlmIChcbiAgICB3aW5kb3cucG9wdXBCcmlkZ2UgJiZcbiAgICB0eXBlb2Ygd2luZG93LnBvcHVwQnJpZGdlLmdldFJldHVyblVybFByZWZpeCA9PT0gXCJmdW5jdGlvblwiXG4gICkge1xuICAgIHRoaXMuX2NhbGxiYWNrVXJsID0gd2luZG93LnBvcHVwQnJpZGdlLmdldFJldHVyblVybFByZWZpeCgpICsgXCJyZXR1cm5cIjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9jYWxsYmFja1VybCA9XG4gICAgICB0aGlzLl9hc3NldHNVcmwgK1xuICAgICAgXCIvaHRtbC9yZWRpcmVjdC1mcmFtZVwiICtcbiAgICAgICh0aGlzLl9pc0RlYnVnID8gXCJcIiA6IFwiLm1pblwiKSArXG4gICAgICBcIi5odG1sXCI7XG4gIH1cbn1cblxuTWFzdGVycGFzcy5wcm90b3R5cGUuX2luaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICB2YXIgZmFpbHVyZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoc2VsZi5fY2xpZW50LCBcIm1hc3RlcnBhc3MubG9hZC50aW1lZC1vdXRcIik7XG4gICAgfSwgSU5URUdSQVRJT05fVElNRU9VVF9NUyk7XG5cbiAgICBmcmFtZVNlcnZpY2UuY3JlYXRlKFxuICAgICAge1xuICAgICAgICBuYW1lOiBjb25zdGFudHMuTEFORElOR19GUkFNRV9OQU1FLFxuICAgICAgICBoZWlnaHQ6IGNvbnN0YW50cy5QT1BVUF9IRUlHSFQsXG4gICAgICAgIHdpZHRoOiBjb25zdGFudHMuUE9QVVBfV0lEVEgsXG4gICAgICAgIGRpc3BhdGNoRnJhbWVVcmw6XG4gICAgICAgICAgc2VsZi5fYXNzZXRzVXJsICtcbiAgICAgICAgICBcIi9odG1sL2Rpc3BhdGNoLWZyYW1lXCIgK1xuICAgICAgICAgIChzZWxmLl9pc0RlYnVnID8gXCJcIiA6IFwiLm1pblwiKSArXG4gICAgICAgICAgXCIuaHRtbFwiLFxuICAgICAgICBvcGVuRnJhbWVVcmw6XG4gICAgICAgICAgc2VsZi5fYXNzZXRzVXJsICtcbiAgICAgICAgICBcIi9odG1sL21hc3RlcnBhc3MtbGFuZGluZy1mcmFtZVwiICtcbiAgICAgICAgICAoc2VsZi5faXNEZWJ1ZyA/IFwiXCIgOiBcIi5taW5cIikgK1xuICAgICAgICAgIFwiLmh0bWxcIixcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoc2VydmljZSkge1xuICAgICAgICBzZWxmLl9mcmFtZVNlcnZpY2UgPSBzZXJ2aWNlO1xuICAgICAgICBjbGVhclRpbWVvdXQoZmFpbHVyZVRpbWVvdXQpO1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHNlbGYuX2NsaWVudCwgXCJtYXN0ZXJwYXNzLmxvYWQuc3VjY2VlZGVkXCIpO1xuICAgICAgICByZXNvbHZlKHNlbGYpO1xuICAgICAgfVxuICAgICk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBMYXVuY2hlcyB0aGUgTWFzdGVycGFzcyBmbG93IGFuZCByZXR1cm5zIGEgbm9uY2UgcGF5bG9hZC4gT25seSBvbmUgTWFzdGVycGFzcyBmbG93IHNob3VsZCBiZSBhY3RpdmUgYXQgYSB0aW1lLiBPbmUgd2F5IHRvIGFjaGlldmUgdGhpcyBpcyB0byBkaXNhYmxlIHlvdXIgTWFzdGVycGFzcyBidXR0b24gd2hpbGUgdGhlIGZsb3cgaXMgb3Blbi5cbiAqXG4gKiBCcmFpbnRyZWUgd2lsbCBhcHBseSB0aGVzZSBwcm9wZXJ0aWVzIGluIGBvcHRpb25zLmNvbmZpZ2AuIE1lcmNoYW50cyBzaG91bGQgbm90IG92ZXJyaWRlIHRoZXNlIHZhbHVlcywgZXhjZXB0IGZvciBhZHZhbmNlZCB1c2FnZS5cbiAqICAtIGBlbnZpcm9ubWVudGBcbiAqICAtIGByZXF1ZXN0VG9rZW5gXG4gKiAgLSBgY2FsbGJhY2tVcmxgXG4gKiAgLSBgbWVyY2hhbnRDaGVja291dElkYFxuICogIC0gYGFsbG93ZWRDYXJkVHlwZXNgXG4gKiAgLSBgdmVyc2lvbmBcbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBbGwgb3B0aW9ucyBmb3IgaW5pdGlhdGluZyB0aGUgTWFzdGVycGFzcyBwYXltZW50IGZsb3cuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5jdXJyZW5jeUNvZGUgVGhlIGN1cnJlbmN5IGNvZGUgdG8gcHJvY2VzcyB0aGUgcGF5bWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnN1YnRvdGFsIFRoZSBhbW91bnQgdG8gYXV0aG9yaXplIGZvciB0aGUgdHJhbnNhY3Rpb24uXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuY29uZmlnXSBBbGwgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIGFjY2VwdGVkIGJ5IE1hc3RlcnBhc3MgbGlnaHRib3gsIGV4Y2VwdCBgZnVuY3Rpb25gIGRhdGEgdHlwZS4gVGhlc2Ugb3B0aW9ucyB3aWxsIG92ZXJyaWRlIHRoZSB2YWx1ZXMgc2V0IGJ5IEJyYWludHJlZSBzZXJ2ZXIuIFBsZWFzZSBzZWUge0BsaW5rIE1hc3RlcnBhc3MgTGlnaHRib3ggUGFyYW1ldGVyc3xodHRwczovL2RldmVsb3Blci5tYXN0ZXJjYXJkLmNvbS9wYWdlL21hc3RlcnBhc3MtbGlnaHRib3gtcGFyYW1ldGVyc30gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuZnJhbWVPcHRpb25zXSBVc2VkIHRvIGNvbmZpZ3VyZSB0aGUgd2luZG93IHRoYXQgY29udGFpbnMgdGhlIE1hc3RlcnBhc3MgbG9naW4uXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuZnJhbWVPcHRpb25zLndpZHRoXSBQb3B1cCB3aWR0aCB0byBiZSB1c2VkIGluc3RlYWQgb2YgZGVmYXVsdCB2YWx1ZSAoNDUwcHgpLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmZyYW1lT3B0aW9ucy5oZWlnaHRdIFBvcHVwIGhlaWdodCB0byBiZSB1c2VkIGluc3RlYWQgb2YgZGVmYXVsdCB2YWx1ZSAoNjYwcHgpLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmZyYW1lT3B0aW9ucy50b3BdIFRoZSB0b3AgcG9zaXRpb24gb2YgdGhlIHBvcHVwIHdpbmRvdyB0byBiZSB1c2VkIGluc3RlYWQgb2YgZGVmYXVsdCB2YWx1ZSwgdGhhdCBpcyBjYWxjdWxhdGVkIGJhc2VkIG9uIHByb3ZpZGVkIGhlaWdodCwgYW5kIHBhcmVudCB3aW5kb3cgc2l6ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5mcmFtZU9wdGlvbnMubGVmdF0gVGhlIGxlZnQgcG9zaXRpb24gdG8gdGhlIHBvcHVwIHdpbmRvdyB0byBiZSB1c2VkIGluc3RlYWQgb2YgZGVmYXVsdCB2YWx1ZSwgdGhhdCBpcyBjYWxjdWxhdGVkIGJhc2VkIG9uIHByb3ZpZGVkIHdpZHRoLCBhbmQgcGFyZW50IHdpbmRvdyBzaXplLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgc2Vjb25kIGFyZ3VtZW50LCA8Y29kZT5kYXRhPC9jb2RlPiwgaXMgYSB7QGxpbmsgTWFzdGVycGFzc350b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfS4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIHRoZSBtZXRob2Qgd2lsbCByZXR1cm4gYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIHtAbGluayBNYXN0ZXJwYXNzfnRva2VuaXplUGF5bG9hZHx0b2tlbml6ZVBheWxvYWR9LlxuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqIEBleGFtcGxlXG4gKiBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gKiAgIC8vIERpc2FibGUgdGhlIGJ1dHRvbiBzbyB0aGF0IHdlIGRvbid0IGF0dGVtcHQgdG8gb3BlbiBtdWx0aXBsZSBwb3B1cHMuXG4gKiAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gKlxuICogICAvLyBCZWNhdXNlIHRva2VuaXplIG9wZW5zIGEgbmV3IHdpbmRvdywgdGhpcyBtdXN0IGJlIGNhbGxlZFxuICogICAvLyBhcyBhIHJlc3VsdCBvZiBhIHVzZXIgYWN0aW9uLCBzdWNoIGFzIGEgYnV0dG9uIGNsaWNrLlxuICogICBtYXN0ZXJwYXNzSW5zdGFuY2UudG9rZW5pemUoe1xuICogICAgIGN1cnJlbmN5Q29kZTogJ1VTRCcsXG4gKiAgICAgc3VidG90YWw6ICcxMC4wMCdcbiAqICAgfSkudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICogICAgIGJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gKiAgICAgLy8gU3VibWl0IHBheWxvYWQubm9uY2UgdG8geW91ciBzZXJ2ZXJcbiAqICAgfSkuY2F0Y2goZnVuY3Rpb24gKHRva2VuaXplRXJyb3IpIHtcbiAqICAgICBidXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICogICAgIC8vIEhhbmRsZSBmbG93IGVycm9ycyBvciBwcmVtYXR1cmUgZmxvdyBjbG9zdXJlXG4gKlxuICogICAgIHN3aXRjaCAodG9rZW5pemVFcnIuY29kZSkge1xuICogICAgICAgY2FzZSAnTUFTVEVSUEFTU19QT1BVUF9DTE9TRUQnOlxuICogICAgICAgICBjb25zb2xlLmVycm9yKCdDdXN0b21lciBjbG9zZWQgTWFzdGVycGFzcyBwb3B1cC4nKTtcbiAqICAgICAgICAgYnJlYWs7XG4gKiAgICAgICBjYXNlICdNQVNURVJQQVNTX0FDQ09VTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRCc6XG4gKiAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hc3RlcnBhc3MgdG9rZW5pemF0aW9uIGZhaWxlZC4gU2VlIGRldGFpbHM6JywgdG9rZW5pemVFcnIuZGV0YWlscyk7XG4gKiAgICAgICAgIGJyZWFrO1xuICogICAgICAgY2FzZSAnTUFTVEVSUEFTU19GTE9XX0ZBSUxFRCc6XG4gKiAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBpbml0aWFsaXplIE1hc3RlcnBhc3MgZmxvdy4gQXJlIHlvdXIgb3B0aW9ucyBjb3JyZWN0PycsIHRva2VuaXplRXJyLmRldGFpbHMpO1xuICogICAgICAgICBicmVhaztcbiAqICAgICAgIGRlZmF1bHQ6XG4gKiAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIScsIHRva2VuaXplRXJyKTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICogfSk7XG4gKi9cbk1hc3RlcnBhc3MucHJvdG90eXBlLnRva2VuaXplID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghb3B0aW9ucyB8fCBoYXNNaXNzaW5nT3B0aW9uKG9wdGlvbnMpKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5NQVNURVJQQVNTX1RPS0VOSVpFX01JU1NJTkdfUkVRVUlSRURfT1BUSU9OKVxuICAgICk7XG4gIH1cblxuICBpZiAoc2VsZi5fYXV0aEluUHJvZ3Jlc3MpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLk1BU1RFUlBBU1NfVE9LRU5JWkFUSU9OX0FMUkVBRFlfSU5fUFJPR1JFU1MpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgc2VsZi5fbmF2aWdhdGVGcmFtZVRvTG9hZGluZ1BhZ2Uob3B0aW9ucykuY2F0Y2gocmVqZWN0KTtcbiAgICAvLyBUaGlzIE1VU1QgaGFwcGVuIGFmdGVyIF9uYXZpZ2F0ZUZyYW1lVG9Mb2FkaW5nUGFnZSBmb3IgTWV0cm8gYnJvd3NlcnMgdG8gd29yay5cbiAgICBzZWxmLl9mcmFtZVNlcnZpY2Uub3BlbihcbiAgICAgIG9wdGlvbnMuZnJhbWVPcHRpb25zLFxuICAgICAgc2VsZi5fY3JlYXRlRnJhbWVPcGVuSGFuZGxlcihyZXNvbHZlLCByZWplY3QpXG4gICAgKTtcbiAgfSk7XG59O1xuXG5NYXN0ZXJwYXNzLnByb3RvdHlwZS5fbmF2aWdhdGVGcmFtZVRvTG9hZGluZ1BhZ2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5fYXV0aEluUHJvZ3Jlc3MgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzLl9jbGllbnRcbiAgICAucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgICAgZW5kcG9pbnQ6IFwibWFzdGVycGFzcy9yZXF1ZXN0X3Rva2VuXCIsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHJlcXVlc3RUb2tlbjoge1xuICAgICAgICAgIG9yaWdpblVybDogd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLFxuICAgICAgICAgIHN1YnRvdGFsOiBvcHRpb25zLnN1YnRvdGFsLFxuICAgICAgICAgIGN1cnJlbmN5Q29kZTogb3B0aW9ucy5jdXJyZW5jeUNvZGUsXG4gICAgICAgICAgY2FsbGJhY2tVcmw6IHRoaXMuX2NhbGxiYWNrVXJsLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgdmFyIHJlZGlyZWN0VXJsID1cbiAgICAgICAgc2VsZi5fYXNzZXRzVXJsICtcbiAgICAgICAgXCIvaHRtbC9tYXN0ZXJwYXNzLWxvYWRpbmctZnJhbWVcIiArXG4gICAgICAgIChzZWxmLl9pc0RlYnVnID8gXCJcIiA6IFwiLm1pblwiKSArXG4gICAgICAgIFwiLmh0bWw/XCI7XG4gICAgICB2YXIgZ2F0ZXdheUNvbmZpZ3VyYXRpb24gPVxuICAgICAgICBzZWxmLl9jbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpLmdhdGV3YXlDb25maWd1cmF0aW9uO1xuICAgICAgdmFyIGNvbmZpZyA9IG9wdGlvbnMuY29uZmlnIHx8IHt9O1xuICAgICAgdmFyIHF1ZXJ5UGFyYW1zO1xuXG4gICAgICBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgZW52aXJvbm1lbnQ6IGdhdGV3YXlDb25maWd1cmF0aW9uLmVudmlyb25tZW50LFxuICAgICAgICByZXF1ZXN0VG9rZW46IHJlc3BvbnNlLnJlcXVlc3RUb2tlbixcbiAgICAgICAgY2FsbGJhY2tVcmw6IHNlbGYuX2NhbGxiYWNrVXJsLFxuICAgICAgICBtZXJjaGFudENoZWNrb3V0SWQ6IGdhdGV3YXlDb25maWd1cmF0aW9uLm1hc3RlcnBhc3MubWVyY2hhbnRDaGVja291dElkLFxuICAgICAgICBhbGxvd2VkQ2FyZFR5cGVzOiBnYXRld2F5Q29uZmlndXJhdGlvbi5tYXN0ZXJwYXNzLnN1cHBvcnRlZE5ldHdvcmtzLFxuICAgICAgICB2ZXJzaW9uOiBjb25zdGFudHMuTUFTVEVSUEFTU19WRVJTSU9OLFxuICAgICAgfTtcblxuICAgICAgT2JqZWN0LmtleXMoY29uZmlnKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWdba2V5XSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbXNba2V5XSA9IGNvbmZpZ1trZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmVkaXJlY3RVcmwgKz0gT2JqZWN0LmtleXMocXVlcnlQYXJhbXMpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBrZXkgKyBcIj1cIiArIHF1ZXJ5UGFyYW1zW2tleV07XG4gICAgICAgIH0pXG4gICAgICAgIC5qb2luKFwiJlwiKTtcblxuICAgICAgc2VsZi5fZnJhbWVTZXJ2aWNlLnJlZGlyZWN0KHJlZGlyZWN0VXJsKTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICB2YXIgc3RhdHVzID0gZXJyLmRldGFpbHMgJiYgZXJyLmRldGFpbHMuaHR0cFN0YXR1cztcblxuICAgICAgc2VsZi5fY2xvc2VXaW5kb3coKTtcblxuICAgICAgaWYgKHN0YXR1cyA9PT0gNDIyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgICBjb252ZXJ0VG9CcmFpbnRyZWVFcnJvcihlcnIsIGVycm9ycy5NQVNURVJQQVNTX0lOVkFMSURfUEFZTUVOVF9PUFRJT04pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgY29udmVydFRvQnJhaW50cmVlRXJyb3IoZXJyLCBlcnJvcnMuTUFTVEVSUEFTU19GTE9XX0ZBSUxFRClcbiAgICAgICk7XG4gICAgfSk7XG59O1xuXG5NYXN0ZXJwYXNzLnByb3RvdHlwZS5fY3JlYXRlRnJhbWVPcGVuSGFuZGxlciA9IGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICh3aW5kb3cucG9wdXBCcmlkZ2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHBvcHVwQnJpZGdlRXJyLCBwYXlsb2FkKSB7XG4gICAgICBzZWxmLl9hdXRoSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgICBpZiAocG9wdXBCcmlkZ2VFcnIpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgICBzZWxmLl9jbGllbnQsXG4gICAgICAgICAgXCJtYXN0ZXJwYXNzLnRva2VuaXphdGlvbi5jbG9zZWQtcG9wdXBicmlkZ2UuYnktdXNlclwiXG4gICAgICAgICk7XG4gICAgICAgIHJlamVjdChcbiAgICAgICAgICBjb252ZXJ0VG9CcmFpbnRyZWVFcnJvcihcbiAgICAgICAgICAgIHBvcHVwQnJpZGdlRXJyLFxuICAgICAgICAgICAgZXJyb3JzLk1BU1RFUlBBU1NfUE9QVVBfQ0xPU0VEXG4gICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoIXBheWxvYWQucXVlcnlJdGVtcykge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIHNlbGYuX2NsaWVudCxcbiAgICAgICAgICBcIm1hc3RlcnBhc3MudG9rZW5pemF0aW9uLmZhaWxlZC1wb3B1cGJyaWRnZVwiXG4gICAgICAgICk7XG4gICAgICAgIHJlamVjdChuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLk1BU1RFUlBBU1NfRkxPV19GQUlMRUQpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX3Rva2VuaXplTWFzdGVycGFzcyhwYXlsb2FkLnF1ZXJ5SXRlbXMpLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmcmFtZVNlcnZpY2VFcnIsIHBheWxvYWQpIHtcbiAgICBpZiAoZnJhbWVTZXJ2aWNlRXJyKSB7XG4gICAgICBzZWxmLl9hdXRoSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgICBpZiAoZnJhbWVTZXJ2aWNlRXJyLmNvZGUgPT09IFwiRlJBTUVfU0VSVklDRV9GUkFNRV9DTE9TRURcIikge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIHNlbGYuX2NsaWVudCxcbiAgICAgICAgICBcIm1hc3RlcnBhc3MudG9rZW5pemF0aW9uLmNsb3NlZC5ieS11c2VyXCJcbiAgICAgICAgKTtcbiAgICAgICAgcmVqZWN0KG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuTUFTVEVSUEFTU19QT1BVUF9DTE9TRUQpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgZnJhbWVTZXJ2aWNlRXJyLmNvZGUgJiZcbiAgICAgICAgZnJhbWVTZXJ2aWNlRXJyLmNvZGUuaW5kZXhPZihcIkZSQU1FX1NFUlZJQ0VfRlJBTUVfT1BFTl9GQUlMRURcIikgPiAtMVxuICAgICAgKSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgc2VsZi5fY2xpZW50LFxuICAgICAgICAgIFwibWFzdGVycGFzcy50b2tlbml6YXRpb24uZmFpbGVkLnRvLW9wZW5cIlxuICAgICAgICApO1xuICAgICAgICByZWplY3QoXG4gICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICAgIGNvZGU6IGVycm9ycy5NQVNURVJQQVNTX1BPUFVQX09QRU5fRkFJTEVELmNvZGUsXG4gICAgICAgICAgICB0eXBlOiBlcnJvcnMuTUFTVEVSUEFTU19QT1BVUF9PUEVOX0ZBSUxFRC50eXBlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JzLk1BU1RFUlBBU1NfUE9QVVBfT1BFTl9GQUlMRUQubWVzc2FnZSxcbiAgICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZnJhbWVTZXJ2aWNlRXJyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwibWFzdGVycGFzcy50b2tlbml6YXRpb24uZmFpbGVkXCIpO1xuICAgICAgc2VsZi5fY2xvc2VXaW5kb3coKTtcbiAgICAgIHJlamVjdChcbiAgICAgICAgY29udmVydFRvQnJhaW50cmVlRXJyb3IoZnJhbWVTZXJ2aWNlRXJyLCBlcnJvcnMuTUFTVEVSUEFTU19GTE9XX0ZBSUxFRClcbiAgICAgICk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxmLl90b2tlbml6ZU1hc3RlcnBhc3MocGF5bG9hZCkudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpO1xuICB9O1xufTtcblxuTWFzdGVycGFzcy5wcm90b3R5cGUuX3Rva2VuaXplTWFzdGVycGFzcyA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAocGF5bG9hZC5tcHN0YXR1cyAhPT0gXCJzdWNjZXNzXCIpIHtcbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHNlbGYuX2NsaWVudCwgXCJtYXN0ZXJwYXNzLnRva2VuaXphdGlvbi5jbG9zZWQuYnktdXNlclwiKTtcbiAgICBzZWxmLl9jbG9zZVdpbmRvdygpO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuTUFTVEVSUEFTU19QT1BVUF9DTE9TRUQpKTtcbiAgfVxuXG4gIGlmIChpc01pc3NpbmdSZXF1aXJlZFBheWxvYWQocGF5bG9hZCkpIHtcbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgc2VsZi5fY2xpZW50LFxuICAgICAgXCJtYXN0ZXJwYXNzLnRva2VuaXphdGlvbi5jbG9zZWQubWlzc2luZy1wYXlsb2FkXCJcbiAgICApO1xuICAgIHNlbGYuX2Nsb3NlV2luZG93KCk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLk1BU1RFUlBBU1NfUE9QVVBfTUlTU0lOR19SRVFVSVJFRF9QQVJBTUVURVJTKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gc2VsZi5fY2xpZW50XG4gICAgLnJlcXVlc3Qoe1xuICAgICAgZW5kcG9pbnQ6IFwicGF5bWVudF9tZXRob2RzL21hc3RlcnBhc3NfY2FyZHNcIixcbiAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIG1hc3RlcnBhc3NDYXJkOiB7XG4gICAgICAgICAgY2hlY2tvdXRSZXNvdXJjZVVybDogcGF5bG9hZC5jaGVja291dF9yZXNvdXJjZV91cmwsXG4gICAgICAgICAgcmVxdWVzdFRva2VuOiBwYXlsb2FkLm9hdXRoX3Rva2VuLFxuICAgICAgICAgIHZlcmlmaWVyVG9rZW46IHBheWxvYWQub2F1dGhfdmVyaWZpZXIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBzZWxmLl9jbG9zZVdpbmRvdygpO1xuICAgICAgaWYgKHdpbmRvdy5wb3B1cEJyaWRnZSkge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIHNlbGYuX2NsaWVudCxcbiAgICAgICAgICBcIm1hc3RlcnBhc3MudG9rZW5pemF0aW9uLnN1Y2Nlc3MtcG9wdXBicmlkZ2VcIlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwibWFzdGVycGFzcy50b2tlbml6YXRpb24uc3VjY2Vzc1wiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLm1hc3RlcnBhc3NDYXJkc1swXTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAodG9rZW5pemVFcnIpIHtcbiAgICAgIHNlbGYuX2Nsb3NlV2luZG93KCk7XG4gICAgICBpZiAod2luZG93LnBvcHVwQnJpZGdlKSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgc2VsZi5fY2xpZW50LFxuICAgICAgICAgIFwibWFzdGVycGFzcy50b2tlbml6YXRpb24uZmFpbGVkLXBvcHVwYnJpZGdlXCJcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoc2VsZi5fY2xpZW50LCBcIm1hc3RlcnBhc3MudG9rZW5pemF0aW9uLmZhaWxlZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBjb252ZXJ0VG9CcmFpbnRyZWVFcnJvcihcbiAgICAgICAgICB0b2tlbml6ZUVycixcbiAgICAgICAgICBlcnJvcnMuTUFTVEVSUEFTU19BQ0NPVU5UX1RPS0VOSVpBVElPTl9GQUlMRURcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9KTtcbn07XG5cbmZ1bmN0aW9uIGlzTWlzc2luZ1JlcXVpcmVkUGF5bG9hZChwYXlsb2FkKSB7XG4gIHJldHVybiBbXG4gICAgcGF5bG9hZC5vYXV0aF92ZXJpZmllcixcbiAgICBwYXlsb2FkLm9hdXRoX3Rva2VuLFxuICAgIHBheWxvYWQuY2hlY2tvdXRfcmVzb3VyY2VfdXJsLFxuICBdLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudCA9PSBudWxsIHx8IGVsZW1lbnQgPT09IFwibnVsbFwiO1xuICB9KTtcbn1cblxuTWFzdGVycGFzcy5wcm90b3R5cGUuX2Nsb3NlV2luZG93ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hdXRoSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICB0aGlzLl9mcmFtZVNlcnZpY2UuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogQ2xlYW5seSB0ZWFyIGRvd24gYW55dGhpbmcgc2V0IHVwIGJ5IHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9tYXN0ZXJwYXNzLmNyZWF0ZXxjcmVhdGV9LlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsZWQgb24gY29tcGxldGlvbi4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGB0ZWFyZG93bmAgcmV0dXJucyBhIHByb21pc2UuXG4gKiBAZXhhbXBsZVxuICogbWFzdGVycGFzc0luc3RhbmNlLnRlYXJkb3duKCk7XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5XaXRoIGNhbGxiYWNrPC9jYXB0aW9uPlxuICogbWFzdGVycGFzc0luc3RhbmNlLnRlYXJkb3duKGZ1bmN0aW9uICgpIHtcbiAqICAgLy8gdGVhcmRvd24gaXMgY29tcGxldGVcbiAqIH0pO1xuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuTWFzdGVycGFzcy5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICBzZWxmLl9mcmFtZVNlcnZpY2UudGVhcmRvd24oKTtcblxuICAgIGNvbnZlcnRNZXRob2RzVG9FcnJvcihzZWxmLCBtZXRob2RzKE1hc3RlcnBhc3MucHJvdG90eXBlKSk7XG5cbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHNlbGYuX2NsaWVudCwgXCJtYXN0ZXJwYXNzLnRlYXJkb3duLWNvbXBsZXRlZFwiKTtcblxuICAgIHJlc29sdmUoKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBoYXNNaXNzaW5nT3B0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIGksIG9wdGlvbjtcblxuICBmb3IgKGkgPSAwOyBpIDwgY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlNfRk9SX1RPS0VOSVpFLmxlbmd0aDsgaSsrKSB7XG4gICAgb3B0aW9uID0gY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlNfRk9SX1RPS0VOSVpFW2ldO1xuXG4gICAgaWYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KG9wdGlvbikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3cmFwUHJvbWlzZS53cmFwUHJvdG90eXBlKE1hc3RlcnBhc3MpO1xuXG59LHtcIi4uLy4uL2xpYi9hbmFseXRpY3NcIjoxMTksXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vLi4vbGliL2NvbnN0YW50c1wiOjEyNixcIi4uLy4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIjoxMjcsXCIuLi8uLi9saWIvY29udmVydC10by1icmFpbnRyZWUtZXJyb3JcIjoxMjgsXCIuLi8uLi9saWIvZnJhbWUtc2VydmljZS9leHRlcm5hbFwiOjEzOSxcIi4uLy4uL2xpYi9tZXRob2RzXCI6MTU1LFwiLi4vc2hhcmVkL2NvbnN0YW50c1wiOjE2OSxcIi4uL3NoYXJlZC9lcnJvcnNcIjoxNzAsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMTY3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgYnJhaW50cmVlLXdlYi9tYXN0ZXJwYXNzXG4gKiBAZGVzY3JpcHRpb24gUHJvY2Vzc2VzIE1hc3RlcnBhc3MuICpUaGlzIGNvbXBvbmVudCBpcyBjdXJyZW50bHkgaW4gYmV0YSBhbmQgaXMgc3ViamVjdCB0byBjaGFuZ2UuKlxuICovXG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uID0gX2RlcmVxXyhcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCIpO1xudmFyIGJyb3dzZXJEZXRlY3Rpb24gPSBfZGVyZXFfKFwiLi9zaGFyZWQvYnJvd3Nlci1kZXRlY3Rpb25cIik7XG52YXIgTWFzdGVycGFzcyA9IF9kZXJlcV8oXCIuL2V4dGVybmFsL21hc3RlcnBhc3NcIik7XG52YXIgY3JlYXRlRGVmZXJyZWRDbGllbnQgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIik7XG52YXIgY3JlYXRlQXNzZXRzVXJsID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiKTtcbnZhciBWRVJTSU9OID0gXCIzLjEwMC4wXCI7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vc2hhcmVkL2Vycm9yc1wiKTtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDcmVhdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgYGRhdGFgLCBpcyB0aGUge0BsaW5rIE1hc3RlcnBhc3N9IGluc3RhbmNlLiBJZiBubyBjYWxsYmFjayBpcyBwYXNzZWQgaW4sIHRoZSBjcmVhdGUgZnVuY3Rpb24gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0aGUge0BsaW5rIE1hc3RlcnBhc3N9IGluc3RhbmNlLlxuICogQGV4YW1wbGVcbiAqIGJyYWludHJlZS5tYXN0ZXJwYXNzLmNyZWF0ZSh7XG4gKiAgIGNsaWVudDogY2xpZW50SW5zdGFuY2VcbiAqIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIG1hc3RlcnBhc3NJbnN0YW5jZSkge1xuICogICBpZiAoY3JlYXRlRXJyKSB7XG4gKiAgICAgaWYgKGNyZWF0ZUVyci5jb2RlID09PSAnTUFTVEVSUEFTU19CUk9XU0VSX05PVF9TVVBQT1JURUQnKSB7XG4gKiAgICAgICBjb25zb2xlLmVycm9yKCdUaGlzIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAqICAgICB9IGVsc2Uge1xuICogICAgICAgY29uc29sZS5lcnJvcignRXJyb3IhJywgY3JlYXRlRXJyKTtcbiAqICAgICB9XG4gKiAgICAgcmV0dXJuO1xuICogICB9XG4gKiB9KTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHZhciBuYW1lID0gXCJNYXN0ZXJwYXNzXCI7XG5cbiAgcmV0dXJuIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uXG4gICAgLnZlcmlmeSh7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgY2xpZW50OiBvcHRpb25zLmNsaWVudCxcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5NQVNURVJQQVNTX0JST1dTRVJfTk9UX1NVUFBPUlRFRClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZURlZmVycmVkQ2xpZW50LmNyZWF0ZSh7XG4gICAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgICAgY2xpZW50OiBvcHRpb25zLmNsaWVudCxcbiAgICAgICAgZGVidWc6IG9wdGlvbnMuZGVidWcsXG4gICAgICAgIGFzc2V0c1VybDogY3JlYXRlQXNzZXRzVXJsLmNyZWF0ZShvcHRpb25zLmF1dGhvcml6YXRpb24pLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgfSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICB2YXIgbWFzdGVycGFzc0luc3RhbmNlLCBjb25maWd1cmF0aW9uO1xuXG4gICAgICBvcHRpb25zLmNsaWVudCA9IGNsaWVudDtcbiAgICAgIGNvbmZpZ3VyYXRpb24gPSBvcHRpb25zLmNsaWVudC5nZXRDb25maWd1cmF0aW9uKCkuZ2F0ZXdheUNvbmZpZ3VyYXRpb247XG5cbiAgICAgIGlmICghY29uZmlndXJhdGlvbi5tYXN0ZXJwYXNzKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLk1BU1RFUlBBU1NfTk9UX0VOQUJMRUQpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIG1hc3RlcnBhc3NJbnN0YW5jZSA9IG5ldyBNYXN0ZXJwYXNzKG9wdGlvbnMpO1xuXG4gICAgICByZXR1cm4gbWFzdGVycGFzc0luc3RhbmNlLl9pbml0aWFsaXplKCk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogQHN0YXRpY1xuICogQGZ1bmN0aW9uIGlzU3VwcG9ydGVkXG4gKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0cnVlIGlmIE1hc3RlcnBhc3Mgc3VwcG9ydHMgdGhpcyBicm93c2VyLlxuICogQGV4YW1wbGVcbiAqIGlmIChicmFpbnRyZWUubWFzdGVycGFzcy5pc1N1cHBvcnRlZCgpKSB7XG4gKiAgIC8vIEFkZCBNYXN0ZXJwYXNzIGJ1dHRvbiB0byB0aGUgcGFnZVxuICogfSBlbHNlIHtcbiAqICAgLy8gSGlkZSBNYXN0ZXJwYXNzIHBheW1lbnQgb3B0aW9uXG4gKiB9XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIE1hc3RlcnBhc3Mgc3VwcG9ydHMgdGhpcyBicm93c2VyLlxuICovXG5mdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcbiAgcmV0dXJuIEJvb2xlYW4od2luZG93LnBvcHVwQnJpZGdlIHx8IGJyb3dzZXJEZXRlY3Rpb24uc3VwcG9ydHNQb3B1cHMoKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IHdyYXBQcm9taXNlKGNyZWF0ZSksXG4gIGlzU3VwcG9ydGVkOiBpc1N1cHBvcnRlZCxcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBTREssIGkuZS4gYHtAcGtnIHZlcnNpb259YC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIFZFUlNJT046IFZFUlNJT04sXG59O1xuXG59LHtcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCI6MTIyLFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiOjEyOSxcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCI6MTMxLFwiLi9leHRlcm5hbC9tYXN0ZXJwYXNzXCI6MTY2LFwiLi9zaGFyZWQvYnJvd3Nlci1kZXRlY3Rpb25cIjoxNjgsXCIuL3NoYXJlZC9lcnJvcnNcIjoxNzAsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMTY4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3VwcG9ydHNQb3B1cHM6IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL3N1cHBvcnRzLXBvcHVwc1wiKSxcbn07XG5cbn0se1wiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9zdXBwb3J0cy1wb3B1cHNcIjozMn1dLDE2OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIExBTkRJTkdfRlJBTUVfTkFNRTogXCJicmFpbnRyZWVtYXN0ZXJwYXNzbGFuZGluZ1wiLFxuICBQT1BVUF9XSURUSDogNDUwLFxuICBQT1BVUF9IRUlHSFQ6IDY2MCxcbiAgTUFTVEVSUEFTU19WRVJTSU9OOiBcInY2XCIsXG4gIFJFUVVJUkVEX09QVElPTlNfRk9SX1RPS0VOSVpFOiBbXCJzdWJ0b3RhbFwiLCBcImN1cnJlbmN5Q29kZVwiXSxcbn07XG5cbn0se31dLDE3MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5NYXN0ZXJwYXNzIC0gQ3JlYXRpb24gRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIFtjcmVhdGluZyB0aGUgTWFzdGVycGFzcyBjb21wb25lbnRdKC4vbW9kdWxlLWJyYWludHJlZS13ZWJfbWFzdGVycGFzcyMuY3JlYXRlKS5cbiAqIEBwcm9wZXJ0eSB7Q1VTVE9NRVJ9IE1BU1RFUlBBU1NfQlJPV1NFUl9OT1RfU1VQUE9SVEVEIE9jY3VycyB3aGVuIGJyb3dzZXIgaXMgbm90IGEgc3VwcG9ydGVkIGJyb3dzZXIgZm9yIE1hc3RlcnBhc3MuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBNQVNURVJQQVNTX05PVF9FTkFCTEVEIE9jY3VycyB3aGVuIE1hc3RlcnBhc3MgaXMgbm90IGVuYWJsZWQgaW4gdGhlIEJyYWludHJlZSBjb250cm9sIHBhbmVsLlxuICovXG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuTWFzdGVycGFzcyAtIFRva2VuaXplIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiBbdG9rZW5pemluZ10oLi9NYXN0ZXJwYXNzLmh0bWwjdG9rZW5pemUpLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gTUFTVEVSUEFTU19UT0tFTklaRV9NSVNTSU5HX1JFUVVJUkVEX09QVElPTiBPY2N1cnMgd2hlbiB0b2tlbml6ZSBpcyBjYWxsZWQgd2l0aG91dCBhIHJlcXVpcmVkIG9wdGlvbi5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IE1BU1RFUlBBU1NfVE9LRU5JWkFUSU9OX0FMUkVBRFlfSU5fUFJPR1JFU1MgT2NjdXJzIGlmIHRva2VuaXphdGlvbiBmbG93IGlzIGluaXRpYWxpemVkIHdoaWxlIGFub3RoZXIgZmxvdyBpcyBhbHJlYWR5IGluIHByb2dyZXNzLlxuICogQHByb3BlcnR5IHtORVRXT1JLfSBNQVNURVJQQVNTX0FDQ09VTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRCBPY2N1cnMgd2hlbiB0b2tlbml6YXRpb24gb2YgTWFzdGVycGFzcyBkZXRhaWxzIGZhaWxzLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gTUFTVEVSUEFTU19QT1BVUF9PUEVOX0ZBSUxFRCBPY2N1cnMgd2hlbiB0aGUgcG9wdXAgZmFpbHMgdG8gb3Blbi5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IE1BU1RFUlBBU1NfUE9QVVBfTUlTU0lOR19SRVFVSVJFRF9QQVJBTUVURVJTIE9jY3VycyB3aGVuIE1hc3RlcnBhc3MgaXMgbWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXJzIGZvciB0b2tlbml6YXRpb24uXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBNQVNURVJQQVNTX1BPUFVQX0NMT1NFRCBPY2N1cnMgd2hlbiB0aGUgcG9wdXAgaXMgY2xvc2VkIGJ5IHRoZSBjdXN0b21lci5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IE1BU1RFUlBBU1NfSU5WQUxJRF9QQVlNRU5UX09QVElPTiBPY2N1cnMgd2hlbiBhbiBpbnZhbGlkIHBheW1lbnQgb3B0aW9uIGlzIHVzZWQgdG8gdG9rZW5pemUgTWFzdGVycGFzcy5cbiAqIEBwcm9wZXJ0eSB7TkVUV09SS30gTUFTVEVSUEFTU19GTE9XX0ZBSUxFRCBPY2N1cnMgd2hlbiBhbiBlcnJvciBpcyByZXR1cm5lZCBmcm9tIHJlcXVlc3QgdG8gdG9rZW5pemUuXG4gKi9cblxudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBNQVNURVJQQVNTX0JST1dTRVJfTk9UX1NVUFBPUlRFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiTUFTVEVSUEFTU19CUk9XU0VSX05PVF9TVVBQT1JURURcIixcbiAgICBtZXNzYWdlOiBcIkJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC5cIixcbiAgfSxcbiAgTUFTVEVSUEFTU19OT1RfRU5BQkxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiTUFTVEVSUEFTU19OT1RfRU5BQkxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiTWFzdGVycGFzcyBpcyBub3QgZW5hYmxlZCBmb3IgdGhpcyBtZXJjaGFudC5cIixcbiAgfSxcbiAgTUFTVEVSUEFTU19UT0tFTklaRV9NSVNTSU5HX1JFUVVJUkVEX09QVElPTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiTUFTVEVSUEFTU19UT0tFTklaRV9NSVNTSU5HX1JFUVVJUkVEX09QVElPTlwiLFxuICAgIG1lc3NhZ2U6IFwiTWlzc2luZyByZXF1aXJlZCBvcHRpb24gZm9yIHRva2VuaXplLlwiLFxuICB9LFxuICBNQVNURVJQQVNTX1RPS0VOSVpBVElPTl9BTFJFQURZX0lOX1BST0dSRVNTOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJNQVNURVJQQVNTX1RPS0VOSVpBVElPTl9BTFJFQURZX0lOX1BST0dSRVNTXCIsXG4gICAgbWVzc2FnZTogXCJNYXN0ZXJwYXNzIHRva2VuaXphdGlvbiBpcyBhbHJlYWR5IGluIHByb2dyZXNzLlwiLFxuICB9LFxuICBNQVNURVJQQVNTX0FDQ09VTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk5FVFdPUkssXG4gICAgY29kZTogXCJNQVNURVJQQVNTX0FDQ09VTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ291bGQgbm90IHRva2VuaXplIHVzZXIncyBNYXN0ZXJwYXNzIGFjY291bnQuXCIsXG4gIH0sXG4gIE1BU1RFUlBBU1NfUE9QVVBfT1BFTl9GQUlMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIk1BU1RFUlBBU1NfUE9QVVBfT1BFTl9GQUlMRURcIixcbiAgICBtZXNzYWdlOlxuICAgICAgXCJNYXN0ZXJwYXNzIHBvcHVwIGZhaWxlZCB0byBvcGVuLiBNYWtlIHN1cmUgdG8gdG9rZW5pemUgaW4gcmVzcG9uc2UgdG8gYSB1c2VyIGFjdGlvbiwgc3VjaCBhcyBhIGNsaWNrLlwiLFxuICB9LFxuICBNQVNURVJQQVNTX1BPUFVQX01JU1NJTkdfUkVRVUlSRURfUEFSQU1FVEVSUzoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiTUFTVEVSUEFTU19QT1BVUF9NSVNTSU5HX1JFUVVJUkVEX1BBUkFNRVRFUlNcIixcbiAgICBtZXNzYWdlOlxuICAgICAgXCJNYXN0ZXJwYXNzIHBvcHVwIGZhaWxlZCB0byByZXR1cm4gYWxsIHJlcXVpcmVkIHBhcmFtZXRlcnMgbmVlZGVkIHRvIGNvbnRpbnVlIHRva2VuaXphdGlvbi5cIixcbiAgfSxcbiAgTUFTVEVSUEFTU19QT1BVUF9DTE9TRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5DVVNUT01FUixcbiAgICBjb2RlOiBcIk1BU1RFUlBBU1NfUE9QVVBfQ0xPU0VEXCIsXG4gICAgbWVzc2FnZTogXCJDdXN0b21lciBjbG9zZWQgTWFzdGVycGFzcyBwb3B1cCBiZWZvcmUgYXV0aG9yaXppbmcuXCIsXG4gIH0sXG4gIE1BU1RFUlBBU1NfSU5WQUxJRF9QQVlNRU5UX09QVElPTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiTUFTVEVSUEFTU19JTlZBTElEX1BBWU1FTlRfT1BUSU9OXCIsXG4gICAgbWVzc2FnZTogXCJNYXN0ZXJwYXNzIHBheW1lbnQgb3B0aW9ucyBhcmUgaW52YWxpZC5cIixcbiAgfSxcbiAgTUFTVEVSUEFTU19GTE9XX0ZBSUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk5FVFdPUkssXG4gICAgY29kZTogXCJNQVNURVJQQVNTX0ZMT1dfRkFJTEVEXCIsXG4gICAgbWVzc2FnZTogXCJDb3VsZCBub3QgaW5pdGlhbGl6ZSBNYXN0ZXJwYXNzIGZsb3cuXCIsXG4gIH0sXG59O1xuXG59LHtcIi4uLy4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjR9XSwxNzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhbmFseXRpY3MgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2FuYWx5dGljc1wiKTtcbnZhciBhc3NpZ24gPSBfZGVyZXFfKFwiLi4vLi4vbGliL2Fzc2lnblwiKS5hc3NpZ247XG52YXIgQnVzID0gX2RlcmVxXyhcImZyYW1lYnVzXCIpO1xudmFyIGNvbnZlcnRNZXRob2RzVG9FcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9saWIvY29udmVydC1tZXRob2RzLXRvLWVycm9yXCIpO1xudmFyIGdlbmVyYXRlR29vZ2xlUGF5Q29uZmlndXJhdGlvbiA9IF9kZXJlcV8oXCIuLi8uLi9saWIvZ2VuZXJhdGUtZ29vZ2xlLXBheS1jb25maWd1cmF0aW9uXCIpO1xudmFyIGlGcmFtZXIgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9pZnJhbWVyXCIpO1xudmFyIHV1aWQgPSBfZGVyZXFfKFwiQGJyYWludHJlZS91dWlkXCIpO1xudmFyIHVzZU1pbiA9IF9kZXJlcV8oXCIuLi8uLi9saWIvdXNlLW1pblwiKTtcbnZhciBtZXRob2RzID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9tZXRob2RzXCIpO1xudmFyIEV2ZW50RW1pdHRlciA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2V2ZW50LWVtaXR0ZXJcIik7XG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBWRVJTSU9OID0gXCIzLjEwMC4wXCI7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9jb25zdGFudHNcIik7XG52YXIgZXZlbnRzID0gY29uc3RhbnRzLmV2ZW50cztcbnZhciBlcnJvcnMgPSBjb25zdGFudHMuZXJyb3JzO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFBheW1lbnRSZXF1ZXN0Q29tcG9uZW50fnRva2VuaXplUGF5bG9hZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5vbmNlIFRoZSBwYXltZW50IG1ldGhvZCBub25jZS5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkZXRhaWxzIEFkZGl0aW9uYWwgYWNjb3VudCBkZXRhaWxzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuYmluIFRoZSBCSU4gbnVtYmVyIG9mIHRoZSBjYXJkLi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmNhcmRUeXBlIFR5cGUgb2YgY2FyZCwgZXg6IFZpc2EsIE1hc3RlckNhcmQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5sYXN0Rm91ciBMYXN0IGZvdXIgZGlnaXRzIG9mIGNhcmQgbnVtYmVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMubGFzdFR3byBMYXN0IHR3byBkaWdpdHMgb2YgY2FyZCBudW1iZXIuXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGV0YWlscy5yYXdQYXltZW50UmVzcG9uc2UgVGhlIHJhdyBwYXltZW50IHJlc3BvbnNlIGZyb20gdGhlIHBheW1lbnQgcmVxdWVzdCwgd2l0aCBzZW5zaXRpdmUgY2FyZCBkZXRhaWxzIHJlbW92ZWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGVzY3JpcHRpb24gQSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSBwYXltZW50IG1ldGhvZCB0eXBlLCBgQ3JlZGl0Q2FyZGAgb3IgYEFuZHJvaWRQYXlDYXJkYC5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBiaW5EYXRhIEluZm9ybWF0aW9uIGFib3V0IHRoZSBjYXJkIGJhc2VkIG9uIHRoZSBiaW4uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5jb21tZXJjaWFsIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmNvdW50cnlPZklzc3VhbmNlIFRoZSBjb3VudHJ5IG9mIGlzc3VhbmNlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuZGViaXQgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuZHVyYmluUmVndWxhdGVkIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmhlYWx0aGNhcmUgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuaXNzdWluZ0JhbmsgVGhlIGlzc3VpbmcgYmFuay5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLnBheXJvbGwgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEucHJlcGFpZCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5wcm9kdWN0SWQgVGhlIHByb2R1Y3QgaWQuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBQYXltZW50UmVxdWVzdENvbXBvbmVudH5wYXltZW50UmVxdWVzdENvbmZpZ3VyYXRpb25cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb25maWd1cmF0aW9uLmRldGFpbHMgVGhlIHBheW1lbnQgZGV0YWlscy4gRm9yIGRldGFpbHMgb24gdGhpcyBvYmplY3QsIHNlZSBbR29vZ2xlJ3MgUGF5bWVudFJlcXVlc3QgQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi9mdW5kYW1lbnRhbHMvZGlzY292ZXJ5LWFuZC1tb25ldGl6YXRpb24vcGF5bWVudC1yZXF1ZXN0L2RlZXAtZGl2ZS1pbnRvLXBheW1lbnQtcmVxdWVzdCNkZWZpbmluZ19wYXltZW50X2RldGFpbHMpLlxuICogQHByb3BlcnR5IHthcnJheX0gW2NvbmZpZ3VyYXRpb24uc3VwcG9ydGVkUGF5bWVudE1ldGhvZHNdIFRoZSBzdXBwb3J0ZWQgcGF5bWVudCBtZXRob2RzLiBJZiBub3QgcGFzc2VkIGluLCB0aGUgc3VwcG9ydGVkIHBheW1lbnQgbWV0aG9kcyBmcm9tIHRoZSBtZXJjaGFudCBhY2NvdW50IHRoYXQgZ2VuZXJhdGVkIHRoZSBhdXRob3JpemF0aW9uIGZvciB0aGUgY2xpZW50IHdpbGwgYmUgdXNlZC4gRm9yIGRldGFpbHMgb24gdGhpcyBhcnJheSwgc2VlIFtHb29nbGUncyBQYXltZW50UmVxdWVzdCBBUEkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL2Z1bmRhbWVudGFscy9kaXNjb3ZlcnktYW5kLW1vbmV0aXphdGlvbi9wYXltZW50LXJlcXVlc3QvZGVlcC1kaXZlLWludG8tcGF5bWVudC1yZXF1ZXN0I2RlZmluaW5nX3N1cHBvcnRlZF9wYXltZW50X21ldGhvZHMpLlxuICogQHByb3BlcnR5IHtvYmplY3R9IFtjb25maWd1cmF0aW9uLm9wdGlvbnNdIEFkZGl0aW9uYWwgcGF5bWVudCByZXF1ZXN0IG9wdGlvbnMuIEZvciBkZXRhaWxzIG9uIHRoaXMgb2JqZWN0LCBzZWUgW0dvb2dsZSdzIFBheW1lbnRSZXF1ZXN0IEFQSSBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvZnVuZGFtZW50YWxzL2Rpc2NvdmVyeS1hbmQtbW9uZXRpemF0aW9uL3BheW1lbnQtcmVxdWVzdC9kZWVwLWRpdmUtaW50by1wYXltZW50LXJlcXVlc3QjZGVmaW5pbmdfb3B0aW9uc19vcHRpb25hbCkuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBQYXltZW50UmVxdWVzdENvbXBvbmVudH5zaGlwcGluZ0V2ZW50T2JqZWN0XG4gKiBAZGVzY3JpcHRpb24gVGhlIGV2ZW50IHBheWxvYWQgc2VudCBmcm9tIHtAbGluayBQYXltZW50UmVxdWVzdENvbXBvbmVudCNvbnxvbn0uXG4gKiBAcHJvcGVydHkge29iamVjdH0gdGFyZ2V0IEFuIG9iamVjdCB3aGljaCBjb250YWlucyBkYXRhIGFib3V0IHRoZSBldmVudC5cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IHVwZGF0ZVdpdGggQSBtZXRob2QgdG8gY2FsbCB3aXRoIHRoZSB1cGRhdGVkIFBheW1lbnQgUmVxdWVzdCBkZXRhaWxzLlxuICovXG5cbi8qKlxuICogQG5hbWUgUGF5bWVudFJlcXVlc3RDb21wb25lbnQjb25cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byB3aGljaCB5b3UgYXJlIHN1YnNjcmliaW5nLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gaGFuZGxlciBBIGNhbGxiYWNrIHRvIGhhbmRsZSB0aGUgZXZlbnQuXG4gKiBAZGVzY3JpcHRpb24gU3Vic2NyaWJlcyBhIGhhbmRsZXIgZnVuY3Rpb24gdG8gYSBuYW1lZCBldmVudC4gYGV2ZW50YCBzaG91bGQgYmUge0BsaW5rIFBheW1lbnRSZXF1ZXN0Q29tcG9uZW50I2V2ZW50OnNoaXBwaW5nQWRkcmVzc0NoYW5nZXxzaGlwcGluZ0FkZHJlc3NDaGFuZ2V9IG9yIHtAbGluayBQYXltZW50UmVxdWVzdENvbXBvbmVudCNldmVudDpzaGlwcGluZ09wdGlvbkNoYW5nZXxzaGlwcGluZ09wdGlvbkNoYW5nZX0uIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIGxpc3RlbiBvbiBgc2hpcHBpbmdhZGRyZXNzY2hhbmdlYCBvciBgc2hpcHBpbmdvcHRpb25jaGFuZ2VgIHRvIG1hdGNoIHRoZSBldmVudCBsaXN0ZW5lcnMgaW4gdGhlIFtQYXltZW50IFJlcXVlc3QgQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi9mdW5kYW1lbnRhbHMvcGF5bWVudHMvZGVlcC1kaXZlLWludG8tcGF5bWVudC1yZXF1ZXN0I3NoaXBwaW5nX2luX3BheW1lbnRfcmVxdWVzdF9hcGkpLiBFdmVudHMgd2lsbCBlbWl0IGEge0BsaW5rIFBheW1lbnRSZXF1ZXN0Q29tcG9uZW50fnNoaXBwaW5nRXZlbnRPYmplY3R8c2hpcHBpbmdFdmVudE9iamVjdH0uXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+TGlzdGVuaW5nIHRvIGEgUGF5bWVudCBSZXF1ZXN0IGV2ZW50LCBpbiB0aGlzIGNhc2UgJ3NoaXBwaW5nQWRkcmVzc0NoYW5nZSc8L2NhcHRpb24+XG4gKiBicmFpbnRyZWUucGF5bWVudFJlcXVlc3QuY3JlYXRlKHsgLi4uIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIHBheW1lbnRSZXF1ZXN0SW5zdGFuY2UpIHtcbiAqICAgcGF5bWVudFJlcXVlc3RJbnN0YW5jZS5vbignc2hpcHBpbmdBZGRyZXNzQ2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgY29uc29sZS5sb2coZXZlbnQudGFyZ2V0LnNoaXBwaW5nQWRkcmVzcyk7XG4gKiAgIH0pO1xuICogfSk7XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vKipcbiAqIEBuYW1lIFBheW1lbnRSZXF1ZXN0Q29tcG9uZW50I29mZlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIHdoaWNoIHlvdSBhcmUgdW5zdWJzY3JpYmluZy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhbmRsZXIgVGhlIGNhbGxiYWNrIGZvciB0aGUgZXZlbnQgeW91IGFyZSB1bnN1YnNjcmliaW5nIGZyb20uXG4gKiBAZGVzY3JpcHRpb24gVW5zdWJzY3JpYmVzIHRoZSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGEgbmFtZWQgZXZlbnQuXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+U3Vic2NyaWJpbmcgYW5kIHRoZW4gdW5zdWJzY3JpYmluZyBmcm9tIGEgUGF5bWVudCBSZXF1ZXN0IGV2ZW50LCBpbiB0aGlzIGNhc2UgJ3NoaXBwaW5nQWRkcmVzc0NoYW5nZSc8L2NhcHRpb24+XG4gKiBicmFpbnRyZWUucGF5bWVudFJlcXVlc3QuY3JlYXRlKHsgLi4uIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIHBheW1lbnRSZXF1ZXN0SW5zdGFuY2UpIHtcbiAqICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgY29uc29sZS5sb2coZXZlbnQudGFyZ2V0LnNoaXBwaW5nQWRkcmVzcyk7XG4gKiAgIH07XG4gKiAgIHBheW1lbnRSZXF1ZXN0SW5zdGFuY2Uub24oJ3NoaXBwaW5nQWRkcmVzc0NoYW5nZScsIGNhbGxiYWNrKTtcbiAqXG4gKiAgIC8vIGxhdGVyIG9uXG4gKiAgIHBheW1lbnRSZXF1ZXN0SW5zdGFuY2Uub2ZmKCdzaGlwcGluZ0FkZHJlc3NDaGFuZ2UnLCBjYWxsYmFjayk7XG4gKiB9KTtcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cbi8qKlxuICogVGhpcyBldmVudCBpcyBlbWl0dGVkIHdoZW4gdGhlIGN1c3RvbWVyIHNlbGVjdHMgYSBzaGlwcGluZyBhZGRyZXNzLlxuICogQGV2ZW50IFBheW1lbnRSZXF1ZXN0Q29tcG9uZW50I3NoaXBwaW5nQWRkcmVzc0NoYW5nZVxuICogQHR5cGUge1BheW1lbnRSZXF1ZXN0Q29tcG9uZW50fnNoaXBwaW5nRXZlbnRPYmplY3R9XG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+TGlzdGVuaW5nIHRvIGEgc2hpcHBpbmcgYWRkcmVzcyBjaGFuZ2UgZXZlbnQ8L2NhcHRpb24+XG4gKiBicmFpbnRyZWUucGF5bWVudFJlcXVlc3QuY3JlYXRlKHsgLi4uIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIHBheW1lbnRSZXF1ZXN0SW5zdGFuY2UpIHtcbiAqICAgcGF5bWVudFJlcXVlc3RJbnN0YW5jZS5vbignc2hpcHBpbmdBZGRyZXNzQ2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgLy8gdmFsaWRhdGUgZXZlbnQudGFyZ2V0LnNoaXBwaW5nQWRkcmVzcyBpZiBuZWVkZWRcbiAqXG4gKiAgICAgZXZlbnQudXBkYXRlV2l0aChwYXltZW50UmVxdWVzdERldGFpbHMpO1xuICogICB9KTtcbiAqIH0pO1xuICovXG5cbi8qKlxuICogVGhpcyBldmVudCBpcyBlbWl0dGVkIHdoZW4gdGhlIGN1c3RvbWVyIHNlbGVjdHMgYSBzaGlwcGluZyBvcHRpb24uXG4gKiBAZXZlbnQgUGF5bWVudFJlcXVlc3RDb21wb25lbnQjc2hpcHBpbmdPcHRpb25DaGFuZ2VcbiAqIEB0eXBlIHtQYXltZW50UmVxdWVzdENvbXBvbmVudH5zaGlwcGluZ0V2ZW50T2JqZWN0fVxuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPkxpc3RlbmluZyB0byBhIHNoaXBwaW5nIG9wdGlvbiBjaGFuZ2UgZXZlbnQ8L2NhcHRpb24+XG4gKiBicmFpbnRyZWUucGF5bWVudFJlcXVlc3QuY3JlYXRlKHsgLi4uIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIHBheW1lbnRSZXF1ZXN0SW5zdGFuY2UpIHtcbiAqICAgcGF5bWVudFJlcXVlc3RJbnN0YW5jZS5vbignc2hpcHBpbmdPcHRpb25DaGFuZ2UnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAqICAgICAvLyB2YWxpZGF0ZSBldmVudC50YXJnZXQuc2hpcHBpbmdPcHRpb24gaWYgbmVlZGVkXG4gKlxuICogICAgIHBheW1lbnRSZXF1ZXN0RGV0YWlscy5zaGlwcGluZ09wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gKiAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBvcHRpb24uaWQgPT09IGV2ZW50LnRhcmdldC5zaGlwcGluZ09wdGlvbjtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgZXZlbnQudXBkYXRlV2l0aChwYXltZW50UmVxdWVzdERldGFpbHMpO1xuICogICB9KTtcbiAqIH0pO1xuICovXG5cbnZhciBDQVJEX1RZUEVfTUFQUElOR1MgPSB7XG4gIFZpc2E6IFwidmlzYVwiLFxuICBNYXN0ZXJDYXJkOiBcIm1hc3RlcmNhcmRcIixcbiAgXCJBbWVyaWNhbiBFeHByZXNzXCI6IFwiYW1leFwiLFxuICBcIkRpbmVycyBDbHViXCI6IFwiZGluZXJzXCIsXG4gIERpc2NvdmVyOiBcImRpc2NvdmVyXCIsXG4gIEpDQjogXCJqY2JcIixcbiAgVW5pb25QYXk6IFwidW5pb25wYXlcIixcbiAgTWFlc3RybzogXCJtYWVzdHJvXCIsXG59O1xuXG52YXIgQlJBSU5UUkVFX0dPT0dMRV9QQVlfTUVSQ0hBTlRfSUQgPSBcIjE4Mjc4MDAwOTc3MzQ2NzkwOTk0XCI7XG5cbmZ1bmN0aW9uIGNvbXBvc2VVcmwoYXNzZXRzVXJsLCBjb21wb25lbnRJZCwgaXNEZWJ1Zykge1xuICB2YXIgYmFzZVVybCA9IGFzc2V0c1VybDtcblxuICAvLyBlbmRSZW1vdmVJZihwcm9kdWN0aW9uKVxuXG4gIHJldHVybiAoXG4gICAgYmFzZVVybCArXG4gICAgXCIvd2ViL1wiICtcbiAgICBWRVJTSU9OICtcbiAgICBcIi9odG1sL3BheW1lbnQtcmVxdWVzdC1mcmFtZVwiICtcbiAgICB1c2VNaW4oaXNEZWJ1ZykgK1xuICAgIFwiLmh0bWwjXCIgK1xuICAgIGNvbXBvbmVudElkXG4gICk7XG59XG5cbi8qKlxuICogQGNsYXNzIFBheW1lbnRSZXF1ZXN0Q29tcG9uZW50XG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBUaGUgUGF5bWVudCBSZXF1ZXN0IENvbXBvbmVudCB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvcGF5bWVudC1yZXF1ZXN0LmNyZWF0ZSBjcmVhdGV9IG9wdGlvbnMuXG4gKiBAZGVzY3JpcHRpb24gPHN0cm9uZz5EbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIFVzZSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvcGF5bWVudC1yZXF1ZXN0LmNyZWF0ZXxicmFpbnRyZWUtd2ViLnBheW1lbnQtcmVxdWVzdC5jcmVhdGV9IGluc3RlYWQuPC9zdHJvbmc+XG4gKlxuICogQGNsYXNzZGVzYyBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBQYXltZW50IFJlcXVlc3QgY29tcG9uZW50IHByb2R1Y2VkIGJ5IHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9wYXltZW50LXJlcXVlc3QuY3JlYXRlfGJyYWludHJlZS13ZWIvcGF5bWVudC1yZXF1ZXN0LmNyZWF0ZX0uIEluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIGhhdmUgbWV0aG9kcyBmb3IgaW5pdGlhbGl6aW5nIGEgUGF5bWVudCBSZXF1ZXN0LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGNvbXBvbmVudCBpcyBjdXJyZW50bHkgaW4gYmV0YSBhbmQgdGhlIEFQSSBtYXkgaW5jbHVkZSBicmVha2luZyBjaGFuZ2VzIHdoZW4gdXBncmFkaW5nLiBQbGVhc2UgcmV2aWV3IHRoZSBbQ2hhbmdlbG9nXShodHRwczovL2dpdGh1Yi5jb20vYnJhaW50cmVlL2JyYWludHJlZS13ZWIvYmxvYi9tYWluL0NIQU5HRUxPRy5tZCkgZm9yIHVwZ3JhZGUgc3RlcHMgd2hlbmV2ZXIgeW91IHVwZ3JhZGUgdGhlIHZlcnNpb24gb2YgYnJhaW50cmVlLXdlYi5cbiAqL1xuZnVuY3Rpb24gUGF5bWVudFJlcXVlc3RDb21wb25lbnQob3B0aW9ucykge1xuICB2YXIgZW5hYmxlZFBheW1lbnRNZXRob2RzID0gb3B0aW9ucy5lbmFibGVkUGF5bWVudE1ldGhvZHMgfHwge307XG5cbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5fY29tcG9uZW50SWQgPSB1dWlkKCk7XG4gIHRoaXMuX2NsaWVudCA9IG9wdGlvbnMuY2xpZW50O1xuICB0aGlzLl9lbmFibGVkUGF5bWVudE1ldGhvZHMgPSB7XG4gICAgYmFzaWNDYXJkOiBlbmFibGVkUGF5bWVudE1ldGhvZHMuYmFzaWNDYXJkICE9PSBmYWxzZSxcbiAgICBnb29nbGVQYXk6IGVuYWJsZWRQYXltZW50TWV0aG9kcy5nb29nbGVQYXkgIT09IGZhbHNlLFxuICB9O1xuICB0aGlzLl9nb29nbGVQYXlWZXJzaW9uID0gb3B0aW9ucy5nb29nbGVQYXlWZXJzaW9uID09PSAyID8gMiA6IDE7XG4gIHRoaXMuX2dvb2dsZU1lcmNoYW50SWQgPSBCUkFJTlRSRUVfR09PR0xFX1BBWV9NRVJDSEFOVF9JRDtcbiAgdGhpcy5fc3VwcG9ydGVkUGF5bWVudE1ldGhvZHMgPVxuICAgIHRoaXMuX2NvbnN0cnVjdERlZmF1bHRTdXBwb3J0ZWRQYXltZW50TWV0aG9kcygpO1xuICB0aGlzLl9kZWZhdWx0U3VwcG9ydGVkUGF5bWVudE1ldGhvZHMgPSBPYmplY3Qua2V5cyhcbiAgICB0aGlzLl9zdXBwb3J0ZWRQYXltZW50TWV0aG9kc1xuICApLm1hcChcbiAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3VwcG9ydGVkUGF5bWVudE1ldGhvZHNba2V5XTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcbiAgdGhpcy5fYnVzID0gbmV3IEJ1cyh7IGNoYW5uZWw6IHRoaXMuX2NvbXBvbmVudElkIH0pO1xufVxuXG5FdmVudEVtaXR0ZXIuY3JlYXRlQ2hpbGQoUGF5bWVudFJlcXVlc3RDb21wb25lbnQpO1xuXG5QYXltZW50UmVxdWVzdENvbXBvbmVudC5wcm90b3R5cGUuX2NvbnN0cnVjdERlZmF1bHRTdXBwb3J0ZWRQYXltZW50TWV0aG9kcyA9XG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29uZmlndXJhdGlvbiA9IHRoaXMuX2NsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG4gICAgdmFyIGFuZHJvaWRQYXlDb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbi5nYXRld2F5Q29uZmlndXJhdGlvbi5hbmRyb2lkUGF5O1xuICAgIHZhciBjYXJkQ29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb24uZ2F0ZXdheUNvbmZpZ3VyYXRpb24uY3JlZGl0Q2FyZHM7XG4gICAgdmFyIHN1cHBvcnRlZFBheW1lbnRNZXRob2RzID0ge307XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLl9lbmFibGVkUGF5bWVudE1ldGhvZHMuYmFzaWNDYXJkICYmXG4gICAgICBjYXJkQ29uZmlndXJhdGlvbiAmJlxuICAgICAgY2FyZENvbmZpZ3VyYXRpb24uc3VwcG9ydGVkQ2FyZFR5cGVzLmxlbmd0aCA+IDBcbiAgICApIHtcbiAgICAgIHN1cHBvcnRlZFBheW1lbnRNZXRob2RzLmJhc2ljQ2FyZCA9IHtcbiAgICAgICAgc3VwcG9ydGVkTWV0aG9kczogXCJiYXNpYy1jYXJkXCIsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBzdXBwb3J0ZWROZXR3b3JrczogY2FyZENvbmZpZ3VyYXRpb24uc3VwcG9ydGVkQ2FyZFR5cGVzLnJlZHVjZShcbiAgICAgICAgICAgIGZ1bmN0aW9uICh0eXBlcywgY2FyZFR5cGUpIHtcbiAgICAgICAgICAgICAgaWYgKGNhcmRUeXBlIGluIENBUkRfVFlQRV9NQVBQSU5HUykge1xuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goQ0FSRF9UWVBFX01BUFBJTkdTW2NhcmRUeXBlXSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gdHlwZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW11cbiAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLl9lbmFibGVkUGF5bWVudE1ldGhvZHMuZ29vZ2xlUGF5ICYmXG4gICAgICBhbmRyb2lkUGF5Q29uZmlndXJhdGlvbiAmJlxuICAgICAgYW5kcm9pZFBheUNvbmZpZ3VyYXRpb24uZW5hYmxlZFxuICAgICkge1xuICAgICAgc3VwcG9ydGVkUGF5bWVudE1ldGhvZHMuZ29vZ2xlUGF5ID0ge1xuICAgICAgICBzdXBwb3J0ZWRNZXRob2RzOiBcImh0dHBzOi8vZ29vZ2xlLmNvbS9wYXlcIixcbiAgICAgICAgZGF0YTogZ2VuZXJhdGVHb29nbGVQYXlDb25maWd1cmF0aW9uKFxuICAgICAgICAgIGNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgdGhpcy5fZ29vZ2xlUGF5VmVyc2lvbixcbiAgICAgICAgICB0aGlzLl9nb29nbGVNZXJjaGFudElkXG4gICAgICAgICksXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzdXBwb3J0ZWRQYXltZW50TWV0aG9kcztcbiAgfTtcblxuUGF5bWVudFJlcXVlc3RDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjbGllbnRDb25maWd1cmF0aW9uID0gdGhpcy5fY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMuX2ZyYW1lID0gaUZyYW1lcih7XG4gICAgYWxsb3dQYXltZW50UmVxdWVzdDogdHJ1ZSxcbiAgICBuYW1lOiBcImJyYWludHJlZS1wYXltZW50LXJlcXVlc3QtZnJhbWVcIixcbiAgICBjbGFzczogXCJicmFpbnRyZWUtcGF5bWVudC1yZXF1ZXN0LWZyYW1lXCIsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHdpZHRoOiAwLFxuICAgIHN0eWxlOiB7XG4gICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgbGVmdDogXCItOTk5OXB4XCIsXG4gICAgfSxcbiAgICB0aXRsZTogXCJTZWN1cmUgUGF5bWVudCBGcmFtZVwiLFxuICB9KTtcblxuICBpZiAodGhpcy5fZGVmYXVsdFN1cHBvcnRlZFBheW1lbnRNZXRob2RzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihcbiAgICAgICAgZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9OT19WQUxJRF9TVVBQT1JURURfUEFZTUVOVF9NRVRIT0RTXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHNlbGYuX2J1cy5vbihldmVudHMuRlJBTUVfUkVBRFksIGZ1bmN0aW9uIChyZXBseSkge1xuICAgICAgcmVwbHkoc2VsZi5fY2xpZW50KTtcbiAgICB9KTtcbiAgICBzZWxmLl9idXMub24oZXZlbnRzLkZSQU1FX0NBTl9NQUtFX1JFUVVFU1RTLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHNlbGYuX2NsaWVudCwgXCJwYXltZW50LXJlcXVlc3QuaW5pdGlhbGl6ZWRcIik7XG4gICAgICBzZWxmLl9idXMub24oZXZlbnRzLlNISVBQSU5HX0FERFJFU1NfQ0hBTkdFLCBmdW5jdGlvbiAoc2hpcHBpbmdBZGRyZXNzKSB7XG4gICAgICAgIHZhciBzaGlwcGluZ0FkZHJlc3NDaGFuZ2VFdmVudCA9IHtcbiAgICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzczogc2hpcHBpbmdBZGRyZXNzLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXBkYXRlV2l0aDogZnVuY3Rpb24gKHBheW1lbnREZXRhaWxzKSB7XG4gICAgICAgICAgICBzZWxmLl9idXMuZW1pdChldmVudHMuVVBEQVRFX1NISVBQSU5HX0FERFJFU1MsIHBheW1lbnREZXRhaWxzKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuX2VtaXQoXCJzaGlwcGluZ0FkZHJlc3NDaGFuZ2VcIiwgc2hpcHBpbmdBZGRyZXNzQ2hhbmdlRXZlbnQpO1xuICAgICAgICBzZWxmLl9lbWl0KFwic2hpcHBpbmdhZGRyZXNzY2hhbmdlXCIsIHNoaXBwaW5nQWRkcmVzc0NoYW5nZUV2ZW50KTtcbiAgICAgIH0pO1xuICAgICAgc2VsZi5fYnVzLm9uKGV2ZW50cy5TSElQUElOR19PUFRJT05fQ0hBTkdFLCBmdW5jdGlvbiAoc2hpcHBpbmdPcHRpb24pIHtcbiAgICAgICAgdmFyIHNoaXBwaW5nT3B0aW9uQ2hhbmdlRXZlbnQgPSB7XG4gICAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICBzaGlwcGluZ09wdGlvbjogc2hpcHBpbmdPcHRpb24sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB1cGRhdGVXaXRoOiBmdW5jdGlvbiAocGF5bWVudERldGFpbHMpIHtcbiAgICAgICAgICAgIHNlbGYuX2J1cy5lbWl0KGV2ZW50cy5VUERBVEVfU0hJUFBJTkdfT1BUSU9OLCBwYXltZW50RGV0YWlscyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLl9lbWl0KFwic2hpcHBpbmdPcHRpb25DaGFuZ2VcIiwgc2hpcHBpbmdPcHRpb25DaGFuZ2VFdmVudCk7XG4gICAgICAgIHNlbGYuX2VtaXQoXCJzaGlwcGluZ29wdGlvbmNoYW5nZVwiLCBzaGlwcGluZ09wdGlvbkNoYW5nZUV2ZW50KTtcbiAgICAgIH0pO1xuICAgICAgcmVzb2x2ZShzZWxmKTtcbiAgICB9KTtcblxuICAgIC8vIFRPRE8gLSBXZSBtYXkgbmVlZCB0byBhcHBseSB0aGUgc2FtZSBzZXRUaW1lb3V0IGhhY2sgdGhhdCBIb3N0ZWQgRmllbGRzXG4gICAgLy8gdXNlcyBmb3IgaWZyYW1lcyB0byBsb2FkIGNvcnJlY3RseSBpbiBFZGdlLiBTZWU6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JyYWludHJlZS9icmFpbnRyZWUtd2ViL2Jsb2IvMGM5NTFlNWY5ODU5YzYwNjY1MjQ4NWRlMTQxODhiNmJkNjY1NjY3Ny9zcmMvaG9zdGVkLWZpZWxkcy9leHRlcm5hbC9ob3N0ZWQtZmllbGRzLmpzI0w0NDktTDQ2OVxuICAgIHNlbGYuX2ZyYW1lLnNyYyA9IGNvbXBvc2VVcmwoXG4gICAgICBjbGllbnRDb25maWd1cmF0aW9uLmdhdGV3YXlDb25maWd1cmF0aW9uLmFzc2V0c1VybCxcbiAgICAgIHNlbGYuX2NvbXBvbmVudElkLFxuICAgICAgY2xpZW50Q29uZmlndXJhdGlvbi5pc0RlYnVnXG4gICAgKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNlbGYuX2ZyYW1lKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbiBvYmplY3QgdG8gcGFzcyBpbnRvIHRva2VuaXplIHRvIHNwZWNpZnkgYSBjdXN0b20gY29uZmlndXJhdGlvbi4gSWYgbm8gb3ZlcnJpZGVzIGFyZSBwcm92aWRlZCwgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiB3aWxsIGJlIHByb3ZpZGVkLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHN1cHBvcnRlZCBwYXltZW50IG1ldGhvZCB0eXBlLiBQb3NzaWJsZSB2YWx1ZXMgYXJlIGBiYXNpY0NhcmRgIGFuZCBgZ29vZ2xlUGF5YC5cbiAqIElmIG5vIHR5cGUgaXMgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiB3aWxsIHRocm93IGFuIGVycm9yLiBJZiB0aGUgdHlwZSBwcm92aWRlZCBpcyBub3QgYW4gZW5hYmxlZCBwYXltZW50IG1ldGhvZCBmb3IgdGhlIG1lcmNoYW50IGFjY291bnQgLCB0aGUgZnVuY3Rpb24gd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3ZlcnJpZGVzXSBUaGUgY29uZmlndXJhdGlvbiBvdmVycmlkZXMgZm9yIHRoZSBbZGF0YSBwcm9wZXJ0eSBvbiB0aGUgc3VwcG9ydGVkIHBheW1lbnQgbWV0aG9kcyBvYmplY3RzXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvZnVuZGFtZW50YWxzL3BheW1lbnRzL2RlZXAtZGl2ZS1pbnRvLXBheW1lbnQtcmVxdWVzdCkuIElmIG5vdCBwYXNzZWQgaW4sIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBzcGVjaWZpZWQgdHlwZSB3aWxsIGJlIHByb3ZpZGVkLiBJZiBhIHByb3BlcnR5IGlzIG5vdCBwcm92aWRlZCwgdGhlIHZhbHVlIGZyb20gdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiB3aWxsIGJlIHVzZWQuXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5HZXR0aW5nIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gZm9yIGEgc3BlY2lmaWVkIHR5cGU8L2NhcHRpb24+XG4gKiB2YXIgY29uZmlndXJhdGlvbiA9IHBheW1lbnRSZXF1ZXN0SW5zdGFuY2UuY3JlYXRlU3VwcG9ydGVkUGF5bWVudE1ldGhvZHNDb25maWd1cmF0aW9uKCdiYXNpY0NhcmQnKTtcbiAqXG4gKiBjb25maWd1cmF0aW9uLnN1cHBvcnRlZE1ldGhvZHM7IC8vICdiYXNpYy1jYXJkJ1xuICogY29uZmlndXJhdGlvbi5kYXRhLnN1cHBvcnRlZE5ldHdvcmtzOyAvLyBbJ3Zpc2EnLCAnbWFzdGVyY2FyZCcsICdhbWV4J10gPC0gd2hhdGV2ZXIgdGhlIHN1cHBvcnRlZCBjYXJkIG5ldHdvcmtzIGZvciB0aGUgbWVyY2hhbnQgYWNjb3VudCBhcmVcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlNwZWNpZnlpbmcgb3ZlcnJpZGVzPC9jYXB0aW9uPlxuICogdmFyIGNvbmZpZ3VyYXRpb24gPSBwYXltZW50UmVxdWVzdEluc3RhbmNlLmNyZWF0ZVN1cHBvcnRlZFBheW1lbnRNZXRob2RzQ29uZmlndXJhdGlvbignYmFzaWNDYXJkJywge1xuICogICBzdXBwb3J0ZWROZXR3b3JrczogWyd2aXNhJ10sXG4gKiAgIHN1cHBvcnRlZFR5cGVzOiBbJ2NyZWRpdCcsICdkZWJpdCddXG4gKiB9KTtcbiAqXG4gKiBjb25maWd1cmF0aW9uLnN1cHBvcnRlZE1ldGhvZHM7IC8vICdiYXNpYy1jYXJkJ1xuICogY29uZmlndXJhdGlvbi5kYXRhLnN1cHBvcnRlZE5ldHdvcmtzOyAvLyBbJ3Zpc2EnXVxuICogY29uZmlndXJhdGlvbi5kYXRhLnN1cHBvcnRlZFR5cGVzOyAvLyBbJ2NyZWRpdCcsICdkZWJpdCddXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBSZXR1cm5zIGEgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIHVzZSBpbiB0aGUgdG9rZW5pemUgZnVuY3Rpb24uXG4gKi9cblBheW1lbnRSZXF1ZXN0Q29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVTdXBwb3J0ZWRQYXltZW50TWV0aG9kc0NvbmZpZ3VyYXRpb24gPVxuICBmdW5jdGlvbiAodHlwZSwgb3ZlcnJpZGVzKSB7XG4gICAgdmFyIGNvbmZpZ3VyYXRpb247XG5cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcihcbiAgICAgICAgZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9DUkVBVEVfU1VQUE9SVEVEX1BBWU1FTlRfTUVUSE9EU19DT05GSUdVUkFUSU9OX01VU1RfSU5DTFVERV9UWVBFXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fZW5hYmxlZFBheW1lbnRNZXRob2RzW3R5cGVdKSB7XG4gICAgICB0aHJvdyBuZXcgQnJhaW50cmVlRXJyb3IoXG4gICAgICAgIGVycm9ycy5QQVlNRU5UX1JFUVVFU1RfQ1JFQVRFX1NVUFBPUlRFRF9QQVlNRU5UX01FVEhPRFNfQ09ORklHVVJBVElPTl9UWVBFX05PVF9FTkFCTEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbmZpZ3VyYXRpb24gPSBhc3NpZ24oe30sIHRoaXMuX3N1cHBvcnRlZFBheW1lbnRNZXRob2RzW3R5cGVdKTtcbiAgICBjb25maWd1cmF0aW9uLmRhdGEgPSBhc3NpZ24oe30sIGNvbmZpZ3VyYXRpb24uZGF0YSwgb3ZlcnJpZGVzKTtcblxuICAgIHJldHVybiBjb25maWd1cmF0aW9uO1xuICB9O1xuXG4vKipcbiAqIFRva2VuaXplcyBhIFBheW1lbnQgUmVxdWVzdFxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZ3VyYXRpb24gQSB7QGxpbmsgUGF5bWVudFJlcXVlc3RDb21wb25lbnR+cGF5bWVudFJlcXVlc3RDb25maWd1cmF0aW9ufHBheW1lbnRSZXF1ZXN0Q29uZmlndXJhdGlvbn0uXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIDxjb2RlPmRhdGE8L2NvZGU+LCBpcyBhIHtAbGluayBQYXltZW50UmVxdWVzdH5wYXltZW50UGF5bG9hZHxwYXltZW50UGF5bG9hZH0uIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBgdG9rZW5pemVgIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHdpdGggYSB7QGxpbmsgUGF5bWVudFJlcXVlc3RDb21wb25lbnR+dG9rZW5pemVQYXlsb2FkfHRva2VuaXplUGF5bG9hZH0uXG4gKiBAZXhhbXBsZVxuICogcGF5bWVudFJlcXVlc3RJbnN0YW5jZS50b2tlbml6ZSh7XG4gKiAgIGRldGFpbHM6IHtcbiAqICAgICB0b3RhbDoge1xuICogICAgICAgbGFiZWw6ICdQcmljZScsXG4gKiAgICAgICBhbW91bnQ6IHtcbiAqICAgICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICogICAgICAgICB2YWx1ZTogJzEwMC4wMCdcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH1cbiAqIH0pLnRoZW4oZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAqICAgLy8gc2VuZCBwYXlsb2FkLm5vbmNlIHRvIHNlcnZlclxuICpcbiAqICAgLy8gZXhhbWluZSB0aGUgcmF3IHJlc3BvbnNlICh3aXRoIGNhcmQgZGV0YWlscyByZW1vdmVkIGZvciBzZWN1cml0eSkgZnJvbSB0aGUgcGF5bWVudCByZXF1ZXN0XG4gKiAgIGNvbnNvbGUubG9nKHBheWxvYWQuZGV0YWlscy5yYXdQYXltZW50UmVzcG9uc2UpO1xuICogfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICogICBpZiAoZXJyLmNvZGUgPT09ICdQQVlNRU5UX1JFUVVFU1RfQ0FOQ0VMRUQnKSB7XG4gKiAgICAgLy8gcGF5bWVudCByZXF1ZXN0IHdhcyBjYW5jZWxlZCBieSB1c2VyXG4gKiAgIH0gZWxzZSB7XG4gKiAgICAgLy8gYW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcHJvY2Vzc2luZ1xuICogICB9XG4gKiB9KTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlRva2VuaXplIG9ubHkgVmlzYSBjYXJkczwvY2FwdGlvbj5cbiAqIHZhciBiYXNpY0NhcmRDb25maWd1cmF0aW9uID0gcGF5bWVudFJlcXVlc3RJbnN0YW5jZS5jcmVhdGVTdXBwb3J0ZWRQYXltZW50TWV0aG9kc0NvbmZpZ3VyYXRpb24oJ2Jhc2ljQ2FyZCcsIHtcbiAqICAgc3VwcG9ydGVkTmV0d29ya3M6IFsndmlzYSddXG4gKiB9O1xuICpcbiAqIHBheW1lbnRSZXF1ZXN0SW5zdGFuY2UudG9rZW5pemUoe1xuICogICBzdXBwb3J0ZWRQYXltZW50TWV0aG9kczogW2Jhc2ljQ2FyZENvbmZpZ3VyYXRpb25dLFxuICogICBkZXRhaWxzOiB7XG4gKiAgICAgdG90YWw6IHtcbiAqICAgICAgIGxhYmVsOiAnUHJpY2UnLFxuICogICAgICAgYW1vdW50OiB7XG4gKiAgICAgICAgIGN1cnJlbmN5OiAnVVNEJyxcbiAqICAgICAgICAgdmFsdWU6ICcxMDAuMDAnXG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICB9XG4gKiB9KS50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gKiAgIC8vIHNlbmQgcGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlclxuICogfSk7XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5JbmNsdWRlIHBheW1lbnQgcmVxdWVzdCBvcHRpb25zPC9jYXB0aW9uPlxuICogcGF5bWVudFJlcXVlc3RJbnN0YW5jZS50b2tlbml6ZSh7XG4gKiAgIGRldGFpbHM6IHtcbiAqICAgICB0b3RhbDoge1xuICogICAgICAgbGFiZWw6ICdQcmljZScsXG4gKiAgICAgICBhbW91bnQ6IHtcbiAqICAgICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICogICAgICAgICB2YWx1ZTogJzEwMC4wMCdcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH0sXG4gKiAgIG9wdGlvbnM6IHtcbiAqICAgICByZXF1ZXN0UGF5ZXJOYW1lOiB0cnVlLFxuICogICAgIHJlcXVlc3RQYXllclBob25lOiB0cnVlLFxuICogICAgIHJlcXVlc3RQYXllckVtYWlsOiB0cnVlXG4gKiAgIH1cbiAqIH0pLnRoZW4oZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAqICAgLy8gc2VuZCBwYXlsb2FkLm5vbmNlIHRvIHlvdXIgc2VydmVyXG4gKiAgIC8vIGNvbGxlY3QgYWRkaXRpb25hbCBpbmZvIGZyb20gdGhlIHJhdyByZXNwb25zZVxuICogICBjb25zb2xlLmxvZyhwYXlsb2FkLmRldGFpbHMucmF3UGF5bWVudFJlc3BvbnNlKTtcbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+UmVxdWVzdCBTaGlwcGluZyBJbmZvcm1hdGlvbjwvY2FwdGlvbj5cbiAqIHZhciBzaGlwcGluZ09wdGlvbnMgPSBbXG4gKiAgIHtcbiAqICAgICBpZDogJ2Vjb25vbXknLFxuICogICAgIGxhYmVsOiAnRWNvbm9teSBTaGlwcGluZyAoNS03IERheXMpJyxcbiAqICAgICBhbW91bnQ6IHtcbiAqICAgICAgIGN1cnJlbmN5OiAnVVNEJyxcbiAqICAgICAgIHZhbHVlOiAnMCcsXG4gKiAgICAgfSxcbiAqICAgfSwge1xuICogICAgIGlkOiAnZXhwcmVzcycsXG4gKiAgICAgbGFiZWw6ICdFeHByZXNzIFNoaXBwaW5nICgyLTMgRGF5cyknLFxuICogICAgIGFtb3VudDoge1xuICogICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICogICAgICAgdmFsdWU6ICc1JyxcbiAqICAgICB9LFxuICogICB9LCB7XG4gKiAgICAgaWQ6ICduZXh0LWRheScsXG4gKiAgICAgbGFiZWw6ICdOZXh0IERheSBEZWxpdmVyeScsXG4gKiAgICAgYW1vdW50OiB7XG4gKiAgICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gKiAgICAgICB2YWx1ZTogJzEyJyxcbiAqICAgICB9LFxuICogICB9LFxuICogXTtcbiAqIHZhciBwYXltZW50RGV0YWlscyA9IHtcbiAqIFx0IHRvdGFsOiB7XG4gKiAgICAgbGFiZWw6ICdUb3RhbCcsXG4gKiAgICAgYW1vdW50OiB7XG4gKiAgICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gKiAgICAgICB2YWx1ZTogJzEwLjAwJyxcbiAqICAgICB9XG4gKiAgIH0sXG4gKiAgIHNoaXBwaW5nT3B0aW9uczogc2hpcHBpbmdPcHRpb25zXG4gKiB9O1xuICpcbiAqIHBheW1lbnRSZXF1ZXN0SW5zdGFuY2Uub24oJ3NoaXBwaW5nQWRkcmVzc0NoYW5nZScsIGZ1bmN0aW9uIChldmVudCkge1xuICogICAvLyB2YWxpZGF0ZSBzaGlwcGluZyBhZGRyZXNzIG9uIGV2ZW50LnRhcmdldC5zaGlwcGluZ0FkZHJlc3NcbiAqICAgLy8gbWFrZSBjaGFuZ2VzIHRvIHRoZSBwYXltZW50RGV0YWlscyBvciBzaGlwcGluZ09wdGlvbnMgaWYgbmVjZXNzYXJ5XG4gKlxuICogICBldmVudC51cGRhdGVXaXRoKHBheW1lbnREZXRhaWxzKVxuICogfSk7XG4gKlxuICogcGF5bWVudFJlcXVlc3RJbnN0YW5jZS5vbignc2hpcHBpbmdPcHRpb25DaGFuZ2UnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAqICAgc2hpcHBpbmdPcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICogICAgIG9wdGlvbi5zZWxlY3RlZCA9IG9wdGlvbi5pZCA9PT0gZXZlbnQudGFyZ2V0LnNoaXBwaW5nT3B0aW9uO1xuICogICB9KTtcbiAqXG4gKiAgIGV2ZW50LnVwZGF0ZVdpdGgocGF5bWVudERldGFpbHMpXG4gKiB9KTtcbiAqXG4gKiBwYXltZW50UmVxdWVzdEluc3RhbmNlLnRva2VuaXplKHtcbiAqICAgZGV0YWlsczogcGF5bWVudERldGFpbHMsXG4gKiAgIG9wdGlvbnM6IHtcbiAqICAgICByZXF1ZXN0U2hpcHBpbmc6IHRydWVcbiAqICAgfVxuICogfSkudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICogICAvLyBzZW5kIHBheWxvYWQubm9uY2UgdG8geW91ciBzZXJ2ZXJcbiAqICAgLy8gY29sbGVjdCBzaGlwcGluZyBpbmZvcm1hdGlvbiBmcm9tIHBheWxvYWRcbiAqICAgY29uc29sZS5sb2cocGF5bG9hZC5kZXRhaWxzLnJhd1BheW1lbnRSZXNwb25zZS5zaGlwcGluZ0FkZHJlc3MpO1xuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5QYXltZW50UmVxdWVzdENvbXBvbmVudC5wcm90b3R5cGUudG9rZW5pemUgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gTkVYVF9NQUpPUl9WRVJTSU9OIGZhaWwgZWFybHkgaWYgYSBwYXltZW50IG1ldGhvZCBpcyBwYXNzZWQgaW5cbiAgLy8gdGhhdCB0aGUgY29tcG9uZW50IGRvZXMgbm90IHN1cHBvcnRcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZWxmLl9idXMuZW1pdChcbiAgICAgIGV2ZW50cy5QQVlNRU5UX1JFUVVFU1RfSU5JVElBTElaRUQsXG4gICAgICB7XG4gICAgICAgIHN1cHBvcnRlZFBheW1lbnRNZXRob2RzOlxuICAgICAgICAgIGNvbmZpZ3VyYXRpb24uc3VwcG9ydGVkUGF5bWVudE1ldGhvZHMgfHxcbiAgICAgICAgICBzZWxmLl9kZWZhdWx0U3VwcG9ydGVkUGF5bWVudE1ldGhvZHMsXG4gICAgICAgIGRldGFpbHM6IGNvbmZpZ3VyYXRpb24uZGV0YWlscyxcbiAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5vcHRpb25zLFxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICB2YXIgcmF3RXJyb3IgPSByZXNwb25zZVswXTtcbiAgICAgICAgdmFyIHBheWxvYWQgPSByZXNwb25zZVsxXTtcblxuICAgICAgICBpZiAocmF3RXJyb3IpIHtcbiAgICAgICAgICByZWplY3Qoc2VsZi5fZm9ybWF0VG9rZW5pemF0aW9uRXJyb3IocmF3RXJyb3IpKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoc2VsZi5fY2xpZW50LCBcInBheW1lbnQtcmVxdWVzdC50b2tlbml6ZS5zdWNjZWVkZWRcIik7XG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIG5vbmNlOiBwYXlsb2FkLm5vbmNlLFxuICAgICAgICAgIHR5cGU6IHBheWxvYWQudHlwZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogcGF5bG9hZC5kZXNjcmlwdGlvbixcbiAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICByYXdQYXltZW50UmVzcG9uc2U6IHBheWxvYWQuZGV0YWlscy5yYXdQYXltZW50UmVzcG9uc2UsXG4gICAgICAgICAgICBjYXJkVHlwZTogcGF5bG9hZC5kZXRhaWxzLmNhcmRUeXBlLFxuICAgICAgICAgICAgbGFzdEZvdXI6IHBheWxvYWQuZGV0YWlscy5sYXN0Rm91cixcbiAgICAgICAgICAgIGxhc3RUd286IHBheWxvYWQuZGV0YWlscy5sYXN0VHdvLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmluRGF0YTogcGF5bG9hZC5iaW5EYXRhLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICApO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGN1c3RvbWVyIGNhbiBtYWtlIHBheW1lbnRzLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZ3VyYXRpb24gQSB7QGxpbmsgUGF5bWVudFJlcXVlc3RDb21wb25lbnR+cGF5bWVudFJlcXVlc3RDb25maWd1cmF0aW9ufHBheW1lbnRSZXF1ZXN0Q29uZmlndXJhdGlvbn0uXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxlZCBvbiBjb21wbGV0aW9uLlxuICogQGV4YW1wbGVcbiAqIHZhciBwYXltZW50RGV0YWlscyA9IHtcbiAqIFx0IHRvdGFsOiB7XG4gKiAgICAgbGFiZWw6ICdUb3RhbCcsXG4gKiAgICAgYW1vdW50OiB7XG4gKiAgICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gKiAgICAgICB2YWx1ZTogJzEwLjAwJyxcbiAqICAgICB9XG4gKiAgIH1cbiAqIH07XG4gKlxuICogcGF5bWVudFJlcXVlc3RJbnN0YW5jZS5jYW5NYWtlUGF5bWVudCh7XG4gKiAgIGRldGFpbHM6IHBheW1lbnREZXRhaWxzXG4gKiB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAqICAgaWYgKHJlc3VsdCkge1xuICogICAgIC8vIHNldCB1cCBwYXltZW50IHJlcXVlc3QgYnV0dG9uXG4gKiAgIH1cbiAqIH0pO1xuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuUGF5bWVudFJlcXVlc3RDb21wb25lbnQucHJvdG90eXBlLmNhbk1ha2VQYXltZW50ID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgdW5zdXBwb3J0ZWRQYXltZW50TWV0aG9kO1xuXG4gIC8vIE5FWFRfTUFKT1JfVkVSU0lPTiBNb3ZlIHRoaXMgY2hlY2sgdG8gY29tcG9uZW50IGNyZWF0aW9uXG4gIGlmICghd2luZG93LlBheW1lbnRSZXF1ZXN0KSB7XG4gICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgIHNlbGYuX2NsaWVudCxcbiAgICAgIFwicGF5bWVudC1yZXF1ZXN0LmNhbi1tYWtlLXBheW1lbnQubm90LWF2YWlsYWJsZVwiXG4gICAgKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICB9XG5cbiAgaWYgKGNvbmZpZ3VyYXRpb24uc3VwcG9ydGVkUGF5bWVudE1ldGhvZHMpIHtcbiAgICBjb25maWd1cmF0aW9uLnN1cHBvcnRlZFBheW1lbnRNZXRob2RzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgdmFyIHN1cHBvcnRlZE1ldGhvZHMgPSBjb25maWcuc3VwcG9ydGVkTWV0aG9kcztcblxuICAgICAgaWYgKCEoc3VwcG9ydGVkTWV0aG9kcyBpbiBjb25zdGFudHMuU1VQUE9SVEVEX01FVEhPRFMpKSB7XG4gICAgICAgIHVuc3VwcG9ydGVkUGF5bWVudE1ldGhvZCA9IHN1cHBvcnRlZE1ldGhvZHM7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodW5zdXBwb3J0ZWRQYXltZW50TWV0aG9kKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgdHlwZTogZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9VTlNVUFBPUlRFRF9QQVlNRU5UX01FVEhPRC50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5QQVlNRU5UX1JFUVVFU1RfVU5TVVBQT1JURURfUEFZTUVOVF9NRVRIT0QuY29kZSxcbiAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgdW5zdXBwb3J0ZWRQYXltZW50TWV0aG9kICsgXCIgaXMgbm90IGEgc3VwcG9ydGVkIHBheW1lbnQgbWV0aG9kLlwiLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHNlbGYuX2J1cy5lbWl0KFxuICAgICAgZXZlbnRzLkNBTl9NQUtFX1BBWU1FTlQsXG4gICAgICB7XG4gICAgICAgIHN1cHBvcnRlZFBheW1lbnRNZXRob2RzOlxuICAgICAgICAgIGNvbmZpZ3VyYXRpb24uc3VwcG9ydGVkUGF5bWVudE1ldGhvZHMgfHxcbiAgICAgICAgICBzZWxmLl9kZWZhdWx0U3VwcG9ydGVkUGF5bWVudE1ldGhvZHMsXG4gICAgICAgIGRldGFpbHM6IGNvbmZpZ3VyYXRpb24uZGV0YWlscyxcbiAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5vcHRpb25zLFxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICB2YXIgZXJyb3IgPSByZXNwb25zZVswXTtcbiAgICAgICAgdmFyIHBheWxvYWQgPSByZXNwb25zZVsxXTtcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZWplY3Qoc2VsZi5fZm9ybWF0Q2FuTWFrZVBheW1lbnRFcnJvcihlcnJvcikpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgICBzZWxmLl9jbGllbnQsXG4gICAgICAgICAgXCJwYXltZW50LXJlcXVlc3QuY2FuLW1ha2UtcGF5bWVudC5cIiArIHBheWxvYWRcbiAgICAgICAgKTtcblxuICAgICAgICByZXNvbHZlKHBheWxvYWQpO1xuICAgICAgfVxuICAgICk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDbGVhbmx5IHJlbW92ZSBhbnl0aGluZyBzZXQgdXAgYnkge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL3BheW1lbnQtcmVxdWVzdC5jcmVhdGV8Y3JlYXRlfS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGVkIG9uIGNvbXBsZXRpb24uXG4gKiBAZXhhbXBsZVxuICogcGF5bWVudFJlcXVlc3RJbnN0YW5jZS50ZWFyZG93bigpO1xuICogQGV4YW1wbGUgPGNhcHRpb24+V2l0aCBjYWxsYmFjazwvY2FwdGlvbj5cbiAqIHBheW1lbnRSZXF1ZXN0SW5zdGFuY2UudGVhcmRvd24oZnVuY3Rpb24gKCkge1xuICogICAvLyB0ZWFyZG93biBpcyBjb21wbGV0ZVxuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5QYXltZW50UmVxdWVzdENvbXBvbmVudC5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2J1cy50ZWFyZG93bigpO1xuICB0aGlzLl9mcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX2ZyYW1lKTtcblxuICBjb252ZXJ0TWV0aG9kc1RvRXJyb3IodGhpcywgbWV0aG9kcyhQYXltZW50UmVxdWVzdENvbXBvbmVudC5wcm90b3R5cGUpKTtcblxuICBhbmFseXRpY3Muc2VuZEV2ZW50KHRoaXMuX2NsaWVudCwgXCJwYXltZW50LXJlcXVlc3QudGVhcmRvd24tY29tcGxldGVkXCIpO1xuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn07XG5cblBheW1lbnRSZXF1ZXN0Q29tcG9uZW50LnByb3RvdHlwZS5fZm9ybWF0VG9rZW5pemF0aW9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgdmFyIGZvcm1hdHRlZEVycm9yO1xuXG4gIHN3aXRjaCAoZXJyb3IubmFtZSkge1xuICAgIGNhc2UgXCJBYm9ydEVycm9yXCI6XG4gICAgICBmb3JtYXR0ZWRFcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5QQVlNRU5UX1JFUVVFU1RfQ0FOQ0VMRUQudHlwZSxcbiAgICAgICAgY29kZTogZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9DQU5DRUxFRC5jb2RlLFxuICAgICAgICBtZXNzYWdlOiBlcnJvcnMuUEFZTUVOVF9SRVFVRVNUX0NBTkNFTEVELm1lc3NhZ2UsXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvcixcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHRoaXMuX2NsaWVudCwgXCJwYXltZW50LXJlcXVlc3QudG9rZW5pemUuY2FuY2VsZWRcIik7XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZWRFcnJvcjtcbiAgICBjYXNlIFwiUEFZTUVOVF9SRVFVRVNUX0lOSVRJQUxJWkFUSU9OX0ZBSUxFRFwiOlxuICAgICAgZm9ybWF0dGVkRXJyb3IgPSBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICB0eXBlOiBlcnJvcnMuUEFZTUVOVF9SRVFVRVNUX0lOSVRJQUxJWkFUSU9OX01JU0NPTkZJR1VSRUQudHlwZSxcbiAgICAgICAgY29kZTogZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9JTklUSUFMSVpBVElPTl9NSVNDT05GSUdVUkVELmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9ycy5QQVlNRU5UX1JFUVVFU1RfSU5JVElBTElaQVRJT05fTUlTQ09ORklHVVJFRC5tZXNzYWdlLFxuICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJCUkFJTlRSRUVfR0FURVdBWV9HT09HTEVfUEFZTUVOVF9UT0tFTklaQVRJT05fRVJST1JcIjpcbiAgICAgIGZvcm1hdHRlZEVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgdHlwZTogZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9HT09HTEVfUEFZTUVOVF9GQUlMRURfVE9fVE9LRU5JWkUudHlwZSxcbiAgICAgICAgY29kZTogZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9HT09HTEVfUEFZTUVOVF9GQUlMRURfVE9fVE9LRU5JWkUuY29kZSxcbiAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICBlcnJvcnMuUEFZTUVOVF9SRVFVRVNUX0dPT0dMRV9QQVlNRU5UX0ZBSUxFRF9UT19UT0tFTklaRS5tZXNzYWdlLFxuICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJCUkFJTlRSRUVfR0FURVdBWV9HT09HTEVfUEFZTUVOVF9QQVJTSU5HX0VSUk9SXCI6XG4gICAgICBmb3JtYXR0ZWRFcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5QQVlNRU5UX1JFUVVFU1RfR09PR0xFX1BBWU1FTlRfUEFSU0lOR19FUlJPUi50eXBlLFxuICAgICAgICBjb2RlOiBlcnJvcnMuUEFZTUVOVF9SRVFVRVNUX0dPT0dMRV9QQVlNRU5UX1BBUlNJTkdfRVJST1IuY29kZSxcbiAgICAgICAgbWVzc2FnZTogZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9HT09HTEVfUEFZTUVOVF9QQVJTSU5HX0VSUk9SLm1lc3NhZ2UsXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnJvcixcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZvcm1hdHRlZEVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgY29kZTogZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9OT1RfQ09NUExFVEVELmNvZGUsXG4gICAgICAgIHR5cGU6IGVycm9yLnR5cGUgfHwgQnJhaW50cmVlRXJyb3IudHlwZXMuQ1VTVE9NRVIsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9ycy5QQVlNRU5UX1JFUVVFU1RfTk9UX0NPTVBMRVRFRC5tZXNzYWdlLFxuICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgfVxuXG4gIGFuYWx5dGljcy5zZW5kRXZlbnQodGhpcy5fY2xpZW50LCBcInBheW1lbnQtcmVxdWVzdC50b2tlbml6ZS5mYWlsZWRcIik7XG5cbiAgcmV0dXJuIGZvcm1hdHRlZEVycm9yO1xufTtcblxuUGF5bWVudFJlcXVlc3RDb21wb25lbnQucHJvdG90eXBlLl9mb3JtYXRDYW5NYWtlUGF5bWVudEVycm9yID0gZnVuY3Rpb24gKFxuICBlcnJvclxuKSB7XG4gIHZhciBmb3JtYXR0ZWRFcnJvcjtcblxuICBzd2l0Y2ggKGVycm9yLm5hbWUpIHtcbiAgICBjYXNlIFwiUEFZTUVOVF9SRVFVRVNUX0lOSVRJQUxJWkFUSU9OX0ZBSUxFRFwiOlxuICAgICAgZm9ybWF0dGVkRXJyb3IgPSBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICB0eXBlOiBlcnJvcnMuUEFZTUVOVF9SRVFVRVNUX0lOSVRJQUxJWkFUSU9OX01JU0NPTkZJR1VSRUQudHlwZSxcbiAgICAgICAgY29kZTogZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9JTklUSUFMSVpBVElPTl9NSVNDT05GSUdVUkVELmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9ycy5QQVlNRU5UX1JFUVVFU1RfSU5JVElBTElaQVRJT05fTUlTQ09ORklHVVJFRC5tZXNzYWdlLFxuICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJOb3RBbGxvd2VkRXJyb3JcIjpcbiAgICAgIGZvcm1hdHRlZEVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgdHlwZTogZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9DQU5fTUFLRV9QQVlNRU5UX05PVF9BTExPV0VELnR5cGUsXG4gICAgICAgIGNvZGU6IGVycm9ycy5QQVlNRU5UX1JFUVVFU1RfQ0FOX01BS0VfUEFZTUVOVF9OT1RfQUxMT1dFRC5jb2RlLFxuICAgICAgICBtZXNzYWdlOiBlcnJvcnMuUEFZTUVOVF9SRVFVRVNUX0NBTl9NQUtFX1BBWU1FTlRfTk9UX0FMTE9XRUQubWVzc2FnZSxcbiAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycm9yLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZm9ybWF0dGVkRXJyb3IgPSBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICBjb2RlOiBlcnJvcnMuUEFZTUVOVF9SRVFVRVNUX0NBTl9NQUtFX1BBWU1FTlRfRkFJTEVELmNvZGUsXG4gICAgICAgIHR5cGU6IGVycm9ycy5QQVlNRU5UX1JFUVVFU1RfQ0FOX01BS0VfUEFZTUVOVF9GQUlMRUQudHlwZSxcbiAgICAgICAgbWVzc2FnZTogZXJyb3JzLlBBWU1FTlRfUkVRVUVTVF9DQU5fTUFLRV9QQVlNRU5UX0ZBSUxFRC5tZXNzYWdlLFxuICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgfVxuXG4gIGFuYWx5dGljcy5zZW5kRXZlbnQodGhpcy5fY2xpZW50LCBcInBheW1lbnQtcmVxdWVzdC5jYW4tbWFrZS1wYXltZW50LmZhaWxlZFwiKTtcblxuICByZXR1cm4gZm9ybWF0dGVkRXJyb3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBQcm9taXNlLndyYXBQcm90b3R5cGUoUGF5bWVudFJlcXVlc3RDb21wb25lbnQpO1xuXG59LHtcIi4uLy4uL2xpYi9hbmFseXRpY3NcIjoxMTksXCIuLi8uLi9saWIvYXNzaWduXCI6MTIxLFwiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uLy4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIjoxMjcsXCIuLi8uLi9saWIvZ2VuZXJhdGUtZ29vZ2xlLXBheS1jb25maWd1cmF0aW9uXCI6MTQ5LFwiLi4vLi4vbGliL21ldGhvZHNcIjoxNTUsXCIuLi8uLi9saWIvdXNlLW1pblwiOjE2MCxcIi4uL3NoYXJlZC9jb25zdGFudHNcIjoxNzMsXCJAYnJhaW50cmVlL2V2ZW50LWVtaXR0ZXJcIjozMyxcIkBicmFpbnRyZWUvaWZyYW1lclwiOjM1LFwiQGJyYWludHJlZS91dWlkXCI6MzksXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzLFwiZnJhbWVidXNcIjo1Mn1dLDE3MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQG1vZHVsZSBicmFpbnRyZWUtd2ViL3BheW1lbnQtcmVxdWVzdFxuICogQGRlc2NyaXB0aW9uIEEgY29tcG9uZW50IHRvIGludGVncmF0ZSB3aXRoIHRoZSBQYXltZW50IFJlcXVlc3QgQVBJLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGNvbXBvbmVudCBpcyBjdXJyZW50bHkgaW4gYmV0YSBhbmQgdGhlIEFQSSBtYXkgaW5jbHVkZSBicmVha2luZyBjaGFuZ2VzIHdoZW4gdXBncmFkaW5nLiBQbGVhc2UgcmV2aWV3IHRoZSBbQ2hhbmdlbG9nXShodHRwczovL2dpdGh1Yi5jb20vYnJhaW50cmVlL2JyYWludHJlZS13ZWIvYmxvYi9tYWluL0NIQU5HRUxPRy5tZCkgZm9yIHVwZ3JhZGUgc3RlcHMgd2hlbmV2ZXIgeW91IHVwZ3JhZGUgdGhlIHZlcnNpb24gb2YgYnJhaW50cmVlLXdlYi5cbiAqICovXG5cbnZhciBQYXltZW50UmVxdWVzdENvbXBvbmVudCA9IF9kZXJlcV8oXCIuL2V4dGVybmFsL3BheW1lbnQtcmVxdWVzdFwiKTtcbnZhciBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvbiA9IF9kZXJlcV8oXCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiKTtcbnZhciBjcmVhdGVEZWZlcnJlZENsaWVudCA9IF9kZXJlcV8oXCIuLi9saWIvY3JlYXRlLWRlZmVycmVkLWNsaWVudFwiKTtcbnZhciBjcmVhdGVBc3NldHNVcmwgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCIpO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDcmVhdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5lbmFibGVkUGF5bWVudE1ldGhvZHNdIEFuIG9iamVjdCByZXByZXNlbnRpbmcgd2hpY2ggcGF5bWVudCBtZXRob2RzIHRvIGRpc3BsYXkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmVuYWJsZWRQYXltZW50TWV0aG9kcy5iYXNpY0NhcmQ9dHJ1ZV0gV2hldGhlciBvciBub3QgdG8gZGlzcGxheSBjcmVkaXQgY2FyZCBhcyBhbiBvcHRpb24gaW4gdGhlIFBheW1lbnQgUmVxdWVzdCBkaWFsb2cuIElmIGxlZnQgYmxhbmsgb3Igc2V0IHRvIHRydWUsIGNyZWRpdCBjYXJkcyB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgZGlhbG9nIGlmIHRoZSBtZXJjaGFudCBhY2NvdW50IGlzIHNldCB1cCB0byBwcm9jZXNzIGNyZWRpdCBjYXJkcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZW5hYmxlZFBheW1lbnRNZXRob2RzLmdvb2dsZVBheT10cnVlXSBXaGV0aGVyIG9yIG5vdCB0byBkaXNwbGF5IEdvb2dsZSBQYXkgYXMgYW4gb3B0aW9uIGluIHRoZSBQYXltZW50IFJlcXVlc3QgZGlhbG9nLiBJZiBsZWZ0IGJsYW5rIG9yIHNldCB0byB0cnVlLCBHb29nbGUgUGF5IHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSBkaWFsb2cgaWYgdGhlIG1lcmNoYW50IGFjY291bnQgaXMgc2V0IHVwIHRvIHByb2Nlc3MgR29vZ2xlIFBheS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5nb29nbGVQYXlWZXJzaW9uPTFdIElnbm9yZWQgaWYgYG9wdGlvbnMuZW5hYmxlZFBheW1lbnRNZXRob2RzLmdvb2dsZVBheSA9IGZhbHNlYC4gSWYgYHRydWVgLCB0aGlzIG9wdGlvbiBzcGVjaWZpZXMgdGhlIHZlcnNpb24gb2YgR29vZ2xlIFBheSB0byB1c2UuIENob29zZSBlaXRoZXIgMSAoZGVmYXVsdCkgb3IgMi5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgYGRhdGFgLCBpcyB0aGUge0BsaW5rIFBheW1lbnRSZXF1ZXN0Q29tcG9uZW50fSBpbnN0YW5jZS4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGBjcmVhdGVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUge0BsaW5rIFBheW1lbnRSZXF1ZXN0Q29tcG9uZW50fSBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZVxuICogaWYgKHdpbmRvdy5QYXltZW50UmVxdWVzdCkge1xuICogICBicmFpbnRyZWUucGF5bWVudFJlcXVlc3QuY3JlYXRlKHtcbiAqICAgICBjbGllbnQ6IGNsaWVudEluc3RhbmNlXG4gKiAgIH0sIGNiKTtcbiAqIH0gZWxzZSB7XG4gKiAgIC8vIGZhbGwgYmFjayB0byBIb3N0ZWQgRmllbGRzIGlmIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBQYXltZW50IFJlcXVlc3QgQVBJXG4gKiAgIGJyYWludHJlZS5ob3N0ZWRGaWVsZHMuY3JlYXRlKGhvc3RlZEZpZWxkc09wdGlvbnMsIGNiKTtcbiAqIH1cbiAqIEBleGFtcGxlIDxjYXB0aW9uPkV4cGxpY2l0bHkgdHVybmluZyBvZmYgY3JlZGl0IGNhcmRzIGZyb20gUGF5bWVudCBSZXF1ZXN0IEFQSSBkaWFsb2c8L2NhcHRpb24+XG4gKiBicmFpbnRyZWUucGF5bWVudFJlcXVlc3QuY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAqICAgZW5hYmxlZFBheW1lbnRNZXRob2RzOiB7XG4gKiAgICAgZ29vZ2xlUGF5OiB0cnVlLFxuICogICAgIGJhc2ljQ2FyZDogZmFsc2VcbiAqICAgfVxuICogfSwgY2IpO1xuICogQGV4YW1wbGUgPGNhcHRpb24+VXNpbmcgR29vZ2xlIFBheSB2MiBvciBiYXNpYyBjYXJkPC9jYXB0aW9uPlxuICogYnJhaW50cmVlLnBheW1lbnRSZXF1ZXN0LmNyZWF0ZSh7XG4gKiAgIGNsaWVudDogY2xpZW50SW5zdGFuY2UsXG4gKiAgIGVuYWJsZWRQYXltZW50TWV0aG9kczoge1xuICogICAgIGJhc2ljQ2FyZDogdHJ1ZSxcbiAqICAgICBnb29nbGVQYXk6IHRydWVcbiAqICAgfSxcbiAqICAgZ29vZ2xlUGF5VmVyc2lvbjogMlxuICogfSwgY2IpO1xuICpcbiAqL1xuZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgdmFyIG5hbWUgPSBcIlBheW1lbnQgUmVxdWVzdFwiO1xuXG4gIHJldHVybiBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvblxuICAgIC52ZXJpZnkoe1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRGVmZXJyZWRDbGllbnQuY3JlYXRlKHtcbiAgICAgICAgYXV0aG9yaXphdGlvbjogb3B0aW9ucy5hdXRob3JpemF0aW9uLFxuICAgICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgICBkZWJ1Zzogb3B0aW9ucy5kZWJ1ZyxcbiAgICAgICAgYXNzZXRzVXJsOiBjcmVhdGVBc3NldHNVcmwuY3JlYXRlKG9wdGlvbnMuYXV0aG9yaXphdGlvbiksXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB9KTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIHZhciBwYXltZW50UmVxdWVzdEluc3RhbmNlO1xuXG4gICAgICBvcHRpb25zLmNsaWVudCA9IGNsaWVudDtcbiAgICAgIHBheW1lbnRSZXF1ZXN0SW5zdGFuY2UgPSBuZXcgUGF5bWVudFJlcXVlc3RDb21wb25lbnQob3B0aW9ucyk7XG5cbiAgICAgIHJldHVybiBwYXltZW50UmVxdWVzdEluc3RhbmNlLmluaXRpYWxpemUoKTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogd3JhcFByb21pc2UoY3JlYXRlKSxcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBTREssIGkuZS4gYHtAcGtnIHZlcnNpb259YC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIFZFUlNJT046IFZFUlNJT04sXG59O1xuXG59LHtcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCI6MTIyLFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCI6MTI5LFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIjoxMzEsXCIuL2V4dGVybmFsL3BheW1lbnQtcmVxdWVzdFwiOjE3MSxcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCI6NDN9XSwxNzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlbnVtZXJhdGUgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2VudW1lcmF0ZVwiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG5cbnZhciBjb25zdGFudHMgPSB7fTtcblxuY29uc3RhbnRzLmV2ZW50cyA9IGVudW1lcmF0ZShcbiAgW1xuICAgIFwiQ0FOX01BS0VfUEFZTUVOVFwiLFxuICAgIFwiRlJBTUVfUkVBRFlcIixcbiAgICBcIkZSQU1FX0NBTl9NQUtFX1JFUVVFU1RTXCIsXG4gICAgXCJQQVlNRU5UX1JFUVVFU1RfSU5JVElBTElaRURcIixcbiAgICBcIlNISVBQSU5HX0FERFJFU1NfQ0hBTkdFXCIsXG4gICAgXCJVUERBVEVfU0hJUFBJTkdfQUREUkVTU1wiLFxuICAgIFwiU0hJUFBJTkdfT1BUSU9OX0NIQU5HRVwiLFxuICAgIFwiVVBEQVRFX1NISVBQSU5HX09QVElPTlwiLFxuICBdLFxuICBcInBheW1lbnQtcmVxdWVzdDpcIlxuKTtcblxuY29uc3RhbnRzLmVycm9ycyA9IGVycm9ycztcblxuY29uc3RhbnRzLlNVUFBPUlRFRF9NRVRIT0RTID0ge1xuICBcImJhc2ljLWNhcmRcIjogdHJ1ZSxcbiAgXCJodHRwczovL2dvb2dsZS5jb20vcGF5XCI6IHRydWUsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnN0YW50cztcblxufSx7XCIuLi8uLi9saWIvZW51bWVyYXRlXCI6MTM0LFwiLi9lcnJvcnNcIjoxNzR9XSwxNzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuUGF5bWVudCBSZXF1ZXN0IC0gQ3JlYXRpb24gRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIFtjcmVhdGluZyB0aGUgUGF5bWVudCBSZXF1ZXN0IGNvbXBvbmVudF0oLi9tb2R1bGUtYnJhaW50cmVlLXdlYl9wYXltZW50LXJlcXVlc3QuaHRtbCMuY3JlYXRlKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFBBWU1FTlRfUkVRVUVTVF9OT19WQUxJRF9TVVBQT1JURURfUEFZTUVOVF9NRVRIT0RTIE9jY3VycyB3aGVuIHRoZXJlIGFyZSBubyB2YWxpZCBwYXltZW50IG1ldGhvZHMgY29uZmlndXJlZC5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlBheW1lbnQgUmVxdWVzdCAtIGNyZWF0ZVN1cHBvcnRlZFBheW1lbnRNZXRob2RzQ29uZmlndXJhdGlvbiAgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIHVzaW5nIHRoZSBbYGNyZWF0ZVN1cHBvcnRlZFBheW1lbnRNZXRob2RzQ29uZmlndXJhdGlvbmAgbWV0aG9kXSguL1BheW1lbnRSZXF1ZXN0Q29tcG9uZW50Lmh0bWwjY3JlYXRlU3VwcG9ydGVkUGF5bWVudE1ldGhvZHNDb25maWd1cmF0aW9uKVxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gUEFZTUVOVF9SRVFVRVNUX0NSRUFURV9TVVBQT1JURURfUEFZTUVOVF9NRVRIT0RTX0NPTkZJR1VSQVRJT05fTVVTVF9JTkNMVURFX1RZUEUgT2NjdXJzIHdoZW4gbm8gdHlwZSBpcyBzdXBwbGllZCBmb3IgbWV0aG9kLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gUEFZTUVOVF9SRVFVRVNUX0NSRUFURV9TVVBQT1JURURfUEFZTUVOVF9NRVRIT0RTX0NPTkZJR1VSQVRJT05fVFlQRV9OT1RfRU5BQkxFRCBPY2N1cnMgd2hlbiBjb25maWd1cmVkIHR5cGUgaXMgbm90IGVuYWJsZWQuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5QYXltZW50IFJlcXVlc3QgLSB0b2tlbml6ZSAgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIHVzaW5nIHRoZSBbYHRva2VuaXplYCBtZXRob2RdKC4vUGF5bWVudFJlcXVlc3RDb21wb25lbnQuaHRtbCN0b2tlbml6ZSlcbiAqIEBwcm9wZXJ0eSB7Q1VTVE9NRVJ9IFBBWU1FTlRfUkVRVUVTVF9DQU5DRUxFRCBPY2N1cnMgd2hlbiBjdXN0b21lciBjYW5jZWxzIHRoZSBQYXltZW50IFJlcXVlc3QuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBQQVlNRU5UX1JFUVVFU1RfSU5JVElBTElaQVRJT05fTUlTQ09ORklHVVJFRCBPY2N1cnMgd2hlbiB0aGUgUGF5bWVudCBSZXF1ZXN0IGlzIGNsb3NlZCBkbyB0byB0aGUgb3B0aW9ucyBiZWluZyBtaXNjb25maWd1cmVkLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gUEFZTUVOVF9SRVFVRVNUX0dPT0dMRV9QQVlNRU5UX0ZBSUxFRF9UT19UT0tFTklaRSBPY2N1cnMgd2hlbiBhIEdvb2dsZSBQYXltZW50IHBheW1lbnQgbWV0aG9kIGlzIHVuYWJsZSB0byBiZSB0b2tlbml6ZWQuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFBBWU1FTlRfUkVRVUVTVF9HT09HTEVfUEFZTUVOVF9QQVJTSU5HX0VSUk9SIE9jY3VycyB3aGVuIHRoZSByZXN1bHQgb2YgdG9rZW5pemluZyBhIEdvb2dsZSBQYXltZW50IHBheW1lbnQgbWV0aG9kIGNvdWxkIG5vdCBiZSBwYXJzZWQuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBQQVlNRU5UX1JFUVVFU1RfTk9UX0NPTVBMRVRFRCBPY2N1cnMgd2hlbiBhbiBlcnJvciBwcmV2ZW50ZWQgdGhlIFBheW1lbnQgUmVxdWVzdCBmcm9tIGJlaW5nIGNvbXBsZXRlZC5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlBheW1lbnQgUmVxdWVzdCAtIGNhbk1ha2VQYXltZW50ICBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gdXNpbmcgdGhlIFtgY2FuTWFrZVBheW1lbnRgIG1ldGhvZF0oLi9QYXltZW50UmVxdWVzdENvbXBvbmVudC5odG1sI2Nhbk1ha2VQYXltZW50KVxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gUEFZTUVOVF9SRVFVRVNUX0lOSVRJQUxJWkFUSU9OX01JU0NPTkZJR1VSRUQgT2NjdXJzIHdoZW4gdGhlIFBheW1lbnQgUmVxdWVzdCBpcyBpbnN0YW50aWF0ZWQgd2l0aCBtaXNjb25maWd1cmVkIG9wdGlvbnMuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBQQVlNRU5UX1JFUVVFU1RfQ0FOX01BS0VfUEFZTUVOVF9OT1RfQUxMT1dFRCBPY2N1cnMgd2hlbiBgY2FuTWFrZVBheW1lbnRgIHJlc3VsdHMgaW4gYSBgRG9tRXhjZXB0aW9uYCB3aXRoIGEgYE5vdEFsbG93ZWRFcnJvcmAuIFRoaXMgdXN1YWxseSBvY2N1cnMgd2hlbiBgY2FuTWFrZVBheW1lbnRgIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBzdXBwb3J0ZWQgcGF5bWVudCBvcHRpb25zLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gUEFZTUVOVF9SRVFVRVNUX1VOU1VQUE9SVEVEX1BBWU1FTlRfTUVUSE9EIE9jY3VycyB3aGVuIGBjYW5NYWtlUGF5bWVudGAgaXMgY2FsbGVkIHdpdGggYSBgc3VwcG9ydGVkUGF5bWVudE1ldGhvZHNgIGFycmF5IHRoYXQgY29udGFpbnMgYSBwYXltZW50IG1ldGhvZCB0aGF0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIEJyYWludHJlZSBTREsuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFBBWU1FTlRfUkVRVUVTVF9DQU5fTUFLRV9QQVlNRU5UX0ZBSUxFRCBPY2N1cnMgd2hlbiBgY2FuTWFrZVBheW1lbnRgIGZhaWxzIGZvciBhbnkgcmVhc29uIG90aGVyIHRoYW4gYSBtaXNjb25maWd1cmVkIFBheW1lbnQgUmVxdWVzdCBvYmplY3QuXG4gKi9cblxudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQQVlNRU5UX1JFUVVFU1RfTk9fVkFMSURfU1VQUE9SVEVEX1BBWU1FTlRfTUVUSE9EUzoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiUEFZTUVOVF9SRVFVRVNUX05PX1ZBTElEX1NVUFBPUlRFRF9QQVlNRU5UX01FVEhPRFNcIixcbiAgICBtZXNzYWdlOlxuICAgICAgXCJUaGVyZSBhcmUgbm8gc3VwcG9ydGVkIHBheW1lbnQgbWV0aG9kcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBhY2NvdW50LlwiLFxuICB9LFxuICBQQVlNRU5UX1JFUVVFU1RfQ0FOQ0VMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5DVVNUT01FUixcbiAgICBjb2RlOiBcIlBBWU1FTlRfUkVRVUVTVF9DQU5DRUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiUGF5bWVudCByZXF1ZXN0IHdhcyBjYW5jZWxlZC5cIixcbiAgfSxcbiAgUEFZTUVOVF9SRVFVRVNUX0lOSVRJQUxJWkFUSU9OX01JU0NPTkZJR1VSRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlBBWU1FTlRfUkVRVUVTVF9JTklUSUFMSVpBVElPTl9NSVNDT05GSUdVUkVEXCIsXG4gICAgbWVzc2FnZTogXCJTb21ldGhpbmcgd2VudCB3cm9uZyB3aGVuIGNvbmZpZ3VyaW5nIHRoZSBwYXltZW50IHJlcXVlc3QuXCIsXG4gIH0sXG4gIFBBWU1FTlRfUkVRVUVTVF9DQU5fTUFLRV9QQVlNRU5UX0ZBSUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLlVOS05PV04sXG4gICAgY29kZTogXCJQQVlNRU5UX1JFUVVFU1RfQ0FOX01BS0VfUEFZTUVOVF9GQUlMRURcIixcbiAgICBtZXNzYWdlOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gY2FsbGluZyBgY2FuTWFrZVBheW1lbnRgXCIsXG4gIH0sXG4gIFBBWU1FTlRfUkVRVUVTVF9DQU5fTUFLRV9QQVlNRU5UX05PVF9BTExPV0VEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJQQVlNRU5UX1JFUVVFU1RfQ0FOX01BS0VfUEFZTUVOVF9OT1RfQUxMT1dFRFwiLFxuICAgIG1lc3NhZ2U6XG4gICAgICBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gY2FsbGluZyBgY2FuTWFrZVBheW1lbnRgLiBNb3N0IGxpa2VseSwgYGNhbk1ha2VQYXltZW50YCB3YXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IHN1cHBvcnRlZE1ldGhvZHMgY29uZmlndXJhdGlvbnMuXCIsXG4gIH0sXG4gIFBBWU1FTlRfUkVRVUVTVF9VTlNVUFBPUlRFRF9QQVlNRU5UX01FVEhPRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiUEFZTUVOVF9SRVFVRVNUX1VOU1VQUE9SVEVEX1BBWU1FTlRfTUVUSE9EXCIsXG4gIH0sXG4gIFBBWU1FTlRfUkVRVUVTVF9HT09HTEVfUEFZTUVOVF9GQUlMRURfVE9fVE9LRU5JWkU6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlBBWU1FTlRfUkVRVUVTVF9HT09HTEVfUEFZTUVOVF9GQUlMRURfVE9fVE9LRU5JWkVcIixcbiAgICBtZXNzYWdlOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gdG9rZW5pemluZyB0aGUgR29vZ2xlIFBheSBjYXJkLlwiLFxuICB9LFxuICBQQVlNRU5UX1JFUVVFU1RfR09PR0xFX1BBWU1FTlRfUEFSU0lOR19FUlJPUjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLlVOS05PV04sXG4gICAgY29kZTogXCJQQVlNRU5UX1JFUVVFU1RfR09PR0xFX1BBWU1FTlRfUEFSU0lOR19FUlJPUlwiLFxuICAgIG1lc3NhZ2U6IFwiU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hlbiB0b2tlbml6aW5nIHRoZSBHb29nbGUgUGF5IGNhcmQuXCIsXG4gIH0sXG4gIFBBWU1FTlRfUkVRVUVTVF9OT1RfQ09NUExFVEVEOiB7XG4gICAgY29kZTogXCJQQVlNRU5UX1JFUVVFU1RfTk9UX0NPTVBMRVRFRFwiLFxuICAgIG1lc3NhZ2U6IFwiUGF5bWVudCByZXF1ZXN0IGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQuXCIsXG4gIH0sXG4gIFBBWU1FTlRfUkVRVUVTVF9DUkVBVEVfU1VQUE9SVEVEX1BBWU1FTlRfTUVUSE9EU19DT05GSUdVUkFUSU9OX01VU1RfSU5DTFVERV9UWVBFOlxuICAgIHtcbiAgICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgICAgY29kZTogXCJQQVlNRU5UX1JFUVVFU1RfQ1JFQVRFX1NVUFBPUlRFRF9QQVlNRU5UX01FVEhPRFNfQ09ORklHVVJBVElPTl9NVVNUX0lOQ0xVREVfVFlQRVwiLFxuICAgICAgbWVzc2FnZTpcbiAgICAgICAgXCJjcmVhdGVTdXBwb3J0ZWRQYXltZW50TWV0aG9kc0NvbmZpZ3VyYXRpb24gbXVzdCBpbmNsdWRlIGEgdHlwZSBwYXJhbWV0ZXIuXCIsXG4gICAgfSxcbiAgUEFZTUVOVF9SRVFVRVNUX0NSRUFURV9TVVBQT1JURURfUEFZTUVOVF9NRVRIT0RTX0NPTkZJR1VSQVRJT05fVFlQRV9OT1RfRU5BQkxFRDpcbiAgICB7XG4gICAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICAgIGNvZGU6IFwiUEFZTUVOVF9SRVFVRVNUX0NSRUFURV9TVVBQT1JURURfUEFZTUVOVF9NRVRIT0RTX0NPTkZJR1VSQVRJT05fVFlQRV9OT1RfRU5BQkxFRFwiLFxuICAgICAgbWVzc2FnZTpcbiAgICAgICAgXCJjcmVhdGVTdXBwb3J0ZWRQYXltZW50TWV0aG9kc0NvbmZpZ3VyYXRpb24gdHlwZSBwYXJhbWV0ZXIgbXVzdCBiZSB2YWxpZCBvciBlbmFibGVkLlwiLFxuICAgIH0sXG59O1xuXG59LHtcIi4uLy4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjR9XSwxNzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuUGF5UGFsIENoZWNrb3V0IC0gQ3JlYXRpb24gRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIFtjcmVhdGluZyB0aGUgUGF5UGFsIENoZWNrb3V0IGNvbXBvbmVudF0oLi9tb2R1bGUtYnJhaW50cmVlLXdlYl9wYXlwYWwtY2hlY2tvdXQuaHRtbCMuY3JlYXRlKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFBBWVBBTF9OT1RfRU5BQkxFRCBPY2N1cnMgd2hlbiBQYXlQYWwgaXMgbm90IGVuYWJsZWQgb24gdGhlIEJyYWludHJlZSBjb250cm9sIHBhbmVsLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gUEFZUEFMX1NBTkRCT1hfQUNDT1VOVF9OT1RfTElOS0VEIE9jY3VycyBvbmx5IHdoZW4gdGVzdGluZyBpbiBTYW5kYm94LCB3aGVuIGEgUGF5UGFsIHNhbmRib3ggYWNjb3VudCBpcyBub3QgbGlua2VkIHRvIHRoZSBtZXJjaGFudCBhY2NvdW50IGluIHRoZSBCcmFpbnRyZWUgY29udHJvbCBwYW5lbC5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlBheVBhbCBDaGVja291dCAtIGNyZWF0ZVBheW1lbnQgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIHVzaW5nIHRoZSBbYGNyZWF0ZVBheW1lbnRgIG1ldGhvZF0oLi9QYXlQYWxDaGVja291dC5odG1sI2NyZWF0ZVBheW1lbnQpLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gUEFZUEFMX0ZMT1dfT1BUSU9OX1JFUVVJUkVEIE9jY3VycyB3aGVuIGEgcmVxdWlyZWQgb3B0aW9uIGlzIG1pc3NpbmcuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBQQVlQQUxfSU5WQUxJRF9QQVlNRU5UX09QVElPTiBPY2N1cnMgd2hlbiBhbiBvcHRpb24gY29udGFpbnMgYW4gaW52YWxpZCB2YWx1ZS5cbiAqIEBwcm9wZXJ0eSB7TkVUV09SS30gUEFZUEFMX0ZMT1dfRkFJTEVEIE9jY3VycyB3aGVuIHNvbWV0aGluZyBnb2VzIHdyb25nIHdoZW4gaW5pdGlhbGl6aW5nIHRoZSBmbG93LlxuICovXG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuUGF5UGFsIENoZWNrb3V0IC0gc3RhcnRWYXVsdEluaXRpYXRlZENoZWNrb3V0IEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiB1c2luZyB0aGUgW2BzdGFydFZhdWx0SW5pdGlhdGVkQ2hlY2tvdXRgIG1ldGhvZF0oLi9QYXlQYWxDaGVja291dC5odG1sI3N0YXJ0VmF1bHRJbml0aWF0ZWRDaGVja291dCkuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBQQVlQQUxfU1RBUlRfVkFVTFRfSU5JVElBVEVEX0NIRUNLT1VUX1BBUkFNX1JFUVVJUkVEIE9jY3VycyB3aGVuIGEgcmVxdWlyZWQgcGFyYW0gaXMgbWlzc2luZyB3aGVuIGNhbGxpbmcgdGhlIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFBBWVBBTF9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVRfUE9QVVBfT1BFTl9GQUlMRUQgT2NjdXJzIHdoZW4gUGF5UGFsIHdpbmRvdyBjb3VsZCBub3QgYmUgb3BlbmVkLiBUaGlzIG9mdGVuIG9jY3VycyBiZWNhdXNlIHRoZSBjYWxsIHRvIHN0YXJ0IHRoZSB2YXVsdCBpbml0aWF0ZWQgZmxvdyB3YXMgbm90IHRyaWdnZXJlZCBmcm9tIGEgY2xpY2sgZXZlbnQuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBQQVlQQUxfU1RBUlRfVkFVTFRfSU5JVElBVEVEX0NIRUNLT1VUX0NBTkNFTEVEIE9jY3VycyB3aGVuIGEgY3VzdG9tZXIgY2xvc2VzIHRoZSBQYXlQYWwgZmxvdyBiZWZvcmUgY29tcGxldGlvbi5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFBBWVBBTF9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVRfSU5fUFJPR1JFU1MgT2NjdXJzIHdoZW4gdGhlIGZsb3cgaXMgaW5pdGlhbGl6ZWQgd2hpbGUgYW4gYXV0aG9yaXphdGlvbiBpcyBhbHJlYWR5IGluIHByb2dyZXNzLlxuICogQHByb3BlcnR5IHtORVRXT1JLfSBQQVlQQUxfU1RBUlRfVkFVTFRfSU5JVElBVEVEX0NIRUNLT1VUX1NFVFVQX0ZBSUxFRCBPY2N1cnMgd2hlbiBzb21ldGhpbmcgd2VudCB3cm9uZyBzZXR0aW5nIHVwIHRoZSBmbG93LlxuICovXG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuUGF5UGFsIENoZWNrb3V0IC0gdG9rZW5pemVQYXltZW50IEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiB1c2luZyB0aGUgW2B0b2tlbml6ZVBheW1lbnRgIG1ldGhvZF0oLi9QYXlQYWxDaGVja291dC5odG1sI3Rva2VuaXplUGF5bWVudCkuXG4gKiBAcHJvcGVydHkge05FVFdPUkt9IFBBWVBBTF9BQ0NPVU5UX1RPS0VOSVpBVElPTl9GQUlMRUQgT2NjdXJzIHdoZW4gUGF5UGFsIGFjY291bnQgY291bGQgbm90IGJlIHRva2VuaXplZC5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlBheXBhbCBDaGVja291dCAtIHVwZGF0ZVBheW1lbnQgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIHVzaW5nIHRoZSBbYHVwZGF0ZVBheW1lbnRgIG1ldGhvZF0oLi9QYXlQYWxDaGVja291dC5odG1sI3VwZGF0ZVBheW1lbnQpLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gUEFZUEFMX0lOVkFMSURfUEFZTUVOVF9PUFRJT04gT2NjdXJzIHdoZW4gYW4gb3B0aW9uIGNvbnRhaW5zIGFuIGludmFsaWQgdmFsdWUuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBQQVlQQUxfTUlTU0lOR19SRVFVSVJFRF9PUFRJT04gT2NjdXJzIHdoZW4gYSByZXF1aXJlZCBvcHRpb24gaXMgbWlzc2luZy5cbiAqIEBwcm9wZXJ0eSB7TkVUV09SS30gUEFZUEFMX0ZMT1dfRkFJTEVEIE9jY3VycyB3aGVuIHNvbWV0aGluZyBnb2VzIHdyb25nIHdoZW4gaW5pdGlhbGl6aW5nIHRoZSBmbG93IG9yIGNvbW11bmljYXRpbmcgd2l0aCB0aGUgc2VydmVyLlxuICovXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBBWVBBTF9OT1RfRU5BQkxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiUEFZUEFMX05PVF9FTkFCTEVEXCIsXG4gICAgbWVzc2FnZTogXCJQYXlQYWwgaXMgbm90IGVuYWJsZWQgZm9yIHRoaXMgbWVyY2hhbnQuXCIsXG4gIH0sXG4gIFBBWVBBTF9TQU5EQk9YX0FDQ09VTlRfTk9UX0xJTktFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiUEFZUEFMX1NBTkRCT1hfQUNDT1VOVF9OT1RfTElOS0VEXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiQSBsaW5rZWQgUGF5UGFsIFNhbmRib3ggYWNjb3VudCBpcyByZXF1aXJlZCB0byB1c2UgUGF5UGFsIENoZWNrb3V0IGluIFNhbmRib3guIFNlZSBodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2JyYWludHJlZS9kb2NzL2d1aWRlcy9wYXlwYWwvdGVzdGluZy1nby1saXZlI2xpbmtlZC1wYXlwYWwtdGVzdGluZyBmb3IgZGV0YWlscyBvbiBsaW5raW5nIHlvdXIgUGF5UGFsIHNhbmRib3ggd2l0aCBCcmFpbnRyZWUuXCIsXG4gIH0sXG4gIFBBWVBBTF9BQ0NPVU5UX1RPS0VOSVpBVElPTl9GQUlMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5ORVRXT1JLLFxuICAgIGNvZGU6IFwiUEFZUEFMX0FDQ09VTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ291bGQgbm90IHRva2VuaXplIHVzZXIncyBQYXlQYWwgYWNjb3VudC5cIixcbiAgfSxcbiAgUEFZUEFMX0ZMT1dfRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTkVUV09SSyxcbiAgICBjb2RlOiBcIlBBWVBBTF9GTE9XX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ291bGQgbm90IGluaXRpYWxpemUgUGF5UGFsIGZsb3cuXCIsXG4gIH0sXG4gIFBBWVBBTF9GTE9XX09QVElPTl9SRVFVSVJFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiUEFZUEFMX0ZMT1dfT1BUSU9OX1JFUVVJUkVEXCIsXG4gICAgbWVzc2FnZTogXCJQYXlQYWwgZmxvdyBwcm9wZXJ0eSBpcyBpbnZhbGlkIG9yIG1pc3NpbmcuXCIsXG4gIH0sXG4gIFBBWVBBTF9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVRfUEFSQU1fUkVRVUlSRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlBBWVBBTF9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVRfUEFSQU1fUkVRVUlSRURcIixcbiAgfSxcbiAgUEFZUEFMX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVF9TRVRVUF9GQUlMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5ORVRXT1JLLFxuICAgIGNvZGU6IFwiUEFZUEFMX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVF9TRVRVUF9GQUlMRURcIixcbiAgICBtZXNzYWdlOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gc2V0dGluZyB1cCB0aGUgY2hlY2tvdXQgd29ya2Zsb3cuXCIsXG4gIH0sXG4gIFBBWVBBTF9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVRfUE9QVVBfT1BFTl9GQUlMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlBBWVBBTF9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVRfUE9QVVBfT1BFTl9GQUlMRURcIixcbiAgICBtZXNzYWdlOlxuICAgICAgXCJQYXlQYWwgcG9wdXAgZmFpbGVkIHRvIG9wZW4sIG1ha2Ugc3VyZSB0byBpbml0aWF0ZSB0aGUgdmF1bHQgY2hlY2tvdXQgaW4gcmVzcG9uc2UgdG8gYSB1c2VyIGFjdGlvbi5cIixcbiAgfSxcbiAgUEFZUEFMX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVF9DQU5DRUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiUEFZUEFMX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVF9DQU5DRUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ3VzdG9tZXIgY2xvc2VkIFBheVBhbCBwb3B1cCBiZWZvcmUgYXV0aG9yaXppbmcuXCIsXG4gIH0sXG4gIFBBWVBBTF9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVRfSU5fUFJPR1JFU1M6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlBBWVBBTF9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVRfSU5fUFJPR1JFU1NcIixcbiAgICBtZXNzYWdlOiBcIlZhdWx0IGluaXRpYXRlZCBjaGVja291dCBhbHJlYWR5IGluIHByb2dyZXNzLlwiLFxuICB9LFxuICBQQVlQQUxfSU5WQUxJRF9QQVlNRU5UX09QVElPTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiUEFZUEFMX0lOVkFMSURfUEFZTUVOVF9PUFRJT05cIixcbiAgICBtZXNzYWdlOiBcIlBheVBhbCBwYXltZW50IG9wdGlvbnMgYXJlIGludmFsaWQuXCIsXG4gIH0sXG4gIFBBWVBBTF9NSVNTSU5HX1JFUVVJUkVEX09QVElPTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiUEFZUEFMX01JU1NJTkdfUkVRVUlSRURfT1BUSU9OXCIsXG4gICAgbWVzc2FnZTogXCJNaXNzaW5nIHJlcXVpcmVkIG9wdGlvbi5cIixcbiAgfSxcbn07XG5cbn0se1wiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNH1dLDE3NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQG1vZHVsZSBicmFpbnRyZWUtd2ViL3BheXBhbC1jaGVja291dFxuICogQGRlc2NyaXB0aW9uIEEgY29tcG9uZW50IHRvIGludGVncmF0ZSB3aXRoIHRoZSBbUGF5UGFsIEpTIFNES10oaHR0cHM6Ly9naXRodWIuY29tL3BheXBhbC9wYXlwYWwtY2hlY2tvdXQtY29tcG9uZW50cykuXG4gKi9cblxudmFyIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uID0gX2RlcmVxXyhcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCIpO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIFBheVBhbENoZWNrb3V0ID0gX2RlcmVxXyhcIi4vcGF5cGFsLWNoZWNrb3V0XCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAZGVzY3JpcHRpb24gVGhlcmUgYXJlIHR3byB3YXlzIHRvIGludGVncmF0ZSB0aGUgUGF5UGFsIENoZWNrb3V0IGNvbXBvbmVudC4gU2VlIHRoZSBbUGF5UGFsIENoZWNrb3V0IGNvbnN0cnVjdG9yIGRvY3VtZW50YXRpb25dKFBheVBhbENoZWNrb3V0Lmh0bWwjUGF5UGFsQ2hlY2tvdXQpIGZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDcmVhdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5tZXJjaGFudEFjY291bnRJZF0gQSBub24tZGVmYXVsdCBtZXJjaGFudCBhY2NvdW50IElEIHRvIHVzZSBmb3IgdG9rZW5pemF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hdXRvU2V0RGF0YVVzZXJJZFRva2VuPWZhbHNlXSBXaGV0aGVyIG9yIG5vdCB0byByZW5kZXIgdGhlIFBheVBhbCBTREsgYnV0dG9uIHdpdGggYSBjdXN0b21lcidzIHZhdWx0ZWQgUGF5UGFsIGFjY291bnQuIE11c3QgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGEgQ2xpZW50IFRva2VuIGdlbmVyYXRlZCB3aXRoIGEgY3VzdG9tZXIgaWQuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIGBkYXRhYCwgaXMgdGhlIHtAbGluayBQYXlQYWxDaGVja291dH0gaW5zdGFuY2UuXG4gKiBAZXhhbXBsZVxuICogYnJhaW50cmVlLmNsaWVudC5jcmVhdGUoe1xuICogICBhdXRob3JpemF0aW9uOiAnYXV0aG9yaXphdGlvbidcbiAqIH0pLnRoZW4oZnVuY3Rpb24gKGNsaWVudEluc3RhbmNlKSB7XG4gKiAgIHJldHVybiBicmFpbnRyZWUucGF5cGFsQ2hlY2tvdXQuY3JlYXRlKHtcbiAqICAgICBjbGllbnQ6IGNsaWVudEluc3RhbmNlXG4gKiAgIH0pO1xuICogfSkudGhlbihmdW5jdGlvbiAocGF5cGFsQ2hlY2tvdXRJbnN0YW5jZSkge1xuICogICAvLyBzZXQgdXAgdGhlIFBheVBhbCBKUyBTREtcbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgY29uc29sZS5lcnJvcignRXJyb3IhJywgZXJyKTtcbiAqIH0pO1xuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgdmFyIG5hbWUgPSBcIlBheVBhbCBDaGVja291dFwiO1xuXG4gIHJldHVybiBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvblxuICAgIC52ZXJpZnkoe1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgUGF5UGFsQ2hlY2tvdXQob3B0aW9ucyk7XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZS5faW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gaXNTdXBwb3J0ZWRcbiAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRydWUgaWYgUGF5UGFsIENoZWNrb3V0IFtzdXBwb3J0cyB0aGlzIGJyb3dzZXJdKGluZGV4Lmh0bWwjYnJvd3Nlci1zdXBwb3J0LXdlYnZpZXdzKS5cbiAqIEBkZXByZWNhdGVkIFByZXZpb3VzbHksIHRoaXMgbWV0aG9kIGNoZWNrZWQgZm9yIFBvcHVwIHN1cHBvcnQgaW4gdGhlIGJyb3dzZXIuIFRoZSBQYXlQYWwgSlMgU0RLIG5vdyBmYWxscyBiYWNrIHRvIGEgbW9kYWwgaWYgcG9wdXBzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICogQHJldHVybnMge0Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBQYXlQYWwgQ2hlY2tvdXQgc3VwcG9ydHMgdGhpcyBicm93c2VyLlxuICovXG5mdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IHdyYXBQcm9taXNlKGNyZWF0ZSksXG4gIGlzU3VwcG9ydGVkOiBpc1N1cHBvcnRlZCxcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBTREssIGkuZS4gYHtAcGtnIHZlcnNpb259YC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIFZFUlNJT046IFZFUlNJT04sXG59O1xuXG59LHtcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCI6MTIyLFwiLi9wYXlwYWwtY2hlY2tvdXRcIjoxNzcsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMTc3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgYW5hbHl0aWNzID0gX2RlcmVxXyhcIi4uL2xpYi9hbmFseXRpY3NcIik7XG52YXIgYXNzaWduID0gX2RlcmVxXyhcIi4uL2xpYi9hc3NpZ25cIikuYXNzaWduO1xudmFyIGNyZWF0ZURlZmVycmVkQ2xpZW50ID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCIpO1xudmFyIGNyZWF0ZUFzc2V0c1VybCA9IF9kZXJlcV8oXCIuLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIik7XG52YXIgRXh0ZW5kZWRQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvZXh0ZW5kZWQtcHJvbWlzZVwiKTtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGNvbnZlcnRUb0JyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9jb252ZXJ0LXRvLWJyYWludHJlZS1lcnJvclwiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXyhcIi4uL3BheXBhbC9zaGFyZWQvY29uc3RhbnRzXCIpO1xudmFyIGZyYW1lU2VydmljZSA9IF9kZXJlcV8oXCIuLi9saWIvZnJhbWUtc2VydmljZS9leHRlcm5hbFwiKTtcbnZhciBjcmVhdGVBdXRob3JpemF0aW9uRGF0YSA9IF9kZXJlcV8oXCIuLi9saWIvY3JlYXRlLWF1dGhvcml6YXRpb24tZGF0YVwiKTtcbnZhciBtZXRob2RzID0gX2RlcmVxXyhcIi4uL2xpYi9tZXRob2RzXCIpO1xudmFyIHVzZU1pbiA9IF9kZXJlcV8oXCIuLi9saWIvdXNlLW1pblwiKTtcbnZhciBjb252ZXJ0TWV0aG9kc1RvRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2NvbnZlcnQtbWV0aG9kcy10by1lcnJvclwiKTtcbnZhciBxdWVyeXN0cmluZyA9IF9kZXJlcV8oXCIuLi9saWIvcXVlcnlzdHJpbmdcIik7XG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xudmFyIElOVEVHUkFUSU9OX1RJTUVPVVRfTVMgPSBfZGVyZXFfKFwiLi4vbGliL2NvbnN0YW50c1wiKS5JTlRFR1JBVElPTl9USU1FT1VUX01TO1xuXG52YXIgUkVRVUlSRURfUEFSQU1TX0ZPUl9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVQgPSBbXG4gIFwiYW1vdW50XCIsXG4gIFwiY3VycmVuY3lcIixcbiAgXCJ2YXVsdEluaXRpYXRlZENoZWNrb3V0UGF5bWVudE1ldGhvZFRva2VuXCIsXG5dO1xuXG52YXIgUEFZUEFMX1NES19QUkVMT0FEX1VSTCA9XG4gIFwiaHR0cHM6Ly93d3cue0VOVn1wYXlwYWwuY29tL3NtYXJ0L2J1dHRvbnMvcHJlbG9hZFwiO1xuXG5FeHRlbmRlZFByb21pc2Uuc3VwcHJlc3NVbmhhbmRsZWRQcm9taXNlTWVzc2FnZSA9IHRydWU7XG5cbi8qKlxuICogUGF5UGFsIENoZWNrb3V0IHRva2VuaXplZCBwYXlsb2FkLiBSZXR1cm5lZCBpbiB7QGxpbmsgUGF5UGFsQ2hlY2tvdXQjdG9rZW5pemVQYXltZW50fSdzIGNhbGxiYWNrIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGBkYXRhYC5cbiAqIEB0eXBlZGVmIHtvYmplY3R9IFBheVBhbENoZWNrb3V0fnRva2VuaXplUGF5bG9hZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5vbmNlIFRoZSBwYXltZW50IG1ldGhvZCBub25jZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSBwYXltZW50IG1ldGhvZCB0eXBlLCBhbHdheXMgYFBheVBhbEFjY291bnRgLlxuICogQHByb3BlcnR5IHtvYmplY3R9IGRldGFpbHMgQWRkaXRpb25hbCBQYXlQYWwgYWNjb3VudCBkZXRhaWxzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuZW1haWwgVXNlcidzIGVtYWlsIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5wYXllcklkIFVzZXIncyBwYXllciBJRCwgdGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciBlYWNoIFBheVBhbCBhY2NvdW50LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuZmlyc3ROYW1lIFVzZXIncyBnaXZlbiBuYW1lLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMubGFzdE5hbWUgVXNlcidzIHN1cm5hbWUuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGRldGFpbHMuY291bnRyeUNvZGUgVXNlcidzIDIgY2hhcmFjdGVyIGNvdW50cnkgY29kZS5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gZGV0YWlscy5waG9uZSBVc2VyJ3MgcGhvbmUgbnVtYmVyIChlLmcuIDU1NS04NjctNTMwOSkuXG4gKiBAcHJvcGVydHkgez9vYmplY3R9IGRldGFpbHMuc2hpcHBpbmdBZGRyZXNzIFVzZXIncyBzaGlwcGluZyBhZGRyZXNzIGRldGFpbHMsIG9ubHkgYXZhaWxhYmxlIGlmIHNoaXBwaW5nIGFkZHJlc3MgaXMgZW5hYmxlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLnNoaXBwaW5nQWRkcmVzcy5yZWNpcGllbnROYW1lIFJlY2lwaWVudCBvZiBwb3N0YWdlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuc2hpcHBpbmdBZGRyZXNzLmxpbmUxIFN0cmVldCBudW1iZXIgYW5kIG5hbWUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5zaGlwcGluZ0FkZHJlc3MubGluZTIgRXh0ZW5kZWQgYWRkcmVzcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLnNoaXBwaW5nQWRkcmVzcy5jaXR5IENpdHkgb3IgbG9jYWxpdHkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5zaGlwcGluZ0FkZHJlc3Muc3RhdGUgU3RhdGUgb3IgcmVnaW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuc2hpcHBpbmdBZGRyZXNzLnBvc3RhbENvZGUgUG9zdGFsIGNvZGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5zaGlwcGluZ0FkZHJlc3MuY291bnRyeUNvZGUgMiBjaGFyYWN0ZXIgY291bnRyeSBjb2RlIChlLmcuIFVTKS5cbiAqIEBwcm9wZXJ0eSB7P29iamVjdH0gZGV0YWlscy5iaWxsaW5nQWRkcmVzcyBVc2VyJ3MgYmlsbGluZyBhZGRyZXNzIGRldGFpbHMuXG4gKiBOb3QgYXZhaWxhYmxlIHRvIGFsbCBtZXJjaGFudHM7IFtjb250YWN0IHN1cHBvcnRdKGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vYnJhaW50cmVlL2hlbHApIGZvciBkZXRhaWxzIG9uIGVsaWdpYmlsaXR5IGFuZCBlbmFibGluZyB0aGlzIGZlYXR1cmUuXG4gKiBBbHRlcm5hdGl2ZWx5LCBzZWUgYHNoaXBwaW5nQWRkcmVzc2AgYWJvdmUgYXMgYW4gYXZhaWxhYmxlIGNsaWVudCBvcHRpb24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5iaWxsaW5nQWRkcmVzcy5saW5lMSBTdHJlZXQgbnVtYmVyIGFuZCBuYW1lLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuYmlsbGluZ0FkZHJlc3MubGluZTIgRXh0ZW5kZWQgYWRkcmVzcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmJpbGxpbmdBZGRyZXNzLmNpdHkgQ2l0eSBvciBsb2NhbGl0eS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmJpbGxpbmdBZGRyZXNzLnN0YXRlIFN0YXRlIG9yIHJlZ2lvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmJpbGxpbmdBZGRyZXNzLnBvc3RhbENvZGUgUG9zdGFsIGNvZGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5iaWxsaW5nQWRkcmVzcy5jb3VudHJ5Q29kZSAyIGNoYXJhY3RlciBjb3VudHJ5IGNvZGUgKGUuZy4gVVMpLlxuICogQHByb3BlcnR5IHs/b2JqZWN0fSBjcmVkaXRGaW5hbmNpbmdPZmZlcmVkIFRoaXMgcHJvcGVydHkgd2lsbCBvbmx5IGJlIHByZXNlbnQgd2hlbiB0aGUgY3VzdG9tZXIgcGF5cyB3aXRoIFBheVBhbCBDcmVkaXQuXG4gKiBAcHJvcGVydHkge29iamVjdH0gY3JlZGl0RmluYW5jaW5nT2ZmZXJlZC50b3RhbENvc3QgVGhpcyBpcyB0aGUgZXN0aW1hdGVkIHRvdGFsIHBheW1lbnQgYW1vdW50IGluY2x1ZGluZyBpbnRlcmVzdCBhbmQgZmVlcyB0aGUgdXNlciB3aWxsIHBheSBkdXJpbmcgdGhlIGxpZmV0aW1lIG9mIHRoZSBsb2FuLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNyZWRpdEZpbmFuY2luZ09mZmVyZWQudG90YWxDb3N0LnZhbHVlIEFuIGFtb3VudCBkZWZpbmVkIGJ5IFtJU08gNDIxN10oaHR0cHM6Ly93d3cuaXNvLm9yZy9pc28vaG9tZS9zdGFuZGFyZHMvY3VycmVuY3lfY29kZXMuaHRtKSBmb3IgdGhlIGdpdmVuIGN1cnJlbmN5LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNyZWRpdEZpbmFuY2luZ09mZmVyZWQudG90YWxDb3N0LmN1cnJlbmN5IDMgbGV0dGVyIGN1cnJlbmN5IGNvZGUgYXMgZGVmaW5lZCBieSBbSVNPIDQyMTddKGh0dHBzOi8vd3d3Lmlzby5vcmcvaXNvL2hvbWUvc3RhbmRhcmRzL2N1cnJlbmN5X2NvZGVzLmh0bSkuXG4gKiBAcHJvcGVydHkge251bWJlcn0gY3JlZGl0RmluYW5jaW5nT2ZmZXJlZC50ZXJtIExlbmd0aCBvZiBmaW5hbmNpbmcgdGVybXMgaW4gbW9udGhzLlxuICogQHByb3BlcnR5IHtvYmplY3R9IGNyZWRpdEZpbmFuY2luZ09mZmVyZWQubW9udGhseVBheW1lbnQgVGhpcyBpcyB0aGUgZXN0aW1hdGVkIGFtb3VudCBwZXIgbW9udGggdGhhdCB0aGUgY3VzdG9tZXIgd2lsbCBuZWVkIHRvIHBheSBpbmNsdWRpbmcgZmVlcyBhbmQgaW50ZXJlc3QuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY3JlZGl0RmluYW5jaW5nT2ZmZXJlZC5tb250aGx5UGF5bWVudC52YWx1ZSBBbiBhbW91bnQgZGVmaW5lZCBieSBbSVNPIDQyMTddKGh0dHBzOi8vd3d3Lmlzby5vcmcvaXNvL2hvbWUvc3RhbmRhcmRzL2N1cnJlbmN5X2NvZGVzLmh0bSkgZm9yIHRoZSBnaXZlbiBjdXJyZW5jeS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjcmVkaXRGaW5hbmNpbmdPZmZlcmVkLm1vbnRobHlQYXltZW50LmN1cnJlbmN5IDMgbGV0dGVyIGN1cnJlbmN5IGNvZGUgYXMgZGVmaW5lZCBieSBbSVNPIDQyMTddKGh0dHBzOi8vd3d3Lmlzby5vcmcvaXNvL2hvbWUvc3RhbmRhcmRzL2N1cnJlbmN5X2NvZGVzLmh0bSkuXG4gKiBAcHJvcGVydHkge29iamVjdH0gY3JlZGl0RmluYW5jaW5nT2ZmZXJlZC50b3RhbEludGVyZXN0IEVzdGltYXRlZCBpbnRlcmVzdCBvciBmZWVzIGFtb3VudCB0aGUgcGF5ZXIgd2lsbCBoYXZlIHRvIHBheSBkdXJpbmcgdGhlIGxpZmV0aW1lIG9mIHRoZSBsb2FuLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNyZWRpdEZpbmFuY2luZ09mZmVyZWQudG90YWxJbnRlcmVzdC52YWx1ZSBBbiBhbW91bnQgZGVmaW5lZCBieSBbSVNPIDQyMTddKGh0dHBzOi8vd3d3Lmlzby5vcmcvaXNvL2hvbWUvc3RhbmRhcmRzL2N1cnJlbmN5X2NvZGVzLmh0bSkgZm9yIHRoZSBnaXZlbiBjdXJyZW5jeS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjcmVkaXRGaW5hbmNpbmdPZmZlcmVkLnRvdGFsSW50ZXJlc3QuY3VycmVuY3kgMyBsZXR0ZXIgY3VycmVuY3kgY29kZSBhcyBkZWZpbmVkIGJ5IFtJU08gNDIxN10oaHR0cHM6Ly93d3cuaXNvLm9yZy9pc28vaG9tZS9zdGFuZGFyZHMvY3VycmVuY3lfY29kZXMuaHRtKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY3JlZGl0RmluYW5jaW5nT2ZmZXJlZC5wYXllckFjY2VwdGFuY2UgU3RhdHVzIG9mIHdoZXRoZXIgdGhlIGN1c3RvbWVyIHVsdGltYXRlbHkgd2FzIGFwcHJvdmVkIGZvciBhbmQgY2hvc2UgdG8gbWFrZSB0aGUgcGF5bWVudCB1c2luZyB0aGUgYXBwcm92ZWQgaW5zdGFsbG1lbnQgY3JlZGl0LlxuICogQHByb3BlcnR5IHtib29sZWFufSBjcmVkaXRGaW5hbmNpbmdPZmZlcmVkLmNhcnRBbW91bnRJbW11dGFibGUgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNhcnQgYW1vdW50IGlzIGVkaXRhYmxlIGFmdGVyIHBheWVyJ3MgYWNjZXB0YW5jZSBvbiBQYXlQYWwgc2lkZS5cbiAqL1xuXG4vKipcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgc2VlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9wYXlwYWwtY2hlY2tvdXQuY3JlYXRlfHBheXBhbC1jaGVja291dC5jcmVhdGV9XG4gKiBAY2xhc3NkZXNjIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIFBheVBhbCBDaGVja291dCBjb21wb25lbnQgdGhhdCBjb29yZGluYXRlcyB3aXRoIHRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9kb2NzL2NoZWNrb3V0L2ludGVncmF0ZS8jMi1hZGQtdGhlLXBheXBhbC1zY3JpcHQtdG8teW91ci13ZWItcGFnZXxQYXlQYWwgU0RLfS4gSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgY2FuIGdlbmVyYXRlIHBheW1lbnQgZGF0YSBhbmQgdG9rZW5pemUgYXV0aG9yaXplZCBwYXltZW50cy5cbiAqXG4gKiBBbGwgVUkgKHN1Y2ggYXMgcHJldmVudGluZyBhY3Rpb25zIG9uIHRoZSBwYXJlbnQgcGFnZSB3aGlsZSBhdXRoZW50aWNhdGlvbiBpcyBpbiBwcm9ncmVzcykgaXMgbWFuYWdlZCBieSB0aGUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vZG9jcy9jaGVja291dC9pbnRlZ3JhdGUvIzItYWRkLXRoZS1wYXlwYWwtc2NyaXB0LXRvLXlvdXItd2ViLXBhZ2V8UGF5UGFsIFNES30uIFlvdSBtdXN0IHByb3ZpZGUgeW91ciBQYXlQYWwgYGNsaWVudC1pZGAgYXMgYSBxdWVyeSBwYXJhbWV0ZXIuIFlvdSBjYW4gW3JldHJpZXZlIHRoaXMgdmFsdWUgZnJvbSB0aGUgUGF5UGFsIERhc2hib2FyZF0oaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9kb2NzL2NoZWNrb3V0L2ludGVncmF0ZS8jMS1nZXQtcGF5cGFsLXJlc3QtYXBpLWNyZWRlbnRpYWxzKS5cbiAqIEBkZXNjcmlwdGlvbiA8c3Ryb25nPkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gVXNlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9wYXlwYWwtY2hlY2tvdXQuY3JlYXRlfGJyYWludHJlZS13ZWIucGF5cGFsLWNoZWNrb3V0LmNyZWF0ZX0gaW5zdGVhZC48L3N0cm9uZz5cbiAqXG4gKiAjIyMjIEludGVncmF0ZSBDaGVja291dCBGbG93IHdpdGggUGF5UGFsIFNES1xuICpcbiAqIFlvdSBtdXN0IGhhdmUgW1BheVBhbCdzIHNjcmlwdCwgY29uZmlndXJlZCB3aXRoIHZhcmlvdXMgcXVlcnkgcGFyYW1ldGVyc10oaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9kb2NzL2NoZWNrb3V0L2ludGVncmF0ZS8jMi1hZGQtdGhlLXBheXBhbC1zY3JpcHQtdG8teW91ci13ZWItcGFnZSksIGxvYWRlZCBvbiB5b3VyIHBhZ2U6XG4gKlxuICogYGBgaHRtbFxuICogPHNjcmlwdCBzcmM9XCJodHRwczovL3d3dy5wYXlwYWwuY29tL3Nkay9qcz9jbGllbnQtaWQ9eW91ci1zYW5kYm94LW9yLXByb2QtY2xpZW50LWlkXCI+PC9zY3JpcHQ+XG4gKiA8ZGl2IGlkPVwicGF5cGFsLWJ1dHRvblwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogV2hlbiBwYXNzaW5nIHZhbHVlcyBpbiB0aGUgYGNyZWF0ZVBheW1lbnRgIG1ldGhvZCwgbWFrZSBzdXJlIHRoZXkgbWF0Y2ggdGhlIFtjb3JyZXNwb25kaW5nIHBhcmFtZXRlcnMgaW4gdGhlIHF1ZXJ5IHBhcmFtZXRlcnMgZm9yIHRoZSBQYXlQYWwgU0RLIHNjcmlwdF0oaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9kb2NzL2NoZWNrb3V0L3JlZmVyZW5jZS9jdXN0b21pemUtc2RrLykuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogYnJhaW50cmVlLmNsaWVudC5jcmVhdGUoe1xuICogICBhdXRob3JpemF0aW9uOiAnYXV0aG9yaXphdGlvbidcbiAqIH0pLnRoZW4oZnVuY3Rpb24gKGNsaWVudEluc3RhbmNlKSB7XG4gKiAgIHJldHVybiBicmFpbnRyZWUucGF5cGFsQ2hlY2tvdXQuY3JlYXRlKHtcbiAqICAgICBjbGllbnQ6IGNsaWVudEluc3RhbmNlXG4gKiAgIH0pO1xuICogfSkudGhlbihmdW5jdGlvbiAocGF5cGFsQ2hlY2tvdXRJbnN0YW5jZSkge1xuICogICByZXR1cm4gcGF5cGFsLkJ1dHRvbnMoe1xuICogICAgIGNyZWF0ZU9yZGVyOiBmdW5jdGlvbiAoKSB7XG4gKiAgICAgICByZXR1cm4gcGF5cGFsQ2hlY2tvdXRJbnN0YW5jZS5jcmVhdGVQYXltZW50KHtcbiAqICAgICAgICAgZmxvdzogJ2NoZWNrb3V0JyxcbiAqICAgICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICogICAgICAgICBhbW91bnQ6ICcxMC4wMCcsXG4gKiAgICAgICAgIGludGVudDogJ2NhcHR1cmUnIC8vIHRoaXMgdmFsdWUgbXVzdCBlaXRoZXIgYmUgYGNhcHR1cmVgIG9yIG1hdGNoIHRoZSBpbnRlbnQgcGFzc2VkIGludG8gdGhlIFBheVBhbCBTREsgaW50ZW50IHF1ZXJ5IHBhcmFtZXRlclxuICogICAgICAgICAvLyB5b3VyIG90aGVyIGNyZWF0ZVBheW1lbnQgb3B0aW9ucyBoZXJlXG4gKiAgICAgICB9KTtcbiAqICAgICB9LFxuICpcbiAqICAgICBvbkFwcHJvdmU6IGZ1bmN0aW9uIChkYXRhLCBhY3Rpb25zKSB7XG4gKiAgICAgICAvLyBzb21lIGxvZ2ljIGhlcmUgYmVmb3JlIHRva2VuaXphdGlvbiBoYXBwZW5zIGJlbG93XG4gKiAgICAgICByZXR1cm4gcGF5cGFsQ2hlY2tvdXRJbnN0YW5jZS50b2tlbml6ZVBheW1lbnQoZGF0YSkudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICogICAgICAgICAvLyBTdWJtaXQgcGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlclxuICogICAgICAgfSk7XG4gKiAgICAgfSxcbiAqXG4gKiAgICAgb25DYW5jZWw6IGZ1bmN0aW9uICgpIHtcbiAqICAgICAgIC8vIGhhbmRsZSBjYXNlIHdoZXJlIHVzZXIgY2FuY2Vsc1xuICogICAgIH0sXG4gKlxuICogICAgIG9uRXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgICAgIC8vIGhhbmRsZSBjYXNlIHdoZXJlIGVycm9yIG9jY3Vyc1xuICogICAgIH1cbiAqICAgfSkucmVuZGVyKCcjcGF5cGFsLWJ1dHRvbicpO1xuICogfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICogIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIScsIGVycik7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqICMjIyMgSW50ZWdyYXRlIFZhdWx0IEZsb3cgd2l0aCBQYXlQYWwgU0RLXG4gKlxuICogWW91IG11c3QgaGF2ZSBbUGF5UGFsJ3Mgc2NyaXB0LCBjb25maWd1cmVkIHdpdGggdmFyaW91cyBxdWVyeSBwYXJhbWV0ZXJzXShodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2RvY3MvY2hlY2tvdXQvaW50ZWdyYXRlLyMyLWFkZC10aGUtcGF5cGFsLXNjcmlwdC10by15b3VyLXdlYi1wYWdlKSwgbG9hZGVkIG9uIHlvdXIgcGFnZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8c2NyaXB0IHNyYz1cImh0dHBzOi8vd3d3LnBheXBhbC5jb20vc2RrL2pzP2NsaWVudC1pZD15b3VyLXNhbmRib3gtb3ItcHJvZC1jbGllbnQtaWQmdmF1bHQ9dHJ1ZVwiPjwvc2NyaXB0PlxuICogPGRpdiBpZD1cInBheXBhbC1idXR0b25cIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFdoZW4gcGFzc2luZyB2YWx1ZXMgaW4gdGhlIGBjcmVhdGVQYXltZW50YCBtZXRob2QsIG1ha2Ugc3VyZSB0aGV5IG1hdGNoIHRoZSBbY29ycmVzcG9uZGluZyBwYXJhbWV0ZXJzIGluIHRoZSBxdWVyeSBwYXJhbWV0ZXJzIGZvciB0aGUgUGF5UGFsIFNESyBzY3JpcHRdKGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vZG9jcy9jaGVja291dC9yZWZlcmVuY2UvY3VzdG9taXplLXNkay8pLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGJyYWludHJlZS5jbGllbnQuY3JlYXRlKHtcbiAqICAgYXV0aG9yaXphdGlvbjogJ2F1dGhvcml6YXRpb24nXG4gKiB9KS50aGVuKGZ1bmN0aW9uIChjbGllbnRJbnN0YW5jZSkge1xuICogICByZXR1cm4gYnJhaW50cmVlLnBheXBhbENoZWNrb3V0LmNyZWF0ZSh7XG4gKiAgICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZVxuICogICB9KTtcbiAqIH0pLnRoZW4oZnVuY3Rpb24gKHBheXBhbENoZWNrb3V0SW5zdGFuY2UpIHtcbiAqICAgcmV0dXJuIHBheXBhbC5CdXR0b25zKHtcbiAqICAgICBjcmVhdGVCaWxsaW5nQWdyZWVtZW50OiBmdW5jdGlvbiAoKSB7XG4gKiAgICAgICByZXR1cm4gcGF5cGFsQ2hlY2tvdXRJbnN0YW5jZS5jcmVhdGVQYXltZW50KHtcbiAqICAgICAgICAgZmxvdzogJ3ZhdWx0J1xuICogICAgICAgICAvLyB5b3VyIG90aGVyIGNyZWF0ZVBheW1lbnQgb3B0aW9ucyBoZXJlXG4gKiAgICAgICB9KTtcbiAqICAgICB9LFxuICpcbiAqICAgICBvbkFwcHJvdmU6IGZ1bmN0aW9uIChkYXRhLCBhY3Rpb25zKSB7XG4gKiAgICAgICAvLyBzb21lIGxvZ2ljIGhlcmUgYmVmb3JlIHRva2VuaXphdGlvbiBoYXBwZW5zIGJlbG93XG4gKiAgICAgICByZXR1cm4gcGF5cGFsQ2hlY2tvdXRJbnN0YW5jZS50b2tlbml6ZVBheW1lbnQoZGF0YSkudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICogICAgICAgICAvLyBTdWJtaXQgcGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlclxuICogICAgICAgfSk7XG4gKiAgICAgfSxcbiAqXG4gKiAgICAgb25DYW5jZWw6IGZ1bmN0aW9uICgpIHtcbiAqICAgICAgIC8vIGhhbmRsZSBjYXNlIHdoZXJlIHVzZXIgY2FuY2Vsc1xuICogICAgIH0sXG4gKlxuICogICAgIG9uRXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgICAgIC8vIGhhbmRsZSBjYXNlIHdoZXJlIGVycm9yIG9jY3Vyc1xuICogICAgIH1cbiAqICAgfSkucmVuZGVyKCcjcGF5cGFsLWJ1dHRvbicpO1xuICogfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICogIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIScsIGVycik7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqICMjIyMgSW50ZWdyYXRlIHdpdGggQ2hlY2tvdXQuanMgKGRlcHJlY2F0ZWQgUGF5UGFsIFNESylcbiAqXG4gKiBJZiB5b3UgYXJlIGNyZWF0aW5nIGEgbmV3IFBheVBhbCBpbnRlZ3JhdGlvbiwgcGxlYXNlIGZvbGxvdyB0aGUgcHJldmlvdXMgaW50ZWdyYXRpb24gZ3VpZGUgdG8gdXNlIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIFBheVBhbCBTREsuIFVzZSB0aGlzIGludGVncmF0aW9uIGd1aWRlIG9ubHkgYXMgYSByZWZlcmVuY2UgaWYgeW91IGFyZSBhbHJlYWR5IGludGVncmF0ZWQgd2l0aCBDaGVja291dC5qcy5cbiAqXG4gKiBZb3UgbXVzdCBoYXZlIFBheVBhbCdzIENoZWNrb3V0LmpzIHNjcmlwdCBsb2FkZWQgb24geW91ciBwYWdlLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly93d3cucGF5cGFsb2JqZWN0cy5jb20vYXBpL2NoZWNrb3V0LmpzXCIgZGF0YS12ZXJzaW9uLTQgbG9nLWxldmVsPVwid2FyblwiPjwvc2NyaXB0PlxuICogYGBgXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogYnJhaW50cmVlLmNsaWVudC5jcmVhdGUoe1xuICogICBhdXRob3JpemF0aW9uOiAnYXV0aG9yaXphdGlvbidcbiAqIH0pLnRoZW4oZnVuY3Rpb24gKGNsaWVudEluc3RhbmNlKSB7XG4gKiAgIHJldHVybiBicmFpbnRyZWUucGF5cGFsQ2hlY2tvdXQuY3JlYXRlKHtcbiAqICAgICBjbGllbnQ6IGNsaWVudEluc3RhbmNlXG4gKiAgIH0pO1xuICogfSkudGhlbihmdW5jdGlvbiAocGF5cGFsQ2hlY2tvdXRJbnN0YW5jZSkge1xuICogICByZXR1cm4gcGF5cGFsLkJ1dHRvbi5yZW5kZXIoe1xuICogICAgIGVudjogJ3Byb2R1Y3Rpb24nLCAvLyBvciAnc2FuZGJveCdcbiAqXG4gKiAgICAgcGF5bWVudDogZnVuY3Rpb24gKCkge1xuICogICAgICAgcmV0dXJuIHBheXBhbENoZWNrb3V0SW5zdGFuY2UuY3JlYXRlUGF5bWVudCh7XG4gKiAgICAgICAgIC8vIHlvdXIgY3JlYXRlUGF5bWVudCBvcHRpb25zIGhlcmVcbiAqICAgICAgIH0pO1xuICogICAgIH0sXG4gKlxuICogICAgIG9uQXV0aG9yaXplOiBmdW5jdGlvbiAoZGF0YSwgYWN0aW9ucykge1xuICogICAgICAgLy8gc29tZSBsb2dpYyBoZXJlIGJlZm9yZSB0b2tlbml6YXRpb24gaGFwcGVucyBiZWxvd1xuICogICAgICAgcmV0dXJuIHBheXBhbENoZWNrb3V0SW5zdGFuY2UudG9rZW5pemVQYXltZW50KGRhdGEpLnRoZW4oZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAqICAgICAgICAgLy8gU3VibWl0IHBheWxvYWQubm9uY2UgdG8geW91ciBzZXJ2ZXJcbiAqICAgICAgIH0pO1xuICogICAgIH1cbiAqICAgfSwgJyNwYXlwYWwtYnV0dG9uJyk7XG4gKiB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gKiAgY29uc29sZS5lcnJvcignRXJyb3IhJywgZXJyKTtcbiAqIH0pO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIFBheVBhbENoZWNrb3V0KG9wdGlvbnMpIHtcbiAgdGhpcy5fbWVyY2hhbnRBY2NvdW50SWQgPSBvcHRpb25zLm1lcmNoYW50QWNjb3VudElkO1xuICAvLyBUT0RPIHJlbW92ZSB0aGlzIHJlcXVpcmVtZW50IGZvciBpdCB0byBiZSBvcHQgaW4uXG4gIC8vIFRoaXMgZmVhdHVyZSBpcyBub3QgeWV0IEdBLCBzbyB3ZSdyZSBpbnRlbnRpb25hbGx5IG1ha2luZ1xuICAvLyBpdCBvcHQgaW4gYW5kIG5vdCBwdWJsaWNseSBkb2N1bWVudGluZyBpdCB5ZXQuIE9uY2UgaXQnc1xuICAvLyBHQSwgd2UgY2FuIHJlbW92ZSB0aGUgcmVxdWlyZW1lbnQgdG8gb3B0IGluIHRvIGl0XG4gIHRoaXMuX2F1dG9TZXREYXRhVXNlcklkVG9rZW4gPSBCb29sZWFuKG9wdGlvbnMuYXV0b1NldERhdGFVc2VySWRUb2tlbik7XG59XG5cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5faW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBjb25maWc7XG5cbiAgaWYgKG9wdGlvbnMuY2xpZW50KSB7XG4gICAgY29uZmlnID0gb3B0aW9ucy5jbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpO1xuICAgIHRoaXMuX2F1dGhvcml6YXRpb25JbmZvcm1hdGlvbiA9IHtcbiAgICAgIGZpbmdlcnByaW50OiBjb25maWcuYXV0aG9yaXphdGlvbkZpbmdlcnByaW50LFxuICAgICAgZW52aXJvbm1lbnQ6IGNvbmZpZy5nYXRld2F5Q29uZmlndXJhdGlvbi5lbnZpcm9ubWVudCxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNyZWF0ZUF1dGhvcml6YXRpb25EYXRhKG9wdGlvbnMuYXV0aG9yaXphdGlvbik7XG4gICAgdGhpcy5fYXV0aG9yaXphdGlvbkluZm9ybWF0aW9uID0ge1xuICAgICAgZmluZ2VycHJpbnQ6IGNvbmZpZy5hdHRycy5hdXRob3JpemF0aW9uRmluZ2VycHJpbnQsXG4gICAgICBlbnZpcm9ubWVudDogY29uZmlnLmVudmlyb25tZW50LFxuICAgIH07XG4gIH1cblxuICB0aGlzLl9jbGllbnRQcm9taXNlID0gY3JlYXRlRGVmZXJyZWRDbGllbnRcbiAgICAuY3JlYXRlKHtcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICBkZWJ1Zzogb3B0aW9ucy5kZWJ1ZyxcbiAgICAgIGFzc2V0c1VybDogY3JlYXRlQXNzZXRzVXJsLmNyZWF0ZShvcHRpb25zLmF1dGhvcml6YXRpb24pLFxuICAgICAgbmFtZTogXCJQYXlQYWwgQ2hlY2tvdXRcIixcbiAgICB9KVxuICAgIC50aGVuKFxuICAgICAgZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICB0aGlzLl9jb25maWd1cmF0aW9uID0gY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKTtcblxuICAgICAgICAvLyB3ZSBza2lwIHRoZXNlIGNoZWNrcyBpZiBhIG1lcmNoYW50IGFjY291bnQgaWQgaXNcbiAgICAgICAgLy8gcGFzc2VkIGluLCBiZWNhdXNlIHRoZSBkZWZhdWx0IG1lcmNoYW50IGFjY291bnRcbiAgICAgICAgLy8gbWF5IG5vdCBoYXZlIHBheXBhbCBlbmFibGVkXG4gICAgICAgIGlmICghdGhpcy5fbWVyY2hhbnRBY2NvdW50SWQpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX2NvbmZpZ3VyYXRpb24uZ2F0ZXdheUNvbmZpZ3VyYXRpb24ucGF5cGFsRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0dXBFcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuUEFZUEFMX05PVF9FTkFCTEVEKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy5fY29uZmlndXJhdGlvbi5nYXRld2F5Q29uZmlndXJhdGlvbi5wYXlwYWxcbiAgICAgICAgICAgICAgLmVudmlyb25tZW50Tm9OZXR3b3JrID09PSB0cnVlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXR1cEVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKFxuICAgICAgICAgICAgICBlcnJvcnMuUEFZUEFMX1NBTkRCT1hfQUNDT1VOVF9OT1RfTElOS0VEXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9zZXR1cEVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHRoaXMuX3NldHVwRXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChjbGllbnQsIFwicGF5cGFsLWNoZWNrb3V0LmluaXRpYWxpemVkXCIpO1xuICAgICAgICB0aGlzLl9mcmFtZVNlcnZpY2VQcm9taXNlID0gdGhpcy5fc2V0dXBGcmFtZVNlcnZpY2UoY2xpZW50KTtcblxuICAgICAgICByZXR1cm4gY2xpZW50O1xuICAgICAgfS5iaW5kKHRoaXMpXG4gICAgKTtcblxuICAvLyBpZiBjbGllbnQgd2FzIHBhc3NlZCBpbiwgbGV0IGNvbmZpZyBjaGVja3MgaGFwcGVuIGJlZm9yZVxuICAvLyByZXNvbHZpbmcgdGhlIGluc3RhbmNlLiBPdGhlcndpc2UsIGp1c3QgcmVzb2x2ZSB0aGUgaW5zdGFuY2VcbiAgaWYgKG9wdGlvbnMuY2xpZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudFByb21pc2UudGhlbihcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LmJpbmQodGhpcylcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcbn07XG5cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5fc2V0dXBGcmFtZVNlcnZpY2UgPSBmdW5jdGlvbiAoY2xpZW50KSB7XG4gIHZhciBmcmFtZVNlcnZpY2VQcm9taXNlID0gbmV3IEV4dGVuZGVkUHJvbWlzZSgpO1xuICB2YXIgY29uZmlnID0gY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKTtcbiAgdmFyIHRpbWVvdXRSZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KGNsaWVudCwgXCJwYXlwYWwtY2hlY2tvdXQuZnJhbWUtc2VydmljZS50aW1lZC1vdXRcIik7XG4gICAgZnJhbWVTZXJ2aWNlUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgQnJhaW50cmVlRXJyb3IoXG4gICAgICAgIGVycm9ycy5QQVlQQUxfU1RBUlRfVkFVTFRfSU5JVElBVEVEX0NIRUNLT1VUX1NFVFVQX0ZBSUxFRFxuICAgICAgKVxuICAgICk7XG4gIH0sIElOVEVHUkFUSU9OX1RJTUVPVVRfTVMpO1xuXG4gIHRoaXMuX2Fzc2V0c1VybCA9XG4gICAgY29uZmlnLmdhdGV3YXlDb25maWd1cmF0aW9uLnBheXBhbC5hc3NldHNVcmwgKyBcIi93ZWIvXCIgKyBWRVJTSU9OO1xuICB0aGlzLl9pc0RlYnVnID0gY29uZmlnLmlzRGVidWc7XG4gIC8vIE5vdGU6IHRoaXMgaXMgdXNpbmcgdGhlIHN0YXRpYyBsYW5kaW5nIGZyYW1lIHRoYXQgdGhlIGRlcHJlY2F0ZWQgUGF5UGFsIGNvbXBvbmVudCBidWlsZHMgYW5kIHVzZXNcbiAgdGhpcy5fbG9hZGluZ0ZyYW1lVXJsID1cbiAgICB0aGlzLl9hc3NldHNVcmwgK1xuICAgIFwiL2h0bWwvcGF5cGFsLWxhbmRpbmctZnJhbWVcIiArXG4gICAgdXNlTWluKHRoaXMuX2lzRGVidWcpICtcbiAgICBcIi5odG1sXCI7XG5cbiAgZnJhbWVTZXJ2aWNlLmNyZWF0ZShcbiAgICB7XG4gICAgICBuYW1lOiBcImJyYWludHJlZXBheXBhbGxhbmRpbmdcIixcbiAgICAgIGRpc3BhdGNoRnJhbWVVcmw6XG4gICAgICAgIHRoaXMuX2Fzc2V0c1VybCArXG4gICAgICAgIFwiL2h0bWwvZGlzcGF0Y2gtZnJhbWVcIiArXG4gICAgICAgIHVzZU1pbih0aGlzLl9pc0RlYnVnKSArXG4gICAgICAgIFwiLmh0bWxcIixcbiAgICAgIG9wZW5GcmFtZVVybDogdGhpcy5fbG9hZGluZ0ZyYW1lVXJsLFxuICAgIH0sXG4gICAgZnVuY3Rpb24gKHNlcnZpY2UpIHtcbiAgICAgIHRoaXMuX2ZyYW1lU2VydmljZSA9IHNlcnZpY2U7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dFJlZik7XG5cbiAgICAgIGZyYW1lU2VydmljZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0uYmluZCh0aGlzKVxuICApO1xuXG4gIHJldHVybiBmcmFtZVNlcnZpY2VQcm9taXNlO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBQYXlQYWxDaGVja291dH5saW5lSXRlbVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHF1YW50aXR5IE51bWJlciBvZiB1bml0cyBvZiB0aGUgaXRlbSBwdXJjaGFzZWQuIFRoaXMgdmFsdWUgbXVzdCBiZSBhIHdob2xlIG51bWJlciBhbmQgY2FuJ3QgYmUgbmVnYXRpdmUgb3IgemVyby5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1bml0QW1vdW50IFBlci11bml0IHByaWNlIG9mIHRoZSBpdGVtLiBDYW4gaW5jbHVkZSB1cCB0byAyIGRlY2ltYWwgcGxhY2VzLiBUaGlzIHZhbHVlIGNhbid0IGJlIG5lZ2F0aXZlIG9yIHplcm8uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSBJdGVtIG5hbWUuIE1heGltdW0gMTI3IGNoYXJhY3RlcnMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30ga2luZCBJbmRpY2F0ZXMgd2hldGhlciB0aGUgbGluZSBpdGVtIGlzIGEgZGViaXQgKHNhbGUpIG9yIGNyZWRpdCAocmVmdW5kKSB0byB0aGUgY3VzdG9tZXIuIEFjY2VwdGVkIHZhbHVlczogYGRlYml0YCBhbmQgYGNyZWRpdGAuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHVuaXRUYXhBbW91bnQgUGVyLXVuaXQgdGF4IHByaWNlIG9mIHRoZSBpdGVtLiBDYW4gaW5jbHVkZSB1cCB0byAyIGRlY2ltYWwgcGxhY2VzLiBUaGlzIHZhbHVlIGNhbid0IGJlIG5lZ2F0aXZlIG9yIHplcm8uXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGRlc2NyaXB0aW9uIEl0ZW0gZGVzY3JpcHRpb24uIE1heGltdW0gMTI3IGNoYXJhY3RlcnMuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHByb2R1Y3RDb2RlIFByb2R1Y3Qgb3IgVVBDIGNvZGUgZm9yIHRoZSBpdGVtLiBNYXhpbXVtIDEyNyBjaGFyYWN0ZXJzLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSB1cmwgVGhlIFVSTCB0byBwcm9kdWN0IGluZm9ybWF0aW9uLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gUGF5UGFsQ2hlY2tvdXR+c2hpcHBpbmdPcHRpb25cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZCBBIHVuaXF1ZSBJRCB0aGF0IGlkZW50aWZpZXMgYSBwYXllci1zZWxlY3RlZCBzaGlwcGluZyBvcHRpb24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbGFiZWwgQSBkZXNjcmlwdGlvbiB0aGF0IHRoZSBwYXllciBzZWVzLCB3aGljaCBoZWxwcyB0aGVtIGNob29zZSBhbiBhcHByb3ByaWF0ZSBzaGlwcGluZyBvcHRpb24uIEZvciBleGFtcGxlLCBgRnJlZSBTaGlwcGluZ2AsIGBVU1BTIFByaW9yaXR5IFNoaXBwaW5nYCwgYEV4cMOpZGl0aW9uIHByaW9yaXRhaXJlIFVTUFNgLCBvciBgVVNQUyB5xY11eGnEgW4gZsSBIGh1w7JgLiBMb2NhbGl6ZSB0aGlzIGRlc2NyaXB0aW9uIHRvIHRoZSBwYXllcidzIGxvY2FsZS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2VsZWN0ZWQgSWYgYHNlbGVjdGVkID0gdHJ1ZWAgaXMgc3BlY2lmaWVkIGFzIHBhcnQgb2YgdGhlIEFQSSByZXF1ZXN0IGl0IHJlcHJlc2VudHMgdGhlIHNoaXBwaW5nIG9wdGlvbiB0aGF0IHRoZSBwYXllZS9tZXJjaGFudCBleHBlY3RzIHRvIGJlIHByZS1zZWxlY3RlZCBmb3IgdGhlIHBheWVyIHdoZW4gdGhleSBmaXJzdCB2aWV3IHRoZSBzaGlwcGluZyBvcHRpb25zIHdpdGhpbiB0aGUgUGF5UGFsIGNoZWNrb3V0IGV4cGVyaWVuY2UuIEFzIHBhcnQgb2YgdGhlIHJlc3BvbnNlIGlmIGEgc2hpcHBpbmcgb3B0aW9uIGhhcyBgc2VsZWN0ZWQgPSB0cnVlYCBpdCByZXByZXNlbnRzIHRoZSBzaGlwcGluZyBvcHRpb24gdGhhdCB0aGUgcGF5ZXIgc2VsZWN0ZWQgZHVyaW5nIHRoZSBjb3Vyc2Ugb2YgY2hlY2tvdXQgd2l0aCBQYXlQYWwuIE9ubHkgMSBgc2hpcHBpbmdPcHRpb25gIGNhbiBiZSBzZXQgdG8gYHNlbGVjdGVkID0gdHJ1ZWAuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgbWV0aG9kIGJ5IHdoaWNoIHRoZSBwYXllciB3YW50cyB0byBnZXQgdGhlaXIgaXRlbXMuIFRoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICogKiBgU0hJUFBJTkdgIC0gVGhlIHBheWVyIGludGVuZHMgdG8gcmVjZWl2ZSB0aGUgaXRlbXMgYXQgYSBzcGVjaWZpZWQgYWRkcmVzcy5cbiAqICogYFBJQ0tVUGAgLSBUaGUgcGF5ZXIgaW50ZW5kcyB0byBwaWNrIHVwIHRoZSBpdGVtcyBhdCBhIHNwZWNpZmllZCBhZGRyZXNzLiBGb3IgZXhhbXBsZSwgYSBzdG9yZSBhZGRyZXNzLlxuICogQHByb3BlcnR5IHtvYmplY3R9IGFtb3VudCBUaGUgc2hpcHBpbmcgY29zdCBmb3IgdGhlIHNlbGVjdGVkIG9wdGlvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhbW91bnQuY3VycmVuY3kgVGhlIHRocmVlLWNoYXJhY3RlciBJU08tNDIxNyBjdXJyZW5jeSBjb2RlLiBQYXlQYWwgZG9lcyBub3Qgc3VwcG9ydCBhbGwgY3VycmVuY2llcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhbW91bnQudmFsdWUgVGhlIGFtb3VudCB0aGUgc2hpcHBpbmcgb3B0aW9uIHdpbGwgY29zdC4gSW5jbHVkZXMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGlnaXRzIGFmdGVyIGRlY2ltYWwgc2VwYXJhdG9yIGZvciB0aGUgSVNPLTQyMTcgY3VycmVuY3kgY29kZS5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBQYXlQYWwgcGF5bWVudCBJRCBvciBiaWxsaW5nIHRva2VuIHVzaW5nIHRoZSBnaXZlbiBvcHRpb25zLiBUaGlzIGlzIG1lYW50IHRvIGJlIHBhc3NlZCB0byB0aGUgUGF5UGFsIEpTIFNESy5cbiAqIFdoZW4gYSB7QGxpbmsgY2FsbGJhY2t9IGlzIGRlZmluZWQsIHRoZSBmdW5jdGlvbiByZXR1cm5zIHVuZGVmaW5lZCBhbmQgaW52b2tlcyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgaWQgdG8gYmUgdXNlZCB3aXRoIHRoZSBQYXlQYWwgSlMgU0RLLiBPdGhlcndpc2UsIGl0IHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgaWQuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBbGwgb3B0aW9ucyBmb3IgdGhlIFBheVBhbENoZWNrb3V0IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmZsb3cgU2V0IHRvICdjaGVja291dCcgZm9yIG9uZS10aW1lIHBheW1lbnQgZmxvdywgb3IgJ3ZhdWx0JyBmb3IgVmF1bHQgZmxvdy4gSWYgJ3ZhdWx0JyBpcyB1c2VkIHdpdGggYSBjbGllbnQgdG9rZW4gZ2VuZXJhdGVkIHdpdGggYSBjdXN0b21lciBJRCwgdGhlIFBheVBhbCBhY2NvdW50IHdpbGwgYmUgYWRkZWQgdG8gdGhhdCBjdXN0b21lciBhcyBhIHNhdmVkIHBheW1lbnQgbWV0aG9kLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmludGVudD1hdXRob3JpemVdXG4gKiAqIGBhdXRob3JpemVgIC0gU3VibWl0cyB0aGUgdHJhbnNhY3Rpb24gZm9yIGF1dGhvcml6YXRpb24gYnV0IG5vdCBzZXR0bGVtZW50LlxuICogKiBgb3JkZXJgIC0gVmFsaWRhdGVzIHRoZSB0cmFuc2FjdGlvbiB3aXRob3V0IGFuIGF1dGhvcml6YXRpb24gKGkuZS4gd2l0aG91dCBob2xkaW5nIGZ1bmRzKS4gVXNlZnVsIGZvciBhdXRob3JpemluZyBhbmQgY2FwdHVyaW5nIGZ1bmRzIHVwIHRvIDkwIGRheXMgYWZ0ZXIgdGhlIG9yZGVyIGhhcyBiZWVuIHBsYWNlZC4gT25seSBhdmFpbGFibGUgZm9yIENoZWNrb3V0IGZsb3cuXG4gKiAqIGBjYXB0dXJlYCAtIFBheW1lbnQgd2lsbCBiZSBpbW1lZGlhdGVseSBzdWJtaXR0ZWQgZm9yIHNldHRsZW1lbnQgdXBvbiBjcmVhdGluZyBhIHRyYW5zYWN0aW9uLiBgc2FsZWAgY2FuIGJlIHVzZWQgYXMgYW4gYWxpYXMgZm9yIHRoaXMgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm9mZmVyQ3JlZGl0PWZhbHNlXSBPZmZlcnMgUGF5UGFsIENyZWRpdCBhcyB0aGUgZGVmYXVsdCBmdW5kaW5nIGluc3RydW1lbnQgZm9yIHRoZSB0cmFuc2FjdGlvbi4gSWYgdGhlIGN1c3RvbWVyIGlzbid0IHByZS1hcHByb3ZlZCBmb3IgUGF5UGFsIENyZWRpdCwgdGhleSB3aWxsIGJlIHByb21wdGVkIHRvIGFwcGx5IGZvciBpdC5cbiAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpfSBbb3B0aW9ucy5hbW91bnRdIFRoZSBhbW91bnQgb2YgdGhlIHRyYW5zYWN0aW9uLiBSZXF1aXJlZCB3aGVuIHVzaW5nIHRoZSBDaGVja291dCBmbG93LiBTaG91bGQgbm90IGluY2x1ZGUgc2hpcHBpbmcgY29zdC5cbiAqICogU3VwcG9ydHMgdXAgdG8gMiBkaWdpdHMgYWZ0ZXIgdGhlIGRlY2ltYWwgcG9pbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jdXJyZW5jeV0gVGhlIGN1cnJlbmN5IGNvZGUgb2YgdGhlIGFtb3VudCwgc3VjaCBhcyAnVVNEJy4gUmVxdWlyZWQgd2hlbiB1c2luZyB0aGUgQ2hlY2tvdXQgZmxvdy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kaXNwbGF5TmFtZV0gVGhlIG1lcmNoYW50IG5hbWUgZGlzcGxheWVkIGluc2lkZSBvZiB0aGUgUGF5UGFsIGxpZ2h0Ym94OyBkZWZhdWx0cyB0byB0aGUgY29tcGFueSBuYW1lIG9uIHlvdXIgQnJhaW50cmVlIGFjY291bnRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVxdWVzdEJpbGxpbmdBZ3JlZW1lbnRdIElmIGB0cnVlYCBhbmQgYGZsb3cgPSBjaGVja291dGAsIHRoZSBjdXN0b21lciB3aWxsIGJlIHByb21wdGVkIHRvIGNvbnNlbnQgdG8gYSBiaWxsaW5nIGFncmVlbWVudCBkdXJpbmcgdGhlIGNoZWNrb3V0IGZsb3cuIFRoaXMgdmFsdWUgaXMgaWdub3JlZCB3aGVuIGBmbG93ID0gdmF1bHRgLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmJpbGxpbmdBZ3JlZW1lbnREZXRhaWxzXSBXaGVuIGByZXF1ZXN0QmlsbGluZ0FncmVlbWVudCA9IHRydWVgLCBhbGxvd3MgZm9yIGRldGFpbHMgdG8gYmUgc2V0IGZvciB0aGUgYmlsbGluZyBhZ3JlZW1lbnQgcG9ydGlvbiBvZiB0aGUgZmxvdy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5iaWxsaW5nQWdyZWVtZW50RGV0YWlscy5kZXNjcmlwdGlvbl0gRGVzY3JpcHRpb24gb2YgdGhlIGJpbGxpbmcgYWdyZWVtZW50IHRvIGRpc3BsYXkgdG8gdGhlIGN1c3RvbWVyLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhdWx0SW5pdGlhdGVkQ2hlY2tvdXRQYXltZW50TWV0aG9kVG9rZW5dIFVzZSB0aGUgcGF5bWVudCBtZXRob2Qgbm9uY2UgcmVwcmVzZW50aW5nIGEgUGF5UGFsIGFjY291bnQgd2l0aCBhIEJpbGxpbmcgQWdyZWVtZW50IElEIHRvIGNyZWF0ZSB0aGUgcGF5bWVudCBhbmQgcmVkaXJlY3QgdGhlIGN1c3RvbWVyIHRvIHNlbGVjdCBhIG5ldyBmaW5hbmNpYWwgaW5zdHJ1bWVudC4gVGhpcyBvcHRpb24gaXMgb25seSBhcHBsaWNhYmxlIHRvIHRoZSBgY2hlY2tvdXRgIGZsb3cuXG4gKiBAcGFyYW0ge3NoaXBwaW5nT3B0aW9uW119IFtvcHRpb25zLnNoaXBwaW5nT3B0aW9uc10gTGlzdCBvZiBzaGlwcGluZyBvcHRpb25zIG9mZmVyZWQgYnkgdGhlIHBheWVlIG9yIG1lcmNoYW50IHRvIHRoZSBwYXllciB0byBzaGlwIG9yIHBpY2sgdXAgdGhlaXIgaXRlbXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmVuYWJsZVNoaXBwaW5nQWRkcmVzcz1mYWxzZV0gUmV0dXJucyBhIHNoaXBwaW5nIGFkZHJlc3Mgb2JqZWN0IGluIHtAbGluayBQYXlQYWwjdG9rZW5pemV9LlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlXSBBbGxvd3MgeW91IHRvIHBhc3MgYSBzaGlwcGluZyBhZGRyZXNzIHlvdSBoYXZlIGFscmVhZHkgY29sbGVjdGVkIGludG8gdGhlIFBheVBhbCBwYXltZW50IGZsb3cuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3NPdmVycmlkZS5saW5lMSBTdHJlZXQgYWRkcmVzcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3NPdmVycmlkZS5saW5lMl0gU3RyZWV0IGFkZHJlc3MgKGV4dGVuZGVkKS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLmNpdHkgQ2l0eS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLnN0YXRlIFN0YXRlLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUucG9zdGFsQ29kZSBQb3N0YWwgY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLmNvdW50cnlDb2RlIENvdW50cnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUucGhvbmVdIFBob25lIG51bWJlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3NPdmVycmlkZS5yZWNpcGllbnROYW1lXSBSZWNpcGllbnQncyBuYW1lLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3NFZGl0YWJsZT10cnVlXSBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB1c2VyIGVkaXRpbmcgb2YgdGhlIHNoaXBwaW5nIGFkZHJlc3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmlsbGluZ0FncmVlbWVudERlc2NyaXB0aW9uXSBVc2UgdGhpcyBvcHRpb24gdG8gc2V0IHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcHJlYXBwcm92ZWQgcGF5bWVudCBhZ3JlZW1lbnQgdmlzaWJsZSB0byBjdXN0b21lcnMgaW4gdGhlaXIgUGF5UGFsIHByb2ZpbGUgZHVyaW5nIFZhdWx0IGZsb3dzLiBNYXggMjU1IGNoYXJhY3RlcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFuZGluZ1BhZ2VUeXBlXSBVc2UgdGhpcyBvcHRpb24gdG8gc3BlY2lmeSB0aGUgUGF5UGFsIHBhZ2UgdG8gZGlzcGxheSB3aGVuIGEgdXNlciBsYW5kcyBvbiB0aGUgUGF5UGFsIHNpdGUgdG8gY29tcGxldGUgdGhlIHBheW1lbnQuXG4gKiAqIGBsb2dpbmAgLSBBIFBheVBhbCBhY2NvdW50IGxvZ2luIHBhZ2UgaXMgdXNlZC5cbiAqICogYGJpbGxpbmdgIC0gQSBub24tUGF5UGFsIGFjY291bnQgbGFuZGluZyBwYWdlIGlzIHVzZWQuXG4gKiBAcGFyYW0ge2xpbmVJdGVtW119IFtvcHRpb25zLmxpbmVJdGVtc10gVGhlIHtAbGluayBQYXlQYWxDaGVja291dH5saW5lSXRlbXxsaW5lIGl0ZW1zfSBmb3IgdGhpcyB0cmFuc2FjdGlvbi4gSXQgY2FuIGluY2x1ZGUgdXAgdG8gMjQ5IGxpbmUgaXRlbXMuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgYSBQYXlQYWwgYHBheW1lbnRJZGAgb3IgYGJpbGxpbmdUb2tlbmAgc3RyaW5nLCBkZXBlbmRpbmcgb24gd2hldGhlciBgb3B0aW9ucy5mbG93YCBpcyBgY2hlY2tvdXRgIG9yIGB2YXVsdGAuIFRoaXMgaXMgYWxzbyB3aGF0IGlzIHJlc29sdmVkIGJ5IHRoZSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICogQGV4YW1wbGVcbiAqIC8vIHRoaXMgcGF5cGFsIG9iamVjdCBpcyBjcmVhdGVkIGJ5IHRoZSBQYXlQYWwgSlMgU0RLXG4gKiAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BheXBhbC9wYXlwYWwtY2hlY2tvdXQtY29tcG9uZW50c1xuICogcGF5cGFsLkJ1dHRvbnMoe1xuICogICBjcmVhdGVPcmRlcjogZnVuY3Rpb24gKCkge1xuICogICAgIC8vIHdoZW4gY3JlYXRlUGF5bWVudCByZXNvbHZlcywgaXQgaXMgYXV0b21hdGljYWxseSBwYXNzZWQgdG8gdGhlIFBheVBhbCBKUyBTREtcbiAqICAgICByZXR1cm4gcGF5cGFsQ2hlY2tvdXRJbnN0YW5jZS5jcmVhdGVQYXltZW50KHtcbiAqICAgICAgIGZsb3c6ICdjaGVja291dCcsXG4gKiAgICAgICBhbW91bnQ6ICcxMC4wMCcsXG4gKiAgICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gKiAgICAgICBpbnRlbnQ6ICdjYXB0dXJlJyAvLyB0aGlzIHZhbHVlIG11c3QgZWl0aGVyIGJlIGBjYXB0dXJlYCBvciBtYXRjaCB0aGUgaW50ZW50IHBhc3NlZCBpbnRvIHRoZSBQYXlQYWwgU0RLIGludGVudCBxdWVyeSBwYXJhbWV0ZXJcbiAqICAgICB9KTtcbiAqICAgfSxcbiAqICAgLy8gQWRkIG90aGVyIG9wdGlvbnMsIGUuZy4gb25BcHByb3ZlZCwgb25DYW5jZWwsIG9uRXJyb3JcbiAqIH0pLnJlbmRlcignI3BheXBhbC1idXR0b24nKTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gc2hpcHBpbmdPcHRpb25zIGFyZSBwYXNzZWQgdG8gY3JlYXRlUGF5bWVudC4gWW91IGNhbiByZXZpZXcgdGhlIHJlc3VsdCBmcm9tIG9uQXV0aG9yaXplIHRvIGRldGVybWluZSB3aGljaCBzaGlwcGluZyBvcHRpb24gaWQgd2FzIHNlbGVjdGVkLlxuICogYGBgamF2YXNjcmlwdFxuICogYnJhaW50cmVlLmNsaWVudC5jcmVhdGUoe1xuICogICBhdXRob3JpemF0aW9uOiAnYXV0aG9yaXphdGlvbidcbiAqIH0pLnRoZW4oZnVuY3Rpb24gKGNsaWVudEluc3RhbmNlKSB7XG4gKiAgIHJldHVybiBicmFpbnRyZWUucGF5cGFsQ2hlY2tvdXQuY3JlYXRlKHtcbiAqICAgICBjbGllbnQ6IGNsaWVudEluc3RhbmNlXG4gKiAgIH0pO1xuICogfSkudGhlbihmdW5jdGlvbiAocGF5cGFsQ2hlY2tvdXRJbnN0YW5jZSkge1xuICogICByZXR1cm4gcGF5cGFsLkJ1dHRvbi5yZW5kZXIoe1xuICogICAgIGVudjogJ3Byb2R1Y3Rpb24nXG4gKlxuICogICAgIHBheW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAqICAgICAgIHJldHVybiBwYXlwYWxDaGVja291dEluc3RhbmNlLmNyZWF0ZVBheW1lbnQoe1xuICogICAgICAgICBmbG93OiAnY2hlY2tvdXQnLFxuICogICAgICAgICBhbW91bnQ6ICcxMC4wMCcsXG4gKiAgICAgICAgIGN1cnJlbmN5OiAnVVNEJyxcbiAqICAgICAgICAgc2hpcHBpbmdPcHRpb25zOiBbXG4gKiAgICAgICAgICAge1xuICogICAgICAgICAgICAgaWQ6ICdVVUlELTknLFxuICogICAgICAgICAgICAgdHlwZTogJ1BJQ0tVUCcsXG4gKiAgICAgICAgICAgICBsYWJlbDogJ1N0b3JlIExvY2F0aW9uIEZpdmUnLFxuICogICAgICAgICAgICAgc2VsZWN0ZWQ6IHRydWUsXG4gKiAgICAgICAgICAgICBhbW91bnQ6IHtcbiAqICAgICAgICAgICAgICAgdmFsdWU6ICcxLjAwJyxcbiAqICAgICAgICAgICAgICAgY3VycmVuY3k6ICdVU0QnXG4gKiAgICAgICAgICAgICB9XG4gKiAgICAgICAgICAgfSxcbiAqICAgICAgICAgICB7XG4gKiAgICAgICAgICAgICBpZDogJ3NoaXBwaW5nLXNwZWVkLWZhc3QnLFxuICogICAgICAgICAgICAgdHlwZTogJ1NISVBQSU5HJyxcbiAqICAgICAgICAgICAgIGxhYmVsOiAnRmFzdCBTaGlwcGluZycsXG4gKiAgICAgICAgICAgICBzZWxlY3RlZDogZmFsc2UsXG4gKiAgICAgICAgICAgICBhbW91bnQ6IHtcbiAqICAgICAgICAgICAgICAgdmFsdWU6ICcxLjAwJyxcbiAqICAgICAgICAgICAgICAgY3VycmVuY3k6ICdVU0QnXG4gKiAgICAgICAgICAgICB9XG4gKiAgICAgICAgICAgfSxcbiAqICAgICAgICAgICB7XG4gKiAgICAgICAgICAgICBpZDogJ3NoaXBwaW5nLXNwZWVkLXNsb3cnLFxuICogICAgICAgICAgICAgdHlwZTogJ1NISVBQSU5HJyxcbiAqICAgICAgICAgICAgIGxhYmVsOiAnU2xvdyBTaGlwcGluZycsXG4gKiAgICAgICAgICAgICBzZWxlY3RlZDogZmFsc2UsXG4gKiAgICAgICAgICAgICBhbW91bnQ6IHtcbiAqICAgICAgICAgICAgICAgdmFsdWU6ICcxLjAwJyxcbiAqICAgICAgICAgICAgICAgY3VycmVuY3k6ICdVU0QnXG4gKiAgICAgICAgICAgICB9XG4gKiAgICAgICAgICAgfVxuICogICAgICAgICBdXG4gKiAgICAgICB9KTtcbiAqICAgICB9LFxuICpcbiAqICAgICBvbkF1dGhvcml6ZTogZnVuY3Rpb24gKGRhdGEsIGFjdGlvbnMpIHtcbiAqICAgICAgIHJldHVybiBwYXlwYWxDaGVja291dEluc3RhbmNlLnRva2VuaXplUGF5bWVudChkYXRhKS50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gKiAgICAgICAgIC8vIFN1Ym1pdCBwYXlsb2FkLm5vbmNlIHRvIHlvdXIgc2VydmVyXG4gKiAgICAgICB9KTtcbiAqICAgICB9XG4gKiAgIH0sICcjcGF5cGFsLWJ1dHRvbicpO1xuICogfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICogIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIScsIGVycik7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5jcmVhdGVQYXltZW50ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zIHx8ICFjb25zdGFudHMuRkxPV19FTkRQT0lOVFMuaGFzT3duUHJvcGVydHkob3B0aW9ucy5mbG93KSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuUEFZUEFMX0ZMT1dfT1BUSU9OX1JFUVVJUkVEKVxuICAgICk7XG4gIH1cblxuICBhbmFseXRpY3Muc2VuZEV2ZW50KHRoaXMuX2NsaWVudFByb21pc2UsIFwicGF5cGFsLWNoZWNrb3V0LmNyZWF0ZVBheW1lbnRcIik7XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZVBheW1lbnRSZXNvdXJjZShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHZhciBmbG93VG9rZW4sIHVybFBhcmFtcztcblxuICAgIGlmIChvcHRpb25zLmZsb3cgPT09IFwiY2hlY2tvdXRcIikge1xuICAgICAgdXJsUGFyYW1zID0gcXVlcnlzdHJpbmcucGFyc2UocmVzcG9uc2UucGF5bWVudFJlc291cmNlLnJlZGlyZWN0VXJsKTtcbiAgICAgIGZsb3dUb2tlbiA9IHVybFBhcmFtcy50b2tlbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZmxvd1Rva2VuID0gcmVzcG9uc2UuYWdyZWVtZW50U2V0dXAudG9rZW5JZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmxvd1Rva2VuO1xuICB9KTtcbn07XG5cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5fY3JlYXRlUGF5bWVudFJlc291cmNlID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNvbmZpZykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBlbmRwb2ludCA9IFwicGF5cGFsX2hlcm1lcy9cIiArIGNvbnN0YW50cy5GTE9XX0VORFBPSU5UU1tvcHRpb25zLmZsb3ddO1xuXG4gIGRlbGV0ZSB0aGlzLmludGVudEZyb21DcmVhdGVQYXltZW50O1xuXG4gIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuICBpZiAob3B0aW9ucy5vZmZlckNyZWRpdCA9PT0gdHJ1ZSkge1xuICAgIGFuYWx5dGljcy5zZW5kRXZlbnQodGhpcy5fY2xpZW50UHJvbWlzZSwgXCJwYXlwYWwtY2hlY2tvdXQuY3JlZGl0Lm9mZmVyZWRcIik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY2xpZW50UHJvbWlzZVxuICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIHJldHVybiBjbGllbnRcbiAgICAgICAgLnJlcXVlc3Qoe1xuICAgICAgICAgIGVuZHBvaW50OiBlbmRwb2ludCxcbiAgICAgICAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgICAgICAgIGRhdGE6IHNlbGYuX2Zvcm1hdFBheW1lbnRSZXNvdXJjZURhdGEob3B0aW9ucywgY29uZmlnKSxcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICBzZWxmLmludGVudEZyb21DcmVhdGVQYXltZW50ID0gb3B0aW9ucy5pbnRlbnQ7XG5cbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgdmFyIHN0YXR1cztcblxuICAgICAgaWYgKHNlbGYuX3NldHVwRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHNlbGYuX3NldHVwRXJyb3IpO1xuICAgICAgfVxuXG4gICAgICBzdGF0dXMgPSBlcnIuZGV0YWlscyAmJiBlcnIuZGV0YWlscy5odHRwU3RhdHVzO1xuXG4gICAgICBpZiAoc3RhdHVzID09PSA0MjIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgICB0eXBlOiBlcnJvcnMuUEFZUEFMX0lOVkFMSURfUEFZTUVOVF9PUFRJT04udHlwZSxcbiAgICAgICAgICAgIGNvZGU6IGVycm9ycy5QQVlQQUxfSU5WQUxJRF9QQVlNRU5UX09QVElPTi5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JzLlBBWVBBTF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OLm1lc3NhZ2UsXG4gICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBjb252ZXJ0VG9CcmFpbnRyZWVFcnJvcihlcnIsIHtcbiAgICAgICAgICB0eXBlOiBlcnJvcnMuUEFZUEFMX0ZMT1dfRkFJTEVELnR5cGUsXG4gICAgICAgICAgY29kZTogZXJyb3JzLlBBWVBBTF9GTE9XX0ZBSUxFRC5jb2RlLFxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9ycy5QQVlQQUxfRkxPV19GQUlMRUQubWVzc2FnZSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIHVwZGF0ZSB7QGxpbmsgUGF5UGFsQ2hlY2tvdXR+bGluZUl0ZW18bGluZSBpdGVtc30gYW5kL29yIHtAbGluayBQYXlQYWxDaGVja291dH5zaGlwcGluZ09wdGlvbnxzaGlwcGluZyBvcHRpb25zfSBhc3NvY2lhdGVkIHdpdGggYSBQYXlQYWxDaGVja291dCBmbG93IChgcGF5bWVudElkYCkuXG4gKiBXaGVuIGEge0BsaW5rIGNhbGxiYWNrfSBpcyBkZWZpbmVkLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdW5kZWZpbmVkIGFuZCBpbnZva2VzIHRoZSBjYWxsYmFjay4gVGhlIHNlY29uZCBjYWxsYmFjayBhcmd1bWVudCwgPGNvZGU+ZGF0YTwvY29kZT4sIGlzIHRoZSByZXR1cm5lZCBzZXJ2ZXIgZGF0YS4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGB1cGRhdGVQYXltZW50YCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHNlcnZlciBkYXRhLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQWxsIG9wdGlvbnMgZm9yIHRoZSBQYXlQYWxDaGVja291dCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5wYXltZW50SWQgVGhpcyBzaG91bGQgYmUgUGF5UGFsIGBwYXltZW50SWRgLlxuICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcil9IG9wdGlvbnMuYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIHRyYW5zYWN0aW9uLCBpbmNsdWRpbmcgdGhlIGFtb3VudCBvZiB0aGUgc2VsZWN0ZWQgc2hpcHBpbmcgb3B0aW9uLCBhbmQgYWxsIGBsaW5lX2l0ZW1zYC5cbiAqICogU3VwcG9ydHMgdXAgdG8gMiBkZWNpbWFsIGRpZ2l0cy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmN1cnJlbmN5IFRoZSBjdXJyZW5jeSBjb2RlIG9mIHRoZSBhbW91bnQsIHN1Y2ggYXMgJ1VTRCcuIFJlcXVpcmVkIHdoZW4gdXNpbmcgdGhlIENoZWNrb3V0IGZsb3cuXG4gKiBAcGFyYW0ge3NoaXBwaW5nT3B0aW9uW119IFtvcHRpb25zLnNoaXBwaW5nT3B0aW9uc10gTGlzdCBvZiB7QGxpbmsgUGF5UGFsQ2hlY2tvdXR+c2hpcHBpbmdPcHRpb258c2hpcHBpbmcgb3B0aW9uc30gb2ZmZXJlZCBieSB0aGUgcGF5ZWUgb3IgbWVyY2hhbnQgdG8gdGhlIHBheWVyIHRvIHNoaXAgb3IgcGljayB1cCB0aGVpciBpdGVtcy5cbiAqIEBwYXJhbSB7bGluZUl0ZW1bXX0gW29wdGlvbnMubGluZUl0ZW1zXSBUaGUge0BsaW5rIFBheVBhbENoZWNrb3V0fmxpbmVJdGVtfGxpbmUgaXRlbXN9IGZvciB0aGlzIHRyYW5zYWN0aW9uLiBJdCBjYW4gaW5jbHVkZSB1cCB0byAyNDkgbGluZSBpdGVtcy5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCBpcyBhIFBheVBhbCBgcGF5bWVudElkYCBvciBgYmlsbGluZ1Rva2VuYCBzdHJpbmcsIGRlcGVuZGluZyBvbiB3aGV0aGVyIGBvcHRpb25zLmZsb3dgIGlzIGBjaGVja291dGAgb3IgYHZhdWx0YC4gVGhpcyBpcyBhbHNvIHdoYXQgaXMgcmVzb2x2ZWQgYnkgdGhlIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZVxuICogLy8gdGhpcyBwYXlwYWwgb2JqZWN0IGlzIGNyZWF0ZWQgYnkgdGhlIFBheVBhbCBKUyBTREtcbiAqIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGF5cGFsL3BheXBhbC1jaGVja291dC1jb21wb25lbnRzXG4gKiBwYXlwYWwuQnV0dG9ucyh7XG4gKiAgIGNyZWF0ZU9yZGVyOiBmdW5jdGlvbiAoKSB7XG4gKiAgICAgLy8gd2hlbiBjcmVhdGVQYXltZW50IHJlc29sdmVzLCBpdCBpcyBhdXRvbWF0aWNhbGx5IHBhc3NlZCB0byB0aGUgUGF5UGFsIEpTIFNES1xuICogICAgIHJldHVybiBwYXlwYWxDaGVja291dEluc3RhbmNlLmNyZWF0ZVBheW1lbnQoe1xuICogICAgICAgLy9cbiAqICAgICB9KTtcbiAqICAgfSxcbiAqICAgb25TaGlwcGluZ0NoYW5nZTogZnVuY3Rpb24gKGRhdGEpIHtcbiAqICAgICAvLyBFeGFtaW5lIGRhdGEgYW5kIGRldGVybWluZSBpZiB0aGUgcGF5bWVudCBuZWVkcyB0byBiZSB1cGRhdGVkLlxuICogICAgIC8vIHdoZW4gdXBkYXRlUGF5bWVudCByZXNvbHZlcywgaXQgaXMgYXV0b21hdGljYWxseSBwYXNzZWQgdG8gdGhlIFBheVBhbCBKUyBTREtcbiAqICAgICByZXR1cm4gcGF5cGFsQ2hlY2tvdXRJbnN0YW5jZS51cGRhdGVQYXltZW50KHtcbiAqICAgICAgICAgcGF5bWVudElkOiBkYXRhLnBheW1lbnRJZCxcbiAqICAgICAgICAgYW1vdW50OiAnMTUuMDAnLFxuICogICAgICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gKiAgICAgICAgIHNoaXBwaW5nT3B0aW9uczogW1xuICogICAgICAgICAgIHtcbiAqICAgICAgICAgICAgIGlkOiAnc2hpcHBpbmctc3BlZWQtZmFzdCcsXG4gKiAgICAgICAgICAgICB0eXBlOiAnU0hJUFBJTkcnLFxuICogICAgICAgICAgICAgbGFiZWw6ICdGYXN0IFNoaXBwaW5nJyxcbiAqICAgICAgICAgICAgIHNlbGVjdGVkOiB0cnVlLFxuICogICAgICAgICAgICAgYW1vdW50OiB7XG4gKiAgICAgICAgICAgICAgIHZhbHVlOiAnNS4wMCcsXG4gKiAgICAgICAgICAgICAgIGN1cnJlbmN5OiAnVVNEJ1xuICogICAgICAgICAgICAgfVxuICogICAgICAgICAgIH0sXG4gKiAgICAgICAgICAge1xuICogICAgICAgICAgICAgaWQ6ICdzaGlwcGluZy1zcGVlZC1zbG93JyxcbiAqICAgICAgICAgICAgIHR5cGU6ICdTSElQUElORycsXG4gKiAgICAgICAgICAgICBsYWJlbDogJ1Nsb3cgU2hpcHBpbmcnLFxuICogICAgICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICogICAgICAgICAgICAgYW1vdW50OiB7XG4gKiAgICAgICAgICAgICAgIHZhbHVlOiAnMS4wMCcsXG4gKiAgICAgICAgICAgICAgIGN1cnJlbmN5OiAnVVNEJ1xuICogICAgICAgICAgICAgfVxuICogICAgICAgICAgIH1cbiAqICAgICAgICAgXVxuICogICAgIH0pO1xuICogICB9XG4gKiAgIC8vIEFkZCBvdGhlciBvcHRpb25zLCBlLmcuIG9uQXBwcm92ZWQsIG9uQ2FuY2VsLCBvbkVycm9yXG4gKiB9KS5yZW5kZXIoJyNwYXlwYWwtYnV0dG9uJyk7XG4gKlxuICogYGBgXG4gKlxuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuUGF5UGFsQ2hlY2tvdXQucHJvdG90eXBlLnVwZGF0ZVBheW1lbnQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBlbmRwb2ludCA9IFwicGF5cGFsX2hlcm1lcy9wYXRjaF9wYXltZW50X3Jlc291cmNlXCI7XG5cbiAgaWYgKCFvcHRpb25zIHx8IHRoaXMuX2hhc01pc3NpbmdPcHRpb24ob3B0aW9ucywgY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlMpKSB7XG4gICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgIHNlbGYuX2NsaWVudFByb21pc2UsXG4gICAgICBcInBheXBhbC1jaGVja291dC51cGRhdGVQYXltZW50Lm1pc3Npbmctb3B0aW9uc1wiXG4gICAgKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuUEFZUEFMX01JU1NJTkdfUkVRVUlSRURfT1BUSU9OKVxuICAgICk7XG4gIH1cblxuICBpZiAoIXRoaXMuX3ZlcmlmeUNvbnNpc3RlbnRDdXJyZW5jeShvcHRpb25zKSkge1xuICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICBzZWxmLl9jbGllbnRQcm9taXNlLFxuICAgICAgXCJwYXlwYWwtY2hlY2tvdXQudXBkYXRlUGF5bWVudC5pbmNvbnNpc3RlbnQtY3VycmVuY2llc1wiXG4gICAgKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5QQVlQQUxfSU5WQUxJRF9QQVlNRU5UX09QVElPTi50eXBlLFxuICAgICAgICBjb2RlOiBlcnJvcnMuUEFZUEFMX0lOVkFMSURfUEFZTUVOVF9PUFRJT04uY29kZSxcbiAgICAgICAgbWVzc2FnZTogZXJyb3JzLlBBWVBBTF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OLm1lc3NhZ2UsXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBvcmlnaW5hbEVycm9yOiBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIk9uZSBvciBtb3JlIHNoaXBwaW5nIG9wdGlvbiBjdXJyZW5jaWVzIGRpZmZlciBmcm9tIGNoZWNrb3V0IGN1cnJlbmN5LlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGFuYWx5dGljcy5zZW5kRXZlbnQodGhpcy5fY2xpZW50UHJvbWlzZSwgXCJwYXlwYWwtY2hlY2tvdXQudXBkYXRlUGF5bWVudFwiKTtcblxuICByZXR1cm4gdGhpcy5fY2xpZW50UHJvbWlzZVxuICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIHJldHVybiBjbGllbnQucmVxdWVzdCh7XG4gICAgICAgIGVuZHBvaW50OiBlbmRwb2ludCxcbiAgICAgICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICAgICAgZGF0YTogc2VsZi5fZm9ybWF0VXBkYXRlUGF5bWVudERhdGEob3B0aW9ucyksXG4gICAgICB9KTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICB2YXIgc3RhdHVzID0gZXJyLmRldGFpbHMgJiYgZXJyLmRldGFpbHMuaHR0cFN0YXR1cztcblxuICAgICAgaWYgKHN0YXR1cyA9PT0gNDIyKSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgc2VsZi5fY2xpZW50UHJvbWlzZSxcbiAgICAgICAgICBcInBheXBhbC1jaGVja291dC51cGRhdGVQYXltZW50LmludmFsaWRcIlxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICAgICAgdHlwZTogZXJyb3JzLlBBWVBBTF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OLnR5cGUsXG4gICAgICAgICAgICBjb2RlOiBlcnJvcnMuUEFZUEFMX0lOVkFMSURfUEFZTUVOVF9PUFRJT04uY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9ycy5QQVlQQUxfSU5WQUxJRF9QQVlNRU5UX09QVElPTi5tZXNzYWdlLFxuICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgIHNlbGYuX2NsaWVudFByb21pc2UsXG4gICAgICAgIFwicGF5cGFsLWNoZWNrb3V0LnVwZGF0ZVBheW1lbnQuXCIgKyBlcnJvcnMuUEFZUEFMX0ZMT1dfRkFJTEVELmNvZGVcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgY29udmVydFRvQnJhaW50cmVlRXJyb3IoZXJyLCB7XG4gICAgICAgICAgdHlwZTogZXJyb3JzLlBBWVBBTF9GTE9XX0ZBSUxFRC50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5QQVlQQUxfRkxPV19GQUlMRUQuY29kZSxcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvcnMuUEFZUEFMX0ZMT1dfRkFJTEVELm1lc3NhZ2UsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgUGF5UGFsIGNoZWNrb3V0IGZsb3cgd2l0aCBhIHBheW1lbnQgbWV0aG9kIG5vbmNlIHRoYXQgcmVwcmVzZW50cyBhIHZhdWx0ZWQgUGF5UGFsIGFjY291bnQuXG4gKiBXaGVuIGEge0BsaW5rIGNhbGxiYWNrfSBpcyBkZWZpbmVkLCB0aGUgZnVuY3Rpb24gcmV0dXJucyB1bmRlZmluZWQgYW5kIGludm9rZXMgdGhlIGNhbGxiYWNrIHdpdGggdGhlIGlkIHRvIGJlIHVzZWQgd2l0aCB0aGUgUGF5UGFsIEpTIFNESy4gT3RoZXJ3aXNlLCBpdCByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGlkLlxuICogQHB1YmxpY1xuICogQGlnbm9yZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgVGhlc2Ugb3B0aW9ucyBhcmUgaWRlbnRpY2FsIHRvIHRoZSB7QGxpbmsgUGF5UGFsQ2hlY2tvdXQjY3JlYXRlUGF5bWVudHxvcHRpb25zIGZvciBjcmVhdGluZyBhIHBheW1lbnQgcmVzb3VyY2V9LCBleGNlcHQgZm9yIHRoZSBmb2xsb3dpbmc6XG4gKiAqIGBmbG93YCBjYW5ub3QgYmUgc2V0ICh3aWxsIGFsd2F5cyBiZSBgJ2NoZWNrb3V0J2ApXG4gKiAqIGBhbW91bnRgLCBgY3VycmVuY3lgLCBhbmQgYHZhdWx0SW5pdGlhdGVkQ2hlY2tvdXRQYXltZW50TWV0aG9kVG9rZW5gIGFyZSByZXF1aXJlZCBpbnN0ZWFkIG9mIG9wdGlvbmFsXG4gKiAqIEFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBpcyBhdmFpbGFibGUgKGxpc3RlZCBiZWxvdylcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMub3B0T3V0T2ZNb2RhbEJhY2tkcm9wPWZhbHNlXSBCeSBkZWZhdWx0LCB0aGUgd2VicGFnZSB3aWxsIGRhcmtlbiBhbmQgYmVjb21lIHVudXNhYmxlIHdoaWxlIHRoZSBQYXlQYWwgd2luZG93IGlzIG9wZW4uIEZvciBmdWxsIGNvbnRyb2wgb2YgdGhlIFVJLCBwYXNzIGB0cnVlYCBmb3IgdGhpcyBvcHRpb24uXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIDxjb2RlPnBheWxvYWQ8L2NvZGU+LCBpcyBhIHtAbGluayBQYXlQYWxDaGVja291dH50b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfS4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIHJlc29sdmVzIHdpdGggYSB7QGxpbmsgUGF5UGFsQ2hlY2tvdXR+dG9rZW5pemVQYXlsb2FkfHRva2VuaXplUGF5bG9hZH0uXG4gKiBAZXhhbXBsZVxuICogcGF5cGFsQ2hlY2tvdXRJbnN0YW5jZS5zdGFydFZhdWx0SW5pdGlhdGVkQ2hlY2tvdXQoe1xuICogICB2YXVsdEluaXRpYXRlZENoZWNrb3V0UGF5bWVudE1ldGhvZFRva2VuOiAnbm9uY2UtdGhhdC1yZXByZXNlbnRzLWEtdmF1bHRlZC1wYXlwYWwtYWNjb3VudCcsXG4gKiAgIGFtb3VudDogJzEwLjAwJyxcbiAqICAgY3VycmVuY3k6ICdVU0QnXG4gKiB9KS50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gKiAgIC8vIHNlbmQgcGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlclxuICogfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICogICBpZiAoZXJyLmNvZGUgPT09ICdQQVlQQUxfUE9QVVBfQ0xPU0VEJykge1xuICogICAgIC8vIGluZGljYXRlcyB0aGF0IGN1c3RvbWVyIGNhbmNlbGVkIGJ5XG4gKiAgICAgLy8gbWFudWFsbHkgY2xvc2luZyB0aGUgUGF5UGFsIHBvcHVwXG4gKiAgIH1cbiAqXG4gKiAgIC8vIGhhbmRsZSBvdGhlciBlcnJvcnNcbiAqIH0pO1xuICpcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5zdGFydFZhdWx0SW5pdGlhdGVkQ2hlY2tvdXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgbWlzc2luZ1JlcXVpcmVkUGFyYW07XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5fdmF1bHRJbml0aWF0ZWRDaGVja291dEluUHJvZ3Jlc3MpIHtcbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgdGhpcy5fY2xpZW50UHJvbWlzZSxcbiAgICAgIFwicGF5cGFsLWNoZWNrb3V0LnN0YXJ0VmF1bHRJbml0aWF0ZWRDaGVja291dC5lcnJvci5hbHJlYWR5LWluLXByb2dyZXNzXCJcbiAgICApO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEJyYWludHJlZUVycm9yKFxuICAgICAgICBlcnJvcnMuUEFZUEFMX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVF9JTl9QUk9HUkVTU1xuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBSRVFVSVJFRF9QQVJBTVNfRk9SX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVC5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIGlmICghb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShwYXJhbSkpIHtcbiAgICAgIG1pc3NpbmdSZXF1aXJlZFBhcmFtID0gcGFyYW07XG4gICAgfVxuICB9KTtcblxuICBpZiAobWlzc2luZ1JlcXVpcmVkUGFyYW0pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICB0eXBlOiBlcnJvcnMuUEFZUEFMX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVF9QQVJBTV9SRVFVSVJFRC50eXBlLFxuICAgICAgICBjb2RlOiBlcnJvcnMuUEFZUEFMX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVF9QQVJBTV9SRVFVSVJFRC5jb2RlLFxuICAgICAgICBtZXNzYWdlOiBcIlJlcXVpcmVkIHBhcmFtIFwiICsgbWlzc2luZ1JlcXVpcmVkUGFyYW0gKyBcIiBpcyBtaXNzaW5nLlwiLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgdGhpcy5fdmF1bHRJbml0aWF0ZWRDaGVja291dEluUHJvZ3Jlc3MgPSB0cnVlO1xuICB0aGlzLl9hZGRNb2RhbEJhY2tkcm9wKG9wdGlvbnMpO1xuXG4gIG9wdGlvbnMgPSBhc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICBmbG93OiBcImNoZWNrb3V0XCIsXG4gIH0pO1xuXG4gIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgdGhpcy5fY2xpZW50UHJvbWlzZSxcbiAgICBcInBheXBhbC1jaGVja291dC5zdGFydFZhdWx0SW5pdGlhdGVkQ2hlY2tvdXQuc3RhcnRlZFwiXG4gICk7XG5cbiAgcmV0dXJuIHRoaXMuX3dhaXRGb3JWYXVsdEluaXRpYXRlZENoZWNrb3V0RGVwZW5kZW5jaWVzKClcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZnJhbWVDb21tdW5pY2F0aW9uUHJvbWlzZSA9IG5ldyBFeHRlbmRlZFByb21pc2UoKTtcbiAgICAgIHZhciBzdGFydFZhdWx0SW5pdGlhdGVkQ2hlY2tvdXRQcm9taXNlID0gc2VsZlxuICAgICAgICAuX2NyZWF0ZVBheW1lbnRSZXNvdXJjZShvcHRpb25zLCB7XG4gICAgICAgICAgcmV0dXJuVXJsOiBzZWxmLl9jb25zdHJ1Y3RWYXVsdENoZWNrdXRVcmwoXCJyZWRpcmVjdC1mcmFtZVwiKSxcbiAgICAgICAgICBjYW5jZWxVcmw6IHNlbGYuX2NvbnN0cnVjdFZhdWx0Q2hlY2t1dFVybChcImNhbmNlbC1mcmFtZVwiKSxcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgdmFyIHJlZGlyZWN0VXJsID0gcmVzcG9uc2UucGF5bWVudFJlc291cmNlLnJlZGlyZWN0VXJsO1xuXG4gICAgICAgICAgc2VsZi5fZnJhbWVTZXJ2aWNlLnJlZGlyZWN0KHJlZGlyZWN0VXJsKTtcblxuICAgICAgICAgIHJldHVybiBmcmFtZUNvbW11bmljYXRpb25Qcm9taXNlO1xuICAgICAgICB9KTtcblxuICAgICAgc2VsZi5fZnJhbWVTZXJ2aWNlLm9wZW4oXG4gICAgICAgIHt9LFxuICAgICAgICBzZWxmLl9jcmVhdGVGcmFtZVNlcnZpY2VDYWxsYmFjayhmcmFtZUNvbW11bmljYXRpb25Qcm9taXNlKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHN0YXJ0VmF1bHRJbml0aWF0ZWRDaGVja291dFByb21pc2U7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgc2VsZi5fdmF1bHRJbml0aWF0ZWRDaGVja291dEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgIHNlbGYuX3JlbW92ZU1vZGFsQmFja2Ryb3AoKTtcblxuICAgICAgaWYgKGVyci5jb2RlID09PSBcIkZSQU1FX1NFUlZJQ0VfRlJBTUVfQ0xPU0VEXCIpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgICBzZWxmLl9jbGllbnRQcm9taXNlLFxuICAgICAgICAgIFwicGF5cGFsLWNoZWNrb3V0LnN0YXJ0VmF1bHRJbml0aWF0ZWRDaGVja291dC5jYW5jZWxlZC5ieS1jdXN0b21lclwiXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihcbiAgICAgICAgICAgIGVycm9ycy5QQVlQQUxfU1RBUlRfVkFVTFRfSU5JVElBVEVEX0NIRUNLT1VUX0NBTkNFTEVEXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5fZnJhbWVTZXJ2aWNlKSB7XG4gICAgICAgIHNlbGYuX2ZyYW1lU2VydmljZS5jbG9zZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGVyci5jb2RlICYmXG4gICAgICAgIGVyci5jb2RlLmluZGV4T2YoXCJGUkFNRV9TRVJWSUNFX0ZSQU1FX09QRU5fRkFJTEVEXCIpID4gLTFcbiAgICAgICkge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIHNlbGYuX2NsaWVudFByb21pc2UsXG4gICAgICAgICAgXCJwYXlwYWwtY2hlY2tvdXQuc3RhcnRWYXVsdEluaXRpYXRlZENoZWNrb3V0LmZhaWxlZC5wb3B1cC1ub3Qtb3BlbmVkXCJcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICAgIGNvZGU6IGVycm9ycy5QQVlQQUxfU1RBUlRfVkFVTFRfSU5JVElBVEVEX0NIRUNLT1VUX1BPUFVQX09QRU5fRkFJTEVEXG4gICAgICAgICAgICAgIC5jb2RlLFxuICAgICAgICAgICAgdHlwZTogZXJyb3JzLlBBWVBBTF9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVRfUE9QVVBfT1BFTl9GQUlMRURcbiAgICAgICAgICAgICAgLnR5cGUsXG4gICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICBlcnJvcnMuUEFZUEFMX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVF9QT1BVUF9PUEVOX0ZBSUxFRFxuICAgICAgICAgICAgICAgIC5tZXNzYWdlLFxuICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBzZWxmLl9mcmFtZVNlcnZpY2UuY2xvc2UoKTtcbiAgICAgIHNlbGYuX3ZhdWx0SW5pdGlhdGVkQ2hlY2tvdXRJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICBzZWxmLl9yZW1vdmVNb2RhbEJhY2tkcm9wKCk7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICBzZWxmLl9jbGllbnRQcm9taXNlLFxuICAgICAgICBcInBheXBhbC1jaGVja291dC5zdGFydFZhdWx0SW5pdGlhdGVkQ2hlY2tvdXQuc3VjY2VlZGVkXCJcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgIH0pO1xufTtcblxuUGF5UGFsQ2hlY2tvdXQucHJvdG90eXBlLl9hZGRNb2RhbEJhY2tkcm9wID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMub3B0T3V0T2ZNb2RhbEJhY2tkcm9wKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF0aGlzLl9tb2RhbEJhY2tkcm9wKSB7XG4gICAgdGhpcy5fbW9kYWxCYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5fbW9kYWxCYWNrZHJvcC5zZXRBdHRyaWJ1dGUoXG4gICAgICBcImRhdGEtYnJhaW50cmVlLXBheXBhbC12YXVsdC1pbml0aWF0ZWQtY2hlY2tvdXQtbW9kYWxcIixcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHRoaXMuX21vZGFsQmFja2Ryb3Auc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgdGhpcy5fbW9kYWxCYWNrZHJvcC5zdHlsZS50b3AgPSAwO1xuICAgIHRoaXMuX21vZGFsQmFja2Ryb3Auc3R5bGUuYm90dG9tID0gMDtcbiAgICB0aGlzLl9tb2RhbEJhY2tkcm9wLnN0eWxlLmxlZnQgPSAwO1xuICAgIHRoaXMuX21vZGFsQmFja2Ryb3Auc3R5bGUucmlnaHQgPSAwO1xuICAgIHRoaXMuX21vZGFsQmFja2Ryb3Auc3R5bGUuekluZGV4ID0gOTk5OTtcbiAgICB0aGlzLl9tb2RhbEJhY2tkcm9wLnN0eWxlLmJhY2tncm91bmQgPSBcImJsYWNrXCI7XG4gICAgdGhpcy5fbW9kYWxCYWNrZHJvcC5zdHlsZS5vcGFjaXR5ID0gXCIwLjdcIjtcbiAgICB0aGlzLl9tb2RhbEJhY2tkcm9wLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBcImNsaWNrXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm9jdXNWYXVsdEluaXRpYXRlZENoZWNrb3V0V2luZG93KCk7XG4gICAgICB9LmJpbmQodGhpcylcbiAgICApO1xuICB9XG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9tb2RhbEJhY2tkcm9wKTtcbn07XG5cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5fcmVtb3ZlTW9kYWxCYWNrZHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCEodGhpcy5fbW9kYWxCYWNrZHJvcCAmJiB0aGlzLl9tb2RhbEJhY2tkcm9wLnBhcmVudE5vZGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fbW9kYWxCYWNrZHJvcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX21vZGFsQmFja2Ryb3ApO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIFBheVBhbCB3aW5kb3cgaWYgaXQgaXMgb3BlbmVkIHZpYSBgc3RhcnRWYXVsdEluaXRpYXRlZENoZWNrb3V0YC5cbiAqIEBwdWJsaWNcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gR2V0cyBjYWxsZWQgd2hlbiB3aW5kb3cgaXMgY2xvc2VkLlxuICogQGV4YW1wbGVcbiAqIHBheXBhbENoZWNrb3V0SW5zdGFuY2UuY2xvc2VWYXVsdEluaXRpYXRlZENoZWNrb3V0V2luZG93KCk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5QYXlQYWxDaGVja291dC5wcm90b3R5cGUuY2xvc2VWYXVsdEluaXRpYXRlZENoZWNrb3V0V2luZG93ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fdmF1bHRJbml0aWF0ZWRDaGVja291dEluUHJvZ3Jlc3MpIHtcbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgdGhpcy5fY2xpZW50UHJvbWlzZSxcbiAgICAgIFwicGF5cGFsLWNoZWNrb3V0LnN0YXJ0VmF1bHRJbml0aWF0ZWRDaGVja291dC5jYW5jZWxlZC5ieS1tZXJjaGFudFwiXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl93YWl0Rm9yVmF1bHRJbml0aWF0ZWRDaGVja291dERlcGVuZGVuY2llcygpLnRoZW4oXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fZnJhbWVTZXJ2aWNlLmNsb3NlKCk7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG59O1xuXG4vKipcbiAqIEZvY3VzZXMgdGhlIFBheVBhbCB3aW5kb3cgaWYgaXQgaXMgb3BlbmVkIHZpYSBgc3RhcnRWYXVsdEluaXRpYXRlZENoZWNrb3V0YC5cbiAqIEBwdWJsaWNcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gR2V0cyBjYWxsZWQgd2hlbiB3aW5kb3cgaXMgZm9jdXNlZC5cbiAqIEBleGFtcGxlXG4gKiBwYXlwYWxDaGVja291dEluc3RhbmNlLmZvY3VzVmF1bHRJbml0aWF0ZWRDaGVja291dFdpbmRvdygpO1xuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuUGF5UGFsQ2hlY2tvdXQucHJvdG90eXBlLmZvY3VzVmF1bHRJbml0aWF0ZWRDaGVja291dFdpbmRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3dhaXRGb3JWYXVsdEluaXRpYXRlZENoZWNrb3V0RGVwZW5kZW5jaWVzKCkudGhlbihcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9mcmFtZVNlcnZpY2UuZm9jdXMoKTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcbn07XG5cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5fY3JlYXRlRnJhbWVTZXJ2aWNlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoXG4gIGZyYW1lQ29tbXVuaWNhdGlvblByb21pc2Vcbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gVE9ETyB3aGVuIGEgbWVyY2hhbnQgaW50ZWdyYXRlcyBhbiBpT1Mgb3IgQW5kcm9pZCBpbnRlZ3JhdGlvblxuICAvLyB3aXRoIGEgd2VidmlldyB1c2luZyB0aGUgd2ViIFNESywgd2Ugd2lsbCBoYXZlIHRvIGFkZCBwb3B1cGJyaWRnZVxuICAvLyBzdXBwb3J0XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyLCBwYXlsb2FkKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgZnJhbWVDb21tdW5pY2F0aW9uUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICB9IGVsc2UgaWYgKHBheWxvYWQpIHtcbiAgICAgIHNlbGYuX2ZyYW1lU2VydmljZS5yZWRpcmVjdChzZWxmLl9sb2FkaW5nRnJhbWVVcmwpO1xuICAgICAgc2VsZlxuICAgICAgICAudG9rZW5pemVQYXltZW50KHtcbiAgICAgICAgICBwYXltZW50VG9rZW46IHBheWxvYWQudG9rZW4sXG4gICAgICAgICAgcGF5ZXJJRDogcGF5bG9hZC5QYXllcklELFxuICAgICAgICAgIHBheW1lbnRJRDogcGF5bG9hZC5wYXltZW50SWQsXG4gICAgICAgICAgb3JkZXJJRDogcGF5bG9hZC5vcmRlcklkLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgZnJhbWVDb21tdW5pY2F0aW9uUHJvbWlzZS5yZXNvbHZlKHJlcyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAodG9rZW5pemF0aW9uRXJyb3IpIHtcbiAgICAgICAgICBmcmFtZUNvbW11bmljYXRpb25Qcm9taXNlLnJlamVjdCh0b2tlbml6YXRpb25FcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5fd2FpdEZvclZhdWx0SW5pdGlhdGVkQ2hlY2tvdXREZXBlbmRlbmNpZXMgPVxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudFByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc2VsZi5fZnJhbWVTZXJ2aWNlUHJvbWlzZTtcbiAgICB9KTtcbiAgfTtcblxuUGF5UGFsQ2hlY2tvdXQucHJvdG90eXBlLl9jb25zdHJ1Y3RWYXVsdENoZWNrdXRVcmwgPSBmdW5jdGlvbiAoZnJhbWVOYW1lKSB7XG4gIHZhciBzZXJ2aWNlSWQgPSB0aGlzLl9mcmFtZVNlcnZpY2UuX3NlcnZpY2VJZDtcblxuICByZXR1cm4gKFxuICAgIHRoaXMuX2Fzc2V0c1VybCArXG4gICAgXCIvaHRtbC9cIiArXG4gICAgZnJhbWVOYW1lICtcbiAgICB1c2VNaW4odGhpcy5faXNEZWJ1ZykgK1xuICAgIFwiLmh0bWw/Y2hhbm5lbD1cIiArXG4gICAgc2VydmljZUlkXG4gICk7XG59O1xuXG4vKipcbiAqIFRva2VuaXplcyB0aGUgYXV0aG9yaXplIGRhdGEgZnJvbSB0aGUgUGF5UGFsIEpTIFNESyB3aGVuIGNvbXBsZXRpbmcgYSBidXllciBhcHByb3ZhbCBmbG93LlxuICogV2hlbiBhIHtAbGluayBjYWxsYmFja30gaXMgZGVmaW5lZCwgaW52b2tlcyB0aGUgY2FsbGJhY2sgd2l0aCB7QGxpbmsgUGF5UGFsQ2hlY2tvdXR+dG9rZW5pemVQYXlsb2FkfHRva2VuaXplUGF5bG9hZH0gYW5kIHJldHVybnMgdW5kZWZpbmVkLiBPdGhlcndpc2UsIHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIHtAbGluayBQYXlQYWxDaGVja291dH50b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSB0b2tlbml6ZU9wdGlvbnMgVG9rZW5zIGFuZCBJRHMgcmVxdWlyZWQgdG8gdG9rZW5pemUgdGhlIHBheW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9rZW5pemVPcHRpb25zLnBheWVySWQgUGF5ZXIgSUQgcmV0dXJuZWQgYnkgUGF5UGFsIGBvbkFwcHJvdmVkYCBjYWxsYmFjay5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbdG9rZW5pemVPcHRpb25zLnBheW1lbnRJZF0gUGF5bWVudCBJRCByZXR1cm5lZCBieSBQYXlQYWwgYG9uQXBwcm92ZWRgIGNhbGxiYWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IFt0b2tlbml6ZU9wdGlvbnMuYmlsbGluZ1Rva2VuXSBCaWxsaW5nIFRva2VuIHJldHVybmVkIGJ5IFBheVBhbCBgb25BcHByb3ZlZGAgY2FsbGJhY2suXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt0b2tlbml6ZU9wdGlvbnMudmF1bHQ9dHJ1ZV0gV2hldGhlciBvciBub3QgdG8gdmF1bHQgdGhlIHJlc3VsdGluZyBQYXlQYWwgYWNjb3VudCAoaWYgdXNpbmcgYSBjbGllbnQgdG9rZW4gZ2VuZXJhdGVkIHdpdGggYSBjdXN0b21lciBpZCBhbmQgdGhlIHZhdWx0IGZsb3cpLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgc2Vjb25kIGFyZ3VtZW50LCA8Y29kZT5wYXlsb2FkPC9jb2RlPiwgaXMgYSB7QGxpbmsgUGF5UGFsQ2hlY2tvdXR+dG9rZW5pemVQYXlsb2FkfHRva2VuaXplUGF5bG9hZH0uIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSByZXNvbHZlcyB3aXRoIGEge0BsaW5rIFBheVBhbENoZWNrb3V0fnRva2VuaXplUGF5bG9hZHx0b2tlbml6ZVBheWxvYWR9LlxuICogQGV4YW1wbGUgPGNhcHRpb24+T3B0IG91dCBvZiBhdXRvLXZhdWx0aW5nIGJlaGF2aW9yPC9jYXB0aW9uPlxuICogLy8gY3JlYXRlIHRoZSBwYXlwYWxDaGVja291dEluc3RhbmNlIHdpdGggYSBjbGllbnQgdG9rZW4gZ2VuZXJhdGVkIHdpdGggYSBjdXN0b21lciBpZFxuICogcGF5cGFsLkJ1dHRvbnMoe1xuICogICBjcmVhdGVCaWxsaW5nQWdyZWVtZW50OiBmdW5jdGlvbiAoKSB7XG4gKiAgICAgcmV0dXJuIHBheXBhbENoZWNrb3V0SW5zdGFuY2UuY3JlYXRlUGF5bWVudCh7XG4gKiAgICAgICBmbG93OiAndmF1bHQnXG4gKiAgICAgICAvLyB5b3VyIG90aGVyIGNyZWF0ZVBheW1lbnQgb3B0aW9ucyBoZXJlXG4gKiAgICAgfSk7XG4gKiAgIH0sXG4gKiAgIG9uQXBwcm92ZWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gKiAgICAgZGF0YS52YXVsdCA9IGZhbHNlO1xuICpcbiAqICAgICByZXR1cm4gcGF5cGFsQ2hlY2tvdXRJbnN0YW5jZS50b2tlbml6ZVBheW1lbnQoZGF0YSk7XG4gKiAgIH0sXG4gKiAgIC8vIEFkZCBvdGhlciBvcHRpb25zLCBlLmcuIG9uQ2FuY2VsLCBvbkVycm9yXG4gKiB9KS5yZW5kZXIoJyNwYXlwYWwtYnV0dG9uJyk7XG4gKlxuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuUGF5UGFsQ2hlY2tvdXQucHJvdG90eXBlLnRva2VuaXplUGF5bWVudCA9IGZ1bmN0aW9uICh0b2tlbml6ZU9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2hvdWxkVmF1bHQgPSB0cnVlO1xuICB2YXIgcGF5bG9hZDtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgZmxvdzpcbiAgICAgIHRva2VuaXplT3B0aW9ucy5iaWxsaW5nVG9rZW4gJiYgIXRva2VuaXplT3B0aW9ucy5wYXltZW50SURcbiAgICAgICAgPyBcInZhdWx0XCJcbiAgICAgICAgOiBcImNoZWNrb3V0XCIsXG4gICAgaW50ZW50OiB0b2tlbml6ZU9wdGlvbnMuaW50ZW50IHx8IHRoaXMuaW50ZW50RnJvbUNyZWF0ZVBheW1lbnQsXG4gIH07XG4gIHZhciBwYXJhbXMgPSB7XG4gICAgLy8gVGhlIHBheW1lbnRUb2tlbiBwcm92aWRlZCBieSB0aGUgUGF5UGFsIEpTIFNESyBpcyB0aGUgRUMgVG9rZW5cbiAgICBlY1Rva2VuOiB0b2tlbml6ZU9wdGlvbnMucGF5bWVudFRva2VuLFxuICAgIGJpbGxpbmdUb2tlbjogdG9rZW5pemVPcHRpb25zLmJpbGxpbmdUb2tlbixcbiAgICBwYXllcklkOiB0b2tlbml6ZU9wdGlvbnMucGF5ZXJJRCxcbiAgICBwYXltZW50SWQ6IHRva2VuaXplT3B0aW9ucy5wYXltZW50SUQsXG4gICAgb3JkZXJJZDogdG9rZW5pemVPcHRpb25zLm9yZGVySUQsXG4gICAgc2hpcHBpbmdPcHRpb25zSWQ6IHRva2VuaXplT3B0aW9ucy5zaGlwcGluZ09wdGlvbnNJZCxcbiAgfTtcblxuICBpZiAodG9rZW5pemVPcHRpb25zLmhhc093blByb3BlcnR5KFwidmF1bHRcIikpIHtcbiAgICBzaG91bGRWYXVsdCA9IHRva2VuaXplT3B0aW9ucy52YXVsdDtcbiAgfVxuXG4gIG9wdGlvbnMudmF1bHQgPSBzaG91bGRWYXVsdDtcblxuICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgIHRoaXMuX2NsaWVudFByb21pc2UsXG4gICAgXCJwYXlwYWwtY2hlY2tvdXQudG9rZW5pemF0aW9uLnN0YXJ0ZWRcIlxuICApO1xuXG4gIHJldHVybiB0aGlzLl9jbGllbnRQcm9taXNlXG4gICAgLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgcmV0dXJuIGNsaWVudC5yZXF1ZXN0KHtcbiAgICAgICAgZW5kcG9pbnQ6IFwicGF5bWVudF9tZXRob2RzL3BheXBhbF9hY2NvdW50c1wiLFxuICAgICAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgICAgICBkYXRhOiBzZWxmLl9mb3JtYXRUb2tlbml6ZURhdGEob3B0aW9ucywgcGFyYW1zKSxcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBwYXlsb2FkID0gc2VsZi5fZm9ybWF0VG9rZW5pemVQYXlsb2FkKHJlc3BvbnNlKTtcblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY2xpZW50UHJvbWlzZSxcbiAgICAgICAgXCJwYXlwYWwtY2hlY2tvdXQudG9rZW5pemF0aW9uLnN1Y2Nlc3NcIlxuICAgICAgKTtcbiAgICAgIGlmIChwYXlsb2FkLmNyZWRpdEZpbmFuY2luZ09mZmVyZWQpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgICBzZWxmLl9jbGllbnRQcm9taXNlLFxuICAgICAgICAgIFwicGF5cGFsLWNoZWNrb3V0LmNyZWRpdC5hY2NlcHRlZFwiXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChzZWxmLl9zZXR1cEVycm9yKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChzZWxmLl9zZXR1cEVycm9yKTtcbiAgICAgIH1cblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY2xpZW50UHJvbWlzZSxcbiAgICAgICAgXCJwYXlwYWwtY2hlY2tvdXQudG9rZW5pemF0aW9uLmZhaWxlZFwiXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIGNvbnZlcnRUb0JyYWludHJlZUVycm9yKGVyciwge1xuICAgICAgICAgIHR5cGU6IGVycm9ycy5QQVlQQUxfQUNDT1VOVF9UT0tFTklaQVRJT05fRkFJTEVELnR5cGUsXG4gICAgICAgICAgY29kZTogZXJyb3JzLlBBWVBBTF9BQ0NPVU5UX1RPS0VOSVpBVElPTl9GQUlMRUQuY29kZSxcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvcnMuUEFZUEFMX0FDQ09VTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRC5tZXNzYWdlLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgd2l0aCB0aGUgUGF5UGFsIGNsaWVudCBpZCB0byBiZSB1c2VkIHdoZW4gbG9hZGluZyB0aGUgUGF5UGFsIFNESy5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgPGNvZGU+aWQ8L2NvZGU+LCBpcyBhIHRoZSBQYXlQYWwgY2xpZW50IGlkLiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgcmVzb2x2ZXMgd2l0aCB0aGUgUGF5UGFsIGNsaWVudCBpZC5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZVxuICogcGF5cGFsQ2hlY2tvdXRJbnN0YW5jZS5nZXRDbGllbnRJZCgpLnRoZW4oZnVuY3Rpb24gKGlkKSB7XG4gKiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICpcbiAqICBzY3JpcHQuc3JjID0gJ2h0dHBzOi8vd3d3LnBheXBhbC5jb20vc2RrL2pzP2NsaWVudC1pZD0nICsgaWQ7XG4gKiAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAqICAgIC8vIHNldHVwIHRoZSBQYXlQYWwgU0RLXG4gKiAgfTtcbiAqXG4gKiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICogfSk7XG4gKi9cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5nZXRDbGllbnRJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2NsaWVudFByb21pc2UudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgcmV0dXJuIGNsaWVudC5nZXRDb25maWd1cmF0aW9uKCkuZ2F0ZXdheUNvbmZpZ3VyYXRpb24ucGF5cGFsLmNsaWVudElkO1xuICB9KTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgd2hlbiB0aGUgUGF5UGFsIFNESyBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgbG9hZGVkIG9udG8gdGhlIHBhZ2UuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIEEgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gbW9kaWZ5IHRoZSBxdWVyeSBwYXJhbXMgYW5kIGRhdGEtYXR0cmlidXRlcyBvbiB0aGUgUGF5UGFsIFNESy4gQSBzdWJzZXQgb2YgdGhlIHBhcmFtZXRlcnMgYXJlIGxpc3RlZCBiZWxvdy4gRm9yIGEgZnVsbCBsaXN0IG9mIHF1ZXJ5IHBhcmFtcywgc2VlIHRoZSBbUGF5UGFsIGRvY3NdKGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vZG9jcy9jaGVja291dC9yZWZlcmVuY2UvY3VzdG9taXplLXNkay8/bWFyaz1xdWVyeSNxdWVyeS1wYXJhbWV0ZXJzKS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jbGllbnQtaWRdIEJ5IGRlZmF1bHQsIHRoaXMgd2lsbCBiZSB0aGUgY2xpZW50IGlkIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXV0aG9yaXphdGlvbiB1c2VkIHRvIGNyZWF0ZSB0aGUgQnJhaW50cmVlIGNvbXBvbmVudC4gV2hlbiB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggcGFzc2luZyBgYXV0aG9yaXphdGlvbmAgd2hlbiBjcmVhdGluZyB0aGUgUGF5UGFsIENoZWNrb3V0IGNvbXBvbmVudCwgeW91IGNhbiBzcGVlZCB1cCB0aGUgbG9hZGluZyBvZiB0aGUgUGF5UGFsIFNESy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pbnRlbnQ9XCJhdXRob3JpemVcIl0gQnkgZGVmYXVsdCwgdGhlIFBheVBhbCBTREsgZGVmYXVsdHMgdG8gYW4gaW50ZW50IG9mIGBjYXB0dXJlYC4gU2luY2UgdGhlIGRlZmF1bHQgaW50ZW50IHdoZW4gY2FsbGluZyB7QGxpbmsgUGF5UGFsQ2hlY2tvdXQjY3JlYXRlUGF5bWVudHxgY3JlYXRlUGF5bWVudGB9IGlzIGBhdXRob3JpemVgLCB0aGUgUGF5UGFsIFNESyB3aWxsIGJlIGxvYWRlZCB3aXRoIGBpbnRlbnQ9YXV0aG9yaXplYC4gSWYgeW91IHdpc2ggdG8gdXNlIGEgZGlmZmVyZW50IGludGVudCB3aGVuIGNhbGxpbmcge0BsaW5rIFBheVBhbENoZWNrb3V0I2NyZWF0ZVBheW1lbnR8YGNyZWF0ZVBheW1lbnRgfSwgbWFrZSBzdXJlIGl0IG1hdGNoZXMgaGVyZS4gSWYgYHNhbGVgIGlzIHVzZWQsIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGBjYXB0dXJlYCBmb3IgdGhlIFBheVBhbCBTREsuIElmIHRoZSBgdmF1bHQ6IHRydWVgIHBhcmFtIGlzIHVzZWQsIGB0b2tlbml6ZWAgd2lsbCBiZSBwYXNzZWQgYXMgdGhlIGRlZmF1bHQgaW50ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsZT1lbl9VU10gVXNlIHRoaXMgb3B0aW9uIHRvIGNoYW5nZSB0aGUgbGFuZ3VhZ2UsIGxpbmtzLCBhbmQgdGVybWlub2xvZ3kgdXNlZCBpbiB0aGUgUGF5UGFsIGZsb3cuIFRoaXMgbG9jYWxlIHdpbGwgYmUgdXNlZCB1bmxlc3MgdGhlIGJ1eWVyIGhhcyBzZXQgYSBwcmVmZXJyZWQgbG9jYWxlIGZvciB0aGVpciBhY2NvdW50LiBJZiBhbiB1bnN1cHBvcnRlZCBsb2NhbGUgaXMgc3VwcGxpZWQsIGEgZmFsbGJhY2sgbG9jYWxlIChkZXRlcm1pbmVkIGJ5IGJ1eWVyIHByZWZlcmVuY2Ugb3IgYnJvd3NlciBkYXRhKSB3aWxsIGJlIHVzZWQgYW5kIG5vIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICpcbiAqIFN1cHBvcnRlZCBsb2NhbGVzIGFyZTpcbiAqIGBkYV9ES2AsXG4gKiBgZGVfREVgLFxuICogYGVuX0FVYCxcbiAqIGBlbl9HQmAsXG4gKiBgZW5fVVNgLFxuICogYGVzX0VTYCxcbiAqIGBmcl9DQWAsXG4gKiBgZnJfRlJgLFxuICogYGlkX0lEYCxcbiAqIGBpdF9JVGAsXG4gKiBgamFfSlBgLFxuICogYGtvX0tSYCxcbiAqIGBubF9OTGAsXG4gKiBgbm9fTk9gLFxuICogYHBsX1BMYCxcbiAqIGBwdF9CUmAsXG4gKiBgcHRfUFRgLFxuICogYHJ1X1JVYCxcbiAqIGBzdl9TRWAsXG4gKiBgdGhfVEhgLFxuICogYHpoX0NOYCxcbiAqIGB6aF9IS2AsXG4gKiBhbmQgYHpoX1RXYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY3VycmVuY3k9XCJVU0RcIl0gSWYgYSBjdXJyZW5jeSBpcyBwYXNzZWQgaW4ge0BsaW5rIFBheVBhbENoZWNrb3V0I2NyZWF0ZVBheW1lbnR8YGNyZWF0ZVBheW1lbnRgfSwgaXQgbXVzdCBtYXRjaCB0aGUgY3VycmVuY3kgcGFzc2VkIGhlcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnZhdWx0XSBNdXN0IGJlIGB0cnVlYCB3aGVuIHVzaW5nIGBmbG93OiB2YXVsdGAgaW4ge0BsaW5rIFBheVBhbENoZWNrb3V0I2NyZWF0ZVBheW1lbnR8YGNyZWF0ZVBheW1lbnRgfS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jb21wb25lbnRzPWJ1dHRvbnNdIEJ5IGRlZmF1bHQsIHRoZSBCcmFpbnRyZWUgU0RLIHdpbGwgb25seSBsb2FkIHRoZSBQYXlQYWwgc21hcnQgYnV0dG9ucyBjb21wb25lbnQuIElmIHlvdSB3b3VsZCBsaWtlIHRvIGxvYWQganVzdCB0aGUgW21lc3NhZ2VzIGNvbXBvbmVudF0oaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9kb2NzL2J1c2luZXNzL2NoZWNrb3V0L2FkZC1jYXBhYmlsaXRpZXMvY3JlZGl0LW1lc3NhZ2luZy8pLCBwYXNzIGBtZXNzYWdlc2AuIElmIHlvdSB3b3VsZCBsaWtlIHRvIGxvYWQgYm90aCwgcGFzcyBgYnV0dG9ucyxtZXNzYWdlc2BcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5kYXRhQXR0cmlidXRlc10gVGhlIGRhdGEgYXR0cmlidXRlcyB0byBhcHBseSB0byB0aGUgc2NyaXB0LiBBbnkgZGF0YSBhdHRyaWJ1dGUgY2FuIGJlIHBhc3NlZC4gQSBzdWJzZXQgb2YgdGhlIHBhcmFtZXRlcnMgYXJlIGxpc3RlZCBiZWxvdy4gRm9yIGEgZnVsbCBsaXN0IG9mIGRhdGEgYXR0cmlidXRlcywgc2VlIHRoZSBbUGF5UGFsIGRvY3NdKGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vZG9jcy9jaGVja291dC9yZWZlcmVuY2UvY3VzdG9taXplLXNkay8jc2NyaXB0LXBhcmFtZXRlcnMpLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmRhdGFBdHRyaWJ1dGVzLmNsaWVudC10b2tlbl0gVGhlIGNsaWVudCB0b2tlbiB0byB1c2UgaW4gdGhlIHNjcmlwdC4gKHVzdWFsbHkgbm90IG5lZWRlZClcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kYXRhQXR0cmlidXRlcy5jc3Atbm9uY2VdIFNlZSB0aGUgW1BheVBhbCBkb2NzIGFib3V0IGNvbnRlbnQgc2VjdXJpdHkgbm9uY2VzXShodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2RvY3MvY2hlY2tvdXQvcmVmZXJlbmNlL2N1c3RvbWl6ZS1zZGsvI2NzcC1ub25jZSkuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxlZCB3aGVuIHRoZSBQYXlQYWwgU0RLIGhhcyBiZWVuIGxvYWRlZCBvbnRvIHRoZSBwYWdlLiBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIHRoZSBQYXlQYWwgQ2hlY2tvdXQgaW5zdGFuY2UuIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSByZXNvbHZlcyB3aXRoIHRoZSBQYXlQYWwgQ2hlY2tvdXQgaW5zdGFuY2Ugd2hlbiB0aGUgUGF5UGFsIFNESyBoYXMgYmVlbiBsb2FkZWQgb250byB0aGUgcGFnZS5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5XaXRob3V0IG9wdGlvbnM8L2NhcHRpb24+XG4gKiBwYXlwYWxDaGVja291dEluc3RhbmNlLmxvYWRQYXlQYWxTREsoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAqICAgLy8gd2luZG93LnBheXBhbC5CdXR0b25zIGlzIG5vdyBhdmFpbGFibGUgdG8gdXNlXG4gKiB9KTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggb3B0aW9uczwvY2FwdGlvbj5cbiAqIHBheXBhbENoZWNrb3V0SW5zdGFuY2UubG9hZFBheVBhbFNESyh7XG4gKiAgICdjbGllbnQtaWQnOiAnUGF5UGFsIENsaWVudCBJZCcsIC8vIENhbiBzcGVlZCB1cCByZW5kZXJpbmcgdGltZSB0byBoYXJkY29kZSB0aGlzIHZhbHVlXG4gKlxuICogICBpbnRlbnQ6ICdjYXB0dXJlJywgLy8gTWFrZSBzdXJlIHRoaXMgdmFsdWUgbWF0Y2hlcyB0aGUgdmFsdWUgaW4gY3JlYXRlUGF5bWVudFxuICogICBjdXJyZW5jeTogJ1VTRCcsIC8vIE1ha2Ugc3VyZSB0aGlzIHZhbHVlIG1hdGNoZXMgdGhlIHZhbHVlIGluIGNyZWF0ZVBheW1lbnRcbiAqIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICogICAvLyB3aW5kb3cucGF5cGFsLkJ1dHRvbnMgaXMgbm93IGF2YWlsYWJsZSB0byB1c2VcbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+V2l0aCBWYXVsdGluZzwvY2FwdGlvbj5cbiAqIHBheXBhbENoZWNrb3V0SW5zdGFuY2UubG9hZFBheVBhbFNESyh7XG4gKiAgIHZhdWx0OiB0cnVlXG4gKiB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAqICAgLy8gd2luZG93LnBheXBhbC5CdXR0b25zIGlzIG5vdyBhdmFpbGFibGUgdG8gdXNlXG4gKiB9KTtcbiAqL1xuUGF5UGFsQ2hlY2tvdXQucHJvdG90eXBlLmxvYWRQYXlQYWxTREsgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgaWRQcm9taXNlLCBzcmM7XG4gIHZhciBsb2FkUHJvbWlzZSA9IG5ldyBFeHRlbmRlZFByb21pc2UoKTtcbiAgdmFyIGRhdGFBdHRyaWJ1dGVzID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5kYXRhQXR0cmlidXRlcykgfHwge307XG4gIHZhciB1c2VySWRUb2tlbiA9XG4gICAgZGF0YUF0dHJpYnV0ZXNbXCJ1c2VyLWlkLXRva2VuXCJdIHx8IGRhdGFBdHRyaWJ1dGVzW1wiZGF0YS11c2VyLWlkLXRva2VuXCJdO1xuXG4gIGlmICghdXNlcklkVG9rZW4pIHtcbiAgICB1c2VySWRUb2tlbiA9XG4gICAgICB0aGlzLl9hdXRob3JpemF0aW9uSW5mb3JtYXRpb24uZmluZ2VycHJpbnQgJiZcbiAgICAgIHRoaXMuX2F1dGhvcml6YXRpb25JbmZvcm1hdGlvbi5maW5nZXJwcmludC5zcGxpdChcIj9cIilbMF07XG4gIH1cblxuICB0aGlzLl9wYXlwYWxTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuXG4gIC8vIE5FWFRfTUFKT1JfVkVSU0lPTlxuICAvLyB0aGlzIG9wdGlvbnMgb2JqZWN0IHNob3VsZCBoYXZlIDIgcHJvcGVydGllczpcbiAgLy8gKiBxdWVyeVBhcmFtc1xuICAvLyAqIGRhdGFBdHRyaWJ1dGVzXG4gIC8vIHNob3VsZCBtYWtlIG9yZ2FuaXppbmcgdGhpcyBiZXR0ZXIgdGhhbiBzcXVhc2hpbmdcbiAgLy8gYWxsIHRoZSBxdWVyeSBwYXJhbXMgYXQgdGhlIHRvcCBsZXZlbCBhbmQgZXh0cmFjdGluZ1xuICAvLyB0aGUgZGF0YSBhdHRyaWJ1dGVzXG4gIG9wdGlvbnMgPSBhc3NpZ24oXG4gICAge30sXG4gICAge1xuICAgICAgY29tcG9uZW50czogXCJidXR0b25zXCIsXG4gICAgfSxcbiAgICBvcHRpb25zXG4gICk7XG4gIGRlbGV0ZSBvcHRpb25zLmRhdGFBdHRyaWJ1dGVzO1xuXG4gIC8vIE5FWFRfTUFKT1JfVkVSU0lPTiBpZiBtZXJjaGFudCBwYXNzZXMgYW4gZXhwbGljaXQgaW50ZW50LFxuICAvLyBjdXJyZW5jeSwgYW1vdW50LCBldGMsIHNhdmUgdGhvc2UgZm9yIHVzZSBpbiBjcmVhdGVQYXltZW50XG4gIC8vIGlmIG5vIGV4cGxpY2l0IHBhcmFtIG9mIHRoYXQgdHlwZSBpcyBwYXNzZWQgaW4gd2hlbiBjYWxsaW5nXG4gIC8vIGNyZWF0ZVBheW1lbnQgdG8gcmVkdWNlIHRoZSBudW1iZXIgb2YgaXRlbXMgdGhhdCBuZWVkIHRvIGJlXG4gIC8vIGR1cGxpY2F0ZWQgaGVyZSBhbmQgaW4gY3JlYXRlUGF5bWVudFxuICBpZiAob3B0aW9ucy52YXVsdCkge1xuICAgIG9wdGlvbnMuaW50ZW50ID0gb3B0aW9ucy5pbnRlbnQgfHwgXCJ0b2tlbml6ZVwiO1xuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMuaW50ZW50ID0gb3B0aW9ucy5pbnRlbnQgfHwgXCJhdXRob3JpemVcIjtcbiAgICBvcHRpb25zLmN1cnJlbmN5ID0gb3B0aW9ucy5jdXJyZW5jeSB8fCBcIlVTRFwiO1xuICB9XG5cbiAgc3JjID0gXCJodHRwczovL3d3dy5wYXlwYWwuY29tL3Nkay9qcz9cIjtcbiAgdGhpcy5fcGF5cGFsU2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBsb2FkUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG5cbiAgT2JqZWN0LmtleXMoZGF0YUF0dHJpYnV0ZXMpLmZvckVhY2goXG4gICAgZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgdGhpcy5fcGF5cGFsU2NyaXB0LnNldEF0dHJpYnV0ZShcbiAgICAgICAgXCJkYXRhLVwiICsgYXR0cmlidXRlLnJlcGxhY2UoL15kYXRhXFwtLywgXCJcIiksXG4gICAgICAgIGRhdGFBdHRyaWJ1dGVzW2F0dHJpYnV0ZV1cbiAgICAgICk7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG5cbiAgaWYgKG9wdGlvbnNbXCJjbGllbnQtaWRcIl0pIHtcbiAgICBpZFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUob3B0aW9uc1tcImNsaWVudC1pZFwiXSk7XG4gIH0gZWxzZSB7XG4gICAgaWRQcm9taXNlID0gdGhpcy5nZXRDbGllbnRJZCgpO1xuICB9XG5cbiAgaWRQcm9taXNlLnRoZW4oXG4gICAgZnVuY3Rpb24gKGlkKSB7XG4gICAgICBvcHRpb25zW1wiY2xpZW50LWlkXCJdID0gaWQ7XG5cbiAgICAgIGlmICh0aGlzLl9hdXRvU2V0RGF0YVVzZXJJZFRva2VuICYmIHVzZXJJZFRva2VuKSB7XG4gICAgICAgIHRoaXMuX3BheXBhbFNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXVzZXItaWQtdG9rZW5cIiwgdXNlcklkVG9rZW4pO1xuXG4gICAgICAgIC8vIHByZWxvYWRpbmcgaW1wcm92ZXMgdGhlIHJlbmRlcmluZyB0aW1lIG9mIHRoZSBQYXlQYWwgYnV0dG9uXG4gICAgICAgIHRoaXMuX2F0dGFjaFByZWxvYWRQaXhlbCh7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHVzZXJJZFRva2VuOiB1c2VySWRUb2tlbixcbiAgICAgICAgICBhbW91bnQ6IGRhdGFBdHRyaWJ1dGVzLmFtb3VudCxcbiAgICAgICAgICBjdXJyZW5jeTogb3B0aW9ucy5jdXJyZW5jeSxcbiAgICAgICAgICBtZXJjaGFudElkOiBvcHRpb25zW1wibWVyY2hhbnQtaWRcIl0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wYXlwYWxTY3JpcHQuc3JjID0gcXVlcnlzdHJpbmcucXVlcnlpZnkoc3JjLCBvcHRpb25zKTtcbiAgICAgIGRvY3VtZW50LmhlYWQuaW5zZXJ0QmVmb3JlKFxuICAgICAgICB0aGlzLl9wYXlwYWxTY3JpcHQsXG4gICAgICAgIGRvY3VtZW50LmhlYWQuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgICk7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG5cbiAgcmV0dXJuIGxvYWRQcm9taXNlLnRoZW4oXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG59O1xuXG5QYXlQYWxDaGVja291dC5wcm90b3R5cGUuX2F0dGFjaFByZWxvYWRQaXhlbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciByZXF1ZXN0O1xuICB2YXIgaWQgPSBvcHRpb25zLmlkO1xuICB2YXIgdXNlcklkVG9rZW4gPSBvcHRpb25zLnVzZXJJZFRva2VuO1xuICB2YXIgZW52ID0gdGhpcy5fYXV0aG9yaXphdGlvbkluZm9ybWF0aW9uLmVudmlyb25tZW50O1xuICB2YXIgc3ViZG9tYWluID0gZW52ID09PSBcInByb2R1Y3Rpb25cIiA/IFwiXCIgOiBcInNhbmRib3guXCI7XG4gIHZhciB1cmwgPSBQQVlQQUxfU0RLX1BSRUxPQURfVVJMLnJlcGxhY2UoXCJ7RU5WfVwiLCBzdWJkb21haW4pO1xuICB2YXIgcHJlbG9hZE9wdGlvbnMgPSB7XG4gICAgXCJjbGllbnQtaWRcIjogaWQsXG4gICAgXCJ1c2VyLWlkLXRva2VuXCI6IHVzZXJJZFRva2VuLFxuICB9O1xuXG4gIGlmIChvcHRpb25zLmFtb3VudCkge1xuICAgIHByZWxvYWRPcHRpb25zLmFtb3VudCA9IG9wdGlvbnMuYW1vdW50O1xuICB9XG4gIGlmIChvcHRpb25zLmN1cnJlbmN5KSB7XG4gICAgcHJlbG9hZE9wdGlvbnMuY3VycmVuY3kgPSBvcHRpb25zLmN1cnJlbmN5O1xuICB9XG4gIGlmIChvcHRpb25zLm1lcmNoYW50SWQpIHtcbiAgICBwcmVsb2FkT3B0aW9uc1tcIm1lcmNoYW50LWlkXCJdID0gb3B0aW9ucy5tZXJjaGFudElkO1xuICB9XG5cbiAgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICByZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcXVlcnlzdHJpbmcucXVlcnlpZnkodXJsLCBwcmVsb2FkT3B0aW9ucykpO1xuICByZXF1ZXN0LnNlbmQoKTtcbn07XG5cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5fZm9ybWF0UGF5bWVudFJlc291cmNlRGF0YSA9IGZ1bmN0aW9uIChcbiAgb3B0aW9ucyxcbiAgY29uZmlnXG4pIHtcbiAgdmFyIGtleTtcbiAgdmFyIGdhdGV3YXlDb25maWd1cmF0aW9uID0gdGhpcy5fY29uZmlndXJhdGlvbi5nYXRld2F5Q29uZmlndXJhdGlvbjtcbiAgLy8gTkVYVF9NQUpPUl9WRVJTSU9OIGRlZmF1bHQgdmFsdWUgZm9yIGludGVudCBpbiBQYXlQYWwgU0RLIGlzIGNhcHR1cmVcbiAgLy8gYnV0IG91ciBpbnRlZ3JhdGlvbnMgZGVmYXVsdCB2YWx1ZSBpcyBhdXRob3JpemUuIERlZmF1bHQgdGhpcyB0byBjYXB0dXJlXG4gIC8vIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gIHZhciBpbnRlbnQgPSBvcHRpb25zLmludGVudDtcbiAgdmFyIHBheW1lbnRSZXNvdXJjZSA9IHtcbiAgICAvLyByZXR1cm5VcmwgYW5kIGNhbmNlbFVybCBhcmUgcmVxdWlyZWQgaW4gaGVybWVzIGNyZWF0ZV9wYXltZW50X3Jlc291cmNlIHJvdXRlXG4gICAgLy8gYnV0IGFyZSBub3QgdXNlZCBieSB0aGUgUGF5UGFsIHNkaywgZXhjZXB0IHRvIHJlZGlyZWN0IHRvIGFuIGVycm9yIHBhZ2VcbiAgICByZXR1cm5Vcmw6IGNvbmZpZy5yZXR1cm5VcmwgfHwgXCJodHRwczovL3d3dy5wYXlwYWwuY29tL2NoZWNrb3V0bm93L2Vycm9yXCIsXG4gICAgY2FuY2VsVXJsOiBjb25maWcuY2FuY2VsVXJsIHx8IFwiaHR0cHM6Ly93d3cucGF5cGFsLmNvbS9jaGVja291dG5vdy9lcnJvclwiLFxuICAgIG9mZmVyUGF5cGFsQ3JlZGl0OiBvcHRpb25zLm9mZmVyQ3JlZGl0ID09PSB0cnVlLFxuICAgIG1lcmNoYW50QWNjb3VudElkOiB0aGlzLl9tZXJjaGFudEFjY291bnRJZCxcbiAgICBleHBlcmllbmNlUHJvZmlsZToge1xuICAgICAgYnJhbmROYW1lOiBvcHRpb25zLmRpc3BsYXlOYW1lIHx8IGdhdGV3YXlDb25maWd1cmF0aW9uLnBheXBhbC5kaXNwbGF5TmFtZSxcbiAgICAgIGxvY2FsZUNvZGU6IG9wdGlvbnMubG9jYWxlLFxuICAgICAgbm9TaGlwcGluZzogKCFvcHRpb25zLmVuYWJsZVNoaXBwaW5nQWRkcmVzcykudG9TdHJpbmcoKSxcbiAgICAgIGFkZHJlc3NPdmVycmlkZTogb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3NFZGl0YWJsZSA9PT0gZmFsc2UsXG4gICAgICBsYW5kaW5nUGFnZVR5cGU6IG9wdGlvbnMubGFuZGluZ1BhZ2VUeXBlLFxuICAgIH0sXG4gICAgc2hpcHBpbmdPcHRpb25zOiBvcHRpb25zLnNoaXBwaW5nT3B0aW9ucyxcbiAgfTtcblxuICBpZiAob3B0aW9ucy5mbG93ID09PSBcImNoZWNrb3V0XCIpIHtcbiAgICBwYXltZW50UmVzb3VyY2UuYW1vdW50ID0gb3B0aW9ucy5hbW91bnQ7XG4gICAgcGF5bWVudFJlc291cmNlLmN1cnJlbmN5SXNvQ29kZSA9IG9wdGlvbnMuY3VycmVuY3k7XG4gICAgcGF5bWVudFJlc291cmNlLnJlcXVlc3RCaWxsaW5nQWdyZWVtZW50ID0gb3B0aW9ucy5yZXF1ZXN0QmlsbGluZ0FncmVlbWVudDtcblxuICAgIGlmIChpbnRlbnQpIHtcbiAgICAgIC8vICdzYWxlJyBoYXMgYmVlbiBjaGFuZ2VkIHRvICdjYXB0dXJlJyBpbiBQYXlQYWwncyBiYWNrZW5kLCBidXRcbiAgICAgIC8vIHdlIHVzZSBhbiBvbGQgdmVyc2lvbiB3aXRoICdzYWxlJy4gV2UgcHJvdmlkZSBjYXB0dXJlIGFzIGFuIGFsaWFzXG4gICAgICAvLyB0byBtYXRjaCB0aGUgUGF5UGFsIFNES1xuICAgICAgaWYgKGludGVudCA9PT0gXCJjYXB0dXJlXCIpIHtcbiAgICAgICAgaW50ZW50ID0gXCJzYWxlXCI7XG4gICAgICB9XG4gICAgICBwYXltZW50UmVzb3VyY2UuaW50ZW50ID0gaW50ZW50O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KFwibGluZUl0ZW1zXCIpKSB7XG4gICAgICBwYXltZW50UmVzb3VyY2UubGluZUl0ZW1zID0gb3B0aW9ucy5saW5lSXRlbXM7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoXCJ2YXVsdEluaXRpYXRlZENoZWNrb3V0UGF5bWVudE1ldGhvZFRva2VuXCIpKSB7XG4gICAgICBwYXltZW50UmVzb3VyY2UudmF1bHRJbml0aWF0ZWRDaGVja291dFBheW1lbnRNZXRob2RUb2tlbiA9XG4gICAgICAgIG9wdGlvbnMudmF1bHRJbml0aWF0ZWRDaGVja291dFBheW1lbnRNZXRob2RUb2tlbjtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcInNoaXBwaW5nT3B0aW9uc1wiKSkge1xuICAgICAgcGF5bWVudFJlc291cmNlLnNoaXBwaW5nT3B0aW9ucyA9IG9wdGlvbnMuc2hpcHBpbmdPcHRpb25zO1xuICAgIH1cblxuICAgIGZvciAoa2V5IGluIG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUpIHtcbiAgICAgIGlmIChvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgcGF5bWVudFJlc291cmNlW2tleV0gPSBvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoXCJiaWxsaW5nQWdyZWVtZW50RGV0YWlsc1wiKSkge1xuICAgICAgcGF5bWVudFJlc291cmNlLmJpbGxpbmdBZ3JlZW1lbnREZXRhaWxzID0gb3B0aW9ucy5iaWxsaW5nQWdyZWVtZW50RGV0YWlscztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcGF5bWVudFJlc291cmNlLnNoaXBwaW5nQWRkcmVzcyA9IG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGU7XG5cbiAgICBpZiAob3B0aW9ucy5iaWxsaW5nQWdyZWVtZW50RGVzY3JpcHRpb24pIHtcbiAgICAgIHBheW1lbnRSZXNvdXJjZS5kZXNjcmlwdGlvbiA9IG9wdGlvbnMuYmlsbGluZ0FncmVlbWVudERlc2NyaXB0aW9uO1xuICAgIH1cbiAgfVxuXG4gIC8vIHRoaXMgbmVlZHMgdG8gYmUgc2V0IG91dHNpZGUgb2YgdGhlIGJsb2NrIHdoZXJlIGFkZCBpdCB0byB0aGVcbiAgLy8gcGF5bWVudCByZXF1ZXN0IHNvIHRoYXQgYSBmb2xsb3cgdXAgdG9rZW5pemF0aW9uIGNhbGwgY2FuIHVzZSBpdCxcbiAgLy8gYnV0IGlmIGEgc2Vjb25kIGNyZWF0ZSBwYXltZW50IHJlc291cmNlIGNhbGwgaXMgbWFkZSB3aXRob3V0XG4gIC8vIHRoZSBjb3JyZWxhdGlvbiBpZCwgd2Ugd2FudCB0byByZXNldCBpdCB0byB1bmRlZmluZWQgc28gdGhhdCB0aGVcbiAgLy8gdG9rZW5pemF0aW9uIGNhbGwgZG9lcyBub3QgdXNlIGEgc3RhbGUgY29ycmVsYXRpb24gaWRcbiAgdGhpcy5fcmlza0NvcnJlbGF0aW9uSWQgPSBvcHRpb25zLnJpc2tDb3JyZWxhdGlvbklkO1xuICBpZiAob3B0aW9ucy5yaXNrQ29ycmVsYXRpb25JZCkge1xuICAgIHBheW1lbnRSZXNvdXJjZS5jb3JyZWxhdGlvbklkID0gdGhpcy5fcmlza0NvcnJlbGF0aW9uSWQ7XG4gIH1cblxuICByZXR1cm4gcGF5bWVudFJlc291cmNlO1xufTtcblxuLyoqXG4gKiBAaWdub3JlXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gX3ZlcmlmeUNvbnNpc3RlbnRDdXJyZW5jeVxuICogVmVyaWZpZXMgdGhhdCBgb3B0aW9ucy5jdXJyZW5jeWAgYW5kIHRoZSBjdXJyZW5jaWVzIGZvciBlYWNoIGBzaGlwcGluZ09wdGlvbmAgdGhlIHNhbWUuXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBgb3B0aW9uc2AgcHJvdmlkZWQgZm9yIGB1cGRhdGVQYXltZW50YC5cbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlzIGN1cnJlbmNpZXMgbWF0Y2ggKG9yIG5vIHNoaXBwaW5nIG9wdGlvbnMpOyBmYWxzZSBpZiBjdXJyZW5jaWVzIGRvIG5vdCBtYXRjaC5cbiAqL1xuXG5QYXlQYWxDaGVja291dC5wcm90b3R5cGUuX3ZlcmlmeUNvbnNpc3RlbnRDdXJyZW5jeSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGlmIChcbiAgICBvcHRpb25zLmN1cnJlbmN5ICYmXG4gICAgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcInNoaXBwaW5nT3B0aW9uc1wiKSAmJlxuICAgIEFycmF5LmlzQXJyYXkob3B0aW9ucy5zaGlwcGluZ09wdGlvbnMpXG4gICkge1xuICAgIHJldHVybiBvcHRpb25zLnNoaXBwaW5nT3B0aW9ucy5ldmVyeShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgaXRlbS5hbW91bnQgJiZcbiAgICAgICAgaXRlbS5hbW91bnQuY3VycmVuY3kgJiZcbiAgICAgICAgb3B0aW9ucy5jdXJyZW5jeS50b0xvd2VyQ2FzZSgpID09PSBpdGVtLmFtb3VudC5jdXJyZW5jeS50b0xvd2VyQ2FzZSgpXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEBzdGF0aWNcbiAqIEBmdW5jdGlvbiBfaGFzTWlzc2luZ09wdGlvblxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQWxsIG9wdGlvbnMgcHJvdmlkZWQgZm9yIGludGlhdGluZyB0aGUgUGF5UGFsIGZsb3cuXG4gKiBAcGFyYW0ge2FycmF5fSByZXF1aXJlZCBBIGxpc3Qgb2YgcmVxdWlyZWQgaW5wdXRzIHRoYXQgbXVzdCBiZSBpbmNsdWRlIGFzIHBhcnQgb2YgdGhlIG9wdGlvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBhIGJvb2xlYW4uXG4gKi9cblxuUGF5UGFsQ2hlY2tvdXQucHJvdG90eXBlLl9oYXNNaXNzaW5nT3B0aW9uID0gZnVuY3Rpb24gKG9wdGlvbnMsIHJlcXVpcmVkKSB7XG4gIHZhciBpLCBvcHRpb247XG5cbiAgcmVxdWlyZWQgPSByZXF1aXJlZCB8fCBbXTtcblxuICBpZiAoXG4gICAgIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoXCJhbW91bnRcIikgJiZcbiAgICAhb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcImxpbmVJdGVtc1wiKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCByZXF1aXJlZC5sZW5ndGg7IGkrKykge1xuICAgIG9wdGlvbiA9IHJlcXVpcmVkW2ldO1xuXG4gICAgaWYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KG9wdGlvbikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cblBheVBhbENoZWNrb3V0LnByb3RvdHlwZS5fZm9ybWF0VXBkYXRlUGF5bWVudERhdGEgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBwYXltZW50UmVzb3VyY2UgPSB7XG4gICAgbWVyY2hhbnRBY2NvdW50SWQ6IHRoaXMuX21lcmNoYW50QWNjb3VudElkLFxuICAgIHBheW1lbnRJZDogb3B0aW9ucy5wYXltZW50SWQgfHwgb3B0aW9ucy5vcmRlcklkLFxuICAgIGN1cnJlbmN5SXNvQ29kZTogb3B0aW9ucy5jdXJyZW5jeSxcbiAgfTtcblxuICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcImFtb3VudFwiKSkge1xuICAgIHBheW1lbnRSZXNvdXJjZS5hbW91bnQgPSBvcHRpb25zLmFtb3VudDtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KFwibGluZUl0ZW1zXCIpKSB7XG4gICAgcGF5bWVudFJlc291cmNlLmxpbmVJdGVtcyA9IG9wdGlvbnMubGluZUl0ZW1zO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoXCJzaGlwcGluZ09wdGlvbnNcIikpIHtcbiAgICBwYXltZW50UmVzb3VyY2Uuc2hpcHBpbmdPcHRpb25zID0gb3B0aW9ucy5zaGlwcGluZ09wdGlvbnM7XG4gIH1cblxuICAvKiBzaGlwcGluZ0FkZHJlc3Mgbm90IHN1cHBvcnRlZCB5ZXQgKi9cbiAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoXCJzaGlwcGluZ0FkZHJlc3NcIikpIHtcbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgc2VsZi5fY2xpZW50UHJvbWlzZSxcbiAgICAgIFwicGF5cGFsLWNoZWNrb3V0LnVwZGF0ZVBheW1lbnQuc2hpcHBpbmdBZGRyZXNzLnByb3ZpZGVkLmJ5LXRoZS1tZXJjaGFudFwiXG4gICAgKTtcblxuICAgIHBheW1lbnRSZXNvdXJjZS5saW5lMSA9IG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzLmxpbmUxO1xuXG4gICAgaWYgKG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzLmhhc093blByb3BlcnR5KFwibGluZTJcIikpIHtcbiAgICAgIHBheW1lbnRSZXNvdXJjZS5saW5lMiA9IG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzLmxpbmUyO1xuICAgIH1cblxuICAgIHBheW1lbnRSZXNvdXJjZS5jaXR5ID0gb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3MuY2l0eTtcbiAgICBwYXltZW50UmVzb3VyY2Uuc3RhdGUgPSBvcHRpb25zLnNoaXBwaW5nQWRkcmVzcy5zdGF0ZTtcbiAgICBwYXltZW50UmVzb3VyY2UucG9zdGFsQ29kZSA9IG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzLnBvc3RhbENvZGU7XG4gICAgcGF5bWVudFJlc291cmNlLmNvdW50cnlDb2RlID0gb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3MuY291bnRyeUNvZGU7XG5cbiAgICBpZiAob3B0aW9ucy5zaGlwcGluZ0FkZHJlc3MuaGFzT3duUHJvcGVydHkoXCJwaG9uZVwiKSkge1xuICAgICAgcGF5bWVudFJlc291cmNlLnBob25lID0gb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3MucGhvbmU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzLmhhc093blByb3BlcnR5KFwicmVjaXBpZW50TmFtZVwiKSkge1xuICAgICAgcGF5bWVudFJlc291cmNlLnJlY2lwaWVudE5hbWUgPSBvcHRpb25zLnNoaXBwaW5nQWRkcmVzcy5yZWNpcGllbnROYW1lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXltZW50UmVzb3VyY2U7XG59O1xuXG5QYXlQYWxDaGVja291dC5wcm90b3R5cGUuX2Zvcm1hdFRva2VuaXplRGF0YSA9IGZ1bmN0aW9uIChvcHRpb25zLCBwYXJhbXMpIHtcbiAgdmFyIGNsaWVudENvbmZpZ3VyYXRpb24gPSB0aGlzLl9jb25maWd1cmF0aW9uO1xuICB2YXIgZ2F0ZXdheUNvbmZpZ3VyYXRpb24gPSBjbGllbnRDb25maWd1cmF0aW9uLmdhdGV3YXlDb25maWd1cmF0aW9uO1xuICB2YXIgaXNUb2tlbml6YXRpb25LZXkgPVxuICAgIGNsaWVudENvbmZpZ3VyYXRpb24uYXV0aG9yaXphdGlvblR5cGUgPT09IFwiVE9LRU5JWkFUSU9OX0tFWVwiO1xuICB2YXIgaXNWYXVsdEZsb3cgPSBvcHRpb25zLmZsb3cgPT09IFwidmF1bHRcIjtcbiAgdmFyIGNvcnJlbGF0aW9uSWQgPVxuICAgIHRoaXMuX3Jpc2tDb3JyZWxhdGlvbklkIHx8IHBhcmFtcy5iaWxsaW5nVG9rZW4gfHwgcGFyYW1zLmVjVG9rZW47XG4gIHZhciBkYXRhID0ge1xuICAgIHBheXBhbEFjY291bnQ6IHtcbiAgICAgIGNvcnJlbGF0aW9uSWQ6IGNvcnJlbGF0aW9uSWQsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHZhbGlkYXRlOiBpc1ZhdWx0RmxvdyAmJiAhaXNUb2tlbml6YXRpb25LZXkgJiYgb3B0aW9ucy52YXVsdCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICBpZiAoaXNWYXVsdEZsb3cpIHtcbiAgICBkYXRhLnBheXBhbEFjY291bnQuYmlsbGluZ0FncmVlbWVudFRva2VuID0gcGFyYW1zLmJpbGxpbmdUb2tlbjtcbiAgfSBlbHNlIHtcbiAgICBkYXRhLnBheXBhbEFjY291bnQucGF5bWVudFRva2VuID0gcGFyYW1zLnBheW1lbnRJZCB8fCBwYXJhbXMub3JkZXJJZDtcbiAgICBkYXRhLnBheXBhbEFjY291bnQucGF5ZXJJZCA9IHBhcmFtcy5wYXllcklkO1xuICAgIGRhdGEucGF5cGFsQWNjb3VudC51bmlsYXRlcmFsID1cbiAgICAgIGdhdGV3YXlDb25maWd1cmF0aW9uLnBheXBhbC51bnZldHRlZE1lcmNoYW50O1xuXG4gICAgaWYgKG9wdGlvbnMuaW50ZW50KSB7XG4gICAgICBkYXRhLnBheXBhbEFjY291bnQuaW50ZW50ID0gb3B0aW9ucy5pbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMuX21lcmNoYW50QWNjb3VudElkKSB7XG4gICAgZGF0YS5tZXJjaGFudEFjY291bnRJZCA9IHRoaXMuX21lcmNoYW50QWNjb3VudElkO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG5QYXlQYWxDaGVja291dC5wcm90b3R5cGUuX2Zvcm1hdFRva2VuaXplUGF5bG9hZCA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICB2YXIgcGF5bG9hZDtcbiAgdmFyIGFjY291bnQgPSB7fTtcblxuICBpZiAocmVzcG9uc2UucGF5cGFsQWNjb3VudHMpIHtcbiAgICBhY2NvdW50ID0gcmVzcG9uc2UucGF5cGFsQWNjb3VudHNbMF07XG4gIH1cblxuICBwYXlsb2FkID0ge1xuICAgIG5vbmNlOiBhY2NvdW50Lm5vbmNlLFxuICAgIGRldGFpbHM6IHt9LFxuICAgIHR5cGU6IGFjY291bnQudHlwZSxcbiAgfTtcblxuICBpZiAoYWNjb3VudC5kZXRhaWxzICYmIGFjY291bnQuZGV0YWlscy5wYXllckluZm8pIHtcbiAgICBwYXlsb2FkLmRldGFpbHMgPSBhY2NvdW50LmRldGFpbHMucGF5ZXJJbmZvO1xuICB9XG5cbiAgaWYgKGFjY291bnQuZGV0YWlscyAmJiBhY2NvdW50LmRldGFpbHMuY3JlZGl0RmluYW5jaW5nT2ZmZXJlZCkge1xuICAgIHBheWxvYWQuY3JlZGl0RmluYW5jaW5nT2ZmZXJlZCA9IGFjY291bnQuZGV0YWlscy5jcmVkaXRGaW5hbmNpbmdPZmZlcmVkO1xuICB9XG5cbiAgaWYgKGFjY291bnQuZGV0YWlscyAmJiBhY2NvdW50LmRldGFpbHMuc2hpcHBpbmdPcHRpb25JZCkge1xuICAgIHBheWxvYWQuc2hpcHBpbmdPcHRpb25JZCA9IGFjY291bnQuZGV0YWlscy5zaGlwcGluZ09wdGlvbklkO1xuICB9XG5cbiAgaWYgKGFjY291bnQuZGV0YWlscyAmJiBhY2NvdW50LmRldGFpbHMuY29icmFuZGVkQ2FyZExhYmVsKSB7XG4gICAgcGF5bG9hZC5jb2JyYW5kZWRDYXJkTGFiZWwgPSBhY2NvdW50LmRldGFpbHMuY29icmFuZGVkQ2FyZExhYmVsO1xuICB9XG5cbiAgcmV0dXJuIHBheWxvYWQ7XG59O1xuXG4vKipcbiAqIENsZWFubHkgdGVhciBkb3duIGFueXRoaW5nIHNldCB1cCBieSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvcGF5cGFsLWNoZWNrb3V0LmNyZWF0ZXxjcmVhdGV9LlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsZWQgb25jZSB0ZWFyZG93biBpcyBjb21wbGV0ZS4gTm8gZGF0YSBpcyByZXR1cm5lZCBpZiB0ZWFyZG93biBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5LlxuICogQGV4YW1wbGVcbiAqIHBheXBhbENoZWNrb3V0SW5zdGFuY2UudGVhcmRvd24oKTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggY2FsbGJhY2s8L2NhcHRpb24+XG4gKiBwYXlwYWxDaGVja291dEluc3RhbmNlLnRlYXJkb3duKGZ1bmN0aW9uICgpIHtcbiAqICAgLy8gdGVhcmRvd24gaXMgY29tcGxldGVcbiAqIH0pO1xuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuUGF5UGFsQ2hlY2tvdXQucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgY29udmVydE1ldGhvZHNUb0Vycm9yKHRoaXMsIG1ldGhvZHMoUGF5UGFsQ2hlY2tvdXQucHJvdG90eXBlKSk7XG5cbiAgaWYgKHRoaXMuX3BheXBhbFNjcmlwdCAmJiB0aGlzLl9wYXlwYWxTY3JpcHQucGFyZW50Tm9kZSkge1xuICAgIHRoaXMuX3BheXBhbFNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX3BheXBhbFNjcmlwdCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fZnJhbWVTZXJ2aWNlUHJvbWlzZVxuICAgIC5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBubyBuZWVkIHRvIGVycm9yIGluIHRlYXJkb3duIGZvciBhbiBlcnJvciBzZXR0aW5nIHVwIHRoZSBmcmFtZSBzZXJ2aWNlXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXNlbGYuX2ZyYW1lU2VydmljZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLl9mcmFtZVNlcnZpY2UudGVhcmRvd24oKTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gd3JhcFByb21pc2Uud3JhcFByb3RvdHlwZShQYXlQYWxDaGVja291dCk7XG5cbn0se1wiLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uL2xpYi9hc3NpZ25cIjoxMjEsXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vbGliL2NvbnN0YW50c1wiOjEyNixcIi4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIjoxMjcsXCIuLi9saWIvY29udmVydC10by1icmFpbnRyZWUtZXJyb3JcIjoxMjgsXCIuLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIjoxMjksXCIuLi9saWIvY3JlYXRlLWF1dGhvcml6YXRpb24tZGF0YVwiOjEzMCxcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCI6MTMxLFwiLi4vbGliL2ZyYW1lLXNlcnZpY2UvZXh0ZXJuYWxcIjoxMzksXCIuLi9saWIvbWV0aG9kc1wiOjE1NSxcIi4uL2xpYi9xdWVyeXN0cmluZ1wiOjE1NyxcIi4uL2xpYi91c2UtbWluXCI6MTYwLFwiLi4vcGF5cGFsL3NoYXJlZC9jb25zdGFudHNcIjoxODAsXCIuL2Vycm9yc1wiOjE3NSxcIkBicmFpbnRyZWUvZXh0ZW5kZWQtcHJvbWlzZVwiOjM0LFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0M31dLDE3ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZyYW1lU2VydmljZSA9IF9kZXJlcV8oXCIuLi8uLi9saWIvZnJhbWUtc2VydmljZS9leHRlcm5hbFwiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGNvbnZlcnRUb0JyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9jb252ZXJ0LXRvLWJyYWludHJlZS1lcnJvclwiKTtcbnZhciB1c2VNaW4gPSBfZGVyZXFfKFwiLi4vLi4vbGliL3VzZS1taW5cIik7XG52YXIgb25jZSA9IF9kZXJlcV8oXCIuLi8uLi9saWIvb25jZVwiKTtcbnZhciBWRVJTSU9OID0gXCIzLjEwMC4wXCI7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9jb25zdGFudHNcIik7XG52YXIgSU5URUdSQVRJT05fVElNRU9VVF9NUyA9XG4gIF9kZXJlcV8oXCIuLi8uLi9saWIvY29uc3RhbnRzXCIpLklOVEVHUkFUSU9OX1RJTUVPVVRfTVM7XG52YXIgYW5hbHl0aWNzID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9hbmFseXRpY3NcIik7XG52YXIgbWV0aG9kcyA9IF9kZXJlcV8oXCIuLi8uLi9saWIvbWV0aG9kc1wiKTtcbnZhciBkZWZlcnJlZCA9IF9kZXJlcV8oXCIuLi8uLi9saWIvZGVmZXJyZWRcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9lcnJvcnNcIik7XG52YXIgY29udmVydE1ldGhvZHNUb0Vycm9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIik7XG52YXIgcXVlcnlzdHJpbmcgPSBfZGVyZXFfKFwiLi4vLi4vbGliL3F1ZXJ5c3RyaW5nXCIpO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFBheVBhbH50b2tlbml6ZVBheWxvYWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBub25jZSBUaGUgcGF5bWVudCBtZXRob2Qgbm9uY2UuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgcGF5bWVudCBtZXRob2QgdHlwZSwgYWx3YXlzIGBQYXlQYWxBY2NvdW50YC5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkZXRhaWxzIEFkZGl0aW9uYWwgUGF5UGFsIGFjY291bnQgZGV0YWlscy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmVtYWlsIFVzZXIncyBlbWFpbCBhZGRyZXNzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMucGF5ZXJJZCBVc2VyJ3MgcGF5ZXIgSUQsIHRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgZWFjaCBQYXlQYWwgYWNjb3VudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmZpcnN0TmFtZSBVc2VyJ3MgZ2l2ZW4gbmFtZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmxhc3ROYW1lIFVzZXIncyBzdXJuYW1lLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBkZXRhaWxzLmNvdW50cnlDb2RlIFVzZXIncyAyIGNoYXJhY3RlciBjb3VudHJ5IGNvZGUuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGRldGFpbHMucGhvbmUgVXNlcidzIHBob25lIG51bWJlciAoZS5nLiA1NTUtODY3LTUzMDkpLlxuICogQHByb3BlcnR5IHs/b2JqZWN0fSBkZXRhaWxzLnNoaXBwaW5nQWRkcmVzcyBVc2VyJ3Mgc2hpcHBpbmcgYWRkcmVzcyBkZXRhaWxzLCBvbmx5IGF2YWlsYWJsZSBpZiBzaGlwcGluZyBhZGRyZXNzIGlzIGVuYWJsZWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5zaGlwcGluZ0FkZHJlc3MucmVjaXBpZW50TmFtZSBSZWNpcGllbnQgb2YgcG9zdGFnZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLnNoaXBwaW5nQWRkcmVzcy5saW5lMSBTdHJlZXQgbnVtYmVyIGFuZCBuYW1lLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuc2hpcHBpbmdBZGRyZXNzLmxpbmUyIEV4dGVuZGVkIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5zaGlwcGluZ0FkZHJlc3MuY2l0eSBDaXR5IG9yIGxvY2FsaXR5LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuc2hpcHBpbmdBZGRyZXNzLnN0YXRlIFN0YXRlIG9yIHJlZ2lvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLnNoaXBwaW5nQWRkcmVzcy5wb3N0YWxDb2RlIFBvc3RhbCBjb2RlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuc2hpcHBpbmdBZGRyZXNzLmNvdW50cnlDb2RlIDIgY2hhcmFjdGVyIGNvdW50cnkgY29kZSAoZS5nLiBVUykuXG4gKiBAcHJvcGVydHkgez9vYmplY3R9IGRldGFpbHMuYmlsbGluZ0FkZHJlc3MgVXNlcidzIGJpbGxpbmcgYWRkcmVzcyBkZXRhaWxzLlxuICogTm90IGF2YWlsYWJsZSB0byBhbGwgbWVyY2hhbnRzOyBbY29udGFjdCBzdXBwb3J0XShodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2JyYWludHJlZS9oZWxwKSBmb3IgZGV0YWlscyBvbiBlbGlnaWJpbGl0eSBhbmQgZW5hYmxpbmcgdGhpcyBmZWF0dXJlLlxuICogQWx0ZXJuYXRpdmVseSwgc2VlIGBzaGlwcGluZ0FkZHJlc3NgIGFib3ZlIGFzIGFuIGF2YWlsYWJsZSBjbGllbnQgb3B0aW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuYmlsbGluZ0FkZHJlc3MubGluZTEgU3RyZWV0IG51bWJlciBhbmQgbmFtZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmJpbGxpbmdBZGRyZXNzLmxpbmUyIEV4dGVuZGVkIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5iaWxsaW5nQWRkcmVzcy5jaXR5IENpdHkgb3IgbG9jYWxpdHkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5iaWxsaW5nQWRkcmVzcy5zdGF0ZSBTdGF0ZSBvciByZWdpb24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5iaWxsaW5nQWRkcmVzcy5wb3N0YWxDb2RlIFBvc3RhbCBjb2RlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMuYmlsbGluZ0FkZHJlc3MuY291bnRyeUNvZGUgMiBjaGFyYWN0ZXIgY291bnRyeSBjb2RlIChlLmcuIFVTKS5cbiAqIEBwcm9wZXJ0eSB7P29iamVjdH0gY3JlZGl0RmluYW5jaW5nT2ZmZXJlZCBUaGlzIHByb3BlcnR5IHdpbGwgb25seSBiZSBwcmVzZW50IHdoZW4gdGhlIGN1c3RvbWVyIHBheXMgd2l0aCBQYXlQYWwgQ3JlZGl0LlxuICogQHByb3BlcnR5IHtvYmplY3R9IGNyZWRpdEZpbmFuY2luZ09mZmVyZWQudG90YWxDb3N0IFRoaXMgaXMgdGhlIGVzdGltYXRlZCB0b3RhbCBwYXltZW50IGFtb3VudCBpbmNsdWRpbmcgaW50ZXJlc3QgYW5kIGZlZXMgdGhlIHVzZXIgd2lsbCBwYXkgZHVyaW5nIHRoZSBsaWZldGltZSBvZiB0aGUgbG9hbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjcmVkaXRGaW5hbmNpbmdPZmZlcmVkLnRvdGFsQ29zdC52YWx1ZSBBbiBhbW91bnQgZGVmaW5lZCBieSBbSVNPIDQyMTddKGh0dHBzOi8vd3d3Lmlzby5vcmcvaXNvL2hvbWUvc3RhbmRhcmRzL2N1cnJlbmN5X2NvZGVzLmh0bSkgZm9yIHRoZSBnaXZlbiBjdXJyZW5jeS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjcmVkaXRGaW5hbmNpbmdPZmZlcmVkLnRvdGFsQ29zdC5jdXJyZW5jeSAzIGxldHRlciBjdXJyZW5jeSBjb2RlIGFzIGRlZmluZWQgYnkgW0lTTyA0MjE3XShodHRwczovL3d3dy5pc28ub3JnL2lzby9ob21lL3N0YW5kYXJkcy9jdXJyZW5jeV9jb2Rlcy5odG0pLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGNyZWRpdEZpbmFuY2luZ09mZmVyZWQudGVybSBMZW5ndGggb2YgZmluYW5jaW5nIHRlcm1zIGluIG1vbnRocy5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjcmVkaXRGaW5hbmNpbmdPZmZlcmVkLm1vbnRobHlQYXltZW50IFRoaXMgaXMgdGhlIGVzdGltYXRlZCBhbW91bnQgcGVyIG1vbnRoIHRoYXQgdGhlIGN1c3RvbWVyIHdpbGwgbmVlZCB0byBwYXkgaW5jbHVkaW5nIGZlZXMgYW5kIGludGVyZXN0LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNyZWRpdEZpbmFuY2luZ09mZmVyZWQubW9udGhseVBheW1lbnQudmFsdWUgQW4gYW1vdW50IGRlZmluZWQgYnkgW0lTTyA0MjE3XShodHRwczovL3d3dy5pc28ub3JnL2lzby9ob21lL3N0YW5kYXJkcy9jdXJyZW5jeV9jb2Rlcy5odG0pIGZvciB0aGUgZ2l2ZW4gY3VycmVuY3kuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY3JlZGl0RmluYW5jaW5nT2ZmZXJlZC5tb250aGx5UGF5bWVudC5jdXJyZW5jeSAzIGxldHRlciBjdXJyZW5jeSBjb2RlIGFzIGRlZmluZWQgYnkgW0lTTyA0MjE3XShodHRwczovL3d3dy5pc28ub3JnL2lzby9ob21lL3N0YW5kYXJkcy9jdXJyZW5jeV9jb2Rlcy5odG0pLlxuICogQHByb3BlcnR5IHtvYmplY3R9IGNyZWRpdEZpbmFuY2luZ09mZmVyZWQudG90YWxJbnRlcmVzdCBFc3RpbWF0ZWQgaW50ZXJlc3Qgb3IgZmVlcyBhbW91bnQgdGhlIHBheWVyIHdpbGwgaGF2ZSB0byBwYXkgZHVyaW5nIHRoZSBsaWZldGltZSBvZiB0aGUgbG9hbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjcmVkaXRGaW5hbmNpbmdPZmZlcmVkLnRvdGFsSW50ZXJlc3QudmFsdWUgQW4gYW1vdW50IGRlZmluZWQgYnkgW0lTTyA0MjE3XShodHRwczovL3d3dy5pc28ub3JnL2lzby9ob21lL3N0YW5kYXJkcy9jdXJyZW5jeV9jb2Rlcy5odG0pIGZvciB0aGUgZ2l2ZW4gY3VycmVuY3kuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY3JlZGl0RmluYW5jaW5nT2ZmZXJlZC50b3RhbEludGVyZXN0LmN1cnJlbmN5IDMgbGV0dGVyIGN1cnJlbmN5IGNvZGUgYXMgZGVmaW5lZCBieSBbSVNPIDQyMTddKGh0dHBzOi8vd3d3Lmlzby5vcmcvaXNvL2hvbWUvc3RhbmRhcmRzL2N1cnJlbmN5X2NvZGVzLmh0bSkuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGNyZWRpdEZpbmFuY2luZ09mZmVyZWQucGF5ZXJBY2NlcHRhbmNlIFN0YXR1cyBvZiB3aGV0aGVyIHRoZSBjdXN0b21lciB1bHRpbWF0ZWx5IHdhcyBhcHByb3ZlZCBmb3IgYW5kIGNob3NlIHRvIG1ha2UgdGhlIHBheW1lbnQgdXNpbmcgdGhlIGFwcHJvdmVkIGluc3RhbGxtZW50IGNyZWRpdC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY3JlZGl0RmluYW5jaW5nT2ZmZXJlZC5jYXJ0QW1vdW50SW1tdXRhYmxlIEluZGljYXRlcyB3aGV0aGVyIHRoZSBjYXJ0IGFtb3VudCBpcyBlZGl0YWJsZSBhZnRlciBwYXllcidzIGFjY2VwdGFuY2Ugb24gUGF5UGFsIHNpZGUuXG4gKlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gUGF5UGFsfnRva2VuaXplUmV0dXJuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBjbG9zZSBBIGhhbmRsZSB0byBjbG9zZSB0aGUgUGF5UGFsIGNoZWNrb3V0IGZsb3cuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBmb2N1cyBBIGhhbmRsZSB0byBmb2N1cyB0aGUgUGF5UGFsIGNoZWNrb3V0IGZsb3cuIE5vdGUgdGhhdCBzb21lIGJyb3dzZXJzIChub3RhYmx5IGlPUyBTYWZhcmkpIGRvIG5vdCBzdXBwb3J0IGZvY3VzaW5nIHBvcHVwcy4gRmlyZWZveCByZXF1aXJlcyB0aGUgZm9jdXMgY2FsbCB0byBvY2N1ciBhcyB0aGUgcmVzdWx0IG9mIGEgdXNlciBpbnRlcmFjdGlvbiwgc3VjaCBhcyBhIGJ1dHRvbiBjbGljay5cbiAqL1xuXG4vKipcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgc2VlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9wYXlwYWwuY3JlYXRlfHBheXBhbC5jcmVhdGV9XG4gKiBAY2xhc3NkZXNjIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIFBheVBhbCBjb21wb25lbnQuIEluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIGNhbiBvcGVuIGEgUGF5UGFsIHdpbmRvdyBmb3IgYXV0aGVudGljYXRpbmcgYSBQYXlQYWwgYWNjb3VudC4gQW55IGFkZGl0aW9uYWwgVUksIHN1Y2ggYXMgZGlzYWJsaW5nIHRoZSBwYWdlIHdoaWxlIGF1dGhlbnRpY2F0aW9uIGlzIHRha2luZyBwbGFjZSwgaXMgdXAgdG8gdGhlIGRldmVsb3Blci5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSB7QGxpbmsgUGF5UGFsQ2hlY2tvdXR8UGF5UGFsIENoZWNrb3V0IGNvbXBvbmVudH0sIHdoaWNoIHByb3ZpZGVzIGEgZnVsbHkgbWFuYWdlZCBVSS4gTmV3IGZlYXR1cmVzIHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoaXMgY29tcG9uZW50LlxuICogQGRlc2NyaXB0aW9uIDxzdHJvbmc+RG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yIGRpcmVjdGx5LiBVc2Uge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL3BheXBhbC5jcmVhdGV8YnJhaW50cmVlLXdlYi5wYXlwYWwuY3JlYXRlfSBpbnN0ZWFkLjwvc3Ryb25nPlxuICovXG5mdW5jdGlvbiBQYXlQYWwob3B0aW9ucykge1xuICB0aGlzLl9jbGllbnQgPSBvcHRpb25zLmNsaWVudDtcbiAgdGhpcy5fYXNzZXRzVXJsID1cbiAgICBvcHRpb25zLmNsaWVudC5nZXRDb25maWd1cmF0aW9uKCkuZ2F0ZXdheUNvbmZpZ3VyYXRpb24ucGF5cGFsLmFzc2V0c1VybCArXG4gICAgXCIvd2ViL1wiICtcbiAgICBWRVJTSU9OO1xuICB0aGlzLl9pc0RlYnVnID0gb3B0aW9ucy5jbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpLmlzRGVidWc7XG4gIHRoaXMuX2xvYWRpbmdGcmFtZVVybCA9XG4gICAgdGhpcy5fYXNzZXRzVXJsICtcbiAgICBcIi9odG1sL3BheXBhbC1sYW5kaW5nLWZyYW1lXCIgK1xuICAgIHVzZU1pbih0aGlzLl9pc0RlYnVnKSArXG4gICAgXCIuaHRtbFwiO1xuICB0aGlzLl9hdXRob3JpemF0aW9uSW5Qcm9ncmVzcyA9IGZhbHNlO1xufVxuXG5QYXlQYWwucHJvdG90eXBlLl9pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjbGllbnQgPSB0aGlzLl9jbGllbnQ7XG4gIHZhciBmYWlsdXJlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcInBheXBhbC5sb2FkLnRpbWVkLW91dFwiKTtcbiAgfSwgSU5URUdSQVRJT05fVElNRU9VVF9NUyk7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgZnJhbWVTZXJ2aWNlLmNyZWF0ZShcbiAgICAgIHtcbiAgICAgICAgbmFtZTogY29uc3RhbnRzLkxBTkRJTkdfRlJBTUVfTkFNRSxcbiAgICAgICAgZGlzcGF0Y2hGcmFtZVVybDpcbiAgICAgICAgICBzZWxmLl9hc3NldHNVcmwgK1xuICAgICAgICAgIFwiL2h0bWwvZGlzcGF0Y2gtZnJhbWVcIiArXG4gICAgICAgICAgdXNlTWluKHNlbGYuX2lzRGVidWcpICtcbiAgICAgICAgICBcIi5odG1sXCIsXG4gICAgICAgIG9wZW5GcmFtZVVybDogc2VsZi5fbG9hZGluZ0ZyYW1lVXJsLFxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChzZXJ2aWNlKSB7XG4gICAgICAgIHNlbGYuX2ZyYW1lU2VydmljZSA9IHNlcnZpY2U7XG4gICAgICAgIGNsZWFyVGltZW91dChmYWlsdXJlVGltZW91dCk7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcInBheXBhbC5sb2FkLnN1Y2NlZWRlZFwiKTtcbiAgICAgICAgcmVzb2x2ZShzZWxmKTtcbiAgICAgIH1cbiAgICApO1xuICB9KTtcbn07XG5cbi8qKlxuICogTGF1bmNoZXMgdGhlIFBheVBhbCBsb2dpbiBmbG93IGFuZCByZXR1cm5zIGEgbm9uY2UgcGF5bG9hZC4gT25seSBvbmUgUGF5UGFsIGxvZ2luIGZsb3cgc2hvdWxkIGJlIGFjdGl2ZSBhdCBhIHRpbWUuIE9uZSB3YXkgdG8gYWNoaWV2ZSB0aGlzIGlzIHRvIGRpc2FibGUgeW91ciBQYXlQYWwgYnV0dG9uIHdoaWxlIHRoZSBmbG93IGlzIG9wZW4uXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBbGwgdG9rZW5pemF0aW9uIG9wdGlvbnMgZm9yIHRoZSBQYXlQYWwgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuZmxvdyBTZXQgdG8gJ2NoZWNrb3V0JyBmb3Igb25lLXRpbWUgcGF5bWVudCBmbG93LCBvciAndmF1bHQnIGZvciBWYXVsdCBmbG93LiBJZiAndmF1bHQnIGlzIHVzZWQgd2l0aCBhIGNsaWVudCB0b2tlbiBnZW5lcmF0ZWQgd2l0aCBhIGN1c3RvbWVyIGlkLCB0aGUgUGF5UGFsIGFjY291bnQgd2lsbCBiZSBhZGRlZCB0byB0aGF0IGN1c3RvbWVyIGFzIGEgc2F2ZWQgcGF5bWVudCBtZXRob2QuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaW50ZW50PWF1dGhvcml6ZV1cbiAqICogYGF1dGhvcml6ZWAgLSBTdWJtaXRzIHRoZSB0cmFuc2FjdGlvbiBmb3IgYXV0aG9yaXphdGlvbiBidXQgbm90IHNldHRsZW1lbnQuXG4gKiAqIGBvcmRlcmAgLSBWYWxpZGF0ZXMgdGhlIHRyYW5zYWN0aW9uIHdpdGhvdXQgYW4gYXV0aG9yaXphdGlvbiAoaS5lLiB3aXRob3V0IGhvbGRpbmcgZnVuZHMpLiBVc2VmdWwgZm9yIGF1dGhvcml6aW5nIGFuZCBjYXB0dXJpbmcgZnVuZHMgdXAgdG8gOTAgZGF5cyBhZnRlciB0aGUgb3JkZXIgaGFzIGJlZW4gcGxhY2VkLiBPbmx5IGF2YWlsYWJsZSBmb3IgQ2hlY2tvdXQgZmxvdy5cbiAqICogYHNhbGVgIC0gUGF5bWVudCB3aWxsIGJlIGltbWVkaWF0ZWx5IHN1Ym1pdHRlZCBmb3Igc2V0dGxlbWVudCB1cG9uIGNyZWF0aW5nIGEgdHJhbnNhY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm9mZmVyQ3JlZGl0PWZhbHNlXSBPZmZlcnMgUGF5UGFsIENyZWRpdCBhcyB0aGUgZGVmYXVsdCBmdW5kaW5nIGluc3RydW1lbnQgZm9yIHRoZSB0cmFuc2FjdGlvbi4gSWYgdGhlIGN1c3RvbWVyIGlzbid0IHByZS1hcHByb3ZlZCBmb3IgUGF5UGFsIENyZWRpdCwgdGhleSB3aWxsIGJlIHByb21wdGVkIHRvIGFwcGx5IGZvciBpdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMub2ZmZXJQYXlMYXRlcj1mYWxzZV0gT2ZmZXJzIFBheVBhbCBQYXkgTGF0ZXIgaWYgdGhlIGN1c3RvbWVyIHF1YWxpZmllcy4gRGVmYXVsdHMgdG8gZmFsc2UuIE9ubHkgYXZhaWxhYmxlIHdpdGggYGZsb3c6ICdjaGVja291dCdgLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnVzZXJhY3Rpb25dXG4gKiBDaGFuZ2VzIHRoZSBjYWxsLXRvLWFjdGlvbiBpbiB0aGUgUGF5UGFsIGZsb3cuIEJ5IGRlZmF1bHQgdGhlIGZpbmFsIGJ1dHRvbiB3aWxsIHNob3cgdGhlIGxvY2FsaXplZFxuICogd29yZCBmb3IgXCJDb250aW51ZVwiIGFuZCBpbXBsaWVzIHRoYXQgdGhlIGZpbmFsIGFtb3VudCBiaWxsZWQgaXMgbm90IHlldCBrbm93bi5cbiAqXG4gKiBTZXR0aW5nIHRoaXMgb3B0aW9uIHRvIGBjb21taXRgIGNoYW5nZXMgdGhlIGJ1dHRvbiB0ZXh0IHRvIFwiUGF5IE5vd1wiIGFuZCBwYWdlIHRleHQgd2lsbCBjb252ZXkgdG9cbiAqIHRoZSB1c2VyIHRoYXQgYmlsbGluZyB3aWxsIHRha2UgcGxhY2UgaW1tZWRpYXRlbHkuXG4gKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKX0gW29wdGlvbnMuYW1vdW50XSBUaGUgYW1vdW50IG9mIHRoZSB0cmFuc2FjdGlvbi4gUmVxdWlyZWQgd2hlbiB1c2luZyB0aGUgQ2hlY2tvdXQgZmxvdy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jdXJyZW5jeV0gVGhlIGN1cnJlbmN5IGNvZGUgb2YgdGhlIGFtb3VudCwgc3VjaCBhcyAnVVNEJy4gUmVxdWlyZWQgd2hlbiB1c2luZyB0aGUgQ2hlY2tvdXQgZmxvdy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kaXNwbGF5TmFtZV0gVGhlIG1lcmNoYW50IG5hbWUgZGlzcGxheWVkIGluc2lkZSBvZiB0aGUgUGF5UGFsIGxpZ2h0Ym94OyBkZWZhdWx0cyB0byB0aGUgY29tcGFueSBuYW1lIG9uIHlvdXIgQnJhaW50cmVlIGFjY291bnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGU9ZW5fVVNdIFVzZSB0aGlzIG9wdGlvbiB0byBjaGFuZ2UgdGhlIGxhbmd1YWdlLCBsaW5rcywgYW5kIHRlcm1pbm9sb2d5IHVzZWQgaW4gdGhlIFBheVBhbCBmbG93LiBUaGlzIGxvY2FsZSB3aWxsIGJlIHVzZWQgdW5sZXNzIHRoZSBidXllciBoYXMgc2V0IGEgcHJlZmVycmVkIGxvY2FsZSBmb3IgdGhlaXIgYWNjb3VudC4gSWYgYW4gdW5zdXBwb3J0ZWQgbG9jYWxlIGlzIHN1cHBsaWVkLCBhIGZhbGxiYWNrIGxvY2FsZSAoZGV0ZXJtaW5lZCBieSBidXllciBwcmVmZXJlbmNlIG9yIGJyb3dzZXIgZGF0YSkgd2lsbCBiZSB1c2VkIGFuZCBubyBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAqXG4gKiBTdXBwb3J0ZWQgbG9jYWxlcyBhcmU6XG4gKiBgZGFfREtgLFxuICogYGRlX0RFYCxcbiAqIGBlbl9BVWAsXG4gKiBgZW5fR0JgLFxuICogYGVuX1VTYCxcbiAqIGBlc19FU2AsXG4gKiBgZnJfQ0FgLFxuICogYGZyX0ZSYCxcbiAqIGBpZF9JRGAsXG4gKiBgaXRfSVRgLFxuICogYGphX0pQYCxcbiAqIGBrb19LUmAsXG4gKiBgbmxfTkxgLFxuICogYG5vX05PYCxcbiAqIGBwbF9QTGAsXG4gKiBgcHRfQlJgLFxuICogYHB0X1BUYCxcbiAqIGBydV9SVWAsXG4gKiBgc3ZfU0VgLFxuICogYHRoX1RIYCxcbiAqIGB6aF9DTmAsXG4gKiBgemhfSEtgLFxuICogYW5kIGB6aF9UV2AuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5lbmFibGVTaGlwcGluZ0FkZHJlc3M9ZmFsc2VdIFJldHVybnMgYSBzaGlwcGluZyBhZGRyZXNzIG9iamVjdCBpbiB7QGxpbmsgUGF5UGFsI3Rva2VuaXplfS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3NPdmVycmlkZV0gQWxsb3dzIHlvdSB0byBwYXNzIGEgc2hpcHBpbmcgYWRkcmVzcyB5b3UgaGF2ZSBhbHJlYWR5IGNvbGxlY3RlZCBpbnRvIHRoZSBQYXlQYWwgcGF5bWVudCBmbG93LlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUubGluZTEgU3RyZWV0IGFkZHJlc3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUubGluZTJdIFN0cmVldCBhZGRyZXNzIChleHRlbmRlZCkuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3NPdmVycmlkZS5jaXR5IENpdHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3NPdmVycmlkZS5zdGF0ZSBTdGF0ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLnBvc3RhbENvZGUgUG9zdGFsIGNvZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zaGlwcGluZ0FkZHJlc3NPdmVycmlkZS5jb3VudHJ5Q29kZSBDb3VudHJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLnBob25lXSBQaG9uZSBudW1iZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUucmVjaXBpZW50TmFtZV0gUmVjaXBpZW50J3MgbmFtZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc2hpcHBpbmdBZGRyZXNzRWRpdGFibGU9dHJ1ZV0gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgdXNlciBlZGl0aW5nIG9mIHRoZSBzaGlwcGluZyBhZGRyZXNzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJpbGxpbmdBZ3JlZW1lbnREZXNjcmlwdGlvbl0gVXNlIHRoaXMgb3B0aW9uIHRvIHNldCB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHByZWFwcHJvdmVkIHBheW1lbnQgYWdyZWVtZW50IHZpc2libGUgdG8gY3VzdG9tZXJzIGluIHRoZWlyIFBheVBhbCBwcm9maWxlIGR1cmluZyBWYXVsdCBmbG93cy4gTWF4IDI1NSBjaGFyYWN0ZXJzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxhbmRpbmdQYWdlVHlwZV0gVXNlIHRoaXMgb3B0aW9uIHRvIHNwZWNpZnkgdGhlIFBheVBhbCBwYWdlIHRvIGRpc3BsYXkgd2hlbiBhIHVzZXIgbGFuZHMgb24gdGhlIFBheVBhbCBzaXRlIHRvIGNvbXBsZXRlIHRoZSBwYXltZW50LlxuICogKiBgbG9naW5gIC0gQSBQYXlQYWwgYWNjb3VudCBsb2dpbiBwYWdlIGlzIHVzZWQuXG4gKiAqIGBiaWxsaW5nYCAtIEEgbm9uLVBheVBhbCBhY2NvdW50IGxhbmRpbmcgcGFnZSBpcyB1c2VkLlxuICogQHBhcmFtIHtjYWxsYmFja30gY2FsbGJhY2sgVGhlIHNlY29uZCBhcmd1bWVudCwgPGNvZGU+ZGF0YTwvY29kZT4sIGlzIGEge0BsaW5rIFBheVBhbH50b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfS5cbiAqIEBleGFtcGxlXG4gKiA8Y2FwdGlvbj5Ub2tlbml6aW5nIHdpdGggdGhlIHZhdWx0IGZsb3c8L2NhcHRpb24+XG4gKiBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gKiAgIC8vIERpc2FibGUgdGhlIGJ1dHRvbiBzbyB0aGF0IHdlIGRvbid0IGF0dGVtcHQgdG8gb3BlbiBtdWx0aXBsZSBwb3B1cHMuXG4gKiAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gKlxuICogICAvLyBpZiB0aGVyZSBpcyBhbnkgb3RoZXIgcGFydCBvZiB0aGUgcGFnZSB0aGF0IG11c3QgYmUgZGlzYWJsZWRcbiAqICAgLy8gd2hpbGUgYXV0aGVudGljYXRpb24gaXMgaW4gcHJvZ3Jlc3MsIGRvIHNvIG5vd1xuICpcbiAqICAgLy8gQmVjYXVzZSBQYXlQYWwgdG9rZW5pemF0aW9uIG9wZW5zIGEgcG9wdXAsIHRoaXMgbXVzdCBiZSBjYWxsZWRcbiAqICAgLy8gYXMgYSByZXN1bHQgb2YgYSB1c2VyIGFjdGlvbiwgc3VjaCBhcyBhIGJ1dHRvbiBjbGljay5cbiAqICAgcGF5cGFsSW5zdGFuY2UudG9rZW5pemUoe1xuICogICAgIGZsb3c6ICd2YXVsdCcgLy8gUmVxdWlyZWRcbiAqICAgICAvLyBBbnkgb3RoZXIgdG9rZW5pemF0aW9uIG9wdGlvbnNcbiAqICAgfSwgZnVuY3Rpb24gKHRva2VuaXplRXJyLCBwYXlsb2FkKSB7XG4gKiAgICAgYnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAqXG4gKiAgICAgLy8gaWYgYW55IG90aGVyIHBhcnQgb2YgdGhlIHBhZ2Ugd2FzIGRpc2FibGVkLCByZS1lbmFibGUgbm93XG4gKlxuICogICAgIGlmICh0b2tlbml6ZUVycikge1xuICogICAgICAgLy8gSGFuZGxlIHRva2VuaXphdGlvbiBlcnJvcnMgb3IgcHJlbWF0dXJlIGZsb3cgY2xvc3VyZVxuICpcbiAqICAgICAgIHN3aXRjaCAodG9rZW5pemVFcnIuY29kZSkge1xuICogICAgICAgICBjYXNlICdQQVlQQUxfUE9QVVBfQ0xPU0VEJzpcbiAqICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDdXN0b21lciBjbG9zZWQgUGF5UGFsIHBvcHVwLicpO1xuICogICAgICAgICAgIGJyZWFrO1xuICogICAgICAgICBjYXNlICdQQVlQQUxfQUNDT1VOVF9UT0tFTklaQVRJT05fRkFJTEVEJzpcbiAqICAgICAgICAgICBjb25zb2xlLmVycm9yKCdQYXlQYWwgdG9rZW5pemF0aW9uIGZhaWxlZC4gU2VlIGRldGFpbHM6JywgdG9rZW5pemVFcnIuZGV0YWlscyk7XG4gKiAgICAgICAgICAgYnJlYWs7XG4gKiAgICAgICAgIGNhc2UgJ1BBWVBBTF9GTE9XX0ZBSUxFRCc6XG4gKiAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGluaXRpYWxpemUgUGF5UGFsIGZsb3cuIEFyZSB5b3VyIG9wdGlvbnMgY29ycmVjdD8nLCB0b2tlbml6ZUVyci5kZXRhaWxzKTtcbiAqICAgICAgICAgICBicmVhaztcbiAqICAgICAgICAgZGVmYXVsdDpcbiAqICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciEnLCB0b2tlbml6ZUVycik7XG4gKiAgICAgICB9XG4gKiAgICAgfSBlbHNlIHtcbiAqICAgICAgIC8vIFN1Ym1pdCBwYXlsb2FkLm5vbmNlIHRvIHlvdXIgc2VydmVyXG4gKiAgICAgfVxuICogICB9KTtcbiAqIH0pO1xuXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+VG9rZW5pemluZyB3aXRoIHRoZSBjaGVja291dCBmbG93PC9jYXB0aW9uPlxuICogYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICogICAvLyBEaXNhYmxlIHRoZSBidXR0b24gc28gdGhhdCB3ZSBkb24ndCBhdHRlbXB0IHRvIG9wZW4gbXVsdGlwbGUgcG9wdXBzLlxuICogICBidXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICpcbiAqICAgLy8gQmVjYXVzZSBQYXlQYWwgdG9rZW5pemF0aW9uIG9wZW5zIGEgcG9wdXAsIHRoaXMgbXVzdCBiZSBjYWxsZWRcbiAqICAgLy8gYXMgYSByZXN1bHQgb2YgYSB1c2VyIGFjdGlvbiwgc3VjaCBhcyBhIGJ1dHRvbiBjbGljay5cbiAqICAgcGF5cGFsSW5zdGFuY2UudG9rZW5pemUoe1xuICogICAgIGZsb3c6ICdjaGVja291dCcsIC8vIFJlcXVpcmVkXG4gKiAgICAgYW1vdW50OiAnMTAuMDAnLCAvLyBSZXF1aXJlZFxuICogICAgIGN1cnJlbmN5OiAnVVNEJyAvLyBSZXF1aXJlZFxuICogICAgIC8vIEFueSBvdGhlciB0b2tlbml6YXRpb24gb3B0aW9uc1xuICogICB9LCBmdW5jdGlvbiAodG9rZW5pemVFcnIsIHBheWxvYWQpIHtcbiAqICAgICBidXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICpcbiAqICAgICBpZiAodG9rZW5pemVFcnIpIHtcbiAqICAgICAgIC8vIEhhbmRsZSB0b2tlbml6YXRpb24gZXJyb3JzIG9yIHByZW1hdHVyZSBmbG93IGNsb3N1cmVcbiAqXG4gKiAgICAgICBzd2l0Y2ggKHRva2VuaXplRXJyLmNvZGUpIHtcbiAqICAgICAgICAgY2FzZSAnUEFZUEFMX1BPUFVQX0NMT1NFRCc6XG4gKiAgICAgICAgICAgY29uc29sZS5lcnJvcignQ3VzdG9tZXIgY2xvc2VkIFBheVBhbCBwb3B1cC4nKTtcbiAqICAgICAgICAgICBicmVhaztcbiAqICAgICAgICAgY2FzZSAnUEFZUEFMX0FDQ09VTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRCc6XG4gKiAgICAgICAgICAgY29uc29sZS5lcnJvcignUGF5UGFsIHRva2VuaXphdGlvbiBmYWlsZWQuIFNlZSBkZXRhaWxzOicsIHRva2VuaXplRXJyLmRldGFpbHMpO1xuICogICAgICAgICAgIGJyZWFrO1xuICogICAgICAgICBjYXNlICdQQVlQQUxfRkxPV19GQUlMRUQnOlxuICogICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBpbml0aWFsaXplIFBheVBhbCBmbG93LiBBcmUgeW91ciBvcHRpb25zIGNvcnJlY3Q/JywgdG9rZW5pemVFcnIuZGV0YWlscyk7XG4gKiAgICAgICAgICAgYnJlYWs7XG4gKiAgICAgICAgIGRlZmF1bHQ6XG4gKiAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IhJywgdG9rZW5pemVFcnIpO1xuICogICAgICAgfVxuICogICAgIH0gZWxzZSB7XG4gKiAgICAgICAvLyBTdWJtaXQgcGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlclxuICogICAgIH1cbiAqICAgfSk7XG4gKiB9KTtcbiAqIEByZXR1cm5zIHtQcm9taXNlfFBheVBhbH50b2tlbml6ZVJldHVybn0gQSBoYW5kbGUgdG8gbWFuYWdlIHRoZSBQYXlQYWwgY2hlY2tvdXQgZnJhbWUuIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqL1xuUGF5UGFsLnByb3RvdHlwZS50b2tlbml6ZSA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjbGllbnQgPSB0aGlzLl9jbGllbnQ7XG4gIHZhciB0b2tlbml6ZVByb21pc2UsIG9wdGlvbkVycm9yO1xuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gb25jZShkZWZlcnJlZChjYWxsYmFjaykpO1xuICB9XG5cbiAgaWYgKCFvcHRpb25zIHx8ICFjb25zdGFudHMuRkxPV19FTkRQT0lOVFMuaGFzT3duUHJvcGVydHkob3B0aW9ucy5mbG93KSkge1xuICAgIG9wdGlvbkVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5QQVlQQUxfRkxPV19PUFRJT05fUkVRVUlSRUQpO1xuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayhvcHRpb25FcnJvcik7XG5cbiAgICAgIHJldHVybiB0aGlzLl9mcmFtZVNlcnZpY2UuY3JlYXRlTm9vcEhhbmRsZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qob3B0aW9uRXJyb3IpO1xuICB9XG5cbiAgdG9rZW5pemVQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmIChzZWxmLl9hdXRob3JpemF0aW9uSW5Qcm9ncmVzcykge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChjbGllbnQsIFwicGF5cGFsLnRva2VuaXphdGlvbi5lcnJvci5hbHJlYWR5LW9wZW5lZFwiKTtcblxuICAgICAgcmVqZWN0KG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuUEFZUEFMX1RPS0VOSVpBVElPTl9SRVFVRVNUX0FDVElWRSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLl9hdXRob3JpemF0aW9uSW5Qcm9ncmVzcyA9IHRydWU7XG5cbiAgICAgIGlmICghd2luZG93LnBvcHVwQnJpZGdlKSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcInBheXBhbC50b2tlbml6YXRpb24ub3BlbmVkXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5vZmZlckNyZWRpdCA9PT0gdHJ1ZSkge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KGNsaWVudCwgXCJwYXlwYWwuY3JlZGl0Lm9mZmVyZWRcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLm9mZmVyUGF5TGF0ZXIgPT09IHRydWUpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChjbGllbnQsIFwicGF5cGFsLnBheWxhdGVyLm9mZmVyZWRcIik7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX25hdmlnYXRlRnJhbWVUb0F1dGgob3B0aW9ucykuY2F0Y2gocmVqZWN0KTtcbiAgICAgIC8vIHNlbGYgTVVTVCBoYXBwZW4gYWZ0ZXIgX25hdmlnYXRlRnJhbWVUb0F1dGggZm9yIE1ldHJvIGJyb3dzZXJzIHRvIHdvcmsuXG4gICAgICBzZWxmLl9mcmFtZVNlcnZpY2Uub3BlbihcbiAgICAgICAge30sXG4gICAgICAgIHNlbGYuX2NyZWF0ZUZyYW1lU2VydmljZUNhbGxiYWNrKG9wdGlvbnMsIHJlc29sdmUsIHJlamVjdClcbiAgICAgICk7XG4gICAgfVxuICB9KTtcblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICB0b2tlbml6ZVByb21pc2VcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY2FsbGJhY2spO1xuXG4gICAgcmV0dXJuIHRoaXMuX2ZyYW1lU2VydmljZS5jcmVhdGVIYW5kbGVyKHtcbiAgICAgIGJlZm9yZUNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcInBheXBhbC50b2tlbml6YXRpb24uY2xvc2VkLmJ5LW1lcmNoYW50XCIpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbml6ZVByb21pc2U7XG59O1xuXG5QYXlQYWwucHJvdG90eXBlLl9jcmVhdGVGcmFtZVNlcnZpY2VDYWxsYmFjayA9IGZ1bmN0aW9uIChcbiAgb3B0aW9ucyxcbiAgcmVzb2x2ZSxcbiAgcmVqZWN0XG4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2xpZW50ID0gdGhpcy5fY2xpZW50O1xuXG4gIGlmICh3aW5kb3cucG9wdXBCcmlkZ2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGVyciwgcGF5bG9hZCkge1xuICAgICAgdmFyIGNhbmNlbGVkID1cbiAgICAgICAgcGF5bG9hZCAmJiBwYXlsb2FkLnBhdGggJiYgcGF5bG9hZC5wYXRoLnN1YnN0cmluZygwLCA3KSA9PT0gXCIvY2FuY2VsXCI7XG5cbiAgICAgIHNlbGYuX2F1dGhvcml6YXRpb25JblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICAgIC8vIGBlcnJgIGV4aXN0cyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBcIkRvbmVcIiBidXR0b24gb2YgYnJvd3NlciB2aWV3XG4gICAgICBpZiAoZXJyIHx8IGNhbmNlbGVkKSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgY2xpZW50LFxuICAgICAgICAgIFwicGF5cGFsLnRva2VuaXphdGlvbi5jbG9zZWQtcG9wdXBicmlkZ2UuYnktdXNlclwiXG4gICAgICAgICk7XG4gICAgICAgIC8vIENhbGwgbWVyY2hhbnQncyB0b2tlbml6ZSBjYWxsYmFjayB3aXRoIGFuIGVycm9yXG4gICAgICAgIHJlamVjdChuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlBBWVBBTF9QT1BVUF9DTE9TRUQpKTtcbiAgICAgIH0gZWxzZSBpZiAocGF5bG9hZCkge1xuICAgICAgICBzZWxmXG4gICAgICAgICAgLl90b2tlbml6ZVBheVBhbChvcHRpb25zLCBwYXlsb2FkLnF1ZXJ5SXRlbXMpXG4gICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnIsIHBhcmFtcykge1xuICAgIHNlbGYuX2F1dGhvcml6YXRpb25JblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICBpZiAoZXJyKSB7XG4gICAgICBpZiAoZXJyLmNvZGUgPT09IFwiRlJBTUVfU0VSVklDRV9GUkFNRV9DTE9TRURcIikge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KGNsaWVudCwgXCJwYXlwYWwudG9rZW5pemF0aW9uLmNsb3NlZC5ieS11c2VyXCIpO1xuICAgICAgICByZWplY3QobmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5QQVlQQUxfUE9QVVBfQ0xPU0VEKSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBlcnIuY29kZSAmJlxuICAgICAgICBlcnIuY29kZS5pbmRleE9mKFwiRlJBTUVfU0VSVklDRV9GUkFNRV9PUEVOX0ZBSUxFRFwiKSA+IC0xXG4gICAgICApIHtcbiAgICAgICAgcmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgICBjb2RlOiBlcnJvcnMuUEFZUEFMX1BPUFVQX09QRU5fRkFJTEVELmNvZGUsXG4gICAgICAgICAgICB0eXBlOiBlcnJvcnMuUEFZUEFMX1BPUFVQX09QRU5fRkFJTEVELnR5cGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvcnMuUEFZUEFMX1BPUFVQX09QRU5fRkFJTEVELm1lc3NhZ2UsXG4gICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtcykge1xuICAgICAgc2VsZi5fdG9rZW5pemVQYXlQYWwob3B0aW9ucywgcGFyYW1zKS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCk7XG4gICAgfVxuICB9O1xufTtcblxuUGF5UGFsLnByb3RvdHlwZS5fdG9rZW5pemVQYXlQYWwgPSBmdW5jdGlvbiAob3B0aW9ucywgcGFyYW1zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNsaWVudCA9IHRoaXMuX2NsaWVudDtcblxuICBpZiAoIXdpbmRvdy5wb3B1cEJyaWRnZSkge1xuICAgIHRoaXMuX2ZyYW1lU2VydmljZS5yZWRpcmVjdCh0aGlzLl9sb2FkaW5nRnJhbWVVcmwpO1xuICB9XG5cbiAgcmV0dXJuIGNsaWVudFxuICAgIC5yZXF1ZXN0KHtcbiAgICAgIGVuZHBvaW50OiBcInBheW1lbnRfbWV0aG9kcy9wYXlwYWxfYWNjb3VudHNcIixcbiAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICBkYXRhOiB0aGlzLl9mb3JtYXRUb2tlbml6ZURhdGEob3B0aW9ucywgcGFyYW1zKSxcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgdmFyIHBheWxvYWQgPSBzZWxmLl9mb3JtYXRUb2tlbml6ZVBheWxvYWQocmVzcG9uc2UpO1xuXG4gICAgICBpZiAod2luZG93LnBvcHVwQnJpZGdlKSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcInBheXBhbC50b2tlbml6YXRpb24uc3VjY2Vzcy1wb3B1cGJyaWRnZVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcInBheXBhbC50b2tlbml6YXRpb24uc3VjY2Vzc1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBheWxvYWQuY3JlZGl0RmluYW5jaW5nT2ZmZXJlZCkge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KGNsaWVudCwgXCJwYXlwYWwuY3JlZGl0LmFjY2VwdGVkXCIpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLl9mcmFtZVNlcnZpY2UuY2xvc2UoKTtcblxuICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKHdpbmRvdy5wb3B1cEJyaWRnZSkge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KGNsaWVudCwgXCJwYXlwYWwudG9rZW5pemF0aW9uLmZhaWxlZC1wb3B1cGJyaWRnZVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcInBheXBhbC50b2tlbml6YXRpb24uZmFpbGVkXCIpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLl9mcmFtZVNlcnZpY2UuY2xvc2UoKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBjb252ZXJ0VG9CcmFpbnRyZWVFcnJvcihlcnIsIHtcbiAgICAgICAgICB0eXBlOiBlcnJvcnMuUEFZUEFMX0FDQ09VTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRC50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5QQVlQQUxfQUNDT1VOVF9UT0tFTklaQVRJT05fRkFJTEVELmNvZGUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JzLlBBWVBBTF9BQ0NPVU5UX1RPS0VOSVpBVElPTl9GQUlMRUQubWVzc2FnZSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG59O1xuXG5QYXlQYWwucHJvdG90eXBlLl9mb3JtYXRUb2tlbml6ZVBheWxvYWQgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgdmFyIHBheWxvYWQ7XG4gIHZhciBhY2NvdW50ID0ge307XG5cbiAgaWYgKHJlc3BvbnNlLnBheXBhbEFjY291bnRzKSB7XG4gICAgYWNjb3VudCA9IHJlc3BvbnNlLnBheXBhbEFjY291bnRzWzBdO1xuICB9XG5cbiAgcGF5bG9hZCA9IHtcbiAgICBub25jZTogYWNjb3VudC5ub25jZSxcbiAgICBkZXRhaWxzOiB7fSxcbiAgICB0eXBlOiBhY2NvdW50LnR5cGUsXG4gIH07XG5cbiAgaWYgKGFjY291bnQuZGV0YWlscyAmJiBhY2NvdW50LmRldGFpbHMucGF5ZXJJbmZvKSB7XG4gICAgcGF5bG9hZC5kZXRhaWxzID0gYWNjb3VudC5kZXRhaWxzLnBheWVySW5mbztcbiAgfVxuXG4gIGlmIChhY2NvdW50LmRldGFpbHMgJiYgYWNjb3VudC5kZXRhaWxzLmNyZWRpdEZpbmFuY2luZ09mZmVyZWQpIHtcbiAgICBwYXlsb2FkLmNyZWRpdEZpbmFuY2luZ09mZmVyZWQgPSBhY2NvdW50LmRldGFpbHMuY3JlZGl0RmluYW5jaW5nT2ZmZXJlZDtcbiAgfVxuXG4gIHJldHVybiBwYXlsb2FkO1xufTtcblxuUGF5UGFsLnByb3RvdHlwZS5fZm9ybWF0VG9rZW5pemVEYXRhID0gZnVuY3Rpb24gKG9wdGlvbnMsIHBhcmFtcykge1xuICB2YXIgY2xpZW50Q29uZmlndXJhdGlvbiA9IHRoaXMuX2NsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG4gIHZhciBnYXRld2F5Q29uZmlndXJhdGlvbiA9IGNsaWVudENvbmZpZ3VyYXRpb24uZ2F0ZXdheUNvbmZpZ3VyYXRpb247XG4gIHZhciBpc1Rva2VuaXphdGlvbktleSA9XG4gICAgY2xpZW50Q29uZmlndXJhdGlvbi5hdXRob3JpemF0aW9uVHlwZSA9PT0gXCJUT0tFTklaQVRJT05fS0VZXCI7XG4gIHZhciBkYXRhID0ge1xuICAgIHBheXBhbEFjY291bnQ6IHtcbiAgICAgIGNvcnJlbGF0aW9uSWQ6IHBhcmFtcy5iYV90b2tlbiB8fCBwYXJhbXMudG9rZW4sXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHZhbGlkYXRlOiBvcHRpb25zLmZsb3cgPT09IFwidmF1bHRcIiAmJiAhaXNUb2tlbml6YXRpb25LZXksXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgaWYgKHBhcmFtcy5iYV90b2tlbikge1xuICAgIGRhdGEucGF5cGFsQWNjb3VudC5iaWxsaW5nQWdyZWVtZW50VG9rZW4gPSBwYXJhbXMuYmFfdG9rZW47XG4gIH0gZWxzZSB7XG4gICAgZGF0YS5wYXlwYWxBY2NvdW50LnBheW1lbnRUb2tlbiA9IHBhcmFtcy5wYXltZW50SWQ7XG4gICAgZGF0YS5wYXlwYWxBY2NvdW50LnBheWVySWQgPSBwYXJhbXMuUGF5ZXJJRDtcbiAgICBkYXRhLnBheXBhbEFjY291bnQudW5pbGF0ZXJhbCA9XG4gICAgICBnYXRld2F5Q29uZmlndXJhdGlvbi5wYXlwYWwudW52ZXR0ZWRNZXJjaGFudDtcblxuICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KFwiaW50ZW50XCIpKSB7XG4gICAgICBkYXRhLnBheXBhbEFjY291bnQuaW50ZW50ID0gb3B0aW9ucy5pbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG5QYXlQYWwucHJvdG90eXBlLl9uYXZpZ2F0ZUZyYW1lVG9BdXRoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2xpZW50ID0gdGhpcy5fY2xpZW50O1xuICB2YXIgZW5kcG9pbnQgPSBcInBheXBhbF9oZXJtZXMvXCIgKyBjb25zdGFudHMuRkxPV19FTkRQT0lOVFNbb3B0aW9ucy5mbG93XTtcblxuICByZXR1cm4gY2xpZW50XG4gICAgLnJlcXVlc3Qoe1xuICAgICAgZW5kcG9pbnQ6IGVuZHBvaW50LFxuICAgICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICAgIGRhdGE6IHRoaXMuX2Zvcm1hdFBheW1lbnRSZXNvdXJjZURhdGEob3B0aW9ucyksXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHZhciByZWRpcmVjdFVybDtcblxuICAgICAgaWYgKG9wdGlvbnMuZmxvdyA9PT0gXCJjaGVja291dFwiKSB7XG4gICAgICAgIHJlZGlyZWN0VXJsID0gcmVzcG9uc2UucGF5bWVudFJlc291cmNlLnJlZGlyZWN0VXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkaXJlY3RVcmwgPSByZXNwb25zZS5hZ3JlZW1lbnRTZXR1cC5hcHByb3ZhbFVybDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMudXNlcmFjdGlvbiA9PT0gXCJjb21taXRcIikge1xuICAgICAgICByZWRpcmVjdFVybCA9IHF1ZXJ5c3RyaW5nLnF1ZXJ5aWZ5KHJlZGlyZWN0VXJsLCB7XG4gICAgICAgICAgdXNlcmFjdGlvbjogXCJjb21taXRcIixcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh3aW5kb3cucG9wdXBCcmlkZ2UpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChjbGllbnQsIFwicGF5cGFsLnRva2VuaXphdGlvbi5vcGVuZWQtcG9wdXBicmlkZ2VcIik7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX2ZyYW1lU2VydmljZS5yZWRpcmVjdChyZWRpcmVjdFVybCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgdmFyIHN0YXR1cyA9IGVyci5kZXRhaWxzICYmIGVyci5kZXRhaWxzLmh0dHBTdGF0dXM7XG5cbiAgICAgIHNlbGYuX2ZyYW1lU2VydmljZS5jbG9zZSgpO1xuICAgICAgc2VsZi5fYXV0aG9yaXphdGlvbkluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgICAgaWYgKHN0YXR1cyA9PT0gNDIyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICAgICAgdHlwZTogZXJyb3JzLlBBWVBBTF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OLnR5cGUsXG4gICAgICAgICAgICBjb2RlOiBlcnJvcnMuUEFZUEFMX0lOVkFMSURfUEFZTUVOVF9PUFRJT04uY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9ycy5QQVlQQUxfSU5WQUxJRF9QQVlNRU5UX09QVElPTi5tZXNzYWdlLFxuICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgY29udmVydFRvQnJhaW50cmVlRXJyb3IoZXJyLCB7XG4gICAgICAgICAgdHlwZTogZXJyb3JzLlBBWVBBTF9GTE9XX0ZBSUxFRC50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5QQVlQQUxfRkxPV19GQUlMRUQuY29kZSxcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvcnMuUEFZUEFMX0ZMT1dfRkFJTEVELm1lc3NhZ2UsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xufTtcblxuUGF5UGFsLnByb3RvdHlwZS5fZm9ybWF0UGF5bWVudFJlc291cmNlRGF0YSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBrZXk7XG4gIHZhciBnYXRld2F5Q29uZmlndXJhdGlvbiA9XG4gICAgdGhpcy5fY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKS5nYXRld2F5Q29uZmlndXJhdGlvbjtcbiAgdmFyIHNlcnZpY2VJZCA9IHRoaXMuX2ZyYW1lU2VydmljZS5fc2VydmljZUlkO1xuICB2YXIgcGF5bWVudFJlc291cmNlID0ge1xuICAgIHJldHVyblVybDpcbiAgICAgIGdhdGV3YXlDb25maWd1cmF0aW9uLnBheXBhbC5hc3NldHNVcmwgK1xuICAgICAgXCIvd2ViL1wiICtcbiAgICAgIFZFUlNJT04gK1xuICAgICAgXCIvaHRtbC9yZWRpcmVjdC1mcmFtZVwiICtcbiAgICAgIHVzZU1pbih0aGlzLl9pc0RlYnVnKSArXG4gICAgICBcIi5odG1sP2NoYW5uZWw9XCIgK1xuICAgICAgc2VydmljZUlkLFxuICAgIGNhbmNlbFVybDpcbiAgICAgIGdhdGV3YXlDb25maWd1cmF0aW9uLnBheXBhbC5hc3NldHNVcmwgK1xuICAgICAgXCIvd2ViL1wiICtcbiAgICAgIFZFUlNJT04gK1xuICAgICAgXCIvaHRtbC9jYW5jZWwtZnJhbWVcIiArXG4gICAgICB1c2VNaW4odGhpcy5faXNEZWJ1ZykgK1xuICAgICAgXCIuaHRtbD9jaGFubmVsPVwiICtcbiAgICAgIHNlcnZpY2VJZCxcbiAgICBvZmZlclBheXBhbENyZWRpdDogb3B0aW9ucy5vZmZlckNyZWRpdCA9PT0gdHJ1ZSxcbiAgICBvZmZlclBheUxhdGVyOiBvcHRpb25zLm9mZmVyUGF5TGF0ZXIgPT09IHRydWUsXG4gICAgZXhwZXJpZW5jZVByb2ZpbGU6IHtcbiAgICAgIGJyYW5kTmFtZTogb3B0aW9ucy5kaXNwbGF5TmFtZSB8fCBnYXRld2F5Q29uZmlndXJhdGlvbi5wYXlwYWwuZGlzcGxheU5hbWUsXG4gICAgICBsb2NhbGVDb2RlOiBvcHRpb25zLmxvY2FsZSxcbiAgICAgIG5vU2hpcHBpbmc6ICghb3B0aW9ucy5lbmFibGVTaGlwcGluZ0FkZHJlc3MpLnRvU3RyaW5nKCksXG4gICAgICBhZGRyZXNzT3ZlcnJpZGU6IG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzRWRpdGFibGUgPT09IGZhbHNlLFxuICAgICAgbGFuZGluZ1BhZ2VUeXBlOiBvcHRpb25zLmxhbmRpbmdQYWdlVHlwZSxcbiAgICB9LFxuICB9O1xuXG4gIGlmIChcbiAgICB3aW5kb3cucG9wdXBCcmlkZ2UgJiZcbiAgICB0eXBlb2Ygd2luZG93LnBvcHVwQnJpZGdlLmdldFJldHVyblVybFByZWZpeCA9PT0gXCJmdW5jdGlvblwiXG4gICkge1xuICAgIHBheW1lbnRSZXNvdXJjZS5yZXR1cm5VcmwgPVxuICAgICAgd2luZG93LnBvcHVwQnJpZGdlLmdldFJldHVyblVybFByZWZpeCgpICsgXCJyZXR1cm5cIjtcbiAgICBwYXltZW50UmVzb3VyY2UuY2FuY2VsVXJsID1cbiAgICAgIHdpbmRvdy5wb3B1cEJyaWRnZS5nZXRSZXR1cm5VcmxQcmVmaXgoKSArIFwiY2FuY2VsXCI7XG4gIH1cblxuICBpZiAob3B0aW9ucy5mbG93ID09PSBcImNoZWNrb3V0XCIpIHtcbiAgICBwYXltZW50UmVzb3VyY2UuYW1vdW50ID0gb3B0aW9ucy5hbW91bnQ7XG4gICAgcGF5bWVudFJlc291cmNlLmN1cnJlbmN5SXNvQ29kZSA9IG9wdGlvbnMuY3VycmVuY3k7XG5cbiAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcImludGVudFwiKSkge1xuICAgICAgcGF5bWVudFJlc291cmNlLmludGVudCA9IG9wdGlvbnMuaW50ZW50O1xuICAgIH1cblxuICAgIGZvciAoa2V5IGluIG9wdGlvbnMuc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUpIHtcbiAgICAgIGlmIChvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgcGF5bWVudFJlc291cmNlW2tleV0gPSBvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBheW1lbnRSZXNvdXJjZS5zaGlwcGluZ0FkZHJlc3MgPSBvcHRpb25zLnNoaXBwaW5nQWRkcmVzc092ZXJyaWRlO1xuXG4gICAgaWYgKG9wdGlvbnMuYmlsbGluZ0FncmVlbWVudERlc2NyaXB0aW9uKSB7XG4gICAgICBwYXltZW50UmVzb3VyY2UuZGVzY3JpcHRpb24gPSBvcHRpb25zLmJpbGxpbmdBZ3JlZW1lbnREZXNjcmlwdGlvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGF5bWVudFJlc291cmNlO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIFBheVBhbCB3aW5kb3cgaWYgaXQgaXMgb3Blbi5cbiAqIEBwdWJsaWNcbiAqIEBleGFtcGxlXG4gKiBwYXlwYWxJbnN0YW5jZS5jbG9zZVdpbmRvdygpO1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblBheVBhbC5wcm90b3R5cGUuY2xvc2VXaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9hdXRob3JpemF0aW9uSW5Qcm9ncmVzcykge1xuICAgIGFuYWx5dGljcy5zZW5kRXZlbnQodGhpcy5fY2xpZW50LCBcInBheXBhbC50b2tlbml6ZS5jbG9zZWQuYnktbWVyY2hhbnRcIik7XG4gIH1cbiAgdGhpcy5fZnJhbWVTZXJ2aWNlLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIEZvY3VzZXMgdGhlIFBheVBhbCB3aW5kb3cgaWYgaXQgaXMgb3Blbi5cbiAqIEBwdWJsaWNcbiAqIEBleGFtcGxlXG4gKiBwYXlwYWxJbnN0YW5jZS5mb2N1c1dpbmRvdygpO1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblBheVBhbC5wcm90b3R5cGUuZm9jdXNXaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2ZyYW1lU2VydmljZS5mb2N1cygpO1xufTtcblxuLyoqXG4gKiBDbGVhbmx5IHJlbW92ZSBhbnl0aGluZyBzZXQgdXAgYnkge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL3BheXBhbC5jcmVhdGV8Y3JlYXRlfS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGVkIG9uIGNvbXBsZXRpb24uXG4gKiBAZXhhbXBsZVxuICogcGF5cGFsSW5zdGFuY2UudGVhcmRvd24oKTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggY2FsbGJhY2s8L2NhcHRpb24+XG4gKiBwYXlwYWxJbnN0YW5jZS50ZWFyZG93bihmdW5jdGlvbiAoKSB7XG4gKiAgIC8vIHRlYXJkb3duIGlzIGNvbXBsZXRlXG4gKiB9KTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cblBheVBhbC5wcm90b3R5cGUudGVhcmRvd24gPSB3cmFwUHJvbWlzZShmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcblxuICBzZWxmLl9mcmFtZVNlcnZpY2UudGVhcmRvd24oKTtcblxuICBjb252ZXJ0TWV0aG9kc1RvRXJyb3Ioc2VsZiwgbWV0aG9kcyhQYXlQYWwucHJvdG90eXBlKSk7XG5cbiAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwicGF5cGFsLnRlYXJkb3duLWNvbXBsZXRlZFwiKTtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXlQYWw7XG5cbn0se1wiLi4vLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uLy4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuLi8uLi9saWIvY29uc3RhbnRzXCI6MTI2LFwiLi4vLi4vbGliL2NvbnZlcnQtbWV0aG9kcy10by1lcnJvclwiOjEyNyxcIi4uLy4uL2xpYi9jb252ZXJ0LXRvLWJyYWludHJlZS1lcnJvclwiOjEyOCxcIi4uLy4uL2xpYi9kZWZlcnJlZFwiOjEzMixcIi4uLy4uL2xpYi9mcmFtZS1zZXJ2aWNlL2V4dGVybmFsXCI6MTM5LFwiLi4vLi4vbGliL21ldGhvZHNcIjoxNTUsXCIuLi8uLi9saWIvb25jZVwiOjE1NixcIi4uLy4uL2xpYi9xdWVyeXN0cmluZ1wiOjE1NyxcIi4uLy4uL2xpYi91c2UtbWluXCI6MTYwLFwiLi4vc2hhcmVkL2NvbnN0YW50c1wiOjE4MCxcIi4uL3NoYXJlZC9lcnJvcnNcIjoxODEsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMTc5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbW9kdWxlIGJyYWludHJlZS13ZWIvcGF5cGFsXG4gKiBAZGVzY3JpcHRpb24gQSBjb21wb25lbnQgdG8gaW50ZWdyYXRlIHdpdGggUGF5UGFsLlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSB7QGxpbmsgUGF5UGFsQ2hlY2tvdXR8UGF5UGFsIENoZWNrb3V0IGNvbXBvbmVudH0gaW5zdGVhZC5cbiAqL1xuXG52YXIgYW5hbHl0aWNzID0gX2RlcmVxXyhcIi4uL2xpYi9hbmFseXRpY3NcIik7XG52YXIgYmFzaWNDb21wb25lbnRWZXJpZmljYXRpb24gPSBfZGVyZXFfKFwiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIik7XG52YXIgY3JlYXRlRGVmZXJyZWRDbGllbnQgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIik7XG52YXIgY3JlYXRlQXNzZXRzVXJsID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL3NoYXJlZC9lcnJvcnNcIik7XG52YXIgUGF5UGFsID0gX2RlcmVxXyhcIi4vZXh0ZXJuYWwvcGF5cGFsXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDcmVhdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IGNhbGxiYWNrIFRoZSBzZWNvbmQgYXJndW1lbnQsIGBkYXRhYCwgaXMgdGhlIHtAbGluayBQYXlQYWx9IGluc3RhbmNlLlxuICogQGV4YW1wbGVcbiAqIC8vIFdlIHJlY29tbWVuZCBjcmVhdGluZyB5b3VyIFBheVBhbCBidXR0b24gd2l0aCBidXR0b24uanNcbiAqIC8vIEZvciBhbiBleGFtcGxlLCBzZWUgaHR0cHM6Ly9jb2RlcGVuLmlvL2JyYWludHJlZS9wZW4vTE5LSldhXG4gKiB2YXIgcGF5cGFsQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBheXBhbC1idXR0b24nKTtcbiAqXG4gKiBicmFpbnRyZWUuY2xpZW50LmNyZWF0ZSh7XG4gKiAgIGF1dGhvcml6YXRpb246IENMSUVOVF9BVVRIT1JJWkFUSU9OXG4gKiB9LCBmdW5jdGlvbiAoY2xpZW50RXJyLCBjbGllbnRJbnN0YW5jZSkge1xuICogICBpZiAoY2xpZW50RXJyKSB7XG4gKiAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgY2xpZW50OicsIGNsaWVudEVycik7XG4gKiAgICAgcmV0dXJuO1xuICogICB9XG4gKlxuICogICBicmFpbnRyZWUucGF5cGFsLmNyZWF0ZSh7XG4gKiAgICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZVxuICogICB9LCBmdW5jdGlvbiAocGF5cGFsRXJyLCBwYXlwYWxJbnN0YW5jZSkge1xuICogICAgIGlmIChwYXlwYWxFcnIpIHtcbiAqICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIFBheVBhbDonLCBwYXlwYWxFcnIpO1xuICogICAgICAgcmV0dXJuO1xuICogICAgIH1cbiAqXG4gKiAgICAgcGF5cGFsQnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAqXG4gKiAgICAgLy8gV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQsIGF0dGVtcHQgdG8gdG9rZW5pemUuXG4gKiAgICAgcGF5cGFsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgICAvLyBCZWNhdXNlIHRva2VuaXphdGlvbiBvcGVucyBhIHBvcHVwLCB0aGlzIGhhcyB0byBiZSBjYWxsZWQgYXMgYSByZXN1bHQgb2ZcbiAqICAgICAgIC8vIGN1c3RvbWVyIGFjdGlvbiwgbGlrZSBjbGlja2luZyBhIGJ1dHRvbi4gWW91IGNhbm5vdCBjYWxsIHRoaXMgYXQgYW55IHRpbWUuXG4gKiAgICAgICBwYXlwYWxJbnN0YW5jZS50b2tlbml6ZSh7XG4gKiAgICAgICAgIGZsb3c6ICd2YXVsdCdcbiAqICAgICAgICAgLy8gRm9yIG1vcmUgdG9rZW5pemF0aW9uIG9wdGlvbnMsIHNlZSB0aGUgZnVsbCBQYXlQYWwgdG9rZW5pemF0aW9uIGRvY3VtZW50YXRpb25cbiAqICAgICAgICAgLy8gaHR0cHM6Ly9icmFpbnRyZWUuZ2l0aHViLmlvL2JyYWludHJlZS13ZWIvY3VycmVudC9QYXlQYWwuaHRtbCN0b2tlbml6ZVxuICogICAgICAgfSwgZnVuY3Rpb24gKHRva2VuaXplRXJyLCBwYXlsb2FkKSB7XG4gKiAgICAgICAgIGlmICh0b2tlbml6ZUVycikge1xuICogICAgICAgICAgIGlmICh0b2tlbml6ZUVyci50eXBlICE9PSAnQ1VTVE9NRVInKSB7XG4gKiAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB0b2tlbml6aW5nOicsIHRva2VuaXplRXJyKTtcbiAqICAgICAgICAgICB9XG4gKiAgICAgICAgICAgcmV0dXJuO1xuICogICAgICAgICB9XG4gKlxuICogICAgICAgICAvLyBUb2tlbml6YXRpb24gc3VjY2VlZGVkXG4gKiAgICAgICAgIHBheXBhbEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKCdHb3QgYSBub25jZSEgWW91IHNob3VsZCBzdWJtaXQgdGhpcyB0byB5b3VyIHNlcnZlci4nKTtcbiAqICAgICAgICAgY29uc29sZS5sb2cocGF5bG9hZC5ub25jZSk7XG4gKiAgICAgICB9KTtcbiAqICAgICB9LCBmYWxzZSk7XG4gKiAgIH0pO1xuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IFwiUGF5UGFsXCI7XG5cbiAgcmV0dXJuIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uXG4gICAgLnZlcmlmeSh7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgY2xpZW50OiBvcHRpb25zLmNsaWVudCxcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjcmVhdGVEZWZlcnJlZENsaWVudC5jcmVhdGUoe1xuICAgICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICAgIGRlYnVnOiBvcHRpb25zLmRlYnVnLFxuICAgICAgICBhc3NldHNVcmw6IGNyZWF0ZUFzc2V0c1VybC5jcmVhdGUob3B0aW9ucy5hdXRob3JpemF0aW9uKSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgdmFyIHBwO1xuICAgICAgdmFyIGNvbmZpZyA9IGNsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG5cbiAgICAgIG9wdGlvbnMuY2xpZW50ID0gY2xpZW50O1xuXG4gICAgICBpZiAoY29uZmlnLmdhdGV3YXlDb25maWd1cmF0aW9uLnBheXBhbEVuYWJsZWQgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuUEFZUEFMX05PVF9FTkFCTEVEKSk7XG4gICAgICB9XG5cbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQob3B0aW9ucy5jbGllbnQsIFwicGF5cGFsLmluaXRpYWxpemVkXCIpO1xuXG4gICAgICBwcCA9IG5ldyBQYXlQYWwob3B0aW9ucyk7XG5cbiAgICAgIHJldHVybiBwcC5faW5pdGlhbGl6ZSgpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBmdW5jdGlvbiBpc1N1cHBvcnRlZFxuICogQGRlc2NyaXB0aW9uIFJldHVybnMgdHJ1ZSBpZiBQYXlQYWwgW3N1cHBvcnRzIHRoaXMgYnJvd3Nlcl0oaW5kZXguaHRtbCNicm93c2VyLXN1cHBvcnQtd2Vidmlld3MpLlxuICogQGV4YW1wbGVcbiAqIGlmIChicmFpbnRyZWUucGF5cGFsLmlzU3VwcG9ydGVkKCkpIHtcbiAqICAgLy8gQWRkIFBheVBhbCBidXR0b24gdG8gdGhlIHBhZ2VcbiAqIH0gZWxzZSB7XG4gKiAgIC8vIEhpZGUgUGF5UGFsIHBheW1lbnQgb3B0aW9uXG4gKiB9XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIFBheVBhbCBzdXBwb3J0cyB0aGlzIGJyb3dzZXIuXG4gKi9cbmZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogd3JhcFByb21pc2UoY3JlYXRlKSxcbiAgaXNTdXBwb3J0ZWQ6IGlzU3VwcG9ydGVkLFxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIFNESywgaS5lLiBge0Bwa2cgdmVyc2lvbn1gLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgVkVSU0lPTjogVkVSU0lPTixcbn07XG5cbn0se1wiLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCI6MTIyLFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiOjEyOSxcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCI6MTMxLFwiLi9leHRlcm5hbC9wYXlwYWxcIjoxNzgsXCIuL3NoYXJlZC9lcnJvcnNcIjoxODEsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMTgwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTEFORElOR19GUkFNRV9OQU1FOiBcImJyYWludHJlZXBheXBhbGxhbmRpbmdcIixcbiAgRkxPV19FTkRQT0lOVFM6IHtcbiAgICBjaGVja291dDogXCJjcmVhdGVfcGF5bWVudF9yZXNvdXJjZVwiLFxuICAgIHZhdWx0OiBcInNldHVwX2JpbGxpbmdfYWdyZWVtZW50XCIsXG4gIH0sXG4gIFJFUVVJUkVEX09QVElPTlM6IFtcInBheW1lbnRJZFwiLCBcImN1cnJlbmN5XCJdLFxufTtcblxufSx7fV0sMTgxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlBheVBhbCAtIENyZWF0aW9uIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiBbY3JlYXRpbmcgdGhlIFBheVBhbCBjb21wb25lbnRdKC4vbW9kdWxlLWJyYWludHJlZS13ZWJfcGF5cGFsLmh0bWwjLmNyZWF0ZSkuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBQQVlQQUxfTk9UX0VOQUJMRUQgT2NjdXJzIHdoZW4gUGF5UGFsIGlzIG5vdCBlbmFibGVkIG9uIHRoZSBCcmFpbnRyZWUgY29udHJvbCBwYW5lbC5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlBheVBhbCAtIHRva2VuaXplIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiB1c2luZyB0aGUgW2B0b2tlbml6ZWAgbWV0aG9kXSguL1BheVBhbC5odG1sI3Rva2VuaXplKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFBBWVBBTF9UT0tFTklaQVRJT05fUkVRVUVTVF9BQ1RJVkUgT2NjdXJzIHdoZW4gYSB0b2tlbml6YXRpb24gcmVxdWVzdCBpcyBhbHJlYWR5IGluIHByb2dyZXNzLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gUEFZUEFMX0ZMT1dfT1BUSU9OX1JFUVVJUkVEIE9jY3VycyB3aGVuIGZsb3cgb3B0aW9uIGlzIG5vdCBwcm92aWRlZC5cbiAqIEBwcm9wZXJ0eSB7TkVUV09SS30gUEFZUEFMX0FDQ09VTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRCBPY2N1cnMgd2hlbiBQYXlQYWwgYWNjb3VudCBjb3VsZCBub3QgYmUgdG9rZW5pemVkLlxuICogQHByb3BlcnR5IHtORVRXT1JLfSBQQVlQQUxfRkxPV19GQUlMRUQgT2NjdXJzIHdoZW4gUGF5UGFsIGZsb3cgY291bGQgbm90IGJlIGluaXRpYXRlZC5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFBBWVBBTF9QT1BVUF9PUEVOX0ZBSUxFRCBPY2N1cnMgd2hlbiBQYXlQYWwgd2luZG93IGNvdWxkIG5vdCBiZSBvcGVuZWQuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBQQVlQQUxfUE9QVVBfQ0xPU0VEIE9jY3VycyB3aGVuIGN1c3RvbWVyIGNsb3NlcyB0aGUgUGF5UGFsIHdpbmRvdyBiZWZvcmUgY29tcGxldGluZyB0aGUgZmxvdy5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFBBWVBBTF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OIE9jY3VycyB3aGVuIGFuIGludmFsaWQgcGF5bWVudCBvcHRpb24gaXMgcGFzc2VkLlxuICovXG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUEFZUEFMX05PVF9FTkFCTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJQQVlQQUxfTk9UX0VOQUJMRURcIixcbiAgICBtZXNzYWdlOiBcIlBheVBhbCBpcyBub3QgZW5hYmxlZCBmb3IgdGhpcyBtZXJjaGFudC5cIixcbiAgfSxcbiAgUEFZUEFMX1RPS0VOSVpBVElPTl9SRVFVRVNUX0FDVElWRToge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiUEFZUEFMX1RPS0VOSVpBVElPTl9SRVFVRVNUX0FDVElWRVwiLFxuICAgIG1lc3NhZ2U6IFwiQW5vdGhlciB0b2tlbml6YXRpb24gcmVxdWVzdCBpcyBhY3RpdmUuXCIsXG4gIH0sXG4gIFBBWVBBTF9BQ0NPVU5UX1RPS0VOSVpBVElPTl9GQUlMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5ORVRXT1JLLFxuICAgIGNvZGU6IFwiUEFZUEFMX0FDQ09VTlRfVE9LRU5JWkFUSU9OX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ291bGQgbm90IHRva2VuaXplIHVzZXIncyBQYXlQYWwgYWNjb3VudC5cIixcbiAgfSxcbiAgUEFZUEFMX0ZMT1dfRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTkVUV09SSyxcbiAgICBjb2RlOiBcIlBBWVBBTF9GTE9XX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ291bGQgbm90IGluaXRpYWxpemUgUGF5UGFsIGZsb3cuXCIsXG4gIH0sXG4gIFBBWVBBTF9GTE9XX09QVElPTl9SRVFVSVJFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiUEFZUEFMX0ZMT1dfT1BUSU9OX1JFUVVJUkVEXCIsXG4gICAgbWVzc2FnZTogXCJQYXlQYWwgZmxvdyBwcm9wZXJ0eSBpcyBpbnZhbGlkIG9yIG1pc3NpbmcuXCIsXG4gIH0sXG4gIFBBWVBBTF9QT1BVUF9PUEVOX0ZBSUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiUEFZUEFMX1BPUFVQX09QRU5fRkFJTEVEXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiUGF5UGFsIHBvcHVwIGZhaWxlZCB0byBvcGVuLCBtYWtlIHN1cmUgdG8gdG9rZW5pemUgaW4gcmVzcG9uc2UgdG8gYSB1c2VyIGFjdGlvbi5cIixcbiAgfSxcbiAgUEFZUEFMX1BPUFVQX0NMT1NFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiUEFZUEFMX1BPUFVQX0NMT1NFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ3VzdG9tZXIgY2xvc2VkIFBheVBhbCBwb3B1cCBiZWZvcmUgYXV0aG9yaXppbmcuXCIsXG4gIH0sXG4gIFBBWVBBTF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJQQVlQQUxfSU5WQUxJRF9QQVlNRU5UX09QVElPTlwiLFxuICAgIG1lc3NhZ2U6IFwiUGF5UGFsIHBheW1lbnQgb3B0aW9ucyBhcmUgaW52YWxpZC5cIixcbiAgfSxcbn07XG5cbn0se1wiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNH1dLDE4MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbi8qKiBAbW9kdWxlIGJyYWludHJlZS13ZWIvcHJlZmVycmVkLXBheW1lbnQtbWV0aG9kcyAqL1xuXG52YXIgd3JhcFByb21pc2UgPSBfZGVyZXFfKFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIik7XG52YXIgYmFzaWNDb21wb25lbnRWZXJpZmljYXRpb24gPSBfZGVyZXFfKFwiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIik7XG52YXIgUHJlZmVycmVkUGF5bWVudE1ldGhvZHMgPSBfZGVyZXFfKFwiLi9wcmVmZXJyZWQtcGF5bWVudC1tZXRob2RzXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcblxuLy8gTkVYVF9NQUpPUl9WRVJTSU9OXG4vLyBSZW1vdmUgdGhpcyBpbnRlZ3JhdGlvbiBlbnRpcmVseS4gSXQgZG9lc24ndCB3b3JrLCBpc24ndCBkb2N1bWVudGVkLCBhbmQgb3RoZXJ3aXNlIGlzbid0IGdvaW5nIHRvIGJlIHB1cnN1ZWQgZnVydGhlciBiZXlvbmQgdGhlIG5vbi1vcGVyYXRpb25hbCBiZXRhIGl0IGlzIGluLlxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDcmVhdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgYGRhdGFgLCBpcyB0aGUge0BsaW5rIFByZWZlcnJlZFBheW1lbnRNZXRob2RzfSBpbnN0YW5jZS5cbiAqIEBleGFtcGxlXG4gKiBicmFpbnRyZWUucHJlZmVycmVkUGF5bWVudE1ldGhvZHMuY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZVxuICogfSkudGhlbihmdW5jdGlvbiAocHJlZmVycmVkUGF5bWVudE1ldGhvZHNJbnN0YW5jZSkge1xuICogICAvLyBwcmVmZXJyZWRQYXltZW50TWV0aG9kc0luc3RhbmNlIGlzIHJlYWR5IHRvIGJlIHVzZWQuXG4gKiB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAqICAgLy8gaGFuZGxlIGNyZWF0aW9uIGVycm9yXG4gKiB9KTtcbiAqIEByZXR1cm5zIHtQcm9taXNlfHZvaWR9IFJldHVybnMgYSBQcm9taXNlIHdpdGggcmVzb2x2ZXMgd2l0aCB0aGUgUHJlZmVycmVkUGF5bWVudE1ldGhvZHMgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHZhciBuYW1lID0gXCJQcmVmZXJyZWRQYXltZW50TWV0aG9kc1wiO1xuXG4gIHJldHVybiBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvblxuICAgIC52ZXJpZnkoe1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgUHJlZmVycmVkUGF5bWVudE1ldGhvZHMoKTtcblxuICAgICAgcmV0dXJuIGluc3RhbmNlLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IHdyYXBQcm9taXNlKGNyZWF0ZSksXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgU0RLLCBpLmUuIGB7QHBrZyB2ZXJzaW9ufWAuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBWRVJTSU9OOiBWRVJTSU9OLFxufTtcblxufSx7XCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiOjEyMixcIi4vcHJlZmVycmVkLXBheW1lbnQtbWV0aG9kc1wiOjE4MyxcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCI6NDN9XSwxODM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcbnZhciBhbmFseXRpY3MgPSBfZGVyZXFfKFwiLi4vbGliL2FuYWx5dGljc1wiKTtcbnZhciBjcmVhdGVBc3NldHNVcmwgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCIpO1xudmFyIGNyZWF0ZURlZmVycmVkQ2xpZW50ID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCIpO1xuXG4vKipcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgU2VlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9wcmVmZXJyZWQtcGF5bWVudC1tZXRob2RzLmNyZWF0ZXxwcmVmZXJyZWQtcGF5bWVudC1tZXRob2RzLmNyZWF0ZX1cbiAqL1xuZnVuY3Rpb24gUHJlZmVycmVkUGF5bWVudE1ldGhvZHMoKSB7fVxuXG5QcmVmZXJyZWRQYXltZW50TWV0aG9kcy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLl9jbGllbnRQcm9taXNlID0gY3JlYXRlRGVmZXJyZWRDbGllbnRcbiAgICAuY3JlYXRlKHtcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICBkZWJ1Zzogb3B0aW9ucy5kZWJ1ZyxcbiAgICAgIGFzc2V0c1VybDogY3JlYXRlQXNzZXRzVXJsLmNyZWF0ZShvcHRpb25zLmF1dGhvcml6YXRpb24pLFxuICAgICAgbmFtZTogXCJQcmVmZXJyZWRQYXltZW50TWV0aG9kc1wiLFxuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHNlbGYuX3NldHVwRXJyb3IgPSBlcnI7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgIH0pO1xuXG4gIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgdGhpcy5fY2xpZW50UHJvbWlzZSxcbiAgICBcInByZWZlcnJlZC1wYXltZW50LW1ldGhvZHMuaW5pdGlhbGl6ZWRcIlxuICApO1xuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcyk7XG59O1xuXG4vKipcbiAqIEZldGNoZXMgaW5mb3JtYXRpb24gYWJvdXQgd2hpY2ggcGF5bWVudCBtZXRob2RzIGFyZSBwcmVmZXJyZWQgb24gdGhlIGRldmljZS5cbiAqIFVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIHBheW1lbnQgbWV0aG9kcyBhcmUgZ2l2ZW4gcHJlZmVyZW5jZSBpbiB5b3VyIFVJLFxuICogbm90IHdoZXRoZXIgdGhleSBhcmUgcHJlc2VudGVkIGVudGlyZWx5LlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgY3VycmVudGx5IGluIGJldGEgYW5kIG1heSBjaGFuZ2UgaW4gZnV0dXJlIHJlbGVhc2VzLlxuICogQHB1YmxpY1xuICogQHJldHVybnMge1Byb21pc2V8dm9pZH0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+UHJlZmVycmVkIFBheW1lbnQgTWV0aG9kczwvY2FwdGlvbj5cbiAqIHByZWZlcnJlZFBheW1lbnRNZXRob2RzSW5zdGFuY2UuZmV0Y2hQcmVmZXJyZWRQYXltZW50TWV0aG9kcygpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICogICBpZiAocmVzdWx0LnBheXBhbFByZWZlcnJlZCkge1xuICogICAgIC8vIFBheVBhbCBwcmVmZXJyZWRcbiAqICAgfSBlbHNlIHtcbiAqICAgICAvLyBQYXlQYWwgbm90IHByZWZlcnJlZFxuICogICB9XG4gKlxuICogICBpZiAocmVzdWx0LnZlbm1vUHJlZmVycmVkKSB7XG4gKiAgICAgLy8gVmVubW8gcHJlZmVycmVkXG4gKiAgIH0gZWxzZSB7XG4gKiAgICAgLy8gVmVubW8gbm90IHByZWZlcnJlZFxuICogICB9XG4gKiB9KTtcbiAqL1xuUHJlZmVycmVkUGF5bWVudE1ldGhvZHMucHJvdG90eXBlLmZldGNoUHJlZmVycmVkUGF5bWVudE1ldGhvZHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjbGllbnQ7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICByZXR1cm4gdGhpcy5fY2xpZW50UHJvbWlzZVxuICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnRJbnN0YW5jZSkge1xuICAgICAgY2xpZW50ID0gY2xpZW50SW5zdGFuY2U7XG5cbiAgICAgIHJldHVybiBjbGllbnQucmVxdWVzdCh7XG4gICAgICAgIGFwaTogXCJncmFwaFFMQXBpXCIsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBxdWVyeTpcbiAgICAgICAgICAgIFwicXVlcnkgUHJlZmVycmVkUGF5bWVudE1ldGhvZHMgeyBcIiArXG4gICAgICAgICAgICBcInByZWZlcnJlZFBheW1lbnRNZXRob2RzIHsgXCIgK1xuICAgICAgICAgICAgXCJwYXlwYWxQcmVmZXJyZWQgXCIgK1xuICAgICAgICAgICAgXCJ2ZW5tb1ByZWZlcnJlZCBcIiArXG4gICAgICAgICAgICBcIn0gXCIgK1xuICAgICAgICAgICAgXCJ9XCIsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIHZhciBwYXlwYWxQcmVmZXJyZWQgPSByZXN1bHQuZGF0YS5wcmVmZXJyZWRQYXltZW50TWV0aG9kcy5wYXlwYWxQcmVmZXJyZWQ7XG4gICAgICB2YXIgdmVubW9QcmVmZXJyZWQgPSByZXN1bHQuZGF0YS5wcmVmZXJyZWRQYXltZW50TWV0aG9kcy52ZW5tb1ByZWZlcnJlZDtcblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgY2xpZW50LFxuICAgICAgICBcInByZWZlcnJlZC1wYXltZW50LW1ldGhvZHMucGF5cGFsLmFwaS1kZXRlY3RlZC5cIiArIHBheXBhbFByZWZlcnJlZFxuICAgICAgKTtcbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgIGNsaWVudCxcbiAgICAgICAgXCJwcmVmZXJyZWQtcGF5bWVudC1tZXRob2RzLnZlbm1vLmFwaS1kZXRlY3RlZC5cIiArIHZlbm1vUHJlZmVycmVkXG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXlwYWxQcmVmZXJyZWQ6IHBheXBhbFByZWZlcnJlZCxcbiAgICAgICAgdmVubW9QcmVmZXJyZWQ6IHZlbm1vUHJlZmVycmVkLFxuICAgICAgfTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5fc2V0dXBFcnJvcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoc2VsZi5fc2V0dXBFcnJvcik7XG4gICAgICB9XG5cbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcInByZWZlcnJlZC1wYXltZW50LW1ldGhvZHMuYXBpLWVycm9yXCIpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXlwYWxQcmVmZXJyZWQ6IGZhbHNlLFxuICAgICAgICB2ZW5tb1ByZWZlcnJlZDogZmFsc2UsXG4gICAgICB9O1xuICAgIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB3cmFwUHJvbWlzZS53cmFwUHJvdG90eXBlKFByZWZlcnJlZFBheW1lbnRNZXRob2RzKTtcblxufSx7XCIuLi9saWIvYW5hbHl0aWNzXCI6MTE5LFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCI6MTI5LFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIjoxMzEsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMTg0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBzZXBhRXJyb3JzID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9lcnJvcnNcIik7XG52YXIgZnJhbWVTZXJ2aWNlID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9mcmFtZS1zZXJ2aWNlL2V4dGVybmFsXCIpO1xudmFyIGFuYWx5dGljcyA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYW5hbHl0aWNzXCIpO1xudmFyIHVzZU1pbiA9IF9kZXJlcV8oXCIuLi8uLi9saWIvdXNlLW1pblwiKTtcbnZhciBiaWxsaW5nQWRkcmVzc09wdGlvbnMgPVxuICBfZGVyZXFfKFwiLi4vc2hhcmVkL2NvbnN0YW50c1wiKS5CSUxMSU5HX0FERFJFU1NfT1BUSU9OUztcbnZhciBzbmFrZUNhc2VUb0NhbWVsQ2FzZSA9IF9kZXJlcV8oXCIuLi8uLi9saWIvc25ha2UtY2FzZS10by1jYW1lbC1jYXNlXCIpO1xuXG52YXIgUE9QVVBfV0lEVEggPSA0MDA7XG52YXIgUE9QVVBfSEVJR0hUID0gNTcwO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEB0eXBlZGVmIENyZWF0ZU1hbmRhdGVSZXNwb25zZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFwcHJvdmFsVXJsIFRoZSBVUkwgdG8gcHJlc2VudCB0byB0aGUgY3VzdG9tZXIgZm9yIHBheW1lbnQgYXBwcm92YWwuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbGFzdDQgVGhlIGxhc3QgZm91ciBkaWdpdHMgb2YgdGhlIGliYW4uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmFua1JlZmVyZW5jZVRva2VuIFRoZSB0b2tlbml6ZWQgcGF5bWVudCBzb3VyY2UgdG8gZnVuIHRoZSBwYXltZW50LlxuICovXG5cbi8qKlxuICpcbiAqIEEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGEgbWFuZGF0ZSBzbyB0aGF0IHdlIGNhbiBwcmVzZW50IHRoZSBtYW5kYXRlIHRvIHRoZSBjdXN0b21lciB2aWEgYSBwb3B1cC5cbiAqXG4gKiBAaWdub3JlXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlTWFuZGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGNsaWVudCBUaGUgQnJhaW50cmVlIGNsaWVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIEFsbCBvcHRpb25zIGZvciBpbnRpYXRpbmcgdGhlIFNFUEEgcGF5bWVudCBmbG93LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFjY291bnRIb2xkZXJOYW1lXSBUaGUgYWNjb3VudCBob2xkZXIgbmFtZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5iaWxsaW5nQWRkcmVzc10gVGhlIGN1c3RvbWVyJ3MgYmlsbGluZyBhZGRyZXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmlsbGluZ0FkZHJlc3MuYWRkcmVzc0xpbmUxXSBMaW5lIDEgb2YgdGhlIEFkZHJlc3MgKGVnLiBudW1iZXIsIHN0cmVldCwgZXRjKS4gQW4gZXJyb3Igd2lsbCBvY2N1ciBpZiB0aGlzIGFkZHJlc3MgaXMgbm90IHZhbGlkLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJpbGxpbmdBZGRyZXNzLmFkZHJlc3NMaW5lMl0gTGluZSAyIG9mIHRoZSBBZGRyZXNzIChlZy4gc3VpdGUsIGFwdCAjLCBldGMuKS4gQW4gZXJyb3Igd2lsbCBvY2N1ciBpZiB0aGlzIGFkZHJlc3MgaXMgbm90IHZhbGlkLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJpbGxpbmdBZGRyZXNzLmFkbWluQXJlYTFdIEN1c3RvbWVyJ3MgY2l0eS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5iaWxsaW5nQWRkcmVzcy5hZG1pbkFyZWEyXSBDdXN0b21lcidzIHJlZ2lvbiBvciBzdGF0ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5iaWxsaW5nQWRkcmVzcy5wb3N0YWxDb2RlXSBDdXN0b21lcidzIHBvc3RhbCBjb2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmNhbmNlbFVybF0gVGhlIFVSTCB0byByZWRpcmVjdCB0byBpZiBhdXRob3JpemF0aW9uIGlzIGNhbmNlbGxlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jb3VudHJ5Q29kZV0gVGhlIGN1c3RvbWVyJ3MgY291bnRyeSBjb2RlLiBBbHNvIHVzZWQgYXMgYmlsbGluZyBhZGRyZXNzIGNvdW50cnkgY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jdXN0b21lcklkXSBUaGUgY3VzdG9tZXIncyBpZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pYmFuXSBUaGUgY3VzdG9tZXIncyBJbnRlcm5hdGlvbmFsIEJhbmsgQWNjb3VudCBOdW1iZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXSBUaGUgQkNQIDQ3LWZvcm1hdHRlZCBsb2NhbGUuIFNlZSBodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL3JlZmVyZW5jZS9sb2NhbGUtY29kZXMvIGZvciBhIGxpc3Qgb2YgcG9zc2libGUgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm1hbmRhdGVUeXBlXSBTcGVjaWZ5IE9ORV9PRkYgb3IgUkVDVVJSRU5UIHBheW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubWVyY2hhbnRBY2NvdW50SWRdIFRoZSBtZXJjaGFudCdzIGFjY291bnQgaWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubWVyY2hhbnRJZF0gVGhlIG1lcmNoYW50IGlkLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnJldHVyblVybF0gVGhlIFVSTCB0byByZWRpcmVjdCB0byBpZiBhdXRob3JpemF0aW9uIGlzIHN1Y2Nlc3NmdWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxDcmVhdGVNYW5kYXRlUmVzcG9uc2V8RXJyb3I+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBtYW5kYXRlIHJlc3BvbnNlIG9yIGFuIGVycm9yLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZU1hbmRhdGUoY2xpZW50LCBvcHRpb25zKSB7XG4gIC8vIERpc2FibGluZyBlc2xpbnQgYmVjYXVzZSBhcGkgaXMgZXhwZWN0aW5nIHNuYWtlX2Nhc2UgZm9ybWF0IGZvciB0aGUga2V5c1xuICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICB2YXIgZGF0YSA9IHtcbiAgICBzZXBhX2RlYml0OiB7XG4gICAgICBhY2NvdW50X2hvbGRlcl9uYW1lOiBvcHRpb25zLmFjY291bnRIb2xkZXJOYW1lLFxuICAgICAgYmlsbGluZ19hZGRyZXNzOiB7XG4gICAgICAgIGNvdW50cnlfY29kZTogb3B0aW9ucy5jb3VudHJ5Q29kZSxcbiAgICAgIH0sXG4gICAgICBpYmFuOiBvcHRpb25zLmliYW4sXG4gICAgICBtZXJjaGFudF9vcl9wYXJ0bmVyX2N1c3RvbWVyX2lkOiBvcHRpb25zLmN1c3RvbWVySWQsXG4gICAgICBtYW5kYXRlX3R5cGU6IG9wdGlvbnMubWFuZGF0ZVR5cGUsXG4gICAgfSxcbiAgICBsb2NhbGU6IG9wdGlvbnMubG9jYWxlLFxuICAgIGNhbmNlbF91cmw6IG9wdGlvbnMuY2FuY2VsVXJsLFxuICAgIHJldHVybl91cmw6IG9wdGlvbnMucmV0dXJuVXJsLFxuICAgIG1lcmNoYW50X2FjY291bnRfaWQ6IG9wdGlvbnMubWVyY2hhbnRBY2NvdW50SWQsXG4gIH07XG5cbiAgaWYgKG9wdGlvbnMuYmlsbGluZ0FkZHJlc3MpIHtcbiAgICBiaWxsaW5nQWRkcmVzc09wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICB2YXIgY2NPcHRpb24gPSBzbmFrZUNhc2VUb0NhbWVsQ2FzZShvcHRpb24pO1xuICAgICAgaWYgKGNjT3B0aW9uIGluIG9wdGlvbnMuYmlsbGluZ0FkZHJlc3MpIHtcbiAgICAgICAgZGF0YS5zZXBhX2RlYml0LmJpbGxpbmdfYWRkcmVzc1tvcHRpb25dID1cbiAgICAgICAgICBvcHRpb25zLmJpbGxpbmdBZGRyZXNzW2NjT3B0aW9uXTsgLy8gY2FtZWxDYXNlIGVxdWl2aWxlbnQgb2Ygb3B0aW9uIChlZy4gcG9zdGFsX2NvZGUgPSBwb3N0YWxDb2RlKSBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gIHJldHVybiBjbGllbnRcbiAgICAucmVxdWVzdCh7XG4gICAgICBhcGk6IFwiY2xpZW50QXBpXCIsXG4gICAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgICAgZW5kcG9pbnQ6IFwic2VwYV9kZWJpdFwiLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgdmFyIHNlcGFEZWJpdEFjY291bnQgPSByZXNwb25zZS5tZXNzYWdlLmJvZHkuc2VwYURlYml0QWNjb3VudDtcblxuICAgICAgaWYgKCFzZXBhRGViaXRBY2NvdW50KSB7XG4gICAgICAgIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcihzZXBhRXJyb3JzLlNFUEFfQ1JFQVRFX01BTkRBVEVfRkFJTEVEKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYXBwcm92YWxVcmw6IHNlcGFEZWJpdEFjY291bnQuYXBwcm92YWxVcmwsXG4gICAgICAgIGxhc3Q0OiBzZXBhRGViaXRBY2NvdW50Lmxhc3Q0LFxuICAgICAgICBiYW5rUmVmZXJlbmNlVG9rZW46IHNlcGFEZWJpdEFjY291bnQuYmFua1JlZmVyZW5jZVRva2VuLFxuICAgICAgfTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgQnJhaW50cmVlRXJyb3Ioc2VwYUVycm9ycy5TRVBBX0NSRUFURV9NQU5EQVRFX0ZBSUxFRCk7XG4gICAgfSk7XG59XG5cbi8qKlxuICpcbiAqIEEgZnVuY3Rpb24gZm9yIG9wZW5pbmcgYW5kIG1hbmFnaW5nIHRoZSBwb3B1cCB1c2VkIGZvciBhdXRob3JpemF0aW9uLlxuICpcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnQgVGhlIEJyYWludHJlZSBjbGllbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucyBUaGUgaW5wdXQgb3B0aW9ucyBuZWVkZWQgdG8gbWFuYWdlIHRoZSBwb3B1cCBwb3J0aW9uIG9mIHRoZSBmbG93LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFzc2V0c1VybF0gVGhlIHVybCB0byB0aGUgQnJhaW50cmVlIGFzc2V0IHRvIGJlIHVzZWQgaW4gZnJhbWVzZXJ2aWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFwcHJvdmFsVXJsXSBUaGUgdXJsIHRvIG9wZW4gZm9yIFNFUEEgYXV0aG9yaXphdGlvbi4gSXQgaXMgYGFwcHJvdmFsVXJsYCBjb21pbmcgYmFjayBmcm9tIHRoZSBtYW5kYXRlIGNyZWF0aW9uLCBidXQgY29tbW9ubHkgcmVmZXJlZCB0byBhcyB0aGUgbWFuZGF0ZSBsaW5rLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmRlYnVnXSBXaGV0aGVyIHRvIHVzZSBkZWJ1Z2dpbmcgbW9kZXMgb3Igbm90LlxuICogQHJldHVybnMge1Byb21pc2U8dm9pZHxFcnJvcj59IFJldHVybnMgYSBwcm9taXNlLlxuICovXG5mdW5jdGlvbiBvcGVuUG9wdXAoY2xpZW50LCBvcHRpb25zKSB7XG4gIHZhciBwb3B1cE5hbWUgPSBcInNlcGFkaXJlY3RkZWJpdFwiO1xuICB2YXIgYXNzZXRzQmFzZVVybCA9IG9wdGlvbnMuYXNzZXRzVXJsICsgXCIvaHRtbFwiO1xuICB2YXIgZGVidWcgPSBvcHRpb25zLmRlYnVnIHx8IGZhbHNlO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHBvcHVwTG9jYXRpb24gPSBjZW50ZXJlZFBvcHVwRGltZW5zaW9ucygpO1xuXG4gICAgZnJhbWVTZXJ2aWNlLmNyZWF0ZShcbiAgICAgIHtcbiAgICAgICAgbmFtZTogcG9wdXBOYW1lLFxuICAgICAgICBkaXNwYXRjaEZyYW1lVXJsOlxuICAgICAgICAgIGFzc2V0c0Jhc2VVcmwgKyBcIi9kaXNwYXRjaC1mcmFtZVwiICsgdXNlTWluKGRlYnVnKSArIFwiLmh0bWxcIixcbiAgICAgICAgb3BlbkZyYW1lVXJsOlxuICAgICAgICAgIGFzc2V0c0Jhc2VVcmwgKyBcIi9zZXBhLWxhbmRpbmctZnJhbWVcIiArIHVzZU1pbihkZWJ1ZykgKyBcIi5odG1sXCIsXG4gICAgICAgIHRvcDogcG9wdXBMb2NhdGlvbi50b3AsXG4gICAgICAgIGxlZnQ6IHBvcHVwTG9jYXRpb24ubGVmdCxcbiAgICAgICAgaGVpZ2h0OiBQT1BVUF9IRUlHSFQsXG4gICAgICAgIHdpZHRoOiBQT1BVUF9XSURUSCxcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoZnJhbWVTZXJ2aWNlSW5zdGFuY2UpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChjbGllbnQsIFwic2VwYS5wb3B1cC5pbml0aWFsaXplZFwiKTtcbiAgICAgICAgZnJhbWVTZXJ2aWNlSW5zdGFuY2Uub3Blbih7fSwgZnVuY3Rpb24gKGVyciwgcGFyYW1zKSB7XG4gICAgICAgICAgaWYgKG1hbmRhdGVBcHByb3ZlZChwYXJhbXMpKSB7XG4gICAgICAgICAgICBmcmFtZVNlcnZpY2VJbnN0YW5jZS5jbG9zZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXN0b21lckNhbmNlbGVkKHBhcmFtcywgZXJyKSkge1xuICAgICAgICAgICAgZnJhbWVTZXJ2aWNlSW5zdGFuY2UuY2xvc2UoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChcbiAgICAgICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKHNlcGFFcnJvcnMuU0VQQV9DVVNUT01FUl9DQU5DRUxFRClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnJhbWVTZXJ2aWNlSW5zdGFuY2UuY2xvc2UoKTtcblxuICAgICAgICAgIHJldHVybiByZWplY3QoXG4gICAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioc2VwYUVycm9ycy5TRVBBX1RPS0VOSVpBVElPTl9GQUlMRUQpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnJhbWVTZXJ2aWNlSW5zdGFuY2UucmVkaXJlY3Qob3B0aW9ucy5hcHByb3ZhbFVybCk7XG4gICAgICB9XG4gICAgKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1hbmRhdGVBcHByb3ZlZChwYXJhbXMpIHtcbiAgcmV0dXJuIHBhcmFtcyAmJiBwYXJhbXMuc3VjY2Vzcztcbn1cblxuZnVuY3Rpb24gY3VzdG9tZXJDYW5jZWxlZChwYXJhbXMsIGVycm9yKSB7XG4gIHJldHVybiAoXG4gICAgKHBhcmFtcyAmJiBwYXJhbXMuY2FuY2VsKSB8fFxuICAgIChlcnJvciAmJiBlcnJvci5jb2RlID09PSBcIkZSQU1FX1NFUlZJQ0VfRlJBTUVfQ0xPU0VEXCIpXG4gICk7XG59XG5cbmZ1bmN0aW9uIGNlbnRlcmVkUG9wdXBEaW1lbnNpb25zKCkge1xuICB2YXIgcG9wdXBUb3AgPVxuICAgIE1hdGgucm91bmQoKHdpbmRvdy5vdXRlckhlaWdodCAtIFBPUFVQX0hFSUdIVCkgLyAyKSArIHdpbmRvdy5zY3JlZW5Ub3A7XG4gIHZhciBwb3B1cExlZnQgPVxuICAgIE1hdGgucm91bmQoKHdpbmRvdy5vdXRlcldpZHRoIC0gUE9QVVBfV0lEVEgpIC8gMikgKyB3aW5kb3cuc2NyZWVuTGVmdDtcblxuICByZXR1cm4ge1xuICAgIHRvcDogcG9wdXBUb3AsXG4gICAgbGVmdDogcG9wdXBMZWZ0LFxuICB9O1xufVxuXG4vKipcbiAqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIG1hbmRhdGUgc28gdGhhdCB3ZSBjYW4gcHJlc2VudCB0aGUgbWFuZGF0ZSB0byB0aGUgY3VzdG9tZXIgdmlhIGEgcG9wdXAuXG4gKlxuICogQGlnbm9yZVxuICogQHN0YXRpY1xuICogQGZ1bmN0aW9uIGhhbmRsZUFwcHJvdmFsXG4gKiBAcGFyYW0ge29iamVjdH0gY2xpZW50IFRoZSBCcmFpbnRyZWUgY2xpZW50LlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQWxsIG9wdGlvbnMgZm9yIGludGlhdGluZyB0aGUgU0VQQSBwYXltZW50IGZsb3cuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmFua1JlZmVyZW5jZVRva2VuXSBUaGUgdG9rZW5pemVkIHBheW1lbnQgc291cmNlIHRvIGZ1biB0aGUgcGF5bWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jdXN0b21lcklkXSBUaGUgY3VzdG9tZXIncyBpZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYXN0NF0gVGhlIGxhc3QgZm91ciBkaWdpdHMgb2YgaWJhbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5tYW5kYXRlVHlwZV0gVGhlIG1hbmRhdGUgdHlwZSBiZWluZyB1c2VkLiBTcGVjaWZ5IE9ORV9PRkYgb3IgUkVDVVJSRU5UIHBheW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubWVyY2hhbnRBY2NvdW50SWRdIFRoZSBtZXJjaGFudCdzIGFjY291bnQgaWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubWVyY2hhbnRJZF0gVGhlIG1lcmNoYW50IGlkLlxuICogQHJldHVybnMge1Byb21pc2U8dG9rZW5pemVQYXlsb2FkfEVycm9yPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgYXBwcm92YWwgcmVzcG9uc2Ugb3IgYW4gZXJyb3IuXG4gKi9cblxuZnVuY3Rpb24gaGFuZGxlQXBwcm92YWwoY2xpZW50LCBvcHRpb25zKSB7XG4gIC8vIERpc2FibGluZyBlc2xpbnQgYmVjYXVzZSBhcGkgaXMgZXhwZWN0aW5nIHNuYWtlX2Nhc2UgZm9ybWF0IGZvciB0aGUga2V5c1xuICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICB2YXIgZGF0YSA9IHtcbiAgICBzZXBhX2RlYml0X2FjY291bnQ6IHtcbiAgICAgIGxhc3RfNDogb3B0aW9ucy5sYXN0NCxcbiAgICAgIG1lcmNoYW50X29yX3BhcnRuZXJfY3VzdG9tZXJfaWQ6IG9wdGlvbnMuY3VzdG9tZXJJZCxcbiAgICAgIGJhbmtfcmVmZXJlbmNlX3Rva2VuOiBvcHRpb25zLmJhbmtSZWZlcmVuY2VUb2tlbixcbiAgICAgIG1hbmRhdGVfdHlwZTogb3B0aW9ucy5tYW5kYXRlVHlwZSxcbiAgICB9LFxuICAgIG1lcmNoYW50X2FjY291bnRfaWQ6IG9wdGlvbnMubWVyY2hhbnRBY2NvdW50SWQsXG4gIH07XG5cbiAgLyogZXNsaW50LWVuYWJsZSAqL1xuICByZXR1cm4gY2xpZW50XG4gICAgLnJlcXVlc3Qoe1xuICAgICAgYXBpOiBcImNsaWVudEFwaVwiLFxuICAgICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICAgIGVuZHBvaW50OiBcInBheW1lbnRfbWV0aG9kcy9zZXBhX2RlYml0X2FjY291bnRzXCIsXG4gICAgICBkYXRhOiBkYXRhLFxuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAoIXJlc3BvbnNlLm5vbmNlKSB7XG4gICAgICAgIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcihzZXBhRXJyb3JzLlNFUEFfVFJBTlNBQ1RJT05fRkFJTEVEKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbm9uY2U6IHJlc3BvbnNlLm5vbmNlLFxuICAgICAgICBpYmFuTGFzdEZvdXI6IG9wdGlvbnMubGFzdDQsXG4gICAgICAgIGN1c3RvbWVySWQ6IG9wdGlvbnMuY3VzdG9tZXJJZCxcbiAgICAgICAgbWFuZGF0ZVR5cGU6IG9wdGlvbnMubWFuZGF0ZVR5cGUsXG4gICAgICB9O1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcihzZXBhRXJyb3JzLlNFUEFfVFJBTlNBQ1RJT05fRkFJTEVEKTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZU1hbmRhdGU6IGNyZWF0ZU1hbmRhdGUsXG4gIG9wZW5Qb3B1cDogb3BlblBvcHVwLFxuICBoYW5kbGVBcHByb3ZhbDogaGFuZGxlQXBwcm92YWwsXG4gIFBPUFVQX1dJRFRIOiBQT1BVUF9XSURUSCxcbiAgUE9QVVBfSEVJR0hUOiBQT1BVUF9IRUlHSFQsXG59O1xuXG59LHtcIi4uLy4uL2xpYi9hbmFseXRpY3NcIjoxMTksXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vLi4vbGliL2ZyYW1lLXNlcnZpY2UvZXh0ZXJuYWxcIjoxMzksXCIuLi8uLi9saWIvc25ha2UtY2FzZS10by1jYW1lbC1jYXNlXCI6MTU5LFwiLi4vLi4vbGliL3VzZS1taW5cIjoxNjAsXCIuLi9zaGFyZWQvY29uc3RhbnRzXCI6MTg3LFwiLi4vc2hhcmVkL2Vycm9yc1wiOjE4OH1dLDE4NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG52YXIgc2VwYUVycm9ycyA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvZXJyb3JzXCIpO1xudmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oXCIuLi9zaGFyZWQvY29uc3RhbnRzXCIpO1xudmFyIG1hbmRhdGVzID0gX2RlcmVxXyhcIi4vbWFuZGF0ZVwiKTtcbnZhciBoYXNNaXNzaW5nT3B0aW9uID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9oYXMtbWlzc2luZy1vcHRpb25cIik7XG52YXIgYW5hbHl0aWNzID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9hbmFseXRpY3NcIik7XG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xudmFyIGFzc2lnbiA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYXNzaWduXCIpLmFzc2lnbjtcblxuLyoqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIHNlZSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvc2VwYS5jcmVhdGV8c2VwYS5jcmVhdGV9XG4gKiBAZGVzY3JpcHRpb24gPHN0cm9uZz5EbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIFVzZSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvc2VwYS5jcmVhdGV8YnJhaW50cmVlLXdlYi5zZXBhLmNyZWF0ZX0gaW5zdGVhZC48L3N0cm9uZz5cbiAqIEBjbGFzc2Rlc2MgVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgU0VQQSBjb21wb25lbnQgcHJvZHVjZWQgYnkge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL3NlcGEuY3JlYXRlfGJyYWludHJlZS13ZWIuc2VwYS5jcmVhdGV9LiBJbnN0YW5jZXMgcHJvdmlkZSBtZXRob2RzIGZvciB0b2tlbml6aW5nIFNFUEEgcGF5bWVudHMuXG4gKi9cbmZ1bmN0aW9uIFNFUEEob3B0aW9ucykge1xuICB2YXIgZ2V0Q29uZmlndXJhdGlvbiA9IG9wdGlvbnMuY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKTtcblxuICB0aGlzLl9jbGllbnQgPSBvcHRpb25zLmNsaWVudDtcbiAgdGhpcy5fYXNzZXRzVXJsID1cbiAgICBnZXRDb25maWd1cmF0aW9uLmdhdGV3YXlDb25maWd1cmF0aW9uLmFzc2V0c1VybCArIFwiL3dlYi9cIiArIFZFUlNJT047XG4gIHRoaXMuX2lzRGVidWcgPSBnZXRDb25maWd1cmF0aW9uLmlzRGVidWc7XG4gIHRoaXMuX3JldHVyblVybCA9IHRoaXMuX2Fzc2V0c1VybCArIFwiL2h0bWwvcmVkaXJlY3QtZnJhbWUuaHRtbD9zdWNjZXNzPTFcIjtcbiAgdGhpcy5fY2FuY2VsVXJsID0gdGhpcy5fYXNzZXRzVXJsICsgXCIvaHRtbC9yZWRpcmVjdC1mcmFtZS5odG1sP2NhbmNlbD0xXCI7XG5cbiAgYW5hbHl0aWNzLnNlbmRFdmVudCh0aGlzLl9jbGllbnQsIFwic2VwYS5jb21wb25lbnQuaW5pdGlhbGl6ZWRcIik7XG59XG5cbi8qKlxuICogU0VQQSB0b2tlbml6ZSBwYXlsb2FkLlxuICogQHR5cGVkZWYgU0VQQX50b2tlbml6ZVBheWxvYWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBub25jZSBUaGUgcGF5bWVudCBub25jZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpYmFuTGFzdEZvdXIgVGhlIGxhc3QgZm91ciBkaWdpdHMgb2YgdGhlIGN1c3RvbWVyJ3MgSUJBTi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtYW5kYXRlVHlwZSBUaGUgc3BlY2lmaWVkIG1hbmRhdGVUeXBlIHVzZWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY3VzdG9tZXJJZCBUaGUgcHJvdmlkZWQgY3VzdG9tZXIgaWQuXG4gKi9cblxuLyoqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBbGwgb3B0aW9ucyBmb3IgaW50aWF0aW5nIHRoZSBTRVBBIHBheW1lbnQgZmxvdy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hY2NvdW50SG9sZGVyTmFtZV0gVGhlIGFjY291bnQgaG9sZGVyIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY3VzdG9tZXJJZF0gVGhlIGN1c3RvbWVyJ3MgaWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWJhbl0gVGhlIGN1c3RvbWVyJ3MgSW50ZXJuYXRpb25hbCBCYW5rIEFjY291bnQgTnVtYmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm1hbmRhdGVUeXBlXSBTcGVjaWZ5IE9ORV9PRkYgb3IgUkVDVVJSRU5UIHBheW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY291bnRyeUNvZGVdIFRoZSBjdXN0b21lcidzIGNvdW50cnkgY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5tZXJjaGFudEFjY291bnRJZF0gVGhlIG1lcmNoYW50J3MgYWNjb3VudCBpZC5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIGZpcnN0IGFyZ3VtZW50IGlzIGFuIGVycm9yIG9iamVjdCwgd2hlcmUgdGhlIHNlY29uZCBpcyBhIHtAbGluayBTRVBBfnRva2VuaXplUGF5bG9hZHx0b2tlbml6ZVBheWxvYWR9XG4gKiBAcmV0dXJucyB7KFByb21pc2U8dG9rZW5pemVQYXlsb2FkfGVycm9yPil9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gKiAgIHZhciB0b2tlbml6ZUlucHV0cyA9IHtcbiAqICAgICBhY2NvdW50SG9sZGVyTmFtZTogXCJzb21lLWFjY250LWhvbGRlci1uYW1lXCIsXG4gKiAgICAgY3VzdG9tZXJJZDogXCJhLWN1c3RvbWVyLWlkXCIsXG4gKiAgICAgaWJhbjogXCJhLWZ1bGwtaWJhblwiLFxuICogICAgIG1hbmRhdGVUeXBlOiBcIk9ORV9PRkZcIixcbiAqICAgICBjb3VudHJ5Q29kZTogXCJMSVwiLFxuICogICAgIG1lcmNoYW50QWNjb3VudElkOiBcImEtbWVyY2hhbnQtYWNjb3VudC1pZFwiXG4gKiAgIH1cbiAqICAgc2VwYUluc3RhbmNlLnRva2VuaXplKHRva2VuaXplSW5wdXRzKS50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gKiAgICAgIC8vIFN1Ym1pdCBwYXlsb2FkLm5vbmNlIHRvIHlvdXIgc2VydmVyXG4gKiAgIH0pLmNhdGNoKGZ1bmN0aW9uKHRva2VuaXphdGlvbkVycikge1xuICogICAgIC8vIEhhbmRsZSBlcnJvcnMgaW4gdGhlIGZsb3dcbiAqICAgfSlcbiAqIH0pXG4gKi9cblNFUEEucHJvdG90eXBlLnRva2VuaXplID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY3JlYXRlTWFuZGF0ZU9wdGlvbnMgPSBhc3NpZ24oXG4gICAgeyBjYW5jZWxVcmw6IHNlbGYuX2NhbmNlbFVybCwgcmV0dXJuVXJsOiBzZWxmLl9yZXR1cm5VcmwgfSxcbiAgICBvcHRpb25zXG4gICk7XG5cbiAgaWYgKCFvcHRpb25zIHx8IGhhc01pc3NpbmdPcHRpb24ob3B0aW9ucywgY29uc3RhbnRzLlJFUVVJUkVEX09QVElPTlMpKSB7XG4gICAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwic2VwYS5pbnB1dC12YWxpZGF0aW9uLm1pc3Npbmctb3B0aW9uc1wiKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihzZXBhRXJyb3JzLlNFUEFfVE9LRU5JWkVfTUlTU0lOR19SRVFVSVJFRF9PUFRJT04pXG4gICAgKTtcbiAgfVxuXG4gIGlmICghY29uc3RhbnRzLk1BTkRBVEVfVFlQRV9FTlVNLmluY2x1ZGVzKG9wdGlvbnMubWFuZGF0ZVR5cGUpKSB7XG4gICAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwic2VwYS5pbnB1dC12YWxpZGF0aW9uLmludmFsaWQtbWFuZGF0ZVwiKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihzZXBhRXJyb3JzLlNFUEFfSU5WQUxJRF9NQU5EQVRFX1RZUEUpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBtYW5kYXRlc1xuICAgIC5jcmVhdGVNYW5kYXRlKHNlbGYuX2NsaWVudCwgY3JlYXRlTWFuZGF0ZU9wdGlvbnMpXG4gICAgLnRoZW4oZnVuY3Rpb24gKG1hbmRhdGVSZXNwb25zZSkge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwic2VwYS5jcmVhdGUtbWFuZGF0ZS5zdWNjZXNzXCIpO1xuICAgICAgb3B0aW9ucy5sYXN0NCA9IG1hbmRhdGVSZXNwb25zZS5sYXN0NDtcbiAgICAgIG9wdGlvbnMuYmFua1JlZmVyZW5jZVRva2VuID0gbWFuZGF0ZVJlc3BvbnNlLmJhbmtSZWZlcmVuY2VUb2tlbjtcblxuICAgICAgcmV0dXJuIG1hbmRhdGVzLm9wZW5Qb3B1cChzZWxmLl9jbGllbnQsIHtcbiAgICAgICAgYXBwcm92YWxVcmw6IG1hbmRhdGVSZXNwb25zZS5hcHByb3ZhbFVybCxcbiAgICAgICAgYXNzZXRzVXJsOiBzZWxmLl9hc3NldHNVcmwsXG4gICAgICB9KTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoc2VsZi5fY2xpZW50LCBcInNlcGEubWFuZGF0ZS5hcHByb3ZlZFwiKTtcblxuICAgICAgcmV0dXJuIG1hbmRhdGVzLmhhbmRsZUFwcHJvdmFsKHNlbGYuX2NsaWVudCwge1xuICAgICAgICBiYW5rUmVmZXJlbmNlVG9rZW46IG9wdGlvbnMuYmFua1JlZmVyZW5jZVRva2VuLFxuICAgICAgICBsYXN0NDogb3B0aW9ucy5sYXN0NCxcbiAgICAgICAgY3VzdG9tZXJJZDogb3B0aW9ucy5jdXN0b21lcklkLFxuICAgICAgICBtYW5kYXRlVHlwZTogb3B0aW9ucy5tYW5kYXRlVHlwZSxcbiAgICAgICAgbWVyY2hhbnRBY2NvdW50SWQ6IG9wdGlvbnMubWVyY2hhbnRBY2NvdW50SWQsXG4gICAgICB9KTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChhcHByb3ZhbCkge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwic2VwYS50b2tlbml6YXRpb24uc3VjY2Vzc1wiKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShhcHByb3ZhbCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwic2VwYS5cIiArIGVyci5kZXRhaWxzICsgXCIuZmFpbGVkXCIpO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gd3JhcFByb21pc2Uud3JhcFByb3RvdHlwZShTRVBBKTtcblxufSx7XCIuLi8uLi9saWIvYW5hbHl0aWNzXCI6MTE5LFwiLi4vLi4vbGliL2Fzc2lnblwiOjEyMSxcIi4uLy4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuLi9zaGFyZWQvY29uc3RhbnRzXCI6MTg3LFwiLi4vc2hhcmVkL2Vycm9yc1wiOjE4OCxcIi4uL3NoYXJlZC9oYXMtbWlzc2luZy1vcHRpb25cIjoxODksXCIuL21hbmRhdGVcIjoxODQsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMTg2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgYnJhaW50cmVlLXdlYi9zZXBhICovXG5cbnZhciBhbmFseXRpY3MgPSBfZGVyZXFfKFwiLi4vbGliL2FuYWx5dGljc1wiKTtcbnZhciBTRVBBID0gX2RlcmVxXyhcIi4vZXh0ZXJuYWwvc2VwYVwiKTtcbnZhciBjcmVhdGVBc3NldHNVcmwgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCIpO1xudmFyIGNyZWF0ZURlZmVycmVkQ2xpZW50ID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCIpO1xudmFyIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uID0gX2RlcmVxXyhcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCIpO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDcmVhdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZGVidWddIEEgZGVidWcgZmxhZy5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gV2hlbiBwcm92aWRlZCwgd2lsbCBiZSB1c2VkIGluc3RlYWQgb2YgYSBwcm9taXNlLiBGaXJzdCBhcmd1bWVudCBpcyBhbiBlcnJvciBvYmplY3QsIHdoZXJlIHRoZSBzZWNvbmQgaXMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFNFUEF8U0VQQX0uXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkfGVycm9yPn0gUmV0dXJucyB0aGUgU0VQQSBpbnN0YW5jZS5cbiAqIEBleGFtcGxlXG4gKiBicmFpbnRyZWUuc2VwYS5jcmVhdGUoe1xuICogICBjbGllbnQ6IGNsaWVudEluc3RhbmNlXG4gKiB9KS50aGVuKGZ1bmN0aW9uIChzZXBhSW5zdGFuY2UpIHtcbiAqICAgLy8gc2VwYUluc3RhbmNlIGlzIHJlYWR5IHRvIGJlIHVzZWQuXG4gKiB9KS5jYXRjaChmdW5jdGlvbiAoY3JlYXRlRXJyKSB7XG4gKiAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIFNFUEEgaW5zdGFuY2UnLCBjcmVhdGVFcnIpO1xuICogfSk7XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5DcmVhdGluZyBhIFNFUEEgY29tcG9uZW50PC9jYXB0aW9uPlxuICogYnJhaW50cmVlLnNlcGEuY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAqIH0pLnRoZW4oZnVuY3Rpb24gKHNlcGFJbnN0YW5jZSkge1xuICogICAvLyBzZXBhSW5zdGFuY2UgaXMgcmVhZHkgdG8gYmUgdXNlZC5cbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChjcmVhdGVFcnIpIHtcbiAqICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgU0VQQSBpbnN0YW5jZScsIGNyZWF0ZUVycik7XG4gKiB9KTtcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IFwiU0VQQVwiO1xuXG4gIHJldHVybiBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvblxuICAgIC52ZXJpZnkoe1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRGVmZXJyZWRDbGllbnQuY3JlYXRlKHtcbiAgICAgICAgYXV0aG9yaXphdGlvbjogb3B0aW9ucy5hdXRob3JpemF0aW9uLFxuICAgICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgICBkZWJ1Zzogb3B0aW9ucy5kZWJ1ZyxcbiAgICAgICAgYXNzZXRzVXJsOiBjcmVhdGVBc3NldHNVcmwuY3JlYXRlKG9wdGlvbnMuYXV0aG9yaXphdGlvbiksXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB9KTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIG9wdGlvbnMuY2xpZW50ID0gY2xpZW50O1xuXG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KG9wdGlvbnMuY2xpZW50LCBcInNlcGEuY2xpZW50LmluaXRpYWxpemVkXCIpO1xuXG4gICAgICByZXR1cm4gbmV3IFNFUEEob3B0aW9ucyk7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IHdyYXBQcm9taXNlKGNyZWF0ZSksXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgU0RLLCBpLmUuIGB7QHBrZyB2ZXJzaW9ufWAuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBWRVJTSU9OOiBWRVJTSU9OLFxufTtcblxufSx7XCIuLi9saWIvYW5hbHl0aWNzXCI6MTE5LFwiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIjoxMjIsXCIuLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIjoxMjksXCIuLi9saWIvY3JlYXRlLWRlZmVycmVkLWNsaWVudFwiOjEzMSxcIi4vZXh0ZXJuYWwvc2VwYVwiOjE4NSxcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCI6NDN9XSwxODc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBSRVFVSVJFRF9PUFRJT05TOiBbXG4gICAgXCJpYmFuXCIsXG4gICAgXCJtZXJjaGFudEFjY291bnRJZFwiLFxuICAgIFwibWFuZGF0ZVR5cGVcIixcbiAgICBcImN1c3RvbWVySWRcIixcbiAgICBcImFjY291bnRIb2xkZXJOYW1lXCIsXG4gICAgXCJjb3VudHJ5Q29kZVwiLFxuICBdLFxuICBCSUxMSU5HX0FERFJFU1NfT1BUSU9OUzogW1xuICAgIFwiYWRkcmVzc19saW5lXzFcIixcbiAgICBcImFkZHJlc3NfbGluZV8yXCIsXG4gICAgXCJhZG1pbl9hcmVhXzFcIixcbiAgICBcImFkbWluX2FyZWFfMlwiLFxuICAgIFwicG9zdGFsX2NvZGVcIixcbiAgXSxcbiAgTUFOREFURV9UWVBFX0VOVU06IFtcIk9ORV9PRkZcIiwgXCJSRUNVUlJFTlRcIl0sXG59O1xuXG59LHt9XSwxODg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlNFUEEgLSB0b2tlbml6ZSBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gdXNpbmcgdGhlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9zZXBhLnRva2VuaXplfHNlcGEudG9rZW5pemV9IG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFNFUEFfQ1JFQVRFX01BTkRBVEVfRkFJTEVEIE9jY3VycyB3aGVuIHRoZXJlIHdhcyBhbiBpc3N1ZSBjcmVhdGluZyBhIG1hbmRhdGUuIFRoaXMgY2FuIG9jY3VyIGlmIHRoZSByZXF1ZXN0IGZhaWxzLCBvciBpZiB0aGUgbWVyY2hhbnQgZG9lcyBub3QgaGF2ZSBTRVBBIGVuYWJsZWQuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBTRVBBX0NVU1RPTUVSX0NBTkNFTEVEIE9jY3VycyB3aGVuIHRoZSBjdXN0b21lciBoYXMgY2FuY2VsZWQgdGhlIFNFUEEgYXV0aG9yaXphdGlvbiBwcm9jZXNzLiBUaGlzIGNhbiBiZSB3aXRoaW4gdGhlIG1hbmRhdGUgYXBwcm92YWwgcG9wdXAsIG9yIGJ5IGNhbmNlbGluZyB0aGUgcG9wdXAgaXRzZWxmLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gU0VQQV9JTlZBTElEX01BTkRBVEVfVFlQRSBPY2N1cnMgd2hlbiBhbiBpbnZhbGlkIG1hbmRhdGUgdHlwZSBpcyBwcm92aWRlZC5cbiAqIEBwcm9wZXJ0eSB7VU5LTk9XTn0gU0VQQV9UT0tFTklaQVRJT05fRkFJTEVEIE9jY3VycyB3aGVuIHRva2VuaXphdGlvbiBmYWlscyBkdXJpbmcgdGhlIG1hbmRhdGUgYXBwcm92YWwgcHJvY2VzcyBmb3IgdW5rbm93biByZWFzb25zLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gU0VQQV9UT0tFTklaRV9NSVNTSU5HX1JFUVVJUkVEX09QVElPTiBPY2N1cnMgd2hlbiB0aGVyZSBhcmUgcmVxdWlyZWQgaW5wdXQgb3B0aW9ucyBub3QgcHJvdmlkZWQuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFNFUEFfVFJBTlNBQ1RJT05fRkFJTEVEIE9jY3VycyB3aGVuIGZpbmFsIHRva2VuaXphdGlvbiBmYWlscy5cbiAqL1xuXG4vLyBUaG9zZSB3aXRoIGEgXCJkZXRhaWxzXCIgcHJvcGVydHkgYXJlIHVzZWQgaW4gc3BlY2lmaWMgbG9jYXRpb25zIGFuZCB0aGlzIHByb3Agc2VydmVzIHRvIGlkZW50aWZ5IHdoZXJlIGluIHRoZSBpbWxwZW1lbnRhdGlvbiB0aGUgZXJyb3Igb3JpZ2luYXRlcy5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBTRVBBX0NSRUFURV9NQU5EQVRFX0ZBSUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiU0VQQV9DUkVBVEVfTUFOREFURV9GQUlMRURcIixcbiAgICBtZXNzYWdlOiBcIlNFUEEgY3JlYXRlIG1hbmRhdGUgZmFpbGVkLlwiLFxuICAgIGRldGFpbHM6IFwiY3JlYXRlLW1hbmRhdGVcIixcbiAgfSxcbiAgU0VQQV9DVVNUT01FUl9DQU5DRUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiU0VQQV9DVVNUT01FUl9DQU5DRUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiVXNlciBjYW5jZWxlZCBTRVBBIGF1dGhvcml6YXRpb25cIixcbiAgICBkZXRhaWxzOiBcImN1c3RvbWVyLWNhbmNlbGVkXCIsXG4gIH0sXG4gIFNFUEFfSU5WQUxJRF9NQU5EQVRFX1RZUEU6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlNFUEFfSU5WQUxJRF9NQU5EQVRFX1RZUEVcIixcbiAgICBtZXNzYWdlOiBcIlNFUEEgbWFuZGF0ZSB0eXBlIGlzIGludmFsaWRcIixcbiAgfSxcbiAgU0VQQV9UT0tFTklaQVRJT05fRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuVU5LTk9XTixcbiAgICBjb2RlOiBcIlNFUEFfVE9LRU5JWkFUSU9OX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiU0VQQSBlbmNvdW50ZXJlZCBhIHByb2JsZW1cIixcbiAgICBkZXRhaWxzOiBcIm9wZW4tcG9wdXBcIixcbiAgfSxcbiAgU0VQQV9UT0tFTklaRV9NSVNTSU5HX1JFUVVJUkVEX09QVElPTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiU0VQQV9UT0tFTklaRV9NSVNTSU5HX1JFUVVJUkVEX09QVElPTlwiLFxuICAgIG1lc3NhZ2U6IFwiTWlzc2luZyByZXF1aXJlZCBvcHRpb24gZm9yIHRva2VuaXplLlwiLFxuICB9LFxuICBTRVBBX1RSQU5TQUNUSU9OX0ZBSUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLlVOS05PV04sXG4gICAgY29kZTogXCJTRVBBX1RSQU5TQUNUSU9OX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiU0VQQSB0cmFuc2FjdGlvbiBmYWlsZWRcIixcbiAgICBkZXRhaWxzOiBcImhhbmRsZS1hcHByb3ZhbFwiLFxuICB9LFxufTtcblxufSx7XCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0fV0sMTg5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEBzdGF0aWNcbiAqIEBmdW5jdGlvbiBoYXNNaXNzaW5nT3B0aW9uXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBbGwgb3B0aW9ucyBwcm92aWRlZCBmb3IgaW50aWF0aW5nIHRoZSBTRVBBIHBheW1lbnQgZmxvdy5cbiAqIEBwYXJhbSB7YXJyYXl9IHJlcXVpcmVkIEEgbGlzdCBvZiByZXF1aXJlZCBpbnB1dHMgdGhhdCBtdXN0IGJlIGluY2x1ZGUgYXMgcGFydCBvZiB0aGUgb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGEgYm9vbGVhbi5cbiAqL1xuZnVuY3Rpb24gaGFzTWlzc2luZ09wdGlvbihvcHRpb25zLCByZXF1aXJlZCkge1xuICB2YXIgaSwgb3B0aW9uO1xuXG4gIHJlcXVpcmVkID0gcmVxdWlyZWQgfHwgW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHJlcXVpcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgb3B0aW9uID0gcmVxdWlyZWRbaV07XG5cbiAgICBpZiAoIW9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc01pc3NpbmdPcHRpb247XG5cbn0se31dLDE5MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFzc2lnbiA9IF9kZXJlcV8oXCIuLi8uLi8uLi9saWIvYXNzaWduXCIpLmFzc2lnbjtcbnZhciBhbmFseXRpY3MgPSBfZGVyZXFfKFwiLi4vLi4vLi4vbGliL2FuYWx5dGljc1wiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGlzVmVyaWZpZWREb21haW4gPSBfZGVyZXFfKFwiLi4vLi4vLi4vbGliL2lzLXZlcmlmaWVkLWRvbWFpblwiKTtcbnZhciBFeHRlbmRlZFByb21pc2UgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9leHRlbmRlZC1wcm9taXNlXCIpO1xudmFyIEV2ZW50RW1pdHRlciA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2V2ZW50LWVtaXR0ZXJcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4uLy4uL3NoYXJlZC9lcnJvcnNcIik7XG52YXIgaUZyYW1lciA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2lmcmFtZXJcIik7XG52YXIgQnVzID0gX2RlcmVxXyhcImZyYW1lYnVzXCIpO1xudmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oXCIuLi8uLi9zaGFyZWQvY29uc3RhbnRzXCIpO1xudmFyIHV1aWQgPSBfZGVyZXFfKFwiQGJyYWludHJlZS91dWlkXCIpO1xudmFyIGV2ZW50cyA9IF9kZXJlcV8oXCIuLi8uLi9zaGFyZWQvZXZlbnRzXCIpO1xudmFyIHVzZU1pbiA9IF9kZXJlcV8oXCIuLi8uLi8uLi9saWIvdXNlLW1pblwiKTtcbnZhciBCVVNfQ09ORklHVVJBVElPTl9SRVFVRVNUX0VWRU5UID1cbiAgX2RlcmVxXyhcIi4uLy4uLy4uL2xpYi9jb25zdGFudHNcIikuQlVTX0NPTkZJR1VSQVRJT05fUkVRVUVTVF9FVkVOVDtcblxudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcbnZhciBJRlJBTUVfSEVJR0hUID0gNDAwO1xudmFyIElGUkFNRV9XSURUSCA9IDQwMDtcblxuRXh0ZW5kZWRQcm9taXNlLnN1cHByZXNzVW5oYW5kbGVkUHJvbWlzZU1lc3NhZ2UgPSB0cnVlO1xuXG5mdW5jdGlvbiBCYXNlRnJhbWV3b3JrKG9wdGlvbnMpIHtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5fY2xpZW50ID0gb3B0aW9ucy5jbGllbnQ7XG4gIHRoaXMuX2NyZWF0ZVByb21pc2UgPSBvcHRpb25zLmNyZWF0ZVByb21pc2U7XG4gIHRoaXMuX2NyZWF0ZU9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIGlmICh0aGlzLl9jbGllbnQpIHtcbiAgICB0aGlzLl9pc0RlYnVnID0gdGhpcy5fY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKS5pc0RlYnVnO1xuICAgIHRoaXMuX2Fzc2V0c1VybCA9XG4gICAgICB0aGlzLl9jbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpLmdhdGV3YXlDb25maWd1cmF0aW9uLmFzc2V0c1VybDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9pc0RlYnVnID0gQm9vbGVhbihvcHRpb25zLmlzRGVidWcpO1xuICAgIHRoaXMuX2Fzc2V0c1VybCA9IG9wdGlvbnMuYXNzZXRzVXJsO1xuICB9XG4gIHRoaXMuX2Fzc2V0c1VybCA9IHRoaXMuX2Fzc2V0c1VybCArIFwiL3dlYi9cIiArIFZFUlNJT047XG59XG5cbkV2ZW50RW1pdHRlci5jcmVhdGVDaGlsZChCYXNlRnJhbWV3b3JrKTtcblxuQmFzZUZyYW1ld29yay5wcm90b3R5cGUuX3dhaXRGb3JDbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9jbGllbnQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlUHJvbWlzZS50aGVuKFxuICAgIGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcbn07XG5cbkJhc2VGcmFtZXdvcmsucHJvdG90eXBlLnNldFVwRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVEhSRUVEU19GUkFNRVdPUktfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCk7XG59O1xuXG5CYXNlRnJhbWV3b3JrLnByb3RvdHlwZS52ZXJpZnlDYXJkID0gZnVuY3Rpb24gKG9wdGlvbnMsIHByaXZhdGVPcHRpb25zKSB7XG4gIHZhciBmb3JtYXR0ZWRPcHRpb25zLCBlcnJvcjtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHByaXZhdGVPcHRpb25zID0gcHJpdmF0ZU9wdGlvbnMgfHwge307XG5cbiAgZXJyb3IgPSB0aGlzLl9jaGVja0ZvclZlcmlmeUNhcmRFcnJvcihvcHRpb25zLCBwcml2YXRlT3B0aW9ucyk7XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxuXG4gIHRoaXMuX3ZlcmlmeUNhcmRJblByb2dyZXNzID0gdHJ1ZTtcblxuICBmb3JtYXR0ZWRPcHRpb25zID0gdGhpcy5fZm9ybWF0VmVyaWZ5Q2FyZE9wdGlvbnMob3B0aW9ucyk7XG5cbiAgcmV0dXJuIHRoaXMuX2Zvcm1hdExvb2t1cERhdGEoZm9ybWF0dGVkT3B0aW9ucylcbiAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgXCJ0aHJlZS1kLXNlY3VyZS52ZXJpZmljYXRpb24tZmxvdy5zdGFydGVkXCJcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBzZWxmLl9wZXJmb3JtTG9va3VwKGZvcm1hdHRlZE9wdGlvbnMubm9uY2UsIGRhdGEpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICBzZWxmLl9jcmVhdGVQcm9taXNlLFxuICAgICAgICBcInRocmVlLWQtc2VjdXJlLnZlcmlmaWNhdGlvbi1mbG93LjNkcy12ZXJzaW9uLlwiICtcbiAgICAgICAgICByZXNwb25zZS5sb29rdXAudGhyZWVEU2VjdXJlVmVyc2lvblxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHNlbGYuX29uTG9va3VwQ29tcGxldGUocmVzcG9uc2UsIGZvcm1hdHRlZE9wdGlvbnMpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gc2VsZi5pbml0aWFsaXplQ2hhbGxlbmdlV2l0aExvb2t1cFJlc3BvbnNlKFxuICAgICAgICByZXNwb25zZSxcbiAgICAgICAgZm9ybWF0dGVkT3B0aW9uc1xuICAgICAgKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICBzZWxmLl9yZXNldFZlcmlmaWNhdGlvblN0YXRlKCk7XG5cbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICAgIFwidGhyZWUtZC1zZWN1cmUudmVyaWZpY2F0aW9uLWZsb3cuY29tcGxldGVkXCJcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHNlbGYuX3Jlc2V0VmVyaWZpY2F0aW9uU3RhdGUoKTtcblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgXCJ0aHJlZS1kLXNlY3VyZS52ZXJpZmljYXRpb24tZmxvdy5mYWlsZWRcIlxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgfSk7XG59O1xuXG5CYXNlRnJhbWV3b3JrLnByb3RvdHlwZS5fY2hlY2tGb3JGcmFtZXdvcmtTcGVjaWZpY1ZlcmlmeUNhcmRFcnJvcnMgPVxuICBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5USFJFRURTX0ZSQU1FV09SS19NRVRIT0RfTk9UX0lNUExFTUVOVEVEKTtcbiAgfTtcblxuQmFzZUZyYW1ld29yay5wcm90b3R5cGUuX3ByZXNlbnRDaGFsbGVuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVEhSRUVEU19GUkFNRVdPUktfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCk7XG59O1xuXG5CYXNlRnJhbWV3b3JrLnByb3RvdHlwZS5wcmVwYXJlTG9va3VwID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlRIUkVFRFNfRlJBTUVXT1JLX01FVEhPRF9OT1RfSU1QTEVNRU5URUQpO1xufTtcblxuQmFzZUZyYW1ld29yay5wcm90b3R5cGUuX3Jlc2V0VmVyaWZpY2F0aW9uU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX3ZlcmlmeUNhcmRJblByb2dyZXNzID0gZmFsc2U7XG4gIHRoaXMuX3ZlcmlmeUNhcmRQcm9taXNlUGx1cyA9IG51bGw7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLl9yZWxvYWRUaHJlZURTZWN1cmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRoaXMuX3JlbG9hZFRocmVlRFNlY3VyZSgpO1xuICB9XG59O1xuXG5CYXNlRnJhbWV3b3JrLnByb3RvdHlwZS5fcGVyZm9ybUxvb2t1cCA9IGZ1bmN0aW9uIChub25jZSwgZGF0YSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB1cmwgPSBcInBheW1lbnRfbWV0aG9kcy9cIiArIG5vbmNlICsgXCIvdGhyZWVfZF9zZWN1cmUvbG9va3VwXCI7XG5cbiAgcmV0dXJuIHRoaXMuX3dhaXRGb3JDbGllbnQoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc2VsZi5fY2xpZW50XG4gICAgICAucmVxdWVzdCh7XG4gICAgICAgIGVuZHBvaW50OiB1cmwsXG4gICAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHN0YXR1cyA9IGVyciAmJiBlcnIuZGV0YWlscyAmJiBlcnIuZGV0YWlscy5odHRwU3RhdHVzO1xuICAgICAgICB2YXIgYW5hbHl0aWNzTWVzc2FnZSA9IFwidGhyZWUtZC1zZWN1cmUudmVyaWZpY2F0aW9uLWZsb3cubG9va3VwLWZhaWxlZFwiO1xuICAgICAgICB2YXIgbG9va3VwRXJyb3I7XG5cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgICAgbG9va3VwRXJyb3IgPSBlcnJvcnMuVEhSRUVEU19MT09LVVBfVE9LRU5JWkVEX0NBUkRfTk9UX0ZPVU5EX0VSUk9SO1xuICAgICAgICAgIGFuYWx5dGljc01lc3NhZ2UgKz0gXCIuNDA0XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MjIpIHtcbiAgICAgICAgICBsb29rdXBFcnJvciA9IGVycm9ycy5USFJFRURTX0xPT0tVUF9WQUxJREFUSU9OX0VSUk9SO1xuICAgICAgICAgIGFuYWx5dGljc01lc3NhZ2UgKz0gXCIuNDIyXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9va3VwRXJyb3IgPSBlcnJvcnMuVEhSRUVEU19MT09LVVBfRVJST1I7XG4gICAgICAgIH1cblxuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHNlbGYuX2NyZWF0ZVByb21pc2UsIGFuYWx5dGljc01lc3NhZ2UpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICAgICAgdHlwZTogbG9va3VwRXJyb3IudHlwZSxcbiAgICAgICAgICAgIGNvZGU6IGxvb2t1cEVycm9yLmNvZGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBsb29rdXBFcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgfSk7XG59O1xuXG5CYXNlRnJhbWV3b3JrLnByb3RvdHlwZS5fY2hlY2tGb3JWZXJpZnlDYXJkRXJyb3IgPSBmdW5jdGlvbiAoXG4gIG9wdGlvbnMsXG4gIHByaXZhdGVPcHRpb25zXG4pIHtcbiAgdmFyIGVycm9yT3B0aW9uO1xuXG4gIGlmICh0aGlzLl92ZXJpZnlDYXJkSW5Qcm9ncmVzcyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlRIUkVFRFNfQVVUSEVOVElDQVRJT05fSU5fUFJPR1JFU1MpO1xuICB9IGVsc2UgaWYgKCFvcHRpb25zLm5vbmNlKSB7XG4gICAgZXJyb3JPcHRpb24gPSBcImEgbm9uY2VcIjtcbiAgfSBlbHNlIGlmICghb3B0aW9ucy5hbW91bnQpIHtcbiAgICBlcnJvck9wdGlvbiA9IFwiYW4gYW1vdW50XCI7XG4gIH1cblxuICBpZiAoIWVycm9yT3B0aW9uKSB7XG4gICAgZXJyb3JPcHRpb24gPSB0aGlzLl9jaGVja0ZvckZyYW1ld29ya1NwZWNpZmljVmVyaWZ5Q2FyZEVycm9ycyhcbiAgICAgIG9wdGlvbnMsXG4gICAgICBwcml2YXRlT3B0aW9uc1xuICAgICk7XG4gIH1cblxuICBpZiAoZXJyb3JPcHRpb24pIHtcbiAgICByZXR1cm4gbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgIHR5cGU6IGVycm9ycy5USFJFRURTX01JU1NJTkdfVkVSSUZZX0NBUkRfT1BUSU9OLnR5cGUsXG4gICAgICBjb2RlOiBlcnJvcnMuVEhSRUVEU19NSVNTSU5HX1ZFUklGWV9DQVJEX09QVElPTi5jb2RlLFxuICAgICAgbWVzc2FnZTogXCJ2ZXJpZnlDYXJkIG9wdGlvbnMgbXVzdCBpbmNsdWRlIFwiICsgZXJyb3JPcHRpb24gKyBcIi5cIixcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZUZyYW1ld29yay5wcm90b3R5cGUuaW5pdGlhbGl6ZUNoYWxsZW5nZVdpdGhMb29rdXBSZXNwb25zZSA9IGZ1bmN0aW9uIChcbiAgbG9va3VwUmVzcG9uc2UsXG4gIG9wdGlvbnNcbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdGhpcy5fbG9va3VwUGF5bWVudE1ldGhvZCA9IGxvb2t1cFJlc3BvbnNlLnBheW1lbnRNZXRob2Q7XG5cbiAgLy8gc2V0cyB0aGlzIGluIHRoZSBjYXNlIHRoYXQgaW5pdGlhbGl6ZUNoYWxsZW5nZVdpdGhMb29rdXBSZXNwb25zZSBpc1xuICAvLyBjYWxsZWQgYXMgYSBzdGFuZGFsb25lIG1ldGhvZCBmcm9tIGEgc2VydmVyIHNpZGUgbG9va3VwLiBJbiBhIG5vcm1hbFxuICAvLyB2ZXJpZnlDYXJkIGZsb3csIHRoaXMgcHJvbWlzZSB3aWxsIGFscmVhZHkgZXhpc3RcbiAgc2VsZi5fdmVyaWZ5Q2FyZFByb21pc2VQbHVzID1cbiAgICBzZWxmLl92ZXJpZnlDYXJkUHJvbWlzZVBsdXMgfHwgbmV3IEV4dGVuZGVkUHJvbWlzZSgpO1xuICBzZWxmLl9oYW5kbGVMb29rdXBSZXNwb25zZShsb29rdXBSZXNwb25zZSwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIHNlbGYuX3ZlcmlmeUNhcmRQcm9taXNlUGx1cy50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICBcInRocmVlLWQtc2VjdXJlLnZlcmlmaWNhdGlvbi1mbG93LmxpYWJpbGl0eS1zaGlmdGVkLlwiICtcbiAgICAgICAgU3RyaW5nKHBheWxvYWQubGlhYmlsaXR5U2hpZnRlZClcbiAgICApO1xuICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICBzZWxmLl9jcmVhdGVQcm9taXNlLFxuICAgICAgXCJ0aHJlZS1kLXNlY3VyZS52ZXJpZmljYXRpb24tZmxvdy5saWFiaWxpdHktc2hpZnQtcG9zc2libGUuXCIgK1xuICAgICAgICBTdHJpbmcocGF5bG9hZC5saWFiaWxpdHlTaGlmdFBvc3NpYmxlKVxuICAgICk7XG5cbiAgICByZXR1cm4gcGF5bG9hZDtcbiAgfSk7XG59O1xuXG5CYXNlRnJhbWV3b3JrLnByb3RvdHlwZS5faGFuZGxlTG9va3VwUmVzcG9uc2UgPSBmdW5jdGlvbiAoXG4gIGxvb2t1cFJlc3BvbnNlLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGNoYWxsZW5nZVNob3VsZEJlUHJlc2VudGVkID0gQm9vbGVhbihcbiAgICBsb29rdXBSZXNwb25zZS5sb29rdXAgJiYgbG9va3VwUmVzcG9uc2UubG9va3VwLmFjc1VybFxuICApO1xuICB2YXIgZGV0YWlscztcblxuICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgIHRoaXMuX2NyZWF0ZVByb21pc2UsXG4gICAgXCJ0aHJlZS1kLXNlY3VyZS52ZXJpZmljYXRpb24tZmxvdy5jaGFsbGVuZ2UtcHJlc2VudGVkLlwiICtcbiAgICAgIFN0cmluZyhjaGFsbGVuZ2VTaG91bGRCZVByZXNlbnRlZClcbiAgKTtcblxuICBpZiAoY2hhbGxlbmdlU2hvdWxkQmVQcmVzZW50ZWQpIHtcbiAgICB0aGlzLl9wcmVzZW50Q2hhbGxlbmdlKGxvb2t1cFJlc3BvbnNlLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBkZXRhaWxzID0gdGhpcy5fZm9ybWF0QXV0aFJlc3BvbnNlKFxuICAgICAgbG9va3VwUmVzcG9uc2UucGF5bWVudE1ldGhvZCxcbiAgICAgIGxvb2t1cFJlc3BvbnNlLnRocmVlRFNlY3VyZUluZm9cbiAgICApO1xuICAgIGRldGFpbHMudmVyaWZpY2F0aW9uRGV0YWlscyA9IGxvb2t1cFJlc3BvbnNlLnRocmVlRFNlY3VyZUluZm87XG5cbiAgICB0aGlzLl92ZXJpZnlDYXJkUHJvbWlzZVBsdXMucmVzb2x2ZShkZXRhaWxzKTtcbiAgfVxufTtcblxuQmFzZUZyYW1ld29yay5wcm90b3R5cGUuX29uTG9va3VwQ29tcGxldGUgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgdGhpcy5fbG9va3VwUGF5bWVudE1ldGhvZCA9IHJlc3BvbnNlLnBheW1lbnRNZXRob2Q7XG4gIHRoaXMuX3ZlcmlmeUNhcmRQcm9taXNlUGx1cyA9IG5ldyBFeHRlbmRlZFByb21pc2UoKTtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbn07XG5cbkJhc2VGcmFtZXdvcmsucHJvdG90eXBlLl9mb3JtYXRBdXRoUmVzcG9uc2UgPSBmdW5jdGlvbiAoXG4gIHBheW1lbnRNZXRob2QsXG4gIHRocmVlRFNlY3VyZUluZm9cbikge1xuICByZXR1cm4ge1xuICAgIG5vbmNlOiBwYXltZW50TWV0aG9kLm5vbmNlLFxuICAgIHR5cGU6IHBheW1lbnRNZXRob2QudHlwZSxcbiAgICBiaW5EYXRhOiBwYXltZW50TWV0aG9kLmJpbkRhdGEsXG4gICAgZGV0YWlsczogcGF5bWVudE1ldGhvZC5kZXRhaWxzLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgcGF5bWVudE1ldGhvZC5kZXNjcmlwdGlvbiAmJlxuICAgICAgcGF5bWVudE1ldGhvZC5kZXNjcmlwdGlvbi5yZXBsYWNlKC9cXCsvZywgXCIgXCIpLFxuICAgIGxpYWJpbGl0eVNoaWZ0ZWQ6IHRocmVlRFNlY3VyZUluZm8gJiYgdGhyZWVEU2VjdXJlSW5mby5saWFiaWxpdHlTaGlmdGVkLFxuICAgIGxpYWJpbGl0eVNoaWZ0UG9zc2libGU6XG4gICAgICB0aHJlZURTZWN1cmVJbmZvICYmIHRocmVlRFNlY3VyZUluZm8ubGlhYmlsaXR5U2hpZnRQb3NzaWJsZSxcbiAgICB0aHJlZURTZWN1cmVJbmZvOiBwYXltZW50TWV0aG9kLnRocmVlRFNlY3VyZUluZm8sXG4gIH07XG59O1xuXG5CYXNlRnJhbWV3b3JrLnByb3RvdHlwZS5fZm9ybWF0VmVyaWZ5Q2FyZE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICByZXR1cm4gYXNzaWduKHt9LCBvcHRpb25zKTtcbn07XG5cbkJhc2VGcmFtZXdvcmsucHJvdG90eXBlLl9mb3JtYXRMb29rdXBEYXRhID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIGRhdGEgPSB7XG4gICAgYW1vdW50OiBvcHRpb25zLmFtb3VudCxcbiAgfTtcblxuICBpZiAob3B0aW9ucy5jb2xsZWN0RGV2aWNlRGF0YSA9PT0gdHJ1ZSkge1xuICAgIGRhdGEuYnJvd3NlckNvbG9yRGVwdGggPSB3aW5kb3cuc2NyZWVuLmNvbG9yRGVwdGg7XG4gICAgZGF0YS5icm93c2VySmF2YUVuYWJsZWQgPSB3aW5kb3cubmF2aWdhdG9yLmphdmFFbmFibGVkKCk7XG4gICAgZGF0YS5icm93c2VySmF2YXNjcmlwdEVuYWJsZWQgPSB0cnVlO1xuICAgIGRhdGEuYnJvd3Nlckxhbmd1YWdlID0gd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZTtcbiAgICBkYXRhLmJyb3dzZXJTY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgICBkYXRhLmJyb3dzZXJTY3JlZW5XaWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gICAgZGF0YS5icm93c2VyVGltZVpvbmUgPSBuZXcgRGF0ZSgpLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgZGF0YS5kZXZpY2VDaGFubmVsID0gXCJCcm93c2VyXCI7XG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xufTtcblxuQmFzZUZyYW1ld29yay5wcm90b3R5cGUuX2hhbmRsZVYxQXV0aFJlc3BvbnNlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIGF1dGhSZXNwb25zZSA9IEpTT04ucGFyc2UoZGF0YS5hdXRoX3Jlc3BvbnNlKTtcblxuICBpZiAoYXV0aFJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICB0aGlzLl92ZXJpZnlDYXJkUHJvbWlzZVBsdXMucmVzb2x2ZShcbiAgICAgIHRoaXMuX2Zvcm1hdEF1dGhSZXNwb25zZShcbiAgICAgICAgYXV0aFJlc3BvbnNlLnBheW1lbnRNZXRob2QsXG4gICAgICAgIGF1dGhSZXNwb25zZS50aHJlZURTZWN1cmVJbmZvXG4gICAgICApXG4gICAgKTtcbiAgfSBlbHNlIGlmIChcbiAgICBhdXRoUmVzcG9uc2UudGhyZWVEU2VjdXJlSW5mbyAmJlxuICAgIGF1dGhSZXNwb25zZS50aHJlZURTZWN1cmVJbmZvLmxpYWJpbGl0eVNoaWZ0UG9zc2libGVcbiAgKSB7XG4gICAgdGhpcy5fdmVyaWZ5Q2FyZFByb21pc2VQbHVzLnJlc29sdmUoXG4gICAgICB0aGlzLl9mb3JtYXRBdXRoUmVzcG9uc2UoXG4gICAgICAgIHRoaXMuX2xvb2t1cFBheW1lbnRNZXRob2QsXG4gICAgICAgIGF1dGhSZXNwb25zZS50aHJlZURTZWN1cmVJbmZvXG4gICAgICApXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl92ZXJpZnlDYXJkUHJvbWlzZVBsdXMucmVqZWN0KFxuICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuVU5LTk9XTixcbiAgICAgICAgY29kZTogXCJVTktOT1dOX0FVVEhfUkVTUE9OU0VcIixcbiAgICAgICAgbWVzc2FnZTogYXV0aFJlc3BvbnNlLmVycm9yLm1lc3NhZ2UsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG5cbkJhc2VGcmFtZXdvcmsucHJvdG90eXBlLmNhbmNlbFZlcmlmeUNhcmQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByZXNwb25zZSwgdGhyZWVEU2VjdXJlSW5mbztcblxuICB0aGlzLl92ZXJpZnlDYXJkSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gIGlmICghdGhpcy5fbG9va3VwUGF5bWVudE1ldGhvZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVEhSRUVEU19OT19WRVJJRklDQVRJT05fUEFZTE9BRClcbiAgICApO1xuICB9XG5cbiAgdGhyZWVEU2VjdXJlSW5mbyA9IHRoaXMuX2xvb2t1cFBheW1lbnRNZXRob2QudGhyZWVEU2VjdXJlSW5mbztcblxuICByZXNwb25zZSA9IGFzc2lnbih7fSwgdGhpcy5fbG9va3VwUGF5bWVudE1ldGhvZCwge1xuICAgIGxpYWJpbGl0eVNoaWZ0UG9zc2libGU6XG4gICAgICB0aHJlZURTZWN1cmVJbmZvICYmIHRocmVlRFNlY3VyZUluZm8ubGlhYmlsaXR5U2hpZnRQb3NzaWJsZSxcbiAgICBsaWFiaWxpdHlTaGlmdGVkOiB0aHJlZURTZWN1cmVJbmZvICYmIHRocmVlRFNlY3VyZUluZm8ubGlhYmlsaXR5U2hpZnRlZCxcbiAgICB2ZXJpZmljYXRpb25EZXRhaWxzOlxuICAgICAgdGhyZWVEU2VjdXJlSW5mbyAmJiB0aHJlZURTZWN1cmVJbmZvLnZlcmlmaWNhdGlvbkRldGFpbHMsXG4gIH0pO1xuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xufTtcblxuQmFzZUZyYW1ld29yay5wcm90b3R5cGUuX3NldHVwVjFCdXMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgY2xpZW50Q29uZmlndXJhdGlvbiA9IHRoaXMuX2NsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG4gIHZhciBwYXJlbnRVUkwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdChcIiNcIilbMF07XG4gIHZhciBsb29rdXBSZXNwb25zZSA9IG9wdGlvbnMubG9va3VwUmVzcG9uc2U7XG4gIHZhciBjaGFubmVsID0gdXVpZCgpO1xuICB2YXIgYnVzID0gbmV3IEJ1cyh7XG4gICAgY2hhbm5lbDogY2hhbm5lbCxcbiAgICB2ZXJpZnlEb21haW46IGlzVmVyaWZpZWREb21haW4sXG4gIH0pO1xuICB2YXIgYXV0aGVudGljYXRpb25Db21wbGV0ZUJhc2VVcmwgPVxuICAgIHRoaXMuX2Fzc2V0c1VybCArXG4gICAgXCIvaHRtbC90aHJlZS1kLXNlY3VyZS1hdXRoZW50aWNhdGlvbi1jb21wbGV0ZS1mcmFtZS5odG1sP2NoYW5uZWw9XCIgK1xuICAgIGVuY29kZVVSSUNvbXBvbmVudChjaGFubmVsKSArXG4gICAgXCImXCI7XG5cbiAgYnVzLm9uKEJVU19DT05GSUdVUkFUSU9OX1JFUVVFU1RfRVZFTlQsIGZ1bmN0aW9uIChyZXBseSkge1xuICAgIHJlcGx5KHtcbiAgICAgIGNsaWVudENvbmZpZ3VyYXRpb246IGNsaWVudENvbmZpZ3VyYXRpb24sXG4gICAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICAgIGFjc1VybDogbG9va3VwUmVzcG9uc2UuYWNzVXJsLFxuICAgICAgcGFyZXE6IGxvb2t1cFJlc3BvbnNlLnBhcmVxLFxuICAgICAgdGVybVVybDpcbiAgICAgICAgbG9va3VwUmVzcG9uc2UudGVybVVybCArXG4gICAgICAgIFwiJnRocmVlX2Rfc2VjdXJlX3ZlcnNpb249XCIgK1xuICAgICAgICBWRVJTSU9OICtcbiAgICAgICAgXCImYXV0aGVudGljYXRpb25fY29tcGxldGVfYmFzZV91cmw9XCIgK1xuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoYXV0aGVudGljYXRpb25Db21wbGV0ZUJhc2VVcmwpLFxuICAgICAgbWQ6IGxvb2t1cFJlc3BvbnNlLm1kLFxuICAgICAgcGFyZW50VXJsOiBwYXJlbnRVUkwsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGJ1cy5vbihldmVudHMuQVVUSEVOVElDQVRJT05fQ09NUExFVEUsIG9wdGlvbnMuaGFuZGxlQXV0aFJlc3BvbnNlKTtcblxuICByZXR1cm4gYnVzO1xufTtcblxuQmFzZUZyYW1ld29yay5wcm90b3R5cGUuX3NldHVwVjFJZnJhbWUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgdXJsID1cbiAgICB0aGlzLl9hc3NldHNVcmwgK1xuICAgIFwiL2h0bWwvdGhyZWUtZC1zZWN1cmUtYmFuay1mcmFtZVwiICtcbiAgICB1c2VNaW4odGhpcy5faXNEZWJ1ZykgK1xuICAgIFwiLmh0bWw/c2hvd0xvYWRlcj1cIiArXG4gICAgb3B0aW9ucy5zaG93TG9hZGVyO1xuICB2YXIgYmFua0lmcmFtZSA9IGlGcmFtZXIoe1xuICAgIHNyYzogdXJsLFxuICAgIGhlaWdodDogSUZSQU1FX0hFSUdIVCxcbiAgICB3aWR0aDogSUZSQU1FX1dJRFRILFxuICAgIG5hbWU6IGNvbnN0YW50cy5MQU5ESU5HX0ZSQU1FX05BTUUgKyBcIl9cIiArIHRoaXMuX3YxQnVzLmNoYW5uZWwsXG4gICAgdGl0bGU6IFwiM0QgU2VjdXJlIEF1dGhvcml6YXRpb24gRnJhbWVcIixcbiAgfSk7XG5cbiAgcmV0dXJuIGJhbmtJZnJhbWU7XG59O1xuXG5CYXNlRnJhbWV3b3JrLnByb3RvdHlwZS5fc2V0dXBWMUVsZW1lbnRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdGhpcy5fdjFCdXMgPSB0aGlzLl9zZXR1cFYxQnVzKG9wdGlvbnMpO1xuICB0aGlzLl92MUlmcmFtZSA9IHRoaXMuX3NldHVwVjFJZnJhbWUob3B0aW9ucyk7XG59O1xuXG5CYXNlRnJhbWV3b3JrLnByb3RvdHlwZS5fdGVhcmRvd25WMUVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fdjFCdXMpIHtcbiAgICB0aGlzLl92MUJ1cy50ZWFyZG93bigpO1xuICAgIHRoaXMuX3YxQnVzID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLl92MUlmcmFtZSAmJiB0aGlzLl92MUlmcmFtZS5wYXJlbnROb2RlKSB7XG4gICAgdGhpcy5fdjFJZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLl92MUlmcmFtZSk7XG4gICAgdGhpcy5fdjFJZnJhbWUgPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMuX29uVjFLZXl1cCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLl9vblYxS2V5dXApO1xuICAgIHRoaXMuX29uVjFLZXl1cCA9IG51bGw7XG4gIH1cbn07XG5cbkJhc2VGcmFtZXdvcmsucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gKCkge1xuICBhbmFseXRpY3Muc2VuZEV2ZW50KHRoaXMuX2NyZWF0ZVByb21pc2UsIFwidGhyZWUtZC1zZWN1cmUudGVhcmRvd24tY29tcGxldGVkXCIpO1xuXG4gIHRoaXMuX3RlYXJkb3duVjFFbGVtZW50cygpO1xuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZUZyYW1ld29yaztcblxufSx7XCIuLi8uLi8uLi9saWIvYW5hbHl0aWNzXCI6MTE5LFwiLi4vLi4vLi4vbGliL2Fzc2lnblwiOjEyMSxcIi4uLy4uLy4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuLi8uLi8uLi9saWIvY29uc3RhbnRzXCI6MTI2LFwiLi4vLi4vLi4vbGliL2lzLXZlcmlmaWVkLWRvbWFpblwiOjE1MyxcIi4uLy4uLy4uL2xpYi91c2UtbWluXCI6MTYwLFwiLi4vLi4vc2hhcmVkL2NvbnN0YW50c1wiOjE5OSxcIi4uLy4uL3NoYXJlZC9lcnJvcnNcIjoyMDAsXCIuLi8uLi9zaGFyZWQvZXZlbnRzXCI6MjAxLFwiQGJyYWludHJlZS9ldmVudC1lbWl0dGVyXCI6MzMsXCJAYnJhaW50cmVlL2V4dGVuZGVkLXByb21pc2VcIjozNCxcIkBicmFpbnRyZWUvaWZyYW1lclwiOjM1LFwiQGJyYWludHJlZS91dWlkXCI6MzksXCJmcmFtZWJ1c1wiOjUyfV0sMTkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuLy8gTkVYVF9NQUpPUl9WRVJTSU9OIGRyb3Agc3VwcG9ydCBmb3IgQm9vdHN0cmFwIGZyYW1ld29yayxcbi8vIHJlY29tZW5kIHVzaW5nIGlubGluZSBmcmFtZSB2ZXJzaW9uIGFuZCBwdXR0aW5nIGl0IGluXG4vLyB0aGUgbWVyY2hhbnQncyBvd24gYm9vdHN0cmFwIG1vZGFsXG5cbnZhciBTb25nYmlyZEZyYW1ld29yayA9IF9kZXJlcV8oXCIuL3NvbmdiaXJkXCIpO1xuXG5mdW5jdGlvbiBCb290c3RyYXAzTW9kYWxGcmFtZXdvcmsob3B0aW9ucykge1xuICBTb25nYmlyZEZyYW1ld29yay5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5Cb290c3RyYXAzTW9kYWxGcmFtZXdvcmsucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShcbiAgU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLFxuICB7XG4gICAgY29uc3RydWN0b3I6IFNvbmdiaXJkRnJhbWV3b3JrLFxuICB9XG4pO1xuXG5Cb290c3RyYXAzTW9kYWxGcmFtZXdvcmsucHJvdG90eXBlLl9jcmVhdGVWMUlmcmFtZU1vZGFsRWxlbWVudCA9IGZ1bmN0aW9uIChcbiAgaWZyYW1lXG4pIHtcbiAgdmFyIG1vZGFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICBtb2RhbC5pbm5lckhUTUwgPVxuICAgICc8ZGl2IGNsYXNzPVwibW9kYWwgZmFkZSBpblwiIHRhYmluZGV4PVwiLTFcIiByb2xlPVwiZGlhbG9nXCIgYXJpYS1sYWJlbGxlZGJ5PVwiQ0NBRnJhbWVNb2RhbC1sYWJlbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7XCI+JyArXG4gICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2dcIiBzdHlsZT1cIndpZHRoOjQ0MHB4O3otaW5kZXg6OTk5OTk5O1wiPicgK1xuICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPicgK1xuICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiIGRhdGEtYnJhaW50cmVlLXYxLWZhbGxiYWNrLWlmcmFtZS1jb250YWluZXI+JyArXG4gICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtYnJhaW50cmVlLXYxLWZhbGxiYWNrLWNsb3NlLWJ1dHRvbiBjbGFzcz1cImNsb3NlXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWhpZGRlbj1cInRydWVcIj7DlzwvYnV0dG9uPicgK1xuICAgIFwiPC9kaXY+XCIgK1xuICAgIFwiPC9kaXY+XCIgK1xuICAgIFwiPC9kaXY+XCIgK1xuICAgICc8ZGl2IGRhdGEtYnJhaW50cmVlLXYxLWZhbGxiYWNrLWJhY2tkcm9wIHN0eWxlPVwiJyArXG4gICAgXCJwb3NpdGlvbjogZml4ZWQ7XCIgK1xuICAgIFwiY3Vyc29yOiBwb2ludGVyO1wiICtcbiAgICBcInotaW5kZXg6IDk5OTk5ODtcIiArXG4gICAgXCJ0b3A6IDA7XCIgK1xuICAgIFwibGVmdDogMDtcIiArXG4gICAgXCJ3aWR0aDogMTAwJTtcIiArXG4gICAgXCJoZWlnaHQ6IDEwMCU7XCIgK1xuICAgICdcIj48L2Rpdj4nICtcbiAgICBcIjwvZGl2PlwiO1xuXG4gIG1vZGFsXG4gICAgLnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1icmFpbnRyZWUtdjEtZmFsbGJhY2staWZyYW1lLWNvbnRhaW5lcl1cIilcbiAgICAuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcblxuICByZXR1cm4gbW9kYWw7XG59O1xuXG5Cb290c3RyYXAzTW9kYWxGcmFtZXdvcmsucHJvdG90eXBlLl9jcmVhdGVDYXJkaW5hbENvbmZpZ3VyYXRpb25PcHRpb25zID1cbiAgZnVuY3Rpb24gKHNldHVwT3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID1cbiAgICAgIFNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZS5fY3JlYXRlQ2FyZGluYWxDb25maWd1cmF0aW9uT3B0aW9ucy5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICBzZXR1cE9wdGlvbnNcbiAgICAgICk7XG5cbiAgICBvcHRpb25zLnBheW1lbnQuZnJhbWV3b3JrID0gXCJib290c3RyYXAzXCI7XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb290c3RyYXAzTW9kYWxGcmFtZXdvcms7XG5cbn0se1wiLi9zb25nYmlyZFwiOjE5Nn1dLDE5MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFNvbmdiaXJkRnJhbWV3b3JrID0gX2RlcmVxXyhcIi4vc29uZ2JpcmRcIik7XG5cbmZ1bmN0aW9uIENhcmRpbmFsTW9kYWxGcmFtZXdvcmsob3B0aW9ucykge1xuICBTb25nYmlyZEZyYW1ld29yay5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5DYXJkaW5hbE1vZGFsRnJhbWV3b3JrLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiBTb25nYmlyZEZyYW1ld29yayxcbn0pO1xuXG5DYXJkaW5hbE1vZGFsRnJhbWV3b3JrLnByb3RvdHlwZS5fY3JlYXRlVjFJZnJhbWVNb2RhbEVsZW1lbnQgPSBmdW5jdGlvbiAoXG4gIGlmcmFtZVxuKSB7XG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHZhciBhZGRDbG9zZUJ1dHRvbiA9IEJvb2xlYW4oXG4gICAgdGhpcy5fY3JlYXRlT3B0aW9ucyAmJlxuICAgICAgdGhpcy5fY3JlYXRlT3B0aW9ucy5jYXJkaW5hbFNES0NvbmZpZyAmJlxuICAgICAgdGhpcy5fY3JlYXRlT3B0aW9ucy5jYXJkaW5hbFNES0NvbmZpZy5wYXltZW50ICYmXG4gICAgICB0aGlzLl9jcmVhdGVPcHRpb25zLmNhcmRpbmFsU0RLQ29uZmlnLnBheW1lbnQuZGlzcGxheUV4aXRCdXR0b25cbiAgKTtcblxuICBtb2RhbC5pbm5lckhUTUwgPVxuICAgICc8ZGl2IHN0eWxlPVwiJyArXG4gICAgXCJwb3NpdGlvbjogZml4ZWQ7XCIgK1xuICAgIFwiei1pbmRleDogOTk5OTk5O1wiICtcbiAgICBcInRvcDogNTAlO1wiICtcbiAgICBcImxlZnQ6IDUwJTtcIiArXG4gICAgXCJwYWRkaW5nOiAyNHB4IDIwcHg7XCIgK1xuICAgIFwidHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwtNTAlKTtcIiArXG4gICAgXCJib3JkZXItcmFkaXVzOiAycHg7XCIgK1xuICAgIFwiYmFja2dyb3VuZDogI2ZmZjtcIiArXG4gICAgXCJtYXgtd2lkdGg6IDEwMCU7XCIgK1xuICAgIFwib3ZlcmZsb3c6IGF1dG87XCIgK1xuICAgICdcIj4nICtcbiAgICBcIjxkaXY+XCIgK1xuICAgIFwiPGJ1dHRvbiBkYXRhLWJyYWludHJlZS12MS1mYWxsYmFjay1jbG9zZS1idXR0b24gXCIgK1xuICAgICdzdHlsZT1cIicgK1xuICAgIFwiZm9udC1mYW1pbHk6IEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO1wiICtcbiAgICBcImZvbnQtc2l6ZTogMjVweDtcIiArXG4gICAgXCJsaW5lLWhlaWdodDogMTJweDtcIiArXG4gICAgXCJwb3NpdGlvbjogYWJzb2x1dGU7XCIgK1xuICAgIFwidG9wOiAycHg7XCIgK1xuICAgIFwicmlnaHQ6IDBweDtcIiArXG4gICAgXCJjdXJzb3I6IHBvaW50ZXI7XCIgK1xuICAgIFwiY29sb3I6ICM5OTk7XCIgK1xuICAgIFwiYm9yZGVyOiAwO1wiICtcbiAgICBcIm91dGxpbmU6IG5vbmU7XCIgK1xuICAgIFwiYmFja2dyb3VuZDogbm9uZTtcIiArXG4gICAgJ1wiICcgK1xuICAgIFwib25Nb3VzZU92ZXI9XFxcInRoaXMuc3R5bGUuY29sb3I9JyMwMDAnXFxcIiBcIiArXG4gICAgXCJvbk1vdXNlT3V0PVxcXCJ0aGlzLnN0eWxlLmNvbG9yPScjOTk5J1xcXCJcIiArXG4gICAgXCI+w5c8L2J1dHRvbj5cIiArXG4gICAgXCI8L2Rpdj5cIiArXG4gICAgLy8gaWZyYW1lIGNvbnRhaW5lclxuICAgICc8ZGl2IGRhdGEtYnJhaW50cmVlLXYxLWZhbGxiYWNrLWlmcmFtZS1jb250YWluZXIgc3R5bGU9XCInICtcbiAgICBcImhlaWdodDogNDAwcHg7XCIgK1xuICAgICdcIj48L2Rpdj4nICtcbiAgICBcIjwvZGl2PlwiICtcbiAgICAvLyBtb2RhbCBiYWNrZHJvcFxuICAgICc8ZGl2IGRhdGEtYnJhaW50cmVlLXYxLWZhbGxiYWNrLWJhY2tkcm9wIHN0eWxlPVwiJyArXG4gICAgXCJwb3NpdGlvbjogZml4ZWQ7XCIgK1xuICAgIFwiei1pbmRleDogOTk5OTk4O1wiICtcbiAgICBcImN1cnNvcjogcG9pbnRlcjtcIiArXG4gICAgXCJ0b3A6IDA7XCIgK1xuICAgIFwibGVmdDogMDtcIiArXG4gICAgXCJ3aWR0aDogMTAwJTtcIiArXG4gICAgXCJoZWlnaHQ6IDEwMCU7XCIgK1xuICAgIFwidHJhbnNpdGlvbjogb3BhY2l0eSAxbXMgZWFzZTtcIiArXG4gICAgXCJiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLC42KTtcIiArXG4gICAgJ1wiPjwvZGl2Pic7XG5cbiAgaWYgKCFhZGRDbG9zZUJ1dHRvbikge1xuICAgIG1vZGFsLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIltkYXRhLWJyYWludHJlZS12MS1mYWxsYmFjay1jbG9zZS1idXR0b25dXCJcbiAgICApLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgfVxuICBtb2RhbFxuICAgIC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtYnJhaW50cmVlLXYxLWZhbGxiYWNrLWlmcmFtZS1jb250YWluZXJdXCIpXG4gICAgLmFwcGVuZENoaWxkKGlmcmFtZSk7XG5cbiAgcmV0dXJuIG1vZGFsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYXJkaW5hbE1vZGFsRnJhbWV3b3JrO1xuXG59LHtcIi4vc29uZ2JpcmRcIjoxOTZ9XSwxOTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBMZWdhY3lGcmFtZXdvcmsgPSBfZGVyZXFfKFwiLi9sZWdhY3lcIik7XG52YXIgQ2FyZGluYWxNb2RhbEZyYW1ld29yayA9IF9kZXJlcV8oXCIuL2NhcmRpbmFsLW1vZGFsXCIpO1xudmFyIEJvb3RzdHJhcDNNb2RhbEZyYW1ld29yayA9IF9kZXJlcV8oXCIuL2Jvb3RzdHJhcDMtbW9kYWxcIik7XG52YXIgSW5saW5lSWZyYW1lRnJhbWV3b3JrID0gX2RlcmVxXyhcIi4vaW5saW5lLWlmcmFtZVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxlZ2FjeTogTGVnYWN5RnJhbWV3b3JrLFxuICBcImNhcmRpbmFsLW1vZGFsXCI6IENhcmRpbmFsTW9kYWxGcmFtZXdvcmssXG4gIFwiYm9vdHN0cmFwMy1tb2RhbFwiOiBCb290c3RyYXAzTW9kYWxGcmFtZXdvcmssXG4gIFwiaW5saW5lLWlmcmFtZVwiOiBJbmxpbmVJZnJhbWVGcmFtZXdvcmssXG59O1xuXG59LHtcIi4vYm9vdHN0cmFwMy1tb2RhbFwiOjE5MSxcIi4vY2FyZGluYWwtbW9kYWxcIjoxOTIsXCIuL2lubGluZS1pZnJhbWVcIjoxOTQsXCIuL2xlZ2FjeVwiOjE5NX1dLDE5NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFNvbmdiaXJkRnJhbWV3b3JrID0gX2RlcmVxXyhcIi4vc29uZ2JpcmRcIik7XG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi4vLi4vc2hhcmVkL2Vycm9yc1wiKTtcbnZhciBlbnVtZXJhdGUgPSBfZGVyZXFfKFwiLi4vLi4vLi4vbGliL2VudW1lcmF0ZVwiKTtcblxuZnVuY3Rpb24gSW5saW5lSWZyYW1lRnJhbWV3b3JrKG9wdGlvbnMpIHtcbiAgU29uZ2JpcmRGcmFtZXdvcmsuY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuSW5saW5lSWZyYW1lRnJhbWV3b3JrLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiBTb25nYmlyZEZyYW1ld29yayxcbn0pO1xuXG5JbmxpbmVJZnJhbWVGcmFtZXdvcmsuZXZlbnRzID0gZW51bWVyYXRlKFxuICBbXCJBVVRIRU5USUNBVElPTl9JRlJBTUVfQVZBSUxBQkxFXCJdLFxuICBcImlubGluZS1pZnJhbWUtZnJhbWV3b3JrOlwiXG4pO1xuXG5JbmxpbmVJZnJhbWVGcmFtZXdvcmsucHJvdG90eXBlLnNldFVwRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAocmVwbHkpIHtcbiAgU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLnNldFVwRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzLCByZXBseSk7XG5cbiAgdGhpcy5vbihcbiAgICBJbmxpbmVJZnJhbWVGcmFtZXdvcmsuZXZlbnRzLkFVVEhFTlRJQ0FUSU9OX0lGUkFNRV9BVkFJTEFCTEUsXG4gICAgZnVuY3Rpb24gKHBheWxvYWQsIG5leHQpIHtcbiAgICAgIHJlcGx5KFwiYXV0aGVudGljYXRpb24taWZyYW1lLWF2YWlsYWJsZVwiLCBwYXlsb2FkLCBuZXh0KTtcbiAgICB9XG4gICk7XG59O1xuXG5JbmxpbmVJZnJhbWVGcmFtZXdvcmsucHJvdG90eXBlLl9jcmVhdGVDYXJkaW5hbENvbmZpZ3VyYXRpb25PcHRpb25zID0gZnVuY3Rpb24gKFxuICBzZXR1cE9wdGlvbnNcbikge1xuICB2YXIgb3B0aW9ucyA9XG4gICAgU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLl9jcmVhdGVDYXJkaW5hbENvbmZpZ3VyYXRpb25PcHRpb25zLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgc2V0dXBPcHRpb25zXG4gICAgKTtcblxuICBvcHRpb25zLnBheW1lbnQuZnJhbWV3b3JrID0gXCJpbmxpbmVcIjtcblxuICByZXR1cm4gb3B0aW9ucztcbn07XG5cbklubGluZUlmcmFtZUZyYW1ld29yay5wcm90b3R5cGUuX2FkZFYxSWZyYW1lVG9QYWdlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9lbWl0KFxuICAgIElubGluZUlmcmFtZUZyYW1ld29yay5ldmVudHMuQVVUSEVOVElDQVRJT05fSUZSQU1FX0FWQUlMQUJMRSxcbiAgICB7XG4gICAgICBlbGVtZW50OiB0aGlzLl92MU1vZGFsLFxuICAgIH0sXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gTk9PUFxuICAgIH1cbiAgKTtcbn07XG5cbklubGluZUlmcmFtZUZyYW1ld29yay5wcm90b3R5cGUuX3NldHVwRnJhbWV3b3JrU3BlY2lmaWNMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2V0Q2FyZGluYWxMaXN0ZW5lcihcInVpLmlubGluZS5zZXR1cFwiLCB0aGlzLl9vbklubGluZVNldHVwLmJpbmQodGhpcykpO1xufTtcblxuSW5saW5lSWZyYW1lRnJhbWV3b3JrLnByb3RvdHlwZS5fb25JbmxpbmVTZXR1cCA9IGZ1bmN0aW9uIChcbiAgaHRtbFRlbXBsYXRlLFxuICBkZXRhaWxzLFxuICByZXNvbHZlLFxuICByZWplY3Rcbikge1xuICB2YXIgY29udGFpbmVyLCBoYXNFcnJvcjtcblxuICBpZiAoIWh0bWxUZW1wbGF0ZSB8fCAhZGV0YWlscykge1xuICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChkZXRhaWxzLnBheW1lbnRUeXBlICE9PSBcIkNDQVwiKSB7XG4gICAgaGFzRXJyb3IgPSB0cnVlO1xuICB9IGVsc2UgaWYgKFxuICAgICEoZGV0YWlscy5kYXRhLm1vZGUgPT09IFwic3VwcHJlc3NcIiB8fCBkZXRhaWxzLmRhdGEubW9kZSA9PT0gXCJzdGF0aWNcIilcbiAgKSB7XG4gICAgaGFzRXJyb3IgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGhhc0Vycm9yKSB7XG4gICAgcmVqZWN0KG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVEhSRUVEU19JTkxJTkVfSUZSQU1FX0RFVEFJTFNfSU5DT1JSRUNUKSk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb250YWluZXIuaW5uZXJIVE1MID0gaHRtbFRlbXBsYXRlO1xuXG4gIGlmIChkZXRhaWxzLmRhdGEubW9kZSA9PT0gXCJzdXBwcmVzc1wiKSB7XG4gICAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgcmVzb2x2ZSgpO1xuICB9IGVsc2UgaWYgKGRldGFpbHMuZGF0YS5tb2RlID09PSBcInN0YXRpY1wiKSB7XG4gICAgdGhpcy5fZW1pdChcbiAgICAgIElubGluZUlmcmFtZUZyYW1ld29yay5ldmVudHMuQVVUSEVOVElDQVRJT05fSUZSQU1FX0FWQUlMQUJMRSxcbiAgICAgIHtcbiAgICAgICAgZWxlbWVudDogY29udGFpbmVyLFxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW5saW5lSWZyYW1lRnJhbWV3b3JrO1xuXG59LHtcIi4uLy4uLy4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuLi8uLi8uLi9saWIvZW51bWVyYXRlXCI6MTM0LFwiLi4vLi4vc2hhcmVkL2Vycm9yc1wiOjIwMCxcIi4vc29uZ2JpcmRcIjoxOTZ9XSwxOTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBCYXNlRnJhbWV3b3JrID0gX2RlcmVxXyhcIi4vYmFzZVwiKTtcbnZhciBkZWZlcnJlZCA9IF9kZXJlcV8oXCIuLi8uLi8uLi9saWIvZGVmZXJyZWRcIik7XG5cbmZ1bmN0aW9uIExlZ2FjeUZyYW1ld29yayhvcHRpb25zKSB7XG4gIEJhc2VGcmFtZXdvcmsuY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuTGVnYWN5RnJhbWV3b3JrLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQmFzZUZyYW1ld29yay5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IExlZ2FjeUZyYW1ld29yayxcbn0pO1xuXG5MZWdhY3lGcmFtZXdvcmsucHJvdG90eXBlLnNldFVwRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIG5vb3Bcbn07XG5cbkxlZ2FjeUZyYW1ld29yay5wcm90b3R5cGUudHJhbnNmb3JtVjFDdXN0b21lckJpbGxpbmdBZGRyZXNzID0gZnVuY3Rpb24gKFxuICBjdXN0b21lclxuKSB7XG4gIGN1c3RvbWVyLmJpbGxpbmdBZGRyZXNzLmxpbmUxID0gY3VzdG9tZXIuYmlsbGluZ0FkZHJlc3Muc3RyZWV0QWRkcmVzcztcbiAgY3VzdG9tZXIuYmlsbGluZ0FkZHJlc3MubGluZTIgPSBjdXN0b21lci5iaWxsaW5nQWRkcmVzcy5leHRlbmRlZEFkZHJlc3M7XG4gIGN1c3RvbWVyLmJpbGxpbmdBZGRyZXNzLmNpdHkgPSBjdXN0b21lci5iaWxsaW5nQWRkcmVzcy5sb2NhbGl0eTtcbiAgY3VzdG9tZXIuYmlsbGluZ0FkZHJlc3Muc3RhdGUgPSBjdXN0b21lci5iaWxsaW5nQWRkcmVzcy5yZWdpb247XG4gIGN1c3RvbWVyLmJpbGxpbmdBZGRyZXNzLmNvdW50cnlDb2RlID1cbiAgICBjdXN0b21lci5iaWxsaW5nQWRkcmVzcy5jb3VudHJ5Q29kZUFscGhhMjtcbiAgZGVsZXRlIGN1c3RvbWVyLmJpbGxpbmdBZGRyZXNzLnN0cmVldEFkZHJlc3M7XG4gIGRlbGV0ZSBjdXN0b21lci5iaWxsaW5nQWRkcmVzcy5leHRlbmRlZEFkZHJlc3M7XG4gIGRlbGV0ZSBjdXN0b21lci5iaWxsaW5nQWRkcmVzcy5sb2NhbGl0eTtcbiAgZGVsZXRlIGN1c3RvbWVyLmJpbGxpbmdBZGRyZXNzLnJlZ2lvbjtcbiAgZGVsZXRlIGN1c3RvbWVyLmJpbGxpbmdBZGRyZXNzLmNvdW50cnlDb2RlQWxwaGEyO1xuXG4gIHJldHVybiBjdXN0b21lcjtcbn07XG5cbkxlZ2FjeUZyYW1ld29yay5wcm90b3R5cGUuX2NyZWF0ZUlmcmFtZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLl9zZXR1cFYxRWxlbWVudHMoe1xuICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgIGxvb2t1cFJlc3BvbnNlOiBvcHRpb25zLmxvb2t1cFJlc3BvbnNlLFxuICAgIHNob3dMb2FkZXI6IG9wdGlvbnMuc2hvd0xvYWRlcixcbiAgICBoYW5kbGVBdXRoUmVzcG9uc2U6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBzZWxmLl9oYW5kbGVBdXRoUmVzcG9uc2UoZGF0YSwgb3B0aW9ucyk7XG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXMuX3YxSWZyYW1lO1xufTtcblxuTGVnYWN5RnJhbWV3b3JrLnByb3RvdHlwZS5faGFuZGxlQXV0aFJlc3BvbnNlID0gZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcbiAgdGhpcy5fdjFCdXMudGVhcmRvd24oKTtcblxuICBvcHRpb25zLnJlbW92ZUZyYW1lKCk7XG5cbiAgLy8gVGhpcyBhbHNvIGhhcyB0byBiZSBpbiBhIHNldFRpbWVvdXQgc28gaXQgZXhlY3V0ZXMgYWZ0ZXIgdGhlIGByZW1vdmVGcmFtZWAuXG4gIGRlZmVycmVkKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX2hhbmRsZVYxQXV0aFJlc3BvbnNlKGRhdGEpO1xuICAgIH0uYmluZCh0aGlzKVxuICApKCk7XG59O1xuXG5MZWdhY3lGcmFtZXdvcmsucHJvdG90eXBlLl9jaGVja0ZvckZyYW1ld29ya1NwZWNpZmljVmVyaWZ5Q2FyZEVycm9ycyA9XG4gIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIGVycm9yT3B0aW9uO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmFkZEZyYW1lICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGVycm9yT3B0aW9uID0gXCJhbiBhZGRGcmFtZSBmdW5jdGlvblwiO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMucmVtb3ZlRnJhbWUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZXJyb3JPcHRpb24gPSBcImEgcmVtb3ZlRnJhbWUgZnVuY3Rpb25cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gZXJyb3JPcHRpb247XG4gIH07XG5cbkxlZ2FjeUZyYW1ld29yay5wcm90b3R5cGUuX2Zvcm1hdFZlcmlmeUNhcmRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IEJhc2VGcmFtZXdvcmsucHJvdG90eXBlLl9mb3JtYXRWZXJpZnlDYXJkT3B0aW9ucy5jYWxsKFxuICAgIHRoaXMsXG4gICAgb3B0aW9uc1xuICApO1xuXG4gIG1vZGlmaWVkT3B0aW9ucy5hZGRGcmFtZSA9IGRlZmVycmVkKG9wdGlvbnMuYWRkRnJhbWUpO1xuICBtb2RpZmllZE9wdGlvbnMucmVtb3ZlRnJhbWUgPSBkZWZlcnJlZChvcHRpb25zLnJlbW92ZUZyYW1lKTtcbiAgbW9kaWZpZWRPcHRpb25zLnNob3dMb2FkZXIgPSBvcHRpb25zLnNob3dMb2FkZXIgIT09IGZhbHNlO1xuXG4gIHJldHVybiBtb2RpZmllZE9wdGlvbnM7XG59O1xuXG5MZWdhY3lGcmFtZXdvcmsucHJvdG90eXBlLl9mb3JtYXRMb29rdXBEYXRhID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHJldHVybiBCYXNlRnJhbWV3b3JrLnByb3RvdHlwZS5fZm9ybWF0TG9va3VwRGF0YVxuICAgIC5jYWxsKHRoaXMsIG9wdGlvbnMpXG4gICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmIChvcHRpb25zLmN1c3RvbWVyICYmIG9wdGlvbnMuY3VzdG9tZXIuYmlsbGluZ0FkZHJlc3MpIHtcbiAgICAgICAgZGF0YS5jdXN0b21lciA9IHNlbGYudHJhbnNmb3JtVjFDdXN0b21lckJpbGxpbmdBZGRyZXNzKFxuICAgICAgICAgIG9wdGlvbnMuY3VzdG9tZXJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSk7XG59O1xuXG5MZWdhY3lGcmFtZXdvcmsucHJvdG90eXBlLl9wcmVzZW50Q2hhbGxlbmdlID0gZnVuY3Rpb24gKFxuICBsb29rdXBSZXNwb25zZSxcbiAgb3B0aW9uc1xuKSB7XG4gIG9wdGlvbnMuYWRkRnJhbWUoXG4gICAgbnVsbCxcbiAgICB0aGlzLl9jcmVhdGVJZnJhbWUoe1xuICAgICAgc2hvd0xvYWRlcjogb3B0aW9ucy5zaG93TG9hZGVyLFxuICAgICAgbG9va3VwUmVzcG9uc2U6IGxvb2t1cFJlc3BvbnNlLmxvb2t1cCxcbiAgICAgIG5vbmNlOiBsb29rdXBSZXNwb25zZS5wYXltZW50TWV0aG9kLm5vbmNlLFxuICAgICAgcmVtb3ZlRnJhbWU6IG9wdGlvbnMucmVtb3ZlRnJhbWUsXG4gICAgfSlcbiAgKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGVnYWN5RnJhbWV3b3JrO1xuXG59LHtcIi4uLy4uLy4uL2xpYi9kZWZlcnJlZFwiOjEzMixcIi4vYmFzZVwiOjE5MH1dLDE5NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEJhc2VGcmFtZXdvcmsgPSBfZGVyZXFfKFwiLi9iYXNlXCIpO1xudmFyIGFzc2lnbiA9IF9kZXJlcV8oXCIuLi8uLi8uLi9saWIvYXNzaWduXCIpLmFzc2lnbjtcbnZhciBkZWZlcnJlZCA9IF9kZXJlcV8oXCIuLi8uLi8uLi9saWIvZGVmZXJyZWRcIik7XG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBjb252ZXJ0VG9CcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi8uLi9saWIvY29udmVydC10by1icmFpbnRyZWUtZXJyb3JcIik7XG52YXIgYW5hbHl0aWNzID0gX2RlcmVxXyhcIi4uLy4uLy4uL2xpYi9hbmFseXRpY3NcIik7XG52YXIgYXNzZXRzID0gX2RlcmVxXyhcIi4uLy4uLy4uL2xpYi9hc3NldHNcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4uLy4uL3NoYXJlZC9lcnJvcnNcIik7XG52YXIgZW51bWVyYXRlID0gX2RlcmVxXyhcIi4uLy4uLy4uL2xpYi9lbnVtZXJhdGVcIik7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXyhcIi4uLy4uL3NoYXJlZC9jb25zdGFudHNcIik7XG52YXIgRXh0ZW5kZWRQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvZXh0ZW5kZWQtcHJvbWlzZVwiKTtcblxudmFyIElOVEVHUkFUSU9OX1RJTUVPVVRfTVMgPVxuICBfZGVyZXFfKFwiLi4vLi4vLi4vbGliL2NvbnN0YW50c1wiKS5JTlRFR1JBVElPTl9USU1FT1VUX01TO1xudmFyIFBMQVRGT1JNID0gX2RlcmVxXyhcIi4uLy4uLy4uL2xpYi9jb25zdGFudHNcIikuUExBVEZPUk07XG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xudmFyIENVU1RPTUVSX0NBTkNFTEVEX1NPTkdCSVJEX01PREFMID0gXCIwMVwiO1xudmFyIFNPTkdCSVJEX1VJX0VWRU5UUyA9IFtcbiAgXCJ1aS5jbG9zZVwiLFxuICBcInVpLnJlbmRlclwiLFxuXG4gIC8vIFRPRE8gdGhlc2UgZXZlbnRzIGFyZSBub3QgZG9jdW1lbnRlZCBpbiB0aGVcbiAgLy8gY2xpZW50IHJlZmVyZW5jZSBiZWNhdXNlIHNvIGZhciB3ZSBoYXZlXG4gIC8vIG5vdCBiZWVuIGFibGUgdG8gdHJpZ2dlciB0aGVtIGluIG91ciB0ZXN0aW5nXG4gIFwidWkucmVuZGVySGlkZGVuXCIsXG4gIFwidWkubG9hZGluZy5jbG9zZVwiLFxuICBcInVpLmxvYWRpbmcucmVuZGVyXCIsXG5dO1xuXG52YXIgU0NBX0VYRU1QVElPTl9UWVBFUyA9IFtcImxvd192YWx1ZVwiLCBcInRyYW5zYWN0aW9uX3Jpc2tfYW5hbHlzaXNcIl07XG5cbkV4dGVuZGVkUHJvbWlzZS5zdXBwcmVzc1VuaGFuZGxlZFByb21pc2VNZXNzYWdlID0gdHJ1ZTtcblxuZnVuY3Rpb24gU29uZ2JpcmRGcmFtZXdvcmsob3B0aW9ucykge1xuICBCYXNlRnJhbWV3b3JrLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fc29uZ2JpcmRJbml0RmFpbGVkID0gZmFsc2U7XG4gIHRoaXMuX2NsaWVudE1ldGFkYXRhID0ge1xuICAgIHJlcXVlc3RlZFRocmVlRFNlY3VyZVZlcnNpb246IFwiMlwiLFxuICAgIHNka1ZlcnNpb246IFBMQVRGT1JNICsgXCIvXCIgKyBWRVJTSU9OLFxuICB9O1xuICB0aGlzLm9yaWdpbmFsU2V0dXBPcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5fZ2V0RGZSZWZlcmVuY2VJZFByb21pc2VQbHVzID0gbmV3IEV4dGVuZGVkUHJvbWlzZSgpO1xuICB0aGlzLnNldHVwU29uZ2JpcmQob3B0aW9ucyk7XG4gIHRoaXMuX2NhcmRpbmFsRXZlbnRzID0gW107XG59XG5cblNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQmFzZUZyYW1ld29yay5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IFNvbmdiaXJkRnJhbWV3b3JrLFxufSk7XG5cblNvbmdiaXJkRnJhbWV3b3JrLmV2ZW50cyA9IGVudW1lcmF0ZShcbiAgW1xuICAgIFwiTE9PS1VQX0NPTVBMRVRFXCIsXG4gICAgXCJDVVNUT01FUl9DQU5DRUxFRFwiLFxuICAgIFwiVUkuQ0xPU0VcIixcbiAgICBcIlVJLlJFTkRFUlwiLFxuICAgIFwiVUkuUkVOREVSSElEREVOXCIsXG4gICAgXCJVSS5MT0FESU5HLkNMT1NFXCIsXG4gICAgXCJVSS5MT0FESU5HLlJFTkRFUlwiLFxuICBdLFxuICBcInNvbmdiaXJkLWZyYW1ld29yazpcIlxuKTtcblxuU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLnNldFVwRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAocmVwbHkpIHtcbiAgdGhpcy5vbihTb25nYmlyZEZyYW1ld29yay5ldmVudHMuTE9PS1VQX0NPTVBMRVRFLCBmdW5jdGlvbiAoZGF0YSwgbmV4dCkge1xuICAgIHJlcGx5KFwibG9va3VwLWNvbXBsZXRlXCIsIGRhdGEsIG5leHQpO1xuICB9KTtcbiAgdGhpcy5vbihTb25nYmlyZEZyYW1ld29yay5ldmVudHMuQ1VTVE9NRVJfQ0FOQ0VMRUQsIGZ1bmN0aW9uICgpIHtcbiAgICByZXBseShcImN1c3RvbWVyLWNhbmNlbGVkXCIpO1xuICB9KTtcbiAgdGhpcy5vbihTb25nYmlyZEZyYW1ld29yay5ldmVudHNbXCJVSS5DTE9TRVwiXSwgZnVuY3Rpb24gKCkge1xuICAgIHJlcGx5KFwiYXV0aGVudGljYXRpb24tbW9kYWwtY2xvc2VcIik7XG4gIH0pO1xuICB0aGlzLm9uKFNvbmdiaXJkRnJhbWV3b3JrLmV2ZW50c1tcIlVJLlJFTkRFUlwiXSwgZnVuY3Rpb24gKCkge1xuICAgIHJlcGx5KFwiYXV0aGVudGljYXRpb24tbW9kYWwtcmVuZGVyXCIpO1xuICB9KTtcbiAgdGhpcy5vbihTb25nYmlyZEZyYW1ld29yay5ldmVudHNbXCJVSS5SRU5ERVJISURERU5cIl0sIGZ1bmN0aW9uICgpIHtcbiAgICByZXBseShcImF1dGhlbnRpY2F0aW9uLW1vZGFsLXJlbmRlci1oaWRkZW5cIik7XG4gIH0pO1xuICB0aGlzLm9uKFNvbmdiaXJkRnJhbWV3b3JrLmV2ZW50c1tcIlVJLkxPQURJTkcuQ0xPU0VcIl0sIGZ1bmN0aW9uICgpIHtcbiAgICByZXBseShcImF1dGhlbnRpY2F0aW9uLW1vZGFsLWxvYWRlci1jbG9zZVwiKTtcbiAgfSk7XG4gIHRoaXMub24oU29uZ2JpcmRGcmFtZXdvcmsuZXZlbnRzW1wiVUkuTE9BRElORy5SRU5ERVJcIl0sIGZ1bmN0aW9uICgpIHtcbiAgICByZXBseShcImF1dGhlbnRpY2F0aW9uLW1vZGFsLWxvYWRlci1yZW5kZXJcIik7XG4gIH0pO1xufTtcblxuU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLnByZXBhcmVMb29rdXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgZGF0YSA9IGFzc2lnbih7fSwgb3B0aW9ucyk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICByZXR1cm4gdGhpcy5nZXREZlJlZmVyZW5jZUlkKClcbiAgICAudGhlbihmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGRhdGEuZGZSZWZlcmVuY2VJZCA9IGlkO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHNlbGYuX3RyaWdnZXJDYXJkaW5hbEJpblByb2Nlc3Mob3B0aW9ucy5iaW4pO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGNhdGNoIGFuZCBpZ25vcmUgZXJyb3JzIGZyb20gbG9va2luZyB1cFxuICAgICAgLy8gZGYgcmVmZXJlbmNlIGFuZCBDYXJkaW5hbCBiaW4gcHJvY2Vzc1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHNlbGYuX3dhaXRGb3JDbGllbnQoKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGRhdGEuY2xpZW50TWV0YWRhdGEgPSBzZWxmLl9jbGllbnRNZXRhZGF0YTtcbiAgICAgIGRhdGEuYXV0aG9yaXphdGlvbkZpbmdlcnByaW50ID1cbiAgICAgICAgc2VsZi5fY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKS5hdXRob3JpemF0aW9uRmluZ2VycHJpbnQ7XG4gICAgICBkYXRhLmJyYWludHJlZUxpYnJhcnlWZXJzaW9uID0gXCJicmFpbnRyZWUvd2ViL1wiICsgVkVSU0lPTjtcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSk7XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUuaW5pdGlhbGl6ZUNoYWxsZW5nZVdpdGhMb29rdXBSZXNwb25zZSA9IGZ1bmN0aW9uIChcbiAgbG9va3VwUmVzcG9uc2UsXG4gIG9wdGlvbnNcbikge1xuICByZXR1cm4gdGhpcy5zZXR1cFNvbmdiaXJkKCkudGhlbihcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gQmFzZUZyYW1ld29yay5wcm90b3R5cGUuaW5pdGlhbGl6ZUNoYWxsZW5nZVdpdGhMb29rdXBSZXNwb25zZS5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICBsb29rdXBSZXNwb25zZSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcbn07XG5cblNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZS5oYW5kbGVTb25nYmlyZEVycm9yID0gZnVuY3Rpb24gKGVycm9yVHlwZSkge1xuICB0aGlzLl9zb25nYmlyZEluaXRGYWlsZWQgPSB0cnVlO1xuICB0aGlzLl9yZW1vdmVTb25nYmlyZExpc3RlbmVycygpO1xuICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgIHRoaXMuX2NyZWF0ZVByb21pc2UsXG4gICAgXCJ0aHJlZS1kLXNlY3VyZS5jYXJkaW5hbC1zZGsuc29uZ2JpcmQtZXJyb3IuXCIgKyBlcnJvclR5cGVcbiAgKTtcblxuICBpZiAodGhpcy5fc29uZ2JpcmRQcm9taXNlKSB7XG4gICAgdGhpcy5fc29uZ2JpcmRQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxufTtcblxuU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLl90cmlnZ2VyQ2FyZGluYWxCaW5Qcm9jZXNzID0gZnVuY3Rpb24gKGJpbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBpc3N1ZXJTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gIHJldHVybiB3aW5kb3cuQ2FyZGluYWwudHJpZ2dlcihcImJpbi5wcm9jZXNzXCIsIGJpbikudGhlbihmdW5jdGlvbiAoXG4gICAgYmluUmVzdWx0c1xuICApIHtcbiAgICBzZWxmLl9jbGllbnRNZXRhZGF0YS5pc3N1ZXJEZXZpY2VEYXRhQ29sbGVjdGlvblRpbWVFbGFwc2VkID1cbiAgICAgIERhdGUubm93KCkgLSBpc3N1ZXJTdGFydFRpbWU7XG4gICAgc2VsZi5fY2xpZW50TWV0YWRhdGEuaXNzdWVyRGV2aWNlRGF0YUNvbGxlY3Rpb25SZXN1bHQgPVxuICAgICAgYmluUmVzdWx0cyAmJiBiaW5SZXN1bHRzLlN0YXR1cztcbiAgfSk7XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUudHJhbnNmb3JtQmlsbGluZ0FkZHJlc3MgPSBmdW5jdGlvbiAoXG4gIGFkZGl0aW9uYWxJbmZvcm1hdGlvbixcbiAgYmlsbGluZ0FkZHJlc3Ncbikge1xuICBpZiAoYmlsbGluZ0FkZHJlc3MpIHtcbiAgICAvLyBtYXAgZnJvbSBwdWJsaWMgQVBJIHRvIHRoZSBBUEkgdGhhdCB0aGUgR2F0ZXdheSBleHBlY3RzXG4gICAgZXh0cmFjdEFkZHJlc3NEYXRhKGJpbGxpbmdBZGRyZXNzLCBhZGRpdGlvbmFsSW5mb3JtYXRpb24sIFwiYmlsbGluZ1wiKTtcbiAgICBhZGRpdGlvbmFsSW5mb3JtYXRpb24uYmlsbGluZ1Bob25lTnVtYmVyID0gYmlsbGluZ0FkZHJlc3MucGhvbmVOdW1iZXI7XG4gICAgYWRkaXRpb25hbEluZm9ybWF0aW9uLmJpbGxpbmdHaXZlbk5hbWUgPSBiaWxsaW5nQWRkcmVzcy5naXZlbk5hbWU7XG4gICAgYWRkaXRpb25hbEluZm9ybWF0aW9uLmJpbGxpbmdTdXJuYW1lID0gYmlsbGluZ0FkZHJlc3Muc3VybmFtZTtcbiAgfVxuXG4gIHJldHVybiBhZGRpdGlvbmFsSW5mb3JtYXRpb247XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUudHJhbnNmb3JtU2hpcHBpbmdBZGRyZXNzID0gZnVuY3Rpb24gKFxuICBhZGRpdGlvbmFsSW5mb3JtYXRpb25cbikge1xuICB2YXIgc2hpcHBpbmdBZGRyZXNzID0gYWRkaXRpb25hbEluZm9ybWF0aW9uLnNoaXBwaW5nQWRkcmVzcztcblxuICBpZiAoc2hpcHBpbmdBZGRyZXNzKSB7XG4gICAgLy8gbWFwIGZyb20gcHVibGljIEFQSSB0byB0aGUgQVBJIHRoYXQgdGhlIEdhdGV3YXkgZXhwZWN0c1xuICAgIGV4dHJhY3RBZGRyZXNzRGF0YShzaGlwcGluZ0FkZHJlc3MsIGFkZGl0aW9uYWxJbmZvcm1hdGlvbiwgXCJzaGlwcGluZ1wiKTtcblxuICAgIGRlbGV0ZSBhZGRpdGlvbmFsSW5mb3JtYXRpb24uc2hpcHBpbmdBZGRyZXNzO1xuICB9XG5cbiAgcmV0dXJuIGFkZGl0aW9uYWxJbmZvcm1hdGlvbjtcbn07XG5cblNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZS5fY3JlYXRlVjFJZnJhbWVNb2RhbEVsZW1lbnQgPSBmdW5jdGlvbiAoaWZyYW1lKSB7XG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgbW9kYWwuaW5uZXJIVE1MID1cbiAgICAnPGRpdiBkYXRhLWJyYWludHJlZS12MS1mYWxsYmFjay1pZnJhbWUtY29udGFpbmVyPVwidHJ1ZVwiIHN0eWxlPVwiJyArXG4gICAgXCJoZWlnaHQ6IDQwMHB4O1wiICtcbiAgICAnXCI+PC9kaXY+JztcbiAgbW9kYWxcbiAgICAucXVlcnlTZWxlY3RvcignW2RhdGEtYnJhaW50cmVlLXYxLWZhbGxiYWNrLWlmcmFtZS1jb250YWluZXI9XCJ0cnVlXCJdJylcbiAgICAuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcblxuICByZXR1cm4gbW9kYWw7XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUuX2NyZWF0ZVYxSWZyYW1lTW9kYWwgPSBmdW5jdGlvbiAoaWZyYW1lKSB7XG4gIHZhciBtb2RhbCA9IHRoaXMuX2NyZWF0ZVYxSWZyYW1lTW9kYWxFbGVtZW50KGlmcmFtZSk7XG4gIHZhciBidG4gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtYnJhaW50cmVlLXYxLWZhbGxiYWNrLWNsb3NlLWJ1dHRvbl1cIik7XG4gIHZhciBiYWNrZHJvcCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1icmFpbnRyZWUtdjEtZmFsbGJhY2stYmFja2Ryb3BdXCIpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gY2xvc2VIYW5kbGVyKCkge1xuICAgIG1vZGFsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobW9kYWwpO1xuICAgIHNlbGYuY2FuY2VsVmVyaWZ5Q2FyZChlcnJvcnMuVEhSRUVEU19DQVJESU5BTF9TREtfQ0FOQ0VMRUQpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBzZWxmLl9vblYxS2V5dXApO1xuICAgIHNlbGYuX29uVjFLZXl1cCA9IG51bGw7XG4gIH1cblxuICB0aGlzLl9vblYxS2V5dXAgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLmtleSAhPT0gXCJFc2NhcGVcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghbW9kYWwucGFyZW50Tm9kZSkge1xuICAgICAgLy8gbW9kYWwgbm90IG9uIHBhZ2VcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjbG9zZUhhbmRsZXIoKTtcbiAgfTtcblxuICBpZiAoYnRuKSB7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbG9zZUhhbmRsZXIpO1xuICB9XG5cbiAgaWYgKGJhY2tkcm9wKSB7XG4gICAgYmFja2Ryb3AuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsb3NlSGFuZGxlcik7XG4gIH1cblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5fb25WMUtleXVwKTtcblxuICByZXR1cm4gbW9kYWw7XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUuX2FkZFYxSWZyYW1lVG9QYWdlID0gZnVuY3Rpb24gKCkge1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX3YxTW9kYWwpO1xufTtcblxuU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLnNldHVwU29uZ2JpcmQgPSBmdW5jdGlvbiAoc2V0dXBPcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cbiAgaWYgKHRoaXMuX3NvbmdiaXJkUHJvbWlzZSkge1xuICAgIHJldHVybiB0aGlzLl9zb25nYmlyZFByb21pc2U7XG4gIH1cblxuICBzZXR1cE9wdGlvbnMgPSBzZXR1cE9wdGlvbnMgfHwge307XG5cbiAgdGhpcy5fc29uZ2JpcmRQcm9taXNlID0gbmV3IEV4dGVuZGVkUHJvbWlzZSgpO1xuICB0aGlzLl92MlNldHVwRmFpbHVyZVJlYXNvbiA9IFwicmVhc29uLXVua25vd25cIjtcblxuICBzZWxmXG4gICAgLl9sb2FkQ2FyZGluYWxTY3JpcHQoc2V0dXBPcHRpb25zKVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghd2luZG93LkNhcmRpbmFsKSB7XG4gICAgICAgIHNlbGYuX3YyU2V0dXBGYWlsdXJlUmVhc29uID0gXCJjYXJkaW5hbC1nbG9iYWwtdW5hdmFpbGFibGVcIjtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5USFJFRURTX0NBUkRJTkFMX1NES19TRVRVUF9GQUlMRUQpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLl9jb25maWd1cmVDYXJkaW5hbFNkayh7XG4gICAgICAgIHNldHVwT3B0aW9uczogc2V0dXBPcHRpb25zLFxuICAgICAgICBzZXR1cFN0YXJ0VGltZTogc3RhcnRUaW1lLFxuICAgICAgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgdmFyIGVycm9yID0gY29udmVydFRvQnJhaW50cmVlRXJyb3IoZXJyLCB7XG4gICAgICAgIHR5cGU6IGVycm9ycy5USFJFRURTX0NBUkRJTkFMX1NES19TRVRVUF9GQUlMRUQudHlwZSxcbiAgICAgICAgY29kZTogZXJyb3JzLlRIUkVFRFNfQ0FSRElOQUxfU0RLX1NFVFVQX0ZBSUxFRC5jb2RlLFxuICAgICAgICBtZXNzYWdlOiBlcnJvcnMuVEhSRUVEU19DQVJESU5BTF9TREtfU0VUVVBfRkFJTEVELm1lc3NhZ2UsXG4gICAgICB9KTtcblxuICAgICAgc2VsZi5fZ2V0RGZSZWZlcmVuY2VJZFByb21pc2VQbHVzLnJlamVjdChlcnJvcik7XG5cbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoc2VsZi5fc29uZ2JpcmRTZXR1cFRpbWVvdXRSZWZlcmVuY2UpO1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY2xpZW50LFxuICAgICAgICBcInRocmVlLWQtc2VjdXJlLmNhcmRpbmFsLXNkay5pbml0LnNldHVwLWZhaWxlZFwiXG4gICAgICApO1xuICAgICAgc2VsZi5oYW5kbGVTb25nYmlyZEVycm9yKFxuICAgICAgICBcImNhcmRpbmFsLXNkay1zZXR1cC1mYWlsZWQuXCIgKyBzZWxmLl92MlNldHVwRmFpbHVyZVJlYXNvblxuICAgICAgKTtcbiAgICB9KTtcblxuICByZXR1cm4gdGhpcy5fc29uZ2JpcmRQcm9taXNlO1xufTtcblxuU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLl9jb25maWd1cmVDYXJkaW5hbFNkayA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHJldHVybiB0aGlzLl93YWl0Rm9yQ2xpZW50KClcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhyZWVEU0NvbmZpZyA9XG4gICAgICAgIHNlbGYuX2NsaWVudC5nZXRDb25maWd1cmF0aW9uKCkuZ2F0ZXdheUNvbmZpZ3VyYXRpb24udGhyZWVEU2VjdXJlO1xuXG4gICAgICByZXR1cm4gdGhyZWVEU0NvbmZpZztcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICh0aHJlZURTQ29uZmlnKSB7XG4gICAgICB2YXIgand0ID0gdGhyZWVEU0NvbmZpZy5jYXJkaW5hbEF1dGhlbnRpY2F0aW9uSldUO1xuICAgICAgdmFyIHNldHVwT3B0aW9ucyA9IGNvbmZpZy5zZXR1cE9wdGlvbnM7XG4gICAgICB2YXIgc2V0dXBTdGFydFRpbWUgPSBjb25maWcuc2V0dXBTdGFydFRpbWU7XG4gICAgICB2YXIgY2FyZGluYWxDb25maWd1cmF0aW9uID1cbiAgICAgICAgc2VsZi5fY3JlYXRlQ2FyZGluYWxDb25maWd1cmF0aW9uT3B0aW9ucyhzZXR1cE9wdGlvbnMpO1xuXG4gICAgICBTT05HQklSRF9VSV9FVkVOVFMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgIHNlbGYuc2V0Q2FyZGluYWxMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl9lbWl0KFNvbmdiaXJkRnJhbWV3b3JrLmV2ZW50c1tldmVudE5hbWUudG9VcHBlckNhc2UoKV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgc2VsZi5zZXRDYXJkaW5hbExpc3RlbmVyKFxuICAgICAgICBcInBheW1lbnRzLnNldHVwQ29tcGxldGVcIixcbiAgICAgICAgc2VsZi5fY3JlYXRlUGF5bWVudHNTZXR1cENvbXBsZXRlQ2FsbGJhY2soKVxuICAgICAgKTtcblxuICAgICAgc2VsZi5fc2V0dXBGcmFtZXdvcmtTcGVjaWZpY0xpc3RlbmVycygpO1xuXG4gICAgICB3aW5kb3cuQ2FyZGluYWwuY29uZmlndXJlKGNhcmRpbmFsQ29uZmlndXJhdGlvbik7XG5cbiAgICAgIHdpbmRvdy5DYXJkaW5hbC5zZXR1cChcImluaXRcIiwge1xuICAgICAgICBqd3Q6IGp3dCxcbiAgICAgIH0pO1xuXG4gICAgICBzZWxmLl9jbGllbnRNZXRhZGF0YS5jYXJkaW5hbERldmljZURhdGFDb2xsZWN0aW9uVGltZUVsYXBzZWQgPVxuICAgICAgICBEYXRlLm5vdygpIC0gc2V0dXBTdGFydFRpbWU7XG5cbiAgICAgIHNlbGYuc2V0Q2FyZGluYWxMaXN0ZW5lcihcbiAgICAgICAgXCJwYXltZW50cy52YWxpZGF0ZWRcIixcbiAgICAgICAgc2VsZi5fY3JlYXRlUGF5bWVudHNWYWxpZGF0ZWRDYWxsYmFjaygpXG4gICAgICApO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHNlbGYuX3YyU2V0dXBGYWlsdXJlUmVhc29uID0gXCJjYXJkaW5hbC1jb25maWd1cmF0aW9uLXRocmV3LWVycm9yXCI7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgIH0pO1xufTtcblxuU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLnNldENhcmRpbmFsTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYikge1xuICB0aGlzLl9jYXJkaW5hbEV2ZW50cy5wdXNoKGV2ZW50TmFtZSk7XG4gIHdpbmRvdy5DYXJkaW5hbC5vbihldmVudE5hbWUsIGNiKTtcbn07XG5cblNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZS5fc2V0dXBGcmFtZXdvcmtTcGVjaWZpY0xpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gbm9vcFxufTtcblxuU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLl9jcmVhdGVDYXJkaW5hbENvbmZpZ3VyYXRpb25PcHRpb25zID0gZnVuY3Rpb24gKFxuICBzZXR1cE9wdGlvbnNcbikge1xuICB2YXIgY2FyZGluYWxDb25maWd1cmF0aW9uID0gc2V0dXBPcHRpb25zLmNhcmRpbmFsU0RLQ29uZmlnIHx8IHt9O1xuICB2YXIgcGF5bWVudFNldHRpbmdzID0gY2FyZGluYWxDb25maWd1cmF0aW9uLnBheW1lbnQgfHwge307XG5cbiAgaWYgKCFjYXJkaW5hbENvbmZpZ3VyYXRpb24ubG9nZ2luZyAmJiBzZXR1cE9wdGlvbnMubG9nZ2luZ0VuYWJsZWQpIHtcbiAgICBjYXJkaW5hbENvbmZpZ3VyYXRpb24ubG9nZ2luZyA9IHtcbiAgICAgIGxldmVsOiBcInZlcmJvc2VcIixcbiAgICB9O1xuICB9XG5cbiAgY2FyZGluYWxDb25maWd1cmF0aW9uLnBheW1lbnQgPSB7fTtcblxuICBpZiAocGF5bWVudFNldHRpbmdzLmhhc093blByb3BlcnR5KFwiZGlzcGxheUxvYWRpbmdcIikpIHtcbiAgICBjYXJkaW5hbENvbmZpZ3VyYXRpb24ucGF5bWVudC5kaXNwbGF5TG9hZGluZyA9XG4gICAgICBwYXltZW50U2V0dGluZ3MuZGlzcGxheUxvYWRpbmc7XG4gIH1cbiAgaWYgKHBheW1lbnRTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlFeGl0QnV0dG9uXCIpKSB7XG4gICAgY2FyZGluYWxDb25maWd1cmF0aW9uLnBheW1lbnQuZGlzcGxheUV4aXRCdXR0b24gPVxuICAgICAgcGF5bWVudFNldHRpbmdzLmRpc3BsYXlFeGl0QnV0dG9uO1xuICB9XG5cbiAgcmV0dXJuIGNhcmRpbmFsQ29uZmlndXJhdGlvbjtcbn07XG5cblNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZS5fbG9hZENhcmRpbmFsU2NyaXB0ID0gZnVuY3Rpb24gKHNldHVwT3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgcmV0dXJuIHRoaXMuX3dhaXRGb3JDbGllbnQoKVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzY3JpcHRTb3VyY2UgPSBzZWxmLl9nZXRDYXJkaW5hbFNjcmlwdFNvdXJjZSgpO1xuXG4gICAgICBzZWxmLl9zb25nYmlyZFNldHVwVGltZW91dFJlZmVyZW5jZSA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgICBzZWxmLl9jbGllbnQsXG4gICAgICAgICAgXCJ0aHJlZS1kLXNlY3VyZS5jYXJkaW5hbC1zZGsuaW5pdC5zZXR1cC10aW1lb3V0XCJcbiAgICAgICAgKTtcbiAgICAgICAgc2VsZi5oYW5kbGVTb25nYmlyZEVycm9yKFwiY2FyZGluYWwtc2RrLXNldHVwLXRpbWVvdXRcIik7XG4gICAgICB9LCBzZXR1cE9wdGlvbnMudGltZW91dCB8fCBJTlRFR1JBVElPTl9USU1FT1VUX01TKTtcblxuICAgICAgcmV0dXJuIGFzc2V0cy5sb2FkU2NyaXB0KHsgc3JjOiBzY3JpcHRTb3VyY2UgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgc2VsZi5fdjJTZXR1cEZhaWx1cmVSZWFzb24gPSBcInNvbmdiaXJkLWpzLWZhaWxlZC10by1sb2FkXCI7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgY29udmVydFRvQnJhaW50cmVlRXJyb3IoXG4gICAgICAgICAgZXJyLFxuICAgICAgICAgIGVycm9ycy5USFJFRURTX0NBUkRJTkFMX1NES19TQ1JJUFRfTE9BRF9GQUlMRURcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9KTtcbn07XG5cblNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZS5fZ2V0Q2FyZGluYWxTY3JpcHRTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBnYXRld2F5Q29uZmlnID0gdGhpcy5fY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKS5nYXRld2F5Q29uZmlndXJhdGlvbjtcblxuICBpZiAoZ2F0ZXdheUNvbmZpZyAmJiBnYXRld2F5Q29uZmlnLmVudmlyb25tZW50ID09PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHJldHVybiBjb25zdGFudHMuQ0FSRElOQUxfU0NSSVBUX1NPVVJDRS5wcm9kdWN0aW9uO1xuICB9XG5cbiAgcmV0dXJuIGNvbnN0YW50cy5DQVJESU5BTF9TQ1JJUFRfU09VUkNFLnNhbmRib3g7XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUuX2NyZWF0ZVBheW1lbnRzU2V0dXBDb21wbGV0ZUNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgc2VsZi5fZ2V0RGZSZWZlcmVuY2VJZFByb21pc2VQbHVzLnJlc29sdmUoZGF0YS5zZXNzaW9uSWQpO1xuXG4gICAgd2luZG93LmNsZWFyVGltZW91dChzZWxmLl9zb25nYmlyZFNldHVwVGltZW91dFJlZmVyZW5jZSk7XG4gICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICBcInRocmVlLWQtc2VjdXJlLmNhcmRpbmFsLXNkay5pbml0LnNldHVwLWNvbXBsZXRlZFwiXG4gICAgKTtcblxuICAgIHNlbGYuX3NvbmdiaXJkUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUuZ2V0RGZSZWZlcmVuY2VJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2dldERmUmVmZXJlbmNlSWRQcm9taXNlUGx1cztcbn07XG5cblNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZS5fcGVyZm9ybUpXVFZhbGlkYXRpb24gPSBmdW5jdGlvbiAoXG4gIHJhd0NhcmRpbmFsU0RLVmVyaWZpY2F0aW9uRGF0YSxcbiAgand0XG4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgbm9uY2UgPSB0aGlzLl9sb29rdXBQYXltZW50TWV0aG9kLm5vbmNlO1xuICB2YXIgdXJsID1cbiAgICBcInBheW1lbnRfbWV0aG9kcy9cIiArIG5vbmNlICsgXCIvdGhyZWVfZF9zZWN1cmUvYXV0aGVudGljYXRlX2Zyb21fand0XCI7XG4gIHZhciBjYW5jZWxDb2RlID1cbiAgICByYXdDYXJkaW5hbFNES1ZlcmlmaWNhdGlvbkRhdGEgJiZcbiAgICByYXdDYXJkaW5hbFNES1ZlcmlmaWNhdGlvbkRhdGEuUGF5bWVudCAmJlxuICAgIHJhd0NhcmRpbmFsU0RLVmVyaWZpY2F0aW9uRGF0YS5QYXltZW50LkV4dGVuZGVkRGF0YSAmJlxuICAgIHJhd0NhcmRpbmFsU0RLVmVyaWZpY2F0aW9uRGF0YS5QYXltZW50LkV4dGVuZGVkRGF0YS5DaGFsbGVuZ2VDYW5jZWw7XG5cbiAgaWYgKGNhbmNlbENvZGUpIHtcbiAgICAvLyBzZWUgQ2hhbGxlbmdlQ2FuY2VsIGRvY3MgaGVyZSBmb3IgZGlmZmVyZW50IHZhbHVlczpcbiAgICAvLyBodHRwczovL2NhcmRpbmFsZG9jcy5hdGxhc3NpYW4ubmV0L3dpa2kvc3BhY2VzL0NDL3BhZ2VzLzk4MzE1L1Jlc3BvbnNlK09iamVjdHNcbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgdGhpcy5fY3JlYXRlUHJvbWlzZSxcbiAgICAgIFwidGhyZWUtZC1zZWN1cmUudmVyaWZpY2F0aW9uLWZsb3cuY2FyZGluYWwtc2RrLmNhbmNlbC1jb2RlLlwiICsgY2FuY2VsQ29kZVxuICAgICk7XG5cbiAgICBpZiAoY2FuY2VsQ29kZSA9PT0gQ1VTVE9NRVJfQ0FOQ0VMRURfU09OR0JJUkRfTU9EQUwpIHtcbiAgICAgIHRoaXMuX2VtaXQoU29uZ2JpcmRGcmFtZXdvcmsuZXZlbnRzLkNVU1RPTUVSX0NBTkNFTEVEKTtcbiAgICB9XG4gIH1cblxuICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgIHRoaXMuX2NyZWF0ZVByb21pc2UsXG4gICAgXCJ0aHJlZS1kLXNlY3VyZS52ZXJpZmljYXRpb24tZmxvdy51cGdyYWRlLXBheW1lbnQtbWV0aG9kLnN0YXJ0ZWRcIlxuICApO1xuXG4gIHJldHVybiB0aGlzLl93YWl0Rm9yQ2xpZW50KClcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc2VsZi5fY2xpZW50LnJlcXVlc3Qoe1xuICAgICAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgICAgICBlbmRwb2ludDogdXJsLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgand0OiBqd3QsXG4gICAgICAgICAgcGF5bWVudE1ldGhvZE5vbmNlOiBub25jZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICB2YXIgcGF5bWVudE1ldGhvZCA9IHJlc3BvbnNlLnBheW1lbnRNZXRob2QgfHwgc2VsZi5fbG9va3VwUGF5bWVudE1ldGhvZDtcbiAgICAgIHZhciBmb3JtYXR0ZWRSZXNwb25zZSA9IHNlbGYuX2Zvcm1hdEF1dGhSZXNwb25zZShcbiAgICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgICAgcmVzcG9uc2UudGhyZWVEU2VjdXJlSW5mb1xuICAgICAgKTtcblxuICAgICAgZm9ybWF0dGVkUmVzcG9uc2UucmF3Q2FyZGluYWxTREtWZXJpZmljYXRpb25EYXRhID1cbiAgICAgICAgcmF3Q2FyZGluYWxTREtWZXJpZmljYXRpb25EYXRhO1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY2xpZW50LFxuICAgICAgICBcInRocmVlLWQtc2VjdXJlLnZlcmlmaWNhdGlvbi1mbG93LnVwZ3JhZGUtcGF5bWVudC1tZXRob2Quc3VjY2VlZGVkXCJcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZm9ybWF0dGVkUmVzcG9uc2UpO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHZhciBlcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5USFJFRURTX0pXVF9BVVRIRU5USUNBVElPTl9GQUlMRUQudHlwZSxcbiAgICAgICAgY29kZTogZXJyb3JzLlRIUkVFRFNfSldUX0FVVEhFTlRJQ0FUSU9OX0ZBSUxFRC5jb2RlLFxuICAgICAgICBtZXNzYWdlOiBlcnJvcnMuVEhSRUVEU19KV1RfQVVUSEVOVElDQVRJT05fRkFJTEVELm1lc3NhZ2UsXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnIsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY2xpZW50LFxuICAgICAgICBcInRocmVlLWQtc2VjdXJlLnZlcmlmaWNhdGlvbi1mbG93LnVwZ3JhZGUtcGF5bWVudC1tZXRob2QuZXJyb3JlZFwiXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH0pO1xufTtcblxuU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLl9jcmVhdGVQYXltZW50c1ZhbGlkYXRlZENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFJlc3BvbnNlIERhdGFcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9jYXJkaW5hbGRvY3MuYXRsYXNzaWFuLm5ldC93aWtpL3NwYWNlcy9DQy9wYWdlcy85ODMxNS9SZXNwb25zZStPYmplY3RzI1Jlc3BvbnNlT2JqZWN0cy1PYmplY3REZWZpbml0aW9ufVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YS5BY3Rpb25Db2RlIFRoZSByZXN1bHRpbmcgc3RhdGUgb2YgdGhlIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRhdGEuVmFsaWRhdGVkIFJlcHJlc2VudHMgd2hldGhlciB0cmFuc2FjdGlvbiB3YXMgc3VjY2Vzc2Z1bGx5IG9yIG5vdC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEuUGF5bWVudCBSZXByZXNlbnRzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHZlcmlmaWNhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRhdGEuRXJyb3JOdW1iZXIgQSBub24temVybyB2YWx1ZSByZXByZXNlbnRzIHRoZSBlcnJvciBlbmNvdW50ZXJlZCB3aGlsZSBhdHRlbXB0aW5nIHRoZSBwcm9jZXNzIHRoZSBtZXNzYWdlIHJlcXVlc3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLkVycm9yRGVzY3JpcHRpb24gQXBwbGljYXRpb24gZXJyb3IgZGVzY3JpcHRpb24gZm9yIHRoZSBhc3NvY2lhdGVkIGVycm9yIG51bWJlci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRlZEp3dCBSZXNwb25zZSBKV1RcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqICovXG4gIHJldHVybiBmdW5jdGlvbiAoZGF0YSwgdmFsaWRhdGVkSnd0KSB7XG4gICAgdmFyIGZvcm1hdHRlZEVycm9yO1xuXG4gICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICBcInRocmVlLWQtc2VjdXJlLnZlcmlmaWNhdGlvbi1mbG93LmNhcmRpbmFsLXNkay5hY3Rpb24tY29kZS5cIiArXG4gICAgICAgIGRhdGEuQWN0aW9uQ29kZS50b0xvd2VyQ2FzZSgpXG4gICAgKTtcblxuICAgIGlmICghc2VsZi5fdmVyaWZ5Q2FyZFByb21pc2VQbHVzKSB7XG4gICAgICBzZWxmLmhhbmRsZVNvbmdiaXJkRXJyb3IoXG4gICAgICAgIFwiY2FyZGluYWwtc2RrLXNldHVwLWVycm9yLm51bWJlci1cIiArIGRhdGEuRXJyb3JOdW1iZXJcbiAgICAgICk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGRhdGEuQWN0aW9uQ29kZSkge1xuICAgICAgLy8gSGFuZGxlIHRoZXNlIHNjZW5hcmlvcyBiYXNlZCBvbiBsaWFiaWxpdHkgc2hpZnQgaW5mb3JtYXRpb24gaW4gdGhlIHJlc3BvbnNlLlxuICAgICAgY2FzZSBcIlNVQ0NFU1NcIjpcbiAgICAgIGNhc2UgXCJOT0FDVElPTlwiOlxuICAgICAgY2FzZSBcIkZBSUxVUkVcIjpcbiAgICAgICAgc2VsZlxuICAgICAgICAgIC5fcGVyZm9ybUpXVFZhbGlkYXRpb24oZGF0YSwgdmFsaWRhdGVkSnd0KVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHNlbGYuX3ZlcmlmeUNhcmRQcm9taXNlUGx1cy5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgc2VsZi5fdmVyaWZ5Q2FyZFByb21pc2VQbHVzLnJlamVjdChlcnIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIkVSUk9SXCI6XG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgICBcInRocmVlLWQtc2VjdXJlLnZlcmlmaWNhdGlvbi1mbG93LmNhcmRpbmFsLXNkay1lcnJvci5cIiArXG4gICAgICAgICAgICBkYXRhLkVycm9yTnVtYmVyXG4gICAgICAgICk7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLkVycm9yTnVtYmVyKSB7XG4gICAgICAgICAgY2FzZSAxMDAwMTogLy8gQ2FyZGluYWwgRG9jczogVGltZW91dCB3aGVuIHNlbmRpbmcgYW4gL0luaXQgbWVzc2FnZVxuICAgICAgICAgIGNhc2UgMTAwMDI6IC8vIENhcmRpbmFsIERvY3M6IFRpbWVvdXQgd2hlbiBzZW5kaW5nIGFuIC9TdGFydCBtZXNzYWdlXG4gICAgICAgICAgICBmb3JtYXR0ZWRFcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcihcbiAgICAgICAgICAgICAgZXJyb3JzLlRIUkVFRFNfQ0FSRElOQUxfU0RLX1NFVFVQX1RJTUVET1VUXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMDAwMzogLy8gQ2FyZGluYWwgRG9jczogVGltZW91dCB3aGVuIHNlbmRpbmcgYW4gL1ZhbGlkYXRlIG1lc3NhZ2UuIEFsdGhvdWdoIHRoaXMgY29kZSBleGlzdHMgd2UgZG8gbm90IHlldCBoYXZlIGEgZmxvdyB3aGVyZSBhIHZhbGlkYXRlIG1lc3NhZ2UgaXMgc2VudCB0byBNaWRhcy4gVGhpcyBlcnJvciBzaG91bGQgbm90IHlldCBiZSB0cmlnZ2VyZWRcbiAgICAgICAgICBjYXNlIDEwMDA3OiAvLyBDYXJkaW5hbCBEb2NzOiBUaW1lb3V0IHdoZW4gc2VuZGluZyBhbiAvQ29uZmlybSBtZXNzYWdlXG4gICAgICAgICAgY2FzZSAxMDAwOTogLy8gQ2FyZGluYWwgRG9jczogVGltZW91dCB3aGVuIHNlbmRpbmcgYW4gL0NvbnRpbnVlIG1lc3NhZ2VcbiAgICAgICAgICAgIGZvcm1hdHRlZEVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKFxuICAgICAgICAgICAgICBlcnJvcnMuVEhSRUVEU19DQVJESU5BTF9TREtfUkVTUE9OU0VfVElNRURPVVRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDEwMDA1OiAvLyBDYXJkaW5hbCBEb2NzOiBTb25nYmlyZCB3YXMgc3RhcnRlZCB3aXRob3V0IGEgcmVxdWVzdCBqd3QuXG4gICAgICAgICAgY2FzZSAxMDAwNjogLy8gQ2FyZGluYWwgRG9jczogVGhpcyBpcyBhIGdlbmVyYWwgY29uZmlndXJhdGlvbiBlcnJvci4gVGhlIGRlc2NyaXB0aW9uIGlzIHBvcHVsYXRlZCBieSB0aGUgc3BlY2lmaWMgY29uZmlndXJhdGlvbiBlcnJvciB0aGF0IGNhdXNlZCB0aGUgZXJyb3IuXG4gICAgICAgICAgICBmb3JtYXR0ZWRFcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcihcbiAgICAgICAgICAgICAgZXJyb3JzLlRIUkVFRFNfQ0FSRElOQUxfU0RLX0JBRF9DT05GSUdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDEwMDA4OiAvLyBDYXJkaW5hbCBEb2NzOiBTb25nYmlyZCB3YXMgaW5pdGlhbGl6ZWQgd2l0aG91dCBhIG1lcmNoYW50IEpXVC5cbiAgICAgICAgICBjYXNlIDEwMDEwOiAvLyBDYXJkaW5hbCBEb2NzOiBUaGUgcmVzcG9uc2UgSldUIHdhc1xuICAgICAgICAgICAgZm9ybWF0dGVkRXJyb3IgPSBuZXcgQnJhaW50cmVlRXJyb3IoXG4gICAgICAgICAgICAgIGVycm9ycy5USFJFRURTX0NBUkRJTkFMX1NES19CQURfSldUXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMDAxMTpcbiAgICAgICAgICAgIC8vIFRoaXMgbWF5IG5ldmVyIGdldCBjYWxsZWQsIGFjY29yZGluZyB0byB0aGUgQ2FyZGluYWwgZG9jczpcbiAgICAgICAgICAgIC8vIFRoZSB1c2VyIGhhcyBjYW5jZWxlZCB0aGUgdHJhbnNhY3Rpb24uIFRoaXMgaXMgZ2VuZXJhbGx5IGZvdW5kIGluIGFsdGVybmF0aXZlXG4gICAgICAgICAgICAvLyBwYXltZW50cyB0aGF0IHN1cHBseSBhIGNhbmNlbCBidXR0b24gb24gdGhlIHBheW1lbnQgYnJhbmQgc2lkZS5cbiAgICAgICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICAgICAgICAgIFwidGhyZWUtZC1zZWN1cmUudmVyaWZpY2F0aW9uLWZsb3cuY2FuY2VsZWRcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvcm1hdHRlZEVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKFxuICAgICAgICAgICAgICBlcnJvcnMuVEhSRUVEU19DQVJESU5BTF9TREtfQ0FOQ0VMRURcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZm9ybWF0dGVkRXJyb3IgPSBuZXcgQnJhaW50cmVlRXJyb3IoXG4gICAgICAgICAgICAgIGVycm9ycy5USFJFRURTX0NBUkRJTkFMX1NES19FUlJPUlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdHRlZEVycm9yLmRldGFpbHMgPSB7XG4gICAgICAgICAgb3JpZ2luYWxFcnJvcjoge1xuICAgICAgICAgICAgY29kZTogZGF0YS5FcnJvck51bWJlcixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkYXRhLkVycm9yRGVzY3JpcHRpb24sXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLl92ZXJpZnlDYXJkUHJvbWlzZVBsdXMucmVqZWN0KGZvcm1hdHRlZEVycm9yKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9O1xufTtcblxuU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLl9jaGVja0ZvclZlcmlmeUNhcmRFcnJvciA9IGZ1bmN0aW9uIChcbiAgb3B0aW9ucyxcbiAgcHJpdmF0ZU9wdGlvbnNcbikge1xuICBpZiAoIW9wdGlvbnMuYmluKSB7XG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICB0eXBlOiBlcnJvcnMuVEhSRUVEU19NSVNTSU5HX1ZFUklGWV9DQVJEX09QVElPTi50eXBlLFxuICAgICAgY29kZTogZXJyb3JzLlRIUkVFRFNfTUlTU0lOR19WRVJJRllfQ0FSRF9PUFRJT04uY29kZSxcbiAgICAgIG1lc3NhZ2U6IFwidmVyaWZ5Q2FyZCBvcHRpb25zIG11c3QgaW5jbHVkZSBhIEJJTi5cIixcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBCYXNlRnJhbWV3b3JrLnByb3RvdHlwZS5fY2hlY2tGb3JWZXJpZnlDYXJkRXJyb3IuY2FsbChcbiAgICB0aGlzLFxuICAgIG9wdGlvbnMsXG4gICAgcHJpdmF0ZU9wdGlvbnNcbiAgKTtcbn07XG5cblNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZS5fY2hlY2tGb3JGcmFtZXdvcmtTcGVjaWZpY1ZlcmlmeUNhcmRFcnJvcnMgPVxuICBmdW5jdGlvbiAob3B0aW9ucywgcHJpdmF0ZU9wdGlvbnMpIHtcbiAgICB2YXIgZXJyb3JPcHRpb247XG5cbiAgICBpZiAoXG4gICAgICB0eXBlb2Ygb3B0aW9ucy5vbkxvb2t1cENvbXBsZXRlICE9PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICFwcml2YXRlT3B0aW9ucy5pZ25vcmVPbkxvb2t1cENvbXBsZXRlUmVxdWlyZW1lbnRcbiAgICApIHtcbiAgICAgIGVycm9yT3B0aW9uID0gXCJhbiBvbkxvb2t1cENvbXBsZXRlIGZ1bmN0aW9uXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVycm9yT3B0aW9uO1xuICB9O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUuX2Zvcm1hdFZlcmlmeUNhcmRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IEJhc2VGcmFtZXdvcmsucHJvdG90eXBlLl9mb3JtYXRWZXJpZnlDYXJkT3B0aW9ucy5jYWxsKFxuICAgIHRoaXMsXG4gICAgb3B0aW9uc1xuICApO1xuICB2YXIgYWRkaXRpb25hbEluZm9ybWF0aW9uID0gbW9kaWZpZWRPcHRpb25zLmFkZGl0aW9uYWxJbmZvcm1hdGlvbiB8fCB7fTtcblxuICBhZGRpdGlvbmFsSW5mb3JtYXRpb24gPSB0aGlzLnRyYW5zZm9ybUJpbGxpbmdBZGRyZXNzKFxuICAgIGFkZGl0aW9uYWxJbmZvcm1hdGlvbixcbiAgICBvcHRpb25zLmJpbGxpbmdBZGRyZXNzXG4gICk7XG4gIGFkZGl0aW9uYWxJbmZvcm1hdGlvbiA9IHRoaXMudHJhbnNmb3JtU2hpcHBpbmdBZGRyZXNzKGFkZGl0aW9uYWxJbmZvcm1hdGlvbik7XG5cbiAgaWYgKG9wdGlvbnMub25Mb29rdXBDb21wbGV0ZSkge1xuICAgIG1vZGlmaWVkT3B0aW9ucy5vbkxvb2t1cENvbXBsZXRlID0gZGVmZXJyZWQob3B0aW9ucy5vbkxvb2t1cENvbXBsZXRlKTtcbiAgfVxuICBpZiAob3B0aW9ucy5lbWFpbCkge1xuICAgIGFkZGl0aW9uYWxJbmZvcm1hdGlvbi5lbWFpbCA9IG9wdGlvbnMuZW1haWw7XG4gIH1cbiAgaWYgKG9wdGlvbnMubW9iaWxlUGhvbmVOdW1iZXIpIHtcbiAgICBhZGRpdGlvbmFsSW5mb3JtYXRpb24ubW9iaWxlUGhvbmVOdW1iZXIgPSBvcHRpb25zLm1vYmlsZVBob25lTnVtYmVyO1xuICB9XG5cbiAgbW9kaWZpZWRPcHRpb25zLmFkZGl0aW9uYWxJbmZvcm1hdGlvbiA9IGFkZGl0aW9uYWxJbmZvcm1hdGlvbjtcblxuICByZXR1cm4gbW9kaWZpZWRPcHRpb25zO1xufTtcblxuU29uZ2JpcmRGcmFtZXdvcmsucHJvdG90eXBlLl9vbkxvb2t1cENvbXBsZXRlID0gZnVuY3Rpb24gKFxuICBsb29rdXBSZXNwb25zZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICByZXR1cm4gQmFzZUZyYW1ld29yay5wcm90b3R5cGUuX29uTG9va3VwQ29tcGxldGVcbiAgICAuY2FsbCh0aGlzLCBsb29rdXBSZXNwb25zZSlcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIE5FWFRfTUFKT1JfVkVSU0lPTiBmb3JtYXQgdGhpcyByZXNwb25zZSBvYmplY3QgdG8gbG9vayBsaWtlIHRoZSBtb2JpbGUgc2RrIHJlc3BvbnNlXG4gICAgICAgIC8vIHdoaWNoIGlzIGJhc2ljYWxseSB0aGUgbG9va3VwIHBhcmFtIGF0IHRoZSB0b3AgbGV2ZWwgd2l0aCBzb21lIGFkZGl0aW9uYWwgYWNjZXNzb3JzXG4gICAgICAgIHJlc3BvbnNlLnJlcXVpcmVzVXNlckF1dGhlbnRpY2F0aW9uID0gQm9vbGVhbihcbiAgICAgICAgICByZXNwb25zZS5sb29rdXAgJiYgcmVzcG9uc2UubG9va3VwLmFjc1VybFxuICAgICAgICApO1xuXG4gICAgICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLl92ZXJpZnlDYXJkUHJvbWlzZVBsdXMuY2F0Y2gocmVqZWN0KTtcblxuICAgICAgICAvLyBJZiBib3RoIGV2ZW50IGFuZCBjYWxsYmFjayBhcmUgbWlzdGFrZW5seSB1c2VkIHRvZ2V0aGVyLFxuICAgICAgICAvLyBwcmVmZXIgdGhlIGNhbGxiYWNrIHdoZW4gaXQgaXMgcGFzc2VkIGludG8gdGhlIHZlcmlmeUNhcmQgb3B0aW9uc1xuICAgICAgICBpZiAob3B0aW9ucy5vbkxvb2t1cENvbXBsZXRlKSB7XG4gICAgICAgICAgb3B0aW9ucy5vbkxvb2t1cENvbXBsZXRlKHJlc3BvbnNlLCBuZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLl9lbWl0KFNvbmdiaXJkRnJhbWV3b3JrLmV2ZW50cy5MT09LVVBfQ09NUExFVEUsIHJlc3BvbnNlLCBuZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUuX3ByZXNlbnRDaGFsbGVuZ2UgPSBmdW5jdGlvbiAobG9va3VwUmVzcG9uc2UpIHtcbiAgLy8gdHJhbnNhY3Rpb25JZCBpcyByZXF1aXJlZCBmb3IgdGhlIFNvbmdiaXJkIGZsb3csIHNvIGlmIGl0XG4gIC8vIGRvZXMgbm90IGV4aXN0LCB3ZSBqdXN0IHJldHVyblxuICBpZiAodGhpcy5fc29uZ2JpcmRJbml0RmFpbGVkIHx8ICFsb29rdXBSZXNwb25zZS5sb29rdXAudHJhbnNhY3Rpb25JZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHNldCB1cCBsaXN0ZW5lciBmb3IgcmVmIGlkIHRvIGNhbGwgb3V0IHRvIGJ0IGJlZm9yZSBjYWxsaW5nIHZlcmlmeSBjYWxsYmFja1xuICB3aW5kb3cuQ2FyZGluYWwuY29udGludWUoXG4gICAgXCJjY2FcIixcbiAgICB7XG4gICAgICBBY3NVcmw6IGxvb2t1cFJlc3BvbnNlLmxvb2t1cC5hY3NVcmwsXG4gICAgICBQYXlsb2FkOiBsb29rdXBSZXNwb25zZS5sb29rdXAucGFyZXEsXG4gICAgfSxcbiAgICB7XG4gICAgICBPcmRlckRldGFpbHM6IHsgVHJhbnNhY3Rpb25JZDogbG9va3VwUmVzcG9uc2UubG9va3VwLnRyYW5zYWN0aW9uSWQgfSxcbiAgICB9XG4gICk7XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUuX2Zvcm1hdExvb2t1cERhdGEgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgcmV0dXJuIEJhc2VGcmFtZXdvcmsucHJvdG90eXBlLl9mb3JtYXRMb29rdXBEYXRhXG4gICAgLmNhbGwodGhpcywgb3B0aW9ucylcbiAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgZGF0YS5hZGRpdGlvbmFsSW5mbyA9IG9wdGlvbnMuYWRkaXRpb25hbEluZm9ybWF0aW9uO1xuXG4gICAgICBpZiAob3B0aW9ucy5hY2NvdW50VHlwZSkge1xuICAgICAgICBkYXRhLmFjY291bnRUeXBlID0gb3B0aW9ucy5hY2NvdW50VHlwZTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmNoYWxsZW5nZVJlcXVlc3RlZCkge1xuICAgICAgICBkYXRhLmNoYWxsZW5nZVJlcXVlc3RlZCA9IG9wdGlvbnMuY2hhbGxlbmdlUmVxdWVzdGVkO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMucmVxdWVzdGVkRXhlbXB0aW9uVHlwZSkge1xuICAgICAgICBpZiAoIVNDQV9FWEVNUFRJT05fVFlQRVMuaW5jbHVkZXMob3B0aW9ucy5yZXF1ZXN0ZWRFeGVtcHRpb25UeXBlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgICBjb2RlOiBlcnJvcnMuVEhSRUVEU19SRVFVRVNURURfRVhFTVBUSU9OX1RZUEVfSU5WQUxJRC5jb2RlLFxuICAgICAgICAgICAgdHlwZTogZXJyb3JzLlRIUkVFRFNfUkVRVUVTVEVEX0VYRU1QVElPTl9UWVBFX0lOVkFMSUQudHlwZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAgIFwicmVxdWVzdGVkRXhlbXB0aW9uVHlwZSBgXCIgK1xuICAgICAgICAgICAgICBvcHRpb25zLnJlcXVlc3RlZEV4ZW1wdGlvblR5cGUgK1xuICAgICAgICAgICAgICBcImAgaXMgbm90IGEgdmFsaWQgZXhlbXB0aW9uLiBUaGUgYWNjZXB0ZWQgdmFsdWVzIGFyZTogYFwiICtcbiAgICAgICAgICAgICAgU0NBX0VYRU1QVElPTl9UWVBFUy5qb2luKFwiYCwgYFwiKSArXG4gICAgICAgICAgICAgIFwiYFwiLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEucmVxdWVzdGVkRXhlbXB0aW9uVHlwZSA9IG9wdGlvbnMucmVxdWVzdGVkRXhlbXB0aW9uVHlwZTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmN1c3RvbUZpZWxkcykge1xuICAgICAgICBkYXRhLmN1c3RvbUZpZWxkcyA9IG9wdGlvbnMuY3VzdG9tRmllbGRzO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZGF0YU9ubHlSZXF1ZXN0ZWQpIHtcbiAgICAgICAgZGF0YS5kYXRhT25seVJlcXVlc3RlZCA9IG9wdGlvbnMuZGF0YU9ubHlSZXF1ZXN0ZWQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5leGVtcHRpb25SZXF1ZXN0ZWQpIHtcbiAgICAgICAgZGF0YS5leGVtcHRpb25SZXF1ZXN0ZWQgPSBvcHRpb25zLmV4ZW1wdGlvblJlcXVlc3RlZDtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLnJlcXVlc3RWaXNhREFGKSB7XG4gICAgICAgIGRhdGEucmVxdWVzdFZpc2FEQUYgPSBvcHRpb25zLnJlcXVlc3RWaXNhREFGO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuYmluKSB7XG4gICAgICAgIGRhdGEuYmluID0gb3B0aW9ucy5iaW47XG4gICAgICB9XG4gICAgICAvLyBORVhUX01BSk9SX1ZFUlNJT04gcmVtb3ZlIGNhcmRBZGQgaW4gZmF2b3Igb2YgY2FyZEFkZENoYWxsZW5nZVJlcXVlc3RlZFxuICAgICAgaWYgKG9wdGlvbnMuY2FyZEFkZCAhPSBudWxsKSB7XG4gICAgICAgIGRhdGEuY2FyZEFkZCA9IG9wdGlvbnMuY2FyZEFkZDtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmNhcmRBZGRDaGFsbGVuZ2VSZXF1ZXN0ZWQgIT0gbnVsbCkge1xuICAgICAgICBkYXRhLmNhcmRBZGQgPSBvcHRpb25zLmNhcmRBZGRDaGFsbGVuZ2VSZXF1ZXN0ZWQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5tZXJjaGFudE5hbWUpIHtcbiAgICAgICAgZGF0YS5tZXJjaGFudE5hbWUgPSBvcHRpb25zLm1lcmNoYW50TmFtZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYucHJlcGFyZUxvb2t1cChkYXRhKTtcbiAgICB9KTtcbn07XG5cblNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZS5jYW5jZWxWZXJpZnlDYXJkID0gZnVuY3Rpb24gKHZlcmlmeUNhcmRFcnJvcikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgcmV0dXJuIEJhc2VGcmFtZXdvcmsucHJvdG90eXBlLmNhbmNlbFZlcmlmeUNhcmRcbiAgICAuY2FsbCh0aGlzKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKHNlbGYuX3ZlcmlmeUNhcmRQcm9taXNlUGx1cykge1xuICAgICAgICB2ZXJpZnlDYXJkRXJyb3IgPVxuICAgICAgICAgIHZlcmlmeUNhcmRFcnJvciB8fFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVEhSRUVEU19WRVJJRllfQ0FSRF9DQU5DRUxFRF9CWV9NRVJDSEFOVCk7XG5cbiAgICAgICAgc2VsZi5fdmVyaWZ5Q2FyZFByb21pc2VQbHVzLnJlamVjdCh2ZXJpZnlDYXJkRXJyb3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSk7XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUuX3JlbW92ZVNvbmdiaXJkTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jYXJkaW5hbEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICB3aW5kb3cuQ2FyZGluYWwub2ZmKGV2ZW50TmFtZSk7XG4gIH0pO1xuXG4gIHRoaXMuX2NhcmRpbmFsRXZlbnRzID0gW107XG59O1xuXG5Tb25nYmlyZEZyYW1ld29yay5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh3aW5kb3cuQ2FyZGluYWwpIHtcbiAgICB0aGlzLl9yZW1vdmVTb25nYmlyZExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gd2UgaW50ZW50aW9uYWxseSBkbyBub3QgcmVtb3ZlIHRoZSBDYXJkaW5hbCBTREtcbiAgLy8gZnJvbSB0aGUgcGFnZSB3aGVuIHRlYXJpbmcgZG93bi4gU3Vic2VxdWVudFxuICAvLyBjb21wb25lbnQgY3JlYXRpb25zIHdpbGwgYmUgZmFzdGVyIGJlY2F1c2VcbiAgLy8gdGhlIGFzc2V0IGlzIGFscmVhZHkgb24gdGhlIHBhZ2VcblxuICByZXR1cm4gQmFzZUZyYW1ld29yay5wcm90b3R5cGUudGVhcmRvd24uY2FsbCh0aGlzKTtcbn07XG5cblNvbmdiaXJkRnJhbWV3b3JrLnByb3RvdHlwZS5fcmVsb2FkVGhyZWVEU2VjdXJlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gIHJldHVybiBzZWxmLnRlYXJkb3duKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5fY29uZmlndXJlQ2FyZGluYWxTZGsoe1xuICAgICAgc2V0dXBPcHRpb25zOiBzZWxmLm9yaWdpbmFsU2V0dXBPcHRpb25zLFxuICAgICAgc2V0dXBTdGFydFRpbWU6IHN0YXJ0VGltZSxcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBleHRyYWN0QWRkcmVzc0RhdGEoc291cmNlLCB0YXJnZXQsIHByZWZpeCkge1xuICB0YXJnZXRbcHJlZml4ICsgXCJMaW5lMVwiXSA9IHNvdXJjZS5zdHJlZXRBZGRyZXNzO1xuICB0YXJnZXRbcHJlZml4ICsgXCJMaW5lMlwiXSA9IHNvdXJjZS5leHRlbmRlZEFkZHJlc3M7XG4gIHRhcmdldFtwcmVmaXggKyBcIkxpbmUzXCJdID0gc291cmNlLmxpbmUzO1xuICB0YXJnZXRbcHJlZml4ICsgXCJDaXR5XCJdID0gc291cmNlLmxvY2FsaXR5O1xuICB0YXJnZXRbcHJlZml4ICsgXCJTdGF0ZVwiXSA9IHNvdXJjZS5yZWdpb247XG4gIHRhcmdldFtwcmVmaXggKyBcIlBvc3RhbENvZGVcIl0gPSBzb3VyY2UucG9zdGFsQ29kZTtcbiAgdGFyZ2V0W3ByZWZpeCArIFwiQ291bnRyeUNvZGVcIl0gPSBzb3VyY2UuY291bnRyeUNvZGVBbHBoYTI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU29uZ2JpcmRGcmFtZXdvcms7XG5cbn0se1wiLi4vLi4vLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uLy4uLy4uL2xpYi9hc3NldHNcIjoxMjAsXCIuLi8uLi8uLi9saWIvYXNzaWduXCI6MTIxLFwiLi4vLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uLy4uLy4uL2xpYi9jb25zdGFudHNcIjoxMjYsXCIuLi8uLi8uLi9saWIvY29udmVydC10by1icmFpbnRyZWUtZXJyb3JcIjoxMjgsXCIuLi8uLi8uLi9saWIvZGVmZXJyZWRcIjoxMzIsXCIuLi8uLi8uLi9saWIvZW51bWVyYXRlXCI6MTM0LFwiLi4vLi4vc2hhcmVkL2NvbnN0YW50c1wiOjE5OSxcIi4uLy4uL3NoYXJlZC9lcnJvcnNcIjoyMDAsXCIuL2Jhc2VcIjoxOTAsXCJAYnJhaW50cmVlL2V4dGVuZGVkLXByb21pc2VcIjozNH1dLDE5NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIG1ldGhvZHMgPSBfZGVyZXFfKFwiLi4vLi4vbGliL21ldGhvZHNcIik7XG52YXIgY29udmVydE1ldGhvZHNUb0Vycm9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIik7XG52YXIgRXZlbnRFbWl0dGVyID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvZXZlbnQtZW1pdHRlclwiKTtcbnZhciBGUkFNRVdPUktTID0gX2RlcmVxXyhcIi4vZnJhbWV3b3Jrc1wiKTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICogQGNhbGxiYWNrIFRocmVlRFNlY3VyZX5hZGRGcmFtZUNhbGxiYWNrXG4gKiBAcGFyYW0gez9CcmFpbnRyZWVFcnJvcn0gW2Vycl0gYG51bGxgIG9yIGB1bmRlZmluZWRgIGlmIHRoZXJlIHdhcyBubyBlcnJvci5cbiAqIEBwYXJhbSB7SFRNTElGcmFtZUVsZW1lbnR9IGlmcmFtZSBBbiBpZnJhbWUgZWxlbWVudCBjb250YWluaW5nIHRoZSBiYW5rJ3MgYXV0aGVudGljYXRpb24gcGFnZSB0aGF0IHlvdSBtdXN0IHB1dCBvbiB5b3VyIHBhZ2UuXG4gKiBAZGVzY3JpcHRpb24gKipEZXByZWNhdGVkKiogVGhlIGNhbGxiYWNrIHVzZWQgZm9yIG9wdGlvbnMuYWRkRnJhbWUgaW4gM0RTIDEuMCdzIHtAbGluayBUaHJlZURTZWN1cmUjdmVyaWZ5Q2FyZHx2ZXJpZnlDYXJkfS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBjYWxsYmFjayBUaHJlZURTZWN1cmV+cmVtb3ZlRnJhbWVDYWxsYmFja1xuICogQGRlc2NyaXB0aW9uICoqRGVwcmVjYXRlZCoqIFRoZSBjYWxsYmFjayB1c2VkIGZvciBvcHRpb25zLnJlbW92ZUZyYW1lIGluIDNEUyAxLjAncyB7QGxpbmsgVGhyZWVEU2VjdXJlI3ZlcmlmeUNhcmR8dmVyaWZ5Q2FyZH0uXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBUaHJlZURTZWN1cmV+dmVyaWZ5Q2FyZEN1c3RvbWVyT2JqZWN0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2N1c3RvbWVyLm1vYmlsZVBob25lTnVtYmVyXSBUaGUgbW9iaWxlIHBob25lIG51bWJlciB1c2VkIGZvciB2ZXJpZmljYXRpb24uIE9ubHkgbnVtYmVyczsgcmVtb3ZlIGRhc2hlcywgcGFyZW50aGVzaXMgYW5kIG90aGVyIGNoYXJhY3RlcnMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2N1c3RvbWVyLmVtYWlsXSBUaGUgZW1haWwgdXNlZCBmb3IgdmVyaWZpY2F0aW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtjdXN0b21lci5zaGlwcGluZ01ldGhvZF0gVGhlIDItZGlnaXQgc3RyaW5nIGluZGljYXRpbmcgdGhlIHNoaXBwaW5nIG1ldGhvZCBjaG9zZW4gZm9yIHRoZSB0cmFuc2FjdGlvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY3VzdG9tZXIuYmlsbGluZ0FkZHJlc3MuZmlyc3ROYW1lXSBUaGUgZmlyc3QgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2N1c3RvbWVyLmJpbGxpbmdBZGRyZXNzLmxhc3ROYW1lXSBUaGUgbGFzdCBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgYWRkcmVzcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY3VzdG9tZXIuYmlsbGluZ0FkZHJlc3Muc3RyZWV0QWRkcmVzc10gTGluZSAxIG9mIHRoZSBBZGRyZXNzIChlZy4gbnVtYmVyLCBzdHJlZXQsIGV0YykuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2N1c3RvbWVyLmJpbGxpbmdBZGRyZXNzLmV4dGVuZGVkQWRkcmVzc10gTGluZSAyIG9mIHRoZSBBZGRyZXNzIChlZy4gc3VpdGUsIGFwdCAjLCBldGMuKS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY3VzdG9tZXIuYmlsbGluZ0FkZHJlc3MubG9jYWxpdHldIFRoZSBsb2NhbGl0eSAoY2l0eSkgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2N1c3RvbWVyLmJpbGxpbmdBZGRyZXNzLnJlZ2lvbl0gVGhlIDIgbGV0dGVyIGNvZGUgZm9yIFVTIHN0YXRlcyBvciBhbiBJU08tMzE2Ni0yIGNvdW50cnkgc3ViZGl2aXNpb24gY29kZSBvZiB1cCB0byB0aHJlZSBsZXR0ZXJzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtjdXN0b21lci5iaWxsaW5nQWRkcmVzcy5wb3N0YWxDb2RlXSBUaGUgemlwIGNvZGUgb3IgZXF1aXZhbGVudCBmb3IgY291bnRyaWVzIHRoYXQgaGF2ZSB0aGVtLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtjdXN0b21lci5iaWxsaW5nQWRkcmVzcy5jb3VudHJ5Q29kZUFscGhhMl0gVGhlIDIgY2hhcmFjdGVyIGNvdW50cnkgY29kZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY3VzdG9tZXIuYmlsbGluZ0FkZHJlc3MucGhvbmVOdW1iZXJdIFRoZSBwaG9uZSBudW1iZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBhZGRyZXNzLiBPbmx5IG51bWJlcnM7IHJlbW92ZSBkYXNoZXMsIHBhcmVudGhlc2lzIGFuZCBvdGhlciBjaGFyYWN0ZXJzLlxuICogQGRlc2NyaXB0aW9uICoqRGVwcmVjYXRlZCoqIE9wdGlvbmFsIGN1c3RvbWVyIGluZm9ybWF0aW9uIHRvIGJlIHBhc3NlZCB0byAzRFMgMS4wIGZvciB2ZXJpZmljYXRpb24uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBUaHJlZURTZWN1cmV+dmVyaWZ5UGF5bG9hZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5vbmNlIFRoZSBuZXcgcGF5bWVudCBtZXRob2Qgbm9uY2UgcHJvZHVjZWQgYnkgdGhlIDNEIFNlY3VyZSBsb29rdXAuIFRoZSBvcmlnaW5hbCBub25jZSBwYXNzZWQgaW50byB7QGxpbmsgVGhyZWVEU2VjdXJlI3ZlcmlmeUNhcmR8dmVyaWZ5Q2FyZH0gd2FzIGNvbnN1bWVkLiBUaGlzIG5ldyBub25jZSBzaG91bGQgYmUgdXNlZCB0byB0cmFuc2FjdCBvbiB5b3VyIHNlcnZlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSBwYXltZW50IG1ldGhvZCB0eXBlLlxuICogQHByb3BlcnR5IHtvYmplY3R9IGRldGFpbHMgQWRkaXRpb25hbCBhY2NvdW50IGRldGFpbHMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5jYXJkVHlwZSBUeXBlIG9mIGNhcmQsIGV4OiBWaXNhLCBNYXN0ZXJDYXJkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMubGFzdEZvdXIgTGFzdCBmb3VyIGRpZ2l0cyBvZiBjYXJkIG51bWJlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmxhc3RUd28gTGFzdCB0d28gZGlnaXRzIG9mIGNhcmQgbnVtYmVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRlc2NyaXB0aW9uIEEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24uXG4gKiBAcHJvcGVydHkge29iamVjdH0gYmluRGF0YSBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY2FyZCBiYXNlZCBvbiB0aGUgYmluLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuY29tbWVyY2lhbCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5jb3VudHJ5T2ZJc3N1YW5jZSBUaGUgY291bnRyeSBvZiBpc3N1YW5jZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmRlYml0IFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmR1cmJpblJlZ3VsYXRlZCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5oZWFsdGhjYXJlIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmlzc3VpbmdCYW5rIFRoZSBpc3N1aW5nIGJhbmsuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5wYXlyb2xsIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLnByZXBhaWQgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEucHJvZHVjdElkIFRoZSBwcm9kdWN0IGlkLlxuICogQHByb3BlcnR5IHtib29sZWFufSBsaWFiaWxpdHlTaGlmdFBvc3NpYmxlICpEZXByZWNhdGVkOiogVXNlIGB0aHJlZURTZWN1cmVJbmZvLmxpYWJpbGl0eVNoaWZ0UG9zc2libGVgIGluc3RlYWQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGxpYWJpbGl0eVNoaWZ0ZWQgKkRlcHJlY2F0ZWQ6KiBVc2UgYHRocmVlRFNlY3VyZUluZm8ubGlhYmlsaXR5U2hpZnRlZGAgaW5zdGVhZC5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSB0aHJlZURTZWN1cmVJbmZvIDNEUyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2FyZC4gTm90ZTogVGhpcyBpbmZvcm1hdGlvbiBzaG91bGQgYmUgdmVyaWZpZWQgb24gdGhlIHNlcnZlciBieSB1c2luZyB0aGUgW3BheW1lbnQgbWV0aG9kIG5vbmNlIGZpbmQgbWV0aG9kXShodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2JyYWludHJlZS9kb2NzL3JlZmVyZW5jZS9yZXF1ZXN0L3BheW1lbnQtbWV0aG9kLW5vbmNlL2ZpbmQpLiBUaGUgdmFsdWVzIHByb3ZpZGVkIGhlcmUgYXJlIG1lcmVseSBmb3IgY29udmVuaWVuY2UuIE9ubHkgdmFsdWVzIGxvb2tlZCB1cCBvbiB0aGUgc2VydmVyIHNob3VsZCBkZXRlcm1pbmUgdGhlIGxvZ2ljIGFib3V0IGhvdyB0byBwcm9jZXNzIGEgdHJhbnNhY3Rpb24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGhyZWVEU2VjdXJlSW5mby5hY3NUcmFuc2FjdGlvbklkIFRoZSB0cmFuc2FjdGlvbiBpZGVudGlmaWVyIGZyb20gdGhlIGlzc3VpbmcgYmFuay5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aHJlZURTZWN1cmVJbmZvLmNhdnYgQ2FyZGhvbGRlciBhdXRoZW50aWNhdGlvbiB2ZXJpZmljYXRpb24gdmFsdWUgb3IgQ0FWVi4gVGhlIG1haW4gZW5jcnlwdGVkIG1lc3NhZ2UgaXNzdWVycyBhbmQgY2FyZCBuZXR3b3JrcyB1c2UgdG8gdmVyaWZ5IGF1dGhlbnRpY2F0aW9uIGhhcyBvY2N1cnJlZC4gTWFzdGVyY2FyZCB1c2VzIGFuIEFWViBtZXNzYWdlIGFuZCBBbWVyaWNhbiBFeHByZXNzIHVzZXMgYW4gQUVWViBtZXNzYWdlLCBlYWNoIG9mIHdoaWNoIHNob3VsZCBhbHNvIGJlIHBhc3NlZCBpbiB0aGUgY2F2diBwYXJhbWV0ZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGhyZWVEU2VjdXJlSW5mby5kc1RyYW5zYWN0aW9uSWQgVHJhbnNhY3Rpb24gaWRlbnRpZmllciByZXN1bHRpbmcgZnJvbSAzRCBTZWN1cmUgMiBhdXRoZW50aWNhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aHJlZURTZWN1cmVJbmZvLmVjaUZsYWcgVGhlIHZhbHVlIG9mIHRoZSBlbGVjdHJvbmljIGNvbW1lcmNlIGluZGljYXRvciAoRUNJKSBmbGFnLCB3aGljaCBpbmRpY2F0ZXMgdGhlIG91dGNvbWUgb2YgdGhlIDNEUyBhdXRoZW50aWNhdGlvbi4gVGhpcyB3aWxsIGJlIGEgdHdvLWRpZ2l0IHZhbHVlLlxuICogQHByb3BlcnR5IHtib29sZWFufSB0aHJlZURTZWN1cmVJbmZvLmVucm9sbGVkIEluZGljYXRlcyB0aGUgc3RhdHVzIG9mIDNEIFNlY3VyZSBhdXRoZW50aWNhdGlvbiBlbGlnaWJpbGl0eSB3aXRoIHRoZSBjYXJkIGlzc3Vlci5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdGhyZWVEU2VjdXJlSW5mby5saWFiaWxpdHlTaGlmdGVkIEluZGljYXRlcyB3aGV0aGVyIHRoZSBsaWFiaWxpdHkgZm9yIGZyYXVkIGhhcyBiZWVuIHNoaWZ0ZWQgYXdheSBmcm9tIHRoZSBtZXJjaGFudC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdGhyZWVEU2VjdXJlSW5mby5saWFiaWxpdHlTaGlmdFBvc3NpYmxlIEluZGljYXRlcyB3aGV0aGVyIGxpYWJpbGl0eSBzaGlmdCBpcyBzdGlsbCBwb3NzaWJsZSBvbiBhIHJldHJ5LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRocmVlRFNlY3VyZUluZm8ucGFyZXNTdGF0dXMgVHJhbnNhY3Rpb24gc3RhdHVzIHJlc3VsdCBpZGVudGlmaWVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRocmVlRFNlY3VyZUluZm8uc3RhdHVzIEluZGljYXRlcyB0aGUgb3V0Y29tZSBvZiB0aGUgM0QgU2VjdXJlIGV2ZW50LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRocmVlRFNlY3VyZUluZm8udGhyZWVEU2VjdXJlQXV0aGVudGljYXRpb25JZCBJRCBvZiB0aGUgM0QgU2VjdXJlIGF1dGhlbnRpY2F0aW9uIHBlcmZvcm1lZCBmb3IgdGhpcyB0cmFuc2FjdGlvbi4gRG8gbm90IHByb3ZpZGUgdGhpcyBmaWVsZCBhcyBhIHRyYW5zYWN0aW9uIHNhbGUgcGFyYW1ldGVyIGlmIHlvdSBhcmUgdXNpbmcgdGhlIHJldHVybmVkIHBheW1lbnQgbWV0aG9kIG5vbmNlIGZyb20gdGhlIHBheWxvYWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGhyZWVEU2VjdXJlSW5mby50aHJlZURTZWN1cmVTZXJ2ZXJUcmFuc2FjdGlvbklkIFRyYW5zYWN0aW9uIGlkZW50aWZpZXIgcHJvdmlkZWQgYnkgdGhlIGlzc3VpbmcgYmFuayB3aG8gcmVjaWV2ZWQgdGhlIDNEIFNlY3VyZSBldmVudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aHJlZURTZWN1cmVJbmZvLnRocmVlRFNlY3VyZVZlcnNpb24gVGhlIHZlcnNpb24gb2YgM0QgU2VjdXJlIGF1dGhlbnRpY2F0aW9uIHVzZWQgZm9yIHRoZSB0cmFuc2FjdGlvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aHJlZURTZWN1cmVJbmZvLnhpZCBUcmFuc2FjdGlvbiBpZGVudGlmaWVyIHJlc3VsdGluZyBmcm9tIDNEIFNlY3VyZSBhdXRoZW50aWNhdGlvbi4gVW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgdHJhbnNhY3Rpb24gYW5kIHNvbWV0aW1lcyByZXF1aXJlZCBpbiB0aGUgYXV0aG9yaXphdGlvbiBtZXNzYWdlLiBUaGlzIGlzIGEgYmFzZTY0LWVuY29kZWQgdmFsdWUuIFRoaXMgZmllbGQgd2lsbCBubyBsb25nZXIgYmUgdXNlZCBpbiAzRCBTZWN1cmUgMiBhdXRoZW50aWNhdGlvbnMgZm9yIFZpc2EgYW5kIE1hc3RlcmNhcmQsIGhvd2V2ZXIgaXQgd2lsbCBiZSBzdXBwb3J0ZWQgYnkgQW1lcmljYW4gRXhwcmVzcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aHJlZURTZWN1cmVJbmZvLmxvb2t1cC50cmFuc1N0YXR1cyBFcnJvciBjb2RlIHJldHVybmVkIGZyb20gdGhlIDNEIFNlY3VyZSBNUEkgcHJvdmlkZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGhyZWVEU2VjdXJlSW5mby5sb29rdXAudHJhbnNTdGF0dXNSZWFzb24gRGVzY3JpcHRpb24gY29ycmVsYXRpbmcgdG8gdGhlIHRyYW5zU3RhdHVzIGVycm9yIGNvZGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGhyZWVEU2VjdXJlSW5mby5hdXRoZW50aWNhdGlvbi50cmFuc1N0YXR1cyBFcnJvciBjb2RlIHJldHVybmVkIGZyb20gdGhlIDNEIFNlY3VyZSBNUEkgcHJvdmlkZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGhyZWVEU2VjdXJlSW5mby5hdXRoZW50aWNhdGlvbi50cmFuc1N0YXR1c1JlYXNvbiBEZXNjcmlwdGlvbiBjb3JyZWxhdGluZyB0byB0aGUgdHJhbnNTdGF0dXMgZXJyb3IgY29kZS5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSByYXdDYXJkaW5hbFNES1ZlcmlmaWNhdGlvbkRhdGEgVGhlIHJlc3BvbnNlIGJhY2sgZnJvbSB0aGUgQ2FyZGluYWwgU0RLIGFmdGVyIHZlcmlmaWNhdGlvbiBoYXMgY29tcGxldGVkLiBTZWUgW0NhcmRpbmFsJ3MgRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9jYXJkaW5hbGRvY3MuYXRsYXNzaWFuLm5ldC93aWtpL3NwYWNlcy9DQy9wYWdlcy85ODMxNS9SZXNwb25zZStPYmplY3RzKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4gSWYgdGhlIGN1c3RvbWVyIHdhcyBub3QgcmVxdWlyZWQgdG8gZG8gYSAzRCBTZWN1cmUgY2hhbGxlbmdlLCB0aGlzIG9iamVjdCB3aWxsIG5vdCBiZSBhdmFpbGFibGUuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7c3RyaW5nfSBUaHJlZURTZWN1cmV+cHJlcGFyZUxvb2t1cFBheWxvYWQgVGhlIGNsaWVudCBkYXRhIHRvIHBhc3Mgb24gd2hlbiBkb2luZyBhIHNlcnZlciBzaWRlIGxvb2t1cCBjYWxsLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gVGhyZWVEU2VjdXJlfnZlcmlmaWNhdGlvbkRhdGFcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcmVxdWlyZXNVc2VyQXV0aGVudGljYXRpb24gV2hlbiBgdHJ1ZWAsIHRoZSB1c2VyIHdpbGwgYmUgcHJlc2VudGVkIHdpdGggYSAzRCBTZWN1cmUgY2hhbGxlbmdlIHdoZW4gY2FsbGluZyBgbmV4dGAgaW4gdGhlIHtAbGluayBUaHJlZURTZWN1cmUjZXZlbnQ6bG9va3VwLWNvbXBsZXRlfGBsb29rdXAtY29tcGxldGVgIGV2ZW50fS5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSB0aHJlZURTZWN1cmVJbmZvIENvbnRhaW5zIGxpYWJpbGl0eSBzaGlmdCBkZXRhaWxzLlxuICogQHByb3BlcnR5IHtib29sZWFufSB0aHJlZURTZWN1cmVJbmZvLmxpYWJpbGl0eVNoaWZ0UG9zc2libGUgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNhcmQgd2FzIGVsaWdpYmxlIGZvciAzRCBTZWN1cmUuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHRocmVlRFNlY3VyZUluZm8ubGlhYmlsaXR5U2hpZnRlZCBJbmRpY2F0ZXMgd2hldGhlciB0aGUgbGlhYmlsaXR5IGZvciBmcmF1ZCBoYXMgYmVlbiBzaGlmdGVkIGF3YXkgZnJvbSB0aGUgbWVyY2hhbnQuXG4gKiBAcHJvcGVydHkge29iamVjdH0gcGF5bWVudE1ldGhvZCBBIHtAbGluayBUaHJlZURTZWN1cmV+dmVyaWZ5UGF5bG9hZHx2ZXJpZnlQYXlsb2FkfSBvYmplY3QuXG4gKiBAcHJvcGVydHkge29iamVjdH0gbG9va3VwIERldGFpbHMgYWJvdXQgdGhlIDNEIFNlY3VyZSBsb29rdXAuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbG9va3VwLnRocmVlRFNlY3VyZVZlcnNpb24gVGhlIHZlcnNpb24gb2YgM0QgU2VjdXJlIHRoYXQgd2lsbCBiZSB1c2VkIGZvciB0aGUgM0QgU2VjdXJlIGNoYWxsZW5nZS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFRocmVlRFNlY3VyZX5iaWxsaW5nQWRkcmVzc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IFtnaXZlbk5hbWVdIFRoZSBmaXJzdCBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgYmlsbGluZyBhZGRyZXNzLiAobWF4aW11bSBsZW5ndGggNTAsIEFTQ0lJIGNoYXJhY3RlcnMpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3N1cm5hbWVdIFRoZSBsYXN0IG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBiaWxsaW5nIGFkZHJlc3MuIChtYXhpbXVtIGxlbmd0aCA1MCwgQVNDSUkgY2hhcmFjdGVycylcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGhvbmVOdW1iZXJdIFRoZSBwaG9uZSBudW1iZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBiaWxsaW5nIGFkZHJlc3MuIE9ubHkgbnVtYmVyczsgcmVtb3ZlIGRhc2hlcywgcGFyZW50aGVzaXMgYW5kIG90aGVyIGNoYXJhY3RlcnMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3N0cmVldEFkZHJlc3NdIExpbmUgMSBvZiB0aGUgYmlsbGluZyBhZGRyZXNzIChlZy4gbnVtYmVyLCBzdHJlZXQsIGV0YykuIChtYXhpbXVtIGxlbmd0aCA1MClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZXh0ZW5kZWRBZGRyZXNzXSBMaW5lIDIgb2YgdGhlIGJpbGxpbmcgYWRkcmVzcyAoZWcuIHN1aXRlLCBhcHQgIywgZXRjLikuIChtYXhpbXVtIGxlbmd0aCA1MClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbGluZTNdIExpbmUgMyBvZiB0aGUgYmlsbGluZyBhZGRyZXNzIGlmIG5lZWRlZCAoZWcuIHN1aXRlLCBhcHQgIywgZXRjKS4gKG1heGltdW0gbGVuZ3RoIDUwKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtsb2NhbGl0eV0gVGhlIGxvY2FsaXR5IChjaXR5KSBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgYmlsbGluZyBhZGRyZXNzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtyZWdpb25dIFRoaXMgZmllbGQgZXhwZWN0cyBhbiBJU08zMTY2LTIgc3ViZGl2aXNpb24gY29kZS4gVGhlIHN1YmRpdmlzaW9uIGNvZGUgaXMgd2hhdCBmb2xsb3dzIHRoZSBoeXBoZW4gc2VwYXJhdG9yIGluIHRoZSBmdWxsIElTTyAzMTY2LTIgY29kZS4gRm9yIGV4YW1wbGUsIHRoZSBzdGF0ZSBvZiBPaGlvIGluIHRoZSBVbml0ZWQgU3RhdGVzIHdlIGV4cGVjdCBcIk9IXCIgYXMgb3Bwb3NlZCB0byB0aGUgZnVsbCBJU08gMzE2Ni0yIGNvZGUgXCJVUy1PSFwiLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwb3N0YWxDb2RlXSBUaGUgemlwIGNvZGUgb3IgZXF1aXZhbGVudCBmb3IgY291bnRyaWVzIHRoYXQgaGF2ZSB0aGVtLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb3VudHJ5Q29kZUFscGhhMl0gVGhlIDIgY2hhcmFjdGVyIGNvdW50cnkgY29kZS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFRocmVlRFNlY3VyZX5hZGRpdGlvbmFsSW5mb3JtYXRpb25cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbd29ya1Bob25lTnVtYmVyXSBUaGUgd29yayBwaG9uZSBudW1iZXIgdXNlZCBmb3IgdmVyaWZpY2F0aW9uLiBPbmx5IG51bWJlcnM7IHJlbW92ZSBkYXNoZXMsIHBhcmVudGhlc2lzIGFuZCBvdGhlciBjaGFyYWN0ZXJzLiAobWF4aW11bSBsZW5ndGggMjUpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NoaXBwaW5nR2l2ZW5OYW1lXSBUaGUgZmlyc3QgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIHNoaXBwaW5nIGFkZHJlc3MuIChtYXhpbXVtIGxlbmd0aCA1MCwgQVNDSUkgY2hhcmFjdGVycylcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2hpcHBpbmdTdXJuYW1lXSBUaGUgbGFzdCBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2hpcHBpbmcgYWRkcmVzcy4gKG1heGltdW0gbGVuZ3RoIDUwLCBBU0NJSSBjaGFyYWN0ZXJzKVxuICogQHByb3BlcnR5IHtvYmplY3R9IFtzaGlwcGluZ0FkZHJlc3NdXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NoaXBwaW5nQWRkcmVzcy5zdHJlZXRBZGRyZXNzXSBMaW5lIDEgb2YgdGhlIHNoaXBwaW5nIGFkZHJlc3MgKGVnLiBudW1iZXIsIHN0cmVldCwgZXRjKS4gKG1heGltdW0gbGVuZ3RoIDUwKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzaGlwcGluZ0FkZHJlc3MuZXh0ZW5kZWRBZGRyZXNzXSBMaW5lIDIgb2YgdGhlIHNoaXBwaW5nIGFkZHJlc3MgKGVnLiBzdWl0ZSwgYXB0ICMsIGV0Yy4pLiAobWF4aW11bSBsZW5ndGggNTApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NoaXBwaW5nQWRkcmVzcy5saW5lM10gTGluZSAzIG9mIHRoZSBzaGlwcGluZyBhZGRyZXNzIGlmIG5lZWRlZCAoZWcuIHN1aXRlLCBhcHQgIywgZXRjKS4gKG1heGltdW0gbGVuZ3RoIDUwKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzaGlwcGluZ0FkZHJlc3MubG9jYWxpdHldIFRoZSBsb2NhbGl0eSAoY2l0eSkgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIHNoaXBwaW5nIGFkZHJlc3MuIChtYXhpbXVtIGxlbmd0aCA1MClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2hpcHBpbmdBZGRyZXNzLnJlZ2lvbl0gVGhpcyBmaWVsZCBleHBlY3RzIGFuIElTTzMxNjYtMiBzdWJkaXZpc2lvbiBjb2RlLiBUaGUgc3ViZGl2aXNpb24gY29kZSBpcyB3aGF0IGZvbGxvd3MgdGhlIGh5cGhlbiBzZXBhcmF0b3IgaW4gdGhlIGZ1bGwgSVNPIDMxNjYtMiBjb2RlLiBGb3IgZXhhbXBsZSwgdGhlIHN0YXRlIG9mIE9oaW8gaW4gdGhlIFVuaXRlZCBTdGF0ZXMgd2UgZXhwZWN0IFwiT0hcIiBhcyBvcHBvc2VkIHRvIHRoZSBmdWxsIElTTyAzMTY2LTIgY29kZSBcIlVTLU9IXCIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NoaXBwaW5nQWRkcmVzcy5wb3N0YWxDb2RlXSBUaGUgemlwIGNvZGUgb3IgZXF1aXZhbGVudCBmb3IgY291bnRyaWVzIHRoYXQgaGF2ZSB0aGVtLiAobWF4aW11bSBsZW5ndGggMTApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NoaXBwaW5nQWRkcmVzcy5jb3VudHJ5Q29kZUFscGhhMl0gVGhlIDIgY2hhcmFjdGVyIGNvdW50cnkgY29kZS4gKG1heGltdW0gbGVuZ3RoIDIpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NoaXBwaW5nUGhvbmVdIFRoZSBwaG9uZSBudW1iZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBzaGlwcGluZyBhZGRyZXNzLiBPbmx5IG51bWJlcnM7IHJlbW92ZSBkYXNoZXMsIHBhcmVudGhlc2lzIGFuZCBvdGhlciBjaGFyYWN0ZXJzLiAobWF4aW11bSBsZW5ndGggMjApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NoaXBwaW5nTWV0aG9kXSBUaGUgMi1kaWdpdCBzdHJpbmcgaW5kaWNhdGluZyB0aGUgbmFtZSBvZiB0aGUgc2hpcHBpbmcgbWV0aG9kIGNob3NlbiBmb3IgdGhlIHRyYW5zYWN0aW9uLiAobWF4aW11bSBsZW5ndGggNTApIFBvc3NpYmxlIHZhbHVlczpcbiAqIC0gYDAxYCBTYW1lIERheVxuICogLSBgMDJgIE92ZXJuaWdodCAvIEV4cGVkaXRlZFxuICogLSBgMDNgIFByaW9yaXR5ICgyLTMgRGF5cylcbiAqIC0gYDA0YCBHcm91bmRcbiAqIC0gYDA1YCBFbGVjdHJvbmljIERlbGl2ZXJ5XG4gKiAtIGAwNmAgU2hpcCB0byBTdG9yZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzaGlwcGluZ01ldGhvZEluZGljYXRvcl0gVGhlIDItZGlnaXQgc3RyaW5nIGluZGljYXRpbmcgdGhlIHNoaXBwaW5nIG1ldGhvZCBjaG9zZW4gZm9yIHRoZSB0cmFuc2FjdGlvbiBQb3NzaWJsZSB2YWx1ZXMuXG4gKiAtIGAwMWAgU2hpcCB0byBjYXJkaG9sZGVyIGJpbGxpbmcgYWRkcmVzc1xuICogLSBgMDJgIFNoaXAgdG8gYW5vdGhlciB2ZXJpZmllZCBhZGRyZXNzIG9uIGZpbGUgd2l0aCBtZXJjaGFudFxuICogLSBgMDNgIFNoaXAgdG8gYWRkcmVzcyB0aGF0IGlzIGRpZmZlcmVudCBmcm9tIGJpbGxpbmcgYWRkcmVzc1xuICogLSBgMDRgIFNoaXAgdG8gc3RvcmUgKHN0b3JlIGFkZHJlc3Mgc2hvdWxkIGJlIHBvcHVsYXRlZCBvbiByZXF1ZXN0KVxuICogLSBgMDVgIERpZ2l0YWwgZ29vZHNcbiAqIC0gYDA2YCBUcmF2ZWwgYW5kIGV2ZW50IHRpY2tldHMsIG5vdCBzaGlwcGVkXG4gKiAtIGAwN2AgT3RoZXJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcHJvZHVjdENvZGVdIFRoZSAzLWxldHRlciBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBtZXJjaGFudCBwcm9kdWN0IGNvZGUuIFBvc3NpYmxlIHZhbHVlczpcbiAqIC0gYEFJUmAgQWlybGluZVxuICogLSBgR0VOYCBHZW5lcmFsIFJldGFpbFxuICogLSBgRElHYCBEaWdpdGFsIEdvb2RzXG4gKiAtIGBTVkNgIFNlcnZpY2VzXG4gKiAtIGBSRVNgIFJlc3RhdXJhbnRcbiAqIC0gYFRSQWAgVHJhdmVsXG4gKiAtIGBEU1BgIENhc2ggRGlzcGVuc2luZ1xuICogLSBgUkVOYCBDYXIgUmVudGFsXG4gKiAtIGBHQVNgIEZ1ZWxcbiAqIC0gYExVWGAgTHV4dXJ5IFJldGFpbFxuICogLSBgQUNDYCBBY2NvbW1vZGF0aW9uIFJldGFpbFxuICogLSBgVEJEYCBPdGhlclxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtkZWxpdmVyeVRpbWVmcmFtZV0gVGhlIDItZGlnaXQgbnVtYmVyIGluZGljYXRpbmcgdGhlIGRlbGl2ZXJ5IHRpbWUgZnJhbWUuIFBvc3NpYmxlIHZhbHVlczpcbiAqIC0gYDAxYCBFbGVjdHJvbmljIGRlbGl2ZXJ5XG4gKiAtIGAwMmAgU2FtZSBkYXkgc2hpcHBpbmdcbiAqIC0gYDAzYCBPdmVybmlnaHQgc2hpcHBpbmdcbiAqIC0gYDA0YCBUd28gb3IgbW9yZSBkYXkgc2hpcHBpbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZGVsaXZlcnlFbWFpbF0gRm9yIGVsZWN0cm9uaWMgZGVsaXZlcnksIGVtYWlsIGFkZHJlc3MgdG8gd2hpY2ggdGhlIG1lcmNoYW5kaXNlIHdhcyBkZWxpdmVyZWQuIChtYXhpbXVtIGxlbmd0aCAyNTQpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3Jlb3JkZXJpbmRpY2F0b3JdIFRoZSAyLWRpZ2l0IG51bWJlciBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGNhcmRob2xkZXIgaXMgcmVvcmRlcmluZyBwcmV2aW91c2x5IHB1cmNoYXNlZCBtZXJjaGFuZGlzZS4gcG9zc2libGUgdmFsdWVzOlxuICogLSBgMDFgIEZpcnN0IHRpbWUgb3JkZXJlZFxuICogLSBgMDJgIFJlb3JkZXJlZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwcmVvcmRlckluZGljYXRvcl0gVGhlIDItZGlnaXQgbnVtYmVyIGluZGljYXRpbmcgd2hldGhlciBjYXJkaG9sZGVyIGlzIHBsYWNpbmcgYW4gb3JkZXIgd2l0aCBhIGZ1dHVyZSBhdmFpbGFiaWxpdHkgb3IgcmVsZWFzZSBkYXRlLiBwb3NzaWJsZSB2YWx1ZXM6XG4gKiAtIGAwMWAgTWVyY2hhbmRpc2UgYXZhaWxhYmxlXG4gKiAtIGAwMmAgRnV0dXJlIGF2YWlsYWJpbGl0eVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwcmVvcmRlckRhdGVdIFRoZSA4LWRpZ2l0IG51bWJlciAoZm9ybWF0OiBZWVlZTU1ERCkgaW5kaWNhdGluZyBleHBlY3RlZCBkYXRlIHRoYXQgYSBwcmUtb3JkZXJlZCBwdXJjaGFzZSB3aWxsIGJlIGF2YWlsYWJsZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZ2lmdENhcmRBbW91bnRdIFRoZSBwdXJjaGFzZSBhbW91bnQgdG90YWwgZm9yIHByZXBhaWQgZ2lmdCBjYXJkcyBpbiBtYWpvciB1bml0cy4gKG1heGltdW0gbGVuZ3RoIDE1KVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtnaWZ0Q2FyZEN1cnJlbmN5Q29kZV0gSVNPIDQyMTcgY3VycmVuY3kgY29kZSBmb3IgdGhlIGdpZnQgY2FyZCBwdXJjaGFzZWQuIChtYXhpbXVtIGxlbmd0aCAzKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtnaWZ0Q2FyZENvdW50XSBUb3RhbCBjb3VudCBvZiBpbmRpdmlkdWFsIHByZXBhaWQgZ2lmdCBjYXJkcyBwdXJjaGFzZWQuIChtYXhpbXVtIGxlbmd0aCAyKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFthY2NvdW50QWdlSW5kaWNhdG9yXSBUaGUgMi1kaWdpdCB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIGxlbmd0aCBvZiB0aW1lIGNhcmRob2xkZXIgaGFzIGhhZCBhY2NvdW50LiBQb3NzaWJsZSB2YWx1ZXM6XG4gKiAtIGAwMWAgTm8gQWNjb3VudFxuICogLSBgMDJgIENyZWF0ZWQgZHVyaW5nIHRyYW5zYWN0aW9uXG4gKiAtIGAwM2AgTGVzcyB0aGFuIDMwIGRheXNcbiAqIC0gYDA0YCAzMC02MCBkYXlzXG4gKiAtIGAwNWAgTW9yZSB0aGFuIDYwIGRheXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWNjb3VudENyZWF0ZURhdGVdIFRoZSA4LWRpZ2l0IG51bWJlciAoZm9ybWF0OiBZWVlZTU1ERCkgaW5kaWNhdGluZyB0aGUgZGF0ZSB0aGUgY2FyZGhvbGRlciBvcGVuZWQgdGhlIGFjY291bnQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2FjY291bnRDaGFuZ2VJbmRpY2F0b3JdIFRoZSAyLWRpZ2l0IHZhbHVlIHJlcHJlc2VudGluZyB0aGUgbGVuZ3RoIG9mIHRpbWUgc2luY2UgdGhlIGxhc3QgY2hhbmdlIHRvIHRoZSBjYXJkaG9sZGVyIGFjY291bnQuIFRoaXMgaW5jbHVkZXMgc2hpcHBpbmcgYWRkcmVzcywgbmV3IHBheW1lbnQgYWNjb3VudCBvciBuZXcgdXNlciBhZGRlZC4gUG9zc2libGUgdmFsdWVzOlxuICogLSBgMDFgIENoYW5nZWQgZHVyaW5nIHRyYW5zYWN0aW9uXG4gKiAtIGAwMmAgTGVzcyB0aGFuIDMwIGRheXNcbiAqIC0gYDAzYCAzMC02MCBkYXlzXG4gKiAtIGAwNGAgTW9yZSB0aGFuIDYwIGRheXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWNjb3VudENoYW5nZURhdGVdIFRoZSA4LWRpZ2l0IG51bWJlciAoZm9ybWF0OiBZWVlZTU1ERCkgaW5kaWNhdGluZyB0aGUgZGF0ZSB0aGUgY2FyZGhvbGRlcidzIGFjY291bnQgd2FzIGxhc3QgY2hhbmdlZC4gVGhpcyBpbmNsdWRlcyBjaGFuZ2VzIHRvIHRoZSBiaWxsaW5nIG9yIHNoaXBwaW5nIGFkZHJlc3MsIG5ldyBwYXltZW50IGFjY291bnRzIG9yIG5ldyB1c2VycyBhZGRlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWNjb3VudFB3ZENoYW5nZUluZGljYXRvcl0gVGhlIDItZGlnaXQgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBsZW5ndGggb2YgdGltZSBzaW5jZSB0aGUgY2FyZGhvbGRlciBjaGFuZ2VkIG9yIHJlc2V0IHRoZSBwYXNzd29yZCBvbiB0aGUgYWNjb3VudC4gUG9zc2libGUgdmFsdWVzOlxuICogLSBgMDFgIE5vIGNoYW5nZVxuICogLSBgMDJgIENoYW5nZWQgZHVyaW5nIHRyYW5zYWN0aW9uXG4gKiAtIGAwM2AgTGVzcyB0aGFuIDMwIGRheXNcbiAqIC0gYDA0YCAzMC02MCBkYXlzXG4gKiAtIGAwNWAgTW9yZSB0aGFuIDYwIGRheXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWNjb3VudFB3ZENoYW5nZURhdGVdIFRoZSA4LWRpZ2l0IG51bWJlciAoZm9ybWF0OiBZWVlZTU1ERCkgaW5kaWNhdGluZyB0aGUgZGF0ZSB0aGUgY2FyZGhvbGRlciBsYXN0IGNoYW5nZWQgb3IgcmVzZXQgcGFzc3dvcmQgb24gYWNjb3VudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2hpcHBpbmdBZGRyZXNzVXNhZ2VJbmRpY2F0b3JdIFRoZSAyLWRpZ2l0IHZhbHVlIGluZGljYXRpbmcgd2hlbiB0aGUgc2hpcHBpbmcgYWRkcmVzcyB1c2VkIGZvciB0cmFuc2FjdGlvbiB3YXMgZmlyc3QgdXNlZC4gUG9zc2libGUgdmFsdWVzOlxuICogLSBgMDFgIFRoaXMgdHJhbnNhY3Rpb25cbiAqIC0gYDAyYCBMZXNzIHRoYW4gMzAgZGF5c1xuICogLSBgMDNgIDMwLTYwIGRheXNcbiAqIC0gYDA0YCBNb3JlIHRoYW4gNjAgZGF5c1xuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzaGlwcGluZ0FkZHJlc3NVc2FnZURhdGVdIFRoZSA4LWRpZ2l0IG51bWJlciAoZm9ybWF0OiBZWVlZTU1ERCkgaW5kaWNhdGluZyB0aGUgZGF0ZSB3aGVuIHRoZSBzaGlwcGluZyBhZGRyZXNzIHVzZWQgZm9yIHRoaXMgdHJhbnNhY3Rpb24gd2FzIGZpcnN0IHVzZWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3RyYW5zYWN0aW9uQ291bnREYXldIE51bWJlciBvZiB0cmFuc2FjdGlvbnMgKHN1Y2Nlc3NmdWwgb3IgYWJhbmRvbmVkKSBmb3IgdGhpcyBjYXJkaG9sZGVyIGFjY291bnQgd2l0aGluIHRoZSBsYXN0IDI0IGhvdXJzLiAobWF4aW11bSBsZW5ndGggMylcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHJhbnNhY3Rpb25Db3VudFllYXJdIE51bWJlciBvZiB0cmFuc2FjdGlvbnMgKHN1Y2Nlc3NmdWwgb3IgYWJhbmRvbmVkKSBmb3IgdGhpcyBjYXJkaG9sZGVyIGFjY291bnQgd2l0aGluIHRoZSBsYXN0IHllYXIuIChtYXhpbXVtIGxlbmd0aCAzKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFthZGRDYXJkQXR0ZW1wdHNdIE51bWJlciBvZiBhZGQgY2FyZCBhdHRlbXB0cyBpbiB0aGUgbGFzdCAyNCBob3Vycy4gKG1heGltdW0gbGVuZ3RoIDMpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2FjY291bnRQdXJjaGFzZXNdIE51bWJlciBvZiBwdXJjaGFzZXMgd2l0aCB0aGlzIGNhcmRob2xkZXIgYWNjb3VudCBkdXJpbmcgdGhlIHByZXZpb3VzIHNpeCBtb250aHMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2ZyYXVkQWN0aXZpdHldIFRoZSAyLWRpZ2l0IHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0aGUgbWVyY2hhbnQgZXhwZXJpZW5jZWQgc3VzcGljaW91cyBhY3Rpdml0eSAoaW5jbHVkaW5nIHByZXZpb3VzIGZyYXVkKSBvbiB0aGUgYWNjb3VudC4gUG9zc2libGUgdmFsdWVzOlxuICogLSBgMDFgIE5vIHN1c3BpY2lvdXMgYWN0aXZpdHlcbiAqIC0gYDAyYCBTdXNwaWNpb3VzIGFjdGl2aXR5IG9ic2VydmVkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NoaXBwaW5nTmFtZUluZGljYXRvcl0gVGhlIDItZGlnaXQgdmFsdWUgaW5kaWNhdGluZyBpZiB0aGUgY2FyZGhvbGRlciBuYW1lIG9uIHRoZSBhY2NvdW50IGlzIGlkZW50aWNhbCB0byB0aGUgc2hpcHBpbmcgbmFtZSB1c2VkIGZvciB0aGUgdHJhbnNhY3Rpb24uIFBvc3NpYmxlIHZhbHVlczpcbiAqIC0gYDAxYCBBY2NvdW50IGFuZCBzaGlwcGluZyBuYW1lIGlkZW50aWNhbFxuICogLSBgMDJgIEFjY291bnQgYW5kIHNoaXBwaW5nIG5hbWUgZGlmZmVyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3BheW1lbnRBY2NvdW50SW5kaWNhdG9yXSBUaGUgMi1kaWdpdCB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBsZW5ndGggb2YgdGltZSB0aGF0IHRoZSBwYXltZW50IGFjY291bnQgd2FzIGVucm9sbGVkIGluIHRoZSBtZXJjaGFudCBhY2NvdW50LiBQb3NzaWJsZSB2YWx1ZXM6XG4gKiAtIGAwMWAgTm8gYWNjb3VudCAoZ3Vlc3QgY2hlY2tvdXQpXG4gKiAtIGAwMmAgRHVyaW5nIHRoZSB0cmFuc2FjdGlvblxuICogLSBgMDNgIExlc3MgdGhhbiAzMCBkYXlzXG4gKiAtIGAwNGAgMzAtNjAgZGF5c1xuICogLSBgMDVgIE1vcmUgdGhhbiA2MCBkYXlzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3BheW1lbnRBY2NvdW50QWdlXSBUaGUgOC1kaWdpdCBudW1iZXIgKGZvcm1hdDogWVlZWU1NREQpIGluZGljYXRpbmcgdGhlIGRhdGUgdGhlIHBheW1lbnQgYWNjb3VudCB3YXMgYWRkZWQgdG8gdGhlIGNhcmRob2xkZXIgYWNjb3VudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWNzV2luZG93U2l6ZV0gVGhlIDItZGlnaXQgbnVtYmVyIHRvIHNldCB0aGUgY2hhbGxlbmdlIHdpbmRvdyBzaXplIHRvIGRpc3BsYXkgdG8gdGhlIGVuZCBjYXJkaG9sZGVyLiAgVGhlIEFDUyB3aWxsIHJlcGx5IHdpdGggY29udGVudCB0aGF0IGlzIGZvcm1hdHRlZCBhcHByb3ByaWF0ZWx5IHRvIHRoaXMgd2luZG93IHNpemUgdG8gYWxsb3cgZm9yIHRoZSBiZXN0IHVzZXIgZXhwZXJpZW5jZS4gIFRoZSBzaXplcyBhcmUgd2lkdGggeCBoZWlnaHQgaW4gcGl4ZWxzIG9mIHRoZSB3aW5kb3cgZGlzcGxheWVkIGluIHRoZSBjYXJkaG9sZGVyIGJyb3dzZXIgd2luZG93LiBQb3NzaWJsZSB2YWx1ZXM6XG4gKiAtIGAwMWAgMjUweDQwMFxuICogLSBgMDJgIDM5MHg0MDBcbiAqIC0gYDAzYCA1MDB4NjAwXG4gKiAtIGAwNGAgNjAweDQwMFxuICogLSBgMDVgIEZ1bGwgcGFnZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzZGtNYXhUaW1lb3V0XSBUaGUgMi1kaWdpdCBudW1iZXIgb2YgbWludXRlcyAobWluaW11bSAwNSkgdG8gc2V0IHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIGZvciBhbGwgM0RTIDIuMCBtZXNzYWdlcyB0byBiZSBjb21tdW5pY2F0ZWQgYmV0d2VlbiBhbGwgY29tcG9uZW50cy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWRkcmVzc01hdGNoXSBUaGUgMS1jaGFyYWN0ZXIgdmFsdWUgKFkvTikgaW5kaWNhdGluZyB3aGV0aGVyIGNhcmRob2xkZXIgYmlsbGluZyBhbmQgc2hpcHBpbmcgYWRkcmVzc2VzIG1hdGNoLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFthY2NvdW50SWRdIEFkZGl0aW9uYWwgY2FyZGhvbGRlciBhY2NvdW50IGluZm9ybWF0aW9uLiAobWF4aW11bSBsZW5ndGggNjQpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2lwQWRkcmVzc10gVGhlIElQIGFkZHJlc3Mgb2YgdGhlIGNvbnN1bWVyLiBJUHY0IGFuZCBJUHY2IGFyZSBzdXBwb3J0ZWQuXG4gKiAtIG9ubHkgb25lIElQIGFkZHJlc3Mgc3VwcG9ydGVkXG4gKiAtIG9ubHkgbnVtYmVycywgbGV0dGVycywgcGVyaW9kICcuJyBjaGFycywgb3IgY29sb25zICc6JyBhcmUgYWNjZXB0YWJsZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcmRlckRlc2NyaXB0aW9uXSBCcmllZiBkZXNjcmlwdGlvbiBvZiBpdGVtcyBwdXJjaGFzZWQuIChtYXhpbXVtIGxlbmd0aCAyNTYpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3RheEFtb3VudF0gVW5mb3JtYXR0ZWQgdGF4IGFtb3VudCB3aXRob3V0IGFueSBkZWNpbWFsaXphdGlvbiAoaWUuICQxMjMuNjcgPSAxMjM2NykuIChtYXhpbXVtIGxlbmd0aCAyMClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdXNlckFnZW50XSBUaGUgZXhhY3QgY29udGVudCBvZiB0aGUgSFRUUCB1c2VyIGFnZW50IGhlYWRlci4gKG1heGltdW0gbGVuZ3RoIDUwMClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYXV0aGVudGljYXRpb25JbmRpY2F0b3JdIFRoZSAyLWRpZ2l0IG51bWJlciBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QuIFBvc3NpYmxlIHZhbHVlczpcbiAqICAtIGAwMWAgUGF5bWVudFxuICogIC0gYDAyYCBSZWN1cnJpbmcgdHJhbnNhY3Rpb25cbiAqICAtIGAwM2AgSW5zdGFsbG1lbnRcbiAqICAtIGAwNGAgQWRkIGNhcmRcbiAqICAtIGAwNWAgTWFpbnRhaW4gY2FyZFxuICogIC0gYDA2YCBDYXJkaG9sZGVyIHZlcmlmaWNhdGlvbiBhcyBwYXJ0IG9mIEVNViB0b2tlbiBJRCZWXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2luc3RhbGxtZW50XSBBbiBpbnRlZ2VyIHZhbHVlIGdyZWF0ZXIgdGhhbiAxIGluZGljYXRpbmcgdGhlIG1heGltdW0gbnVtYmVyIG9mIHBlcm1pdHRlZCBhdXRob3JpemF0aW9ucyBmb3IgaW5zdGFsbG1lbnQgcGF5bWVudHMuIChtYXhpbXVtIGxlbmd0aCAzKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwdXJjaGFzZURhdGVdIFRoZSAxNC1kaWdpdCBudW1iZXIgKGZvcm1hdDogWVlZWU1NRERISE1NU1MpIGluZGljYXRpbmcgdGhlIGRhdGUgaW4gVVRDIG9mIG9yaWdpbmFsIHB1cmNoYXNlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtyZWN1cnJpbmdFbmRdIFRoZSA4LWRpZ2l0IG51bWJlciAoZm9ybWF0OiBZWVlZTU1ERCkgaW5kaWNhdGluZyB0aGUgZGF0ZSBhZnRlciB3aGljaCBubyBmdXJ0aGVyIHJlY3VycmluZyBhdXRob3JpemF0aW9ucyBzaG91bGQgYmUgcGVyZm9ybWVkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtyZWN1cnJpbmdGcmVxdWVuY3ldIEludGVnZXIgdmFsdWUgaW5kaWNhdGluZyB0aGUgbWluaW11bSBudW1iZXIgb2YgZGF5cyBiZXR3ZWVuIHJlY3VycmluZyBhdXRob3JpemF0aW9ucy4gQSBmcmVxdWVuY3kgb2YgbW9udGhseSBpcyBpbmRpY2F0ZWQgYnkgdGhlIHZhbHVlIDI4LiBNdWx0aXBsZSBvZiAyOCBkYXlzIHdpbGwgYmUgdXNlZCB0byBpbmRpY2F0ZSBtb250aHMgKGV4LiA2IG1vbnRocyA9IDE2OCkuIChtYXhpbXVtIGxlbmd0aCAzKVxuICovXG5cbi8qKlxuICogQG5hbWUgVGhyZWVEU2VjdXJlI29uXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gd2hpY2ggeW91IGFyZSBzdWJzY3JpYmluZy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhbmRsZXIgQSBjYWxsYmFjayB0byBoYW5kbGUgdGhlIGV2ZW50LlxuICogQGRlc2NyaXB0aW9uIFN1YnNjcmliZXMgYSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGEgbmFtZWQgZXZlbnQuIFRoZSBmb2xsb3dpbmcgZXZlbnRzIGFyZSBhdmFpbGFibGU6XG4gKiAgICoge0BsaW5rIFRocmVlRFNlY3VyZSNldmVudDpsb29rdXAtY29tcGxldGV8bG9va3VwLWNvbXBsZXRlfVxuICogICAqIHtAbGluayBUaHJlZURTZWN1cmUjZXZlbnQ6Y3VzdG9tZXItY2FuY2VsZWR8Y3VzdG9tZXItY2FuY2VsZWR9XG4gKiAgICoge0BsaW5rIFRocmVlRFNlY3VyZSNldmVudDphdXRoZW50aWNhdGlvbi1pZnJhbWUtYXZhaWxhYmxlfGF1dGhlbnRpY2F0aW9uLWlmcmFtZS1hdmFpbGFibGV9XG4gKiAgICoge0BsaW5rIFRocmVlRFNlY3VyZSNldmVudDphdXRoZW50aWNhdGlvbi1tb2RhbC1yZW5kZXJ8YXV0aGVudGljYXRpb24tbW9kYWwtcmVuZGVyfVxuICogICAqIHtAbGluayBUaHJlZURTZWN1cmUjZXZlbnQ6YXV0aGVudGljYXRpb24tbW9kYWwtY2xvc2V8YXV0aGVudGljYXRpb24tbW9kYWwtY2xvc2V9XG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+TGlzdGVuaW5nIHRvIGEgM0QgU2VjdXJlIGV2ZW50PC9jYXB0aW9uPlxuICogYnJhaW50cmVlLnRocmVlRFNlY3VyZS5jcmVhdGUoeyAuLi4gfSwgZnVuY3Rpb24gKGNyZWF0ZUVyciwgdGhyZWVEU2VjdXJlSW5zdGFuY2UpIHtcbiAqICAgdGhyZWVEU2VjdXJlSW5zdGFuY2Uub24oJ2xvb2t1cC1jb21wbGV0ZScsIGZ1bmN0aW9uIChkYXRhLCBuZXh0KSB7XG4gKiAgICAgY29uc29sZS5sb2coJ2RhdGEgZnJvbSB0aGUgbG9va3VwJywgZGF0YSk7XG4gKiAgICAgbmV4dCgpO1xuICogICB9KTtcbiAqICAgdGhyZWVEU2VjdXJlSW5zdGFuY2Uub24oJ2N1c3RvbWVyLWNhbmNlbGVkJywgZnVuY3Rpb24gKCkge1xuICogICAgIGNvbnNvbGUubG9nKCdsb2cgdGhhdCB0aGUgY3VzdG9tZXIgY2FuY2VsZWQnKTtcbiAqICAgfSk7XG4gKiB9KTtcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cbi8qKlxuICogQG5hbWUgVGhyZWVEU2VjdXJlI29mZlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIHdoaWNoIHlvdSBhcmUgdW5zdWJzY3JpYmluZy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhbmRsZXIgVGhlIGNhbGxiYWNrIGZvciB0aGUgZXZlbnQgeW91IGFyZSB1bnN1YnNjcmliaW5nIGZyb20uXG4gKiBAZGVzY3JpcHRpb24gVW5zdWJzY3JpYmVzIHRoZSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGEgbmFtZWQgZXZlbnQuXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+U3Vic2NyaWJpbmcgYW5kIHRoZW4gdW5zdWJzY3JpYmluZyBmcm9tIGEgM0QgU2VjdXJlIGVsZCBldmVudDwvY2FwdGlvbj5cbiAqIGJyYWludHJlZS50aHJlZURTZWN1cmUuY3JlYXRlKHsgLi4uIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIHRocmVlRFNlY3VyZUluc3RhbmNlKSB7XG4gKiAgIHZhciBsb29rdXBDYWxsYmFjayA9IGZ1bmN0aW9uIChkYXRhLCBuZXh0KSB7XG4gKiAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gKiAgICAgbmV4dCgpO1xuICogICB9O1xuICogICB2YXIgY2FuY2VsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gKiAgICAgLy8gbG9nIHRoZSBjYW5jZWxhdGlvblxuICogICAgIC8vIG9yIHVwZGF0ZSBVSVxuICogICB9O1xuICpcbiAqICAgdGhyZWVEU2VjdXJlSW5zdGFuY2Uub24oJ2xvb2t1cC1jb21wbGV0ZScsIGxvb2t1cENhbGxiYWNrKTtcbiAqICAgdGhyZWVEU2VjdXJlSW5zdGFuY2Uub24oJ2N1c3RvbWVyLWNhbmNlbGVkJywgY2FuY2VsQ2FsbGJhY2spO1xuICpcbiAqICAgLy8gbGF0ZXIgb25cbiAqICAgdGhyZWVEU2VjdXJlSW5zdGFuY2Uub2ZmKCdsb29rdXAtY29tcGxldGUnLCBsb29rdXBDYWxsYmFjayk7XG4gKiAgIHRocmVlRFNlY3VyZUluc3RhbmNlLm9mZignY3VzdG9tZXItY2FuY2VsZWQnLCBjYW5jZWxDYWxsYmFjayk7XG4gKiB9KTtcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cbi8qKlxuICogVGhpcyBldmVudCBpcyBlbWl0dGVkIHdoZW4gdGhlIGAyLWlubGluZS1pZnJhbWVgIHZlcnNpb24gaXMgc3BlY2lmaWVkIHdoZW4gY3JlYXRpbmcgdGhlIDNEIFNlY3VyZSBpbnN0YW5jZSBhbmQgdGhlIGF1dGhlbnRpY2F0aW9uIGlmcmFtZSBiZWNvbWVzIGF2YWlsYWJsZS5cbiAqIEBldmVudCBUaHJlZURTZWN1cmUjYXV0aGVudGljYXRpb24taWZyYW1lLWF2YWlsYWJsZVxuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPkxpc3RlbmluZyBmb3IgdGhlIGF1dGhlbnRpY2F0aW9uIGlmcmFtZSB0byBiZSBhdmFpbGFibGU8L2NhcHRpb24+XG4gKiAgIHRocmVlRFNlY3VyZUluc3RhbmNlLm9uKCdhdXRoZW50aWNhdGlvbi1pZnJhbWUtYXZhaWxhYmxlJywgZnVuY3Rpb24gKGV2ZW50LCBuZXh0KSB7XG4gKiAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChldmVudC5lbGVtZW50KTsgLy8gYWRkIGlmcmFtZSBlbGVtZW50IHRvIHBhZ2VcbiAqXG4gKiAgICAgbmV4dCgpOyAvLyBsZXQgdGhlIFNESyBrbm93IHRoZSBpZnJhbWUgaXMgcmVhZHlcbiAqICAgfSk7XG4gKiB9KTtcbiAqL1xuXG4vKipcbiAqIFRoaXMgZXZlbnQgaXMgZW1pdHRlZCB3aGVuIHVzaW5nIHRoZSAzRCBTZWN1cmUgMi4wIGZsb3cgYW5kIHRoZSBpbml0aWFsIGxvb2t1cCByZXF1ZXN0IGNvbXBsZXRlcy4gSWYgdGhpcyBpcyBub3QgdXNlZCwgYSBgb25Mb29rdXBDb21wbGV0ZWAgY2FsbGJhY2sgbXVzdCBiZSBwYXNzZWQgaW50byB0aGUgYHZlcmlmeUNhcmRgIG1ldGhvZC5cbiAqIEBldmVudCBUaHJlZURTZWN1cmUjbG9va3VwLWNvbXBsZXRlXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+TGlzdGVuaW5nIGZvciB3aGVuIHRoZSBsb29rdXAgcmVxdWVzdCBpcyBjb21wbGV0ZTwvY2FwdGlvbj5cbiAqIGJyYWludHJlZS50aHJlZURTZWN1cmUuY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAqICAgdmVyc2lvbjogJzInXG4gKiB9LCBmdW5jdGlvbiAoY3JlYXRlRXJyLCB0aHJlZURTZWN1cmVJbnN0YW5jZSkge1xuICogICB0aHJlZURTZWN1cmVJbnN0YW5jZS5vbignbG9va3VwLWNvbXBsZXRlJywgZnVuY3Rpb24gKGRhdGEsIG5leHQpIHtcbiAqICAgICAvLyBpbnNwZWN0IHRoZSBkYXRhXG4gKlxuICogICAgIC8vIGNhbGwgbmV4dCB3aGVuIHJlYWR5IHRvIHByb2NlZWQgd2l0aCB0aGUgY2hhbGxlbmdlXG4gKiAgICAgbmV4dCgpO1xuICogICB9KTtcbiAqIH0pO1xuICovXG5cbi8qKlxuICogVGhpcyBldmVudCBpcyBlbWl0dGVkIHdoZW4gdXNpbmcgdGhlIDNEIFNlY3VyZSAyLjAgZmxvdyBhbmQgdGhlIGN1c3RvbWVyIGNhbmNlbHMgdGhlIDNEIFNlY3VyZSBjaGFsbGVuZ2UuXG4gKiBAZXZlbnQgVGhyZWVEU2VjdXJlI2N1c3RvbWVyLWNhbmNlbGVkXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+TGlzdGVuaW5nIGZvciB3aGVuIHRoZSBjdXN0b21lciBjYW5jZWxzIHRoZSAzRCBTZWN1cmUgY2hhbGxlbmdlPC9jYXB0aW9uPlxuICogYnJhaW50cmVlLnRocmVlRFNlY3VyZS5jcmVhdGUoe1xuICogICBjbGllbnQ6IGNsaWVudEluc3RhbmNlLFxuICogICB2ZXJzaW9uOiAnMidcbiAqIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIHRocmVlRFNlY3VyZUluc3RhbmNlKSB7XG4gKiAgIHRocmVlRFNlY3VyZUluc3RhbmNlLm9uKCdjdXN0b21lci1jYW5jZWxlZCcsIGZ1bmN0aW9uICgpIHtcbiAqICAgICAvLyB0aGUgY3VzdG9tZXIgY2FuY2VsZWQgdGhlIDNEIFNlY3VyZSBjaGFsbGVuZ2VcbiAqICAgfSk7XG4gKiB9KTtcbiAqL1xuXG4vKipcbiAqIFRoaXMgZXZlbnQgaXMgZW1pdHRlZCB3aGVuIHVzaW5nIHRoZSAzRCBTZWN1cmUgMi4wIGZsb3cgYW5kIHRoZSBhdXRoZW50aWNhdGlvbiBtb2RhbCBjbG9zZXMsIGVpdGhlciBiZWNhdXNlIHRoZSBhdXRoZW50aWNhdGlvbiB3YXMgY29tcGxldGVkIG9yIGJlY2F1c2UgdGhlIGN1c3RvbWVyIGNhbmNlbGVkIHRoZSBwcm9jZXNzLlxuICogQGV2ZW50IFRocmVlRFNlY3VyZSNhdXRoZW50aWNhdGlvbi1tb2RhbC1jbG9zZVxuICogQGV4YW1wbGVcbiAqIGJyYWludHJlZS50aHJlZURTZWN1cmUuY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAqICAgdmVyc2lvbjogJzInXG4gKiB9LCBmdW5jdGlvbiAoY3JlYXRlRXJyLCB0aHJlZURTZWN1cmVJbnN0YW5jZSkge1xuICogICB0aHJlZURTZWN1cmVJbnN0YW5jZS5vbignYXV0aGVudGljYXRpb24tbW9kYWwtY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gKiAgICAgLy8gdGhlIG1vZGFsIHdhcyBjbG9zZWRcbiAqICAgfSk7XG4gKiB9KTtcbiAqL1xuXG4vKipcbiAqIFRoaXMgZXZlbnQgaXMgZW1pdHRlZCB3aGVuIHVzaW5nIHRoZSAzRCBTZWN1cmUgMi4wIGZsb3cgYW5kIHRoZSBhdXRoZW50aWNhdGlvbiBtb2RhbCBpcyByZW5kZXJlZC5cbiAqIEBldmVudCBUaHJlZURTZWN1cmUjYXV0aGVudGljYXRpb24tbW9kYWwtcmVuZGVyXG4gKiBAZXhhbXBsZVxuICogYnJhaW50cmVlLnRocmVlRFNlY3VyZS5jcmVhdGUoe1xuICogICBjbGllbnQ6IGNsaWVudEluc3RhbmNlLFxuICogICB2ZXJzaW9uOiAnMidcbiAqIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIHRocmVlRFNlY3VyZUluc3RhbmNlKSB7XG4gKiAgIHRocmVlRFNlY3VyZUluc3RhbmNlLm9uKCdhdXRoZW50aWNhdGlvbi1tb2RhbC1yZW5kZXInLCBmdW5jdGlvbiAoKSB7XG4gKiAgICAgLy8gdGhlIG1vZGFsIHdhcyByZW5kZXJlZCwgcHJlc2VudGluZyB0aGUgYXV0aGVudGljYXRpb24gZm9ybSB0byB0aGUgY3VzdG9tZXJcbiAqICAgfSk7XG4gKiB9KTtcbiAqL1xuXG4vKipcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgM0QgU2VjdXJlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi90aHJlZS1kLXNlY3VyZS5jcmVhdGUgY3JlYXRlfSBvcHRpb25zXG4gKiBAZGVzY3JpcHRpb24gPHN0cm9uZz5EbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIFVzZSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvdGhyZWUtZC1zZWN1cmUuY3JlYXRlfGJyYWludHJlZS50aHJlZURTZWN1cmUuY3JlYXRlfSBpbnN0ZWFkLjwvc3Ryb25nPlxuICogQGNsYXNzZGVzYyBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBUaHJlZURTZWN1cmUgY29tcG9uZW50IHByb2R1Y2VkIGJ5IHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi90aHJlZS1kLXNlY3VyZS5jcmVhdGV8YnJhaW50cmVlLnRocmVlRFNlY3VyZS5jcmVhdGV9LiBJbnN0YW5jZXMgb2YgdGhpcyBjbGFzcyBoYXZlIGEgbWV0aG9kIGZvciBsYXVuY2hpbmcgYSAzRCBTZWN1cmUgYXV0aGVudGljYXRpb24gZmxvdy5cbiAqXG4gKiBJZiB5b3UgdXNlIHRoZSBCcmFpbnRyZWUgU0RLIGZyb20gd2l0aGluIGFuIGlmcmFtZSwgeW91IG11c3Qgbm90IHVzZSB0aGUgYHNhbmRib3hgIGF0dHJpYnV0ZSBvbiB5b3VyIGlmcmFtZSBvciB0aGUgM0QgU2VjdXJlIG1vZGFsIHdpbGwgbm90IGZ1bmN0aW9uIGNvcnJlY3RseS5cbiAqXG4gKiAqKk5vdGUqKjogM0QgU2VjdXJlIDIuMCBpcyBkb2N1bWVudGVkIGJlbG93IGFuZCB3aWxsIGJlY29tZSB0aGUgZGVmYXVsdCBpbnRlZ3JhdGlvbiBtZXRob2QgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBCcmFpbnRyZWUtd2ViLiBVbnRpbCB0aGVuLCB2ZXJzaW9uIDEuMCB3aWxsIGNvbnRpbnVlIHRvIGJlIHN1cHBvcnRlZC4gVG8gdmlldyAzRCBTZWN1cmUgMS4wIGRvY3VtZW50YXRpb24sIGxvb2sgYXQgQnJhaW50cmVlLXdlYiBkb2N1bWVudGF0aW9uIGZyb20gdmVyc2lvbiBbMy40MC4wXShodHRwczovL2JyYWludHJlZS5naXRodWIuaW8vYnJhaW50cmVlLXdlYi8zLjQwLjAvVGhyZWVEU2VjdXJlLmh0bWwpIGFuZCBlYXJsaWVyLCBvciB1cGdyYWRlIHlvdXIgaW50ZWdyYXRpb24gYnkgcmVmZXJyaW5nIHRvIHRoZSBbM0QgU2VjdXJlIDIuMCBhZG9wdGlvbiBndWlkZV0oaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9icmFpbnRyZWUvZG9jcy9ndWlkZXMvM2Qtc2VjdXJlL21pZ3JhdGlvbi9qYXZhc2NyaXB0L3YzKS5cbiAqL1xuZnVuY3Rpb24gVGhyZWVEU2VjdXJlKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgRnJhbWV3b3JrID0gRlJBTUVXT1JLU1tvcHRpb25zLmZyYW1ld29ya107XG5cbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5fZnJhbWV3b3JrID0gbmV3IEZyYW1ld29yayhvcHRpb25zKTtcbiAgdGhpcy5fZnJhbWV3b3JrLnNldFVwRXZlbnRMaXN0ZW5lcnMoZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuX2VtaXQuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgfSk7XG59XG5cbkV2ZW50RW1pdHRlci5jcmVhdGVDaGlsZChUaHJlZURTZWN1cmUpO1xuLy8gTkVYVF9NQUpPUl9WRVJTSU9OIHJlbW92ZSBleGVtcHRpb25SZXF1ZXN0ZWQgZW50aXJlbHkgaW4gZmF2b3Igb2YgYHJlcXVlc3RlZEV4ZW1wdGlvblR5cGVgXG4vKipcbiAqIExhdW5jaCB0aGUgM0QgU2VjdXJlIGxvZ2luIGZsb3csIHJldHVybmluZyBhIG5vbmNlIHBheWxvYWQuXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBmb3IgY2FyZCB2ZXJpZmljYXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5ub25jZSBUaGUgbm9uY2UgcmVwcmVzZW50aW5nIHRoZSBjYXJkIGZyb20gYSB0b2tlbml6YXRpb24gcGF5bG9hZC4gRm9yIGV4YW1wbGUsIHRoaXMgY2FuIGJlIGEge0BsaW5rIEhvc3RlZEZpZWxkc350b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfSByZXR1cm5lZCBieSBIb3N0ZWQgRmllbGRzIHVuZGVyIGBwYXlsb2FkLm5vbmNlYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmJpbiBUaGUgbnVtZXJpYyBCYW5rIElkZW50aWZpY2F0aW9uIE51bWJlciAoYmluKSBvZiB0aGUgY2FyZCBmcm9tIGEgdG9rZW5pemF0aW9uIHBheWxvYWQuIEZvciBleGFtcGxlLCB0aGlzIGNhbiBiZSBhIHtAbGluayBIb3N0ZWRGaWVsZHN+dG9rZW5pemVQYXlsb2FkfHRva2VuaXplUGF5bG9hZH0gcmV0dXJuZWQgYnkgSG9zdGVkIEZpZWxkcyB1bmRlciBgcGF5bG9hZC5kZXRhaWxzLmJpbmAuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5hbW91bnQgVGhlIGFtb3VudCBvZiB0aGUgdHJhbnNhY3Rpb24gaW4gdGhlIGN1cnJlbnQgbWVyY2hhbnQgYWNjb3VudCdzIGN1cnJlbmN5LiBUaGlzIG11c3QgYmUgZXhwcmVzc2VkIGluIG51bWJlcnMgd2l0aCBhbiBvcHRpb25hbCBkZWNpbWFsICh1c2luZyBgLmApIGFuZCBwcmVjaXNpb24gdXAgdG8gdGhlIGh1bmRyZWR0aHMgcGxhY2UuIEZvciBleGFtcGxlLCBpZiB5b3UncmUgcHJvY2Vzc2luZyBhIHRyYW5zYWN0aW9uIGZvciAxLjIzNCw1NiDigqwgdGhlbiBgYW1vdW50YCBzaG91bGQgYmUgYDEyMzQuNTZgLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFjY291bnRUeXBlXSBUaGUgYWNjb3VudCB0eXBlIGZvciB0aGUgY2FyZCAoaWYga25vd24pLiBBY2NlcHRlZCB2YWx1ZXM6IGBjcmVkaXRgIG9yIGBkZWJpdGAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNhcmRBZGRDaGFsbGVuZ2VSZXF1ZXN0ZWRdIElmIHNldCB0byBgdHJ1ZWAsIGEgY2FyZC1hZGQgY2hhbGxlbmdlIHdpbGwgYmUgcmVxdWVzdGVkIGZyb20gdGhlIGlzc3Vlci4gSWYgc2V0IHRvIGBmYWxzZWAsIGEgY2FyZC1hZGQgY2hhbGxlbmdlIHdpbGwgbm90IGJlIHJlcXVlc3RlZC4gSWYgdGhlIHBhcmFtIGlzIG1pc3NpbmcsIGEgY2FyZC1hZGQgY2hhbGxlbmdlIHdpbGwgb25seSBiZSByZXF1ZXN0ZWQgZm9yICQwIGFtb3VudC4gQW4gYXV0aGVudGljYXRpb24gY3JlYXRlZCB1c2luZyB0aGlzIGZsYWcgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgdmF1bHRpbmcgb3BlcmF0aW9ucyAoY3JlYXRpb24gb2YgY3VzdG9tZXJzJyBjcmVkaXQgY2FyZHMgb3IgcGF5bWVudCBtZXRob2RzKSBhbmQgbm90IGZvciBjcmVhdGluZyB0cmFuc2FjdGlvbnMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNhcmRBZGRdICpEZXByZWNhdGVkOiogVXNlIGBjYXJkQWRkQ2hhbGxlbmdlUmVxdWVzdGVkYCBpbnN0ZWFkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFsbGVuZ2VSZXF1ZXN0ZWRdIElmIHNldCB0byB0cnVlLCBhbiBhdXRoZW50aWNhdGlvbiBjaGFsbGVuZ2Ugd2lsbCBiZSBmb3JjZWQgaWYgcG9zc2libGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRhdGFPbmx5UmVxdWVzdGVkXSBJbmRpY2F0ZXMgd2hldGhlciB0byB1c2UgdGhlIGRhdGEgb25seSBmbG93LiBJbiB0aGlzIGZsb3csIGZyaWN0aW9ubGVzcyAzRFMgaXMgZW5zdXJlZCBmb3IgTWFzdGVyY2FyZCBjYXJkaG9sZGVycyBhcyB0aGUgY2FyZCBzY2hlbWUgcHJvdmlkZXMgYSByaXNrIHNjb3JlIGZvciB0aGUgaXNzdWVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRvIGFwcHJvdmUuIElmIGRhdGEgb25seSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBwcm9jZXNzb3IsIGEgdmFsaWRhdGlvbiBlcnJvciB3aWxsIGJlIHJhaXNlZC4gTm9uLU1hc3RlcmNhcmQgY2FyZGhvbGRlcnMgd2lsbCBmYWxsYmFjayB0byBhIG5vcm1hbCAzRFMgZmxvdy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZXhlbXB0aW9uUmVxdWVzdGVkXSAqRGVwcmVjYXRlZDoqIFVzZSBgcmVxdWVzdGVkRXhlbXB0aW9uVHlwZWAgaW5zdGVhZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVxdWVzdFZpc2FEQUZdIFJlcXVlc3QgdG8gdXNlIFZJU0EgRGlnaXRhbCBBdXRoZW50aWNhdGlvbiBGcmFtZXdvcmsuIElmIHNldCB0byB0cnVlLCBhIFZpc2EgREFGIGF1dGhlbnRpY2F0ZWQgcGF5bWVudCBjcmVkZW50aWFsIHdpbGwgYmUgY3JlYXRlZCBhbmQvb3IgdXNlZCBmb3IgYXV0aGVudGljYXRpb24gaWYgdGhlIG1lcmNoYW50IGlzIGVsaWdpYmxlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm1lcmNoYW50TmFtZV0gQWxsb3dzIHRvIG92ZXJyaWRlIHRoZSBtZXJjaGFudCBuYW1lIHRoYXQgaXMgc2hvd24gaW4gdGhlIGNoYWxsZW5nZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5yZXF1ZXN0ZWRFeGVtcHRpb25UeXBlXSBJZiBhbiBleGVtcHRpb24gaXMgcmVxdWVzdGVkIGFuZCB0aGUgZXhlbXB0aW9uJ3MgY29uZGl0aW9ucyBhcmUgc2F0aXNmaWVkLCB0aGVuIGl0IHdpbGwgYmUgYXBwbGllZC4gVGhlIGZvbGxvd2luZyBzdXBwb3J0ZWQgZXhlbXB0aW9ucyBhcmUgZGVmaW5lZCBhcyBwZXIgUFNEMiByZWd1bGF0aW9uOiBgbG93X3ZhbHVlYCwgYHRyYW5zYWN0aW9uX3Jpc2tfYW5hbHlzaXNgXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuY3VzdG9tRmllbGRzXSBPYmplY3Qgd2hlcmUgZWFjaCBrZXkgaXMgdGhlIG5hbWUgb2YgYSBjdXN0b20gZmllbGQgd2hpY2ggaGFzIGJlZW4gY29uZmlndXJlZCBpbiB0aGUgQ29udHJvbCBQYW5lbC4gSW4gdGhlIENvbnRyb2wgUGFuZWwgeW91IGNhbiBjb25maWd1cmUgM0QgU2VjdXJlIFJ1bGVzIHdoaWNoIHRyaWdnZXIgb24gY2VydGFpbiB2YWx1ZXMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5vbkxvb2t1cENvbXBsZXRlXSAqRGVwcmVjYXRlZDoqIFVzZSB7QGxpbmsgVGhyZWVEU2VjdXJlI2V2ZW50Omxvb2t1cC1jb21wbGV0ZXxgdGhyZWVEU2VjdXJlSW5zdGFuY2Uub24oJ2xvb2t1cC1jb21wbGV0ZScpYH0gaW5zdGVhZC4gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGxvb2t1cCBjb21wbGV0ZXMuIFRoZSBmaXJzdCBhcmd1bWVudCwgYGRhdGFgLCBpcyBhIHtAbGluayBUaHJlZURTZWN1cmV+dmVyaWZpY2F0aW9uRGF0YXx2ZXJpZmljYXRpb25EYXRhfSBvYmplY3QsIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50LCBgbmV4dGAsIGlzIGEgY2FsbGJhY2suIGBuZXh0YCBtdXN0IGJlIGNhbGxlZCB0byBjb250aW51ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5lbWFpbF0gVGhlIGVtYWlsIHVzZWQgZm9yIHZlcmlmaWNhdGlvbi4gKG1heGltdW0gbGVuZ3RoIDI1NSlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5tb2JpbGVQaG9uZU51bWJlcl0gVGhlIG1vYmlsZSBwaG9uZSBudW1iZXIgdXNlZCBmb3IgdmVyaWZpY2F0aW9uLiBPbmx5IG51bWJlcnM7IHJlbW92ZSBkYXNoZXMsIHBhcmVudGhlc2lzIGFuZCBvdGhlciBjaGFyYWN0ZXJzLiAobWF4aW11bSBsZW5ndGggMjUpXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuYmlsbGluZ0FkZHJlc3NdIEFuIHtAbGluayBUaHJlZURTZWN1cmV+YmlsbGluZ0FkZHJlc3N8YmlsbGluZ0FkZHJlc3N9IG9iamVjdCBmb3IgdmVyaWZpY2F0aW9uLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmFkZGl0aW9uYWxJbmZvcm1hdGlvbl0gQW4ge0BsaW5rIFRocmVlRFNlY3VyZX5hZGRpdGlvbmFsSW5mb3JtYXRpb258YWRkaXRpb25hbEluZm9ybWF0aW9ufSBvYmplY3QgZm9yIHZlcmlmaWNhdGlvbi5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5jb2xsZWN0RGV2aWNlRGF0YV0gSWYgc2V0IHRvIGB0cnVlYCwgZGV2aWNlIGRhdGEgc3VjaCBhcyBicm93c2VyIHNjcmVlbiBkaW1lbnNpb25zLCBsYW5ndWFnZSBhbmQgdGltZSB6b25lIGlzIHN1Ym1pdHRlZCB3aXRoIGxvb2t1cCBkYXRhLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmN1c3RvbWVyXSAqKkRlcHJlY2F0ZWQqKiBDdXN0b21lciBpbmZvcm1hdGlvbiBmb3IgdXNlIGluIDNEUyAxLjAgdmVyaWZpY2F0aW9ucy4gQ2FuIGNvbnRhaW4gYW55IHN1YnNldCBvZiBhIHtAbGluayBUaHJlZURTZWN1cmV+dmVyaWZ5Q2FyZEN1c3RvbWVyT2JqZWN0fHZlcmlmeUNhcmRDdXN0b21lck9iamVjdH0uIE9ubHkgdG8gYmUgdXNlZCBmb3IgM0RTIDEuMCBpbnRlZ3JhdGlvbnMuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBvcHRpb25zLmFkZEZyYW1lICoqRGVwcmVjYXRlZCoqIFRoaXMge0BsaW5rIFRocmVlRFNlY3VyZX5hZGRGcmFtZUNhbGxiYWNrfGFkZEZyYW1lQ2FsbGJhY2t9IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGJhbmsgZnJhbWUgbmVlZHMgdG8gYmUgYWRkZWQgdG8geW91ciBwYWdlLiBPbmx5IHRvIGJlIHVzZWQgZm9yIDNEUyAxLjAgaW50ZWdyYXRpb25zLlxuICogQHBhcmFtIHtjYWxsYmFja30gb3B0aW9ucy5yZW1vdmVGcmFtZSAqKkRlcHJlY2F0ZWQqKiBGb3IgdXNlIGluIDNEUyAxLjAgRmxvd3MuIFRoaXMge0BsaW5rIFRocmVlRFNlY3VyZX5yZW1vdmVGcmFtZUNhbGxiYWNrfHJlbW92ZUZyYW1lQ2FsbGJhY2t9IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGJhbmsgZnJhbWUgbmVlZHMgdG8gYmUgcmVtb3ZlZCBmcm9tIHlvdXIgcGFnZS4gT25seSB0byBiZSB1c2VkIGluIDNEUyAxLjAgaW50ZWdyYXRpb25zLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgc2Vjb25kIGFyZ3VtZW50LCA8Y29kZT5kYXRhPC9jb2RlPiwgaXMgYSB7QGxpbmsgVGhyZWVEU2VjdXJlfnZlcmlmeVBheWxvYWR8dmVyaWZ5UGF5bG9hZH0uIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBpdCB3aWxsIHJldHVybiBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB7QGxpbmsgVGhyZWVEU2VjdXJlfnZlcmlmeVBheWxvYWR8dmVyaWZ5UGF5bG9hZH0uXG5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+VmVyaWZ5aW5nIGEgcGF5bWVudCBtZXRob2Qgbm9uY2Ugd2l0aCAzRFMgMi4wPC9jYXB0aW9uPlxuICogdmFyIG15M0RTQ29udGFpbmVyO1xuICpcbiAqIC8vIHNldCB1cCBsaXN0ZW5lciBhZnRlciBpbml0aWFsaXphdGlvblxuICogdGhyZWVEU2VjdXJlLm9uKCgnbG9va3VwLWNvbXBsZXRlJywgZnVuY3Rpb24gKGRhdGEsIG5leHQpIHtcbiAqICAgLy8gdXNlIGBkYXRhYCBoZXJlLCB0aGVuIGNhbGwgYG5leHQoKWBcbiAqICAgbmV4dCgpO1xuICogfSk7XG4gKlxuICogLy8gY2FsbCB2ZXJpZnlDYXJkIGFmdGVyIHRva2VuaXppbmcgYSBjYXJkXG4gKiB0aHJlZURTZWN1cmUudmVyaWZ5Q2FyZCh7XG4gKiAgIGFtb3VudDogJzEyMy40NScsXG4gKiAgIG5vbmNlOiBob3N0ZWRGaWVsZHNUb2tlbml6YXRpb25QYXlsb2FkLm5vbmNlLFxuICogICBiaW46IGhvc3RlZEZpZWxkc1Rva2VuaXphdGlvblBheWxvYWQuZGV0YWlscy5iaW4sXG4gKiAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbSdcbiAqICAgYmlsbGluZ0FkZHJlc3M6IHtcbiAqICAgICBnaXZlbk5hbWU6ICdKaWxsJyxcbiAqICAgICBzdXJuYW1lOiAnRG9lJyxcbiAqICAgICBwaG9uZU51bWJlcjogJzgxMDEyMzQ1NjcnLFxuICogICAgIHN0cmVldEFkZHJlc3M6ICc1NTUgU21pdGggU3QuJyxcbiAqICAgICBleHRlbmRlZEFkZHJlc3M6ICcjNScsXG4gKiAgICAgbG9jYWxpdHk6ICdPYWtsYW5kJyxcbiAqICAgICByZWdpb246ICdDQScsXG4gKiAgICAgcG9zdGFsQ29kZTogJzEyMzQ1JyxcbiAqICAgICBjb3VudHJ5Q29kZUFscGhhMjogJ1VTJ1xuICogICB9LFxuICogICBhZGRpdGlvbmFsSW5mb3JtYXRpb246IHtcbiAqICAgICB3b3JrUGhvbmVOdW1iZXI6ICc1NTU1NTU1NTU1JyxcbiAqICAgICBzaGlwcGluZ0dpdmVuTmFtZTogJ0ppbGwnLFxuICogICAgIHNoaXBwaW5nU3VybmFtZTogJ0RvZScsXG4gKiAgICAgc2hpcHBpbmdBZGRyZXNzOiB7XG4gKiAgICAgICBzdHJlZXRBZGRyZXNzOiAnNTU1IFNtaXRoIHN0JyxcbiAqICAgICAgIGV4dGVuZGVkQWRkcmVzczogJyM1JyxcbiAqICAgICAgIGxvY2FsaXR5OiAnT2FrbGFuZCcsXG4gKiAgICAgICByZWdpb246ICdDQScsXG4gKiAgICAgICBwb3N0YWxDb2RlOiAnMTIzNDUnLFxuICogICAgICAgY291bnRyeUNvZGVBbHBoYTI6ICdVUydcbiAqICAgICB9XG4gKiAgICAgc2hpcHBpbmdQaG9uZTogJzgxMDEyMzQ1NjcnXG4gKiAgIH1cbiAqIH0sIGZ1bmN0aW9uIChlcnIsIHBheWxvYWQpIHtcbiAqICAgaWYgKGVycikge1xuICogICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAqICAgICByZXR1cm47XG4gKiAgIH1cbiAqXG4gKiAgIGlmIChwYXlsb2FkLmxpYWJpbGl0eVNoaWZ0ZWQpIHtcbiAqICAgICAvLyBMaWFiaWxpdHkgaGFzIHNoaWZ0ZWRcbiAqICAgICBzdWJtaXROb25jZVRvU2VydmVyKHBheWxvYWQubm9uY2UpO1xuICogICB9IGVsc2UgaWYgKHBheWxvYWQubGlhYmlsaXR5U2hpZnRQb3NzaWJsZSkge1xuICogICAgIC8vIExpYWJpbGl0eSBtYXkgc3RpbGwgYmUgc2hpZnRlZFxuICogICAgIC8vIERlY2lkZSBpZiB5b3Ugd2FudCB0byBzdWJtaXQgdGhlIG5vbmNlXG4gKiAgIH0gZWxzZSB7XG4gKiAgICAgLy8gTGlhYmlsaXR5IGhhcyBub3Qgc2hpZnRlZCBhbmQgd2lsbCBub3Qgc2hpZnRcbiAqICAgICAvLyBEZWNpZGUgaWYgeW91IHdhbnQgdG8gc3VibWl0IHRoZSBub25jZVxuICogICB9XG4gKiB9KTtcbiAqIEBleGFtcGxlXG4gKiA8Y2FwdGlvbj5WZXJpZnlpbmcgYSBwYXltZW50IG1ldGhvZCBub25jZSB3aXRoIDNEUyAyLjAgd2l0aCBvbkxvb2t1cENvbXBsZXRlIGNhbGxiYWNrPC9jYXB0aW9uPlxuICogdmFyIG15M0RTQ29udGFpbmVyO1xuICpcbiAqIHRocmVlRFNlY3VyZS52ZXJpZnlDYXJkKHtcbiAqICAgYW1vdW50OiAnMTIzLjQ1JyxcbiAqICAgbm9uY2U6IGhvc3RlZEZpZWxkc1Rva2VuaXphdGlvblBheWxvYWQubm9uY2UsXG4gKiAgIGJpbjogaG9zdGVkRmllbGRzVG9rZW5pemF0aW9uUGF5bG9hZC5kZXRhaWxzLmJpbixcbiAqICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJ1xuICogICBiaWxsaW5nQWRkcmVzczoge1xuICogICAgIGdpdmVuTmFtZTogJ0ppbGwnLFxuICogICAgIHN1cm5hbWU6ICdEb2UnLFxuICogICAgIHBob25lTnVtYmVyOiAnODEwMTIzNDU2NycsXG4gKiAgICAgc3RyZWV0QWRkcmVzczogJzU1NSBTbWl0aCBTdC4nLFxuICogICAgIGV4dGVuZGVkQWRkcmVzczogJyM1JyxcbiAqICAgICBsb2NhbGl0eTogJ09ha2xhbmQnLFxuICogICAgIHJlZ2lvbjogJ0NBJyxcbiAqICAgICBwb3N0YWxDb2RlOiAnMTIzNDUnLFxuICogICAgIGNvdW50cnlDb2RlQWxwaGEyOiAnVVMnXG4gKiAgIH0sXG4gKiAgIGFkZGl0aW9uYWxJbmZvcm1hdGlvbjoge1xuICogICAgIHdvcmtQaG9uZU51bWJlcjogJzU1NTU1NTU1NTUnLFxuICogICAgIHNoaXBwaW5nR2l2ZW5OYW1lOiAnSmlsbCcsXG4gKiAgICAgc2hpcHBpbmdTdXJuYW1lOiAnRG9lJyxcbiAqICAgICBzaGlwcGluZ0FkZHJlc3M6IHtcbiAqICAgICAgIHN0cmVldEFkZHJlc3M6ICc1NTUgU21pdGggc3QnLFxuICogICAgICAgZXh0ZW5kZWRBZGRyZXNzOiAnIzUnLFxuICogICAgICAgbG9jYWxpdHk6ICdPYWtsYW5kJyxcbiAqICAgICAgIHJlZ2lvbjogJ0NBJyxcbiAqICAgICAgIHBvc3RhbENvZGU6ICcxMjM0NScsXG4gKiAgICAgICBjb3VudHJ5Q29kZUFscGhhMjogJ1VTJ1xuICogICAgIH1cbiAqICAgICBzaGlwcGluZ1Bob25lOiAnODEwMTIzNDU2NydcbiAqICAgfSxcbiAqICAgb25Mb29rdXBDb21wbGV0ZTogZnVuY3Rpb24gKGRhdGEsIG5leHQpIHtcbiAqICAgICAvLyB1c2UgYGRhdGFgIGhlcmUsIHRoZW4gY2FsbCBgbmV4dCgpYFxuICogICAgIG5leHQoKTtcbiAqICAgfVxuICogfSwgZnVuY3Rpb24gKGVyciwgcGF5bG9hZCkge1xuICogICBpZiAoZXJyKSB7XG4gKiAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICogICAgIHJldHVybjtcbiAqICAgfVxuICpcbiAqICAgaWYgKHBheWxvYWQubGlhYmlsaXR5U2hpZnRlZCkge1xuICogICAgIC8vIExpYWJpbGl0eSBoYXMgc2hpZnRlZFxuICogICAgIHN1Ym1pdE5vbmNlVG9TZXJ2ZXIocGF5bG9hZC5ub25jZSk7XG4gKiAgIH0gZWxzZSBpZiAocGF5bG9hZC5saWFiaWxpdHlTaGlmdFBvc3NpYmxlKSB7XG4gKiAgICAgLy8gTGlhYmlsaXR5IG1heSBzdGlsbCBiZSBzaGlmdGVkXG4gKiAgICAgLy8gRGVjaWRlIGlmIHlvdSB3YW50IHRvIHN1Ym1pdCB0aGUgbm9uY2VcbiAqICAgfSBlbHNlIHtcbiAqICAgICAvLyBMaWFiaWxpdHkgaGFzIG5vdCBzaGlmdGVkIGFuZCB3aWxsIG5vdCBzaGlmdFxuICogICAgIC8vIERlY2lkZSBpZiB5b3Ugd2FudCB0byBzdWJtaXQgdGhlIG5vbmNlXG4gKiAgIH1cbiAqIH0pO1xuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPkhhbmRsaW5nIDNEUyBsb29rdXAgZXJyb3JzPC9jYXB0aW9uPlxuICogdmFyIG15M0RTQ29udGFpbmVyO1xuICpcbiAqIC8vIHNldCB1cCBsaXN0ZW5lciBhZnRlciBpbml0aWFsaXphdGlvblxuICogdGhyZWVEU2VjdXJlLm9uKCgnbG9va3VwLWNvbXBsZXRlJywgZnVuY3Rpb24gKGRhdGEsIG5leHQpIHtcbiAqICAgLy8gdXNlIGBkYXRhYCBoZXJlLCB0aGVuIGNhbGwgYG5leHQoKWBcbiAqICAgbmV4dCgpO1xuICogfSk7XG4gKlxuICogLy8gY2FsbCB2ZXJpZnlDYXJkIGFmdGVyIHRva2VuaXppbmcgYSBjYXJkXG4gKiB0aHJlZURTZWN1cmUudmVyaWZ5Q2FyZCh7XG4gKiAgIGFtb3VudDogJzEyMy40NScsXG4gKiAgIG5vbmNlOiBob3N0ZWRGaWVsZHNUb2tlbml6YXRpb25QYXlsb2FkLm5vbmNlLFxuICogICBiaW46IGhvc3RlZEZpZWxkc1Rva2VuaXphdGlvblBheWxvYWQuZGV0YWlscy5iaW4sXG4gKiAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gKiAgIGJpbGxpbmdBZGRyZXNzOiBiaWxsaW5nQWRkcmVzc0Zyb21DdXN0b21lcixcbiAqICAgYWRkaXRpb25hbEluZm9ybWF0aW9uOiBhZGRpdGlvbmFsSW5mb0Zyb21DdXN0b21lclxuICogfSwgZnVuY3Rpb24gKGVyciwgcGF5bG9hZCkge1xuICogICBpZiAoZXJyKSB7XG4gKiAgICAgaWYgKGVyci5jb2RlLmluZGV4T2YoJ1RIUkVFRFNfTE9PS1VQJykgPT09IDApIHtcbiAqICAgICAgIC8vIGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgaW5pdGlhbCBsb29rdXAgcmVxdWVzdFxuICpcbiAqICAgICAgIGlmIChlcnIuY29kZSA9PT0gJ1RIUkVFRFNfTE9PS1VQX1RPS0VOSVpFRF9DQVJEX05PVF9GT1VORF9FUlJPUicpIHtcbiAqICAgICAgICAgLy8gZWl0aGVyIHRoZSBwYXNzZWQgcGF5bWVudCBtZXRob2Qgbm9uY2UgZG9lcyBub3QgZXhpc3RcbiAqICAgICAgICAgLy8gb3IgaXQgd2FzIGFscmVhZHkgY29uc3VtZWQgYmVmb3JlIHRoZSBsb29rdXAgY2FsbCB3YXMgbWFkZVxuICogICAgICAgfSBlbHNlIGlmIChlcnIuY29kZS5pbmRleE9mKCdUSFJFRURTX0xPT0tVUF9WQUxJREFUSU9OJykgPT09IDApIHtcbiAqICAgICAgICAgLy8gYSB2YWxpZGF0aW9uIGVycm9yIG9jY3VycmVkXG4gKiAgICAgICAgIC8vIGxpa2VseSBzb21lIG5vbi1hc2NpaSBjaGFyYWN0ZXJzIHdlcmUgaW5jbHVkZWQgaW4gdGhlIGJpbGxpbmdcbiAqICAgICAgICAgLy8gYWRkcmVzcyBnaXZlbiBuYW1lIG9yIHN1cm5hbWUgZmllbGRzLCBvciB0aGUgY2FyZGhvbGRlcm5hbWUgZmllbGRcbiAqXG4gKiAgICAgICAgIC8vIEluc3RydWN0IHlvdXIgdXNlciB0byBjaGVjayB0aGVpciBkYXRhIGFuZCB0cnkgYWdhaW5cbiAqICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgIC8vIGFuIHVua25vd24gbG9va3VwIGVycm9yIG9jY3VycmVkXG4gKiAgICAgICB9XG4gKiAgICAgfSBlbHNlIHtcbiAqICAgICAgIC8vIHNvbWUgb3RoZXIga2luZCBvZiBlcnJvclxuICogICAgIH1cbiAqICAgICByZXR1cm47XG4gKiAgIH1cbiAqXG4gKiAgIC8vIGhhbmRsZSBzdWNjZXNzXG4gKiB9KTtcbiAqL1xuVGhyZWVEU2VjdXJlLnByb3RvdHlwZS52ZXJpZnlDYXJkID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHByaXZhdGVPcHRpb25zO1xuXG4gIGlmICh0aGlzLmhhc0xpc3RlbmVyKFwibG9va3VwLWNvbXBsZXRlXCIpKSB7XG4gICAgcHJpdmF0ZU9wdGlvbnMgPSB7XG4gICAgICBpZ25vcmVPbkxvb2t1cENvbXBsZXRlUmVxdWlyZW1lbnQ6IHRydWUsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9mcmFtZXdvcmsudmVyaWZ5Q2FyZChvcHRpb25zLCBwcml2YXRlT3B0aW9ucyk7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdmFsaWQtanNkb2MgKi9cbi8qKlxuICogTGF1bmNoIHRoZSBpZnJhbWUgY2hhbGxlbmdlIHVzaW5nIGEgM0QgU2VjdXJlIGxvb2t1cCByZXNwb25zZSBmcm9tIGEgc2VydmVyIHNpZGUgbG9va3VwLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7KG9iamVjdHxzdHJpbmcpfSBsb29rdXBSZXNwb25zZSBUaGUgbG9va3VwIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBzaWRlIGNhbGwgdG8gbG9va3VwIHRoZSAzRCBTZWN1cmUgaW5mb3JtYXRpb24uIFRoZSByYXcgc3RyaW5nIG9yIGEgcGFyc2VkIG9iamVjdCBjYW4gYmUgcGFzc2VkLlxuICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlLlxuICogQGV4YW1wbGVcbiAqIHZhciBteTNEU0NvbnRhaW5lcjtcbiAqXG4gKiB0aHJlZURTZWN1cmUuaW5pdGlhbGl6ZUNoYWxsZW5nZVdpdGhMb29rdXBSZXNwb25zZShsb29rdXBSZXNwb25zZUZyb21TZXJ2ZXIpLnRoZW4oZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAqICAgaWYgKHBheWxvYWQubGlhYmlsaXR5U2hpZnRlZCkge1xuICogICAgIC8vIExpYWJpbGl0eSBoYXMgc2hpZnRlZFxuICogICAgIHN1Ym1pdE5vbmNlVG9TZXJ2ZXIocGF5bG9hZC5ub25jZSk7XG4gKiAgIH0gZWxzZSBpZiAocGF5bG9hZC5saWFiaWxpdHlTaGlmdFBvc3NpYmxlKSB7XG4gKiAgICAgLy8gTGlhYmlsaXR5IG1heSBzdGlsbCBiZSBzaGlmdGVkXG4gKiAgICAgLy8gRGVjaWRlIGlmIHlvdSB3YW50IHRvIHN1Ym1pdCB0aGUgbm9uY2VcbiAqICAgfSBlbHNlIHtcbiAqICAgICAvLyBMaWFiaWxpdHkgaGFzIG5vdCBzaGlmdGVkIGFuZCB3aWxsIG5vdCBzaGlmdFxuICogICAgIC8vIERlY2lkZSBpZiB5b3Ugd2FudCB0byBzdWJtaXQgdGhlIG5vbmNlXG4gKiAgIH1cbiAqIH0pO1xuICovXG5UaHJlZURTZWN1cmUucHJvdG90eXBlLmluaXRpYWxpemVDaGFsbGVuZ2VXaXRoTG9va3VwUmVzcG9uc2UgPSBmdW5jdGlvbiAoXG4gIGxvb2t1cFJlc3BvbnNlXG4pIHtcbiAgaWYgKHR5cGVvZiBsb29rdXBSZXNwb25zZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvb2t1cFJlc3BvbnNlID0gSlNPTi5wYXJzZShsb29rdXBSZXNwb25zZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fZnJhbWV3b3JrLmluaXRpYWxpemVDaGFsbGVuZ2VXaXRoTG9va3VwUmVzcG9uc2UobG9va3VwUmVzcG9uc2UpO1xufTtcblxuLyoqXG4gKiBHYXRoZXIgdGhlIGRhdGEgbmVlZGVkIGZvciBhIDNEIFNlY3VyZSBsb29rdXAgY2FsbC5cbiAqXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBPcHRpb25zIGZvciAzRCBTZWN1cmUgbG9va3VwLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubm9uY2UgVGhlIG5vbmNlIHJlcHJlc2VudGluZyB0aGUgY2FyZCBmcm9tIGEgdG9rZW5pemF0aW9uIHBheWxvYWQuIEZvciBleGFtcGxlLCB0aGlzIGNhbiBiZSBhIHtAbGluayBIb3N0ZWRGaWVsZHN+dG9rZW5pemVQYXlsb2FkfHRva2VuaXplUGF5bG9hZH0gcmV0dXJuZWQgYnkgSG9zdGVkIEZpZWxkcyB1bmRlciBgcGF5bG9hZC5ub25jZWAuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5iaW4gVGhlIG51bWVyaWMgQmFuayBJZGVudGlmaWNhdGlvbiBOdW1iZXIgKGJpbikgb2YgdGhlIGNhcmQgZnJvbSBhIHRva2VuaXphdGlvbiBwYXlsb2FkLiBGb3IgZXhhbXBsZSwgdGhpcyBjYW4gYmUgYSB7QGxpbmsgSG9zdGVkRmllbGRzfnRva2VuaXplUGF5bG9hZHx0b2tlbml6ZVBheWxvYWR9IHJldHVybmVkIGJ5IEhvc3RlZCBGaWVsZHMgdW5kZXIgYHBheWxvYWQuZGV0YWlscy5iaW5gLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgc2Vjb25kIGFyZ3VtZW50LCA8Y29kZT5kYXRhPC9jb2RlPiwgaXMgYSB7QGxpbmsgVGhyZWVEU2VjdXJlfnByZXBhcmVMb29rdXBQYXlsb2FkfHByZXBhcmVMb29rdXBQYXlsb2FkfS4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGl0IHdpbGwgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHtAbGluayBUaHJlZURTZWN1cmV+cHJlcGFyZUxvb2t1cFBheWxvYWR8cHJlcGFyZUxvb2t1cFBheWxvYWR9LlxuXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPlByZXBhcmluZyBkYXRhIGZvciBhIDNEIFNlY3VyZSBsb29rdXA8L2NhcHRpb24+XG4gKiB0aHJlZURTZWN1cmUucHJlcGFyZUxvb2t1cCh7XG4gKiAgIG5vbmNlOiBob3N0ZWRGaWVsZHNUb2tlbml6YXRpb25QYXlsb2FkLm5vbmNlLFxuICogICBiaW46IGhvc3RlZEZpZWxkc1Rva2VuaXphdGlvblBheWxvYWQuZGV0YWlscy5iaW5cbiAqIH0sIGZ1bmN0aW9uIChlcnIsIHBheWxvYWQpIHtcbiAqICAgaWYgKGVycikge1xuICogICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAqICAgICByZXR1cm47XG4gKiAgIH1cbiAqXG4gKiAgIC8vIHNlbmQgcGF5bG9hZCB0byBzZXJ2ZXIgdG8gZG8gc2VydmVyIHNpZGUgbG9va3VwXG4gKiB9KTtcbiAqL1xuVGhyZWVEU2VjdXJlLnByb3RvdHlwZS5wcmVwYXJlTG9va3VwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuX2ZyYW1ld29yay5wcmVwYXJlTG9va3VwKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYW5jZWwgdGhlIDNEUyBmbG93IGFuZCByZXR1cm4gdGhlIHZlcmlmaWNhdGlvbiBwYXlsb2FkIGlmIGF2YWlsYWJsZS4gSWYgdXNpbmcgM0QgU2VjdXJlIHZlcnNpb24gMiwgdGhpcyB3aWxsIG5vdCBjbG9zZSB0aGUgVUkgb2YgdGhlIGF1dGhlbnRpY2F0aW9uIG1vZGFsLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHRoaXMgbWV0aG9kIG9ubHkgYmUgdXNlZCBpbiB0aGUge0BsaW5rIFRocmVlRFNlY3VyZSNldmVudDpsb29rdXAtY29tcGxldGV8YGxvb2t1cC1jb21wbGV0ZWB9IGV2ZW50IG9yIHRoZSBgb25Mb29rdXBDb21wbGV0ZWAgY2FsbGJhY2suXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgYSB7QGxpbmsgVGhyZWVEU2VjdXJlfnZlcmlmeVBheWxvYWR8dmVyaWZ5UGF5bG9hZH0uIElmIHRoZXJlIGlzIG5vIHZlcmlmeVBheWxvYWQgKHRoZSBpbml0aWFsIGxvb2t1cCBkaWQgbm90IGNvbXBsZXRlKSwgYW4gZXJyb3Igd2lsbCBiZSByZXR1cm5lZC4gSWYgbm8gY2FsbGJhY2sgaXMgcGFzc2VkLCBgY2FuY2VsVmVyaWZ5Q2FyZGAgd2lsbCByZXR1cm4gYSBwcm9taXNlLlxuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqIEBleGFtcGxlIDxjYXB0aW9uPkNhbmNlbCB0aGUgdmVyaWZpY2F0aW9uIGluIGBsb29rdXAtY29tcGxldGVgIGV2ZW50PC9jYXB0aW9uPlxuICogLy8gc2V0IHVwIGxpc3RlbmVyIGFmdGVyIGluc3RhbnRpYXRpb25cbiAqIHRocmVlRFNlY3VyZS5vbignbG9va3VwLWNvbXBsZXRlJywgZnVuY3Rpb24gKGRhdGEsIG5leHQpIHtcbiAqICAgLy8gZGV0ZXJtaW5lIGlmIHlvdSB3YW50IHRvIGNhbGwgbmV4dCB0byBzdGFydCB0aGUgY2hhbGxlbmdlLFxuICogICAvLyBpZiBub3QsIGNhbGwgY2FuY2VsVmVyaWZ5Q2FyZFxuICogICB0aHJlZURTZWN1cmUuY2FuY2VsVmVyaWZ5Q2FyZChmdW5jdGlvbiAoZXJyLCB2ZXJpZnlQYXlsb2FkKSB7XG4gKiAgICAgaWYgKGVycikge1xuICogICAgICAgLy8gSGFuZGxlIGVycm9yXG4gKiAgICAgICBjb25zb2xlLmxvZyhlcnIubWVzc2FnZSk7IC8vIE5vIHZlcmlmaWNhdGlvbiBwYXlsb2FkIGF2YWlsYWJsZVxuICogICAgICAgcmV0dXJuO1xuICogICAgIH1cbiAqXG4gKiAgICAgdmVyaWZ5UGF5bG9hZC5ub25jZTsgLy8gVGhlIG5vbmNlIHJldHVybmVkIGZyb20gdGhlIDNkcyBsb29rdXAgY2FsbFxuICogICAgIHZlcmlmeVBheWxvYWQubGlhYmlsaXR5U2hpZnRlZDsgLy8gYm9vbGVhblxuICogICAgIHZlcmlmeVBheWxvYWQubGlhYmlsaXR5U2hpZnRQb3NzaWJsZTsgLy8gYm9vbGVhblxuICogICB9KTtcbiAqIH0pO1xuICpcbiAqIC8vIGFmdGVyIHRva2VuaXppbmcgYSBjcmVkaXQgY2FyZFxuICogdGhyZWVEU2VjdXJlLnZlcmlmeUNhcmQoe1xuICogICBhbW91bnQ6ICcxMDAuMDAnLFxuICogICBub25jZTogbm9uY2VGcm9tVG9rZW5pemF0aW9uUGF5bG9hZCxcbiAqICAgYmluOiBiaW5Gcm9tVG9rZW5pemF0aW9uUGF5bG9hZFxuICogICAvLyBvdGhlciBmaWVsZHMgc3VjaCBhcyBiaWxsaW5nIGFkZHJlc3NcbiAqIH0sIGZ1bmN0aW9uICh2ZXJpZnlFcnJvciwgcGF5bG9hZCkge1xuICogICBpZiAodmVyaWZ5RXJyb3IpIHtcbiAqICAgICBpZiAodmVyaWZ5RXJyb3IuY29kZSA9PT0gJ1RIUkVFRFNfVkVSSUZZX0NBUkRfQ0FOQ0VMRURfQllfTUVSQ0hBTlQgJykge1xuICogICAgICAgLy8gZmxvdyB3YXMgY2FuY2VsZWQgYnkgbWVyY2hhbnQsIDNkcyBpbmZvIGNhbiBiZSBmb3VuZCBpbiB0aGUgcGF5bG9hZFxuICogICAgICAgLy8gZm9yIGNhbmNlbFZlcmlmeUNhcmRcbiAqICAgICB9XG4gKiAgIH1cbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+Q2FuY2VsIHRoZSB2ZXJpZmljYXRpb24gaW4gb25Mb29rdXBDb21wbGV0ZSBjYWxsYmFjazwvY2FwdGlvbj5cbiAqIHRocmVlRFNlY3VyZS52ZXJpZnlDYXJkKHtcbiAqICAgYW1vdW50OiAnMTAwLjAwJyxcbiAqICAgbm9uY2U6IG5vbmNlRnJvbVRva2VuaXphdGlvblBheWxvYWQsXG4gKiAgIGJpbjogYmluRnJvbVRva2VuaXphdGlvblBheWxvYWQsXG4gKiAgIC8vIG90aGVyIGZpZWxkcyBzdWNoIGFzIGJpbGxpbmcgYWRkcmVzc1xuICogICBvbkxvb2t1cENvbXBsZXRlOiBmdW5jdGlvbiAoZGF0YSwgbmV4dCkge1xuICogICAgIC8vIGRldGVybWluZSBpZiB5b3Ugd2FudCB0byBjYWxsIG5leHQgdG8gc3RhcnQgdGhlIGNoYWxsZW5nZSxcbiAqICAgICAvLyBpZiBub3QsIGNhbGwgY2FuY2VsVmVyaWZ5Q2FyZFxuICogICAgIHRocmVlRFNlY3VyZS5jYW5jZWxWZXJpZnlDYXJkKGZ1bmN0aW9uIChlcnIsIHZlcmlmeVBheWxvYWQpIHtcbiAqICAgICAgIGlmIChlcnIpIHtcbiAqICAgICAgICAgLy8gSGFuZGxlIGVycm9yXG4gKiAgICAgICAgIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTsgLy8gTm8gdmVyaWZpY2F0aW9uIHBheWxvYWQgYXZhaWxhYmxlXG4gKiAgICAgICAgIHJldHVybjtcbiAqICAgICAgIH1cbiAqXG4gKiAgICAgICB2ZXJpZnlQYXlsb2FkLm5vbmNlOyAvLyBUaGUgbm9uY2UgcmV0dXJuZWQgZnJvbSB0aGUgM2RzIGxvb2t1cCBjYWxsXG4gKiAgICAgICB2ZXJpZnlQYXlsb2FkLmxpYWJpbGl0eVNoaWZ0ZWQ7IC8vIGJvb2xlYW5cbiAqICAgICAgIHZlcmlmeVBheWxvYWQubGlhYmlsaXR5U2hpZnRQb3NzaWJsZTsgLy8gYm9vbGVhblxuICogICAgIH0pO1xuICogICB9XG4gKiB9LCBmdW5jdGlvbiAodmVyaWZ5RXJyb3IsIHBheWxvYWQpIHtcbiAqICAgaWYgKHZlcmlmeUVycm9yKSB7XG4gKiAgICAgaWYgKHZlcmlmeUVycm9yLmNvZGUgPT09ICdUSFJFRURTX1ZFUklGWV9DQVJEX0NBTkNFTEVEX0JZX01FUkNIQU5UICcpIHtcbiAqICAgICAgIC8vIGZsb3cgd2FzIGNhbmNlbGVkIGJ5IG1lcmNoYW50LCAzZHMgaW5mbyBjYW4gYmUgZm91bmQgaW4gdGhlIHBheWxvYWRcbiAqICAgICAgIC8vIGZvciBjYW5jZWxWZXJpZnlDYXJkXG4gKiAgICAgfVxuICogICB9XG4gKiB9KTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkNhbmNlbCB0aGUgdmVyaWZpY2F0aW9uIGluIDNEIFNlY3VyZSB2ZXJzaW9uIDE8L2NhcHRpb24+XG4gKiAvLyB1bmxpa2Ugd2l0aCB2MiwgdGhpcyB3aWxsIG5vdCBjYXVzZSBgdmVyaWZ5Q2FyZGAgdG8gZXJyb3IsIGl0IHdpbGwgc2ltcGx5XG4gKiAvLyBuZXZlciBjYWxsIHRoZSBjYWxsYmFja1xuICogdGhyZWVEU2VjdXJlLmNhbmNlbFZlcmlmeUNhcmQoZnVuY3Rpb24gKGVyciwgdmVyaWZ5UGF5bG9hZCkge1xuICogICBpZiAoZXJyKSB7XG4gKiAgICAgLy8gSGFuZGxlIGVycm9yXG4gKiAgICAgY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpOyAvLyBObyB2ZXJpZmljYXRpb24gcGF5bG9hZCBhdmFpbGFibGVcbiAqICAgICByZXR1cm47XG4gKiAgIH1cbiAqXG4gKiAgIHZlcmlmeVBheWxvYWQubm9uY2U7IC8vIFRoZSBub25jZSByZXR1cm5lZCBmcm9tIHRoZSAzZHMgbG9va3VwIGNhbGxcbiAqICAgdmVyaWZ5UGF5bG9hZC5saWFiaWxpdHlTaGlmdGVkOyAvLyBib29sZWFuXG4gKiAgIHZlcmlmeVBheWxvYWQubGlhYmlsaXR5U2hpZnRQb3NzaWJsZTsgLy8gYm9vbGVhblxuICogfSk7XG4gKi9cblRocmVlRFNlY3VyZS5wcm90b3R5cGUuY2FuY2VsVmVyaWZ5Q2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2ZyYW1ld29yay5jYW5jZWxWZXJpZnlDYXJkKCk7XG59O1xuXG4vKipcbiAqIENsZWFubHkgcmVtb3ZlIGFueXRoaW5nIHNldCB1cCBieSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvdGhyZWUtZC1zZWN1cmUuY3JlYXRlfGNyZWF0ZX0sIHdpdGggdGhlIGV4Y2VwdGlvbiB0aGF0IHRoZSBDYXJkaW5hbCBTREssIG9uIHdpbmRvdy5DYXJkaW5hbCwgd2lsbCByZW1haW4uXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxlZCBvbiBjb21wbGV0aW9uLiBJZiBubyBjYWxsYmFjayBpcyBwYXNzZWQsIGB0ZWFyZG93bmAgd2lsbCByZXR1cm4gYSBwcm9taXNlLlxuICogQGV4YW1wbGVcbiAqIHRocmVlRFNlY3VyZS50ZWFyZG93bigpO1xuICogQGV4YW1wbGUgPGNhcHRpb24+V2l0aCBjYWxsYmFjazwvY2FwdGlvbj5cbiAqIHRocmVlRFNlY3VyZS50ZWFyZG93bihmdW5jdGlvbiAoKSB7XG4gKiAgIC8vIHRlYXJkb3duIGlzIGNvbXBsZXRlXG4gKiB9KTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cblRocmVlRFNlY3VyZS5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBtZXRob2ROYW1lcyA9IG1ldGhvZHMoVGhyZWVEU2VjdXJlLnByb3RvdHlwZSkuY29uY2F0KFxuICAgIG1ldGhvZHMoRXZlbnRFbWl0dGVyLnByb3RvdHlwZSlcbiAgKTtcblxuICBjb252ZXJ0TWV0aG9kc1RvRXJyb3IodGhpcywgbWV0aG9kTmFtZXMpO1xuXG4gIHJldHVybiB0aGlzLl9mcmFtZXdvcmsudGVhcmRvd24oKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gd3JhcFByb21pc2Uud3JhcFByb3RvdHlwZShUaHJlZURTZWN1cmUpO1xuXG59LHtcIi4uLy4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIjoxMjcsXCIuLi8uLi9saWIvbWV0aG9kc1wiOjE1NSxcIi4vZnJhbWV3b3Jrc1wiOjE5MyxcIkBicmFpbnRyZWUvZXZlbnQtZW1pdHRlclwiOjMzLFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0M31dLDE5ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbi8qKiBAbW9kdWxlIGJyYWludHJlZS13ZWIvdGhyZWUtZC1zZWN1cmUgKi9cblxudmFyIFRocmVlRFNlY3VyZSA9IF9kZXJlcV8oXCIuL2V4dGVybmFsL3RocmVlLWQtc2VjdXJlXCIpO1xudmFyIGlzSFRUUFMgPSBfZGVyZXFfKFwiLi4vbGliL2lzLWh0dHBzXCIpLmlzSFRUUFM7XG52YXIgYmFzaWNDb21wb25lbnRWZXJpZmljYXRpb24gPSBfZGVyZXFfKFwiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIik7XG52YXIgY3JlYXRlRGVmZXJyZWRDbGllbnQgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIik7XG52YXIgY3JlYXRlQXNzZXRzVXJsID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGFuYWx5dGljcyA9IF9kZXJlcV8oXCIuLi9saWIvYW5hbHl0aWNzXCIpO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL3NoYXJlZC9lcnJvcnNcIik7XG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBmdW5jdGlvbiBjcmVhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIENyZWF0aW9uIG9wdGlvbnM6XG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuY2FyZGluYWxTREtDb25maWddIEEgY29uZmlnIGZvciB0aGUgdW5kZXJseWluZyBDYXJkaW5hbCBTREsuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuY2FyZGluYWxTREtDb25maWcubG9nZ2luZ10gVGhlIGxvZ2dpbmcgY29uZmlndXJhdGlvbiBmb3IgdGhlIENhcmRpbmFsIFNESy4gU2VlIFtDYXJkaW5hbCdzIGRvY3VtZW50YXRpb24gZm9yIHRoZSBsb2dnaW5nIG9iamVjdF0oaHR0cHM6Ly9jYXJkaW5hbGRvY3MuYXRsYXNzaWFuLm5ldC93aWtpL3NwYWNlcy9DQy9wYWdlcy8xNDA5NTY4L0NvbmZpZ3VyYXRpb25zI0NvbmZpZ3VyYXRpb25zLUxvZ2dpbmcpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmNhcmRpbmFsU0RLQ29uZmlnLnRpbWVvdXRdIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBhIHJlcXVlc3QgdG8gQ2FyZGluYWwncyBBUEkgdGltZXMgb3V0LiBTZWUgW0NhcmRpbmFsJ3MgZG9jdW1lbnRhdGlvbiBmb3Igcm9vdCBsZXZlbCBjb25maWd1cmF0aW9uXShodHRwczovL2NhcmRpbmFsZG9jcy5hdGxhc3NpYW4ubmV0L3dpa2kvc3BhY2VzL0NDL3BhZ2VzLzE0MDk1NjgvQ29uZmlndXJhdGlvbnMjQ29uZmlndXJhdGlvbnMtUm9vdExldmVsQ29uZmlndXJhdGlvbikgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY2FyZGluYWxTREtDb25maWcubWF4UmVxdWVzdFJldHJpZXNdIEhvdyBtYW55IHRpbWVzIGEgcmVxdWVzdCBzaG91bGQgYmUgcmUtYXR0ZW1wdGVkIHRvIENhcmRpbmFsJ3MgQVBJIGJlZm9yZSBnaXZpbmcgdXAgYXMgYSBmYWlsdXJlLiBTZWUgW0NhcmRpbmFsJ3MgZG9jdW1lbnRhdGlvbiBmb3Igcm9vdCBsZXZlbCBjb25maWd1cmF0aW9uXShodHRwczovL2NhcmRpbmFsZG9jcy5hdGxhc3NpYW4ubmV0L3dpa2kvc3BhY2VzL0NDL3BhZ2VzLzE0MDk1NjgvQ29uZmlndXJhdGlvbnMjQ29uZmlndXJhdGlvbnMtUm9vdExldmVsQ29uZmlndXJhdGlvbikgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuY2FyZGluYWxTREtDb25maWcucGF5bWVudF0gQW4gb2JqZWN0IHRvIGRlc2NyaWJlIGhvdyB5b3Ugd2FudCB0aGUgdXNlciBpbnRlcmFjdGlvbnMgdG8gYmVoYXZlLiBPbmx5IGEgc3Vic2V0IG9mIHRoZSBbQ2FyZGluYWwgU0RLIHBheW1lbnQgY29uZmlndXJhdGlvbiBvYmplY3RdKGh0dHBzOi8vY2FyZGluYWxkb2NzLmF0bGFzc2lhbi5uZXQvd2lraS9zcGFjZXMvQ0MvcGFnZXMvMTQwOTU2OC9Db25maWd1cmF0aW9ucyNDb25maWd1cmF0aW9ucy1QYXltZW50KSBhcmUgc3VwcG9ydGVkOiBgZGlzcGxheUxvYWRpbmdgIGFuZCBgZGlzcGxheUV4aXRCdXR0b25gLlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBbb3B0aW9ucy52ZXJzaW9uPTFdIFRoZSB2ZXJzaW9uIG9mIDNEIFNlY3VyZSB0byB1c2UuIFBvc3NpYmxlIG9wdGlvbnM6XG4gKiAqIDEgLSBUaGUgbGVnYWN5IDNEIFNlY3VyZSB2MS4wIGludGVncmF0aW9uLlxuICogKiAyIC0gQSAzRCBTZWN1cmUgdjIuMCBpbnRlZ3JhdGlvbiB0aGF0IHVzZXMgYSBtb2RhbCB0byBob3N0IHRoZSAzRCBTZWN1cmUgaWZyYW1lLlxuICogKiAyLWJvb3RzdHJhcDMtbW9kYWwgLSBBIDNEIFNlY3VyZSB2Mi4wIGludGVncmF0aW9uIHRoYXQgdXNlcyBhIG1vZGFsIHN0eWxlZCB3aXRoIEJvb3RzdHJhcCAzIHN0eWxlcyB0byBob3N0IHRoZSAzRCBTZWN1cmUgaWZyYW1lLiBSZXF1aXJlcyBoYXZpbmcgdGhlIEJvb3RzdHJhcCAzIHNjcmlwdCBmaWxlcyBhbmQgc3R5bGVzaGVldHMgb24geW91ciBwYWdlLlxuICogKiAyLWlubGluZS1pZnJhbWUgLSBBIDNEIFNlY3VyZSB2Mi4wIGludGVncmF0aW9uIHRoYXQgcHJvdmlkZXMgdGhlIGF1dGhlbnRpY2F0aW9uIGlmcmFtZSBkaXJlY3RseSB0byB0aGUgbWVyY2hhbnQuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIGBkYXRhYCwgaXMgdGhlIHtAbGluayBUaHJlZURTZWN1cmV9IGluc3RhbmNlLiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgaXQgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0aGUge0BsaW5rIFRocmVlRFNlY3VyZX0gaW5zdGFuY2UuXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuQGV4YW1wbGVcbiAqIDxjYXB0aW9uPkNyZWF0aW5nIGEgdjIgM0QgU2VjdXJlIGNvbXBvbmVudCB1c2luZyAyIHZlcnNpb24gKENhcmRpbmFsIG1vZGFsKTwvY2FwdGlvbj5cbiAqIGJyYWludHJlZS50aHJlZURTZWN1cmUuY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAqICAgdmVyc2lvbjogJzInXG4gKiB9LCBmdW5jdGlvbiAoY3JlYXRlRXJyb3IsIHRocmVlRFNlY3VyZSkge1xuICogICAvLyBzZXQgdXAgbG9va3VwLWNvbXBsZXRlIGxpc3RlbmVyXG4gKiAgIHRocmVlRFNlY3VyZS5vbignbG9va3VwLWNvbXBsZXRlJywgZnVuY3Rpb24gKGRhdGEsIG5leHQpIHtcbiAqICAgICAvLyBjaGVjayBsb29rdXAgZGF0YVxuICpcbiAqICAgICBuZXh0KCk7XG4gKiAgIH0pO1xuICpcbiAqICAgLy8gdXNpbmcgSG9zdGVkIEZpZWxkcywgdXNlIGB0b2tlbml6ZWAgdG8gZ2V0IGJhY2sgYSBjcmVkaXQgY2FyZCBub25jZVxuICpcbiAqICAgdGhyZWVEU2VjdXJlLnZlcmlmeUNhcmQoe1xuICogICAgIG5vbmNlOiBub25jZUZyb21Ub2tlbml6YXRpb25QYXlsb2FkLCxcbiAqICAgICBiaW46IGJpbkZyb21Ub2tlbml6YXRpb25QYXlsb2FkLFxuICogICAgIGFtb3VudDogJzEwMC4wMCdcbiAqICAgfSwgZnVuY3Rpb24gKHZlcmlmeUVycm9yLCBwYXlsb2FkKSB7XG4gKiAgICAgLy8gaW5zcGVjdCBwYXlsb2FkXG4gKiAgICAgLy8gc2VuZCBwYXlsb2FkLm5vbmNlIHRvIHlvdXIgc2VydmVyXG4gKiAgIH0pO1xuICogfSk7XG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+Q3JlYXRpbmcgYSB2MiAzRCBTZWN1cmUgY29tcG9uZW50IHVzaW5nIDItYm9vdHN0cmFwMy1tb2RhbCB2ZXJzaW9uPC9jYXB0aW9uPlxuICogLy8gbXVzdCBoYXZlIHRoZSBib29zdHJhcCBqcywgY3NzIGFuZCBqcXVlcnkgZmlsZXMgb24geW91ciBwYWdlXG4gKiBicmFpbnRyZWUudGhyZWVEU2VjdXJlLmNyZWF0ZSh7XG4gKiAgIGNsaWVudDogY2xpZW50SW5zdGFuY2UsXG4gKiAgIHZlcnNpb246ICcyLWJvb3RzdHJhcDMtbW9kYWwnXG4gKiB9LCBmdW5jdGlvbiAoY3JlYXRlRXJyb3IsIHRocmVlRFNlY3VyZSkge1xuICogICAvLyBzZXQgdXAgbG9va3VwLWNvbXBsZXRlIGxpc3RlbmVyXG4gKiAgIHRocmVlRFNlY3VyZS5vbignbG9va3VwLWNvbXBsZXRlJywgZnVuY3Rpb24gKGRhdGEsIG5leHQpIHtcbiAqICAgICAvLyBjaGVjayBsb29rdXAgZGF0YVxuICpcbiAqICAgICBuZXh0KCk7XG4gKiAgIH0pO1xuICpcbiAqICAgLy8gdXNpbmcgSG9zdGVkIEZpZWxkcywgdXNlIGB0b2tlbml6ZWAgdG8gZ2V0IGJhY2sgYSBjcmVkaXQgY2FyZCBub25jZVxuICpcbiAqICAgLy8gY2hhbGxlbmdlIHdpbGwgYmUgcHJlc2VudGVkIGluIGEgYm9vdHN0cmFwIDMgbW9kYWxcbiAqICAgdGhyZWVEU2VjdXJlLnZlcmlmeUNhcmQoe1xuICogICAgIG5vbmNlOiBub25jZUZyb21Ub2tlbml6YXRpb25QYXlsb2FkLFxuICogICAgIGJpbjogYmluRnJvbVRva2VuaXphdGlvblBheWxvYWQsXG4gKiAgICAgYW1vdW50OiAnMTAwLjAwJ1xuICogICB9LCBmdW5jdGlvbiAodmVyaWZ5RXJyb3IsIHBheWxvYWQpIHtcbiAqICAgICAvLyBpbnNwZWN0IHBheWxvYWRcbiAqICAgICAvLyBzZW5kIHBheWxvYWQubm9uY2UgdG8geW91ciBzZXJ2ZXJcbiAqICAgfSk7XG4gKiB9KTtcbiAqIEBleGFtcGxlXG4gKiA8Y2FwdGlvbj5DcmVhdGluZyBhIHYyIDNEIFNlY3VyZSBjb21wb25lbnQgdXNpbmcgMi1pbmxpbmUtaWZyYW1lIHZlcnNpb248L2NhcHRpb24+XG4gKiBicmFpbnRyZWUudGhyZWVEU2VjdXJlLmNyZWF0ZSh7XG4gKiAgIGNsaWVudDogY2xpZW50SW5zdGFuY2UsXG4gKiAgIHZlcnNpb246ICcyLWlubGluZS1pZnJhbWUnXG4gKiB9LCBmdW5jdGlvbiAoY3JlYXRlRXJyb3IsIHRocmVlRFNlY3VyZSkge1xuICogICAvLyBzZXQgdXAgbG9va3VwLWNvbXBsZXRlIGxpc3RlbmVyXG4gKiAgIHRocmVlRFNlY3VyZS5vbignbG9va3VwLWNvbXBsZXRlJywgZnVuY3Rpb24gKGRhdGEsIG5leHQpIHtcbiAqICAgICAvLyBjaGVjayBsb29rdXAgZGF0YVxuICpcbiAqICAgICBuZXh0KCk7XG4gKiAgIH0pO1xuICogICAvLyBzZXQgdXAgaWZyYW1lIGxpc3RlbmVyXG4gKiAgIHRocmVlRFNlY3VyZS5vbignYXV0aGVudGljYXRpb24taWZyYW1lLWF2YWlsYWJsZScsIGZ1bmN0aW9uIChldmVudCwgbmV4dCkge1xuICogICAgIHZhciBlbGVtZW50ID0gZXZlbnQuZWxlbWVudDsgLy8gYW4gaHRtbCBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIGlmcmFtZVxuICpcbiAqICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpOyAvLyBwdXQgaXQgb24geW91ciBwYWdlXG4gKlxuICogICAgIG5leHQoKTsgLy8gbGV0IHRoZSBzZGsga25vdyB0aGUgZWxlbWVudCBoYXMgYmVlbiBhZGRlZCB0byB0aGUgcGFnZVxuICogICB9KTtcbiAqXG4gKiAgIC8vIHVzaW5nIEhvc3RlZCBGaWVsZHMsIHVzZSBgdG9rZW5pemVgIHRvIGdldCBiYWNrIGEgY3JlZGl0IGNhcmQgbm9uY2VcbiAqXG4gKiAgIHRocmVlRFNlY3VyZS52ZXJpZnlDYXJkKHtcbiAqICAgICBub25jZTogbm9uY2VGcm9tVG9rZW5pemF0aW9uUGF5bG9hZCwsXG4gKiAgICAgYmluOiBiaW5Gcm9tVG9rZW5pemF0aW9uUGF5bG9hZCxcbiAqICAgICBhbW91bnQ6ICcxMDAuMDAnXG4gKiAgIH0sIGZ1bmN0aW9uICh2ZXJpZnlFcnJvciwgcGF5bG9hZCkge1xuICogICAgIC8vIGluc3BlY3QgcGF5bG9hZFxuICogICAgIC8vIHNlbmQgcGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlclxuICogICB9KTtcbiAqIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IFwiM0QgU2VjdXJlXCI7XG4gIHZhciBmcmFtZXdvcmsgPSBnZXRGcmFtZXdvcmsob3B0aW9ucyk7XG5cbiAgcmV0dXJuIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uXG4gICAgLnZlcmlmeSh7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgY2xpZW50OiBvcHRpb25zLmNsaWVudCxcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhc3NldHNVcmwgPSBjcmVhdGVBc3NldHNVcmwuY3JlYXRlKG9wdGlvbnMuYXV0aG9yaXphdGlvbik7XG4gICAgICB2YXIgY3JlYXRlUHJvbWlzZSA9IGNyZWF0ZURlZmVycmVkQ2xpZW50XG4gICAgICAgIC5jcmVhdGUoe1xuICAgICAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgICAgIGRlYnVnOiBvcHRpb25zLmRlYnVnLFxuICAgICAgICAgIGFzc2V0c1VybDogYXNzZXRzVXJsLFxuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICB2YXIgZXJyb3IsIGlzUHJvZHVjdGlvbjtcbiAgICAgICAgICB2YXIgY29uZmlnID0gY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICAgICAgICB2YXIgZ3dDb25maWcgPSBjb25maWcuZ2F0ZXdheUNvbmZpZ3VyYXRpb247XG5cbiAgICAgICAgICBvcHRpb25zLmNsaWVudCA9IGNsaWVudDtcblxuICAgICAgICAgIGlmICghZ3dDb25maWcudGhyZWVEU2VjdXJlRW5hYmxlZCkge1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvcnMuVEhSRUVEU19OT1RfRU5BQkxFRDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY29uZmlnLmF1dGhvcml6YXRpb25UeXBlID09PSBcIlRPS0VOSVpBVElPTl9LRVlcIikge1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvcnMuVEhSRUVEU19DQU5fTk9UX1VTRV9UT0tFTklaQVRJT05fS0VZO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlzUHJvZHVjdGlvbiA9IGd3Q29uZmlnLmVudmlyb25tZW50ID09PSBcInByb2R1Y3Rpb25cIjtcblxuICAgICAgICAgIGlmIChpc1Byb2R1Y3Rpb24gJiYgIWlzSFRUUFMoKSkge1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvcnMuVEhSRUVEU19IVFRQU19SRVFVSVJFRDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBmcmFtZXdvcmsgIT09IFwibGVnYWN5XCIgJiZcbiAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgIGd3Q29uZmlnLnRocmVlRFNlY3VyZSAmJlxuICAgICAgICAgICAgICBnd0NvbmZpZy50aHJlZURTZWN1cmUuY2FyZGluYWxBdXRoZW50aWNhdGlvbkpXVFxuICAgICAgICAgICAgKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgICAgICAgb3B0aW9ucy5jbGllbnQsXG4gICAgICAgICAgICAgIFwidGhyZWUtZC1zZWN1cmUuaW5pdGlhbGl6YXRpb24uZmFpbGVkLm1pc3NpbmctY2FyZGluYWxBdXRoZW50aWNhdGlvbkpXVFwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvcnMuVEhSRUVEU19OT1RfRU5BQkxFRF9GT1JfVjI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEJyYWludHJlZUVycm9yKGVycm9yKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChvcHRpb25zLmNsaWVudCwgXCJ0aHJlZS1kLXNlY3VyZS5pbml0aWFsaXplZFwiKTtcblxuICAgICAgICAgIHJldHVybiBjbGllbnQ7XG4gICAgICAgIH0pO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFRocmVlRFNlY3VyZSh7XG4gICAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICAgIGFzc2V0c1VybDogYXNzZXRzVXJsLFxuICAgICAgICBjcmVhdGVQcm9taXNlOiBjcmVhdGVQcm9taXNlLFxuICAgICAgICBsb2dnaW5nRW5hYmxlZDogb3B0aW9ucy5sb2dnaW5nRW5hYmxlZCxcbiAgICAgICAgY2FyZGluYWxTREtDb25maWc6IG9wdGlvbnMuY2FyZGluYWxTREtDb25maWcsXG4gICAgICAgIGZyYW1ld29yazogZnJhbWV3b3JrLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChvcHRpb25zLmNsaWVudCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlUHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEZyYW1ld29yayhvcHRpb25zKSB7XG4gIHZhciB2ZXJzaW9uID0gU3RyaW5nKG9wdGlvbnMudmVyc2lvbiB8fCBcIlwiKTtcblxuICBpZiAoIXZlcnNpb24gfHwgdmVyc2lvbiA9PT0gXCIxXCIpIHtcbiAgICB0aHJvdyBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgY29kZTogZXJyb3JzLlRIUkVFRFNfVU5TVVBQT1JURURfVkVSU0lPTi5jb2RlLFxuICAgICAgdHlwZTogZXJyb3JzLlRIUkVFRFNfVU5TVVBQT1JURURfVkVSU0lPTi50eXBlLFxuICAgICAgbWVzc2FnZTogZXJyb3JzLlRIUkVFRFNfVU5TVVBQT1JURURfVkVSU0lPTi5tZXNzYWdlLFxuICAgIH0pO1xuICB9XG5cbiAgc3dpdGNoICh2ZXJzaW9uKSB7XG4gICAgY2FzZSBcIjJcIjpcbiAgICBjYXNlIFwiMi1jYXJkaW5hbC1tb2RhbFwiOlxuICAgICAgcmV0dXJuIFwiY2FyZGluYWwtbW9kYWxcIjtcbiAgICBjYXNlIFwiMi1ib290c3RyYXAzLW1vZGFsXCI6XG4gICAgICByZXR1cm4gXCJib290c3RyYXAzLW1vZGFsXCI7XG4gICAgY2FzZSBcIjItaW5saW5lLWlmcmFtZVwiOlxuICAgICAgcmV0dXJuIFwiaW5saW5lLWlmcmFtZVwiO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICBjb2RlOiBlcnJvcnMuVEhSRUVEU19VTlJFQ09HTklaRURfVkVSU0lPTi5jb2RlLFxuICAgICAgICB0eXBlOiBlcnJvcnMuVEhSRUVEU19VTlJFQ09HTklaRURfVkVSU0lPTi50eXBlLFxuICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgIFwiVmVyc2lvbiBgXCIgK1xuICAgICAgICAgIG9wdGlvbnMudmVyc2lvbiArXG4gICAgICAgICAgXCJgIGlzIG5vdCBhIHJlY29nbml6ZWQgdmVyc2lvbi4gWW91IG1heSBuZWVkIHRvIHVwZGF0ZSB0aGUgdmVyc2lvbiBvZiB5b3VyIEJyYWludHJlZSBTREsgdG8gc3VwcG9ydCB0aGlzIHZlcnNpb24uXCIsXG4gICAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiB3cmFwUHJvbWlzZShjcmVhdGUpLFxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIFNESywgaS5lLiBge0Bwa2cgdmVyc2lvbn1gLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgVkVSU0lPTjogVkVSU0lPTixcbn07XG5cbn0se1wiLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCI6MTIyLFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiOjEyOSxcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCI6MTMxLFwiLi4vbGliL2lzLWh0dHBzXCI6MTUyLFwiLi9leHRlcm5hbC90aHJlZS1kLXNlY3VyZVwiOjE5NyxcIi4vc2hhcmVkL2Vycm9yc1wiOjIwMCxcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCI6NDN9XSwxOTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBMQU5ESU5HX0ZSQU1FX05BTUU6IFwiYnJhaW50cmVldGhyZWVkc2VjdXJlbGFuZGluZ1wiLFxuICBDQVJESU5BTF9TQ1JJUFRfU09VUkNFOiB7XG4gICAgcHJvZHVjdGlvbjogXCJodHRwczovL3NvbmdiaXJkLmNhcmRpbmFsY29tbWVyY2UuY29tL2VkZ2UvdjEvc29uZ2JpcmQuanNcIixcbiAgICBzYW5kYm94OiBcImh0dHBzOi8vc29uZ2JpcmRzdGFnLmNhcmRpbmFsY29tbWVyY2UuY29tL2VkZ2UvdjEvc29uZ2JpcmQuanNcIixcbiAgfSxcbn07XG5cbn0se31dLDIwMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci4zRCBTZWN1cmUgLSBDcmVhdGlvbiBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gW2NyZWF0aW5nIHRoZSAzRCBTZWN1cmUgY29tcG9uZW50XSguL21vZHVsZS1icmFpbnRyZWUtd2ViX3RocmVlLWQtc2VjdXJlLmh0bWwjLmNyZWF0ZSkuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBUSFJFRURTX05PVF9FTkFCTEVEIE9jY3VycyB3aGVuIDNEIFNlY3VyZSBpcyBub3QgZW5hYmxlZCBpbiB0aGUgQnJhaW50cmVlIGNvbnRyb2wgcGFuZWwuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBUSFJFRURTX0NBTl9OT1RfVVNFX1RPS0VOSVpBVElPTl9LRVkgT2NjdXJzIHdoZW4gM0QgU2VjdXJlIGNvbXBvbmVudCBpcyBjcmVhdGVkIHdpdGhvdXQgYSBDbGllbnQgVG9rZW4uXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBUSFJFRURTX0hUVFBTX1JFUVVJUkVEIE9jY3VycyB3aGVuIDNEIFNlY3VyZSBjb21wb25lbnQgaXMgY3JlYXRlZCBpbiBwcm9kdWN0aW9uIG92ZXIgSFRUUFMuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBUSFJFRURTX05PVF9FTkFCTEVEX0ZPUl9WMiBPY2N1cnMgd2hlbiAzRCBTZWN1cmUgY29tcG9uZW50IGlzIGNyZWF0ZWQgd2l0aCB2ZXJzaW9uIDIgcGFyYW1ldGVyLCBidXQgbWVyY2hhbnQgaXMgbm90IGVuYWJsZWQgdG8gdXNlIHZlcnNpb24gMi5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFRIUkVFRFNfVU5SRUNPR05JWkVEX1ZFUlNJT04gT2NjdXJzIHdoZW4gdW5yZWNvZ25pemVkIHZlcnNpb24gZW51bSBpcyBwYXNzZWQgaW50byB0aGUgY3JlYXRlIGNhbGwuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFRIUkVFRFNfQ0FSRElOQUxfU0RLX1NFVFVQX0ZBSUxFRCBPY2N1cnMgd2hlbiBDYXJkaW5hbCdzIFNvbmdiaXJkLmpzIGxpYnJhcnkgZmFpbHMgdG8gc2V0dXAgZm9yIGFuIHVua25vd24gcmVhc29uLlxuICogQHByb3BlcnR5IHtORVRXT1JLfSBUSFJFRURTX0NBUkRJTkFMX1NES19TQ1JJUFRfTE9BRF9GQUlMRUQgT2NjdXJzIHdoZW4gdXNpbmcgdmVyc2lvbiAyIGFuZCBDYXJkaW5hbCdzIFNvbmdiaXJkLmpzIHNjcmlwdCBjb3VsZCBub3QgYmUgbG9hZGVkLlxuICogQHByb3BlcnR5IHtVTktOT1dOfSBUSFJFRURTX0NBUkRJTkFMX1NES19TRVRVUF9USU1FRE9VVCBPY2N1cnMgd2hlbiBDYXJkaW5hbCdzIFNvbmdiaXJkLmpzIGxpYnJhcnkgdGFrZXMgbG9uZ2VyIHRoYW4gNjAgc2Vjb25kcyB0byBzZXQgdXAuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFRIUkVFRFNfQ0FSRElOQUxfU0RLX1JFU1BPTlNFX1RJTUVET1VUIE9jY3VycyB3aGVuIENhcmRpbmFsIHNlbmRzIGEgcmVzcG9uc2UgaW5kaWNhdGluZyBhIHRpbWVvdXQgb24gL1ZhbGlkYXRlLCAvQ29uZmlybSwgb3IgL0NvbnRpbnVlLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gVEhSRUVEU19DQVJESU5BTF9TREtfQkFEX0NPTkZJRyBPY2N1cnMgd2hlbiB0aGVyZSBpcyBubyBKV1QgaW4gdGhlIHJlcXVlc3QuIEFsc28gd2hlbiB0aGVyZSdzIHNvbWUgb3RoZXIgbWFsZm9ybWVkIGFzcGVjdCBvZiBjb25maWcuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBUSFJFRURTX0NBUkRJTkFMX1NES19CQURfSldUIE9jY3VycyB3aGVuIGEgbWFsZm9ybWVkIGNvbmZpZyBjYXVzZXMgYSBlaXRoZXIgYSBtaXNzaW5nIHJlc3BvbnNlIEpXVCBvciBhIG1hbGZvcm1lZCBDYXJkaW5hbCByZXNwb25zZS5cbiAqIEBwcm9wZXJ0eSB7VU5LTk9XTn0gVEhSRUVEU19DQVJESU5BTF9TREtfRVJST1IgT2NjdXJzIHdoZW4gYSBcImdlbmVyYWwgZXJyb3JcIiBvciBhIENhcmRpbmFsIGhvc3RlZCBmaWVsZHMgZXJyb3IgaGFwcGVucy4gRGVzY3JpcHRpb24gY29udGFpbnMgbW9yZSBkZXRhaWxzLlxuICogQHByb3BlcnR5IHtDVVNUT01FUn0gVEhSRUVEU19DQVJESU5BTF9TREtfQ0FOQ0VMRUQgT2NjdXJzIHdoZW4gY3VzdG9tZXIgY2FuY2VscyB0aGUgdHJhbnNhY3Rpb24gbWlkLWZsb3csIHVzdWFsbHkgd2l0aCBhbHQtcGF5cyB0aGF0IGhhdmUgdGhlaXIgb3duIGNhbmNlbCBidXR0b25zLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gVEhSRUVEU19VTlNVUFBPUlRFRF9WRVJTSU9OIE9jY3VycyB3aGVuIDNEIFNlY3VyZSBjb21wb25lbnQgaXMgY3JlYXRlZCB3aXRoIHZlcnNpb24gMSAob3IgZGVmYXVsdCB2ZXJzaW9uKSBwYXJhbWV0ZXIuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci4zRCBTZWN1cmUgLSB2ZXJpZnlDYXJkIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiB1c2luZyB0aGUgW2B2ZXJpZnlDYXJkYCBtZXRob2RdKC4vVGhyZWVEU2VjdXJlLmh0bWwjdmVyaWZ5Q2FyZCkuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBUSFJFRURTX0FVVEhFTlRJQ0FUSU9OX0lOX1BST0dSRVNTIE9jY3VycyB3aGVuIGFub3RoZXIgdmVyaWZpY2F0aW9uIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3MuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBUSFJFRURTX01JU1NJTkdfVkVSSUZZX0NBUkRfT1BUSU9OIE9jY3VycyB3aGVuIGEgcmVxdWlyZWQgb3B0aW9uIGlzIG1pc3NpbmcuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFRIUkVFRFNfSldUX0FVVEhFTlRJQ0FUSU9OX0ZBSUxFRCBPY2N1cnMgd2hlbiBzb21ldGhpbmcgd2VudCB3cm9uZyBhdXRoZW50aWNhdGluZyB0aGUgSldUIGZyb20gdGhlIENhcmRpbmFsIFNESy5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFRIUkVFRFNfTE9PS1VQX1RPS0VOSVpFRF9DQVJEX05PVF9GT1VORF9FUlJPUiBPY2N1cnMgd2hlbiB0aGUgc3VwcGxpZWQgcGF5bWVudCBtZXRob2Qgbm9uY2UgZG9lcyBub3QgZXhpc3Qgb3IgdGhlIHBheW1lbnQgbWV0aG9kIG5vbmNlIGhhcyBhbHJlYWR5IGJlZW4gY29uc3VtZWQuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBUSFJFRURTX0xPT0tVUF9WQUxJREFUSU9OX0VSUk9SIE9jY3VycyB3aGVuIGEgdmFsaWRhdGlvbiBlcnJvciBvY2N1cnMgZHVyaW5nIHRoZSAzRCBTZWN1cmUgbG9va3VwLlxuICogQHByb3BlcnR5IHtVTktOT1dOfSBUSFJFRURTX0xPT0tVUF9FUlJPUiBBbiB1bmtub3duIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdGhlIDNEIFNlY3VyZSBsb29rdXAuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBUSFJFRURTX1ZFUklGWV9DQVJEX0NBTkNFTEVEX0JZX01FUkNIQU5UIE9jY3VycyB3aGVuIHRoZSAzRCBTZWN1cmUgZmxvdyBpcyBjYW5jZWxlZCBieSB0aGUgbWVyY2hhbnQgdXNpbmcgYGNhbmNlbFZlcmlmeUNhcmRgICgzRCBTZWN1cmUgdjIgZmxvd3Mgb25seSkuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFRIUkVFRFNfSU5MSU5FX0lGUkFNRV9ERVRBSUxTX0lOQ09SUkVDVCBBbiB1bmtub3duIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gdXNlIHRoZSBpbmxpbmUgaWZyYW1lIGZyYW1ld29yay5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFRIUkVFRFNfUkVRVUVTVEVEX0VYRU1QVElPTl9UWVBFX0lOVkFMSUQgT2NjdXJzIHdoZW4gdW5yZWNvZ25pemVkIGV4ZW1wdGlvbiBlbnVtIHZhbHVlIGlzIHBhc3NlZCBpbnRvIHZlcmlmeUNhcmQuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci4zRCBTZWN1cmUgLSBjYW5jZWxWZXJpZnlDYXJkIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiB1c2luZyB0aGUgW2BjYW5jZWxWZXJpZnlDYXJkYCBtZXRob2RdKC4vVGhyZWVEU2VjdXJlLmh0bWwjY2FuY2VsVmVyaWZ5Q2FyZCkuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBUSFJFRURTX05PX1ZFUklGSUNBVElPTl9QQVlMT0FEIE9jY3VycyB3aGVuIHRoZSAzRCBTZWN1cmUgZmxvdyBpcyBjYW5jZWxlZCwgYnV0IHRoZXJlIGlzIG5vIDNEIFNlY3VyZSBpbmZvcm1hdGlvbiBhdmFpbGFibGUuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci4zRCBTZWN1cmUgLSBJbnRlcm5hbCBFcnJvciBDb2Rlc1xuICogQGlnbm9yZVxuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIGludGVybmFsbHlcbiAqIEBwcm9wZXJ0eSB7SU5URVJOQUx9IFRIUkVFRFNfVEVSTV9VUkxfUkVRVUlSRVNfQlJBSU5UUkVFX0RPTUFJTiBPY2N1cnMgd2hlbiBpZnJhbWUgaXMgaW5pdGlhbGl6ZWQgb24gYSBub24tdmVyaWZpZWQgZG9tYWluLlxuICogQHByb3BlcnR5IHtJTlRFUk5BTH0gVEhSRUVEU19GUkFNRVdPUktfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCBPY2N1cnMgd2hlbiBhIDNEIFNlY3VyZSBmcmFtZXdvcmsgbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cbiAqL1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFRIUkVFRFNfTk9UX0VOQUJMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlRIUkVFRFNfTk9UX0VOQUJMRURcIixcbiAgICBtZXNzYWdlOiBcIjNEIFNlY3VyZSBpcyBub3QgZW5hYmxlZCBmb3IgdGhpcyBtZXJjaGFudC5cIixcbiAgfSxcbiAgVEhSRUVEU19DQU5fTk9UX1VTRV9UT0tFTklaQVRJT05fS0VZOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJUSFJFRURTX0NBTl9OT1RfVVNFX1RPS0VOSVpBVElPTl9LRVlcIixcbiAgICBtZXNzYWdlOiBcIjNEIFNlY3VyZSBjYW4gbm90IHVzZSBhIHRva2VuaXphdGlvbiBrZXkgZm9yIGF1dGhvcml6YXRpb24uXCIsXG4gIH0sXG4gIFRIUkVFRFNfSFRUUFNfUkVRVUlSRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlRIUkVFRFNfSFRUUFNfUkVRVUlSRURcIixcbiAgICBtZXNzYWdlOiBcIjNEIFNlY3VyZSByZXF1aXJlcyBIVFRQUy5cIixcbiAgfSxcbiAgVEhSRUVEU19OT1RfRU5BQkxFRF9GT1JfVjI6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlRIUkVFRFNfTk9UX0VOQUJMRURfRk9SX1YyXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiM0QgU2VjdXJlIHZlcnNpb24gMiBpcyBub3QgZW5hYmxlZCBmb3IgdGhpcyBtZXJjaGFudC4gQ29udGFjdCBCcmFpbnRyZWUgU3VwcG9ydCBmb3IgYXNzaXN0YW5jZSBhdCBodHRwczovL2hlbHAuYnJhaW50cmVlcGF5bWVudHMuY29tL1wiLFxuICB9LFxuICBUSFJFRURTX1VOUkVDT0dOSVpFRF9WRVJTSU9OOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJUSFJFRURTX1VOUkVDT0dOSVpFRF9WRVJTSU9OXCIsXG4gIH0sXG4gIFRIUkVFRFNfQ0FSRElOQUxfU0RLX1NFVFVQX0ZBSUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLlVOS05PV04sXG4gICAgY29kZTogXCJUSFJFRURTX0NBUkRJTkFMX1NES19TRVRVUF9GQUlMRURcIixcbiAgICBtZXNzYWdlOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHNldHRpbmcgdXAgQ2FyZGluYWwncyBTb25nYmlyZC5qcyBsaWJyYXJ5LlwiLFxuICB9LFxuICBUSFJFRURTX0NBUkRJTkFMX1NES19TQ1JJUFRfTE9BRF9GQUlMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5ORVRXT1JLLFxuICAgIGNvZGU6IFwiVEhSRUVEU19DQVJESU5BTF9TREtfU0NSSVBUX0xPQURfRkFJTEVEXCIsXG4gICAgbWVzc2FnZTogXCJDYXJkaW5hbCdzIFNvbmdiaXJkLmpzIGxpYnJhcnkgY291bGQgbm90IGJlIGxvYWRlZC5cIixcbiAgfSxcbiAgVEhSRUVEU19DQVJESU5BTF9TREtfU0VUVVBfVElNRURPVVQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5VTktOT1dOLFxuICAgIGNvZGU6IFwiVEhSRUVEU19DQVJESU5BTF9TREtfU0VUVVBfVElNRURPVVRcIixcbiAgICBtZXNzYWdlOiBcIkNhcmRpbmFsJ3MgU29uZ2JpcmQuanMgdG9vayB0b28gbG9uZyB0byBzZXR1cC5cIixcbiAgfSxcbiAgVEhSRUVEU19DQVJESU5BTF9TREtfUkVTUE9OU0VfVElNRURPVVQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5VTktOT1dOLFxuICAgIGNvZGU6IFwiVEhSRUVEU19DQVJESU5BTF9TREtfUkVTUE9OU0VfVElNRURPVVRcIixcbiAgICBtZXNzYWdlOiBcIkNhcmRpbmFsJ3MgQVBJIHRvb2sgdG9vIGxvbmcgdG8gcmVzcG9uZC5cIixcbiAgfSxcbiAgVEhSRUVEU19DQVJESU5BTF9TREtfQkFEX0NPTkZJRzoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVEhSRUVEU19DQVJESU5BTF9TREtfQkFEX0NPTkZJR1wiLFxuICAgIG1lc3NhZ2U6XG4gICAgICBcIkpXVCBvciBvdGhlciByZXF1aXJlZCBmaWVsZCBtaXNzaW5nLiBQbGVhc2UgY2hlY2sgeW91ciBzZXR1cCBjb25maWd1cmF0aW9uLlwiLFxuICB9LFxuICBUSFJFRURTX0NBUkRJTkFMX1NES19CQURfSldUOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJUSFJFRURTX0NBUkRJTkFMX1NES19CQURfSldUXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiQ2FyZGluYWwgSldUIG1pc3Npbmcgb3IgbWFsZm9ybWVkLiBQbGVhc2UgY2hlY2sgeW91ciBzZXR1cCBjb25maWd1cmF0aW9uLlwiLFxuICB9LFxuICBUSFJFRURTX0NBUkRJTkFMX1NES19FUlJPUjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLlVOS05PV04sXG4gICAgY29kZTogXCJUSFJFRURTX0NBUkRJTkFMX1NES19FUlJPUlwiLFxuICAgIG1lc3NhZ2U6XG4gICAgICBcIkEgZ2VuZXJhbCBlcnJvciBoYXMgb2NjdXJyZWQgd2l0aCBDYXJkaW5hbC4gU2VlIGRlc2NyaXB0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiLFxuICB9LFxuICBUSFJFRURTX0NBUkRJTkFMX1NES19DQU5DRUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiVEhSRUVEU19DQVJESU5BTF9TREtfQ0FOQ0VMRURcIixcbiAgICBtZXNzYWdlOiBcIkNhbmNlbGVkIGJ5IHVzZXIuXCIsXG4gIH0sXG4gIFRIUkVFRFNfVkVSSUZZX0NBUkRfQ0FOQ0VMRURfQllfTUVSQ0hBTlQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlRIUkVFRFNfVkVSSUZZX0NBUkRfQ0FOQ0VMRURfQllfTUVSQ0hBTlRcIixcbiAgICBtZXNzYWdlOiBcIjNEIFNlY3VyZSB2ZXJmaWNhdGlvbiBjYW5jZWxlZCBieSBtZXJjaGFudC5cIixcbiAgfSxcbiAgVEhSRUVEU19BVVRIRU5USUNBVElPTl9JTl9QUk9HUkVTUzoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVEhSRUVEU19BVVRIRU5USUNBVElPTl9JTl9QUk9HUkVTU1wiLFxuICAgIG1lc3NhZ2U6XG4gICAgICBcIkNhbm5vdCBjYWxsIHZlcmlmeUNhcmQgd2hpbGUgZXhpc3RpbmcgYXV0aGVudGljYXRpb24gaXMgaW4gcHJvZ3Jlc3MuXCIsXG4gIH0sXG4gIFRIUkVFRFNfTUlTU0lOR19WRVJJRllfQ0FSRF9PUFRJT046IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlRIUkVFRFNfTUlTU0lOR19WRVJJRllfQ0FSRF9PUFRJT05cIixcbiAgfSxcbiAgVEhSRUVEU19KV1RfQVVUSEVOVElDQVRJT05fRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuVU5LTk9XTixcbiAgICBjb2RlOiBcIlRIUkVFRFNfSldUX0FVVEhFTlRJQ0FUSU9OX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiU29tZXRoaW5nIHdlbnQgd3JvbmcgYXV0aGVudGljYXRpbmcgdGhlIEpXVCBmcm9tIENhcmRpbmFsXCIsXG4gIH0sXG4gIFRIUkVFRFNfTE9PS1VQX1RPS0VOSVpFRF9DQVJEX05PVF9GT1VORF9FUlJPUjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVEhSRUVEU19MT09LVVBfVE9LRU5JWkVEX0NBUkRfTk9UX0ZPVU5EX0VSUk9SXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiRWl0aGVyIHRoZSBwYXltZW50IG1ldGhvZCBub25jZSBwYXNzZWQgdG8gYHZlcmlmeUNhcmRgIGRvZXMgbm90IGV4aXN0LCBvciBpdCB3YXMgYWxyZWFkeSBjb25zdW1lZFwiLFxuICB9LFxuICBUSFJFRURTX0xPT0tVUF9WQUxJREFUSU9OX0VSUk9SOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuQ1VTVE9NRVIsXG4gICAgY29kZTogXCJUSFJFRURTX0xPT0tVUF9WQUxJREFUSU9OX0VSUk9SXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiVGhlIGRhdGEgcGFzc2VkIGluIGB2ZXJpZnlDYXJkYCBkaWQgbm90IHBhc3MgdmFsaWRhdGlvbiBjaGVja3MuIFNlZSBkZXRhaWxzIGZvciBtb3JlIGluZm9cIixcbiAgfSxcbiAgVEhSRUVEU19MT09LVVBfRVJST1I6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5VTktOT1dOLFxuICAgIGNvZGU6IFwiVEhSRUVEU19MT09LVVBfRVJST1JcIixcbiAgICBtZXNzYWdlOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyB0aGUgM0QgU2VjdXJlIGxvb2t1cFwiLFxuICB9LFxuICBUSFJFRURTX0lOTElORV9JRlJBTUVfREVUQUlMU19JTkNPUlJFQ1Q6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5VTktOT1dOLFxuICAgIGNvZGU6IFwiVEhSRUVEU19JTkxJTkVfSUZSQU1FX0RFVEFJTFNfSU5DT1JSRUNUXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hlbiBhdHRlbXB0aW5nIHRvIGFkZCB0aGUgYXV0aGVudGljYXRpb24gaWZyYW1lIHRvIHRoZSBwYWdlLlwiLFxuICB9LFxuICBUSFJFRURTX05PX1ZFUklGSUNBVElPTl9QQVlMT0FEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJUSFJFRURTX05PX1ZFUklGSUNBVElPTl9QQVlMT0FEXCIsXG4gICAgbWVzc2FnZTogXCJObyB2ZXJpZmljYXRpb24gcGF5bG9hZCBhdmFpbGFibGUuXCIsXG4gIH0sXG4gIFRIUkVFRFNfVEVSTV9VUkxfUkVRVUlSRVNfQlJBSU5UUkVFX0RPTUFJTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLklOVEVSTkFMLFxuICAgIGNvZGU6IFwiVEhSRUVEU19URVJNX1VSTF9SRVFVSVJFU19CUkFJTlRSRUVfRE9NQUlOXCIsXG4gICAgbWVzc2FnZTogXCJUZXJtIFVybCBtdXN0IGJlIG9uIGEgQnJhaW50cmVlIGRvbWFpbi5cIixcbiAgfSxcbiAgVEhSRUVEU19GUkFNRVdPUktfTUVUSE9EX05PVF9JTVBMRU1FTlRFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLklOVEVSTkFMLFxuICAgIGNvZGU6IFwiVEhSRUVEU19GUkFNRVdPUktfTUVUSE9EX05PVF9JTVBMRU1FTlRFRFwiLFxuICAgIG1lc3NhZ2U6IFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCBmb3IgdGhpcyBmcmFtZXdvcmsuXCIsXG4gIH0sXG4gIFRIUkVFRFNfUkVRVUVTVEVEX0VYRU1QVElPTl9UWVBFX0lOVkFMSUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlRIUkVFRFNfUkVRVUVTVEVEX0VYRU1QVElPTl9UWVBFX0lOVkFMSURcIixcbiAgICBtZXNzYWdlOiBcIlJlcXVlc3RlZCBFeGVtcHRpb24gVHlwZSBpcyBpbnZhbGlkLlwiLFxuICB9LFxuICBUSFJFRURTX1VOU1VQUE9SVEVEX1ZFUlNJT046IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlRIUkVFRFNfVU5TVVBQT1JURURfVkVSU0lPTlwiLFxuICAgIG1lc3NhZ2U6XG4gICAgICBcIjNEIFNlY3VyZSBgMWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gU2VlIGF2YWlsYWJsZSB2ZXJzaW9ucyBhdCBodHRwczovL2JyYWludHJlZS5naXRodWIuaW8vYnJhaW50cmVlLXdlYi9jdXJyZW50L21vZHVsZS1icmFpbnRyZWUtd2ViX3RocmVlLWQtc2VjdXJlLmh0bWwjLmNyZWF0ZVwiLFxuICB9LFxufTtcblxufSx7XCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0fV0sMjAxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgZW51bWVyYXRlID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9lbnVtZXJhdGVcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZW51bWVyYXRlKFtcIkFVVEhFTlRJQ0FUSU9OX0NPTVBMRVRFXCJdLCBcInRocmVlZHNlY3VyZTpcIik7XG5cbn0se1wiLi4vLi4vbGliL2VudW1lcmF0ZVwiOjEzNH1dLDIwMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQG1vZHVsZSBicmFpbnRyZWUtd2ViL3VuaW9ucGF5XG4gKiBAZGVzY3JpcHRpb24gVGhpcyBtb2R1bGUgYWxsb3dzIHlvdSB0byBhY2NlcHQgVW5pb25QYXkgcGF5bWVudHMuICpJdCBpcyBjdXJyZW50bHkgaW4gYmV0YSBhbmQgaXMgc3ViamVjdCB0byBjaGFuZ2UuKlxuICovXG5cbnZhciBVbmlvblBheSA9IF9kZXJlcV8oXCIuL3NoYXJlZC91bmlvbnBheVwiKTtcbnZhciBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvbiA9IF9kZXJlcV8oXCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGNyZWF0ZURlZmVycmVkQ2xpZW50ID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCIpO1xudmFyIGNyZWF0ZUFzc2V0c1VybCA9IF9kZXJlcV8oXCIuLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIik7XG52YXIgYW5hbHl0aWNzID0gX2RlcmVxXyhcIi4uL2xpYi9hbmFseXRpY3NcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vc2hhcmVkL2Vycm9yc1wiKTtcbnZhciBWRVJTSU9OID0gXCIzLjEwMC4wXCI7XG52YXIgd3JhcFByb21pc2UgPSBfZGVyZXFfKFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIik7XG5cbi8qKlxuICogQHN0YXRpY1xuICogQGZ1bmN0aW9uIGNyZWF0ZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ3JlYXRpb24gb3B0aW9uczpcbiAqIEBwYXJhbSB7Q2xpZW50fSBbb3B0aW9ucy5jbGllbnRdIEEge0BsaW5rIENsaWVudH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYXV0aG9yaXphdGlvbl0gQSB0b2tlbml6YXRpb25LZXkgb3IgY2xpZW50VG9rZW4uIENhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGBvcHRpb25zLmNsaWVudGAuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIGBkYXRhYCwgaXMgdGhlIHtAbGluayBVbmlvblBheX0gaW5zdGFuY2UuIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBgY3JlYXRlYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHtAbGluayBVbmlvblBheX0gaW5zdGFuY2UuXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICogQGV4YW1wbGVcbiAqIGJyYWludHJlZS51bmlvbnBheS5jcmVhdGUoeyBjbGllbnQ6IGNsaWVudEluc3RhbmNlIH0sIGZ1bmN0aW9uIChjcmVhdGVFcnIsIHVuaW9ucGF5SW5zdGFuY2UpIHtcbiAqICAgaWYgKGNyZWF0ZUVycikge1xuICogICAgIGNvbnNvbGUuZXJyb3IoY3JlYXRlRXJyKTtcbiAqICAgICByZXR1cm47XG4gKiAgIH1cbiAqICAgLy8gLi4uXG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgdmFyIG5hbWUgPSBcIlVuaW9uUGF5XCI7XG5cbiAgcmV0dXJuIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uXG4gICAgLnZlcmlmeSh7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgY2xpZW50OiBvcHRpb25zLmNsaWVudCxcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjcmVhdGVEZWZlcnJlZENsaWVudC5jcmVhdGUoe1xuICAgICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICAgIGRlYnVnOiBvcHRpb25zLmRlYnVnLFxuICAgICAgICBhc3NldHNVcmw6IGNyZWF0ZUFzc2V0c1VybC5jcmVhdGUob3B0aW9ucy5hdXRob3JpemF0aW9uKSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgdmFyIGNvbmZpZyA9IGNsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG5cbiAgICAgIG9wdGlvbnMuY2xpZW50ID0gY2xpZW50O1xuXG4gICAgICBpZiAoXG4gICAgICAgICFjb25maWcuZ2F0ZXdheUNvbmZpZ3VyYXRpb24udW5pb25QYXkgfHxcbiAgICAgICAgY29uZmlnLmdhdGV3YXlDb25maWd1cmF0aW9uLnVuaW9uUGF5LmVuYWJsZWQgIT09IHRydWVcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5VTklPTlBBWV9OT1RfRU5BQkxFRCkpO1xuICAgICAgfVxuXG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KG9wdGlvbnMuY2xpZW50LCBcInVuaW9ucGF5LmluaXRpYWxpemVkXCIpO1xuXG4gICAgICByZXR1cm4gbmV3IFVuaW9uUGF5KG9wdGlvbnMpO1xuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiB3cmFwUHJvbWlzZShjcmVhdGUpLFxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIFNESywgaS5lLiBge0Bwa2cgdmVyc2lvbn1gLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgVkVSU0lPTjogVkVSU0lPTixcbn07XG5cbn0se1wiLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCI6MTIyLFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiOjEyOSxcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCI6MTMxLFwiLi9zaGFyZWQvZXJyb3JzXCI6MjA0LFwiLi9zaGFyZWQvdW5pb25wYXlcIjoyMDUsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMjAzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgZW51bWVyYXRlID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9lbnVtZXJhdGVcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBldmVudHM6IGVudW1lcmF0ZShcbiAgICBbXG4gICAgICBcIkhPU1RFRF9GSUVMRFNfRkVUQ0hfQ0FQQUJJTElUSUVTXCIsXG4gICAgICBcIkhPU1RFRF9GSUVMRFNfRU5ST0xMXCIsXG4gICAgICBcIkhPU1RFRF9GSUVMRFNfVE9LRU5JWkVcIixcbiAgICBdLFxuICAgIFwidW5pb24tcGF5OlwiXG4gICksXG4gIEhPU1RFRF9GSUVMRFNfRlJBTUVfTkFNRTogXCJicmFpbnRyZWV1bmlvbnBheWhvc3RlZGZpZWxkc1wiLFxufTtcblxufSx7XCIuLi8uLi9saWIvZW51bWVyYXRlXCI6MTM0fV0sMjA0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlVuaW9uIFBheSAtIENyZWF0aW9uIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiBbY3JlYXRpbmcgdGhlIFVuaW9uIFBheSBjb21wb25lbnRdKC4vbW9kdWxlLWJyYWludHJlZS13ZWJfdW5pb24tcGF5Lmh0bWwjLmNyZWF0ZSkuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBVTklPTlBBWV9OT1RfRU5BQkxFRCBPY2N1cnMgd2hlbiBVbmlvbiBQYXkgaXMgbm90IGVuYWJsZWQgb24gdGhlIEJyYWludHJlZSBjb250cm9sIHBhbmVsLlxuICovXG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuVW5pb24gUGF5IC0gU2hhcmVkIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiBzdGFydGluZyB0aGUgVW5pb24gUGF5IEZsb3dcbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFVOSU9OUEFZX0NBUkRfQU5EX0hPU1RFRF9GSUVMRFNfSU5TVEFOQ0VTIE9jY3VycyB3aGVuIGEgbWV0aG9kIGlzIHVzZWQgd2l0aCBib3RoIGNhcmQgZGV0YWlscyBhbmQgYSBIb3N0ZWQgRmllbGRzIGluc3RhbmNlLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gVU5JT05QQVlfSE9TVEVEX0ZJRUxEU19JTlNUQU5DRV9JTlZBTElEIE9jY3VycyB3aGVuIEhvc3RlZCBGaWVsZHMgaW5zdGFuY2UgdXNlZCBpcyBub3QgYSB2YWxpZCBIb3N0ZWQgRmllbGRzIGluc3RhbmNlLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gVU5JT05QQVlfQ0FSRF9PUl9IT1NURURfRklFTERTX0lOU1RBTkNFX1JFUVVJUkVEIE9jY3VycyB3aGVuIG5laXRoZXIgY2FyZCBkZXRhaWxzIG9yIEhvc3RlZCBGaWVsZHMgYXJlIHVzZWQuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBVTklPTlBBWV9IT1NURURfRklFTERTX0lOU1RBTkNFX1JFUVVJUkVEIE9jY3VycyB3aGVuIEhvc3RlZCBGaWVsZHMgY2Fubm90IGJlIGZvdW5kIG9uIHRoZSBwYWdlLlxuICovXG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuVW5pb24gUGF5IC0gZmV0Y2hDYXBhYmlsaXRpZXMgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIHVzaW5nIHRoZSBbYGZldGNoQ2FwYWJpbGl0aWVzYCBtZXRob2RdKC4vVW5pb25QYXkuaHRtbCNmZXRjaENhcGFiaWxpdGllcykuXG4gKiBAcHJvcGVydHkge05FVFdPUkt9IFVOSU9OUEFZX0ZFVENIX0NBUEFCSUxJVElFU19ORVRXT1JLX0VSUk9SIE9jY3VycyB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIGxvb2tpbmcgdXAgdGhlIFVuaW9uIFBheSBjYXBhYmlsaXRpZXMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5VbmlvbiBQYXkgLSBlbnJvbGwgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIHVzaW5nIHRoZSBbYGVucm9sbGAgbWV0aG9kXSguL1VuaW9uUGF5Lmh0bWwjZW5yb2xsKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFVOSU9OUEFZX01JU1NJTkdfTU9CSUxFX1BIT05FX0RBVEEgT2NjdXJzIHdoZW4gbm8gbW9iaWxlIHBob25lIGRhdGEgaXMgcHJvdmlkZWQuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBVTklPTlBBWV9FWFBJUkFUSU9OX0RBVEVfSU5DT01QTEVURSBPY2N1cnMgd2hlbiBleHBpcmF0aW9uIGRhdGUgaXMgaW5jb21wbGV0ZS5cbiAqIEBwcm9wZXJ0eSB7Q1VTVE9NRVJ9IFVOSU9OUEFZX0VOUk9MTE1FTlRfQ1VTVE9NRVJfSU5QVVRfSU5WQUxJRCBPY2N1cnMgd2hlbiBjdXN0b21lciBlbnJvbGxtZW50IGlucHV0IGlzIGludmFsaWQuXG4gKiBAcHJvcGVydHkge05FVFdPUkt9IFVOSU9OUEFZX0VOUk9MTE1FTlRfTkVUV09SS19FUlJPUiBPY2N1cnMgd2hlbiB0aGVyZSBpcyBhbiBlcnJvciBkdXJpbmcgZW5yb2xsbWVudC5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlVuaW9uIFBheSAtIHRva2VuaXplIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiB1c2luZyB0aGUgW2B0b2tlbml6ZWAgbWV0aG9kXSguL1VuaW9uUGF5Lmh0bWwjdG9rZW5pemUpLlxuICogQHByb3BlcnR5IHtDVVNUT01FUn0gVU5JT05QQVlfRkFJTEVEX1RPS0VOSVpBVElPTiBPY2N1cnMgd2hlbiBkYXRhIGNhbm5vdCBiZSB0b2tlbml6ZWQuXG4gKiBAcHJvcGVydHkge05FVFdPUkt9IFVOSU9OUEFZX1RPS0VOSVpBVElPTl9ORVRXT1JLX0VSUk9SIE9jY3VycyB3aGVuIHRoZSBCcmFpbnRyZWUgZ2F0ZXdheSBjYW5ub3QgYmUgcmVhY2hlZC5cbiAqL1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFVOSU9OUEFZX05PVF9FTkFCTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJVTklPTlBBWV9OT1RfRU5BQkxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiVW5pb25QYXkgaXMgbm90IGVuYWJsZWQgZm9yIHRoaXMgbWVyY2hhbnQuXCIsXG4gIH0sXG4gIFVOSU9OUEFZX0hPU1RFRF9GSUVMRFNfSU5TVEFOQ0VfSU5WQUxJRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVU5JT05QQVlfSE9TVEVEX0ZJRUxEU19JTlNUQU5DRV9JTlZBTElEXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiRm91bmQgYW4gaW52YWxpZCBIb3N0ZWQgRmllbGRzIGluc3RhbmNlLiBQbGVhc2UgdXNlIGEgdmFsaWQgSG9zdGVkIEZpZWxkcyBpbnN0YW5jZS5cIixcbiAgfSxcbiAgVU5JT05QQVlfSE9TVEVEX0ZJRUxEU19JTlNUQU5DRV9SRVFVSVJFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVU5JT05QQVlfSE9TVEVEX0ZJRUxEU19JTlNUQU5DRV9SRVFVSVJFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ291bGQgbm90IGZpbmQgdGhlIEhvc3RlZCBGaWVsZHMgaW5zdGFuY2UuXCIsXG4gIH0sXG4gIFVOSU9OUEFZX0NBUkRfT1JfSE9TVEVEX0ZJRUxEU19JTlNUQU5DRV9SRVFVSVJFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVU5JT05QQVlfQ0FSRF9PUl9IT1NURURfRklFTERTX0lOU1RBTkNFX1JFUVVJUkVEXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiQSBjYXJkIG9yIGEgSG9zdGVkIEZpZWxkcyBpbnN0YW5jZSBpcyByZXF1aXJlZC4gUGxlYXNlIHN1cHBseSBhIGNhcmQgb3IgYSBIb3N0ZWQgRmllbGRzIGluc3RhbmNlLlwiLFxuICB9LFxuICBVTklPTlBBWV9DQVJEX0FORF9IT1NURURfRklFTERTX0lOU1RBTkNFUzoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVU5JT05QQVlfQ0FSRF9BTkRfSE9TVEVEX0ZJRUxEU19JTlNUQU5DRVNcIixcbiAgICBtZXNzYWdlOlxuICAgICAgXCJQbGVhc2Ugc3VwcGx5IGVpdGhlciBhIGNhcmQgb3IgYSBIb3N0ZWQgRmllbGRzIGluc3RhbmNlLCBub3QgYm90aC5cIixcbiAgfSxcbiAgVU5JT05QQVlfRVhQSVJBVElPTl9EQVRFX0lOQ09NUExFVEU6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlVOSU9OUEFZX0VYUElSQVRJT05fREFURV9JTkNPTVBMRVRFXCIsXG4gICAgbWVzc2FnZTogXCJZb3UgbXVzdCBzdXBwbHkgZXhwaXJhdGlvbiBtb250aCBhbmQgeWVhciBvciBuZWl0aGVyLlwiLFxuICB9LFxuICBVTklPTlBBWV9FTlJPTExNRU5UX0NVU1RPTUVSX0lOUFVUX0lOVkFMSUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5DVVNUT01FUixcbiAgICBjb2RlOiBcIlVOSU9OUEFZX0VOUk9MTE1FTlRfQ1VTVE9NRVJfSU5QVVRfSU5WQUxJRFwiLFxuICAgIG1lc3NhZ2U6IFwiRW5yb2xsbWVudCBmYWlsZWQgZHVlIHRvIHVzZXIgaW5wdXQgZXJyb3IuXCIsXG4gIH0sXG4gIFVOSU9OUEFZX0VOUk9MTE1FTlRfTkVUV09SS19FUlJPUjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk5FVFdPUkssXG4gICAgY29kZTogXCJVTklPTlBBWV9FTlJPTExNRU5UX05FVFdPUktfRVJST1JcIixcbiAgICBtZXNzYWdlOiBcIkNvdWxkIG5vdCBlbnJvbGwgVW5pb25QYXkgY2FyZC5cIixcbiAgfSxcbiAgVU5JT05QQVlfRkVUQ0hfQ0FQQUJJTElUSUVTX05FVFdPUktfRVJST1I6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5ORVRXT1JLLFxuICAgIGNvZGU6IFwiVU5JT05QQVlfRkVUQ0hfQ0FQQUJJTElUSUVTX05FVFdPUktfRVJST1JcIixcbiAgICBtZXNzYWdlOiBcIkNvdWxkIG5vdCBmZXRjaCBjYXJkIGNhcGFiaWxpdGllcy5cIixcbiAgfSxcbiAgVU5JT05QQVlfVE9LRU5JWkFUSU9OX05FVFdPUktfRVJST1I6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5ORVRXT1JLLFxuICAgIGNvZGU6IFwiVU5JT05QQVlfVE9LRU5JWkFUSU9OX05FVFdPUktfRVJST1JcIixcbiAgICBtZXNzYWdlOiBcIkEgdG9rZW5pemF0aW9uIG5ldHdvcmsgZXJyb3Igb2NjdXJyZWQuXCIsXG4gIH0sXG4gIFVOSU9OUEFZX01JU1NJTkdfTU9CSUxFX1BIT05FX0RBVEE6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlVOSU9OUEFZX01JU1NJTkdfTU9CSUxFX1BIT05FX0RBVEFcIixcbiAgICBtZXNzYWdlOiBcIkEgYG1vYmlsZWAgd2l0aCBgY291bnRyeUNvZGVgIGFuZCBgbnVtYmVyYCBpcyByZXF1aXJlZC5cIixcbiAgfSxcbiAgVU5JT05QQVlfRkFJTEVEX1RPS0VOSVpBVElPTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiVU5JT05QQVlfRkFJTEVEX1RPS0VOSVpBVElPTlwiLFxuICAgIG1lc3NhZ2U6IFwiVGhlIHN1cHBsaWVkIGNhcmQgZGF0YSBmYWlsZWQgdG9rZW5pemF0aW9uLlwiLFxuICB9LFxufTtcblxufSx7XCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0fV0sMjA1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgYW5hbHl0aWNzID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9hbmFseXRpY3NcIik7XG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBCdXMgPSBfZGVyZXFfKFwiZnJhbWVidXNcIik7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXyhcIi4vY29uc3RhbnRzXCIpO1xudmFyIGlzVmVyaWZpZWREb21haW4gPSBfZGVyZXFfKFwiLi4vLi4vbGliL2lzLXZlcmlmaWVkLWRvbWFpblwiKTtcbnZhciB1c2VNaW4gPSBfZGVyZXFfKFwiLi4vLi4vbGliL3VzZS1taW5cIik7XG52YXIgY29udmVydE1ldGhvZHNUb0Vycm9yID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpO1xudmFyIGV2ZW50cyA9IGNvbnN0YW50cy5ldmVudHM7XG52YXIgaUZyYW1lciA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2lmcmFtZXJcIik7XG52YXIgbWV0aG9kcyA9IF9kZXJlcV8oXCIuLi8uLi9saWIvbWV0aG9kc1wiKTtcbnZhciBWRVJTSU9OID0gXCIzLjEwMC4wXCI7XG52YXIgdXVpZCA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3V1aWRcIik7XG52YXIgd3JhcFByb21pc2UgPSBfZGVyZXFfKFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIik7XG52YXIgQlVTX0NPTkZJR1VSQVRJT05fUkVRVUVTVF9FVkVOVCA9XG4gIF9kZXJlcV8oXCIuLi8uLi9saWIvY29uc3RhbnRzXCIpLkJVU19DT05GSUdVUkFUSU9OX1JFUVVFU1RfRVZFTlQ7XG5cbi8qKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBTZWUge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL3VuaW9ucGF5LmNyZWF0ZXx1bmlvbnBheS5jcmVhdGV9LlxuICogQGRlc2NyaXB0aW9uIDxzdHJvbmc+WW91IGNhbm5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gVXNlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi91bmlvbnBheS5jcmVhdGV8YnJhaW50cmVlLXdlYi51bmlvbnBheS5jcmVhdGV9IGluc3RlYWQuPC9zdHJvbmc+XG4gKiBAY2xhc3NkZXNjIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIFVuaW9uUGF5IGNvbXBvbmVudC4gSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgaGF2ZSBtZXRob2RzIGZvciB7QGxpbmsgVW5pb25QYXkjZmV0Y2hDYXBhYmlsaXRpZXMgZmV0Y2hpbmcgY2FwYWJpbGl0aWVzfSBvZiBVbmlvblBheSBjYXJkcywge0BsaW5rIFVuaW9uUGF5I2Vucm9sbCBlbnJvbGxpbmd9IGEgVW5pb25QYXkgY2FyZCwgYW5kIHtAbGluayBVbmlvblBheSN0b2tlbml6ZSB0b2tlbml6aW5nfSBhIFVuaW9uUGF5IGNhcmQuXG4gKi9cbmZ1bmN0aW9uIFVuaW9uUGF5KG9wdGlvbnMpIHtcbiAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gVW5pb25QYXl+ZmV0Y2hDYXBhYmlsaXRpZXNQYXlsb2FkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzVW5pb25QYXkgRGV0ZXJtaW5lcyBpZiB0aGlzIGNhcmQgaXMgYSBVbmlvblBheSBjYXJkLlxuICogQHByb3BlcnR5IHtib29sZWFufSBpc0RlYml0IERldGVybWluZXMgaWYgdGhpcyBjYXJkIGlzIGEgZGViaXQgY2FyZC4gVGhpcyBwcm9wZXJ0eSBpcyBvbmx5IHByZXNlbnQgaWYgYGlzVW5pb25QYXlgIGlzIGB0cnVlYC5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSB1bmlvblBheSBVbmlvblBheSBzcGVjaWZpYyBwcm9wZXJ0aWVzLiBUaGlzIHByb3BlcnR5IGlzIG9ubHkgcHJlc2VudCBpZiBgaXNVbmlvblBheWAgaXMgYHRydWVgLlxuICogQHByb3BlcnR5IHtib29sZWFufSB1bmlvblBheS5zdXBwb3J0c1R3b1N0ZXBBdXRoQW5kQ2FwdHVyZSBEZXRlcm1pbmVzIGlmIHRoZSBjYXJkIGFsbG93cyBmb3IgYW4gYXV0aG9yaXphdGlvbiwgYnV0IHNldHRsaW5nIHRoZSB0cmFuc2FjdGlvbiBsYXRlci5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdW5pb25QYXkuaXNTdXBwb3J0ZWQgRGV0ZXJtaW5lcyBpZiBCcmFpbnRyZWUgY2FuIHByb2Nlc3MgdGhpcyBVbmlvblBheSBjYXJkLiBXaGVuIGZhbHNlLCBCcmFpbnRyZWUgY2Fubm90IHByb2Nlc3MgdGhpcyBjYXJkIGFuZCB0aGUgdXNlciBzaG91bGQgdXNlIGEgZGlmZmVyZW50IGNhcmQuXG4gKi9cblxuLyoqXG4gKiBGZXRjaGVzIHRoZSBjYXBhYmlsaXRpZXMgb2YgYSBjYXJkLCBpbmNsdWRpbmcgd2hldGhlciBvciBub3QgdGhlIFNNUyBlbnJvbGxtZW50IHByb2Nlc3MgaXMgcmVxdWlyZWQuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBVbmlvblBheSB7QGxpbmsgVW5pb25QYXkjZmV0Y2hDYXBhYmlsaXRpZXMgZmV0Y2hDYXBhYmlsaXRpZXN9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5jYXJkXSBUaGUgY2FyZCBmcm9tIHdoaWNoIHRvIGZldGNoIGNhcGFiaWxpdGllcy4gTm90ZSB0aGF0IHRoaXMgd2lsbCBvbmx5IGhhdmUgb25lIHByb3BlcnR5LCBgbnVtYmVyYC4gUmVxdWlyZWQgaWYgeW91IGFyZSBub3QgdXNpbmcgdGhlIGBob3N0ZWRGaWVsZHNgIG9wdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmNhcmQubnVtYmVyIENhcmQgbnVtYmVyLlxuICogQHBhcmFtIHtIb3N0ZWRGaWVsZHN9IFtvcHRpb25zLmhvc3RlZEZpZWxkc10gVGhlIEhvc3RlZCBGaWVsZHMgaW5zdGFuY2UgdXNlZCB0byBjb2xsZWN0IGNhcmQgZGF0YS4gUmVxdWlyZWQgaWYgeW91IGFyZSBub3QgdXNpbmcgdGhlIGBjYXJkYCBvcHRpb24uXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIDxjb2RlPmRhdGE8L2NvZGU+LCBpcyBhIHtAbGluayBVbmlvblBheSNmZXRjaENhcGFiaWxpdGllc1BheWxvYWQgZmV0Y2hDYXBhYmlsaXRpZXNQYXlsb2FkfS4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGBmZXRjaENhcGFiaWxpdGllc2AgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEge0BsaW5rIFVuaW9uUGF5I2ZldGNoQ2FwYWJpbGl0aWVzUGF5bG9hZCBmZXRjaENhcGFiaWxpdGllc1BheWxvYWR9LlxuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqL1xuVW5pb25QYXkucHJvdG90eXBlLmZldGNoQ2FwYWJpbGl0aWVzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2xpZW50ID0gdGhpcy5fb3B0aW9ucy5jbGllbnQ7XG4gIHZhciBjYXJkTnVtYmVyID0gb3B0aW9ucy5jYXJkID8gb3B0aW9ucy5jYXJkLm51bWJlciA6IG51bGw7XG4gIHZhciBob3N0ZWRGaWVsZHMgPSBvcHRpb25zLmhvc3RlZEZpZWxkcztcblxuICBpZiAoY2FyZE51bWJlciAmJiBob3N0ZWRGaWVsZHMpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlVOSU9OUEFZX0NBUkRfQU5EX0hPU1RFRF9GSUVMRFNfSU5TVEFOQ0VTKVxuICAgICk7XG4gIH0gZWxzZSBpZiAoY2FyZE51bWJlcikge1xuICAgIHJldHVybiBjbGllbnRcbiAgICAgIC5yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiBcImdldFwiLFxuICAgICAgICBlbmRwb2ludDogXCJwYXltZW50X21ldGhvZHMvY3JlZGl0X2NhcmRzL2NhcGFiaWxpdGllc1wiLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgX21ldGE6IHsgc291cmNlOiBcInVuaW9ucGF5XCIgfSxcbiAgICAgICAgICBjcmVkaXRDYXJkOiB7XG4gICAgICAgICAgICBudW1iZXI6IGNhcmROdW1iZXIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChjbGllbnQsIFwidW5pb25wYXkuY2FwYWJpbGl0aWVzLXJlY2VpdmVkXCIpO1xuXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgc3RhdHVzID0gZXJyLmRldGFpbHMgJiYgZXJyLmRldGFpbHMuaHR0cFN0YXR1cztcblxuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KGNsaWVudCwgXCJ1bmlvbnBheS5jYXBhYmlsaXRpZXMtZmFpbGVkXCIpO1xuXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgICB0eXBlOiBlcnJvcnMuVU5JT05QQVlfRkVUQ0hfQ0FQQUJJTElUSUVTX05FVFdPUktfRVJST1IudHlwZSxcbiAgICAgICAgICAgIGNvZGU6IGVycm9ycy5VTklPTlBBWV9GRVRDSF9DQVBBQklMSVRJRVNfTkVUV09SS19FUlJPUi5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JzLlVOSU9OUEFZX0ZFVENIX0NBUEFCSUxJVElFU19ORVRXT1JLX0VSUk9SLm1lc3NhZ2UsXG4gICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICB9IGVsc2UgaWYgKGhvc3RlZEZpZWxkcykge1xuICAgIGlmICghaG9zdGVkRmllbGRzLl9idXMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5VTklPTlBBWV9IT1NURURfRklFTERTX0lOU1RBTkNFX0lOVkFMSUQpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLl9pbml0aWFsaXplSG9zdGVkRmllbGRzKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLl9idXMuZW1pdChcbiAgICAgICAgICBldmVudHMuSE9TVEVEX0ZJRUxEU19GRVRDSF9DQVBBQklMSVRJRVMsXG4gICAgICAgICAgeyBob3N0ZWRGaWVsZHM6IGhvc3RlZEZpZWxkcyB9LFxuICAgICAgICAgIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycikge1xuICAgICAgICAgICAgICByZWplY3QobmV3IEJyYWludHJlZUVycm9yKHJlc3BvbnNlLmVycikpO1xuXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5wYXlsb2FkKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlVOSU9OUEFZX0NBUkRfT1JfSE9TVEVEX0ZJRUxEU19JTlNUQU5DRV9SRVFVSVJFRClcbiAgKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gVW5pb25QYXl+ZW5yb2xsUGF5bG9hZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGVucm9sbG1lbnRJZCBVbmlvblBheSBlbnJvbGxtZW50IElELiBUaGlzIHZhbHVlIHNob3VsZCBiZSBwYXNzZWQgdG8gYHRva2VuaXplYC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc21zQ29kZVJlcXVpcmVkIFVuaW9uUGF5IGBzbXNDb2RlUmVxdWlyZWRgIGZsYWcuXG4gKiA8L3A+PGI+dHJ1ZTwvYj4gLSB0aGUgdXNlciB3aWxsIHJlY2VpdmUgYW4gU01TIGNvZGUgdGhhdCBuZWVkcyB0byBiZSBzdXBwbGllZCBmb3IgdG9rZW5pemF0aW9uLlxuICogPC9wPjxiPmZhbHNlPC9iPiAtIHRoZSBjYXJkIGNhbiBiZSBpbW1lZGlhdGVseSB0b2tlbml6ZWQuXG4gKi9cblxuLyoqXG4gKiBFbnJvbGxzIGEgVW5pb25QYXkgY2FyZC4gVXNlIHtAbGluayBVbmlvblBheSNmZXRjaENhcGFiaWxpdGllc3xmZXRjaENhcGFiaWxpdGllc30gdG8gZGV0ZXJtaW5lIGlmIHRoZSBTTVMgZW5yb2xsbWVudCBwcm9jZXNzIGlzIHJlcXVpcmVkLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgVW5pb25QYXkgZW5yb2xsbWVudCBvcHRpb25zOlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmNhcmRdIFRoZSBjYXJkIHRvIGVucm9sbC4gUmVxdWlyZWQgaWYgeW91IGFyZSBub3QgdXNpbmcgdGhlIGBob3N0ZWRGaWVsZHNgIG9wdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmNhcmQubnVtYmVyIFRoZSBjYXJkIG51bWJlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jYXJkLmV4cGlyYXRpb25EYXRlXSBUaGUgY2FyZCdzIGV4cGlyYXRpb24gZGF0ZS4gTWF5IGJlIGluIHRoZSBmb3JtIGBNTS9ZWWAgb3IgYE1NL1lZWVlgLiBXaGVuIGRlZmluZWQgYGV4cGlyYXRpb25Nb250aGAgYW5kIGBleHBpcmF0aW9uWWVhcmAgYXJlIGlnbm9yZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY2FyZC5leHBpcmF0aW9uTW9udGhdIFRoZSBjYXJkJ3MgZXhwaXJhdGlvbiBtb250aC4gVGhpcyBzaG91bGQgYmUgdXNlZCB3aXRoIHRoZSBgZXhwaXJhdGlvblllYXJgIHBhcmFtZXRlci4gV2hlbiBgZXhwaXJhdGlvbkRhdGVgIGlzIGRlZmluZWQgdGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jYXJkLmV4cGlyYXRpb25ZZWFyXSBUaGUgY2FyZCdzIGV4cGlyYXRpb24geWVhci4gVGhpcyBzaG91bGQgYmUgdXNlZCB3aXRoIHRoZSBgZXhwaXJhdGlvbk1vbnRoYCBwYXJhbWV0ZXIuIFdoZW4gYGV4cGlyYXRpb25EYXRlYCBpcyBkZWZpbmVkIHRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQuXG4gKiBAcGFyYW0ge0hvc3RlZEZpZWxkc30gW29wdGlvbnMuaG9zdGVkRmllbGRzXSBUaGUgSG9zdGVkIEZpZWxkcyBpbnN0YW5jZSB1c2VkIHRvIGNvbGxlY3QgY2FyZCBkYXRhLiBSZXF1aXJlZCBpZiB5b3UgYXJlIG5vdCB1c2luZyB0aGUgYGNhcmRgIG9wdGlvbi5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLm1vYmlsZSBUaGUgbW9iaWxlIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBmcm9tIHRoZSBjdXN0b21lci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm1vYmlsZS5jb3VudHJ5Q29kZSBUaGUgY291bnRyeSBjb2RlIG9mIHRoZSBjdXN0b21lcidzIG1vYmlsZSBwaG9uZSBudW1iZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5tb2JpbGUubnVtYmVyIFRoZSBjdXN0b21lcidzIG1vYmlsZSBwaG9uZSBudW1iZXIuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIDxjb2RlPmRhdGE8L2NvZGU+LCBpcyBhIHtAbGluayBVbmlvblBheX5lbnJvbGxQYXlsb2FkfGVucm9sbFBheWxvYWR9LiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgYGVucm9sbGAgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHtAbGluayBVbmlvblBheX5lbnJvbGxQYXlsb2FkfGVucm9sbFBheWxvYWR9LlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblVuaW9uUGF5LnByb3RvdHlwZS5lbnJvbGwgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjbGllbnQgPSB0aGlzLl9vcHRpb25zLmNsaWVudDtcbiAgdmFyIGNhcmQgPSBvcHRpb25zLmNhcmQ7XG4gIHZhciBtb2JpbGUgPSBvcHRpb25zLm1vYmlsZTtcbiAgdmFyIGhvc3RlZEZpZWxkcyA9IG9wdGlvbnMuaG9zdGVkRmllbGRzO1xuICB2YXIgZGF0YTtcblxuICBpZiAoIW1vYmlsZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVU5JT05QQVlfTUlTU0lOR19NT0JJTEVfUEhPTkVfREFUQSlcbiAgICApO1xuICB9XG5cbiAgaWYgKGhvc3RlZEZpZWxkcykge1xuICAgIGlmICghaG9zdGVkRmllbGRzLl9idXMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5VTklPTlBBWV9IT1NURURfRklFTERTX0lOU1RBTkNFX0lOVkFMSUQpXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoY2FyZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlVOSU9OUEFZX0NBUkRfQU5EX0hPU1RFRF9GSUVMRFNfSU5TVEFOQ0VTKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgc2VsZi5faW5pdGlhbGl6ZUhvc3RlZEZpZWxkcygpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLl9idXMuZW1pdChcbiAgICAgICAgICBldmVudHMuSE9TVEVEX0ZJRUxEU19FTlJPTEwsXG4gICAgICAgICAgeyBob3N0ZWRGaWVsZHM6IGhvc3RlZEZpZWxkcywgbW9iaWxlOiBtb2JpbGUgfSxcbiAgICAgICAgICBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnIpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KG5ldyBCcmFpbnRyZWVFcnJvcihyZXNwb25zZS5lcnIpKTtcblxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UucGF5bG9hZCk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoY2FyZCAmJiBjYXJkLm51bWJlcikge1xuICAgIGRhdGEgPSB7XG4gICAgICBfbWV0YTogeyBzb3VyY2U6IFwidW5pb25wYXlcIiB9LFxuICAgICAgdW5pb25QYXlFbnJvbGxtZW50OiB7XG4gICAgICAgIG51bWJlcjogY2FyZC5udW1iZXIsXG4gICAgICAgIG1vYmlsZUNvdW50cnlDb2RlOiBtb2JpbGUuY291bnRyeUNvZGUsXG4gICAgICAgIG1vYmlsZU51bWJlcjogbW9iaWxlLm51bWJlcixcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmIChjYXJkLmV4cGlyYXRpb25EYXRlKSB7XG4gICAgICBkYXRhLnVuaW9uUGF5RW5yb2xsbWVudC5leHBpcmF0aW9uRGF0ZSA9IGNhcmQuZXhwaXJhdGlvbkRhdGU7XG4gICAgfSBlbHNlIGlmIChjYXJkLmV4cGlyYXRpb25Nb250aCB8fCBjYXJkLmV4cGlyYXRpb25ZZWFyKSB7XG4gICAgICBpZiAoY2FyZC5leHBpcmF0aW9uTW9udGggJiYgY2FyZC5leHBpcmF0aW9uWWVhcikge1xuICAgICAgICBkYXRhLnVuaW9uUGF5RW5yb2xsbWVudC5leHBpcmF0aW9uWWVhciA9IGNhcmQuZXhwaXJhdGlvblllYXI7XG4gICAgICAgIGRhdGEudW5pb25QYXlFbnJvbGxtZW50LmV4cGlyYXRpb25Nb250aCA9IGNhcmQuZXhwaXJhdGlvbk1vbnRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVU5JT05QQVlfRVhQSVJBVElPTl9EQVRFX0lOQ09NUExFVEUpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaWVudFxuICAgICAgLnJlcXVlc3Qoe1xuICAgICAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgICAgICBlbmRwb2ludDogXCJ1bmlvbl9wYXlfZW5yb2xsbWVudHNcIixcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChjbGllbnQsIFwidW5pb25wYXkuZW5yb2xsbWVudC1zdWNjZWVkZWRcIik7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlbnJvbGxtZW50SWQ6IHJlc3BvbnNlLnVuaW9uUGF5RW5yb2xsbWVudElkLFxuICAgICAgICAgIHNtc0NvZGVSZXF1aXJlZDogcmVzcG9uc2Uuc21zQ29kZVJlcXVpcmVkLFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdmFyIHN0YXR1cyA9IGVyci5kZXRhaWxzICYmIGVyci5kZXRhaWxzLmh0dHBTdGF0dXM7XG5cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzIDwgNTAwKSB7XG4gICAgICAgICAgZXJyb3IgPSBuZXcgQnJhaW50cmVlRXJyb3IoXG4gICAgICAgICAgICBlcnJvcnMuVU5JT05QQVlfRU5ST0xMTUVOVF9DVVNUT01FUl9JTlBVVF9JTlZBTElEXG4gICAgICAgICAgKTtcbiAgICAgICAgICBlcnJvci5kZXRhaWxzID0geyBvcmlnaW5hbEVycm9yOiBlcnIgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVU5JT05QQVlfRU5ST0xMTUVOVF9ORVRXT1JLX0VSUk9SKTtcbiAgICAgICAgICBlcnJvci5kZXRhaWxzID0geyBvcmlnaW5hbEVycm9yOiBlcnIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcInVuaW9ucGF5LmVucm9sbG1lbnQtZmFpbGVkXCIpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlVOSU9OUEFZX0NBUkRfT1JfSE9TVEVEX0ZJRUxEU19JTlNUQU5DRV9SRVFVSVJFRClcbiAgKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gVW5pb25QYXl+dG9rZW5pemVQYXlsb2FkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbm9uY2UgVGhlIHBheW1lbnQgbWV0aG9kIG5vbmNlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgQWx3YXlzIDxjb2RlPkNyZWRpdENhcmQ8L2NvZGU+LlxuICogQHByb3BlcnR5IHtvYmplY3R9IGRldGFpbHMgQWRkaXRpb25hbCBhY2NvdW50IGRldGFpbHM6XG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5jYXJkVHlwZSBUeXBlIG9mIGNhcmQsIGV4OiBWaXNhLCBNYXN0ZXJDYXJkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMubGFzdEZvdXIgTGFzdCBmb3VyIGRpZ2l0cyBvZiBjYXJkIG51bWJlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmxhc3RUd28gTGFzdCB0d28gZGlnaXRzIG9mIGNhcmQgbnVtYmVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRlc2NyaXB0aW9uIEEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24uXG4gKi9cblxuLyoqXG4gKiBUb2tlbml6ZXMgYSBVbmlvblBheSBjYXJkIGFuZCByZXR1cm5zIGEgbm9uY2UgcGF5bG9hZC5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFVuaW9uUGF5IHRva2VuaXphdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmNhcmRdIFRoZSBjYXJkIHRvIGVucm9sbC4gUmVxdWlyZWQgaWYgeW91IGFyZSBub3QgdXNpbmcgdGhlIGBob3N0ZWRGaWVsZHNgIG9wdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmNhcmQubnVtYmVyIFRoZSBjYXJkIG51bWJlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jYXJkLmV4cGlyYXRpb25EYXRlXSBUaGUgY2FyZCdzIGV4cGlyYXRpb24gZGF0ZS4gTWF5IGJlIGluIHRoZSBmb3JtIGBNTS9ZWWAgb3IgYE1NL1lZWVlgLiBXaGVuIGRlZmluZWQgYGV4cGlyYXRpb25Nb250aGAgYW5kIGBleHBpcmF0aW9uWWVhcmAgYXJlIGlnbm9yZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY2FyZC5leHBpcmF0aW9uTW9udGhdIFRoZSBjYXJkJ3MgZXhwaXJhdGlvbiBtb250aC4gVGhpcyBzaG91bGQgYmUgdXNlZCB3aXRoIHRoZSBgZXhwaXJhdGlvblllYXJgIHBhcmFtZXRlci4gV2hlbiBgZXhwaXJhdGlvbkRhdGVgIGlzIGRlZmluZWQgdGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jYXJkLmV4cGlyYXRpb25ZZWFyXSBUaGUgY2FyZCdzIGV4cGlyYXRpb24geWVhci4gVGhpcyBzaG91bGQgYmUgdXNlZCB3aXRoIHRoZSBgZXhwaXJhdGlvbk1vbnRoYCBwYXJhbWV0ZXIuIFdoZW4gYGV4cGlyYXRpb25EYXRlYCBpcyBkZWZpbmVkIHRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY2FyZC5jdnZdIFRoZSBjYXJkJ3Mgc2VjdXJpdHkgbnVtYmVyLlxuICogQHBhcmFtIHtIb3N0ZWRGaWVsZHN9IFtvcHRpb25zLmhvc3RlZEZpZWxkc10gVGhlIEhvc3RlZCBGaWVsZHMgaW5zdGFuY2UgdXNlZCB0byBjb2xsZWN0IGNhcmQgZGF0YS4gUmVxdWlyZWQgaWYgeW91IGFyZSBub3QgdXNpbmcgdGhlIGBjYXJkYCBvcHRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5lbnJvbGxtZW50SWQgVGhlIGVucm9sbG1lbnQgSUQgZnJvbSB7QGxpbmsgVW5pb25QYXkjZW5yb2xsfS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zbXNDb2RlXSBUaGUgU01TIGNvZGUgcmVjZWl2ZWQgZnJvbSB0aGUgdXNlciBpZiB7QGxpbmsgVW5pb25QYXkjZW5yb2xsfSBwYXlsb2FkIGhhdmUgYHNtc0NvZGVSZXF1aXJlZGAuIGlmIGBzbXNDb2RlUmVxdWlyZWRgIGlzIGZhbHNlLCBzbXNDb2RlIHNob3VsZCBub3QgYmUgcGFzc2VkLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgc2Vjb25kIGFyZ3VtZW50LCA8Y29kZT5kYXRhPC9jb2RlPiwgaXMgYSB7QGxpbmsgVW5pb25QYXl+dG9rZW5pemVQYXlsb2FkfHRva2VuaXplUGF5bG9hZH0uIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBgdG9rZW5pemVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIHtAbGluayBVbmlvblBheX50b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfS5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cblVuaW9uUGF5LnByb3RvdHlwZS50b2tlbml6ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBkYXRhO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjbGllbnQgPSB0aGlzLl9vcHRpb25zLmNsaWVudDtcbiAgdmFyIGNhcmQgPSBvcHRpb25zLmNhcmQ7XG4gIHZhciBob3N0ZWRGaWVsZHMgPSBvcHRpb25zLmhvc3RlZEZpZWxkcztcblxuICBpZiAoY2FyZCAmJiBob3N0ZWRGaWVsZHMpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlVOSU9OUEFZX0NBUkRfQU5EX0hPU1RFRF9GSUVMRFNfSU5TVEFOQ0VTKVxuICAgICk7XG4gIH0gZWxzZSBpZiAoY2FyZCkge1xuICAgIGRhdGEgPSB7XG4gICAgICBfbWV0YTogeyBzb3VyY2U6IFwidW5pb25wYXlcIiB9LFxuICAgICAgY3JlZGl0Q2FyZDoge1xuICAgICAgICBudW1iZXI6IG9wdGlvbnMuY2FyZC5udW1iZXIsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICB1bmlvblBheUVucm9sbG1lbnQ6IHtcbiAgICAgICAgICAgIGlkOiBvcHRpb25zLmVucm9sbG1lbnRJZCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMuc21zQ29kZSkge1xuICAgICAgZGF0YS5jcmVkaXRDYXJkLm9wdGlvbnMudW5pb25QYXlFbnJvbGxtZW50LnNtc0NvZGUgPSBvcHRpb25zLnNtc0NvZGU7XG4gICAgfVxuXG4gICAgaWYgKGNhcmQuZXhwaXJhdGlvbkRhdGUpIHtcbiAgICAgIGRhdGEuY3JlZGl0Q2FyZC5leHBpcmF0aW9uRGF0ZSA9IGNhcmQuZXhwaXJhdGlvbkRhdGU7XG4gICAgfSBlbHNlIGlmIChjYXJkLmV4cGlyYXRpb25Nb250aCAmJiBjYXJkLmV4cGlyYXRpb25ZZWFyKSB7XG4gICAgICBkYXRhLmNyZWRpdENhcmQuZXhwaXJhdGlvblllYXIgPSBjYXJkLmV4cGlyYXRpb25ZZWFyO1xuICAgICAgZGF0YS5jcmVkaXRDYXJkLmV4cGlyYXRpb25Nb250aCA9IGNhcmQuZXhwaXJhdGlvbk1vbnRoO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNhcmQuY3Z2KSB7XG4gICAgICBkYXRhLmNyZWRpdENhcmQuY3Z2ID0gb3B0aW9ucy5jYXJkLmN2djtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpZW50XG4gICAgICAucmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICAgIGVuZHBvaW50OiBcInBheW1lbnRfbWV0aG9kcy9jcmVkaXRfY2FyZHNcIixcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIHRva2VuaXplZENhcmQgPSByZXNwb25zZS5jcmVkaXRDYXJkc1swXTtcblxuICAgICAgICBkZWxldGUgdG9rZW5pemVkQ2FyZC5jb25zdW1lZDtcbiAgICAgICAgZGVsZXRlIHRva2VuaXplZENhcmQudGhyZWVEU2VjdXJlSW5mbztcblxuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KGNsaWVudCwgXCJ1bmlvbnBheS5ub25jZS1yZWNlaXZlZFwiKTtcblxuICAgICAgICByZXR1cm4gdG9rZW5pemVkQ2FyZDtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHZhciBzdGF0dXMgPSBlcnIuZGV0YWlscyAmJiBlcnIuZGV0YWlscy5odHRwU3RhdHVzO1xuXG4gICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoY2xpZW50LCBcInVuaW9ucGF5Lm5vbmNlLWZhaWxlZFwiKTtcblxuICAgICAgICBpZiAoc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPCA1MDApIHtcbiAgICAgICAgICBlcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVU5JT05QQVlfRkFJTEVEX1RPS0VOSVpBVElPTik7XG4gICAgICAgICAgZXJyb3IuZGV0YWlscyA9IHsgb3JpZ2luYWxFcnJvcjogZXJyIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXJyb3IgPSBuZXcgQnJhaW50cmVlRXJyb3IoXG4gICAgICAgICAgICBlcnJvcnMuVU5JT05QQVlfVE9LRU5JWkFUSU9OX05FVFdPUktfRVJST1JcbiAgICAgICAgICApO1xuICAgICAgICAgIGVycm9yLmRldGFpbHMgPSB7IG9yaWdpbmFsRXJyb3I6IGVyciB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICB9IGVsc2UgaWYgKGhvc3RlZEZpZWxkcykge1xuICAgIGlmICghaG9zdGVkRmllbGRzLl9idXMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5VTklPTlBBWV9IT1NURURfRklFTERTX0lOU1RBTkNFX0lOVkFMSUQpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBzZWxmLl9pbml0aWFsaXplSG9zdGVkRmllbGRzKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuX2J1cy5lbWl0KFxuICAgICAgICAgIGV2ZW50cy5IT1NURURfRklFTERTX1RPS0VOSVpFLFxuICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyKSB7XG4gICAgICAgICAgICAgIHJlamVjdChuZXcgQnJhaW50cmVlRXJyb3IocmVzcG9uc2UuZXJyKSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLnBheWxvYWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVU5JT05QQVlfQ0FSRF9PUl9IT1NURURfRklFTERTX0lOU1RBTkNFX1JFUVVJUkVEKVxuICApO1xufTtcblxuLyoqXG4gKiBDbGVhbmx5IHJlbW92ZSBhbnl0aGluZyBzZXQgdXAgYnkge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL3VuaW9ucGF5LmNyZWF0ZXxjcmVhdGV9LiBUaGlzIG9ubHkgbmVlZHMgdG8gYmUgY2FsbGVkIHdoZW4gdXNpbmcgVW5pb25QYXkgd2l0aCBIb3N0ZWQgRmllbGRzLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsZWQgb24gY29tcGxldGlvbi4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIHJldHVybnMgYSBwcm9taXNlLlxuICogQGV4YW1wbGVcbiAqIHVuaW9ucGF5SW5zdGFuY2UudGVhcmRvd24oKTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cblVuaW9uUGF5LnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2J1cykge1xuICAgIHRoaXMuX2hvc3RlZEZpZWxkc0ZyYW1lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5faG9zdGVkRmllbGRzRnJhbWUpO1xuICAgIHRoaXMuX2J1cy50ZWFyZG93bigpO1xuICB9XG5cbiAgY29udmVydE1ldGhvZHNUb0Vycm9yKHRoaXMsIG1ldGhvZHMoVW5pb25QYXkucHJvdG90eXBlKSk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufTtcblxuVW5pb25QYXkucHJvdG90eXBlLl9pbml0aWFsaXplSG9zdGVkRmllbGRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXNzZXRzVXJsLCBpc0RlYnVnO1xuICB2YXIgY29tcG9uZW50SWQgPSB1dWlkKCk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5faG9zdGVkRmllbGRzSW5pdGlhbGl6ZVByb21pc2UpIHtcbiAgICByZXR1cm4gdGhpcy5faG9zdGVkRmllbGRzSW5pdGlhbGl6ZVByb21pc2U7XG4gIH1cblxuICB0aGlzLl9ob3N0ZWRGaWVsZHNJbml0aWFsaXplUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgYXNzZXRzVXJsID1cbiAgICAgIHNlbGYuX29wdGlvbnMuY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKS5nYXRld2F5Q29uZmlndXJhdGlvbi5hc3NldHNVcmw7XG4gICAgaXNEZWJ1ZyA9IHNlbGYuX29wdGlvbnMuY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKS5pc0RlYnVnO1xuXG4gICAgc2VsZi5fYnVzID0gbmV3IEJ1cyh7XG4gICAgICBjaGFubmVsOiBjb21wb25lbnRJZCxcbiAgICAgIHZlcmlmeURvbWFpbjogaXNWZXJpZmllZERvbWFpbixcbiAgICB9KTtcbiAgICBzZWxmLl9ob3N0ZWRGaWVsZHNGcmFtZSA9IGlGcmFtZXIoe1xuICAgICAgbmFtZTogY29uc3RhbnRzLkhPU1RFRF9GSUVMRFNfRlJBTUVfTkFNRSArIFwiX1wiICsgY29tcG9uZW50SWQsXG4gICAgICBzcmM6XG4gICAgICAgIGFzc2V0c1VybCArXG4gICAgICAgIFwiL3dlYi9cIiArXG4gICAgICAgIFZFUlNJT04gK1xuICAgICAgICBcIi9odG1sL3VuaW9ucGF5LWhvc3RlZC1maWVsZHMtZnJhbWVcIiArXG4gICAgICAgIHVzZU1pbihpc0RlYnVnKSArXG4gICAgICAgIFwiLmh0bWxcIixcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgIH0pO1xuXG4gICAgc2VsZi5fYnVzLm9uKEJVU19DT05GSUdVUkFUSU9OX1JFUVVFU1RfRVZFTlQsIGZ1bmN0aW9uIChyZXBseSkge1xuICAgICAgcmVwbHkoc2VsZi5fb3B0aW9ucy5jbGllbnQpO1xuXG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNlbGYuX2hvc3RlZEZpZWxkc0ZyYW1lKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXMuX2hvc3RlZEZpZWxkc0luaXRpYWxpemVQcm9taXNlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB3cmFwUHJvbWlzZS53cmFwUHJvdG90eXBlKFVuaW9uUGF5KTtcblxufSx7XCIuLi8uLi9saWIvYW5hbHl0aWNzXCI6MTE5LFwiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uLy4uL2xpYi9jb25zdGFudHNcIjoxMjYsXCIuLi8uLi9saWIvY29udmVydC1tZXRob2RzLXRvLWVycm9yXCI6MTI3LFwiLi4vLi4vbGliL2lzLXZlcmlmaWVkLWRvbWFpblwiOjE1MyxcIi4uLy4uL2xpYi9tZXRob2RzXCI6MTU1LFwiLi4vLi4vbGliL3VzZS1taW5cIjoxNjAsXCIuL2NvbnN0YW50c1wiOjIwMyxcIi4vZXJyb3JzXCI6MjA0LFwiQGJyYWludHJlZS9pZnJhbWVyXCI6MzUsXCJAYnJhaW50cmVlL3V1aWRcIjozOSxcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCI6NDMsXCJmcmFtZWJ1c1wiOjUyfV0sMjA2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUExBSURfTElOS19KUzogXCJodHRwczovL2Nkbi5wbGFpZC5jb20vbGluay92Mi9zdGFibGUvbGluay1pbml0aWFsaXplLmpzXCIsXG59O1xuXG59LHt9XSwyMDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuVXMgQmFuayBBY2NvdW50IC0gQ3JlYXRpb24gRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIFtjcmVhdGluZyB0aGUgVXMgQmFuayBBY2NvdW50IGNvbXBvbmVudF0oLi9tb2R1bGUtYnJhaW50cmVlLXdlYl91cy1iYW5rLWFjY291bnQuaHRtbCMuY3JlYXRlKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFVTX0JBTktfQUNDT1VOVF9OT1RfRU5BQkxFRCBPY2N1cnMgd2hlbiBVUyBCYW5rIEFjY291bnQgaXMgbm90IGVuYWJsZWQgaW4gdGhlIEJyYWludHJlZSBjb250cm9sIHBhbmVsLlxuICovXG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuVXMgQmFuayBBY2NvdW50IC0gdG9rZW5pemUgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIHVzaW5nIHRoZSBbYHRva2VuaXplYCBtZXRob2RdKC4vVXNCYW5rQWNjb3VudC5odG1sI3Rva2VuaXplKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFVTX0JBTktfQUNDT1VOVF9PUFRJT05fUkVRVUlSRUQgT2NjdXJzIHdoZW4gYSByZXF1aXJlZCBvcHRpb24gaXMgbm90IHBhc3NlZC5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFVTX0JBTktfQUNDT1VOVF9NVVRVQUxMWV9FWENMVVNJVkVfT1BUSU9OUyBPY2N1cnMgd2hlbiAxIG9yIG1vcmUgaW5jb21wYXRpYmxlIG9wdGlvbnMgYXJlIHBhc3NlZC5cbiAqIEBwcm9wZXJ0eSB7TkVUV09SS30gVVNfQkFOS19BQ0NPVU5UX0xPR0lOX0xPQURfRkFJTEVEIE9jY3VycyB3aGVuIGJhbmsgbG9naW4gZmxvdyBmYWlscy5cbiAqIEBwcm9wZXJ0eSB7Q1VTVE9NRVJ9IFVTX0JBTktfQUNDT1VOVF9MT0dJTl9DTE9TRUQgT2NjdXJzIHdoZW4gYmFuayBsb2dpbiB3aW5kb3cgaXMgY2xvc2VkLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gVVNfQkFOS19BQ0NPVU5UX0xPR0lOX1JFUVVFU1RfQUNUSVZFIE9jY3VycyB3aGVuIGEgYmFuayBsb2dpbiBmbG93IGlzIGFscmVhZHkgYWN0aXZlLlxuICogQHByb3BlcnR5IHtORVRXT1JLfSBVU19CQU5LX0FDQ09VTlRfVE9LRU5JWkFUSU9OX05FVFdPUktfRVJST1IgT2NjdXJzIHdoZW4gcGF5bWVudCBkZXRhaWxzIGNvdWxkIG5vdCBiZSB0b2tlbml6ZWQuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBVU19CQU5LX0FDQ09VTlRfRkFJTEVEX1RPS0VOSVpBVElPTiBPY2N1cnMgd2hlbiBwYXltZW50IGRldGFpbHMgZmFpbGVkIHRvIGJlIHRva2VuaXplZC5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFVTX0JBTktfQUNDT1VOVF9CQU5LX0xPR0lOX05PVF9FTkFCTEVEIE9jY3VycyB3aGVuIGJhbmsgbG9naW4gZmxvdyBpcyBub3QgZW5hYmxlZCBpbiB0aGUgQnJhaW50cmVlIGNvbnRyb2wgcGFuZWwuXG4gKi9cblxudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBVU19CQU5LX0FDQ09VTlRfT1BUSU9OX1JFUVVJUkVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJVU19CQU5LX0FDQ09VTlRfT1BUSU9OX1JFUVVJUkVEXCIsXG4gIH0sXG4gIFVTX0JBTktfQUNDT1VOVF9NVVRVQUxMWV9FWENMVVNJVkVfT1BUSU9OUzoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVVNfQkFOS19BQ0NPVU5UX01VVFVBTExZX0VYQ0xVU0lWRV9PUFRJT05TXCIsXG4gIH0sXG4gIFVTX0JBTktfQUNDT1VOVF9MT0dJTl9MT0FEX0ZBSUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk5FVFdPUkssXG4gICAgY29kZTogXCJVU19CQU5LX0FDQ09VTlRfTE9HSU5fTE9BRF9GQUlMRURcIixcbiAgICBtZXNzYWdlOiBcIkJhbmsgbG9naW4gZmxvdyBmYWlsZWQgdG8gbG9hZC5cIixcbiAgfSxcbiAgVVNfQkFOS19BQ0NPVU5UX0xPR0lOX0NMT1NFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiVVNfQkFOS19BQ0NPVU5UX0xPR0lOX0NMT1NFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQ3VzdG9tZXIgY2xvc2VkIGJhbmsgbG9naW4gZmxvdyBiZWZvcmUgYXV0aG9yaXppbmcuXCIsXG4gIH0sXG4gIFVTX0JBTktfQUNDT1VOVF9MT0dJTl9SRVFVRVNUX0FDVElWRToge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVVNfQkFOS19BQ0NPVU5UX0xPR0lOX1JFUVVFU1RfQUNUSVZFXCIsXG4gICAgbWVzc2FnZTogXCJBbm90aGVyIGJhbmsgbG9naW4gdG9rZW5pemF0aW9uIHJlcXVlc3QgaXMgYWN0aXZlLlwiLFxuICB9LFxuICBVU19CQU5LX0FDQ09VTlRfVE9LRU5JWkFUSU9OX05FVFdPUktfRVJST1I6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5ORVRXT1JLLFxuICAgIGNvZGU6IFwiVVNfQkFOS19BQ0NPVU5UX1RPS0VOSVpBVElPTl9ORVRXT1JLX0VSUk9SXCIsXG4gICAgbWVzc2FnZTogXCJBIHRva2VuaXphdGlvbiBuZXR3b3JrIGVycm9yIG9jY3VycmVkLlwiLFxuICB9LFxuICBVU19CQU5LX0FDQ09VTlRfRkFJTEVEX1RPS0VOSVpBVElPTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiVVNfQkFOS19BQ0NPVU5UX0ZBSUxFRF9UT0tFTklaQVRJT05cIixcbiAgICBtZXNzYWdlOiBcIlRoZSBzdXBwbGllZCBkYXRhIGZhaWxlZCB0b2tlbml6YXRpb24uXCIsXG4gIH0sXG4gIFVTX0JBTktfQUNDT1VOVF9OT1RfRU5BQkxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVVNfQkFOS19BQ0NPVU5UX05PVF9FTkFCTEVEXCIsXG4gICAgbWVzc2FnZTogXCJVUyBiYW5rIGFjY291bnQgaXMgbm90IGVuYWJsZWQuXCIsXG4gIH0sXG4gIFVTX0JBTktfQUNDT1VOVF9CQU5LX0xPR0lOX05PVF9FTkFCTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJVU19CQU5LX0FDQ09VTlRfQkFOS19MT0dJTl9OT1RfRU5BQkxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiQmFuayBsb2dpbiBpcyBub3QgZW5hYmxlZC5cIixcbiAgfSxcbn07XG5cbn0se1wiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNH1dLDIwODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQG1vZHVsZSBicmFpbnRyZWUtd2ViL3VzLWJhbmstYWNjb3VudFxuICogQGRlc2NyaXB0aW9uIFRoaXMgbW9kdWxlIGlzIGZvciBhY2NlcHRpbmcgcGF5bWVudHMgb2YgVVMgYmFuayBhY2NvdW50cy5cbiAqL1xuXG52YXIgYmFzaWNDb21wb25lbnRWZXJpZmljYXRpb24gPSBfZGVyZXFfKFwiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIik7XG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBjcmVhdGVEZWZlcnJlZENsaWVudCA9IF9kZXJlcV8oXCIuLi9saWIvY3JlYXRlLWRlZmVycmVkLWNsaWVudFwiKTtcbnZhciBjcmVhdGVBc3NldHNVcmwgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCIpO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL2Vycm9yc1wiKTtcbnZhciBVU0JhbmtBY2NvdW50ID0gX2RlcmVxXyhcIi4vdXMtYmFuay1hY2NvdW50XCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZnVuY3Rpb24gY3JlYXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBDcmVhdGlvbiBvcHRpb25zOlxuICogQHBhcmFtIHtDbGllbnR9IFtvcHRpb25zLmNsaWVudF0gQSB7QGxpbmsgQ2xpZW50fSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hdXRob3JpemF0aW9uXSBBIHRva2VuaXphdGlvbktleSBvciBjbGllbnRUb2tlbi4gQ2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYG9wdGlvbnMuY2xpZW50YC5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgYGRhdGFgLCBpcyB0aGUge0BsaW5rIFVTQmFua0FjY291bnR9IGluc3RhbmNlLiBJZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCwgYGNyZWF0ZWAgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB7QGxpbmsgVVNCYW5rQWNjb3VudH0gaW5zdGFuY2UuXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IFwiVVMgQmFuayBBY2NvdW50XCI7XG5cbiAgcmV0dXJuIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uXG4gICAgLnZlcmlmeSh7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgY2xpZW50OiBvcHRpb25zLmNsaWVudCxcbiAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjcmVhdGVEZWZlcnJlZENsaWVudC5jcmVhdGUoe1xuICAgICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICAgIGRlYnVnOiBvcHRpb25zLmRlYnVnLFxuICAgICAgICBhc3NldHNVcmw6IGNyZWF0ZUFzc2V0c1VybC5jcmVhdGUob3B0aW9ucy5hdXRob3JpemF0aW9uKSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgdmFyIHVzQmFua0FjY291bnQ7XG5cbiAgICAgIG9wdGlvbnMuY2xpZW50ID0gY2xpZW50O1xuXG4gICAgICB1c0JhbmtBY2NvdW50ID1cbiAgICAgICAgb3B0aW9ucy5jbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpLmdhdGV3YXlDb25maWd1cmF0aW9uLnVzQmFua0FjY291bnQ7XG4gICAgICBpZiAoIXVzQmFua0FjY291bnQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVVNfQkFOS19BQ0NPVU5UX05PVF9FTkFCTEVEKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IFVTQmFua0FjY291bnQob3B0aW9ucyk7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IHdyYXBQcm9taXNlKGNyZWF0ZSksXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgU0RLLCBpLmUuIGB7QHBrZyB2ZXJzaW9ufWAuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBWRVJTSU9OOiBWRVJTSU9OLFxufTtcblxufSx7XCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiOjEyMixcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIjoxMjksXCIuLi9saWIvY3JlYXRlLWRlZmVycmVkLWNsaWVudFwiOjEzMSxcIi4vZXJyb3JzXCI6MjA3LFwiLi91cy1iYW5rLWFjY291bnRcIjoyMDksXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMjA5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKFwiLi9jb25zdGFudHNcIik7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpO1xudmFyIHNoYXJlZEVycm9ycyA9IF9kZXJlcV8oXCIuLi9saWIvZXJyb3JzXCIpO1xudmFyIGFuYWx5dGljcyA9IF9kZXJlcV8oXCIuLi9saWIvYW5hbHl0aWNzXCIpO1xudmFyIG9uY2UgPSBfZGVyZXFfKFwiLi4vbGliL29uY2VcIik7XG52YXIgY29udmVydE1ldGhvZHNUb0Vycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIik7XG52YXIgbWV0aG9kcyA9IF9kZXJlcV8oXCIuLi9saWIvbWV0aG9kc1wiKTtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcblxudmFyIFRPS0VOSVpFX0JBTktfREVUQUlMU19NVVRBVElPTiA9IGNyZWF0ZUdyYXBoUUxNdXRhdGlvbihcIlVzQmFua0FjY291bnRcIik7XG52YXIgVE9LRU5JWkVfQkFOS19MT0dJTl9NVVRBVElPTiA9IGNyZWF0ZUdyYXBoUUxNdXRhdGlvbihcIlVzQmFua0xvZ2luXCIpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFVTQmFua0FjY291bnR+dG9rZW5pemVQYXlsb2FkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbm9uY2UgVGhlIHBheW1lbnQgbWV0aG9kIG5vbmNlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIHBheW1lbnQgbWV0aG9kIHR5cGUsIGFsd2F5cyBgdXNfYmFua19hY2NvdW50YC5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkZXRhaWxzIEFkZGl0aW9uYWwgYWNjb3VudCBkZXRhaWxzLiBDdXJyZW50bHkgZW1wdHkuXG4gKi9cblxuLyoqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFNlZSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvdXMtYmFuay1hY2NvdW50LmNyZWF0ZXx1cy1iYW5rLWFjY291bnQuY3JlYXRlfS5cbiAqIEBjbGFzc2Rlc2MgVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgVVMgQmFuayBBY2NvdW50IGNvbXBvbmVudC4gSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgY2FuIHRva2VuaXplIHJhdyBiYW5rIGRldGFpbHMgb3IgcHJlc2VudCBhIGJhbmsgbG9naW4uIDxzdHJvbmc+WW91IGNhbm5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gVXNlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi91cy1iYW5rLWFjY291bnQuY3JlYXRlfGJyYWludHJlZS51cy1iYW5rLWFjY291bnQuY3JlYXRlfSBpbnN0ZWFkLjwvc3Ryb25nPlxuICovXG5mdW5jdGlvbiBVU0JhbmtBY2NvdW50KG9wdGlvbnMpIHtcbiAgdGhpcy5fY2xpZW50ID0gb3B0aW9ucy5jbGllbnQ7XG5cbiAgdGhpcy5faXNUb2tlbml6aW5nQmFua0xvZ2luID0gZmFsc2U7XG5cbiAgYW5hbHl0aWNzLnNlbmRFdmVudCh0aGlzLl9jbGllbnQsIFwidXNiYW5rYWNjb3VudC5pbml0aWFsaXplZFwiKTtcbn1cblxuLyoqXG4gKiBUb2tlbml6ZXMgYmFuayBpbmZvcm1hdGlvbiB0byByZXR1cm4gYSBwYXltZW50IG1ldGhvZCBub25jZS4gWW91IGNhbiB0b2tlbml6ZSBiYW5rIGRldGFpbHMgYnkgcHJvdmlkaW5nIGluZm9ybWF0aW9uIGxpa2UgYWNjb3VudCBhbmQgcm91dGluZyBudW1iZXJzLiBZb3UgY2FuIGFsc28gdG9rZW5pemUgd2l0aCBhIGJhbmsgbG9naW4gVUkgdGhhdCBwcm9tcHRzIHRoZSBjdXN0b21lciB0byBsb2cgaW50byB0aGVpciBiYW5rIGFjY291bnQuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBbGwgdG9rZW5pemF0aW9uIG9wdGlvbnMgZm9yIHRoZSBVUyBCYW5rIEFjY291bnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubWFuZGF0ZVRleHQgQSBzdHJpbmcgZm9yIHByb29mIG9mIGN1c3RvbWVyIGF1dGhvcml6YXRpb24uIEZvciBleGFtcGxlLCBgJ0kgYXV0aG9yaXplIEJyYWludHJlZSB0byBkZWJpdCBteSBiYW5rIGFjY291bnQgb24gYmVoYWxmIG9mIE15IE9ubGluZSBTdG9yZS4nYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5iYW5rRGV0YWlsc10gQmFuayBkZXRhaWwgaW5mb3JtYXRpb24gKHN1Y2ggYXMgYWNjb3VudCBhbmQgcm91dGluZyBudW1iZXJzKS4gYGJhbmtEZXRhaWxzYCBvciBgYmFua0xvZ2luYCBvcHRpb24gbXVzdCBiZSBwcm92aWRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmJhbmtEZXRhaWxzLnJvdXRpbmdOdW1iZXIgVGhlIGN1c3RvbWVyJ3MgYmFuayByb3V0aW5nIG51bWJlciwgc3VjaCBhcyBgJzMwNzA3NTI1OSdgLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYmFua0RldGFpbHMuYWNjb3VudE51bWJlciBUaGUgY3VzdG9tZXIncyBiYW5rIGFjY291bnQgbnVtYmVyLCBzdWNoIGFzIGAnOTk5OTk5OTk5J2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5iYW5rRGV0YWlscy5hY2NvdW50VHlwZSBUaGUgY3VzdG9tZXIncyBiYW5rIGFjY291bnQgdHlwZS4gTXVzdCBiZSBgJ2NoZWNraW5nJ2Agb3IgYCdzYXZpbmdzJ2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5iYW5rRGV0YWlscy5vd25lcnNoaXBUeXBlIFRoZSBjdXN0b21lcidzIGJhbmsgYWNjb3VudCBvd25lcnNoaXAgdHlwZS4gTXVzdCBiZSBgJ3BlcnNvbmFsJ2Agb3IgYCdidXNpbmVzcydgLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJhbmtEZXRhaWxzLmZpcnN0TmFtZV0gVGhlIGN1c3RvbWVyJ3MgZmlyc3QgbmFtZS4gUmVxdWlyZWQgd2hlbiBhY2NvdW50IG93bmVyc2hpcCB0eXBlIGlzIGBwZXJzb25hbGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmFua0RldGFpbHMubGFzdE5hbWVdIFRoZSBjdXN0b21lcidzIGxhc3QgbmFtZS4gUmVxdWlyZWQgd2hlbiBhY2NvdW50IG93bmVyc2hpcCB0eXBlIGlzIGBwZXJzb25hbGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmFua0RldGFpbHMuYnVzaW5lc3NOYW1lXSBUaGUgY3VzdG9tZXIncyBidXNpbmVzcyBuYW1lLiBSZXF1aXJlZCB3aGVuIGFjY291bnQgb3duZXJzaGlwIHR5cGUgaXMgYGJ1c2luZXNzYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLmJhbmtEZXRhaWxzLmJpbGxpbmdBZGRyZXNzIFRoZSBjdXN0b21lcidzIGJpbGxpbmcgYWRkcmVzcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmJhbmtEZXRhaWxzLmJpbGxpbmdBZGRyZXNzLnN0cmVldEFkZHJlc3MgVGhlIHN0cmVldCBhZGRyZXNzIGZvciB0aGUgY3VzdG9tZXIncyBiaWxsaW5nIGFkZHJlc3MsIHN1Y2ggYXMgYCcxMjMgRmFrZSBTdCdgLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJhbmtEZXRhaWxzLmJpbGxpbmdBZGRyZXNzLmV4dGVuZGVkQWRkcmVzc10gVGhlIGV4dGVuZGVkIHN0cmVldCBhZGRyZXNzIGZvciB0aGUgY3VzdG9tZXIncyBiaWxsaW5nIGFkZHJlc3MsIHN1Y2ggYXMgYCdBcGFydG1lbnQgQidgLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYmFua0RldGFpbHMuYmlsbGluZ0FkZHJlc3MubG9jYWxpdHkgVGhlIGxvY2FsaXR5IGZvciB0aGUgY3VzdG9tZXIncyBiaWxsaW5nIGFkZHJlc3MuIFRoaXMgaXMgdHlwaWNhbGx5IGEgY2l0eSwgc3VjaCBhcyBgJ1NhbiBGcmFuY2lzY28nYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmJhbmtEZXRhaWxzLmJpbGxpbmdBZGRyZXNzLnJlZ2lvbiBUaGUgcmVnaW9uIGZvciB0aGUgY3VzdG9tZXIncyBiaWxsaW5nIGFkZHJlc3MuIFRoaXMgaXMgdHlwaWNhbGx5IGEgc3RhdGUsIHN1Y2ggYXMgYCdDQSdgLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYmFua0RldGFpbHMuYmlsbGluZ0FkZHJlc3MucG9zdGFsQ29kZSBUaGUgcG9zdGFsIGNvZGUgZm9yIHRoZSBjdXN0b21lcidzIGJpbGxpbmcgYWRkcmVzcy4gVGhpcyBpcyB0eXBpY2FsbHkgYSBaSVAgY29kZSwgc3VjaCBhcyBgJzk0MTE5J2AuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuYmFua0xvZ2luXSBCYW5rIGxvZ2luIGluZm9ybWF0aW9uLiBgYmFua0xvZ2luYCBvciBgYmFua0RldGFpbHNgIG9wdGlvbiBtdXN0IGJlIHByb3ZpZGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYmFua0xvZ2luLmRpc3BsYXlOYW1lIERpc3BsYXkgbmFtZSBmb3IgdGhlIGJhbmsgbG9naW4gVUksIHN1Y2ggYXMgYCdNeSBTdG9yZSdgLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYmFua0xvZ2luLm93bmVyc2hpcFR5cGUgVGhlIGN1c3RvbWVyJ3MgYmFuayBhY2NvdW50IG93bmVyc2hpcCB0eXBlLiBNdXN0IGJlIGAncGVyc29uYWwnYCBvciBgJ2J1c2luZXNzJ2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmFua0xvZ2luLmZpcnN0TmFtZV0gVGhlIGN1c3RvbWVyJ3MgZmlyc3QgbmFtZS4gUmVxdWlyZWQgd2hlbiBhY2NvdW50IG93bmVyc2hpcCB0eXBlIGlzIGBwZXJzb25hbGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmFua0xvZ2luLmxhc3ROYW1lXSBUaGUgY3VzdG9tZXIncyBsYXN0IG5hbWUuIFJlcXVpcmVkIHdoZW4gYWNjb3VudCBvd25lcnNoaXAgdHlwZSBpcyBgcGVyc29uYWxgLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJhbmtMb2dpbi5idXNpbmVzc05hbWVdIFRoZSBjdXN0b21lcidzIGJ1c2luZXNzIG5hbWUuIFJlcXVpcmVkIHdoZW4gYWNjb3VudCBvd25lcnNoaXAgdHlwZSBpcyBgYnVzaW5lc3NgLlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMuYmFua0xvZ2luLmJpbGxpbmdBZGRyZXNzIFRoZSBjdXN0b21lcidzIGJpbGxpbmcgYWRkcmVzcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmJhbmtMb2dpbi5iaWxsaW5nQWRkcmVzcy5zdHJlZXRBZGRyZXNzIFRoZSBzdHJlZXQgYWRkcmVzcyBmb3IgdGhlIGN1c3RvbWVyJ3MgYmlsbGluZyBhZGRyZXNzLCBzdWNoIGFzIGAnMTIzIEZha2UgU3QnYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5iYW5rTG9naW4uYmlsbGluZ0FkZHJlc3MuZXh0ZW5kZWRBZGRyZXNzXSBUaGUgZXh0ZW5kZWQgc3RyZWV0IGFkZHJlc3MgZm9yIHRoZSBjdXN0b21lcidzIGJpbGxpbmcgYWRkcmVzcywgc3VjaCBhcyBgJ0FwYXJ0bWVudCBCJ2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5iYW5rTG9naW4uYmlsbGluZ0FkZHJlc3MubG9jYWxpdHkgVGhlIGxvY2FsaXR5IGZvciB0aGUgY3VzdG9tZXIncyBiaWxsaW5nIGFkZHJlc3MuIFRoaXMgaXMgdHlwaWNhbGx5IGEgY2l0eSwgc3VjaCBhcyBgJ1NhbiBGcmFuY2lzY28nYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmJhbmtMb2dpbi5iaWxsaW5nQWRkcmVzcy5yZWdpb24gVGhlIHJlZ2lvbiBmb3IgdGhlIGN1c3RvbWVyJ3MgYmlsbGluZyBhZGRyZXNzLiBUaGlzIGlzIHR5cGljYWxseSBhIHN0YXRlLCBzdWNoIGFzIGAnQ0EnYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmJhbmtMb2dpbi5iaWxsaW5nQWRkcmVzcy5wb3N0YWxDb2RlIFRoZSBwb3N0YWwgY29kZSBmb3IgdGhlIGN1c3RvbWVyJ3MgYmlsbGluZyBhZGRyZXNzLiBUaGlzIGlzIHR5cGljYWxseSBhIFpJUCBjb2RlLCBzdWNoIGFzIGAnOTQxMTknYC5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgPGNvZGU+ZGF0YTwvY29kZT4sIGlzIGEge0BsaW5rIFVTQmFua0FjY291bnR+dG9rZW5pemVQYXlsb2FkfHRva2VuaXplUGF5bG9hZH0uIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBgdG9rZW5pemVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB7QGxpbmsgVVNCYW5rQWNjb3VudH50b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfS5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+VG9rZW5pemluZyByYXcgYmFuayBkZXRhaWxzPC9jYXB0aW9uPlxuICogdmFyIHJvdXRpbmdOdW1iZXJJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJyb3V0aW5nLW51bWJlclwiXScpO1xuICogdmFyIGFjY291bnROdW1iZXJJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJhY2NvdW50LW51bWJlclwiXScpO1xuICogdmFyIGFjY291bnRUeXBlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwiYWNjb3VudC10eXBlXCJdOmNoZWNrZWQnKTtcbiAqIHZhciBvd25lcnNoaXBUeXBlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwib3duZXJzaGlwLXR5cGVcIl06Y2hlY2tlZCcpO1xuICogdmFyIGZpcnN0TmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImZpcnN0LW5hbWVcIl0nKTtcbiAqIHZhciBsYXN0TmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImxhc3QtbmFtZVwiXScpO1xuICogdmFyIGJ1c2luZXNzTmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImJ1c2luZXNzLW5hbWVcIl0nKTtcbiAqIHZhciBiaWxsaW5nQWRkcmVzc1N0cmVldElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInN0cmVldC1hZGRyZXNzXCJdJyk7XG4gKiB2YXIgYmlsbGluZ0FkZHJlc3NFeHRlbmRlZElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImV4dGVuZGVkLWFkZHJlc3NcIl0nKTtcbiAqIHZhciBiaWxsaW5nQWRkcmVzc0xvY2FsaXR5SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwibG9jYWxpdHlcIl0nKTtcbiAqIHZhciBiaWxsaW5nQWRkcmVzc1JlZ2lvblNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdFtuYW1lPVwicmVnaW9uXCJdJyk7XG4gKiB2YXIgYmlsbGluZ0FkZHJlc3NQb3N0YWxJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJwb3N0YWwtY29kZVwiXScpO1xuICpcbiAqIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICogICB2YXIgYmFua0RldGFpbHMgPSB7XG4gKiAgICAgcm91dGluZ051bWJlcjogcm91dGluZ051bWJlcklucHV0LnZhbHVlLFxuICogICAgIGFjY291bnROdW1iZXI6IGFjY291bnROdW1iZXJJbnB1dC52YWx1ZSxcbiAqICAgICBhY2NvdW50VHlwZTogYWNjb3VudFR5cGVJbnB1dC52YWx1ZSxcbiAqICAgICBvd25lcnNoaXBUeXBlOiBvd25lcnNoaXBUeXBlSW5wdXQudmFsdWUsXG4gKiAgICAgYmlsbGluZ0FkZHJlc3M6IHtcbiAqICAgICAgIHN0cmVldEFkZHJlc3M6IGJpbGxpbmdBZGRyZXNzU3RyZWV0SW5wdXQudmFsdWUsXG4gKiAgICAgICBleHRlbmRlZEFkZHJlc3M6IGJpbGxpbmdBZGRyZXNzRXh0ZW5kZWRJbnB1dC52YWx1ZSxcbiAqICAgICAgIGxvY2FsaXR5OiBiaWxsaW5nQWRkcmVzc0xvY2FsaXR5SW5wdXQudmFsdWUsXG4gKiAgICAgICByZWdpb246IGJpbGxpbmdBZGRyZXNzUmVnaW9uU2VsZWN0LnZhbHVlLFxuICogICAgICAgcG9zdGFsQ29kZTogYmlsbGluZ0FkZHJlc3NQb3N0YWxJbnB1dC52YWx1ZVxuICogICAgIH1cbiAqICAgfTtcbiAqXG4gKiAgIGlmIChiYW5rRGV0YWlscy5vd25lcnNoaXBUeXBlID09PSAncGVyc29uYWwnKSB7XG4gKiAgICAgYmFua0RldGFpbHMuZmlyc3ROYW1lID0gZmlyc3ROYW1lSW5wdXQudmFsdWU7XG4gKiAgICAgYmFua0RldGFpbHMubGFzdE5hbWUgPSBsYXN0TmFtZUlucHV0LnZhbHVlO1xuICogICB9IGVsc2Uge1xuICogICAgIGJhbmtEZXRhaWxzLmJ1c2luZXNzTmFtZSA9IGJ1c2luZXNzTmFtZUlucHV0LnZhbHVlO1xuICogICB9XG4gKlxuICogICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICpcbiAqICAgdXNCYW5rQWNjb3VudEluc3RhbmNlLnRva2VuaXplKHtcbiAqICAgICBiYW5rRGV0YWlsczogYmFua0RldGFpbHMsXG4gKiAgICAgbWFuZGF0ZVRleHQ6ICdJIGF1dGhvcml6ZSBCcmFpbnRyZWUgdG8gZGViaXQgbXkgYmFuayBhY2NvdW50IG9uIGJlaGFsZiBvZiBNeSBPbmxpbmUgU3RvcmUuJ1xuICogICB9LCBmdW5jdGlvbiAodG9rZW5pemVFcnIsIHRva2VuaXplZFBheWxvYWQpIHtcbiAqICAgICBpZiAodG9rZW5pemVFcnIpIHtcbiAqICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZXJlIHdhcyBhbiBlcnJvciB0b2tlbml6aW5nIHRoZSBiYW5rIGRldGFpbHMuJyk7XG4gKiAgICAgICByZXR1cm47XG4gKiAgICAgfVxuICpcbiAqICAgICAvLyBTZW5kIHRva2VuaXplUGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlciBoZXJlIVxuICogICB9KTtcbiAqIH0pO1xuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPlRva2VuaXppbmcgd2l0aCBiYW5rIGxvZ2luIFVJPC9jYXB0aW9uPlxuICogdmFyIG93bmVyc2hpcFR5cGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJvd25lcnNoaXAtdHlwZVwiXTpjaGVja2VkJyk7XG4gKiB2YXIgZmlyc3ROYW1lSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwiZmlyc3QtbmFtZVwiXScpO1xuICogdmFyIGxhc3ROYW1lSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwibGFzdC1uYW1lXCJdJyk7XG4gKiB2YXIgYnVzaW5lc3NOYW1lSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwiYnVzaW5lc3MtbmFtZVwiXScpO1xuICogdmFyIGJpbGxpbmdBZGRyZXNzU3RyZWV0SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwic3RyZWV0LWFkZHJlc3NcIl0nKTtcbiAqIHZhciBiaWxsaW5nQWRkcmVzc0V4dGVuZGVkSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwiZXh0ZW5kZWQtYWRkcmVzc1wiXScpO1xuICogdmFyIGJpbGxpbmdBZGRyZXNzTG9jYWxpdHlJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJsb2NhbGl0eVwiXScpO1xuICogdmFyIGJpbGxpbmdBZGRyZXNzUmVnaW9uU2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2VsZWN0W25hbWU9XCJyZWdpb25cIl0nKTtcbiAqIHZhciBiaWxsaW5nQWRkcmVzc1Bvc3RhbElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInBvc3RhbC1jb2RlXCJdJyk7XG4gKlxuICogYmFua0xvZ2luQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgIHZhciBiYW5rTG9naW4gPSB7XG4gKiAgICAgZGlzcGxheU5hbWU6ICdNeSBPbmxpbmUgU3RvcmUnLFxuICogICAgIG93bmVyc2hpcFR5cGU6IG93bmVyc2hpcFR5cGVJbnB1dC52YWx1ZSxcbiAqICAgICBiaWxsaW5nQWRkcmVzczoge1xuICogICAgICAgc3RyZWV0QWRkcmVzczogYmlsbGluZ0FkZHJlc3NTdHJlZXRJbnB1dC52YWx1ZSxcbiAqICAgICAgIGV4dGVuZGVkQWRkcmVzczogYmlsbGluZ0FkZHJlc3NFeHRlbmRlZElucHV0LnZhbHVlLFxuICogICAgICAgbG9jYWxpdHk6IGJpbGxpbmdBZGRyZXNzTG9jYWxpdHlJbnB1dC52YWx1ZSxcbiAqICAgICAgIHJlZ2lvbjogYmlsbGluZ0FkZHJlc3NSZWdpb25TZWxlY3QudmFsdWUsXG4gKiAgICAgICBwb3N0YWxDb2RlOiBiaWxsaW5nQWRkcmVzc1Bvc3RhbElucHV0LnZhbHVlXG4gKiAgICAgfVxuICogICB9XG4gKiAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gKlxuICogICBpZiAoYmFua0xvZ2luLm93bmVyc2hpcFR5cGUgPT09ICdwZXJzb25hbCcpIHtcbiAqICAgICBiYW5rTG9naW4uZmlyc3ROYW1lID0gZmlyc3ROYW1lSW5wdXQudmFsdWU7XG4gKiAgICAgYmFua0xvZ2luLmxhc3ROYW1lID0gbGFzdE5hbWVJbnB1dC52YWx1ZTtcbiAqICAgfSBlbHNlIHtcbiAqICAgICBiYW5rTG9naW4uYnVzaW5lc3NOYW1lID0gYnVzaW5lc3NOYW1lSW5wdXQudmFsdWU7XG4gKiAgIH1cbiAqXG4gKiAgIHVzQmFua0FjY291bnRJbnN0YW5jZS50b2tlbml6ZSh7XG4gKiAgICAgYmFua0xvZ2luOiBiYW5rTG9naW4sXG4gKiAgICAgbWFuZGF0ZVRleHQ6ICdJIGF1dGhvcml6ZSBCcmFpbnRyZWUgdG8gZGViaXQgbXkgYmFuayBhY2NvdW50IG9uIGJlaGFsZiBvZiBNeSBPbmxpbmUgU3RvcmUuJ1xuICogICB9LCBmdW5jdGlvbiAodG9rZW5pemVFcnIsIHRva2VuaXplZFBheWxvYWQpIHtcbiAqICAgICBpZiAodG9rZW5pemVFcnIpIHtcbiAqICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZXJlIHdhcyBhbiBlcnJvciB0b2tlbml6aW5nIHRoZSBiYW5rIGRldGFpbHMuJyk7XG4gKiAgICAgICByZXR1cm47XG4gKiAgICAgfVxuICpcbiAqICAgICAvLyBTZW5kIHRva2VuaXplUGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlciBoZXJlIVxuICogICB9KTtcbiAqIH0pO1xuICovXG5VU0JhbmtBY2NvdW50LnByb3RvdHlwZS50b2tlbml6ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmICghb3B0aW9ucy5tYW5kYXRlVGV4dCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5VU19CQU5LX0FDQ09VTlRfT1BUSU9OX1JFUVVJUkVELnR5cGUsXG4gICAgICAgIGNvZGU6IGVycm9ycy5VU19CQU5LX0FDQ09VTlRfT1BUSU9OX1JFUVVJUkVELmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IFwibWFuZGF0ZVRleHQgcHJvcGVydHkgaXMgcmVxdWlyZWQuXCIsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5iYW5rRGV0YWlscyAmJiBvcHRpb25zLmJhbmtMb2dpbikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5VU19CQU5LX0FDQ09VTlRfTVVUVUFMTFlfRVhDTFVTSVZFX09QVElPTlMudHlwZSxcbiAgICAgICAgY29kZTogZXJyb3JzLlVTX0JBTktfQUNDT1VOVF9NVVRVQUxMWV9FWENMVVNJVkVfT1BUSU9OUy5jb2RlLFxuICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgIFwidG9rZW5pemUgbXVzdCBiZSBjYWxsZWQgd2l0aCBiYW5rRGV0YWlscyBvciBiYW5rTG9naW4sIG5vdCBib3RoLlwiLFxuICAgICAgfSlcbiAgICApO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMuYmFua0RldGFpbHMpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9rZW5pemVCYW5rRGV0YWlscyhvcHRpb25zKTtcbiAgfSBlbHNlIGlmIChvcHRpb25zLmJhbmtMb2dpbikge1xuICAgIHJldHVybiB0aGlzLl90b2tlbml6ZUJhbmtMb2dpbihvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgdHlwZTogZXJyb3JzLlVTX0JBTktfQUNDT1VOVF9PUFRJT05fUkVRVUlSRUQudHlwZSxcbiAgICAgIGNvZGU6IGVycm9ycy5VU19CQU5LX0FDQ09VTlRfT1BUSU9OX1JFUVVJUkVELmNvZGUsXG4gICAgICBtZXNzYWdlOiBcInRva2VuaXplIG11c3QgYmUgY2FsbGVkIHdpdGggYmFua0RldGFpbHMgb3IgYmFua0xvZ2luLlwiLFxuICAgIH0pXG4gICk7XG59O1xuXG5VU0JhbmtBY2NvdW50LnByb3RvdHlwZS5fdG9rZW5pemVCYW5rRGV0YWlscyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBjbGllbnQgPSB0aGlzLl9jbGllbnQ7XG4gIHZhciBiYW5rRGV0YWlscyA9IG9wdGlvbnMuYmFua0RldGFpbHM7XG4gIHZhciBkYXRhID0ge1xuICAgIGFjaE1hbmRhdGU6IG9wdGlvbnMubWFuZGF0ZVRleHQsXG4gICAgcm91dGluZ051bWJlcjogYmFua0RldGFpbHMucm91dGluZ051bWJlcixcbiAgICBhY2NvdW50TnVtYmVyOiBiYW5rRGV0YWlscy5hY2NvdW50TnVtYmVyLFxuICAgIGFjY291bnRUeXBlOiBiYW5rRGV0YWlscy5hY2NvdW50VHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgIGJpbGxpbmdBZGRyZXNzOiBmb3JtYXRCaWxsaW5nQWRkcmVzc0ZvckdyYXBoUUwoXG4gICAgICBiYW5rRGV0YWlscy5iaWxsaW5nQWRkcmVzcyB8fCB7fVxuICAgICksXG4gIH07XG5cbiAgZm9ybWF0RGF0YUZvck93bmVyc2hpcFR5cGUoZGF0YSwgYmFua0RldGFpbHMpO1xuXG4gIHJldHVybiBjbGllbnRcbiAgICAucmVxdWVzdCh7XG4gICAgICBhcGk6IFwiZ3JhcGhRTEFwaVwiLFxuICAgICAgZGF0YToge1xuICAgICAgICBxdWVyeTogVE9LRU5JWkVfQkFOS19ERVRBSUxTX01VVEFUSU9OLFxuICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgdXNCYW5rQWNjb3VudDogZGF0YSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgY2xpZW50LFxuICAgICAgICBcInVzYmFua2FjY291bnQuYmFua2RldGFpbHMudG9rZW5pemF0aW9uLnN1Y2NlZWRlZFwiXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICBmb3JtYXRUb2tlbml6ZVJlc3BvbnNlRnJvbUdyYXBoUUwocmVzcG9uc2UsIFwidG9rZW5pemVVc0JhbmtBY2NvdW50XCIpXG4gICAgICApO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHZhciBlcnJvciA9IGVycm9yRnJvbShlcnIpO1xuXG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICBjbGllbnQsXG4gICAgICAgIFwidXNiYW5rYWNjb3VudC5iYW5rZGV0YWlscy50b2tlbml6YXRpb24uZmFpbGVkXCJcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfSk7XG59O1xuXG5VU0JhbmtBY2NvdW50LnByb3RvdHlwZS5fdG9rZW5pemVCYW5rTG9naW4gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjbGllbnQgPSB0aGlzLl9jbGllbnQ7XG4gIHZhciBnYXRld2F5Q29uZmlndXJhdGlvbiA9IGNsaWVudC5nZXRDb25maWd1cmF0aW9uKCkuZ2F0ZXdheUNvbmZpZ3VyYXRpb247XG4gIHZhciBpc1Byb2R1Y3Rpb24gPSBnYXRld2F5Q29uZmlndXJhdGlvbi5lbnZpcm9ubWVudCA9PT0gXCJwcm9kdWN0aW9uXCI7XG4gIHZhciBwbGFpZENvbmZpZyA9IGdhdGV3YXlDb25maWd1cmF0aW9uLnVzQmFua0FjY291bnQucGxhaWQ7XG5cbiAgaWYgKCFvcHRpb25zLmJhbmtMb2dpbi5kaXNwbGF5TmFtZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgIHR5cGU6IGVycm9ycy5VU19CQU5LX0FDQ09VTlRfT1BUSU9OX1JFUVVJUkVELnR5cGUsXG4gICAgICAgIGNvZGU6IGVycm9ycy5VU19CQU5LX0FDQ09VTlRfT1BUSU9OX1JFUVVJUkVELmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IFwiZGlzcGxheU5hbWUgcHJvcGVydHkgaXMgcmVxdWlyZWQgd2hlbiB1c2luZyBiYW5rTG9naW4uXCIsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAoIXBsYWlkQ29uZmlnKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5VU19CQU5LX0FDQ09VTlRfQkFOS19MT0dJTl9OT1RfRU5BQkxFRClcbiAgICApO1xuICB9XG5cbiAgaWYgKHRoaXMuX2lzVG9rZW5pemluZ0JhbmtMb2dpbikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVVNfQkFOS19BQ0NPVU5UX0xPR0lOX1JFUVVFU1RfQUNUSVZFKVxuICAgICk7XG4gIH1cbiAgdGhpcy5faXNUb2tlbml6aW5nQmFua0xvZ2luID0gdHJ1ZTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHNlbGYuX2xvYWRQbGFpZChmdW5jdGlvbiAocGxhaWRMb2FkRXJyLCBwbGFpZCkge1xuICAgICAgaWYgKHBsYWlkTG9hZEVycikge1xuICAgICAgICByZWplY3QocGxhaWRMb2FkRXJyKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHBsYWlkXG4gICAgICAgIC5jcmVhdGUoe1xuICAgICAgICAgIGNsaWVudE5hbWU6IG9wdGlvbnMuYmFua0xvZ2luLmRpc3BsYXlOYW1lLFxuICAgICAgICAgIGFwaVZlcnNpb246IFwidjJcIixcbiAgICAgICAgICBlbnY6IGlzUHJvZHVjdGlvbiA/IFwicHJvZHVjdGlvblwiIDogXCJzYW5kYm94XCIsXG4gICAgICAgICAga2V5OiBwbGFpZENvbmZpZy5wdWJsaWNLZXksXG4gICAgICAgICAgcHJvZHVjdDogXCJhdXRoXCIsXG4gICAgICAgICAgc2VsZWN0QWNjb3VudDogdHJ1ZSxcbiAgICAgICAgICBvbkV4aXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYuX2lzVG9rZW5pemluZ0JhbmtMb2dpbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgIFwidXNiYW5rYWNjb3VudC5iYW5rbG9naW4udG9rZW5pemF0aW9uLmNsb3NlZC5ieS11c2VyXCJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJlamVjdChuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlVTX0JBTktfQUNDT1VOVF9MT0dJTl9DTE9TRUQpKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uU3VjY2VzczogZnVuY3Rpb24gKHB1YmxpY1Rva2VuLCBtZXRhZGF0YSkge1xuICAgICAgICAgICAgdmFyIGJhbmtMb2dpbiA9IG9wdGlvbnMuYmFua0xvZ2luO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgIHB1YmxpY1Rva2VuOiBwdWJsaWNUb2tlbixcbiAgICAgICAgICAgICAgYWNjb3VudElkOiBpc1Byb2R1Y3Rpb25cbiAgICAgICAgICAgICAgICA/IG1ldGFkYXRhLmFjY291bnRfaWRcbiAgICAgICAgICAgICAgICA6IFwicGxhaWRfYWNjb3VudF9pZFwiLFxuICAgICAgICAgICAgICBhY2NvdW50VHlwZTogbWV0YWRhdGEuYWNjb3VudC5zdWJ0eXBlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICAgIGFjaE1hbmRhdGU6IG9wdGlvbnMubWFuZGF0ZVRleHQsXG4gICAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzOiBmb3JtYXRCaWxsaW5nQWRkcmVzc0ZvckdyYXBoUUwoXG4gICAgICAgICAgICAgICAgYmFua0xvZ2luLmJpbGxpbmdBZGRyZXNzIHx8IHt9XG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmb3JtYXREYXRhRm9yT3duZXJzaGlwVHlwZShkYXRhLCBiYW5rTG9naW4pO1xuXG4gICAgICAgICAgICBjbGllbnRcbiAgICAgICAgICAgICAgLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIGFwaTogXCJncmFwaFFMQXBpXCIsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgcXVlcnk6IFRPS0VOSVpFX0JBTktfTE9HSU5fTVVUQVRJT04sXG4gICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICB1c0JhbmtMb2dpbjogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5faXNUb2tlbml6aW5nQmFua0xvZ2luID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgICAgICAgICAgY2xpZW50LFxuICAgICAgICAgICAgICAgICAgXCJ1c2JhbmthY2NvdW50LmJhbmtsb2dpbi50b2tlbml6YXRpb24uc3VjY2VlZGVkXCJcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgIGZvcm1hdFRva2VuaXplUmVzcG9uc2VGcm9tR3JhcGhRTChcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgIFwidG9rZW5pemVVc0JhbmtMb2dpblwiXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICh0b2tlbml6ZUVycikge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvcjtcblxuICAgICAgICAgICAgICAgIHNlbGYuX2lzVG9rZW5pemluZ0JhbmtMb2dpbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3JGcm9tKHRva2VuaXplRXJyKTtcblxuICAgICAgICAgICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgICBcInVzYmFua2FjY291bnQuYmFua2xvZ2luLnRva2VuaXphdGlvbi5mYWlsZWRcIlxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgICAub3BlbigpO1xuXG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICBjbGllbnQsXG4gICAgICAgIFwidXNiYW5rYWNjb3VudC5iYW5rbG9naW4udG9rZW5pemF0aW9uLnN0YXJ0ZWRcIlxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBlcnJvckZyb20oZXJyKSB7XG4gIHZhciBlcnJvcjtcbiAgdmFyIHN0YXR1cyA9IGVyci5kZXRhaWxzICYmIGVyci5kZXRhaWxzLmh0dHBTdGF0dXM7XG5cbiAgaWYgKHN0YXR1cyA9PT0gNDAxKSB7XG4gICAgZXJyb3IgPSBuZXcgQnJhaW50cmVlRXJyb3Ioc2hhcmVkRXJyb3JzLkJSQUlOVFJFRV9BUElfQUNDRVNTX1JFU1RSSUNURUQpO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA8IDUwMCkge1xuICAgIGVycm9yID0gbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5VU19CQU5LX0FDQ09VTlRfRkFJTEVEX1RPS0VOSVpBVElPTik7XG4gIH0gZWxzZSB7XG4gICAgZXJyb3IgPSBuZXcgQnJhaW50cmVlRXJyb3IoXG4gICAgICBlcnJvcnMuVVNfQkFOS19BQ0NPVU5UX1RPS0VOSVpBVElPTl9ORVRXT1JLX0VSUk9SXG4gICAgKTtcbiAgfVxuICBlcnJvci5kZXRhaWxzID0geyBvcmlnaW5hbEVycm9yOiBlcnIgfTtcblxuICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRva2VuaXplUmVzcG9uc2VGcm9tR3JhcGhRTChyZXNwb25zZSwgdHlwZSkge1xuICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGFbdHlwZV0ucGF5bWVudE1ldGhvZDtcbiAgdmFyIGxhc3Q0ID0gZGF0YS5kZXRhaWxzLmxhc3Q0O1xuICB2YXIgZGVzY3JpcHRpb24gPSBcIlVTIGJhbmsgYWNjb3VudCBlbmRpbmcgaW4gLSBcIiArIGxhc3Q0O1xuXG4gIHJldHVybiB7XG4gICAgbm9uY2U6IGRhdGEuaWQsXG4gICAgZGV0YWlsczoge30sXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgIHR5cGU6IFwidXNfYmFua19hY2NvdW50XCIsXG4gIH07XG59XG5cblVTQmFua0FjY291bnQucHJvdG90eXBlLl9sb2FkUGxhaWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdmFyIGV4aXN0aW5nU2NyaXB0LCBzY3JpcHQ7XG5cbiAgY2FsbGJhY2sgPSBvbmNlKGNhbGxiYWNrKTtcblxuICBpZiAod2luZG93LlBsYWlkKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgd2luZG93LlBsYWlkKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGV4aXN0aW5nU2NyaXB0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAnc2NyaXB0W3NyYz1cIicgKyBjb25zdGFudHMuUExBSURfTElOS19KUyArICdcIl0nXG4gICk7XG5cbiAgaWYgKGV4aXN0aW5nU2NyaXB0KSB7XG4gICAgYWRkTG9hZExpc3RlbmVycyhleGlzdGluZ1NjcmlwdCwgY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG5cbiAgICBzY3JpcHQuc3JjID0gY29uc3RhbnRzLlBMQUlEX0xJTktfSlM7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIGFkZExvYWRMaXN0ZW5lcnMoc2NyaXB0LCBjYWxsYmFjayk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cbiAgICB0aGlzLl9wbGFpZFNjcmlwdCA9IHNjcmlwdDtcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkTG9hZExpc3RlbmVycyhzY3JpcHQsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGxvYWRIYW5kbGVyKCkge1xuICAgIHZhciByZWFkeVN0YXRlID0gdGhpcy5yZWFkeVN0YXRlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuXG4gICAgaWYgKCFyZWFkeVN0YXRlIHx8IHJlYWR5U3RhdGUgPT09IFwibG9hZGVkXCIgfHwgcmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICByZW1vdmVMb2FkTGlzdGVuZXJzKCk7XG4gICAgICBjYWxsYmFjayhudWxsLCB3aW5kb3cuUGxhaWQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVycm9ySGFuZGxlcigpIHtcbiAgICBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXG4gICAgY2FsbGJhY2sobmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5VU19CQU5LX0FDQ09VTlRfTE9HSU5fTE9BRF9GQUlMRUQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUxvYWRMaXN0ZW5lcnMoKSB7XG4gICAgc2NyaXB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBlcnJvckhhbmRsZXIpO1xuICAgIHNjcmlwdC5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCBsb2FkSGFuZGxlcik7XG4gICAgc2NyaXB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsIGxvYWRIYW5kbGVyKTtcbiAgfVxuXG4gIHNjcmlwdC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZXJyb3JIYW5kbGVyKTtcbiAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGxvYWRIYW5kbGVyKTtcbiAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsIGxvYWRIYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0QmlsbGluZ0FkZHJlc3NGb3JHcmFwaFFMKGFkZHJlc3MpIHtcbiAgcmV0dXJuIHtcbiAgICBzdHJlZXRBZGRyZXNzOiBhZGRyZXNzLnN0cmVldEFkZHJlc3MsXG4gICAgZXh0ZW5kZWRBZGRyZXNzOiBhZGRyZXNzLmV4dGVuZGVkQWRkcmVzcyxcbiAgICBjaXR5OiBhZGRyZXNzLmxvY2FsaXR5LFxuICAgIHN0YXRlOiBhZGRyZXNzLnJlZ2lvbixcbiAgICB6aXBDb2RlOiBhZGRyZXNzLnBvc3RhbENvZGUsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERhdGFGb3JPd25lcnNoaXBUeXBlKGRhdGEsIGRldGFpbHMpIHtcbiAgaWYgKGRldGFpbHMub3duZXJzaGlwVHlwZSA9PT0gXCJwZXJzb25hbFwiKSB7XG4gICAgZGF0YS5pbmRpdmlkdWFsT3duZXIgPSB7XG4gICAgICBmaXJzdE5hbWU6IGRldGFpbHMuZmlyc3ROYW1lLFxuICAgICAgbGFzdE5hbWU6IGRldGFpbHMubGFzdE5hbWUsXG4gICAgfTtcbiAgfSBlbHNlIGlmIChkZXRhaWxzLm93bmVyc2hpcFR5cGUgPT09IFwiYnVzaW5lc3NcIikge1xuICAgIGRhdGEuYnVzaW5lc3NPd25lciA9IHtcbiAgICAgIGJ1c2luZXNzTmFtZTogZGV0YWlscy5idXNpbmVzc05hbWUsXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHcmFwaFFMTXV0YXRpb24odHlwZSkge1xuICByZXR1cm4gKFxuICAgIFwiXCIgK1xuICAgIFwibXV0YXRpb24gVG9rZW5pemVcIiArXG4gICAgdHlwZSArXG4gICAgXCIoJGlucHV0OiBUb2tlbml6ZVwiICtcbiAgICB0eXBlICtcbiAgICBcIklucHV0ISkge1wiICtcbiAgICBcIiAgdG9rZW5pemVcIiArXG4gICAgdHlwZSArXG4gICAgXCIoaW5wdXQ6ICRpbnB1dCkge1wiICtcbiAgICBcIiAgICBwYXltZW50TWV0aG9kIHtcIiArXG4gICAgXCIgICAgICBpZFwiICtcbiAgICBcIiAgICAgIGRldGFpbHMge1wiICtcbiAgICBcIiAgICAgICAgLi4uIG9uIFVzQmFua0FjY291bnREZXRhaWxzIHtcIiArXG4gICAgXCIgICAgICAgICAgbGFzdDRcIiArXG4gICAgXCIgICAgICAgIH1cIiArXG4gICAgXCIgICAgICB9XCIgK1xuICAgIFwiICAgIH1cIiArXG4gICAgXCIgIH1cIiArXG4gICAgXCJ9XCJcbiAgKTtcbn1cblxuLyoqXG4gKiBDbGVhbmx5IHRlYXIgZG93biBhbnl0aGluZyBzZXQgdXAgYnkge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL3VzLWJhbmstYWNjb3VudC5jcmVhdGV8Y3JlYXRlfS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGVkIG9uY2UgdGVhcmRvd24gaXMgY29tcGxldGUuIE5vIGRhdGEgaXMgcmV0dXJuZWQgaWYgdGVhcmRvd24gY29tcGxldGVzIHN1Y2Nlc3NmdWxseS5cbiAqIEBleGFtcGxlXG4gKiB1c0JhbmtBY2NvdW50SW5zdGFuY2UudGVhcmRvd24oKTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggY2FsbGJhY2s8L2NhcHRpb24+XG4gKiB1c0JhbmtBY2NvdW50SW5zdGFuY2UudGVhcmRvd24oZnVuY3Rpb24gKCkge1xuICogICAvLyB0ZWFyZG93biBpcyBjb21wbGV0ZVxuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5VU0JhbmtBY2NvdW50LnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX3BsYWlkU2NyaXB0KSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLl9wbGFpZFNjcmlwdCk7XG4gIH1cblxuICBjb252ZXJ0TWV0aG9kc1RvRXJyb3IodGhpcywgbWV0aG9kcyhVU0JhbmtBY2NvdW50LnByb3RvdHlwZSkpO1xuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gd3JhcFByb21pc2Uud3JhcFByb3RvdHlwZShVU0JhbmtBY2NvdW50KTtcblxufSx7XCIuLi9saWIvYW5hbHl0aWNzXCI6MTE5LFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIjoxMjcsXCIuLi9saWIvZXJyb3JzXCI6MTM1LFwiLi4vbGliL21ldGhvZHNcIjoxNTUsXCIuLi9saWIvb25jZVwiOjE1NixcIi4vY29uc3RhbnRzXCI6MjA2LFwiLi9lcnJvcnNcIjoyMDcsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMjEwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuYW1lIEJyYWludHJlZUVycm9yLlZhdWx0IE1hbmFnZXIgLSBkZWxldGVQYXltZW50TWV0aG9kIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiB1c2luZyB0aGUgW2BkZWxldGVQYXltZW50TWV0aG9kYCBtZXRob2RdKC4vVmF1bHRNYW5hZ2VyLmh0bWwjZGVsZXRlUGF5bWVudE1ldGhvZCkuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBWQVVMVF9NQU5BR0VSX0RFTEVURV9QQVlNRU5UX01FVEhPRF9OT05DRV9SRVFVSVJFU19DTElFTlRfVE9LRU4gT2NjdXJzIHdoZW4gdmF1bHQgbWFuYWdlciBpcyBpbml0aWFsaXplZCB3aXRoIGEgdG9rZW5pemF0aW9uIGtleSBpbnN0ZWFkIG9mIGEgQ2xpZW50IFRva2VuLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gVkFVTFRfTUFOQUdFUl9QQVlNRU5UX01FVEhPRF9OT05DRV9OT1RfRk9VTkQgT2NjdXJzIHdoZW4gdGhlIHNwZWNpZmllZCBwYXltZW50IG1ldGhvZCBjYW4gbm90IGJlIGZvdW5kLlxuICogQHByb3BlcnR5IHtVTktOT1dOfSBWQVVMVF9NQU5BR0VSX0RFTEVURV9QQVlNRU5UX01FVEhPRF9VTktOT1dOX0VSUk9SIE9jY3VycyB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIGF0dGVtcHRpbmcgdG8gZGVsZXRlIHRoZSBwYXltZW50IG1ldGhvZC5cbiAqL1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFZBVUxUX01BTkFHRVJfREVMRVRFX1BBWU1FTlRfTUVUSE9EX05PTkNFX1JFUVVJUkVTX0NMSUVOVF9UT0tFTjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVkFVTFRfTUFOQUdFUl9ERUxFVEVfUEFZTUVOVF9NRVRIT0RfTk9OQ0VfUkVRVUlSRVNfQ0xJRU5UX1RPS0VOXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiQSBjbGllbnQgdG9rZW4gd2l0aCBhIGN1c3RvbWVyIGlkIG11c3QgYmUgdXNlZCB0byBkZWxldGUgYSBwYXltZW50IG1ldGhvZCBub25jZS5cIixcbiAgfSxcbiAgVkFVTFRfTUFOQUdFUl9QQVlNRU5UX01FVEhPRF9OT05DRV9OT1RfRk9VTkQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlZBVUxUX01BTkFHRVJfUEFZTUVOVF9NRVRIT0RfTk9OQ0VfTk9UX0ZPVU5EXCIsXG4gIH0sXG4gIFZBVUxUX01BTkFHRVJfREVMRVRFX1BBWU1FTlRfTUVUSE9EX1VOS05PV05fRVJST1I6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5VTktOT1dOLFxuICAgIGNvZGU6IFwiVkFVTFRfTUFOQUdFUl9ERUxFVEVfUEFZTUVOVF9NRVRIT0RfVU5LTk9XTl9FUlJPUlwiLFxuICB9LFxufTtcblxufSx7XCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0fV0sMjExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbW9kdWxlIGJyYWludHJlZS13ZWIvdmF1bHQtbWFuYWdlclxuICogQGRlc2NyaXB0aW9uIE1hbmFnZXMgY3VzdG9tZXIncyBwYXltZW50IG1ldGhvZHMuXG4gKi9cblxudmFyIGJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uID0gX2RlcmVxXyhcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCIpO1xudmFyIGNyZWF0ZURlZmVycmVkQ2xpZW50ID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCIpO1xudmFyIGNyZWF0ZUFzc2V0c1VybCA9IF9kZXJlcV8oXCIuLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIik7XG52YXIgVmF1bHRNYW5hZ2VyID0gX2RlcmVxXyhcIi4vdmF1bHQtbWFuYWdlclwiKTtcbnZhciBWRVJTSU9OID0gXCIzLjEwMC4wXCI7XG52YXIgd3JhcFByb21pc2UgPSBfZGVyZXFfKFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIik7XG5cbi8qKlxuICogQHN0YXRpY1xuICogQGZ1bmN0aW9uIGNyZWF0ZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ3JlYXRpb24gb3B0aW9uczpcbiAqIEBwYXJhbSB7Q2xpZW50fSBbb3B0aW9ucy5jbGllbnRdIEEge0BsaW5rIENsaWVudH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYXV0aG9yaXphdGlvbl0gQSB0b2tlbml6YXRpb25LZXkgb3IgY2xpZW50VG9rZW4uIENhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGBvcHRpb25zLmNsaWVudGAuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBjYWxsYmFjayBUaGUgc2Vjb25kIGFyZ3VtZW50LCBgZGF0YWAsIGlzIHRoZSB7QGxpbmsgVmF1bHRNYW5hZ2VyfSBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IFwiVmF1bHQgTWFuYWdlclwiO1xuXG4gIHJldHVybiBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvblxuICAgIC52ZXJpZnkoe1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IFZhdWx0TWFuYWdlcih7XG4gICAgICAgIGNyZWF0ZVByb21pc2U6IGNyZWF0ZURlZmVycmVkQ2xpZW50LmNyZWF0ZSh7XG4gICAgICAgICAgYXV0aG9yaXphdGlvbjogb3B0aW9ucy5hdXRob3JpemF0aW9uLFxuICAgICAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICAgICAgZGVidWc6IG9wdGlvbnMuZGVidWcsXG4gICAgICAgICAgYXNzZXRzVXJsOiBjcmVhdGVBc3NldHNVcmwuY3JlYXRlKG9wdGlvbnMuYXV0aG9yaXphdGlvbiksXG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogd3JhcFByb21pc2UoY3JlYXRlKSxcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBTREssIGkuZS4gYHtAcGtnIHZlcnNpb259YC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIFZFUlNJT046IFZFUlNJT04sXG59O1xuXG59LHtcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCI6MTIyLFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCI6MTI5LFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIjoxMzEsXCIuL3ZhdWx0LW1hbmFnZXJcIjoyMTIsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMjEyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgYW5hbHl0aWNzID0gX2RlcmVxXyhcIi4uL2xpYi9hbmFseXRpY3NcIik7XG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG52YXIgY29udmVydE1ldGhvZHNUb0Vycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIik7XG52YXIgbWV0aG9kcyA9IF9kZXJlcV8oXCIuLi9saWIvbWV0aG9kc1wiKTtcbnZhciB3cmFwUHJvbWlzZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiKTtcblxudmFyIERFTEVURV9QQVlNRU5UX01FVEhPRF9NVVRBVElPTiA9XG4gIFwibXV0YXRpb24gRGVsZXRlUGF5bWVudE1ldGhvZEZyb21TaW5nbGVVc2VUb2tlbigkaW5wdXQ6IERlbGV0ZVBheW1lbnRNZXRob2RGcm9tU2luZ2xlVXNlVG9rZW5JbnB1dCEpIHtcIiArXG4gIFwiICBkZWxldGVQYXltZW50TWV0aG9kRnJvbVNpbmdsZVVzZVRva2VuKGlucHV0OiAkaW5wdXQpIHtcIiArXG4gIFwiICAgIGNsaWVudE11dGF0aW9uSWRcIiArXG4gIFwiICB9XCIgK1xuICBcIn1cIjtcblxuLyoqXG4gKiBAdHlwZWRlZiB7YXJyYXl9IFZhdWx0TWFuYWdlcn5mZXRjaFBheW1lbnRNZXRob2RzUGF5bG9hZCBUaGUgY3VzdG9tZXIncyBwYXltZW50IG1ldGhvZHMuXG4gKiBAcHJvcGVydHkge29iamVjdH0gcGF5bWVudE1ldGhvZCBUaGUgcGF5bWVudCBtZXRob2Qgb2JqZWN0LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBheW1lbnRNZXRob2Qubm9uY2UgQSBub25jZSB0aGF0IGNhbiBiZSBzZW50IHRvIHlvdXIgc2VydmVyIHRvIHRyYW5zYWN0IG9uIHRoZSBwYXltZW50IG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcGF5bWVudE1ldGhvZC5kZWZhdWx0IFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgdGhlIGRlZmF1bHQgcGF5bWVudCBtZXRob2QgZm9yIHRoZSBjdXN0b21lci5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBwYXltZW50TWV0aG9kLmRldGFpbHMgQW55IGFkZGl0aW9uYWwgZGV0YWlscyBhYm91dCB0aGUgcGF5bWVudCBtZXRob2QuIFZhcmllcyBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgcGF5bWVudCBtZXRob2QuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGF5bWVudE1ldGhvZC50eXBlIEEgY29uc3RhbnQgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBwYXltZW50IG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gcGF5bWVudE1ldGhvZC5kZXNjcmlwdGlvbiBBZGRpdGlvbmFsIGRlc2NyaXB0aW9uIGFib3V0IHRoZSBwYXltZW50IG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7P29iamVjdH0gcGF5bWVudE1ldGhvZC5iaW5EYXRhIEJpbiBkYXRhIGFib3V0IHRoZSBwYXltZW50IG1ldGhvZC5cbiAqXG4gKi9cblxuLyoqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIE9wdGlvbnNcbiAqIEBkZXNjcmlwdGlvbiA8c3Ryb25nPllvdSBjYW5ub3QgdXNlIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkuIFVzZSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvdmF1bHQtbWFuYWdlci5jcmVhdGV8YnJhaW50cmVlLnZhdWx0LW1hbmFnZXIuY3JlYXRlfSBpbnN0ZWFkLjwvc3Ryb25nPlxuICogQGNsYXNzZGVzYyBUaGlzIGNsYXNzIGFsbG93cyB5b3UgdG8gbWFuYWdlIGEgY3VzdG9tZXIncyBwYXltZW50IG1ldGhvZHMgb24gdGhlIGNsaWVudC5cbiAqL1xuZnVuY3Rpb24gVmF1bHRNYW5hZ2VyKG9wdGlvbnMpIHtcbiAgdGhpcy5fY3JlYXRlUHJvbWlzZSA9IG9wdGlvbnMuY3JlYXRlUHJvbWlzZTtcbn1cblxuLyoqXG4gKiBGZXRjaGVzIHBheW1lbnQgbWV0aG9kcyBvd25lZCBieSB0aGUgY3VzdG9tZXIgd2hvc2UgaWQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNsaWVudCB0b2tlbiB1c2VkIHRvIGNyZWF0ZSB0aGUge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL2NsaWVudHxjbGllbnR9LlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIGZvciBmZXRjaGluZyBwYXltZW50IG1ldGhvZHMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRlZmF1bHRGaXJzdCA9IGZhbHNlXSBJZiBgdHJ1ZWAsIHRoZSBwYXltZW50IG1ldGhvZHMgd2lsbCBiZSByZXR1cm5lZCB3aXRoIHRoZSBkZWZhdWx0IHBheW1lbnQgbWV0aG9kIGZvciB0aGUgY3VzdG9tZXIgZmlyc3QuIE90aGVyd2lzZSwgb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgYSB7QGxpbmsgVmF1bHRNYW5hZ2VyfmZldGNoUGF5bWVudE1ldGhvZHNQYXlsb2FkfGZldGNoUGF5bWVudE1ldGhvZHNQYXlsb2FkfS4gVGhpcyBpcyBhbHNvIHdoYXQgaXMgcmVzb2x2ZWQgYnkgdGhlIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICogQGV4YW1wbGVcbiAqIHZhdWx0TWFuYWdlckluc3RhbmNlLmZldGNoUGF5bWVudE1ldGhvZHMoZnVuY3Rpb24gKGVyciwgcGF5bWVudE1ldGhvZHMpIHtcbiAqICAgcGF5bWVudE1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAocGF5bWVudE1ldGhvZCkge1xuICogICAgIC8vIGFkZCBwYXltZW50IG1ldGhvZCB0byBVSVxuICogICAgIC8vIHBheW1lbnRNZXRob2Qubm9uY2UgPC0gdHJhbnNhY3RhYmxlIG5vbmNlIGFzc29jaWF0ZWQgd2l0aCBwYXltZW50IG1ldGhvZFxuICogICAgIC8vIHBheW1lbnRNZXRob2QuZGV0YWlscyA8LSBvYmplY3Qgd2l0aCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHBheW1lbnQgbWV0aG9kXG4gKiAgICAgLy8gcGF5bWVudE1ldGhvZC50eXBlIDwtIGEgY29uc3RhbnQgc2lnbmlmeWluZyB0aGUgdHlwZVxuICogICB9KTtcbiAqIH0pO1xuICovXG5WYXVsdE1hbmFnZXIucHJvdG90eXBlLmZldGNoUGF5bWVudE1ldGhvZHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgZGVmYXVsdEZpcnN0O1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGRlZmF1bHRGaXJzdCA9IG9wdGlvbnMuZGVmYXVsdEZpcnN0ID09PSB0cnVlID8gMSA6IDA7XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZVByb21pc2VcbiAgICAudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICByZXR1cm4gY2xpZW50LnJlcXVlc3Qoe1xuICAgICAgICBlbmRwb2ludDogXCJwYXltZW50X21ldGhvZHNcIixcbiAgICAgICAgbWV0aG9kOiBcImdldFwiLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZGVmYXVsdEZpcnN0OiBkZWZhdWx0Rmlyc3QsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KVxuICAgIC50aGVuKFxuICAgICAgZnVuY3Rpb24gKHBheW1lbnRNZXRob2RzUGF5bG9hZCkge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIHRoaXMuX2NyZWF0ZVByb21pc2UsXG4gICAgICAgICAgXCJ2YXVsdC1tYW5hZ2VyLmZldGNoLXBheW1lbnQtbWV0aG9kcy5zdWNjZWVkZWRcIlxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBwYXltZW50TWV0aG9kc1BheWxvYWQucGF5bWVudE1ldGhvZHMubWFwKFxuICAgICAgICAgIGZvcm1hdFBheW1lbnRNZXRob2RQYXlsb2FkXG4gICAgICAgICk7XG4gICAgICB9LmJpbmQodGhpcylcbiAgICApO1xufTtcblxuLyoqXG4gKiBEZWxldGVzIGEgcGF5bWVudCBtZXRob2Qgb3duZWQgYnkgdGhlIGN1c3RvbWVyIHdob3NlIGlkIHdhcyB1c2VkIHRvIGdlbmVyYXRlIHRoZSBjbGllbnQgdG9rZW4gdXNlZCB0byBjcmVhdGUgdGhlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi9jbGllbnR8Y2xpZW50fS5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXltZW50TWV0aG9kTm9uY2UgVGhlIHBheW1lbnQgbWV0aG9kIG5vbmNlIHRoYXQgcmVmZXJlbmNlcyBhIHZhdWx0ZWQgcGF5bWVudCBtZXRob2QuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIE5vIGRhdGEgaXMgcmV0dXJuZWQgaWYgdGhlIG9wZXJhdGlvbiBpcyBzdWNjZXNzZnVsLlxuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqIEBleGFtcGxlXG4gKiB2YXVsdE1hbmFnZXJJbnN0YW5jZS5kZWxldGVQYXltZW50TWV0aG9kKCdub25jZS10by1kZWxldGUnLCBmdW5jdGlvbiAoZXJyKSB7XG4gKiAgIC8vIGhhbmRsZSBlcnIgaWYgaXQgZXhpc3RzXG4gKiB9KTtcbiAqL1xuVmF1bHRNYW5hZ2VyLnByb3RvdHlwZS5kZWxldGVQYXltZW50TWV0aG9kID0gZnVuY3Rpb24gKHBheW1lbnRNZXRob2ROb25jZSkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICB2YXIgdXNlc0NsaWVudFRva2VuID1cbiAgICAgIGNsaWVudC5nZXRDb25maWd1cmF0aW9uKCkuYXV0aG9yaXphdGlvblR5cGUgPT09IFwiQ0xJRU5UX1RPS0VOXCI7XG5cbiAgICBpZiAoIXVzZXNDbGllbnRUb2tlbikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3IoXG4gICAgICAgICAgZXJyb3JzLlZBVUxUX01BTkFHRVJfREVMRVRFX1BBWU1FTlRfTUVUSE9EX05PTkNFX1JFUVVJUkVTX0NMSUVOVF9UT0tFTlxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBjbGllbnRcbiAgICAgIC5yZXF1ZXN0KHtcbiAgICAgICAgYXBpOiBcImdyYXBoUUxBcGlcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHF1ZXJ5OiBERUxFVEVfUEFZTUVOVF9NRVRIT0RfTVVUQVRJT04sXG4gICAgICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgICBzaW5nbGVVc2VUb2tlbklkOiBwYXltZW50TWV0aG9kTm9uY2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3BlcmF0aW9uTmFtZTogXCJEZWxldGVQYXltZW50TWV0aG9kRnJvbVNpbmdsZVVzZVRva2VuXCIsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICBcInZhdWx0LW1hbmFnZXIuZGVsZXRlLXBheW1lbnQtbWV0aG9kLnN1Y2NlZWRlZFwiXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gbm9vcCB0byBwcmV2ZW50IHNlbmRpbmcgYmFjayB0aGUgcmF3IGdyYXBocWwgZGF0YVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsRXJyb3IgPSBlcnJvci5kZXRhaWxzLm9yaWdpbmFsRXJyb3I7XG4gICAgICAgIHZhciBmb3JtYXR0ZWRFcnJvcjtcblxuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICBcInZhdWx0LW1hbmFnZXIuZGVsZXRlLXBheW1lbnQtbWV0aG9kLmZhaWxlZFwiXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG9yaWdpbmFsRXJyb3JbMF0gJiZcbiAgICAgICAgICBvcmlnaW5hbEVycm9yWzBdLmV4dGVuc2lvbnMuZXJyb3JDbGFzcyA9PT0gXCJOT1RfRk9VTkRcIlxuICAgICAgICApIHtcbiAgICAgICAgICBmb3JtYXR0ZWRFcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgICB0eXBlOiBlcnJvcnMuVkFVTFRfTUFOQUdFUl9QQVlNRU5UX01FVEhPRF9OT05DRV9OT1RfRk9VTkQudHlwZSxcbiAgICAgICAgICAgIGNvZGU6IGVycm9ycy5WQVVMVF9NQU5BR0VSX1BBWU1FTlRfTUVUSE9EX05PTkNFX05PVF9GT1VORC5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgXCJBIHBheW1lbnQgbWV0aG9kIGZvciBwYXltZW50IG1ldGhvZCBub25jZSBgXCIgK1xuICAgICAgICAgICAgICBwYXltZW50TWV0aG9kTm9uY2UgK1xuICAgICAgICAgICAgICBcImAgY291bGQgbm90IGJlIGZvdW5kLlwiLFxuICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBvcmlnaW5hbEVycm9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm9ybWF0dGVkRXJyb3IpIHtcbiAgICAgICAgICBmb3JtYXR0ZWRFcnJvciA9IG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgICB0eXBlOiBlcnJvcnMuVkFVTFRfTUFOQUdFUl9ERUxFVEVfUEFZTUVOVF9NRVRIT0RfVU5LTk9XTl9FUlJPUi50eXBlLFxuICAgICAgICAgICAgY29kZTogZXJyb3JzLlZBVUxUX01BTkFHRVJfREVMRVRFX1BBWU1FTlRfTUVUSE9EX1VOS05PV05fRVJST1IuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAgIFwiQW4gdW5rbm93biBlcnJvciBvY2N1cmVkIHdoZW4gYXR0ZW1wdGluZyB0byBkZWxldGUgdGhlIHBheW1lbnQgbWV0aG9kIGFzc29jYWl0ZWQgd2l0aCB0aGUgcGF5bWVudCBtZXRob2Qgbm9uY2UgYFwiICtcbiAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZE5vbmNlICtcbiAgICAgICAgICAgICAgXCJgLlwiLFxuICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBvcmlnaW5hbEVycm9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChmb3JtYXR0ZWRFcnJvcik7XG4gICAgICB9KTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRQYXltZW50TWV0aG9kUGF5bG9hZChwYXltZW50TWV0aG9kKSB7XG4gIHZhciBmb3JtYXR0ZWRQYXltZW50TWV0aG9kID0ge1xuICAgIG5vbmNlOiBwYXltZW50TWV0aG9kLm5vbmNlLFxuICAgIGRlZmF1bHQ6IHBheW1lbnRNZXRob2QuZGVmYXVsdCxcbiAgICBkZXRhaWxzOiBwYXltZW50TWV0aG9kLmRldGFpbHMsXG4gICAgaGFzU3Vic2NyaXB0aW9uOiBwYXltZW50TWV0aG9kLmhhc1N1YnNjcmlwdGlvbixcbiAgICB0eXBlOiBwYXltZW50TWV0aG9kLnR5cGUsXG4gIH07XG5cbiAgaWYgKHBheW1lbnRNZXRob2QuZGVzY3JpcHRpb24pIHtcbiAgICBmb3JtYXR0ZWRQYXltZW50TWV0aG9kLmRlc2NyaXB0aW9uID0gcGF5bWVudE1ldGhvZC5kZXNjcmlwdGlvbjtcbiAgfVxuXG4gIGlmIChwYXltZW50TWV0aG9kLmJpbkRhdGEpIHtcbiAgICBmb3JtYXR0ZWRQYXltZW50TWV0aG9kLmJpbkRhdGEgPSBwYXltZW50TWV0aG9kLmJpbkRhdGE7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0dGVkUGF5bWVudE1ldGhvZDtcbn1cblxuLyoqXG4gKiBDbGVhbmx5IHRlYXIgZG93biBhbnl0aGluZyBzZXQgdXAgYnkge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL3ZhdWx0LW1hbmFnZXIuY3JlYXRlfGNyZWF0ZX0uXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxlZCBvbmNlIHRlYXJkb3duIGlzIGNvbXBsZXRlLiBObyBkYXRhIGlzIHJldHVybmVkIGlmIHRlYXJkb3duIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuXG4gKiBAZXhhbXBsZVxuICogdmF1bHRNYW5hZ2VySW5zdGFuY2UudGVhcmRvd24oKTtcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggY2FsbGJhY2s8L2NhcHRpb24+XG4gKiB2YXVsdE1hbmFnZXJJbnN0YW5jZS50ZWFyZG93bihmdW5jdGlvbiAoKSB7XG4gKiAgIC8vIHRlYXJkb3duIGlzIGNvbXBsZXRlXG4gKiB9KTtcbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cblZhdWx0TWFuYWdlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnZlcnRNZXRob2RzVG9FcnJvcih0aGlzLCBtZXRob2RzKFZhdWx0TWFuYWdlci5wcm90b3R5cGUpKTtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBQcm9taXNlLndyYXBQcm90b3R5cGUoVmF1bHRNYW5hZ2VyKTtcblxufSx7XCIuLi9saWIvYW5hbHl0aWNzXCI6MTE5LFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIjoxMjcsXCIuLi9saWIvbWV0aG9kc1wiOjE1NSxcIi4vZXJyb3JzXCI6MjEwLFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0M31dLDIxMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPVxuICAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHxcbiAgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiBtb2QgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xuICB9O1xudmFyIHZlbm1vX2Rlc2t0b3BfMSA9IF9faW1wb3J0RGVmYXVsdChfZGVyZXFfKFwiLi92ZW5tby1kZXNrdG9wXCIpKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlVmVubW9EZXNrdG9wKG9wdGlvbnMpIHtcbiAgdmFyIGluc3RhbmNlID0gbmV3IHZlbm1vX2Rlc2t0b3BfMS5kZWZhdWx0KG9wdGlvbnMpO1xuICByZXR1cm4gaW5zdGFuY2UuaW5pdGlhbGl6ZSgpO1xufTtcblxufSx7XCIuL3Zlbm1vLWRlc2t0b3BcIjoyMTV9XSwyMTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZFTk1PX1BBWU1FTlRfQ09OVEVYVF9TVEFUVVNfUVVFUlkgPVxuICBleHBvcnRzLkxFR0FDWV9WRU5NT19QQVlNRU5UX0NPTlRFWFRfU1RBVFVTX1FVRVJZID1cbiAgZXhwb3J0cy5VUERBVEVfUEFZTUVOVF9DT05URVhUX1FVRVJZID1cbiAgZXhwb3J0cy5MRUdBQ1lfVVBEQVRFX1BBWU1FTlRfQ09OVEVYVF9RVUVSWSA9XG4gIGV4cG9ydHMuQ1JFQVRFX1BBWU1FTlRfQ09OVEVYVF9RVUVSWSA9XG4gIGV4cG9ydHMuTEVHQUNZX0NSRUFURV9QQVlNRU5UX0NPTlRFWFRfUVVFUlkgPVxuICAgIHZvaWQgMDtcbmV4cG9ydHMuTEVHQUNZX0NSRUFURV9QQVlNRU5UX0NPTlRFWFRfUVVFUlkgPVxuICBcIm11dGF0aW9uIENyZWF0ZVZlbm1vUVJDb2RlUGF5bWVudENvbnRleHQoJGlucHV0OiBDcmVhdGVWZW5tb1FSQ29kZVBheW1lbnRDb250ZXh0SW5wdXQhKSB7XFxuICBjcmVhdGVWZW5tb1FSQ29kZVBheW1lbnRDb250ZXh0KGlucHV0OiAkaW5wdXQpIHtcXG4gICAgY2xpZW50TXV0YXRpb25JZFxcbiAgICB2ZW5tb1FSQ29kZVBheW1lbnRDb250ZXh0IHtcXG4gICAgICBpZFxcbiAgICAgIG1lcmNoYW50SWRcXG4gICAgICBjcmVhdGVkQXRcXG4gICAgICBleHBpcmVzQXRcXG4gICAgfVxcbiAgfVxcbn1cIjtcbmV4cG9ydHMuQ1JFQVRFX1BBWU1FTlRfQ09OVEVYVF9RVUVSWSA9XG4gIFwibXV0YXRpb24gQ3JlYXRlVmVubW9QYXltZW50Q29udGV4dCgkaW5wdXQ6IENyZWF0ZVZlbm1vUGF5bWVudENvbnRleHRJbnB1dCEpIHtcXG4gIGNyZWF0ZVZlbm1vUGF5bWVudENvbnRleHQoaW5wdXQ6ICRpbnB1dCkge1xcbiAgICBjbGllbnRNdXRhdGlvbklkXFxuICAgIHZlbm1vUGF5bWVudENvbnRleHQge1xcbiAgICAgIGlkXFxuICAgICAgbWVyY2hhbnRJZFxcbiAgICAgIGNyZWF0ZWRBdFxcbiAgICAgIGV4cGlyZXNBdFxcbiAgICB9XFxuICB9XFxufVwiO1xuZXhwb3J0cy5MRUdBQ1lfVVBEQVRFX1BBWU1FTlRfQ09OVEVYVF9RVUVSWSA9XG4gIFwibXV0YXRpb24gVXBkYXRlVmVubW9RUkNvZGVQYXltZW50Q29udGV4dCgkaW5wdXQ6IFVwZGF0ZVZlbm1vUVJDb2RlUGF5bWVudENvbnRleHRJbnB1dCEpIHtcXG4gIHVwZGF0ZVZlbm1vUVJDb2RlUGF5bWVudENvbnRleHQoaW5wdXQ6ICRpbnB1dCkge1xcbiAgICBjbGllbnRNdXRhdGlvbklkXFxuICB9XFxufVwiO1xuZXhwb3J0cy5VUERBVEVfUEFZTUVOVF9DT05URVhUX1FVRVJZID1cbiAgXCJtdXRhdGlvbiBVcGRhdGVWZW5tb1BheW1lbnRDb250ZXh0U3RhdHVzKCRpbnB1dDogVXBkYXRlVmVubW9QYXltZW50Q29udGV4dFN0YXR1c0lucHV0ISkge1xcbiAgdXBkYXRlVmVubW9QYXltZW50Q29udGV4dFN0YXR1cyhpbnB1dDogJGlucHV0KSB7XFxuICAgIGNsaWVudE11dGF0aW9uSWRcXG4gIH1cXG59XCI7XG5leHBvcnRzLkxFR0FDWV9WRU5NT19QQVlNRU5UX0NPTlRFWFRfU1RBVFVTX1FVRVJZID1cbiAgXCJxdWVyeSBQYXltZW50Q29udGV4dCgkaWQ6IElEISkge1xcbiAgbm9kZShpZDogJGlkKSB7XFxuICAgIC4uLiBvbiBWZW5tb1FSQ29kZVBheW1lbnRDb250ZXh0IHtcXG4gICAgICBzdGF0dXNcXG4gICAgICBwYXltZW50TWV0aG9kSWRcXG4gICAgICB1c2VyTmFtZVxcbiAgICB9XFxuICB9XFxufVwiO1xuZXhwb3J0cy5WRU5NT19QQVlNRU5UX0NPTlRFWFRfU1RBVFVTX1FVRVJZID1cbiAgXCJxdWVyeSBQYXltZW50Q29udGV4dCgkaWQ6IElEISkge1xcbiAgbm9kZShpZDogJGlkKSB7XFxuICAgIC4uLiBvbiBWZW5tb1BheW1lbnRDb250ZXh0IHtcXG4gICAgICBzdGF0dXNcXG4gICAgICBwYXltZW50TWV0aG9kSWRcXG4gICAgICB1c2VyTmFtZVxcbiAgICAgIHBheWVySW5mbyB7XFxuICAgICAgICBmaXJzdE5hbWVcXG4gICAgICAgIGxhc3ROYW1lXFxuICAgICAgICBwaG9uZU51bWJlclxcbiAgICAgICAgZW1haWxcXG4gICAgICAgIGV4dGVybmFsSWRcXG4gICAgICAgIHVzZXJOYW1lXFxuICAgICAgICBiaWxsaW5nQWRkcmVzcyB7XFxuICAgICAgICAgIGZ1bGxOYW1lXFxuICAgICAgICAgIGFkZHJlc3NMaW5lMVxcbiAgICAgICAgICBhZGRyZXNzTGluZTJcXG4gICAgICAgICAgYWRtaW5BcmVhMVxcbiAgICAgICAgICBhZG1pbkFyZWEyXFxuICAgICAgICAgIHBvc3RhbENvZGVcXG4gICAgICAgICAgY291bnRyeUNvZGVcXG4gICAgICAgIH1cXG4gICAgICAgIHNoaXBwaW5nQWRkcmVzcyB7XFxuICAgICAgICAgIGZ1bGxOYW1lXFxuICAgICAgICAgIGFkZHJlc3NMaW5lMVxcbiAgICAgICAgICBhZGRyZXNzTGluZTJcXG4gICAgICAgICAgYWRtaW5BcmVhMVxcbiAgICAgICAgICBhZG1pbkFyZWEyXFxuICAgICAgICAgIHBvc3RhbENvZGVcXG4gICAgICAgICAgY291bnRyeUNvZGVcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XCI7XG5cbn0se31dLDIxNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9XG4gICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8XG4gIGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9XG4gICAgICBPYmplY3QuYXNzaWduIHx8XG4gICAgICBmdW5jdGlvbiAodCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gcylcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPVxuICAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHxcbiAgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiBtb2QgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xuICB9O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGZyYW1lYnVzXzEgPSBfX2ltcG9ydERlZmF1bHQoX2RlcmVxXyhcImZyYW1lYnVzXCIpKTtcbnZhciBpZnJhbWVyXzEgPSBfX2ltcG9ydERlZmF1bHQoX2RlcmVxXyhcIkBicmFpbnRyZWUvaWZyYW1lclwiKSk7XG52YXIgdXVpZF8xID0gX19pbXBvcnREZWZhdWx0KF9kZXJlcV8oXCJAYnJhaW50cmVlL3V1aWRcIikpO1xudmFyIGV2ZW50c18xID0gX2RlcmVxXyhcIi4uL3NoYXJlZC9ldmVudHNcIik7XG52YXIgcXVlcmllc18xID0gX2RlcmVxXyhcIi4vcXVlcmllc1wiKTtcbnZhciBWRU5NT19ERVNLVE9QX1BPTExJTkdfSU5URVJWQUwgPSAxMDAwOyAvLyAxIHNlY29uZFxudmFyIFZJU1VBTF9ERUxBWV9CRUZPUkVfU0lHTkFMTElOR19DT01QTEVUSU9OID0gMjAwMDsgLy8gMiBzZWNvbmRzXG52YXIgVmVubW9EZXNrdG9wID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBWZW5tb0Rlc2t0b3Aob3B0aW9ucykge1xuICAgIHRoaXMuaXNIaWRkZW4gPSB0cnVlO1xuICAgIHRoaXMuZW52ID0gb3B0aW9ucy5lbnZpcm9ubWVudDtcbiAgICB0aGlzLmlkID0gdXVpZF8xLmRlZmF1bHQoKTtcbiAgICB0aGlzLnByb2ZpbGVJZCA9IG9wdGlvbnMucHJvZmlsZUlkO1xuICAgIHRoaXMuZGlzcGxheU5hbWUgPSBvcHRpb25zLmRpc3BsYXlOYW1lO1xuICAgIHRoaXMucGF5bWVudE1ldGhvZFVzYWdlID0gb3B0aW9ucy5wYXltZW50TWV0aG9kVXNhZ2U7XG4gICAgdGhpcy5zaG91bGRVc2VMZWdhY3lRUkNvZGVNdXRhdGlvbiA9ICF0aGlzLnBheW1lbnRNZXRob2RVc2FnZTtcbiAgICB2YXIgZnJhbWVVcmwgPSBvcHRpb25zLnVybCArIFwiI1wiICsgdGhpcy5lbnYgKyBcIl9cIiArIHRoaXMuaWQ7XG4gICAgdGhpcy5idXMgPSBuZXcgZnJhbWVidXNfMS5kZWZhdWx0KHtcbiAgICAgIGNoYW5uZWw6IHRoaXMuaWQsXG4gICAgICB2ZXJpZnlEb21haW46IG9wdGlvbnMudmVyaWZ5RG9tYWluLFxuICAgICAgdGFyZ2V0RnJhbWVzOiBbXSxcbiAgICB9KTtcbiAgICB0aGlzLmFwaVJlcXVlc3QgPSBvcHRpb25zLmFwaVJlcXVlc3Q7XG4gICAgdGhpcy5zZW5kRXZlbnQgPSBvcHRpb25zLnNlbmRFdmVudDtcbiAgICB0aGlzLlByb21pc2UgPSBvcHRpb25zLlByb21pc2U7XG4gICAgdGhpcy5hbGVydEJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5hbGVydEJveC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZlbm1vLWRlc2t0b3AtaWRcIiwgdGhpcy5pZCk7XG4gICAgdGhpcy5hbGVydEJveC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiYWxlcnRcIik7XG4gICAgdGhpcy5hbGVydEJveC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICB0aGlzLmFsZXJ0Qm94LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB0aGlzLmFsZXJ0Qm94LnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG4gICAgdGhpcy5hbGVydEJveC5zdHlsZS53aWR0aCA9IFwiMXB4XCI7XG4gICAgdGhpcy5hbGVydEJveC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgdGhpcy5hbGVydEJveC5zdHlsZS56SW5kZXggPSBcIjBcIjtcbiAgICB0aGlzLmlmcmFtZSA9IGlmcmFtZXJfMS5kZWZhdWx0KHtcbiAgICAgIHNyYzogZnJhbWVVcmwsXG4gICAgICBuYW1lOiBcInZlbm1vLWRlc2t0b3AtaWZyYW1lXCIsXG4gICAgICBzdHlsZToge1xuICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgICAgICAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgICAgICAgdG9wOiBcIjBcIixcbiAgICAgICAgYm90dG9tOiBcIjBcIixcbiAgICAgICAgcmlnaHQ6IFwiMFwiLFxuICAgICAgICBsZWZ0OiBcIjBcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICB6SW5kZXg6IFwiOTk5OTk5OVwiLFxuICAgICAgfSxcbiAgICAgIHRpdGxlOiBcIlZlbm1vIERlc2t0b3BcIixcbiAgICB9KTtcbiAgICB0aGlzLmJ1cy5hZGRUYXJnZXRGcmFtZSh0aGlzLmlmcmFtZSk7XG4gIH1cbiAgVmVubW9EZXNrdG9wLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyB0aGlzLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF90aGlzLmJ1cy5vbihldmVudHNfMS5WRU5NT19ERVNLVE9QX0lGUkFNRV9SRUFEWSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXNvbHZlKF90aGlzKTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuYnVzLm9uKGV2ZW50c18xLlZFTk1PX0RFU0tUT1BfUkVRVUVTVF9ORVdfUVJfQ09ERSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zZW5kRXZlbnQoXCJ2ZW5tby50b2tlbml6ZS5kZXNrdG9wLnJlc3RhcnRlZC1mcm9tLWVycm9yLXZpZXdcIik7XG4gICAgICAgIF90aGlzLnN0YXJ0UG9sbGluZygpO1xuICAgICAgfSk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKF90aGlzLmlmcmFtZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKF90aGlzLmFsZXJ0Qm94KTtcbiAgICB9KTtcbiAgfTtcbiAgVmVubW9EZXNrdG9wLnByb3RvdHlwZS5sYXVuY2hEZXNrdG9wRmxvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuaXNIaWRkZW4gPSBmYWxzZTtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyB0aGlzLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMubGF1bmNoRGVza3RvcFByb21pc2VSZWplY3RGdW5jdGlvbiA9IHJlamVjdDtcbiAgICAgIHZhciByZW1vdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZSAqL1xuICAgICAgICBfdGhpcy5idXMub2ZmKFxuICAgICAgICAgIGV2ZW50c18xLlZFTk1PX0RFU0tUT1BfQ1VTVE9NRVJfQ0FOQ0VMRUQsXG4gICAgICAgICAgY3VzdG9tZXJDYW5jZWxsZWRIYW5kbGVyXG4gICAgICAgICk7XG4gICAgICAgIF90aGlzLmJ1cy5vZmYoXG4gICAgICAgICAgZXZlbnRzXzEuVkVOTU9fREVTS1RPUF9VTktOT1dOX0VSUk9SLFxuICAgICAgICAgIHVua25vd25FcnJvckhhbmRsZXJcbiAgICAgICAgKTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cbiAgICAgIH07XG4gICAgICB2YXIgdW5rbm93bkVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgIF90aGlzLnNlbmRFdmVudChcInZlbm1vLnRva2VuaXplLmRlc2t0b3AudW5rbm93bi1lcnJvclwiKTtcbiAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICBhbGxvd1VJVG9IYW5kbGVFcnJvcjogZmFsc2UsXG4gICAgICAgICAgcmVhc29uOiBcIlVOS05PV05fRVJST1JcIixcbiAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgdmFyIGN1c3RvbWVyQ2FuY2VsbGVkSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgIF90aGlzLnVwZGF0ZVZlbm1vRGVza3RvcFBheW1lbnRDb250ZXh0KFwiQ0FOQ0VMRURcIik7XG4gICAgICAgIF90aGlzLnNlbmRFdmVudChcbiAgICAgICAgICBcInZlbm1vLnRva2VuaXplLmRlc2t0b3Auc3RhdHVzLWNoYW5nZS5jYW5jZWxlZC1mcm9tLW1vZGFsXCJcbiAgICAgICAgKTtcbiAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICBhbGxvd1VJVG9IYW5kbGVFcnJvcjogZmFsc2UsXG4gICAgICAgICAgcmVhc29uOiBcIkNVU1RPTUVSX0NBTkNFTEVEXCIsXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIF90aGlzLmNvbXBsZXRlZEhhbmRsZXIgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgcmVzb2x2ZShwYXlsb2FkKTtcbiAgICAgIH07XG4gICAgICBfdGhpcy5idXMub24oXG4gICAgICAgIGV2ZW50c18xLlZFTk1PX0RFU0tUT1BfQ1VTVE9NRVJfQ0FOQ0VMRUQsXG4gICAgICAgIGN1c3RvbWVyQ2FuY2VsbGVkSGFuZGxlclxuICAgICAgKTtcbiAgICAgIF90aGlzLmJ1cy5vbihldmVudHNfMS5WRU5NT19ERVNLVE9QX1VOS05PV05fRVJST1IsIHVua25vd25FcnJvckhhbmRsZXIpO1xuICAgIH0pO1xuICAgIHRoaXMuaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgdGhpcy5zZXRBbGVydChcIkdlbmVyYXRpbmcgYSBRUiBjb2RlLCBnZXQgeW91ciBWZW5tbyBhcHAgcmVhZHlcIik7XG4gICAgdGhpcy5pZnJhbWUuZm9jdXMoKTtcbiAgICB0aGlzLnN0YXJ0UG9sbGluZygpO1xuICAgIHJldHVybiBwcm9taXNlXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGRlbGV0ZSBfdGhpcy52ZW5tb0NvbnRleHRJZDtcbiAgICAgICAgZGVsZXRlIF90aGlzLmxhdW5jaERlc2t0b3BQcm9taXNlUmVqZWN0RnVuY3Rpb247XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgZGVsZXRlIF90aGlzLnZlbm1vQ29udGV4dElkO1xuICAgICAgICBkZWxldGUgX3RoaXMubGF1bmNoRGVza3RvcFByb21pc2VSZWplY3RGdW5jdGlvbjtcbiAgICAgICAgcmV0dXJuIF90aGlzLlByb21pc2UucmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgfTtcbiAgVmVubW9EZXNrdG9wLnByb3RvdHlwZS50cmlnZ2VyQ29tcGxldGVkID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKHRoaXMuaXNIaWRkZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuY29tcGxldGVkSGFuZGxlcikge1xuICAgICAgICBfdGhpcy5jb21wbGV0ZWRIYW5kbGVyKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBkZWxldGUgX3RoaXMuY29tcGxldGVkSGFuZGxlcjtcbiAgICB9LCBWSVNVQUxfREVMQVlfQkVGT1JFX1NJR05BTExJTkdfQ09NUExFVElPTik7XG4gIH07XG4gIFZlbm1vRGVza3RvcC5wcm90b3R5cGUudHJpZ2dlclJlamVjdGVkID0gZnVuY3Rpb24gKGVycikge1xuICAgIGlmICh0aGlzLmxhdW5jaERlc2t0b3BQcm9taXNlUmVqZWN0RnVuY3Rpb24pIHtcbiAgICAgIHRoaXMubGF1bmNoRGVza3RvcFByb21pc2VSZWplY3RGdW5jdGlvbihlcnIpO1xuICAgIH1cbiAgfTtcbiAgVmVubW9EZXNrdG9wLnByb3RvdHlwZS5oaWRlRGVza3RvcEZsb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXRBbGVydChcIlwiKTtcbiAgICB0aGlzLmlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgdGhpcy5idXMuZW1pdChldmVudHNfMS5WRU5NT19ERVNLVE9QX0NMT1NFRF9GUk9NX1BBUkVOVCk7XG4gICAgdGhpcy5pc0hpZGRlbiA9IHRydWU7XG4gIH07XG4gIFZlbm1vRGVza3RvcC5wcm90b3R5cGUuZGlzcGxheUVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICBpZiAodGhpcy5pc0hpZGRlbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmJ1cy5lbWl0KGV2ZW50c18xLlZFTk1PX0RFU0tUT1BfRElTUExBWV9FUlJPUiwge1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICB9KTtcbiAgICB0aGlzLnNldEFsZXJ0KG1lc3NhZ2UpO1xuICB9O1xuICBWZW5tb0Rlc2t0b3AucHJvdG90eXBlLmRpc3BsYXlRUkNvZGUgPSBmdW5jdGlvbiAoaWQsIG1lcmNoYW50SWQpIHtcbiAgICBpZiAodGhpcy5pc0hpZGRlbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmJ1cy5lbWl0KGV2ZW50c18xLlZFTk1PX0RFU0tUT1BfRElTUExBWV9RUl9DT0RFLCB7XG4gICAgICBpZDogaWQsXG4gICAgICBtZXJjaGFudElkOiBtZXJjaGFudElkLFxuICAgIH0pO1xuICAgIHRoaXMuc2V0QWxlcnQoXCJUbyBzY2FuIHRoZSBRUiBjb2RlLCBvcGVuIHlvdXIgVmVubW8gYXBwXCIpO1xuICB9O1xuICBWZW5tb0Rlc2t0b3AucHJvdG90eXBlLmF1dGhvcml6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc0hpZGRlbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmJ1cy5lbWl0KGV2ZW50c18xLlZFTk1PX0RFU0tUT1BfQVVUSE9SSVpFKTtcbiAgICB0aGlzLnNldEFsZXJ0KFwiVmVubW8gYWNjb3VudCBhdXRob3JpemVkXCIpO1xuICB9O1xuICBWZW5tb0Rlc2t0b3AucHJvdG90eXBlLmF1dGhvcml6aW5nID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzSGlkZGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuYnVzLmVtaXQoZXZlbnRzXzEuVkVOTU9fREVTS1RPUF9BVVRIT1JJWklORyk7XG4gICAgdGhpcy5zZXRBbGVydChcIkF1dGhvcml6ZSBvbiB5b3VyIFZlbm1vIGFwcFwiKTtcbiAgfTtcbiAgVmVubW9EZXNrdG9wLnByb3RvdHlwZS5zdGFydFBvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVWZW5tb0Rlc2t0b3BQYXltZW50Q29udGV4dCgpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIHZhciBleHBpcmVzSW4gPVxuICAgICAgICAgIG5ldyBEYXRlKHJlc3VsdC5leHBpcmVzQXQpLmdldFRpbWUoKSAtXG4gICAgICAgICAgbmV3IERhdGUocmVzdWx0LmNyZWF0ZWRBdCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgZXhwaXJlZFRpbWUgPSBEYXRlLm5vdygpICsgZXhwaXJlc0luO1xuICAgICAgICBfdGhpcy5kaXNwbGF5UVJDb2RlKHJlc3VsdC5pZCwgcmVzdWx0Lm1lcmNoYW50SWQpO1xuICAgICAgICByZXR1cm4gX3RoaXMucG9sbEZvclN0YXR1c0NoYW5nZShyZXN1bHQuc3RhdHVzLCBleHBpcmVkVGltZSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBzaW5jZSB3ZSBhcmUgbWFudWFsbHkgYWRkaW5nIGEgcHJlcGVuZGVkIEAgc2lnblxuICAgICAgICAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSB1c2VybmFtZSBkb2VzIG5vdFxuICAgICAgICAvLyBzdGFydCBnaXZpbmcgdXMgdGhlIEAgc2lnbiB1cCBmcm9udCBpbiB0aGUgZnV0dXJlXG4gICAgICAgIHZhciB1c2VybmFtZSA9IHJlc3VsdC51c2VyTmFtZSB8fCBcIlwiO1xuICAgICAgICB1c2VybmFtZSA9IFwiQFwiICsgdXNlcm5hbWUucmVwbGFjZShcIkBcIiwgXCJcIik7XG4gICAgICAgIF90aGlzLnRyaWdnZXJDb21wbGV0ZWQoe1xuICAgICAgICAgIHBheW1lbnRNZXRob2ROb25jZTogcmVzdWx0LnBheW1lbnRNZXRob2RJZCxcbiAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXG4gICAgICAgICAgcGF5ZXJJbmZvOiByZXN1bHQucGF5ZXJJbmZvLFxuICAgICAgICAgIGlkOiBfdGhpcy52ZW5tb0NvbnRleHRJZCB8fCBcIlwiLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyLmFsbG93VUlUb0hhbmRsZUVycm9yKSB7XG4gICAgICAgICAgLy8gbm9vcCBoZXJlIGFuZCBsZXQgdGhlIFVJIGhhbmRsZSB0aGUgY3VzdG9tZXIgZXJyb3JcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuc2VuZEV2ZW50KFwidmVubW8udG9rZW5pemUuZGVza3RvcC51bmhhbmRsZWQtZXJyb3JcIik7XG4gICAgICAgIF90aGlzLnRyaWdnZXJSZWplY3RlZChlcnIpO1xuICAgICAgfSk7XG4gIH07XG4gIFZlbm1vRGVza3RvcC5wcm90b3R5cGUucG9sbEZvclN0YXR1c0NoYW5nZSA9IGZ1bmN0aW9uIChzdGF0dXMsIGV4cGlyZWRUaW1lKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBpZiAoIXRoaXMudmVubW9Db250ZXh0SWQpIHtcbiAgICAgIHJldHVybiB0aGlzLlByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBpZiAoRGF0ZS5ub3coKSA+IGV4cGlyZWRUaW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVWZW5tb0Rlc2t0b3BQYXltZW50Q29udGV4dChcIkVYUElSRURcIikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmRpc3BsYXlFcnJvcihcIlNvbWV0aGluZyB3ZW50IHdyb25nXCIpO1xuICAgICAgICBfdGhpcy5zZW5kRXZlbnQoXCJ2ZW5tby50b2tlbml6ZS5kZXNrdG9wLnN0YXR1cy1jaGFuZ2Uuc2RrLXRpbWVvdXRcIik7XG4gICAgICAgIHJldHVybiBfdGhpcy5Qcm9taXNlLnJlamVjdCh7XG4gICAgICAgICAgYWxsb3dVSVRvSGFuZGxlRXJyb3I6IHRydWUsXG4gICAgICAgICAgcmVhc29uOiBcIlRJTUVPVVRcIixcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubG9va3VwVmVubW9EZXNrdG9wUGF5bWVudENvbnRleHQoKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKCFfdGhpcy52ZW5tb0NvbnRleHRJZCB8fCAhcmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLlByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1N0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgIGlmIChuZXdTdGF0dXMgIT09IHN0YXR1cykge1xuICAgICAgICBzdGF0dXMgPSBuZXdTdGF0dXM7XG4gICAgICAgIF90aGlzLnNlbmRFdmVudChcbiAgICAgICAgICBcInZlbm1vLnRva2VuaXplLmRlc2t0b3Auc3RhdHVzLWNoYW5nZS5cIiArIHN0YXR1cy50b0xvd2VyQ2FzZSgpXG4gICAgICAgICk7XG4gICAgICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICAgICAgY2FzZSBcIkNSRUFURURcIjpcbiAgICAgICAgICAgIC8vIG5vb3AsIG5vIG5lZWQgdG8gZG8gYW55dGhpbmcgaGVyZVxuICAgICAgICAgICAgLy8gc2hvdWxkIG5ldmVyIGJlIGFibGUgdG8gZ2V0IHRvIHRoaXMgcG9pbnRcbiAgICAgICAgICAgIC8vIGJ1dCB3ZSdsbCBrZWVwIGl0IGluIHRvIGVudW1lcmF0ZSB0aGUgc3RhdHVzZXNcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJFWFBJUkVEXCI6XG4gICAgICAgICAgY2FzZSBcIkZBSUxFRFwiOlxuICAgICAgICAgIGNhc2UgXCJDQU5DRUxFRFwiOlxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPVxuICAgICAgICAgICAgICBzdGF0dXMgPT09IFwiQ0FOQ0VMRURcIlxuICAgICAgICAgICAgICAgID8gXCJUaGUgYXV0aG9yaXphdGlvbiB3YXMgY2FuY2VsZWRcIlxuICAgICAgICAgICAgICAgIDogXCJTb21ldGhpbmcgd2VudCB3cm9uZ1wiO1xuICAgICAgICAgICAgX3RoaXMuZGlzcGxheUVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gdGhlc2UgYXJlIGFsbCB0ZXJtaW5hbCBzdGF0ZXMsIHNvIHdlIGVuZCBpdCBoZXJlXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuUHJvbWlzZS5yZWplY3Qoe1xuICAgICAgICAgICAgICBhbGxvd1VJVG9IYW5kbGVFcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgICAgcmVhc29uOiBzdGF0dXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICBjYXNlIFwiU0NBTk5FRFwiOlxuICAgICAgICAgICAgX3RoaXMuYXV0aG9yaXppbmcoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJBUFBST1ZFRFwiOlxuICAgICAgICAgICAgX3RoaXMuYXV0aG9yaXplKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIGFueSBvdGhlciBzdGF0dXNlcyBhcmUgaXJyZWxldmFudCB0byB0aGUgcG9sbGluZ1xuICAgICAgICAgIC8vIGFuZCBjYW4ganVzdCBiZSBpZ25vcmVkXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgX3RoaXMuUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzXG4gICAgICAgICAgICAucG9sbEZvclN0YXR1c0NoYW5nZShzdGF0dXMsIGV4cGlyZWRUaW1lKVxuICAgICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgICB9LCBWRU5NT19ERVNLVE9QX1BPTExJTkdfSU5URVJWQUwpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIFZlbm1vRGVza3RvcC5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5idXMudGVhcmRvd24oKTtcbiAgICBpZiAodGhpcy5pZnJhbWUucGFyZW50Tm9kZSkge1xuICAgICAgdGhpcy5pZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmlmcmFtZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmFsZXJ0Qm94LnBhcmVudE5vZGUpIHtcbiAgICAgIHRoaXMuYWxlcnRCb3gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmFsZXJ0Qm94KTtcbiAgICB9XG4gIH07XG4gIFZlbm1vRGVza3RvcC5wcm90b3R5cGUuc2V0QWxlcnQgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHRoaXMuYWxlcnRCb3guc3R5bGUuZGlzcGxheSA9IG1lc3NhZ2UgPyBcImJsb2NrXCIgOiBcIm5vbmVcIjtcbiAgICB0aGlzLmFsZXJ0Qm94LnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgfTtcbiAgVmVubW9EZXNrdG9wLnByb3RvdHlwZS5jcmVhdGVQYXltZW50Q29udGV4dEZyb21HcmFwaHFsTGVnYWN5UVJDb2RlTXV0YXRpb24gPVxuICAgIGZ1bmN0aW9uIChpbnRlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmFwaVJlcXVlc3QocXVlcmllc18xLkxFR0FDWV9DUkVBVEVfUEFZTUVOVF9DT05URVhUX1FVRVJZLCB7XG4gICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgZW52aXJvbm1lbnQ6IHRoaXMuZW52LFxuICAgICAgICAgIGludGVudDogaW50ZW50LFxuICAgICAgICB9LFxuICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgICAgLmNyZWF0ZVZlbm1vUVJDb2RlUGF5bWVudENvbnRleHQudmVubW9RUkNvZGVQYXltZW50Q29udGV4dDtcbiAgICAgIH0pO1xuICAgIH07XG4gIFZlbm1vRGVza3RvcC5wcm90b3R5cGUuY3JlYXRlUGF5bWVudENvbnRleHRGcm9tR3JhcGhRTCA9IGZ1bmN0aW9uIChpbnRlbnQpIHtcbiAgICB2YXIgaW5wdXQgPSB7XG4gICAgICBpbnRlbnQ6IGludGVudCxcbiAgICAgIHBheW1lbnRNZXRob2RVc2FnZTogdGhpcy5wYXltZW50TWV0aG9kVXNhZ2UsXG4gICAgICBjdXN0b21lckNsaWVudDogXCJERVNLVE9QXCIsXG4gICAgfTtcbiAgICBpZiAodGhpcy5wcm9maWxlSWQpIHtcbiAgICAgIGlucHV0Lm1lcmNoYW50UHJvZmlsZUlkID0gdGhpcy5wcm9maWxlSWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLmRpc3BsYXlOYW1lKSB7XG4gICAgICBpbnB1dC5kaXNwbGF5TmFtZSA9IHRoaXMuZGlzcGxheU5hbWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFwaVJlcXVlc3QocXVlcmllc18xLkNSRUFURV9QQVlNRU5UX0NPTlRFWFRfUVVFUlksIHtcbiAgICAgIGlucHV0OiBpbnB1dCxcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmNyZWF0ZVZlbm1vUGF5bWVudENvbnRleHQudmVubW9QYXltZW50Q29udGV4dDtcbiAgICB9KTtcbiAgfTtcbiAgVmVubW9EZXNrdG9wLnByb3RvdHlwZS5jcmVhdGVWZW5tb0Rlc2t0b3BQYXltZW50Q29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBjb250ZXh0UHJvbWlzZSA9IHRoaXMuc2hvdWxkVXNlTGVnYWN5UVJDb2RlTXV0YXRpb25cbiAgICAgID8gdGhpcy5jcmVhdGVQYXltZW50Q29udGV4dEZyb21HcmFwaHFsTGVnYWN5UVJDb2RlTXV0YXRpb24oXCJQQVlfRlJPTV9BUFBcIilcbiAgICAgIDogdGhpcy5jcmVhdGVQYXltZW50Q29udGV4dEZyb21HcmFwaFFMKFwiUEFZX0ZST01fQVBQXCIpO1xuICAgIHJldHVybiBjb250ZXh0UHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICBfdGhpcy52ZW5tb0NvbnRleHRJZCA9IGNvbnRleHQuaWQ7XG4gICAgICB2YXIgbWVyY2hhbnRJZCA9IF90aGlzLnByb2ZpbGVJZCB8fCBjb250ZXh0Lm1lcmNoYW50SWQ7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogY29udGV4dC5pZCxcbiAgICAgICAgc3RhdHVzOiBjb250ZXh0LnN0YXR1cyxcbiAgICAgICAgbWVyY2hhbnRJZDogbWVyY2hhbnRJZCxcbiAgICAgICAgY3JlYXRlZEF0OiBjb250ZXh0LmNyZWF0ZWRBdCxcbiAgICAgICAgZXhwaXJlc0F0OiBjb250ZXh0LmV4cGlyZXNBdCxcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG4gIFZlbm1vRGVza3RvcC5wcm90b3R5cGUudXBkYXRlVmVubW9EZXNrdG9wUGF5bWVudENvbnRleHQgPSBmdW5jdGlvbiAoXG4gICAgc3RhdHVzLFxuICAgIGFkZGl0aW9uYWxPcHRpb25zXG4gICkge1xuICAgIGlmIChhZGRpdGlvbmFsT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBhZGRpdGlvbmFsT3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAoIXRoaXMudmVubW9Db250ZXh0SWQpIHtcbiAgICAgIHJldHVybiB0aGlzLlByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIGlucHV0OiBfX2Fzc2lnbihcbiAgICAgICAgeyBpZDogdGhpcy52ZW5tb0NvbnRleHRJZCwgc3RhdHVzOiBzdGF0dXMgfSxcbiAgICAgICAgYWRkaXRpb25hbE9wdGlvbnNcbiAgICAgICksXG4gICAgfTtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLnNob3VsZFVzZUxlZ2FjeVFSQ29kZU11dGF0aW9uXG4gICAgICA/IHF1ZXJpZXNfMS5MRUdBQ1lfVVBEQVRFX1BBWU1FTlRfQ09OVEVYVF9RVUVSWVxuICAgICAgOiBxdWVyaWVzXzEuVVBEQVRFX1BBWU1FTlRfQ09OVEVYVF9RVUVSWTtcbiAgICByZXR1cm4gdGhpcy5hcGlSZXF1ZXN0KHF1ZXJ5LCBkYXRhKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIG5vb3Agc28gd2UgY2FuIHJlc29sdmUgd2l0aG91dCBhbnkgZGF0YSB0byBtYXRjaCB0aGUgdHlwZVxuICAgIH0pO1xuICB9O1xuICBWZW5tb0Rlc2t0b3AucHJvdG90eXBlLmxvb2t1cFZlbm1vRGVza3RvcFBheW1lbnRDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy52ZW5tb0NvbnRleHRJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHZhciBxdWVyeSA9IHRoaXMuc2hvdWxkVXNlTGVnYWN5UVJDb2RlTXV0YXRpb25cbiAgICAgID8gcXVlcmllc18xLkxFR0FDWV9WRU5NT19QQVlNRU5UX0NPTlRFWFRfU1RBVFVTX1FVRVJZXG4gICAgICA6IHF1ZXJpZXNfMS5WRU5NT19QQVlNRU5UX0NPTlRFWFRfU1RBVFVTX1FVRVJZO1xuICAgIHJldHVybiB0aGlzLmFwaVJlcXVlc3QocXVlcnksIHtcbiAgICAgIGlkOiB0aGlzLnZlbm1vQ29udGV4dElkLFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2Uubm9kZTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIFZlbm1vRGVza3RvcDtcbn0pKCk7XG5leHBvcnRzLmRlZmF1bHQgPSBWZW5tb0Rlc2t0b3A7XG5cbn0se1wiLi4vc2hhcmVkL2V2ZW50c1wiOjIyMCxcIi4vcXVlcmllc1wiOjIxNCxcIkBicmFpbnRyZWUvaWZyYW1lclwiOjM1LFwiQGJyYWludHJlZS91dWlkXCI6MzksXCJmcmFtZWJ1c1wiOjUyfV0sMjE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgYnJhaW50cmVlLXdlYi92ZW5tbyAqL1xuXG52YXIgYW5hbHl0aWNzID0gX2RlcmVxXyhcIi4uL2xpYi9hbmFseXRpY3NcIik7XG52YXIgYmFzaWNDb21wb25lbnRWZXJpZmljYXRpb24gPSBfZGVyZXFfKFwiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIik7XG52YXIgY3JlYXRlRGVmZXJyZWRDbGllbnQgPSBfZGVyZXFfKFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIik7XG52YXIgY3JlYXRlQXNzZXRzVXJsID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9zaGFyZWQvZXJyb3JzXCIpO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG52YXIgVmVubW8gPSBfZGVyZXFfKFwiLi92ZW5tb1wiKTtcbnZhciBzdXBwb3J0c1Zlbm1vID0gX2RlcmVxXyhcIi4vc2hhcmVkL3N1cHBvcnRzLXZlbm1vXCIpO1xudmFyIFZFUlNJT04gPSBcIjMuMTAwLjBcIjtcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBWZW5tb35saW5lSXRlbVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHF1YW50aXR5IE51bWJlciBvZiB1bml0cyBvZiB0aGUgaXRlbSBwdXJjaGFzZWQuIFRoaXMgdmFsdWUgbXVzdCBiZSBhIHdob2xlIG51bWJlciBhbmQgY2FuJ3QgYmUgbmVnYXRpdmUgb3IgemVyby5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1bml0QW1vdW50IFBlci11bml0IHByaWNlIG9mIHRoZSBpdGVtLiBDYW4gaW5jbHVkZSB1cCB0byAyIGRlY2ltYWwgcGxhY2VzLiBUaGlzIHZhbHVlIGNhbid0IGJlIG5lZ2F0aXZlIG9yIHplcm8uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSBJdGVtIG5hbWUuIE1heGltdW0gMTI3IGNoYXJhY3RlcnMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30ga2luZCBJbmRpY2F0ZXMgd2hldGhlciB0aGUgbGluZSBpdGVtIGlzIGEgZGViaXQgKHNhbGUpIG9yIGNyZWRpdCAocmVmdW5kKSB0byB0aGUgY3VzdG9tZXIuIEFjY2VwdGVkIHZhbHVlczogYGRlYml0YCBhbmQgYGNyZWRpdGAuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHVuaXRUYXhBbW91bnQgUGVyLXVuaXQgdGF4IHByaWNlIG9mIHRoZSBpdGVtLiBDYW4gaW5jbHVkZSB1cCB0byAyIGRlY2ltYWwgcGxhY2VzLiBUaGlzIHZhbHVlIGNhbid0IGJlIG5lZ2F0aXZlIG9yIHplcm8uXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IGRlc2NyaXB0aW9uIEl0ZW0gZGVzY3JpcHRpb24uIE1heGltdW0gMTI3IGNoYXJhY3RlcnMuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHByb2R1Y3RDb2RlIFByb2R1Y3Qgb3IgVVBDIGNvZGUgZm9yIHRoZSBpdGVtLiBNYXhpbXVtIDEyNyBjaGFyYWN0ZXJzLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSB1cmwgVGhlIFVSTCB0byBwcm9kdWN0IGluZm9ybWF0aW9uLlxuICovXG5cbi8qKlxuICogQHN0YXRpY1xuICogQGZ1bmN0aW9uIGNyZWF0ZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ3JlYXRpb24gb3B0aW9uczpcbiAqIEBwYXJhbSB7Q2xpZW50fSBbb3B0aW9ucy5jbGllbnRdIEEge0BsaW5rIENsaWVudH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYXV0aG9yaXphdGlvbl0gQSB0b2tlbml6YXRpb25LZXkgb3IgY2xpZW50VG9rZW4uIENhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGBvcHRpb25zLmNsaWVudGAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93TmV3QnJvd3NlclRhYj10cnVlXSBUaGlzIHNob3VsZCBiZSBzZXQgdG8gZmFsc2UgaWYgeW91ciBwYXltZW50IGZsb3cgcmVxdWlyZXMgcmV0dXJuaW5nIHRvIHRoZSBzYW1lIHRhYiwgZS5nLiBzaW5nbGUgcGFnZSBhcHBsaWNhdGlvbnMuIERvaW5nIHNvIGNhdXNlcyB7QGxpbmsgVmVubW8jaXNCcm93c2VyU3VwcG9ydGVkfGlzQnJvd3NlclN1cHBvcnRlZH0gdG8gcmV0dXJuIHRydWUgb25seSBmb3IgbW9iaWxlIHdlYiBicm93c2VycyB0aGF0IHN1cHBvcnQgcmV0dXJuaW5nIGZyb20gdGhlIFZlbm1vIGFwcCB0byB0aGUgc2FtZSB0YWIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93V2Vidmlld3M9dHJ1ZV0gVGhpcyBzaG91bGQgYmUgc2V0IHRvIGZhbHNlIGlmIHlvdXIgcGF5bWVudCBmbG93IGRvZXMgbm90IG9jY3VyIGZyb20gd2l0aGluIGEgd2VidmlldyB0aGF0IHlvdSBjb250cm9sLiBEb2luZyBzbyBjYXVzZXMge0BsaW5rIFZlbm1vI2lzQnJvd3NlclN1cHBvcnRlZHxpc0Jyb3dzZXJTdXBwb3J0ZWR9IHRvIHJldHVybiB0cnVlIG9ubHkgZm9yIG1vYmlsZSB3ZWIgYnJvd3NlcnMgdGhhdCBhcmUgbm90IHdlYnZpZXdzLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pZ25vcmVIaXN0b3J5Q2hhbmdlcz1mYWxzZV0gV2hlbiB0aGUgVmVubW8gYXBwIHJldHVybnMgdG8gdGhlIHdlYnNpdGUsIGl0IHdpbGwgbW9kaWZ5IHRoZSBoYXNoIG9mIHRoZSB1cmwgdG8gaW5jbHVkZSBkYXRhIGFib3V0IHRoZSB0b2tlbml6YXRpb24uIEJ5IGRlZmF1bHQsIHRoZSBTREsgd2lsbCBwdXQgdGhlIHN0YXRlIG9mIHRoZSBoYXNoIGJhY2sgdG8gd2hlcmUgaXQgd2FzIGJlZm9yZSB0aGUgY2hhbmdlIHdhcyBtYWRlLiBQYXNzIGB0cnVlYCB0byBoYW5kbGUgdGhlIGhhc2ggY2hhbmdlIGluc3RlYWQgb2YgdGhlIFNESy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5wcm9maWxlSWRdIFRoZSBWZW5tbyBwcm9maWxlIElEIHRvIGJlIHVzZWQgZHVyaW5nIHBheW1lbnQgYXV0aG9yaXphdGlvbi4gQ3VzdG9tZXJzIHdpbGwgc2VlIHRoZSBidXNpbmVzcyBuYW1lIGFuZCBsb2dvIGFzc29jaWF0ZWQgd2l0aCB0aGlzIFZlbm1vIHByb2ZpbGUsIGFuZCBpdCB3aWxsIHNob3cgdXAgaW4gdGhlIFZlbm1vIGFwcCBhcyBhIFwiQ29ubmVjdGVkIE1lcmNoYW50XCIuIFZlbm1vIHByb2ZpbGUgSURzIGNhbiBiZSBmb3VuZCBpbiB0aGUgQnJhaW50cmVlIENvbnRyb2wgUGFuZWwuIE9taXR0aW5nIHRoaXMgdmFsdWUgd2lsbCB1c2UgdGhlIGRlZmF1bHQgVmVubW8gcHJvZmlsZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kZWVwTGlua1JldHVyblVybF0gQW4gb3ZlcnJpZGUgZm9yIHRoZSBVUkwgdGhhdCB0aGUgVmVubW8gaU9TIGFwcCBvcGVucyB0byByZXR1cm4gZnJvbSBhbiBhcHAgc3dpdGNoLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZXF1aXJlTWFudWFsUmV0dXJuPWZhbHNlXSBXaGVuIGB0cnVlYCwgdGhlIGN1c3RvbWVyIHdpbGwgaGF2ZSB0byBtYW51YWxseSBzd2l0Y2ggYmFjayB0byB0aGUgYnJvd3Nlci93ZWJ2aWV3IHRoYXQgaXMgcHJlc2VudGluZyBWZW5tbyB0byBjb21wbGV0ZSB0aGUgcGF5bWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudXNlUmVkaXJlY3RGb3JJT1M9ZmFsc2VdIE5vcm1hbGx5LCB0aGUgVmVubW8gZmxvdyBpcyBsYXVuY2hlZCB1c2luZyBgd2luZG93Lm9wZW5gIGFuZCB0aGUgVmVubW8gYXBwIGludGVyY2VwdHMgdGhhdCBjYWxsIGFuZCBvcGVucyB0aGUgVmVubW8gYXBwIGluc3RlYWQuIElmIHRoZSBjdXN0b21lciBkb2VzIG5vdCBoYXZlIHRoZSBWZW5tbyBhcHAgaW5zdGFsbGVkLCBpdCBvcGVucyB0aGUgVmVubW8gd2Vic2l0ZSBpbiBhIG5ldyB3aW5kb3cgYW5kIGluc3RydWN0cyB0aGUgY3VzdG9tZXIgdG8gaW5zdGFsbCB0aGUgYXBwLlxuIFxuICogSW4gaU9TIHdlYnZpZXdzIGFuZCBTYWZhcmkgVmlldyBDb250cm9sbGVycyAoYSB3ZWJ2aWV3LWxpa2UgZW52aXJvbm1lbnQgd2hpY2ggaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBTYWZhcmkgZm9yIEphdmFTY3JpcHQgZW52aXJvbm1lbnRzKSwgdGhpcyBjYWxsIHRvIGB3aW5kb3cub3BlbmAgd2lsbCBhbHdheXMgZmFpbCB0byBhcHAgc3dpdGNoIHRvIFZlbm1vLCByZXN1bHRpbmcgaW5zdGVhZCBpbiBhIHdoaXRlIHNjcmVlbi4gQmVjYXVzZSBvZiB0aGlzLCBhbiBhbHRlcm5hdGUgYXBwcm9hY2ggaXMgcmVxdWlyZWQgdG8gbGF1bmNoIHRoZSBWZW5tbyBmbG93LlxuICpcbiAqIFdoZW4gYHVzZVJlZGlyZWN0Rm9ySU9TYCBpcyBgdHJ1ZWAgYW5kIHRoZSBWZW5tbyBmbG93IGlzIHN0YXJ0ZWQgaW4gYW4gaU9TIGVudmlyb25tZW50LCB0aGUgVmVubW8gZmxvdyB3aWxsIGJlIHN0YXJ0ZWQgYnkgc2V0dGluZyBgd2luZG93LmxvY2F0aW9uLmhyZWZgIHRvIHRoZSBWZW5tbyB3ZWJzaXRlICh3aGljaCB3aWxsIHN0aWxsIGJlIGludGVyY2VwdGVkIGJ5IHRoZSBWZW5tbyBhcHAgYW5kIHNob3VsZCBiZSB0aGUgc2FtZSBiZWhhdmlvciBhcyBpZiBgd2luZG93Lm9wZW5gIHdhcyBjYWxsZWQpLiBIb3dldmVyLCBpZiB0aGUgY3VzdG9tZXIgZG9lcyBub3QgaGF2ZSB0aGUgVmVubW8gYXBwIGluc3RhbGxlZCwgdGhlIG1lcmNoYW50IHBhZ2Ugd2lsbCBpbnN0ZWFkIGJlIHJlcGxhY2VkIHdpdGggdGhlIFZlbm1vIHdlYnNpdGUgYW5kIHRoZSBjdXN0b21lciB3aWxsIG5lZWQgdG8gdXNlIHRoZSBicm93c2VyJ3MgYmFjayBidXR0b24gdG8gcmV0dXJuIHRvIHRoZSBtZXJjaGFudCdzIHdlYnNpdGUuIEVuc3VyZSB0aGF0IHlvdXIgY3VzdG9tZXIncyBjaGVja291dCBpbmZvcm1hdGlvbiB3aWxsIG5vdCBiZSBsb3N0IGlmIHRoZXkgYXJlIG5hdmlnYXRlZCBhd2F5IGZyb20gdGhlIHdlYnNpdGUgYW5kIHJldHVybiB1c2luZyB0aGUgYnJvd3NlciBiYWNrIGJ1dHRvbi5cbiAqXG4gKiBEdWUgdG8gYSBidWcgaW4gaU9TJ3MgaW1wbGVtZW50YXRpb24gb2YgYHdpbmRvdy5vcGVuYCBpbiBpT1Mgd2Vidmlld3MgYW5kIFNhZmFyaSBWaWV3IENvbnRyb2xsZXJzLCBpZiBgdXNlUmVkaXJlY3RGb3JJT1NgIGlzIG5vdCBzZXQgdG8gYHRydWVgIGFuZCB0aGUgZmxvdyBpcyBsYXVuY2hlZCBmcm9tIGFuIGlPUyB3ZWJ2aWV3IG9yIFNhZmFyaSBWaWV3IENvbnRyb2xsZXIsIHRoZSBjdXN0b21lciB3aWxsIGJlIHByZXNlbnRlZCB3aXRoIGEgYmxhbmsgc2NyZWVuLCBoYWx0aW5nIHRoZSBmbG93IGFuZCBsZWF2aW5nIHRoZSBjdXN0b21lciB1bmFibGUgdG8gcmV0dXJuIHRvIHRoZSBtZXJjaGFudCdzIHdlYnNpdGUuIFNldHRpbmcgYHVzZVJlZGlyZWN0Rm9ySU9TYCB0byBgdHJ1ZWAgd2lsbCBhbGxvdyB0aGUgZmxvdyB0byBjb250aW51ZSwgYnV0IHRoZSBWZW5tbyBhcHAgd2lsbCBiZSB1bmFibGUgdG8gcmV0dXJuIGJhY2sgdG8gdGhlIHdlYnZpZXcvU2FmYXJpIFZpZXcgQ29udHJvbGxlci4gSXQgd2lsbCBpbnN0ZWFkIG9wZW4gdGhlIG1lcmNoYW50J3Mgc2l0ZSBpbiBhIG5ldyB3aW5kb3cgaW4gdGhlIGN1c3RvbWVyJ3MgYnJvd3Nlciwgd2hpY2ggbWVhbnMgdGhlIG1lcmNoYW50IHNpdGUgbXVzdCBiZSBhYmxlIHRvIHByb2Nlc3MgdGhlIFZlbm1vIHBheW1lbnQuIElmIHRoZSBTREsgaXMgY29uZmlndXJlZCB3aXRoIGBhbGxvd05ld0Jyb3dzZXJUYWIgPSBmYWxzZWAsIGl0IGlzIHVubGlrZWx5IHRoYXQgdGhlIHdlYnNpdGUgaXMgc2V0IHVwIHRvIHByb2Nlc3MgdGhlIFZlbm1vIHBheW1lbnQgZnJvbSBhIG5ldyB3aW5kb3cuXG4gKlxuICogSWYgcHJvY2Vzc2luZyB0aGUgcGF5bWVudCBmcm9tIGEgbmV3IHdpbmRvdyBpcyBub3QgcG9zc2libGUsIHVzZSB0aGlzIGZsYWcgaW4gY29uanVuY3Rpb24gd2l0aCBgcmVxdWlyZU1hbnVhbFJldHVybmAgc28gdGhhdCB0aGUgY3VzdG9tZXIgbWF5IHN0YXJ0IHRoZSBmbG93IGZyb20gYSB3ZWJ2aWV3L1NhZmFyaSBWaWV3IENvbnRyb2xsZXIgb3IgdGhlaXIgU2FmYXJpIGJyb3dzZXIgYW5kIG1hbnVhbGx5IHJldHVybiB0byB0aGUgcGxhY2UgdGhhdCBvcmlnaW5hdGVkIHRoZSBmbG93IG9uY2UgdGhlIFZlbm1vIGFwcCBoYXMgYXV0aG9yaXplZCB0aGUgcGF5bWVudCBhbmQgaW5zdHJ1Y3RlZCB0aGVtIHRvIGRvIHNvLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnBheW1lbnRNZXRob2RVc2FnZV0gVGhlIGludGVuZGVkIHVzYWdlIGZvciB0aGUgVmVubW8gcGF5bWVudCBtZXRob2Qgbm9uY2UuIFBvc3NpYmxlIG9wdGlvbnMgYXJlOlxuICogKiBzaW5nbGVfdXNlIC0gaW50ZW5kZWQgYXMgYSBvbmUgdGltZSB0cmFuc2FjdGlvblxuICogKiBtdWx0aV91c2UgLSBpbnRlbmRlZCB0byBiZSB2YXVsdGVkIGFuZCB1c2VkIGZvciBtdWx0aXBsZSB0cmFuc2FjdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kaXNwbGF5TmFtZV0gVGhlIGJ1c2luZXNzIG5hbWUgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgVmVubW8gYXBwIHBheW1lbnQgYXBwcm92YWwgc2NyZWVuLiBPbmx5IGFwcGxpY2FibGUgd2hlbiB1c2VkIHdpdGggYHBheW1lbnRNZXRob2RVc2FnZWAgYW5kIHVzZWQgYnkgbWVyY2hhbnRzIG9uYm9hcmRlZCBhcyBQYXlGYXN0IGNoYW5uZWwgcGFydG5lcnMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93RGVza3RvcF0gVXNlZCB0byBzdXBwb3J0IGRlc2t0b3AgdXNlcnMuIFdoZW4gZW5hYmxlZCwgdGhlIGRlZmF1bHQgbW9kZSBpcyB0byByZW5kZXIgYSBzY2FubmFibGUgUVItY29kZSBjdXN0b21lcnMgc2NhbiB3aXRoIHRoZWlyIHBob25lJ3MgdG8gYXBwcm92ZSB2aWEgdGhlIG1vYmlsZSBhcHAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93RGVza3RvcFdlYkxvZ2luPWZhbHNlXSBXaGVuIGB0cnVlYCwgdGhlIGN1c3RvbWVyIHdpbGwgYXV0aG9yaXplIHBheW1lbnQgdmlhIGEgd2luZG93IHBvcHVwIHRoYXQgYWxsb3dzIHRoZW0gdG8gc2lnbiBpbiB0byB0aGVpciBWZW5tbyBhY2NvdW50LiBUaGlzIGlzIHVzZWQgZXhwbGljaXRseSBmb3IgY3VzdG9tZXJzIG9wZXJhdGluZyBmcm9tIGRlc2t0b3AgYnJvd3NlcnMgd2FudGluZyB0byBhdm9pZCB0aGUgUVIgQ29kZSBmbG93LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5tb2JpbGVXZWJGYWxsQmFja10gVXNlIHRoaXMgb3B0aW9uIHdoZW4geW91IHdhbnQgdG8gdXNlIGEgd2ViLWxvZ2luIGV4cGVyaWVuY2UsIHN1Y2ggYXMgaWYgb24gbW9iaWxlIGFuZCB0aGUgVmVubW8gYXBwIGlzbid0IGluc3RhbGxlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYWxsb3dBbmRyb2lkUmVjcmVhdGlvbj10cnVlXSBUaGlzIGZsYWcgaXMgZm9yIHdoZW4geW91ciBpbnRlZ3JhdGlvbiB1c2VzIHRoZSBbQW5kcm9pZCBQb3B1cEJyaWRnZV0oaHR0cHM6Ly9naXRodWIuY29tL2JyYWludHJlZS9wb3B1cC1icmlkZ2UtYW5kcm9pZCkuIFNldHRpbmcgdGhpcyBmbGFnIHRvIGZhbHNlIHdpbGwgYXZvaWQgYSBwYWdlIHJlZnJlc2ggd2hlbiByZXR1cm5pbmcgdG8geW91ciBwYWdlIGFmdGVyIHBheW1lbnQgYXV0aG9yaXphdGlvbi4gSWYgbm90IHNwZWNpZmllZCwgaXQgZGVmYXVsdHMgdG8gdHJ1ZSBhbmQgdGhlIEFuZHJvaWQgYWN0aXZpdHkgd2lsbCBiZSByZWNyZWF0ZWQsIHJlc3VsdGluZyBpbiBhIHBhZ2UgcmVmcmVzaC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY29sbGVjdEN1c3RvbWVyQmlsbGluZ0FkZHJlc3NdIFdoZW4gYHRydWVgLCB0aGUgY3VzdG9tZXIncyBiaWxsaW5nIGFkZHJlc3Mgd2lsbCBiZSBjb2xsZWN0ZWQgYW5kIGRpc3BsYXllZCBvbiB0aGUgVmVubW8gcGF5c2hlZXQgKHByb3ZpZGVkIHRoZSBFbnJpY2hlZCBDdXN0b21lciBEYXRhIGNoZWNrYm94IGlzIGFsc28gZW5hYmxlZCBmb3IgdGhlIG1lcmNoYW50IGFjY291bnQpLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jb2xsZWN0Q3VzdG9tZXJTaGlwcGluZ0FkZHJlc3NdIFdoZW4gYHRydWVgLCB0aGUgY3VzdG9tZXIncyBzaGlwcGluZyBhZGRyZXNzIHdpbGwgYmUgY29sbGVjdGVkIGFuZCBkaXNwbGF5ZWQgb24gdGhlIFZlbm1vIHBheXNoZWV0IChwcm92aWRlZCB0aGUgRW5yaWNoZWQgQ3VzdG9tZXIgRGF0YSBjaGVja2JveCBpcyBhbHNvIGVuYWJsZWQgZm9yIHRoZSBtZXJjaGFudCBhY2NvdW50KS5cbiAqIEBwYXJhbSB7bGluZUl0ZW1bXX0gW29wdGlvbnMubGluZUl0ZW1zXSBUaGUge0BsaW5rIFZlbm1vfmxpbmVJdGVtfGxpbmUgaXRlbXN9IGJlbG9uZ2luZyB0byB0aGUgdHJhbnNhY3Rpb24uIEl0IGNhbiBpbmNsdWRlIHVwIHRvIDI0OSBsaW5lIGl0ZW1zLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnN1YlRvdGFsQW1vdW50XSBUaGUgc3VidG90YWwgYW1vdW50IG9mIHRoZSB0cmFuc2FjdGlvbiwgZXhjbHVkaW5nIHRheGVzLCBkaXNjb3VudHMsIGFuZCBzaGlwcGluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kaXNjb3VudEFtb3VudF0gVGhlIHRvdGFsIGRpc2NvdW50IGFtb3VudCBhcHBsaWVkIG9uIHRoZSB0cmFuc2FjdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zaGlwcGluZ0Ftb3VudF0gU2hpcHBpbmcgYW1vdW50IHRvIGJlIGNoYXJnZWQgZm9yIHRoZSB0cmFuc2FjdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50YXhBbW91bnRdIFRoZSB0b3RhbCB0YXggYW1vdW50IGFwcGxpZWQgdG8gdGhlIHRyYW5zYWN0aW9uLiBUaGlzIHZhbHVlIGNhbid0IGJlIG5lZ2F0aXZlIG9yIHplcm8uXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudG90YWxBbW91bnRdIFRoZSBncmFuZCB0b3RhbCBhbW91bnQgb2YgdGhlIHRyYW5zYWN0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgZmxvdyBjdXJyZW50bHkgcmVxdWlyZXMgYSBmdWxsIHBhZ2UgcmVkaXJlY3QsIHdoaWNoIG1lYW5zIHRvIHV0aWxpemUgdGhpcyBmbG93IHlvdXIgcGFnZSB3aWxsIG5lZWQgdG8gYmUgYWJsZSB0byBoYW5kbGUgdGhlIGNoZWNrb3V0IHNlc3Npb24gYWNyb3NzIGRpZmZlcmVudCBwYWdlcy5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgYGRhdGFgLCBpcyB0aGUge0BsaW5rIFZlbm1vfSBpbnN0YW5jZS4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGBjcmVhdGVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUge0BsaW5rIFZlbm1vfSBpbnN0YW5jZS5cbiAqIEBleGFtcGxlXG4gKiBicmFpbnRyZWUudmVubW8uY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZVxuICogfSkudGhlbihmdW5jdGlvbiAodmVubW9JbnN0YW5jZSkge1xuICogICAvLyB2ZW5tb0luc3RhbmNlIGlzIHJlYWR5IHRvIGJlIHVzZWQuXG4gKiB9KS5jYXRjaChmdW5jdGlvbiAoY3JlYXRlRXJyKSB7XG4gKiAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIFZlbm1vIGluc3RhbmNlJywgY3JlYXRlRXJyKTtcbiAqIH0pO1xuICogQGV4YW1wbGUgPGNhcHRpb24+QWxsb3cgZGVza3RvcCBmbG93IHRvIGJlIHVzZWQ8L2NhcHRpb24+XG4gKiBicmFpbnRyZWUudmVubW8uY3JlYXRlKHtcbiAqICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAqICAgYWxsb3dEZXNrdG9wOiB0cnVlXG4gKiB9KS50aGVuKGZ1bmN0aW9uICh2ZW5tb0luc3RhbmNlKSB7XG4gKiAgIC8vIHZlbm1vSW5zdGFuY2UgaXMgcmVhZHkgdG8gYmUgdXNlZC5cbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChjcmVhdGVFcnIpIHtcbiAqICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgVmVubW8gaW5zdGFuY2UnLCBjcmVhdGVFcnIpO1xuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgdGhlIFZlbm1vIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IFwiVmVubW9cIjtcblxuICByZXR1cm4gYmFzaWNDb21wb25lbnRWZXJpZmljYXRpb25cbiAgICAudmVyaWZ5KHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgYXV0aG9yaXphdGlvbjogb3B0aW9ucy5hdXRob3JpemF0aW9uLFxuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNyZWF0ZVByb21pc2UsIGluc3RhbmNlO1xuXG4gICAgICBpZiAob3B0aW9ucy5wcm9maWxlSWQgJiYgdHlwZW9mIG9wdGlvbnMucHJvZmlsZUlkICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlZFTk1PX0lOVkFMSURfUFJPRklMRV9JRClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBvcHRpb25zLmRlZXBMaW5rUmV0dXJuVXJsICYmXG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmRlZXBMaW5rUmV0dXJuVXJsICE9PSBcInN0cmluZ1wiXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVkVOTU9fSU5WQUxJRF9ERUVQX0xJTktfUkVUVVJOX1VSTClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY3JlYXRlUHJvbWlzZSA9IGNyZWF0ZURlZmVycmVkQ2xpZW50XG4gICAgICAgIC5jcmVhdGUoe1xuICAgICAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgICAgIGRlYnVnOiBvcHRpb25zLmRlYnVnLFxuICAgICAgICAgIGFzc2V0c1VybDogY3JlYXRlQXNzZXRzVXJsLmNyZWF0ZShvcHRpb25zLmF1dGhvcml6YXRpb24pLFxuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICB2YXIgY29uZmlndXJhdGlvbiA9IGNsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG5cbiAgICAgICAgICBvcHRpb25zLmNsaWVudCA9IGNsaWVudDtcblxuICAgICAgICAgIGlmICghY29uZmlndXJhdGlvbi5nYXRld2F5Q29uZmlndXJhdGlvbi5wYXlXaXRoVmVubW8pIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlZFTk1PX05PVF9FTkFCTEVEKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNsaWVudDtcbiAgICAgICAgfSk7XG5cbiAgICAgIG9wdGlvbnMuY3JlYXRlUHJvbWlzZSA9IGNyZWF0ZVByb21pc2U7XG4gICAgICBpbnN0YW5jZSA9IG5ldyBWZW5tbyhvcHRpb25zKTtcblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChjcmVhdGVQcm9taXNlLCBcInZlbm1vLmluaXRpYWxpemVkXCIpO1xuXG4gICAgICByZXR1cm4gY3JlYXRlUHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogQHN0YXRpY1xuICogQGZ1bmN0aW9uIGlzQnJvd3NlclN1cHBvcnRlZFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBicm93c2VyIHN1cHBvcnQgb3B0aW9uczpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYWxsb3dOZXdCcm93c2VyVGFiPXRydWVdIFRoaXMgc2hvdWxkIGJlIHNldCB0byBmYWxzZSBpZiB5b3VyIHBheW1lbnQgZmxvdyByZXF1aXJlcyByZXR1cm5pbmcgdG8gdGhlIHNhbWUgdGFiLCBlLmcuIHNpbmdsZSBwYWdlIGFwcGxpY2F0aW9ucy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYWxsb3dXZWJ2aWV3cz10cnVlXSBUaGlzIHNob3VsZCBiZSBzZXQgdG8gZmFsc2UgaWYgeW91ciBwYXltZW50IGZsb3cgZG9lcyBub3Qgb2NjdXIgZnJvbSB3aXRoaW4gYSB3ZWJ2aWV3IHRoYXQgeW91IGNvbnRyb2wuXG4gKiBAZXhhbXBsZVxuICogaWYgKGJyYWludHJlZS52ZW5tby5pc0Jyb3dzZXJTdXBwb3J0ZWQoKSkge1xuICogICAvLyBzZXQgdXAgVmVubW9cbiAqIH1cbiAqIEBleGFtcGxlIDxjYXB0aW9uPkV4cGxpY2l0bHkgcmVxdWlyZSBicm93c2VyIHN1cHBvcnQgcmV0dXJuaW5nIHRvIHRoZSBzYW1lIHRhYjwvY2FwdGlvbj5cbiAqIGlmIChicmFpbnRyZWUudmVubW8uaXNCcm93c2VyU3VwcG9ydGVkKHtcbiAqICAgYWxsb3dOZXdCcm93c2VyVGFiOiBmYWxzZVxuICogfSkpIHtcbiAqICAgLy8gc2V0IHVwIFZlbm1vXG4gKiB9XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5FeHBsaWNpdGx5IHNldCB3ZWJ2aWV3cyBhcyBkaXNhbGxvd2VkIGJyb3dzZXJzPC9jYXB0aW9uPlxuICogaWYgKGJyYWludHJlZS52ZW5tby5pc0Jyb3dzZXJTdXBwb3J0ZWQoe1xuICogICBhbGxvd1dlYnZpZXdzOiBmYWxzZVxuICogfSkpIHtcbiAqICAgLy8gc2V0IHVwIFZlbm1vXG4gKiB9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGJyb3dzZXIgc3VwcG9ydHMgVmVubW8uXG4gKi9cbmZ1bmN0aW9uIGlzQnJvd3NlclN1cHBvcnRlZChvcHRpb25zKSB7XG4gIHJldHVybiBzdXBwb3J0c1Zlbm1vLmlzQnJvd3NlclN1cHBvcnRlZChvcHRpb25zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogd3JhcFByb21pc2UoY3JlYXRlKSxcbiAgaXNCcm93c2VyU3VwcG9ydGVkOiBpc0Jyb3dzZXJTdXBwb3J0ZWQsXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgU0RLLCBpLmUuIGB7QHBrZyB2ZXJzaW9ufWAuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBWRVJTSU9OOiBWRVJTSU9OLFxufTtcblxufSx7XCIuLi9saWIvYW5hbHl0aWNzXCI6MTE5LFwiLi4vbGliL2Jhc2ljLWNvbXBvbmVudC12ZXJpZmljYXRpb25cIjoxMjIsXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vbGliL2NyZWF0ZS1hc3NldHMtdXJsXCI6MTI5LFwiLi4vbGliL2NyZWF0ZS1kZWZlcnJlZC1jbGllbnRcIjoxMzEsXCIuL3NoYXJlZC9lcnJvcnNcIjoyMTksXCIuL3NoYXJlZC9zdXBwb3J0cy12ZW5tb1wiOjIyMixcIi4vdmVubW9cIjoyMjQsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMjE3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNBbmRyb2lkID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24vaXMtYW5kcm9pZFwiKTtcbnZhciBpc0Nocm9tZSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWNocm9tZVwiKTtcbnZhciBpc0lvcyA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWlvc1wiKTtcbnZhciBpc0lvc1NhZmFyaSA9IF9kZXJlcV8oXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWlvcy1zYWZhcmlcIik7XG52YXIgaXNJb3NXZWJ2aWV3ID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24vaXMtaW9zLXdlYnZpZXdcIik7XG52YXIgaXNTYW1zdW5nID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24vaXMtc2Ftc3VuZ1wiKTtcblxuZnVuY3Rpb24gaXNBbmRyb2lkV2VidmlldygpIHtcbiAgcmV0dXJuIChcbiAgICBpc0FuZHJvaWQoKSAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJ3dlwiKSA+IC0xXG4gICk7XG59XG5cbmZ1bmN0aW9uIGRvZXNOb3RTdXBwb3J0V2luZG93T3BlbkluSW9zKCkge1xuICBpZiAoIWlzSW9zKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNJb3NXZWJ2aWV3KCkgfHwgIWlzSW9zU2FmYXJpKCk7XG59XG5cbmZ1bmN0aW9uIGlzRmFjZWJvb2tPd25lZEJyb3dzZXJPbkFuZHJvaWQoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gSHVhd2VpJ3MgRmFjZWJvb2sgdXNlcmFnZW50IGRvZXMgbm90IGluY2x1ZGUgQW5kcm9pZFxuICBpZiAodWEuaW5kZXhPZihcImh1YXdlaVwiKSA+IC0xICYmIHVhLmluZGV4T2YoXCJmYmFuXCIpID4gLTEpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghaXNBbmRyb2lkKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdWEuaW5kZXhPZihcImZiX2lhYlwiKSA+IC0xIHx8IHVhLmluZGV4T2YoXCJpbnN0YWdyYW1cIikgPiAtMTtcbn1cblxuZnVuY3Rpb24gaXNJb3NDaHJvbWUoKSB7XG4gIHJldHVybiBpc0lvcygpICYmIGlzQ2hyb21lKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FuZHJvaWQ6IGlzQW5kcm9pZCxcbiAgaXNBbmRyb2lkV2VidmlldzogaXNBbmRyb2lkV2VidmlldyxcbiAgaXNDaHJvbWU6IGlzQ2hyb21lLFxuICBpc0lvczogaXNJb3MsXG4gIGlzSW9zQ2hyb21lOiBpc0lvc0Nocm9tZSxcbiAgaXNTYW1zdW5nOiBpc1NhbXN1bmcsXG4gIGlzSW9zU2FmYXJpOiBpc0lvc1NhZmFyaSxcbiAgaXNJb3NXZWJ2aWV3OiBpc0lvc1dlYnZpZXcsXG4gIGlzRmFjZWJvb2tPd25lZEJyb3dzZXJPbkFuZHJvaWQ6IGlzRmFjZWJvb2tPd25lZEJyb3dzZXJPbkFuZHJvaWQsXG4gIGRvZXNOb3RTdXBwb3J0V2luZG93T3BlbkluSW9zOiBkb2VzTm90U3VwcG9ydFdpbmRvd09wZW5Jbklvcyxcbn07XG5cbn0se1wiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1hbmRyb2lkXCI6MjIsXCJAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uL2lzLWNocm9tZVwiOjI0LFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1pb3NcIjozMCxcIkBicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24vaXMtaW9zLXNhZmFyaVwiOjI3LFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1pb3Mtd2Vidmlld1wiOjI4LFwiQGJyYWludHJlZS9icm93c2VyLWRldGVjdGlvbi9pcy1zYW1zdW5nXCI6MzF9XSwyMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVmVubW8gc2hhcmVkIGNvbnN0YW50c1xuICogQHR5cGVkZWYge29iamVjdH0gVmVubW9+dmVubW9Db25zdGFudHNcbiAqIEBpZ25vcmVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBWRU5NT19BUFBfT1JfTU9CSUxFX0FVVEhfVVJMIEEgZGVlcC1saW5rZWQgdXJsIHRoYXQgd2lsbCBvcGVuIHRoZSBWZW5tbyBhcHAgaWYgaW5zdGFsbGVkLCBvciBuYXZpZ2F0ZSB0byBhIFZlbm1vIHdlYi1sb2dpbiBleHBlcmllbmNlIGlmIHRoZSBWZW5tbyBhcHAgaXMgbm90IHByZXNlbnQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gVkVOTU9fTU9CSUxFX0FQUF9BVVRIX09OTFlfVVJMIEEgZGVlcC1saW5rZWQgdXJsIHRoYXQgbGVhZHMgdG8gYSBWZW5tbyBkZWFkLWVuZCBwYWdlIGlmIHRoZSBWZW5tbyBhcHAgaXMgbm90IGluc3RhbGxlZCAocGFnZSBhc2tzIGN1c3RvbWVyIHRvIGRvd25sb2FkIHRoZSBhcHApLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFZFTk1PX1dFQl9MT0dJTl9VUkwgQSBub24tZGVlcGxpbmtlZCB1cmwgdGhhdCBsZWFkcyB0byBhIFZlbm1vIGxvZ2luIHBhZ2UuIEZvciB1c2Ugd2hlbiBleHBsaWNpdGx5IHdhbnRpbmcgdG8gYXZvaWQgdXNpbmcgdGhlIFZlbm1vIG1vYmlsZSBhcHAgdmlhIGEgZGVlcC1saW5rZWQgdXJsLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRE9DVU1FTlRfVklTSUJJTElUWV9DSEFOR0VfRVZFTlRfREVMQVk6IDUwMCxcbiAgREVGQVVMVF9QUk9DRVNTX1JFU1VMVFNfREVMQVk6IDEwMDAsXG4gIFZFTk1PX0FQUF9PUl9NT0JJTEVfQVVUSF9VUkw6IFwiaHR0cHM6Ly92ZW5tby5jb20vZ28vY2hlY2tvdXRcIixcbiAgVkVOTU9fTU9CSUxFX0FQUF9BVVRIX09OTFlfVVJMOiBcImh0dHBzOi8vdmVubW8uY29tL2JyYWludHJlZS9jaGVja291dFwiLFxuICBWRU5NT19XRUJfTE9HSU5fVVJMOiBcImh0dHBzOi8vYWNjb3VudC52ZW5tby5jb20vZ28vd2ViXCIsXG59O1xuXG59LHt9XSwyMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuVmVubW8gLSBDcmVhdGlvbiBFcnJvciBDb2Rlc1xuICogQGRlc2NyaXB0aW9uIEVycm9ycyB0aGF0IG9jY3VyIHdoZW4gW2NyZWF0aW5nIHRoZSBWZW5tbyBjb21wb25lbnRdKC4vbW9kdWxlLWJyYWludHJlZS13ZWJfdmVubW8uaHRtbCMuY3JlYXRlKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFZFTk1PX05PVF9FTkFCTEVEIE9jY3VycyB3aGVuIFZlbm1vIGlzIG5vdCBlbmFibGVkIG9uIHRoZSBCcmFpbnRyZWUgY29udHJvbCBwYW5lbC5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFZFTk1PX0lOVkFMSURfUFJPRklMRV9JRCBPY2N1cnMgd2hlbiBWZW5tbyBpcyBpbml0aWFsaXplZCB3aXRoIGEgcHJvZmlsZSBpZCwgYnV0IGl0IGlzIGludmFsaWQuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFZFTk1PX01PQklMRV9QT0xMSU5HX1NFVFVQX0ZBSUxFRCBfX0RlcHJlY2F0ZWRfXyBObyBsb25nZXIgcmV0dXJuZWQuIFVzZSBgVkVOTU9fTU9CSUxFX1BBWU1FTlRfQ09OVEVYVF9TRVRVUF9GQUlMRURgIGluc3RlYWQuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFZFTk1PX01PQklMRV9QQVlNRU5UX0NPTlRFWFRfU0VUVVBfRkFJTEVEIE9jY3VycyB3aGVuIHRoZSByZXF1ZXN0IHRvIHNldCB1cCBhIFZlbm1vIFBheW1lbnQgQ29udGV4dCBvYmplY3QgZmFpbHMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5WZW5tbyAtIHRva2VuaXplIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiB1c2luZyB0aGUgW2B0b2tlbml6ZWAgbWV0aG9kXSguL1Zlbm1vLmh0bWwjdG9rZW5pemUpLlxuICogQHByb3BlcnR5IHtDVVNUT01FUn0gVkVOTU9fQVBQX0NBTkNFTEVEIE9jY3VycyB3aGVuIGN1c3RvbWVyIGNhbmNlbHMgZmxvdyBmcm9tIHRoZSBWZW5tbyBhcHAuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFZFTk1PX0FQUF9GQUlMRUQgT2NjdXJzIHdoZW4gdG9rZW5pemF0aW9uIGZhaWxzLlxuICogQHByb3BlcnR5IHtDVVNUT01FUn0gVkVOTU9fQ0FOQ0VMRUQgT2NjdXJzIHdoZW4gY3VzdG9tZXIgY2FuY2VscyB0aGUgZmxvdyBvciBWZW5tbyBhcHAgaXMgbm90IGF2YWlsYWJsZS5cbiAqIEBwcm9wZXJ0eSB7Q1VTVE9NRVJ9IFZFTk1PX0NVU1RPTUVSX0NBTkNFTEVEIE9jY3VycyB3aGVuIGN1c3RvbWVyIGNhbmNlbHMgdGhlIGZsb3cuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBWRU5NT19ERVNLVE9QX0NBTkNFTEVEIE9jY3VycyB3aGVuIGN1c3RvbWVyIGNhbmNlbHMgdGhlIFZlbm1vIERlc2t0b3AgZmxvdyBieSBjbG9zaW5nIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7VU5LTk9XTn0gVkVOTU9fREVTS1RPUF9VTktOT1dOX0VSUk9SIE9jY3VycyB3aGVuIGFuIHVua25vd24gZXJyb3IgY2F1c2VzIHRoZSBWZW5tbyBEZXNrdG9wIGZsb3cgdG8gZmFpbC5cbiAqIEBwcm9wZXJ0eSB7VU5LTk9XTn0gVkVOTU9fTU9CSUxFX1BPTExJTkdfVE9LRU5JWkFUSU9OX05FVFdPUktfRVJST1IgT2NjdXJzIHdoZW4gYW4gdW5rbm93biBuZXR3b3JrIGVycm9yIGNhdXNlcyB0aGUgbW9iaWxlIHBvbGxpbmcgcHJvY2VzcyB0byBmYWlsLlxuICogQHByb3BlcnR5IHtDVVNUT01FUn0gVkVOTU9fTU9CSUxFX1BPTExJTkdfVE9LRU5JWkFUSU9OX0VYUElSRUQgT2NjdXJzIHdoZW4gdGhlIHBvbGxpbmcgaGFzIGV4cGlyZWQgYW5kIHRoZSBwYXltZW50IGNhbm5vdCBiZSBjb21wbGV0ZWQuXG4gKiBAcHJvcGVydHkge0NVU1RPTUVSfSBWRU5NT19NT0JJTEVfUE9MTElOR19UT0tFTklaQVRJT05fQ0FOQ0VMRUQgT2NjdXJzIHdoZW4gdGhlIHBvbGxpbmcgb3BlcmF0aW9uIGlzIGNhbmNlbGVkIGJ5IHRoZSBjdXN0b21lci5cbiAqIEBwcm9wZXJ0eSB7Q1VTVE9NRVJ9IFZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9USU1FT1VUIE9jY3VycyB3aGVuIGN1c3RvbWVyIHRha2VzIHRvbyBsb25nIHRvIGNvbXBsZXRlIHBheW1lbnQuXG4gKiBAcHJvcGVydHkge1VOS05PV059IFZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9GQUlMRUQgT2NjdXJzIGlmIHRoZXJlIGlzIGFuIHVua25vd24gZXJyb3IgZHVyaW5nIHRoZSBtb2JpbGUgcG9sbGluZyBwcm9jZXNzLlxuICogQHByb3BlcnR5IHtORVRXT1JLfSBWRU5NT19ORVRXT1JLX0VSUk9SIE9jY3VycyB3aGVuIGEgbmV0d29yayBlcnJvciBjYXVzZXMgYSByZXF1ZXN0IHRvIGZhaWwuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBWRU5NT19UT0tFTklaQVRJT05fQ0FOQ0VMRURfQllfTUVSQ0hBTlQgT2NjdXJzIHdoZW4gYGNhbmNlbFRva2VuaXphdGlvbmAgaXMgY2FsbGVkIHdoaWxlIHRva2VuaXphdGlvbiBpcyBpbiBwcm9ncmVzcy5cbiAqIEBwcm9wZXJ0eSB7VU5LTk9XTn0gVkVOTU9fVE9LRU5JWkFUSU9OX0ZBSUxFRCBPY2N1cnMgd2hlbiB0aGVyZSBpcyBhbiB1bmtub3duIGVycm9yIGR1cmluZyB0aGUgd2ViIGxvZ2luIGV4cGVyaWVuY2UuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBWRU5NT19UT0tFTklaQVRJT05fUkVRVUVTVF9BQ1RJVkUgT2NjdXJzIHdoZW4gYHRva2VuaXplYCBpcyBjYWxsZWQgd2hlbiB0aGUgZmxvdyBpcyBhbHJlYWR5IGluIHByb2dyZXNzLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gVkVOTU9fVE9LRU5JWkFUSU9OX1JFUVVFU1RfTk9UX0FDVElWRSBPY2N1cnMgd2hlbiBgY2FuY2VsVG9rZW5pemF0aW9uYCBpcyBjYWxsZWQgd2hlbiB0aGUgZmxvdyBpcyBub3QgaW4gcHJvZ3Jlc3MuXG4gKiBAcHJvcGVydHkge01FUkNIQU5UfSBWRU5NT19FQ0RfRElTQUJMRUQgT2NjdXJzIHdoZW4gdGhlIG1lcmNoYW50IHRyaWVzIHRvIGFjY2VzcyBjdXN0b21lciBkZXRhaWxzIHdpdGhvdXQgZW5hYmxpbmcgRW5yaWNoZWQgQ3VzdG9tZXIgRGF0YS5cbiAqL1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFZFTk1PX05PVF9FTkFCTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJWRU5NT19OT1RfRU5BQkxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiVmVubW8gaXMgbm90IGVuYWJsZWQgZm9yIHRoaXMgbWVyY2hhbnQuXCIsXG4gIH0sXG4gIFZFTk1PX1RPS0VOSVpBVElPTl9SRVFVRVNUX0FDVElWRToge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVkVOTU9fVE9LRU5JWkFUSU9OX1JFUVVFU1RfQUNUSVZFXCIsXG4gICAgbWVzc2FnZTogXCJBbm90aGVyIHRva2VuaXphdGlvbiByZXF1ZXN0IGlzIGFjdGl2ZS5cIixcbiAgfSxcbiAgVkVOTU9fVE9LRU5JWkFUSU9OX1JFUVVFU1RfTk9UX0FDVElWRToge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVkVOTU9fVE9LRU5JWkFUSU9OX1JFUVVFU1RfTk9UX0FDVElWRVwiLFxuICAgIG1lc3NhZ2U6IFwiTm8gdG9rZW5pemF0aW9uIGluIHByb2dyZXNzLlwiLFxuICB9LFxuICBWRU5NT19BUFBfRkFJTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuVU5LTk9XTixcbiAgICBjb2RlOiBcIlZFTk1PX0FQUF9GQUlMRURcIixcbiAgICBtZXNzYWdlOiBcIlZlbm1vIGFwcCBlbmNvdW50ZXJlZCBhIHByb2JsZW0uXCIsXG4gIH0sXG4gIFZFTk1PX0FQUF9DQU5DRUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLkNVU1RPTUVSLFxuICAgIGNvZGU6IFwiVkVOTU9fQVBQX0NBTkNFTEVEXCIsXG4gICAgbWVzc2FnZTogXCJWZW5tbyBhcHAgYXV0aG9yaXphdGlvbiB3YXMgY2FuY2VsZWQuXCIsXG4gIH0sXG4gIFZFTk1PX0NBTkNFTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuQ1VTVE9NRVIsXG4gICAgY29kZTogXCJWRU5NT19DQU5DRUxFRFwiLFxuICAgIG1lc3NhZ2U6XG4gICAgICBcIlVzZXIgY2FuY2VsZWQgVmVubW8gYXV0aG9yaXphdGlvbiwgb3IgVmVubW8gYXBwIGlzIG5vdCBhdmFpbGFibGUuXCIsXG4gIH0sXG4gIFZFTk1PX0NVU1RPTUVSX0NBTkNFTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuQ1VTVE9NRVIsXG4gICAgY29kZTogXCJWRU5NT19DVVNUT01FUl9DQU5DRUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiVXNlciBjYW5jZWxlZCBWZW5tbyBhdXRob3JpemF0aW9uLlwiLFxuICB9LFxuICBWRU5NT19ORVRXT1JLX0VSUk9SOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTkVUV09SSyxcbiAgICBjb2RlOiBcIlZFTk1PX05FVFdPUktfRVJST1JcIixcbiAgICBtZXNzYWdlOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIG1ha2luZyB0aGUgcmVxdWVzdFwiLFxuICB9LFxuICBWRU5NT19ERVNLVE9QX0NBTkNFTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuQ1VTVE9NRVIsXG4gICAgY29kZTogXCJWRU5NT19ERVNLVE9QX0NBTkNFTEVEXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiVXNlciBjYW5jZWxlZCBWZW5tbyBhdXRob3JpemF0aW9uIGJ5IGNsb3NpbmcgdGhlIFZlbm1vIERlc2t0b3AgbW9kYWwuXCIsXG4gIH0sXG4gIFZFTk1PX1RPS0VOSVpBVElPTl9DQU5DRUxFRF9CWV9NRVJDSEFOVDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVkVOTU9fVE9LRU5JWkFUSU9OX0NBTkNFTEVEX0JZX01FUkNIQU5UXCIsXG4gICAgbWVzc2FnZTogXCJUaGUgVmVubW8gdG9rZW5pemF0aW9uIHdhcyBjYW5jZWxlZCBieSB0aGUgbWVyY2hhbnQuXCIsXG4gIH0sXG4gIFZFTk1PX0RFU0tUT1BfVU5LTk9XTl9FUlJPUjoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLlVOS05PV04sXG4gICAgY29kZTogXCJWRU5NT19ERVNLVE9QX1VOS05PV05fRVJST1JcIixcbiAgICBtZXNzYWdlOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggdGhlIFZlbm1vIERlc2t0b3AgZmxvdy5cIixcbiAgfSxcbiAgVkVOTU9fTU9CSUxFX1BBWU1FTlRfQ09OVEVYVF9TRVRVUF9GQUlMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5ORVRXT1JLLFxuICAgIGNvZGU6IFwiVkVOTU9fTU9CSUxFX1BBWU1FTlRfQ09OVEVYVF9TRVRVUF9GQUlMRURcIixcbiAgICBtZXNzYWdlOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIGNyZWF0aW5nIHRoZSBWZW5tbyBQYXltZW50IENvbnRleHQuXCIsXG4gIH0sXG4gIFZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9ORVRXT1JLX0VSUk9SOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuVU5LTk9XTixcbiAgICBjb2RlOiBcIlZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9ORVRXT1JLX0VSUk9SXCIsXG4gICAgbWVzc2FnZTogXCJTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgbW9iaWxlIHBvbGxpbmcuXCIsXG4gIH0sXG4gIFZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9FWFBJUkVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuQ1VTVE9NRVIsXG4gICAgY29kZTogXCJWRU5NT19NT0JJTEVfUE9MTElOR19UT0tFTklaQVRJT05fRVhQSVJFRFwiLFxuICAgIG1lc3NhZ2U6IFwiVGhlIFZlbm1vIGF1dGhvcml6YXRpb24gcmVxdWVzdCBpcyBleHBpcmVkLlwiLFxuICB9LFxuICBWRU5NT19NT0JJTEVfUE9MTElOR19UT0tFTklaQVRJT05fQ0FOQ0VMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5DVVNUT01FUixcbiAgICBjb2RlOiBcIlZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9DQU5DRUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiVGhlIFZlbm1vIGF1dGhvcml6YXRpb24gd2FzIGNhbmNlbGVkXCIsXG4gIH0sXG4gIFZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9USU1FT1VUOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuQ1VTVE9NRVIsXG4gICAgY29kZTogXCJWRU5NT19NT0JJTEVfUE9MTElOR19UT0tFTklaQVRJT05fVElNRU9VVFwiLFxuICAgIG1lc3NhZ2U6IFwiQ3VzdG9tZXIgdG9vayB0b28gbG9uZyB0byBhdXRob3JpemUgVmVubW8gcGF5bWVudC5cIixcbiAgfSxcbiAgVkVOTU9fTU9CSUxFX1BPTExJTkdfVE9LRU5JWkFUSU9OX0ZBSUxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLlVOS05PV04sXG4gICAgY29kZTogXCJWRU5NT19NT0JJTEVfUE9MTElOR19UT0tFTklaQVRJT05fRkFJTEVEXCIsXG4gICAgbWVzc2FnZTogXCJUaGUgVmVubW8gYXV0aG9yaXphdGlvbiBmYWlsZWQuXCIsXG4gIH0sXG4gIFZFTk1PX0lOVkFMSURfUFJPRklMRV9JRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVkVOTU9fSU5WQUxJRF9QUk9GSUxFX0lEXCIsXG4gICAgbWVzc2FnZTogXCJWZW5tbyBwcm9maWxlIElEIGlzIGludmFsaWQuXCIsXG4gIH0sXG4gIFZFTk1PX0lOVkFMSURfREVFUF9MSU5LX1JFVFVSTl9VUkw6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5NRVJDSEFOVCxcbiAgICBjb2RlOiBcIlZFTk1PX0lOVkFMSURfREVFUF9MSU5LX1JFVFVSTl9VUkxcIixcbiAgICBtZXNzYWdlOiBcIlZlbm1vIGRlZXAgbGluayByZXR1cm4gVVJMIGlzIGludmFsaWQuXCIsXG4gIH0sXG4gIFZFTk1PX1RPS0VOSVpBVElPTl9GQUlMRUQ6IHtcbiAgICB0eXBlOiBCcmFpbnRyZWVFcnJvci50eXBlcy5VTktOT1dOLFxuICAgIGNvZGU6IFwiVkVOTU9fVE9LRU5JWkFUSU9OX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiVmVubW8gZW5jb3VudGVyZWQgYSBwcm9ibGVtXCIsXG4gIH0sXG4gIFZFTk1PX0VDRF9ESVNBQkxFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiRUNEX0RJU0FCTEVEXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiQ2Fubm90IGNvbGxlY3QgY3VzdG9tZXIgZGF0YSB3aGVuIEVDRCBpcyBkaXNhYmxlZC4gRW5hYmxlIHRoaXMgZmVhdHVyZSBpbiB0aGUgQ29udHJvbCBQYW5lbCB0byBjb2xsZWN0IHRoaXMgZGF0YS5cIixcbiAgfSxcbn07XG5cbn0se1wiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNH1dLDIyMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVkVOTU9fREVTS1RPUF9VTktOT1dOX0VSUk9SID1cbiAgZXhwb3J0cy5WRU5NT19ERVNLVE9QX1JFUVVFU1RfTkVXX1FSX0NPREUgPVxuICBleHBvcnRzLlZFTk1PX0RFU0tUT1BfQ0xPU0VEX0ZST01fUEFSRU5UID1cbiAgZXhwb3J0cy5WRU5NT19ERVNLVE9QX0lGUkFNRV9SRUFEWSA9XG4gIGV4cG9ydHMuVkVOTU9fREVTS1RPUF9ESVNQTEFZX1FSX0NPREUgPVxuICBleHBvcnRzLlZFTk1PX0RFU0tUT1BfRElTUExBWV9FUlJPUiA9XG4gIGV4cG9ydHMuVkVOTU9fREVTS1RPUF9DVVNUT01FUl9DQU5DRUxFRCA9XG4gIGV4cG9ydHMuVkVOTU9fREVTS1RPUF9BVVRIT1JJWklORyA9XG4gIGV4cG9ydHMuVkVOTU9fREVTS1RPUF9BVVRIT1JJWkUgPVxuICBleHBvcnRzLlZFTk1PX0RFU0tUT1BfQVVUSE9SSVpBVElPTl9USU1FRF9PVVQgPVxuICAgIHZvaWQgMDtcbmV4cG9ydHMuVkVOTU9fREVTS1RPUF9BVVRIT1JJWkFUSU9OX1RJTUVEX09VVCA9XG4gIFwiVkVOTU9fREVTS1RPUF9BVVRIT1JJWkFUSU9OX1RJTUVEX09VVFwiO1xuZXhwb3J0cy5WRU5NT19ERVNLVE9QX0FVVEhPUklaRSA9IFwiVkVOTU9fREVTS1RPUF9BVVRIT1JJWkVcIjtcbmV4cG9ydHMuVkVOTU9fREVTS1RPUF9BVVRIT1JJWklORyA9IFwiVkVOTU9fREVTS1RPUF9BVVRIT1JJWklOR1wiO1xuZXhwb3J0cy5WRU5NT19ERVNLVE9QX0NVU1RPTUVSX0NBTkNFTEVEID0gXCJWRU5NT19ERVNLVE9QX0NVU1RPTUVSX0NBTkNFTEVEXCI7XG5leHBvcnRzLlZFTk1PX0RFU0tUT1BfRElTUExBWV9FUlJPUiA9IFwiVkVOTU9fREVTS1RPUF9ESVNQTEFZX0VSUk9SXCI7XG5leHBvcnRzLlZFTk1PX0RFU0tUT1BfRElTUExBWV9RUl9DT0RFID0gXCJWRU5NT19ERVNLVE9QX0RJU1BMQVlfUVJfQ09ERVwiO1xuZXhwb3J0cy5WRU5NT19ERVNLVE9QX0lGUkFNRV9SRUFEWSA9IFwiVkVOTU9fREVTS1RPUF9JRlJBTUVfUkVBRFlcIjtcbmV4cG9ydHMuVkVOTU9fREVTS1RPUF9DTE9TRURfRlJPTV9QQVJFTlQgPSBcIlZFTk1PX0RFU0tUT1BfQ0xPU0VEX0ZST01fUEFSRU5UXCI7XG5leHBvcnRzLlZFTk1PX0RFU0tUT1BfUkVRVUVTVF9ORVdfUVJfQ09ERSA9IFwiVkVOTU9fREVTS1RPUF9SRVFVRVNUX05FV19RUl9DT0RFXCI7XG5leHBvcnRzLlZFTk1PX0RFU0tUT1BfVU5LTk9XTl9FUlJPUiA9IFwiVkVOTU9fREVTS1RPUF9VTktOT1dOX0VSUk9SXCI7XG5cbn0se31dLDIyMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciB2ZW5tb0NvbnN0YW50cyA9IF9kZXJlcV8oXCIuL2NvbnN0YW50c1wiKTtcblxuZnVuY3Rpb24gZ2V0VmVubW9Vcmwob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy51c2VBbGxvd0Rlc2t0b3BXZWJMb2dpbilcbiAgICByZXR1cm4gdmVubW9Db25zdGFudHMuVkVOTU9fV0VCX0xPR0lOX1VSTDtcblxuICBpZiAob3B0aW9ucy5tb2JpbGVXZWJGYWxsQmFjaylcbiAgICByZXR1cm4gdmVubW9Db25zdGFudHMuVkVOTU9fQVBQX09SX01PQklMRV9BVVRIX1VSTDtcblxuICByZXR1cm4gdmVubW9Db25zdGFudHMuVkVOTU9fTU9CSUxFX0FQUF9BVVRIX09OTFlfVVJMO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZlbm1vVXJsO1xuXG59LHtcIi4vY29uc3RhbnRzXCI6MjE4fV0sMjIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgYnJvd3NlckRldGVjdGlvbiA9IF9kZXJlcV8oXCIuL2Jyb3dzZXItZGV0ZWN0aW9uXCIpO1xudmFyIGluSWZyYW1lID0gX2RlcmVxXyhcIi4uLy4uL2xpYi9pbi1pZnJhbWVcIik7XG5cbmZ1bmN0aW9uIGlzQnJvd3NlclN1cHBvcnRlZChvcHRpb25zKSB7XG4gIHZhciBpc0tub3duVW5zdXBwb3J0ZWRNb2JpbGVCcm93c2VyLFxuICAgIG1lcmNoYW50QWxsb3dzRGVza3RvcEJyb3dzZXJzLFxuICAgIG1lcmNoYW50QWxsb3dzSW9zQ2hyb21lLFxuICAgIG1lcmNoYW50QWxsb3dzUmV0dXJuaW5nVG9OZXdCcm93c2VyVGFiLFxuICAgIG1lcmNoYW50QWxsb3dzV2Vidmlld3M7XG4gIHZhciBpc0FuZHJvaWQgPSBicm93c2VyRGV0ZWN0aW9uLmlzQW5kcm9pZCgpO1xuICB2YXIgaXNNb2JpbGVEZXZpY2UgPSBpc0FuZHJvaWQgfHwgYnJvd3NlckRldGVjdGlvbi5pc0lvcygpO1xuICB2YXIgaXNBbmRyb2lkQ2hyb21lID0gaXNBbmRyb2lkICYmIGJyb3dzZXJEZXRlY3Rpb24uaXNDaHJvbWUoKTtcbiAgdmFyIGlzTW9iaWxlRGV2aWNlVGhhdFN1cHBvcnRzUmV0dXJuVG9TYW1lVGFiID1cbiAgICBicm93c2VyRGV0ZWN0aW9uLmlzSW9zU2FmYXJpKCkgfHwgaXNBbmRyb2lkQ2hyb21lO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAvLyBORVhUX01BSk9SX1ZFUlNJT04gYWxsb3dEZXNrdG9wIHdpbGwgZGVmYXVsdCB0byB0cnVlLCBidXQgY2FuIGJlIG9wdGVkIG91dFxuICBtZXJjaGFudEFsbG93c0Rlc2t0b3BCcm93c2VycyA9XG4gICAgKG9wdGlvbnMuYWxsb3dEZXNrdG9wV2ViTG9naW4gfHwgb3B0aW9ucy5hbGxvd0Rlc2t0b3ApID09PSB0cnVlO1xuICBtZXJjaGFudEFsbG93c1JldHVybmluZ1RvTmV3QnJvd3NlclRhYiA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoXG4gICAgXCJhbGxvd05ld0Jyb3dzZXJUYWJcIlxuICApXG4gICAgPyBvcHRpb25zLmFsbG93TmV3QnJvd3NlclRhYlxuICAgIDogdHJ1ZTtcbiAgLy8gTkVYVF9NQUpPUl9WRVJTSU9OIHdlYnZpZXdzIGFyZSBub3Qgc3VwcG9ydGVkLCBleGNlcHQgZm9yIHRoZSBjYXNlIHdoZXJlXG4gIC8vIHRoZSBtZXJjaGFudCB0aGVtc2VsdmVzIGlzIHByZXNlbnRpbmcgdmVubW8gaW4gYSB3ZWJ2aWV3IHVzaW5nIHRoZSBkZWVwXG4gIC8vIGxpbmsgdXJsIHRvIGdldCBiYWNrIHRvIHRoZWlyIGFwcC4gRm9yIHRoZSBuZXh0IG1ham9yIHZlcnNpb24sIHdlIHNob3VsZFxuICAvLyBqdXN0IG5vdCBoYXZlIHRoaXMgb3B0aW9uIGFuZCBpbnN0ZWFkIHJlcXVpcmUgdGhlIG1lcmNoYW50IHRvIGRldGVybWluZVxuICAvLyBpZiB0aGUgdmVubW8gYnV0dG9uIHNob3VsZCBiZSBkaXNwbGF5ZWQgd2hlbiBwcmVzZW50aW5nIGl0IGluIHRoZVxuICAvLyBtZXJjaGFudCdzIGFwcCB2aWEgYSB3ZWJ2aWV3LlxuICBtZXJjaGFudEFsbG93c1dlYnZpZXdzID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcImFsbG93V2Vidmlld3NcIilcbiAgICA/IG9wdGlvbnMuYWxsb3dXZWJ2aWV3c1xuICAgIDogdHJ1ZTtcbiAgLy8gVmVubW8gb25seSB3b3JrcyBvbiBpT1MgQ2hyb21lIHdoZW4gdGhlXG4gIC8vIGJ1dHRvbiBpcyBub3QgcmVuZGVyZWQgaW4gYW4gaUZyYW1lIGFuZFxuICAvLyBhbGxvd05ld0Jyb3dzZXJUYWIgaXMgc2V0IHRvIHRydWVcbiAgbWVyY2hhbnRBbGxvd3NJb3NDaHJvbWUgPVxuICAgIG1lcmNoYW50QWxsb3dzUmV0dXJuaW5nVG9OZXdCcm93c2VyVGFiICYmICFpbklmcmFtZSgpO1xuXG4gIGlzS25vd25VbnN1cHBvcnRlZE1vYmlsZUJyb3dzZXIgPVxuICAgICghbWVyY2hhbnRBbGxvd3NJb3NDaHJvbWUgJiYgYnJvd3NlckRldGVjdGlvbi5pc0lvc0Nocm9tZSgpKSB8fFxuICAgIGJyb3dzZXJEZXRlY3Rpb24uaXNGYWNlYm9va093bmVkQnJvd3Nlck9uQW5kcm9pZCgpIHx8XG4gICAgYnJvd3NlckRldGVjdGlvbi5pc1NhbXN1bmcoKTtcblxuICBpZiAoaXNLbm93blVuc3VwcG9ydGVkTW9iaWxlQnJvd3Nlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChcbiAgICAhbWVyY2hhbnRBbGxvd3NXZWJ2aWV3cyAmJlxuICAgIChicm93c2VyRGV0ZWN0aW9uLmlzQW5kcm9pZFdlYnZpZXcoKSB8fCBicm93c2VyRGV0ZWN0aW9uLmlzSW9zV2VidmlldygpKVxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIWlzTW9iaWxlRGV2aWNlKSB7XG4gICAgcmV0dXJuIG1lcmNoYW50QWxsb3dzRGVza3RvcEJyb3dzZXJzO1xuICB9XG5cbiAgaWYgKCFtZXJjaGFudEFsbG93c1JldHVybmluZ1RvTmV3QnJvd3NlclRhYikge1xuICAgIHJldHVybiBpc01vYmlsZURldmljZVRoYXRTdXBwb3J0c1JldHVyblRvU2FtZVRhYjtcbiAgfVxuXG4gIHJldHVybiBpc01vYmlsZURldmljZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQnJvd3NlclN1cHBvcnRlZDogaXNCcm93c2VyU3VwcG9ydGVkLFxufTtcblxufSx7XCIuLi8uLi9saWIvaW4taWZyYW1lXCI6MTUwLFwiLi9icm93c2VyLWRldGVjdGlvblwiOjIxN31dLDIyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZyYW1lU2VydmljZSA9IF9kZXJlcV8oXCIuLi8uLi9saWIvZnJhbWUtc2VydmljZS9leHRlcm5hbFwiKTtcbnZhciB1c2VNaW4gPSBfZGVyZXFfKFwiLi4vLi4vbGliL3VzZS1taW5cIik7XG52YXIgRXh0ZW5kZWRQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvZXh0ZW5kZWQtcHJvbWlzZVwiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi4vc2hhcmVkL2Vycm9yc1wiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi8uLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xuXG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xudmFyIFZFTk1PX0xPR09fU1ZHID1cbiAgJzxzdmcgd2lkdGg9XCIxOThcIiBoZWlnaHQ9XCI1OFwiIHZpZXdCb3g9XCIwIDAgMTk4IDU4XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XFxuICA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNNDMuMDcwMiAxMy42NTcyQzQ0LjE5MzUgMTUuNDU4NSA0NC42OTk5IDE3LjMxMzkgNDQuNjk5OSAxOS42NTc2QzQ0LjY5OTkgMjcuMTMyOCAzOC4xMjc3IDM2Ljg0MzYgMzIuNzkzNSA0My42NjI1SDIwLjYwOTlMMTUuNzIzNiAxNS4yOTM5TDI2LjM5MTcgMTQuMzEwNUwyOC45NzUxIDM0LjQ5NjZDMzEuMzg5IDMwLjY3ODMgMzQuMzY3OCAyNC42Nzc5IDM0LjM2NzggMjAuNTg3QzM0LjM2NzggMTguMzQ3NyAzMy45NzI3IDE2LjgyMjUgMzMuMzU1MyAxNS41NjY2TDQzLjA3MDIgMTMuNjU3MlpcIiBmaWxsPVwid2hpdGVcIi8+XFxuICA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNNTYuODk2NSAyNi4xNDkxQzU4Ljg1OTYgMjYuMTQ5MSA2My44MDE4IDI1LjI3NzIgNjMuODAxOCAyMi41NDk5QzYzLjgwMTggMjEuMjQwMiA2Mi44NDgxIDIwLjU4NyA2MS43MjQyIDIwLjU4N0M1OS43NTc5IDIwLjU4NyA1Ny4xNzc2IDIyLjg3NjMgNTYuODk2NSAyNi4xNDkxWk01Ni42NzE1IDMxLjU1MDZDNTYuNjcxNSAzNC44ODA3IDU4LjU3ODcgMzYuMTg3MyA2MS4xMDcgMzYuMTg3M0M2My44NjAzIDM2LjE4NzMgNjYuNDk2NiAzNS41MzQgNjkuOTIzIDMzLjg0MzNMNjguNjMyNCA0Mi4zNTIzQzY2LjIxODMgNDMuNDk3NiA2Mi40NTU5IDQ0LjI2MTcgNTguODAzOSA0NC4yNjE3QzQ5LjU0MDMgNDQuMjYxNyA0Ni4yMjQ5IDM4LjgwNzEgNDYuMjI0OSAzMS45ODc5QzQ2LjIyNDkgMjMuMTQ5NiA1MS42MTc5IDEzLjc2NSA2Mi43MzY1IDEzLjc2NUM2OC44NTggMTMuNzY1IDcyLjI4MDkgMTcuMDk0OSA3Mi4yODA5IDIxLjczMTdDNzIuMjgxNSAyOS4yMDY2IDYyLjQwMDUgMzEuNDk2NSA1Ni42NzE1IDMxLjU1MDZaXCIgZmlsbD1cIndoaXRlXCIvPlxcbiAgPHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTEwMy4wNjcgMjAuMzE0MkMxMDMuMDY3IDIxLjQwNTIgMTAyLjg5NyAyMi45ODc1IDEwMi43MjcgMjQuMDIxNkw5OS41MjYyIDQzLjY2MjJIODkuMTM4NUw5Mi4wNTg1IDI1LjY1OEM5Mi4xMTM5IDI1LjE2OTYgOTIuMjg0IDI0LjE4NjUgOTIuMjg0IDIzLjY0MTFDOTIuMjg0IDIyLjMzMTQgOTEuNDQxNCAyMi4wMDQ3IDkwLjQyODIgMjIuMDA0N0M4OS4wODI2IDIyLjAwNDcgODcuNzMzNyAyMi42MDQyIDg2LjgzNTQgMjMuMDQxOEw4My41MjM0IDQzLjY2MjVINzMuMDc3Mkw3Ny44NDk1IDE0LjI1N0g4Ni44OTA4TDg3LjAwNTIgMTYuNjA0MUM4OS4xMzgyIDE1LjI0MDQgOTEuOTQ2OSAxMy43NjU2IDk1LjkzMiAxMy43NjU2QzEwMS4yMTIgMTMuNzY1IDEwMy4wNjcgMTYuMzg0NSAxMDMuMDY3IDIwLjMxNDJaXCIgZmlsbD1cIndoaXRlXCIvPlxcbiAgPHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTEzMy45MDYgMTYuOTg0MUMxMzYuODgxIDE0LjkxMzEgMTM5LjY5IDEzLjc2NSAxNDMuNTYzIDEzLjc2NUMxNDguODk3IDEzLjc2NSAxNTAuNzUzIDE2LjM4NDUgMTUwLjc1MyAyMC4zMTQyQzE1MC43NTMgMjEuNDA1MiAxNTAuNTgzIDIyLjk4NzUgMTUwLjQxMyAyNC4wMjE2TDE0Ny4yMTYgNDMuNjYyMkgxMzYuODI1TDEzOS44MDEgMjUuMjc3NEMxMzkuODU1IDI0Ljc4NiAxMzkuOTcxIDI0LjE4NjUgMTM5Ljk3MSAyMy44MDYzQzEzOS45NzEgMjIuMzMxNyAxMzkuMTI4IDIyLjAwNDcgMTM4LjExNSAyMi4wMDQ3QzEzNi44MjQgMjIuMDA0NyAxMzUuNTM1IDIyLjU1MDEgMTM0LjU3NyAyMy4wNDE4TDEzMS4yNjYgNDMuNjYyNUgxMjAuODc4TDEyMy44NTQgMjUuMjc3N0MxMjMuOTA4IDI0Ljc4NjMgMTI0LjAyIDI0LjE4NjggMTI0LjAyIDIzLjgwNjVDMTI0LjAyIDIyLjMzMiAxMjMuMTc3IDIyLjAwNDkgMTIyLjE2NyAyMi4wMDQ5QzEyMC44MTkgMjIuMDA0OSAxMTkuNDczIDIyLjYwNDUgMTE4LjU3NCAyMy4wNDIxTDExNS4yNiA0My42NjI4SDEwNC44MTdMMTA5LjU4OSAxNC4yNTczSDExOC41MkwxMTguOCAxNi43MTIyQzEyMC44NzggMTUuMjQxIDEyMy42ODQgMTMuNzY2MiAxMjcuNDQ2IDEzLjc2NjJDMTMwLjcwNCAxMy43NjUgMTMyLjgzNyAxNS4xMjkgMTMzLjkwNiAxNi45ODQxWlwiIGZpbGw9XCJ3aGl0ZVwiLz5cXG4gIDxwYXRoIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBjbGlwLXJ1bGU9XCJldmVub2RkXCIgZD1cIk0xNzEuNDI2IDI1LjU1MDJDMTcxLjQyNiAyMy4xNDk2IDE3MC44MDggMjEuNTEzIDE2OC45NTYgMjEuNTEzQzE2NC44NTcgMjEuNTEzIDE2NC4wMTUgMjguNTUgMTY0LjAxNSAzMi4xNDk4QzE2NC4wMTUgMzQuODgwNyAxNjQuODAyIDM2LjU3MDkgMTY2LjY1MyAzNi41NzA5QzE3MC41MjggMzYuNTcwOSAxNzEuNDI2IDI5LjE0OTcgMTcxLjQyNiAyNS41NTAyWk0xNTMuNDU4IDMxLjcxNTJDMTUzLjQ1OCAyMi40NDIgMTU4LjUxMSAxMy43NjUgMTcwLjEzNiAxMy43NjVDMTc4Ljg5NiAxMy43NjUgMTgyLjA5OCAxOC43ODU0IDE4Mi4wOTggMjUuNzE0OEMxODIuMDk4IDM0Ljg4MDUgMTc3LjA5OSA0NC4zNzIzIDE2NS4xOTQgNDQuMzcyM0MxNTYuMzc4IDQ0LjM3MjMgMTUzLjQ1OCAzOC43NTI1IDE1My40NTggMzEuNzE1MlpcIiBmaWxsPVwid2hpdGVcIi8+XFxuPC9zdmc+JztcbnZhciBDT05USU5VRV9PUl9DQU5DRUxfSU5TVFJVQ1RJT05TID1cbiAgXCJUYXAgY2FuY2VsIHBheW1lbnQgdG8gY2FuY2VsIGFuZCByZXR1cm4gdG8gdGhlIGJ1c2luZXNzLiBDb250aW51ZSBwYXltZW50IHdpbGwgcmVsYXVuY2ggdGhlIHBheW1lbnQgd2luZG93LlwiO1xuXG52YXIgUE9QVVBfV0lEVEggPSA0MDA7XG52YXIgUE9QVVBfSEVJR0hUID0gNTcwO1xudmFyIEVMRU1FTlRfSURTID0ge1xuICBiYWNrZHJvcDogXCJ2ZW5tby1kZXNrdG9wLXdlYi1iYWNrZHJvcFwiLFxuICBiYWNrZHJvcEhpZGRlbjogXCJ2ZW5tby1kZXNrdG9wLXdlYi1iYWNrZHJvcC5oaWRkZW5cIixcbiAgYmFja2Ryb3BDb250YWluZXI6IFwidmVubW8tYmFja2Ryb3AtY29udGFpbmVyXCIsXG4gIGNhbmNlbEJ1dHRvbjogXCJ2ZW5tby1wb3B1cC1jYW5jZWwtYnV0dG9uXCIsXG4gIGNvbnRpbnVlQnV0dG9uOiBcInZlbm1vLXBvcHVwLWNvbnRpbnVlLWJ1dHRvblwiLFxuICBtZXNzYWdlOiBcInZlbm1vLW1lc3NhZ2VcIixcbiAgaW5zdHJ1Y3Rpb25zOiBcInZlbm1vLWluc3RydWN0aW9uc1wiLFxuICB2ZW5tb0xvZ286IFwidmVubW8tZnVsbC1sb2dvXCIsXG59O1xuXG5FeHRlbmRlZFByb21pc2Uuc3VwcHJlc3NVbmhhbmRsZWRQcm9taXNlTWVzc2FnZSA9IHRydWU7XG5cbmZ1bmN0aW9uIG9wZW5Qb3B1cChvcHRpb25zKSB7XG4gIHZhciBmcmFtZVNlcnZpY2VJbnN0YW5jZSA9IG9wdGlvbnMuZnJhbWVTZXJ2aWNlSW5zdGFuY2U7XG4gIHZhciB2ZW5tb1VybCA9IG9wdGlvbnMudmVubW9Vcmw7XG4gIHZhciBjaGVja0ZvclN0YXR1c0NoYW5nZSA9IG9wdGlvbnMuY2hlY2tGb3JTdGF0dXNDaGFuZ2U7XG4gIHZhciBjYW5jZWxUb2tlbml6YXRpb24gPSBvcHRpb25zLmNhbmNlbFRva2VuaXphdGlvbjtcbiAgdmFyIGNoZWNrUGF5bWVudENvbnRleHRTdGF0dXMgPSBvcHRpb25zLmNoZWNrUGF5bWVudENvbnRleHRTdGF0dXM7XG4gIHZhciBleHRlbmRlZFByb21pc2UgPSBuZXcgRXh0ZW5kZWRQcm9taXNlKCk7XG5cbiAgZG9jdW1lbnRcbiAgICAuZ2V0RWxlbWVudEJ5SWQoRUxFTUVOVF9JRFMuY29udGludWVCdXR0b24pXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmcmFtZVNlcnZpY2VJbnN0YW5jZS5mb2N1cygpO1xuICAgIH0pO1xuICBkb2N1bWVudFxuICAgIC5nZXRFbGVtZW50QnlJZChFTEVNRU5UX0lEUy5jYW5jZWxCdXR0b24pXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmcmFtZVNlcnZpY2VJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgY2FuY2VsVG9rZW5pemF0aW9uKCk7XG4gICAgICBjbG9zZUJhY2tkcm9wKCk7XG4gICAgfSk7XG4gIGZyYW1lU2VydmljZUluc3RhbmNlLm9wZW4oe30sIGZ1bmN0aW9uIChmcmFtZVNlcnZpY2VFcnIpIHtcbiAgICB2YXIgcmV0cnlTdGFydGluZ0NvdW50ID0gMTtcblxuICAgIGlmIChmcmFtZVNlcnZpY2VFcnIpIHtcbiAgICAgIGV4dGVuZGVkUHJvbWlzZS5yZWplY3QoZnJhbWVTZXJ2aWNlRXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tGb3JTdGF0dXNDaGFuZ2UocmV0cnlTdGFydGluZ0NvdW50KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGV4dGVuZGVkUHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKHN0YXR1c0NoZWNrRXJyb3IpIHtcbiAgICAgICAgICAvLyBXZSBhZGQgdGhpcyBjaGVjayBoZXJlIGJlY2F1c2UgYXQgdGhpcyBwb2ludFxuICAgICAgICAgIC8vIHRoZSBzdGF0dXMgc2hvdWxkIG5vdCBiZSBpbiBDUkVBVEVEIHN0YXR1cy5cbiAgICAgICAgICAvLyBIb3dldmVyLCB0aGVyZSBpcyBhbiBlZGdlIGNhc2Ugd2hlcmUgaWYgYSBidXllclxuICAgICAgICAgIC8vIGNhbmNlbHMgaW4gdGhlIHBvcHVwLCB0aGUgcG9wdXAgbWlnaHQgY2xvc2UgaXRzZWxmXG4gICAgICAgICAgLy8gYmVmb3JlIGl0IGNhbiBzZW5kIHRoZSBncmFwaFFMIG11dGF0aW9uIHRvIHVwZGF0ZSBpdHMgc3RhdHVzLlxuICAgICAgICAgIC8vIEluIHRoZXNlIGNhc2VzLCB0aGUgc3RhdHVzIHdpbGwgYmUgc3R1Y2sgaW4gQ1JFQVRFRCBzdGF0dXMsIGFuZFxuICAgICAgICAgIC8vIHRva2VuaXphdGlvbiB3b3VsZCBmYWlsLCBpbmNvcnJlY3RseSB0aHJvd2luZyBhIHRva2VuaXphdGlvbiBlcnJvclxuICAgICAgICAgIC8vIGluc3RlYWQgb2YgaW5mb3JtaW5nIHRoZSBtZXJjaGFudCB0aGF0IHRoZSBjdXN0b21lciBjYW5jZWxlZC5cbiAgICAgICAgICBjaGVja1BheW1lbnRDb250ZXh0U3RhdHVzKCkudGhlbihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUuc3RhdHVzID09PSBcIkNSRUFURURcIikge1xuICAgICAgICAgICAgICBleHRlbmRlZFByb21pc2UucmVqZWN0KFxuICAgICAgICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVkVOTU9fQ1VTVE9NRVJfQ0FOQ0VMRUQpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmRlZFByb21pc2UucmVqZWN0KHN0YXR1c0NoZWNrRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmcmFtZVNlcnZpY2VJbnN0YW5jZS5jbG9zZSgpO1xuICAgIGNsb3NlQmFja2Ryb3AoKTtcbiAgfSk7XG4gIGZyYW1lU2VydmljZUluc3RhbmNlLnJlZGlyZWN0KHZlbm1vVXJsKTtcblxuICByZXR1cm4gZXh0ZW5kZWRQcm9taXNlO1xufVxuXG5mdW5jdGlvbiBjZW50ZXJlZFBvcHVwRGltZW5zaW9ucygpIHtcbiAgdmFyIHBvcHVwVG9wID1cbiAgICBNYXRoLnJvdW5kKCh3aW5kb3cub3V0ZXJIZWlnaHQgLSBQT1BVUF9IRUlHSFQpIC8gMikgKyB3aW5kb3cuc2NyZWVuVG9wO1xuICB2YXIgcG9wdXBMZWZ0ID1cbiAgICBNYXRoLnJvdW5kKCh3aW5kb3cub3V0ZXJXaWR0aCAtIFBPUFVQX1dJRFRIKSAvIDIpICsgd2luZG93LnNjcmVlbkxlZnQ7XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IHBvcHVwVG9wLFxuICAgIGxlZnQ6IHBvcHVwTGVmdCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xvc2VCYWNrZHJvcCgpIHtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2ZW5tby1kZXNrdG9wLXdlYi1iYWNrZHJvcFwiKS5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xufVxuXG5mdW5jdGlvbiBnZXRFbGVtZW50U3R5bGVzKCkge1xuICB2YXIgYmFja2Ryb3BTdHlsZXMgPSBbXG4gICAgXCIjXCIgKyBFTEVNRU5UX0lEUy5iYWNrZHJvcEhpZGRlbiArIFwiIHtcIixcbiAgICBcImRpc3BsYXk6IG5vbmU7XCIsXG4gICAgXCJ9XCIsXG4gICAgXCIjXCIgKyBFTEVNRU5UX0lEUy5iYWNrZHJvcCArIFwiIHtcIixcbiAgICBcInotaW5kZXg6IDMxNDE1OTI2MzI7XCIsXG4gICAgXCJjdXJzb3I6IHBvaW50ZXI7XCIsXG4gICAgXCJwb3NpdGlvbjogZml4ZWQ7XCIsXG4gICAgXCJ0b3A6IDA7XCIsXG4gICAgXCJsZWZ0OiAwO1wiLFxuICAgIFwiYm90dG9tOiAwO1wiLFxuICAgIFwid2lkdGg6IDEwMCU7XCIsXG4gICAgXCJiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOCk7XCIsXG4gICAgXCJ9XCIsXG4gIF07XG4gIHZhciBiYWNrZHJvcENvbnRhaW5lclN0eWxlcyA9IFtcbiAgICBcIiNcIiArIEVMRU1FTlRfSURTLmJhY2tkcm9wQ29udGFpbmVyICsgXCIge1wiLFxuICAgIFwiZGlzcGxheTogZmxleDtcIixcbiAgICBcImFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcIixcbiAgICBcImp1c3RpZnktY29udGVudDogY2VudGVyO1wiLFxuICAgIFwiYWxpZ24taXRlbXM6IGNlbnRlcjtcIixcbiAgICBcIndpZHRoOiAxMDAlO1wiLFxuICAgIFwiaGVpZ2h0OiAxMDAlO1wiLFxuICAgIFwiZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcIixcbiAgICBcIn1cIixcbiAgXTtcblxuICB2YXIgY2FuY2VsQnV0dG9uU3R5bGVzID0gW1xuICAgIFwiI1wiICsgRUxFTUVOVF9JRFMuY2FuY2VsQnV0dG9uICsgXCIge1wiLFxuICAgIFwiaGVpZ2h0OiAyNHB4O1wiLFxuICAgIFwid2lkdGg6IDM4MHB4O1wiLFxuICAgIFwiZm9udC1mYW1pbHk6ICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XCIsXG4gICAgXCJmb250LXN0eWxlOiBub3JtYWw7XCIsXG4gICAgXCJmb250LXdlaWdodDogNzAwO1wiLFxuICAgIFwiZm9udC1zaXplOiAxOHB4O1wiLFxuICAgIFwibGluZS1oZWlnaHQ6IDI0cHg7XCIsXG4gICAgXCJ0ZXh0LWFsaWduOiBjZW50ZXI7XCIsXG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcIixcbiAgICBcImJvcmRlcjogbm9uZTtcIixcbiAgICBcImNvbG9yOiAjRkZGRkZGO1wiLFxuICAgIFwibWFyZ2luLXRvcDogMjhweDtcIixcbiAgICBcIn1cIixcbiAgXTtcblxuICB2YXIgY29udGludWVCdXR0b25TdHlsZXMgPSBbXG4gICAgXCIjXCIgKyBFTEVNRU5UX0lEUy5jb250aW51ZUJ1dHRvbiArIFwiIHtcIixcbiAgICBcIndpZHRoOiA0MDBweDtcIixcbiAgICBcImhlaWdodDogNTBweDtcIixcbiAgICBcImJhY2tncm91bmQ6ICMwMDc0REU7XCIsXG4gICAgXCJib3JkZXItcmFkaXVzOiAyNHB4O1wiLFxuICAgIFwiYm9yZGVyOiBub25lO1wiLFxuICAgIFwiZm9udC1mYW1pbHk6ICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XCIsXG4gICAgXCJmb250LXN0eWxlOiBub3JtYWw7XCIsXG4gICAgXCJmb250LXdlaWdodDogNzAwO1wiLFxuICAgIFwiZm9udC1zaXplOiAxOHB4O1wiLFxuICAgIFwiY29sb3I6ICNGRkZGRkY7XCIsXG4gICAgXCJtYXJnaW4tdG9wOiA0NHB4O1wiLFxuICAgIFwifVwiLFxuICBdO1xuXG4gIHZhciBtZXNzYWdlU3R5bGVzID0gW1xuICAgIFwiI1wiICsgRUxFTUVOVF9JRFMubWVzc2FnZSArIFwiIHtcIixcbiAgICBcImZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1wiLFxuICAgIFwiZm9udC1zdHlsZTogbm9ybWFsO1wiLFxuICAgIFwiZm9udC13ZWlnaHQ6IDUwMDtcIixcbiAgICBcImZvbnQtc2l6ZTogMjRweDtcIixcbiAgICBcImxpbmUtaGVpZ2h0OiAzMnB4O1wiLFxuICAgIFwidGV4dC1hbGlnbjogY2VudGVyO1wiLFxuICAgIFwiY29sb3I6ICNGRkZGRkY7XCIsXG4gICAgXCJtYXJnaW4tdG9wOiAzMnB4O1wiLFxuICAgIFwifVwiLFxuICBdO1xuXG4gIHZhciBpbnN0cnVjdGlvblN0eWxlcyA9IFtcbiAgICBcIiNcIiArIEVMRU1FTlRfSURTLmluc3RydWN0aW9ucyArIFwiIHtcIixcbiAgICBcImZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1wiLFxuICAgIFwiZm9udC1zdHlsZTogbm9ybWFsO1wiLFxuICAgIFwiZm9udC13ZWlnaHQ6IDQwMDtcIixcbiAgICBcImZvbnQtc2l6ZTogMTZweDtcIixcbiAgICBcImxpbmUtaGVpZ2h0OiAyMHB4O1wiLFxuICAgIFwidGV4dC1hbGlnbjogY2VudGVyO1wiLFxuICAgIFwiY29sb3I6ICNGRkZGRkY7XCIsXG4gICAgXCJtYXJnaW4tdG9wOiAxNnB4O1wiLFxuICAgIFwid2lkdGg6IDQwMHB4O1wiLFxuICAgIFwifVwiLFxuICBdO1xuXG4gIHZhciBhbGxTdHlsZXMgPSBiYWNrZHJvcFN0eWxlcy5jb25jYXQoXG4gICAgYmFja2Ryb3BDb250YWluZXJTdHlsZXMsXG4gICAgY2FuY2VsQnV0dG9uU3R5bGVzLFxuICAgIGNvbnRpbnVlQnV0dG9uU3R5bGVzLFxuICAgIG1lc3NhZ2VTdHlsZXMsXG4gICAgaW5zdHJ1Y3Rpb25TdHlsZXNcbiAgKTtcblxuICByZXR1cm4gYWxsU3R5bGVzLmpvaW4oXCJcXG5cIik7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQW5kU3R5bGVFbGVtZW50cygpIHtcbiAgdmFyIGFscmVhZHlSZW5kZXJlZEJhY2tkcm9wID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoRUxFTUVOVF9JRFMuYmFja2Ryb3ApO1xuICB2YXIgYmFja2Ryb3BTdHlsZXNFbGVtZW50LFxuICAgIGJhY2tkcm9wRGl2LFxuICAgIGJhY2tEcm9wQ29udGVudENvbnRhaW5lcixcbiAgICB2ZW5tb0xvZ29EaXYsXG4gICAgdmVubW9NZXNzYWdlRGl2LFxuICAgIGluc3RydWN0aW9uc0RpdixcbiAgICBjb250aW51ZUJ1dHRvbixcbiAgICBjYW5jZWxCdXR0b247XG5cbiAgaWYgKGFscmVhZHlSZW5kZXJlZEJhY2tkcm9wKSB7XG4gICAgYWxyZWFkeVJlbmRlcmVkQmFja2Ryb3AuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcblxuICAgIHJldHVybjtcbiAgfVxuICBiYWNrZHJvcFN0eWxlc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIGJhY2tkcm9wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgYmFja0Ryb3BDb250ZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdmVubW9Mb2dvRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdmVubW9NZXNzYWdlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgaW5zdHJ1Y3Rpb25zRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29udGludWVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjYW5jZWxCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXG4gIGJhY2tkcm9wU3R5bGVzRWxlbWVudC5pZCA9IFwidmVubW8tZGVza3RvcC13ZWJfX2luamVjdGVkLXN0eWxlc1wiO1xuICBiYWNrZHJvcFN0eWxlc0VsZW1lbnQuaW5uZXJIVE1MID0gZ2V0RWxlbWVudFN0eWxlcygpO1xuXG4gIGJhY2tkcm9wRGl2LmlkID0gRUxFTUVOVF9JRFMuYmFja2Ryb3A7XG5cbiAgYmFja0Ryb3BDb250ZW50Q29udGFpbmVyLmlkID0gRUxFTUVOVF9JRFMuYmFja2Ryb3BDb250YWluZXI7XG5cbiAgdmVubW9Mb2dvRGl2LmlkID0gRUxFTUVOVF9JRFMudmVubW9Mb2dvO1xuICB2ZW5tb0xvZ29EaXYuaW5uZXJIVE1MID0gVkVOTU9fTE9HT19TVkc7XG5cbiAgdmVubW9NZXNzYWdlRGl2LmlkID0gRUxFTUVOVF9JRFMubWVzc2FnZTtcbiAgdmVubW9NZXNzYWdlRGl2LmlubmVyVGV4dCA9IFwiV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBkbz9cIjtcblxuICBpbnN0cnVjdGlvbnNEaXYuaWQgPSBFTEVNRU5UX0lEUy5pbnN0cnVjdGlvbnM7XG4gIGluc3RydWN0aW9uc0Rpdi5pbm5lclRleHQgPSBDT05USU5VRV9PUl9DQU5DRUxfSU5TVFJVQ1RJT05TO1xuXG4gIGNvbnRpbnVlQnV0dG9uLmlkID0gRUxFTUVOVF9JRFMuY29udGludWVCdXR0b247XG4gIGNvbnRpbnVlQnV0dG9uLmlubmVyVGV4dCA9IFwiQ29udGludWUgcGF5bWVudFwiO1xuXG4gIGNhbmNlbEJ1dHRvbi5pZCA9IEVMRU1FTlRfSURTLmNhbmNlbEJ1dHRvbjtcbiAgY2FuY2VsQnV0dG9uLmlubmVyVGV4dCA9IFwiQ2FuY2VsIHBheW1lbnRcIjtcblxuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGJhY2tkcm9wU3R5bGVzRWxlbWVudCk7XG4gIGJhY2tEcm9wQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZCh2ZW5tb0xvZ29EaXYpO1xuICBiYWNrRHJvcENvbnRlbnRDb250YWluZXIuYXBwZW5kQ2hpbGQodmVubW9NZXNzYWdlRGl2KTtcbiAgYmFja0Ryb3BDb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKGluc3RydWN0aW9uc0Rpdik7XG4gIGJhY2tEcm9wQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZChjb250aW51ZUJ1dHRvbik7XG4gIGJhY2tEcm9wQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZChjYW5jZWxCdXR0b24pO1xuICBiYWNrZHJvcERpdi5hcHBlbmRDaGlsZChiYWNrRHJvcENvbnRlbnRDb250YWluZXIpO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJhY2tkcm9wRGl2KTtcblxuICBiYWNrZHJvcERpdi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEFwcGxpZXMgYSBiYWNrZHJvcCBvdmVyIHRoZSBwYWdlLCBhbmQgb3BlbnMgYSBwb3B1cCB0byB0aGUgc3VwcGxpZWQgdXJsLiBVc2VzIHN1cHBsaWVkIHN0YXR1cyBhbmQgY2FuY2VsIGZ1bmN0aW9ucyB0byBoYW5kbGUgdGhlIGZsb3cuXG4gKiBAZnVuY3Rpb24gcnVuV2ViTG9naW5cbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgZm9yIHJ1bm5pbmcgdGhlIHdlYiBsb2dpbiBmbG93LlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudmVubW9VcmwgVmVubW8gdXJsIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgbG9nZ2luZyBpbi5cbiAqIEBwYXJhbSB7VmVubW9+Y2hlY2tQYXltZW50Q29udGV4dFN0YXR1c0FuZFByb2Nlc3NSZXN1bHR9IG9wdGlvbnMuY2hlY2tGb3JTdGF0dXNDaGFuZ2Uge0BsaW5rIFZlbm1vfmNoZWNrUGF5bWVudENvbnRleHRTdGF0dXNBbmRQcm9jZXNzUmVzdWx0fSB0byBiZSBpbnZva2VkIGluIG9yZGVyIHRvIGNoZWNrIGZvciBhIHBheW1lbnQgY29udGV4dCBzdGF0dXMgdXBkYXRlLlxuICogQHBhcmFtIHtWZW5tb35jYW5jZWxUb2tlbml6YXRpb259IG9wdGlvbnMuY2FuY2VsVG9rZW5pemF0aW9uIHtAbGluayBWZW5tb35jYW5jZWxUb2tlbml6YXRpb259IHRvIGJlIGludm9rZWQgd2hlbiB0aGUgYXBwcm9wcmlhdGUgcGF5bWVudCBjb250ZXh0IHN0YXR1cyBpcyByZXRyaWV2ZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuZGVidWcgQSBmbGFnIHRvIGNvbnRyb2wgd2hldGhlciB0byB1c2UgbWluaWZpZWQgYXNzZXRzIG9yIG5vdC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZVxuICovXG5mdW5jdGlvbiBydW5XZWJMb2dpbihvcHRpb25zKSB7XG4gIGJ1aWxkQW5kU3R5bGVFbGVtZW50cygpO1xuXG4gIHJldHVybiBvcGVuUG9wdXAob3B0aW9ucyk7XG59XG5cbi8qKlxuICogV2hlbiB1c2luZyBmcmFtZXNlcnZpY2UsIGl0IG5lZWRzIHRvIGJlIGNyZWF0ZWQgc2VwYXJhdGVseSBmcm9tIHRoZSBhY3Rpb24gb2Ygb3BlbmluZy4gVGhlIHNldHVwIHByb2Nlc3MgaW5jbHVkZXNcbiAqIHN0ZXBzIHRoYXQgYnJvd3NlcnMgbWF5IGNvbnNpZGVyIGFzeW5jIG9yIHRvbyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgdXNlciBhY3Rpb24gcmVxdWlyZWQgdG8gb3BlbiBhIHBvcHVwLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZW5hYmxlcyB1cyB0byBkbyB0aGF0IHNldHVwIGF0IGFuIGFwcHJvcHJpYXRlIHRpbWUuXG4gKiBAZnVuY3Rpb24gc2V0dXBEZXNrdG9wV2ViTG9naW5cbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgdXNlIGZvciBzZXR0aW5nIHVwIHRoZSBEZXNrdG9wIFdlYiBMb2dpbiBmbG93LlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYXNzZXRzVXJsIFVybCB0aGF0IHBvaW50cyB0byB0aGUgaG9zdGVkIEJyYWludHJlZSBhc3NldHMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuZGVidWcgQSBmbGFnIHRvIGNvbnRyb2wgd2hldGhlciB0byB1c2UgbWluaWZpZWQgYXNzZXRzIG9yIG5vdC5cblxuICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlXG4gKi9cbmZ1bmN0aW9uIHNldHVwRGVza3RvcFdlYkxvZ2luKG9wdGlvbnMpIHtcbiAgdmFyIGV4dGVuZGVkUHJvbWlzZSA9IG5ldyBFeHRlbmRlZFByb21pc2UoKTtcbiAgdmFyIHBvcHVwTmFtZSA9IFwidmVubW9EZXNrdG9wV2ViTG9naW5cIjtcbiAgdmFyIGFzc2V0c1VybCA9IG9wdGlvbnMuYXNzZXRzVXJsO1xuICB2YXIgZGVidWcgPSBvcHRpb25zLmRlYnVnIHx8IGZhbHNlO1xuICB2YXIgcG9wdXBMb2NhdGlvbiA9IGNlbnRlcmVkUG9wdXBEaW1lbnNpb25zKCk7XG4gIHZhciBhc3NldHNCYXNlVXJsID0gYXNzZXRzVXJsICsgXCIvd2ViL1wiICsgVkVSU0lPTiArIFwiL2h0bWxcIjtcblxuICBmcmFtZVNlcnZpY2UuY3JlYXRlKFxuICAgIHtcbiAgICAgIG5hbWU6IHBvcHVwTmFtZSxcbiAgICAgIGRpc3BhdGNoRnJhbWVVcmw6XG4gICAgICAgIGFzc2V0c0Jhc2VVcmwgKyBcIi9kaXNwYXRjaC1mcmFtZVwiICsgdXNlTWluKGRlYnVnKSArIFwiLmh0bWxcIixcbiAgICAgIG9wZW5GcmFtZVVybDpcbiAgICAgICAgYXNzZXRzQmFzZVVybCArIFwiL3Zlbm1vLWxhbmRpbmctZnJhbWVcIiArIHVzZU1pbihkZWJ1ZykgKyBcIi5odG1sXCIsXG4gICAgICB0b3A6IHBvcHVwTG9jYXRpb24udG9wLFxuICAgICAgbGVmdDogcG9wdXBMb2NhdGlvbi5sZWZ0LFxuICAgICAgaGVpZ2h0OiBQT1BVUF9IRUlHSFQsXG4gICAgICB3aWR0aDogUE9QVVBfV0lEVEgsXG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZnJhbWVTZXJ2aWNlSW5zdGFuY2UpIHtcbiAgICAgIGV4dGVuZGVkUHJvbWlzZS5yZXNvbHZlKGZyYW1lU2VydmljZUluc3RhbmNlKTtcbiAgICB9XG4gICk7XG5cbiAgcmV0dXJuIGV4dGVuZGVkUHJvbWlzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJ1bldlYkxvZ2luOiBydW5XZWJMb2dpbixcbiAgb3BlblBvcHVwOiBvcGVuUG9wdXAsXG4gIHNldHVwRGVza3RvcFdlYkxvZ2luOiBzZXR1cERlc2t0b3BXZWJMb2dpbixcbiAgUE9QVVBfV0lEVEg6IFBPUFVQX1dJRFRILFxuICBQT1BVUF9IRUlHSFQ6IFBPUFVQX0hFSUdIVCxcbn07XG5cbn0se1wiLi4vLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uLy4uL2xpYi9mcmFtZS1zZXJ2aWNlL2V4dGVybmFsXCI6MTM5LFwiLi4vLi4vbGliL3VzZS1taW5cIjoxNjAsXCIuLi9zaGFyZWQvZXJyb3JzXCI6MjE5LFwiQGJyYWludHJlZS9leHRlbmRlZC1wcm9taXNlXCI6MzR9XSwyMjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhbmFseXRpY3MgPSBfZGVyZXFfKFwiLi4vbGliL2FuYWx5dGljc1wiKTtcbnZhciBpc0Jyb3dzZXJTdXBwb3J0ZWQgPSBfZGVyZXFfKFwiLi9zaGFyZWQvc3VwcG9ydHMtdmVubW9cIik7XG52YXIgYnJvd3NlckRldGVjdGlvbiA9IF9kZXJlcV8oXCIuL3NoYXJlZC9icm93c2VyLWRldGVjdGlvblwiKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKFwiLi9zaGFyZWQvY29uc3RhbnRzXCIpO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL3NoYXJlZC9lcnJvcnNcIik7XG52YXIgcXVlcnlzdHJpbmcgPSBfZGVyZXFfKFwiLi4vbGliL3F1ZXJ5c3RyaW5nXCIpO1xudmFyIGlzVmVyaWZpZWREb21haW4gPSBfZGVyZXFfKFwiLi4vbGliL2lzLXZlcmlmaWVkLWRvbWFpblwiKTtcbnZhciBtZXRob2RzID0gX2RlcmVxXyhcIi4uL2xpYi9tZXRob2RzXCIpO1xudmFyIGNvbnZlcnRNZXRob2RzVG9FcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvY29udmVydC1tZXRob2RzLXRvLWVycm9yXCIpO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG52YXIgaW5JZnJhbWUgPSBfZGVyZXFfKFwiLi4vbGliL2luLWlmcmFtZVwiKTtcbnZhciBFeHRlbmRlZFByb21pc2UgPSBfZGVyZXFfKFwiQGJyYWludHJlZS9leHRlbmRlZC1wcm9taXNlXCIpO1xudmFyIGdldFZlbm1vVXJsID0gX2RlcmVxXyhcIi4vc2hhcmVkL2dldC12ZW5tby11cmxcIik7XG52YXIgZGVza3RvcFdlYkxvZ2luID0gX2RlcmVxXyhcIi4vc2hhcmVkL3dlYi1sb2dpbi1iYWNrZHJvcFwiKTtcbnZhciBzbmFrZUNhc2VUb0NhbWVsQ2FzZSA9IF9kZXJlcV8oXCIuLi9saWIvc25ha2UtY2FzZS10by1jYW1lbC1jYXNlXCIpO1xuXG4vLyBORVhUX01BSk9SX1ZFUlNJT04gdGhlIHNvdXJjZSBjb2RlIGZvciB0aGlzIGlzIGFjdHVhbGx5IGluIGFcbi8vIHR5cGVzY3JpcHQgcmVwbyBjYWxsZWQgdmVubW8tZGVza3RvcCwgb25jZSB0aGUgU0RLIGlzIG1pZ3JhdGVkXG4vLyB0byB0eXBlc2NyaXB0LCB3ZSBjYW4gbW92ZSB0aGUgVFMgZmlsZXMgb3V0IG9mIHRoYXQgc2VwYXJhdGVcbi8vIHJlcG8gYW5kIGludG8gdGhlIHdlYiBTREsgcHJvcGVybHlcbnZhciBjcmVhdGVWZW5tb0Rlc2t0b3AgPSBfZGVyZXFfKFwiLi9leHRlcm5hbC9cIik7XG52YXIgZ3JhcGhxbFF1ZXJpZXMgPSBfZGVyZXFfKFwiLi9leHRlcm5hbC9xdWVyaWVzXCIpO1xuXG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xudmFyIERFRkFVTFRfTU9CSUxFX1BPTExJTkdfSU5URVJWQUwgPSAyNTA7IC8vIDEvNCBzZWNvbmRcbnZhciBERUZBVUxUX01PQklMRV9FWFBJUklOR19USFJFU0hPTEQgPSAzMDAwMDA7IC8vIDUgbWludXRlc1xuXG5FeHRlbmRlZFByb21pc2Uuc3VwcHJlc3NVbmhhbmRsZWRQcm9taXNlTWVzc2FnZSA9IHRydWU7XG5cbi8qKlxuICogVmVubW8gdG9rZW5pemUgcGF5bG9hZC5cbiAqIEB0eXBlZGVmIHtvYmplY3R9IFZlbm1vfnRva2VuaXplUGF5bG9hZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5vbmNlIFRoZSBwYXltZW50IG1ldGhvZCBub25jZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSBwYXltZW50IG1ldGhvZCB0eXBlLCBhbHdheXMgYFZlbm1vQWNjb3VudGAuXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGV0YWlscyBBZGRpdGlvbmFsIFZlbm1vIGFjY291bnQgZGV0YWlscy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLnVzZXJuYW1lIFRoZSB1c2VybmFtZSBvZiB0aGUgVmVubW8gYWNjb3VudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLnBheW1lbnRDb250ZXh0SWQgVGhlIGNvbnRleHQgSUQgb2YgdGhlIFZlbm1vIHBheW1lbnQuIE9ubHkgYXZhaWxhYmxlIHdoZW4gdXNlZCB3aXRoIHtAbGluayBodHRwczovL2JyYWludHJlZS5naXRodWIuaW8vYnJhaW50cmVlLXdlYi9jdXJyZW50L21vZHVsZS1icmFpbnRyZWUtd2ViX3Zlbm1vLmh0bWwjLmNyZWF0ZXxgcGF5bWVudE1ldGhvZFVzYWdlYH0uXG4gKi9cblxuLyoqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFRoZSBWZW5tbyB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvdmVubW8uY3JlYXRlIGNyZWF0ZX0gb3B0aW9ucy5cbiAqIEBkZXNjcmlwdGlvbiA8c3Ryb25nPkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gVXNlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi92ZW5tby5jcmVhdGV8YnJhaW50cmVlLXdlYi52ZW5tby5jcmVhdGV9IGluc3RlYWQuPC9zdHJvbmc+XG4gKiBAY2xhc3NkZXNjIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIFZlbm1vIGNvbXBvbmVudCBwcm9kdWNlZCBieSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvdmVubW8uY3JlYXRlfGJyYWludHJlZS13ZWIvdmVubW8uY3JlYXRlfS4gSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgaGF2ZSBtZXRob2RzIGZvciB0b2tlbml6aW5nIFZlbm1vIHBheW1lbnRzLlxuICovXG5mdW5jdGlvbiBWZW5tbyhvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLl9hbGxvd0Rlc2t0b3BXZWJMb2dpbiA9IG9wdGlvbnMuYWxsb3dEZXNrdG9wV2ViTG9naW4gfHwgZmFsc2U7XG4gIHRoaXMuX21vYmlsZVdlYkZhbGxCYWNrID0gb3B0aW9ucy5tb2JpbGVXZWJGYWxsQmFjayB8fCBmYWxzZTtcbiAgdGhpcy5fY3JlYXRlUHJvbWlzZSA9IG9wdGlvbnMuY3JlYXRlUHJvbWlzZTtcbiAgdGhpcy5fYWxsb3dOZXdCcm93c2VyVGFiID0gb3B0aW9ucy5hbGxvd05ld0Jyb3dzZXJUYWIgIT09IGZhbHNlO1xuICB0aGlzLl9hbGxvd1dlYnZpZXdzID0gb3B0aW9ucy5hbGxvd1dlYnZpZXdzICE9PSBmYWxzZTtcbiAgdGhpcy5fYWxsb3dEZXNrdG9wID0gb3B0aW9ucy5hbGxvd0Rlc2t0b3AgPT09IHRydWU7XG4gIHRoaXMuX3VzZVJlZGlyZWN0Rm9ySU9TID0gb3B0aW9ucy51c2VSZWRpcmVjdEZvcklPUyA9PT0gdHJ1ZTtcbiAgdGhpcy5fcHJvZmlsZUlkID0gb3B0aW9ucy5wcm9maWxlSWQ7XG4gIHRoaXMuX2Rpc3BsYXlOYW1lID0gb3B0aW9ucy5kaXNwbGF5TmFtZTtcbiAgdGhpcy5fZGVlcExpbmtSZXR1cm5VcmwgPSBvcHRpb25zLmRlZXBMaW5rUmV0dXJuVXJsO1xuICB0aGlzLl9pZ25vcmVIaXN0b3J5Q2hhbmdlcyA9IG9wdGlvbnMuaWdub3JlSGlzdG9yeUNoYW5nZXM7XG4gIHRoaXMuX3BheW1lbnRNZXRob2RVc2FnZSA9IChvcHRpb25zLnBheW1lbnRNZXRob2RVc2FnZSB8fCBcIlwiKS50b1VwcGVyQ2FzZSgpO1xuICB0aGlzLl9zaG91bGRVc2VMZWdhY3lGbG93ID0gIXRoaXMuX3BheW1lbnRNZXRob2RVc2FnZTtcbiAgdGhpcy5fcmVxdWlyZU1hbnVhbFJldHVybiA9IG9wdGlvbnMucmVxdWlyZU1hbnVhbFJldHVybiA9PT0gdHJ1ZTtcbiAgdGhpcy5fdXNlRGVza3RvcFFSRmxvdyA9XG4gICAgdGhpcy5fYWxsb3dEZXNrdG9wICYmIHRoaXMuX2lzRGVza3RvcCgpICYmICF0aGlzLl9hbGxvd0Rlc2t0b3BXZWJMb2dpbjtcbiAgdGhpcy5fdXNlQWxsb3dEZXNrdG9wV2ViTG9naW4gPVxuICAgIHRoaXMuX2FsbG93RGVza3RvcFdlYkxvZ2luICYmIHRoaXMuX2lzRGVza3RvcCgpO1xuICB0aGlzLl9jYW5ub3RIYXZlUmV0dXJuVXJscyA9IGluSWZyYW1lKCkgfHwgdGhpcy5fcmVxdWlyZU1hbnVhbFJldHVybjtcbiAgdGhpcy5fYWxsb3dBbmRyb2lkUmVjcmVhdGlvbiA9IG9wdGlvbnMuYWxsb3dBbmRyb2lkUmVjcmVhdGlvbiAhPT0gZmFsc2U7XG4gIHRoaXMuX21heFJldHJ5Q291bnQgPSAzO1xuICB0aGlzLl9jb2xsZWN0Q3VzdG9tZXJCaWxsaW5nQWRkcmVzcyA9XG4gICAgb3B0aW9ucy5jb2xsZWN0Q3VzdG9tZXJCaWxsaW5nQWRkcmVzcyB8fCBmYWxzZTtcbiAgdGhpcy5fY29sbGVjdEN1c3RvbWVyU2hpcHBpbmdBZGRyZXNzID1cbiAgICBvcHRpb25zLmNvbGxlY3RDdXN0b21lclNoaXBwaW5nQWRkcmVzcyB8fCBmYWxzZTtcbiAgdGhpcy5fbGluZUl0ZW1zID0gb3B0aW9ucy5saW5lSXRlbXM7XG4gIHRoaXMuX3N1YlRvdGFsQW1vdW50ID0gb3B0aW9ucy5zdWJUb3RhbEFtb3VudDtcbiAgdGhpcy5fZGlzY291bnRBbW91bnQgPSBvcHRpb25zLmRpc2NvdW50QW1vdW50O1xuICB0aGlzLl90YXhBbW91bnQgPSBvcHRpb25zLnRheEFtb3VudDtcbiAgdGhpcy5fc2hpcHBpbmdBbW91bnQgPSBvcHRpb25zLnNoaXBwaW5nQW1vdW50O1xuICB0aGlzLl90b3RhbEFtb3VudCA9IG9wdGlvbnMudG90YWxBbW91bnQ7XG5cbiAgdGhpcy5fc2hvdWxkQ3JlYXRlVmVubW9QYXltZW50Q29udGV4dCA9XG4gICAgdGhpcy5fY2Fubm90SGF2ZVJldHVyblVybHMgfHwgIXRoaXMuX3Nob3VsZFVzZUxlZ2FjeUZsb3c7XG5cbiAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICB0aGlzLl9jcmVhdGVQcm9taXNlLFxuICAgIFwidmVubW8uZGVza3RvcC1mbG93LmNvbmZpZ3VyZWQuXCIgKyBTdHJpbmcoQm9vbGVhbih0aGlzLl9hbGxvd0Rlc2t0b3ApKVxuICApO1xuXG4gIC8vIGlmIHRoZSB1cmwgaGFzIGEgdG9rZW5pemF0aW9uIHJlc3VsdCwgdGhhdCBpbmRpY2F0ZXNcbiAgLy8gdGhhdCBpdCBjYW5ub3QgYmUgdGhlIGRlc2t0b3AgZmxvdyBvciB0aGUgbWFudWFsIHJldHVyblxuICAvLyBmbG93LiBJZiBpdCdzIHRoZSBoYXNoIGNoYW5nZSB3aXRoIHBheW1lbnRNZXRob2RVc2FnZVxuICAvLyBmbG93LCB3ZSB3YW50IHRvIHNraXAgY3JlYXRpbmcgYSBuZXcgcGF5bWVudCBjb250ZXh0LCBzaW5jZVxuICAvLyB0aGVyZSBpcyBhbHJlYWR5IGEgcGVuZGluZyBwYXltZW50IGNvbnRleHQgd2FpdGluZyB0byBiZVxuICAvLyBwcm9jZXNzZWQuIEZvciB0aGUgaGFzaCBjaGFuZ2UgZmxvdyB3aXRob3V0IHBheW1lbnRNZXRob2RVc2FnZSxcbiAgLy8gbm8gZnVydGhlciBhY3Rpb25zIGFyZSBuZWVkZWQuXG4gIGlmICh0aGlzLmhhc1Rva2VuaXphdGlvblJlc3VsdCgpKSB7XG4gICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgIHRoaXMuX2NyZWF0ZVByb21pc2UsXG4gICAgICBcInZlbm1vLmFwcHN3aXRjaC5yZXR1cm4taW4tbmV3LXRhYlwiXG4gICAgKTtcbiAgfSBlbHNlIGlmICh0aGlzLl91c2VEZXNrdG9wUVJGbG93KSB7XG4gICAgdGhpcy5fY3JlYXRlUHJvbWlzZSA9IHRoaXMuX2NyZWF0ZVByb21pc2UudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICB2YXIgY29uZmlnID0gY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKS5nYXRld2F5Q29uZmlndXJhdGlvbjtcblxuICAgICAgcmV0dXJuIGNyZWF0ZVZlbm1vRGVza3RvcCh7XG4gICAgICAgIHVybDpcbiAgICAgICAgICBjb25maWcuYXNzZXRzVXJsICtcbiAgICAgICAgICBcIi93ZWIvXCIgK1xuICAgICAgICAgIFZFUlNJT04gK1xuICAgICAgICAgIFwiL2h0bWwvdmVubW8tZGVza3RvcC1mcmFtZS5odG1sXCIsXG4gICAgICAgIGVudmlyb25tZW50OlxuICAgICAgICAgIGNvbmZpZy5lbnZpcm9ubWVudCA9PT0gXCJwcm9kdWN0aW9uXCIgPyBcIlBST0RVQ1RJT05cIiA6IFwiU0FOREJPWFwiLFxuICAgICAgICBwcm9maWxlSWQ6IHNlbGYuX3Byb2ZpbGVJZCB8fCBjb25maWcucGF5V2l0aFZlbm1vLm1lcmNoYW50SWQsXG4gICAgICAgIHBheW1lbnRNZXRob2RVc2FnZTogc2VsZi5fcGF5bWVudE1ldGhvZFVzYWdlLFxuICAgICAgICBkaXNwbGF5TmFtZTogc2VsZi5fZGlzcGxheU5hbWUsXG4gICAgICAgIFByb21pc2U6IFByb21pc2UsXG4gICAgICAgIGFwaVJlcXVlc3Q6IGZ1bmN0aW9uIChxdWVyeSwgZGF0YSkge1xuICAgICAgICAgIHJldHVybiBjbGllbnRcbiAgICAgICAgICAgIC5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgYXBpOiBcImdyYXBoUUxBcGlcIixcbiAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IGRhdGEsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNlbmRFdmVudDogZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoc2VsZi5fY3JlYXRlUHJvbWlzZSwgZXZlbnROYW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgdmVyaWZ5RG9tYWluOiBpc1ZlcmlmaWVkRG9tYWluLFxuICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZlbm1vRGVza3RvcEluc3RhbmNlKSB7XG4gICAgICAgICAgc2VsZi5fdmVubW9EZXNrdG9wSW5zdGFuY2UgPSB2ZW5tb0Rlc2t0b3BJbnN0YW5jZTtcbiAgICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgICAgIFwidmVubW8uZGVza3RvcC1mbG93LnByZXNlbnRlZFwiXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHJldHVybiBjbGllbnQ7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICAgICAgICBcInZlbm1vLmRlc2t0b3AtZmxvdy5zZXR1cC1mYWlsZWRcIlxuICAgICAgICAgICk7XG4gICAgICAgICAgc2VsZi5fdXNlRGVza3RvcFFSRmxvdyA9IGZhbHNlO1xuXG4gICAgICAgICAgcmV0dXJuIGNsaWVudDtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodGhpcy5fc2hvdWxkQ3JlYXRlVmVubW9QYXltZW50Q29udGV4dCkge1xuICAgIC8vIHRoZXNlIHZhcmlhYmxlcyBhcmUgb25seSByZWxldmFudCBmb3IgdGhlIG1hbnVhbCByZXR1cm4gZmxvd1xuICAgIC8vIGFuZCB0aGV5IGFyZSBvbmx5IHNldCB0byBtYWtlIHRlc3RpbmcgZWFzaWVyIChzbyB0aGV5IGNhblxuICAgIC8vIGJlIG92ZXJ3cml0dGVuIHdpdGggc21hbGxlciB2YWx1ZXMgaW4gdGhlIHRlc3RzKVxuICAgIHRoaXMuX21vYmlsZVBvbGxpbmdJbnRlcnZhbCA9IERFRkFVTFRfTU9CSUxFX1BPTExJTkdfSU5URVJWQUw7XG4gICAgdGhpcy5fbW9iaWxlUG9sbGluZ0V4cGlyZXNUaHJlc2hvbGQgPSBERUZBVUxUX01PQklMRV9FWFBJUklOR19USFJFU0hPTEQ7XG5cbiAgICB0aGlzLl9jcmVhdGVQcm9taXNlID0gdGhpcy5fY3JlYXRlUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIHZhciBwYXltZW50Q29udGV4dFByb21pc2UsIHdlYkxvZ2luUHJvbWlzZTtcbiAgICAgIHZhciBhbmFseXRpY3NDYXRlZ29yeSA9IHNlbGYuX2Nhbm5vdEhhdmVSZXR1cm5VcmxzXG4gICAgICAgID8gXCJtYW51YWwtcmV0dXJuXCJcbiAgICAgICAgOiBcIm1vYmlsZS1wYXltZW50LWNvbnRleHRcIjtcbiAgICAgIHZhciBjb25maWcgPSBjbGllbnQuZ2V0Q29uZmlndXJhdGlvbigpO1xuXG4gICAgICB3ZWJMb2dpblByb21pc2UgPSBkZXNrdG9wV2ViTG9naW5cbiAgICAgICAgLnNldHVwRGVza3RvcFdlYkxvZ2luKHtcbiAgICAgICAgICBhc3NldHNVcmw6IGNvbmZpZy5nYXRld2F5Q29uZmlndXJhdGlvbi5hc3NldHNVcmwsXG4gICAgICAgICAgZGVidWc6IGNvbmZpZy5pc0RlYnVnLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZnJhbWVTZXJ2aWNlSW5zdGFuY2UpIHtcbiAgICAgICAgICBzZWxmLl9mcmFtZVNlcnZpY2VJbnN0YW5jZSA9IGZyYW1lU2VydmljZUluc3RhbmNlO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGRlc2t0b3BXZWJFcnIpIHtcbiAgICAgICAgICByZXR1cm4gZGVza3RvcFdlYkVycjtcbiAgICAgICAgfSk7XG5cbiAgICAgIHNlbGYuX21vYmlsZVBvbGxpbmdDb250ZXh0RW52aXJvbm1lbnQgPVxuICAgICAgICBjb25maWcuZ2F0ZXdheUNvbmZpZ3VyYXRpb24uZW52aXJvbm1lbnQudG9VcHBlckNhc2UoKTtcblxuICAgICAgcGF5bWVudENvbnRleHRQcm9taXNlID0gc2VsZlxuICAgICAgICAuX2NyZWF0ZVZlbm1vUGF5bWVudENvbnRleHQoY2xpZW50KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICAgICAgICBcInZlbm1vLlwiICsgYW5hbHl0aWNzQ2F0ZWdvcnkgKyBcIi5wcmVzZW50ZWRcIlxuICAgICAgICAgICk7XG5cbiAgICAgICAgICByZXR1cm4gY2xpZW50O1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgICBzZWxmLl9jcmVhdGVQcm9taXNlLFxuICAgICAgICAgICAgXCJ2ZW5tby5cIiArIGFuYWx5dGljc0NhdGVnb3J5ICsgXCIuc2V0dXAtZmFpbGVkXCJcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICAgICAgdHlwZTogZXJyb3JzLlZFTk1PX01PQklMRV9QQVlNRU5UX0NPTlRFWFRfU0VUVVBfRkFJTEVELnR5cGUsXG4gICAgICAgICAgICAgIGNvZGU6IGVycm9ycy5WRU5NT19NT0JJTEVfUEFZTUVOVF9DT05URVhUX1NFVFVQX0ZBSUxFRC5jb2RlLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBpc1ZhbGlkYXRpb25FcnJvcihlcnIpXG4gICAgICAgICAgICAgICAgPyBlcnIuZGV0YWlscy5vcmlnaW5hbEVycm9yWzBdLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA6IGVycm9ycy5WRU5NT19NT0JJTEVfUEFZTUVOVF9DT05URVhUX1NFVFVQX0ZBSUxFRC5tZXNzYWdlLFxuICAgICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgcmV0dXJuIEV4dGVuZGVkUHJvbWlzZS5hbGwoW3dlYkxvZ2luUHJvbWlzZSwgcGF5bWVudENvbnRleHRQcm9taXNlXSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgICAgICB2YXIgcGF5bWVudENvbnRleHRSZXN1bHQgPSByZXN1bHRzWzFdOyAvLyBXZSBvbmx5IGNhcmUgYWJvdXQgdGhlIHJldHVybmVkIHZhbHVlIG9mIHRoZSBwYXltZW50Q29udGV4dFByb21pc2VcblxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocGF5bWVudENvbnRleHRSZXN1bHQpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKHByb21pc2VFcnIpIHtcbiAgICAgICAgICAvLyBFeHRlbmRlZFByb21pc2UuYWxsIHJldHVybnMganVzdCBvbmUgZXJyb3IgYW5kIGl0J3MgZWl0aGVyIHdoaWNoIGZhaWxzIGZpcnN0L2F0IGFsbC5cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocHJvbWlzZUVycik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRhdGlvbkVycm9yKGVycikge1xuICByZXR1cm4gKFxuICAgIGVyci5kZXRhaWxzICYmXG4gICAgZXJyLmRldGFpbHMub3JpZ2luYWxFcnJvciAmJlxuICAgIGVyci5kZXRhaWxzLm9yaWdpbmFsRXJyb3JbMF0gJiZcbiAgICBlcnIuZGV0YWlscy5vcmlnaW5hbEVycm9yWzBdLmV4dGVuc2lvbnMgJiZcbiAgICBlcnIuZGV0YWlscy5vcmlnaW5hbEVycm9yWzBdLmV4dGVuc2lvbnMuZXJyb3JDbGFzcyA9PT0gXCJWQUxJREFUSU9OXCIgJiZcbiAgICBlcnIuZGV0YWlscy5vcmlnaW5hbEVycm9yWzBdLmV4dGVuc2lvbnMuZXJyb3JUeXBlID09PSBcInVzZXJfZXJyb3JcIlxuICApO1xufVxuXG5WZW5tby5wcm90b3R5cGUuX2NyZWF0ZVZlbm1vUGF5bWVudENvbnRleHQgPSBmdW5jdGlvbiAoXG4gIGNsaWVudCxcbiAgY2FuY2VsSWZUb2tlbml6YXRpb25JblByb2dyZXNzXG4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSwgdHJhbnNhY3Rpb25EZXRhaWxzO1xuICB2YXIgY29uZmlndXJhdGlvbiA9IGNsaWVudC5nZXRDb25maWd1cmF0aW9uKCk7XG4gIHZhciB2ZW5tb0NvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uLmdhdGV3YXlDb25maWd1cmF0aW9uLnBheVdpdGhWZW5tbztcbiAgdmFyIHRyYW5zYWN0aW9uRGV0YWlsc1ByZXNlbnQgPSBmYWxzZTtcblxuICBpZiAoIXRoaXMuX3Nob3VsZENyZWF0ZVZlbm1vUGF5bWVudENvbnRleHQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBpZiAodGhpcy5fc2hvdWxkVXNlTGVnYWN5Rmxvdykge1xuICAgIHByb21pc2UgPSBjbGllbnRcbiAgICAgIC5yZXF1ZXN0KHtcbiAgICAgICAgYXBpOiBcImdyYXBoUUxBcGlcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHF1ZXJ5OiBncmFwaHFsUXVlcmllcy5MRUdBQ1lfQ1JFQVRFX1BBWU1FTlRfQ09OVEVYVF9RVUVSWSxcbiAgICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICAgIGVudmlyb25tZW50OiB0aGlzLl9tb2JpbGVQb2xsaW5nQ29udGV4dEVudmlyb25tZW50LFxuICAgICAgICAgICAgICBpbnRlbnQ6IFwiUEFZX0ZST01fQVBQXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICAgIC5kYXRhLmNyZWF0ZVZlbm1vUVJDb2RlUGF5bWVudENvbnRleHQudmVubW9RUkNvZGVQYXltZW50Q29udGV4dDtcbiAgICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIE1lcmNoYW50cyBhcmUgbm90IGFsbG93ZWQgdG8gY29sbGVjdCB1c2VyIGFkZHJlc3NlcyB1bmxlc3MgRUNEIChFbnJpY2hlZCBDdXN0b21lciBEYXRhKSBpcyBlbmFibGVkIG9uIHRoZSBCVCBDb250cm9sIFBhbmVsLlxuICAgIGlmIChcbiAgICAgICh0aGlzLl9jb2xsZWN0Q3VzdG9tZXJCaWxsaW5nQWRkcmVzcyB8fFxuICAgICAgICB0aGlzLl9jb2xsZWN0Q3VzdG9tZXJTaGlwcGluZ0FkZHJlc3MpICYmXG4gICAgICAhdmVubW9Db25maWd1cmF0aW9uLmVucmljaGVkQ3VzdG9tZXJEYXRhRW5hYmxlZFxuICAgICkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVkVOTU9fRUNEX0RJU0FCTEVEKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpbmVJdGVtcykge1xuICAgICAgdGhpcy5fbGluZUl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgaXRlbS51bml0VGF4QW1vdW50ID0gaXRlbS51bml0VGF4QW1vdW50IHx8IFwiMFwiO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRyYW5zYWN0aW9uRGV0YWlscyA9IHtcbiAgICAgIHN1YlRvdGFsQW1vdW50OiB0aGlzLl9zdWJUb3RhbEFtb3VudCxcbiAgICAgIGRpc2NvdW50QW1vdW50OiB0aGlzLl9kaXNjb3VudEFtb3VudCxcbiAgICAgIHRheEFtb3VudDogdGhpcy5fdGF4QW1vdW50LFxuICAgICAgc2hpcHBpbmdBbW91bnQ6IHRoaXMuX3NoaXBwaW5nQW1vdW50LFxuICAgICAgdG90YWxBbW91bnQ6IHRoaXMuX3RvdGFsQW1vdW50LFxuICAgICAgbGluZUl0ZW1zOiB0aGlzLl9saW5lSXRlbXMsXG4gICAgfTtcbiAgICB0cmFuc2FjdGlvbkRldGFpbHNQcmVzZW50ID0gT2JqZWN0LmtleXModHJhbnNhY3Rpb25EZXRhaWxzKS5zb21lKGZ1bmN0aW9uIChcbiAgICAgIGRldGFpbFxuICAgICkge1xuICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uRGV0YWlsc1tkZXRhaWxdICE9PSB1bmRlZmluZWQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZpbmVkXG4gICAgfSk7XG4gICAgcHJvbWlzZSA9IGNsaWVudFxuICAgICAgLnJlcXVlc3Qoe1xuICAgICAgICBhcGk6IFwiZ3JhcGhRTEFwaVwiLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcXVlcnk6IGdyYXBocWxRdWVyaWVzLkNSRUFURV9QQVlNRU5UX0NPTlRFWFRfUVVFUlksXG4gICAgICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgICBwYXltZW50TWV0aG9kVXNhZ2U6IHRoaXMuX3BheW1lbnRNZXRob2RVc2FnZSxcbiAgICAgICAgICAgICAgaW50ZW50OiBcIkNPTlRJTlVFXCIsXG4gICAgICAgICAgICAgIGN1c3RvbWVyQ2xpZW50OiBcIk1PQklMRV9XRUJcIixcbiAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IHRoaXMuX2Rpc3BsYXlOYW1lLFxuICAgICAgICAgICAgICBwYXlzaGVldERldGFpbHM6IHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0Q3VzdG9tZXJCaWxsaW5nQWRkcmVzczpcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxlY3RDdXN0b21lckJpbGxpbmdBZGRyZXNzLFxuICAgICAgICAgICAgICAgIGNvbGxlY3RDdXN0b21lclNoaXBwaW5nQWRkcmVzczpcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxlY3RDdXN0b21lclNoaXBwaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkRldGFpbHM6IHRyYW5zYWN0aW9uRGV0YWlsc1ByZXNlbnRcbiAgICAgICAgICAgICAgICAgID8gdHJhbnNhY3Rpb25EZXRhaWxzXG4gICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZmluZWRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuY3JlYXRlVmVubW9QYXltZW50Q29udGV4dC52ZW5tb1BheW1lbnRDb250ZXh0O1xuICAgICAgfSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIGV4cGlyZWRUaW1lID0gbmV3IERhdGUoY29udGV4dC5leHBpcmVzQXQpIC0gbmV3IERhdGUoY29udGV4dC5jcmVhdGVkQXQpO1xuICAgIHZhciByZWZyZXNoSW4gPSBleHBpcmVkVGltZSAqIDAuNjY2NjtcblxuICAgIC8vIHByZXZlbnRzIG11bHRpcGxlIHNldFRpbWVvdXRzIGZyb20gZmlyaW5nIGZyb20gc2VwYXJhdGUgY2FsbHNcbiAgICAvLyB0byBjcmVhdGUgYSBwYXltZW50IGNvbnRleHQgYnkgY2FuY2VsaW5nIHRoZSBwcmV2aW91cyBvbmVcbiAgICAvLyBpZiB0aGVyZSBpcyBhIHBlbmRpbmcgY2FsbFxuICAgIGNsZWFyVGltZW91dChzZWxmLl9yZWZyZXNoUGF5bWVudENvbnRleHRUaW1lb3V0KTtcbiAgICBzZWxmLl9yZWZyZXNoUGF5bWVudENvbnRleHRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5fdG9rZW5pemF0aW9uSW5Qcm9ncmVzcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWxmLl9jcmVhdGVWZW5tb1BheW1lbnRDb250ZXh0KGNsaWVudCwgdHJ1ZSk7XG4gICAgfSwgcmVmcmVzaEluKTtcblxuICAgIGlmIChjYW5jZWxJZlRva2VuaXphdGlvbkluUHJvZ3Jlc3MgJiYgc2VsZi5fdG9rZW5pemF0aW9uSW5Qcm9ncmVzcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGYuX3Zlbm1vUGF5bWVudENvbnRleHRTdGF0dXMgPSBjb250ZXh0LnN0YXR1cztcbiAgICBzZWxmLl92ZW5tb1BheW1lbnRDb250ZXh0SWQgPSBjb250ZXh0LmlkO1xuICB9KTtcbn07XG5cblZlbm1vLnByb3RvdHlwZS5hcHBTd2l0Y2ggPSBmdW5jdGlvbiAodXJsKSB7XG4gIGlmICh0aGlzLl9kZWVwTGlua1JldHVyblVybCkge1xuICAgIGlmIChpc0lvc1dlYnZpZXdJbkRlZXBMaW5rUmV0dXJuVXJsRmxvdygpKSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICB0aGlzLl9jcmVhdGVQcm9taXNlLFxuICAgICAgICBcInZlbm1vLmFwcHN3aXRjaC5zdGFydC5pb3Mtd2Vidmlld1wiXG4gICAgICApO1xuICAgICAgLy8gRGVlcCBsaW5rIFVSTHMgZG8gbm90IGxhdW5jaCBpT1MgYXBwcyBmcm9tIGEgd2VidmlldyB3aGVuIHVzaW5nIHdpbmRvdy5vcGVuIG9yIFBvcHVwQnJpZGdlLm9wZW4uXG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgd2luZG93LnBvcHVwQnJpZGdlICYmXG4gICAgICB0eXBlb2Ygd2luZG93LnBvcHVwQnJpZGdlLm9wZW4gPT09IFwiZnVuY3Rpb25cIlxuICAgICkge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgdGhpcy5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgXCJ2ZW5tby5hcHBzd2l0Y2guc3RhcnQucG9wdXAtYnJpZGdlXCJcbiAgICAgICk7XG4gICAgICB3aW5kb3cucG9wdXBCcmlkZ2Uub3Blbih1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHRoaXMuX2NyZWF0ZVByb21pc2UsIFwidmVubW8uYXBwc3dpdGNoLnN0YXJ0LndlYnZpZXdcIik7XG4gICAgICB3aW5kb3cub3Blbih1cmwpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHRoaXMuX2NyZWF0ZVByb21pc2UsIFwidmVubW8uYXBwc3dpdGNoLnN0YXJ0LmJyb3dzZXJcIik7XG5cbiAgICBpZiAoXG4gICAgICBicm93c2VyRGV0ZWN0aW9uLmRvZXNOb3RTdXBwb3J0V2luZG93T3BlbkluSW9zKCkgfHxcbiAgICAgIHRoaXMuX3Nob3VsZFVzZVJlZGlyZWN0U3RyYXRlZ3koKVxuICAgICkge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5vcGVuKHVybCk7XG4gICAgfVxuICB9XG59O1xuXG5WZW5tby5wcm90b3R5cGUuZ2V0VXJsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlUHJvbWlzZS50aGVuKFxuICAgIGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIHZhciBjb25maWd1cmF0aW9uID0gY2xpZW50LmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICAgIHZhciBwYXJhbXMgPSB7fTtcbiAgICAgIHZhciBjdXJyZW50VXJsID1cbiAgICAgICAgdGhpcy5fZGVlcExpbmtSZXR1cm5VcmwgfHxcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaGFzaCwgXCJcIik7XG4gICAgICB2YXIgdmVubW9Db25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbi5nYXRld2F5Q29uZmlndXJhdGlvbi5wYXlXaXRoVmVubW87XG4gICAgICB2YXIgYW5hbHl0aWNzTWV0YWRhdGEgPSBjb25maWd1cmF0aW9uLmFuYWx5dGljc01ldGFkYXRhO1xuICAgICAgdmFyIGFjY2Vzc1Rva2VuID0gdmVubW9Db25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuO1xuICAgICAgdmFyIGJyYWludHJlZURhdGEgPSB7XG4gICAgICAgIF9tZXRhOiB7XG4gICAgICAgICAgdmVyc2lvbjogYW5hbHl0aWNzTWV0YWRhdGEuc2RrVmVyc2lvbixcbiAgICAgICAgICBpbnRlZ3JhdGlvbjogYW5hbHl0aWNzTWV0YWRhdGEuaW50ZWdyYXRpb24sXG4gICAgICAgICAgcGxhdGZvcm06IGFuYWx5dGljc01ldGFkYXRhLnBsYXRmb3JtLFxuICAgICAgICAgIHNlc3Npb25JZDogYW5hbHl0aWNzTWV0YWRhdGEuc2Vzc2lvbklkLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgdGhpcy5faXNEZWJ1ZyA9IGNvbmZpZ3VyYXRpb24uaXNEZWJ1ZztcbiAgICAgIHRoaXMuX2Fzc2V0c1VybCA9IGNvbmZpZ3VyYXRpb24uZ2F0ZXdheUNvbmZpZ3VyYXRpb24uYXNzZXRzVXJsO1xuXG4gICAgICBjdXJyZW50VXJsID0gY3VycmVudFVybC5yZXBsYWNlKC8jKiQvLCBcIlwiKTtcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG4gICAgICBpZiAodGhpcy5fdmVubW9QYXltZW50Q29udGV4dElkKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG91bGRVc2VMZWdhY3lGbG93KSB7XG4gICAgICAgICAgLy8gTkVYVF9NQUpPUl9WRVJTSU9OIHN0b3AgYWRkaW5nIHRoZSBjb250ZXh0IGlkIHRvIHRoZSBhY2Nlc3MgdG9rZW4uXG4gICAgICAgICAgLy8gdGhlIGNvbnRleHQgaWQgaXMgcGxhY2VkIGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmxpdHlcbiAgICAgICAgICAvLyB3aXRoIHZlcnNpb25zIG9mIHRoZSB2ZW5tbyBhcHAgdGhhdCBkaWQgbm90IHN1cHBvcnRcbiAgICAgICAgICAvLyBwdWxsaW5nIHRoZSByZXNvdXJjZSBpZCBvZmYgb2YgdGhlIHF1ZXJ5IHBhcmFtc1xuICAgICAgICAgIGFjY2Vzc1Rva2VuICs9IFwifHBjaWQ6XCIgKyB0aGlzLl92ZW5tb1BheW1lbnRDb250ZXh0SWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyYW1zLnJlc291cmNlX2lkID0gdGhpcy5fdmVubW9QYXltZW50Q29udGV4dElkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9zaG91bGRJbmNsdWRlUmV0dXJuVXJscygpIHx8IHRoaXMuX3VzZUFsbG93RGVza3RvcFdlYkxvZ2luKSB7XG4gICAgICAgIGlmICh0aGlzLl91c2VBbGxvd0Rlc2t0b3BXZWJMb2dpbikge1xuICAgICAgICAgIGN1cnJlbnRVcmwgPVxuICAgICAgICAgICAgdGhpcy5fYXNzZXRzVXJsICsgXCIvd2ViL1wiICsgVkVSU0lPTiArIFwiL2h0bWwvcmVkaXJlY3QtZnJhbWUuaHRtbFwiO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtc1tcIngtc3VjY2Vzc1wiXSA9IGN1cnJlbnRVcmwgKyBcIiN2ZW5tb1N1Y2Nlc3M9MVwiO1xuICAgICAgICBwYXJhbXNbXCJ4LWNhbmNlbFwiXSA9IGN1cnJlbnRVcmwgKyBcIiN2ZW5tb0NhbmNlbD0xXCI7XG4gICAgICAgIHBhcmFtc1tcIngtZXJyb3JcIl0gPSBjdXJyZW50VXJsICsgXCIjdmVubW9FcnJvcj0xXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXNbXCJ4LXN1Y2Nlc3NcIl0gPSBcIk5PT1BcIjtcbiAgICAgICAgcGFyYW1zW1wieC1jYW5jZWxcIl0gPSBcIk5PT1BcIjtcbiAgICAgICAgcGFyYW1zW1wieC1lcnJvclwiXSA9IFwiTk9PUFwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2FsbG93QW5kcm9pZFJlY3JlYXRpb24pIHtcbiAgICAgICAgcGFyYW1zLmFsbG93QW5kcm9pZFJlY3JlYXRpb24gPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zLmFsbG93QW5kcm9pZFJlY3JlYXRpb24gPSAxO1xuICAgICAgfVxuXG4gICAgICBwYXJhbXMudWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgIHBhcmFtcy5icmFpbnRyZWVfbWVyY2hhbnRfaWQgPVxuICAgICAgICB0aGlzLl9wcm9maWxlSWQgfHwgdmVubW9Db25maWd1cmF0aW9uLm1lcmNoYW50SWQ7XG4gICAgICBwYXJhbXMuYnJhaW50cmVlX2FjY2Vzc190b2tlbiA9IGFjY2Vzc1Rva2VuO1xuICAgICAgcGFyYW1zLmJyYWludHJlZV9lbnZpcm9ubWVudCA9IHZlbm1vQ29uZmlndXJhdGlvbi5lbnZpcm9ubWVudDtcbiAgICAgIHBhcmFtcy5icmFpbnRyZWVfc2RrX2RhdGEgPSBidG9hKEpTT04uc3RyaW5naWZ5KGJyYWludHJlZURhdGEpKTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgZ2V0VmVubW9Vcmwoe1xuICAgICAgICAgIHVzZUFsbG93RGVza3RvcFdlYkxvZ2luOiB0aGlzLl91c2VBbGxvd0Rlc2t0b3BXZWJMb2dpbixcbiAgICAgICAgICBtb2JpbGVXZWJGYWxsQmFjazogdGhpcy5fbW9iaWxlV2ViRmFsbEJhY2ssXG4gICAgICAgIH0pICtcbiAgICAgICAgXCI/XCIgK1xuICAgICAgICBxdWVyeXN0cmluZy5zdHJpbmdpZnkocGFyYW1zKVxuICAgICAgKTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBjdXJyZW50IGJyb3dzZXIgc3VwcG9ydHMgVmVubW8gYXMgYSBwYXltZW50IG1ldGhvZC4gUGxlYXNlIG5vdGUgdGhhdCBpT1MgQ2hyb21lIGlzIG5vdCBzdXBwb3J0ZWQgd2hlbiB0aGUgVmVubW8gYnV0dG9uIGlzIHJlbmRlcmVkIGluIGFuIGlGcmFtZS5cbiAqXG4gKiBJZiBgb3B0aW9ucy5hbGxvd05ld0Jyb3dzZXJUYWJgIGlzIGZhbHNlIHdoZW4gY2FsbGluZyB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvdmVubW8uY3JlYXRlfHZlbm1vLmNyZWF0ZX0sIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRydWUgb25seSBmb3IgYnJvd3NlcnMga25vd24gdG8gc3VwcG9ydCByZXR1cm5pbmcgZnJvbSB0aGUgVmVubW8gYXBwIHRvIHRoZSBzYW1lIGJyb3dzZXIgdGFiLiBDdXJyZW50bHksIHRoaXMgaXMgbGltaXRlZCB0byBpT1MgU2FmYXJpIGFuZCBBbmRyb2lkIENocm9tZS5cbiAqIElmIGBvcHRpb25zLmFsbG93V2Vidmlld3NgIGlzIGZhbHNlIHdoZW4gY2FsbGluZyB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvdmVubW8uY3JlYXRlfHZlbm1vLmNyZWF0ZX0sIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRydWUgb25seSBmb3IgbW9iaWxlIGJyb3dzZXJzIHRoYXQgYXJlIG5vdCB3ZWJ2aWV3cy5cbiAqIEBwdWJsaWNcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgc3VwcG9ydGVkLCBmYWxzZSBpZiBub3QuXG4gKi9cblZlbm1vLnByb3RvdHlwZS5pc0Jyb3dzZXJTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0Jyb3dzZXJTdXBwb3J0ZWQuaXNCcm93c2VyU3VwcG9ydGVkKHtcbiAgICBhbGxvd05ld0Jyb3dzZXJUYWI6IHRoaXMuX2FsbG93TmV3QnJvd3NlclRhYixcbiAgICBhbGxvd1dlYnZpZXdzOiB0aGlzLl9hbGxvd1dlYnZpZXdzLFxuICAgIGFsbG93RGVza3RvcDogdGhpcy5fYWxsb3dEZXNrdG9wLFxuICAgIGFsbG93RGVza3RvcFdlYkxvZ2luOiB0aGlzLl9hbGxvd0Rlc2t0b3BXZWJMb2dpbixcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciBhIFZlbm1vIHRva2VuaXphdGlvbiByZXN1bHQgaXMgcmVhZHkgdG8gYmUgcHJvY2Vzc2VkIGltbWVkaWF0ZWx5LlxuICpcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgaW5pdGlhbGl6YXRpb24gdG8gc2VlIGlmIHRoZSByZXN1bHQgb2YgVmVubW8gYXV0aG9yaXphdGlvbiBpcyBhdmFpbGFibGUuIElmIGl0IHJldHVybnMgdHJ1ZSwgY2FsbCB7QGxpbmsgVmVubW8jdG9rZW5pemV8dG9rZW5pemV9IGltbWVkaWF0ZWx5IHRvIHByb2Nlc3MgdGhlIHJlc3VsdHMuXG4gKlxuICogQHB1YmxpY1xuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHJlc3VsdHMgb2YgVmVubW8gcGF5bWVudCBhdXRob3JpemF0aW9uIGFyZSBhdmFpbGFibGUgYW5kIHJlYWR5IHRvIHByb2Nlc3MuXG4gKi9cblZlbm1vLnByb3RvdHlwZS5oYXNUb2tlbml6YXRpb25SZXN1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9oYXNUb2tlbml6YXRpb25SZXN1bHQoKTtcbn07XG5cbi8vIGEgcHJpdmF0ZSB2ZXJzaW9uIHRoYXQgbGV0cyB1cyBwYXNzIGluIGEgY3VzdG9tIGhhc2hcbi8vIHdoZW4gbGlzdGVuaW5nIG9uIGEgaGFzaGNoYW5nZSBldmVudFxuVmVubW8ucHJvdG90eXBlLl9oYXNUb2tlbml6YXRpb25SZXN1bHQgPSBmdW5jdGlvbiAoaGFzaCkge1xuICB2YXIgcGFyYW1zID0gZ2V0RnJhZ21lbnRQYXJhbWV0ZXJzKGhhc2gpO1xuXG4gIHJldHVybiAoXG4gICAgdHlwZW9mIChwYXJhbXMudmVubW9TdWNjZXNzIHx8IHBhcmFtcy52ZW5tb0Vycm9yIHx8IHBhcmFtcy52ZW5tb0NhbmNlbCkgIT09XG4gICAgXCJ1bmRlZmluZWRcIlxuICApO1xufTtcblxuVmVubW8ucHJvdG90eXBlLl9zaG91bGRJbmNsdWRlUmV0dXJuVXJscyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gd2hlbiBhIGRlZXAgbGluayByZXR1cm4gdXJsIGlzIHBhc3NlZCwgd2Ugc2hvdWxkIGFsd2F5c1xuICAvLyByZXNwZWN0IGl0IGFuZCBpbmNsdWRlIHRoZSByZXR1cm4gdXJscyBzbyB0aGUgdmVubW8gYXBwXG4gIC8vIGNhbiBhcHAgc3dpdGNoIGJhY2sgdG8gaXRcbiAgaWYgKHRoaXMuX2RlZXBMaW5rUmV0dXJuVXJsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBzZGsgaXMgaW5pdGlhbGl6ZWQgd2l0aGluIGFuIGlmcmFtZSwgaXQnc1xuICAvLyBpbXBvc3NpYmxlIHRvIHJldHVybiBiYWNrIHRvIHRoZSBjb3JyZWN0IHBsYWNlIGF1dG9tYXRpY2FsbHlcbiAgLy8gd2l0aG91dCBhbHNvIHNldHRpbmcgYSBkZWVwTGlua1JldHVyblVybC4gV2hlbiB0aGUgcmV0dXJuXG4gIC8vIHVybHMgYXJlIG9taXR0ZWQsIHRoZSBWZW5tbyBhcHAgcHJvbXB0cyB0aGUgdXNlciB0byByZXR1cm5cbiAgLy8gbWFudWFsbHkuXG4gIHJldHVybiAhdGhpcy5fY2Fubm90SGF2ZVJldHVyblVybHM7XG59O1xuXG5WZW5tby5wcm90b3R5cGUuX2lzRGVza3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEoYnJvd3NlckRldGVjdGlvbi5pc0lvcygpIHx8IGJyb3dzZXJEZXRlY3Rpb24uaXNBbmRyb2lkKCkpO1xufTtcblxuLyoqXG4gKiBMYXVuY2hlcyB0aGUgVmVubW8gZmxvdyBhbmQgcmV0dXJucyBhIG5vbmNlIHBheWxvYWQuXG4gKlxuICogSWYge0BsaW5rIFZlbm1vI2hhc1Rva2VuaXphdGlvblJlc3VsdHxoYXNUb2tlbml6YXRpb25SZXN1bHR9IHJldHVybnMgdHJ1ZSwgY2FsbGluZyB0b2tlbml6ZSB3aWxsIGltbWVkaWF0ZWx5IHByb2Nlc3MgYW5kIHJldHVybiB0aGUgcmVzdWx0cyB3aXRob3V0IGluaXRpYXRpbmcgdGhlIFZlbm1vIHBheW1lbnQgYXV0aG9yaXphdGlvbiBmbG93LlxuICpcbiAqIE9ubHkgb25lIFZlbm1vIGZsb3cgY2FuIGJlIGFjdGl2ZSBhdCBhIHRpbWUuIE9uZSB3YXkgdG8gYWNoaWV2ZSB0aGlzIGlzIHRvIGRpc2FibGUgeW91ciBWZW5tbyBidXR0b24gd2hpbGUgdGhlIGZsb3cgaXMgb3Blbi5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBmb3IgdG9rZW5pemF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnByb2Nlc3NSZXN1bHRzRGVsYXk9NTAwXSBUaGUgYW1vdW50IG9mIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHRvIGRlbGF5IHByb2Nlc3NpbmcgdGhlIHJlc3VsdHMuIEluIG1vc3QgY2FzZXMsIHRoaXMgdmFsdWUgc2hvdWxkIGJlIGxlZnQgYXMgdGhlIGRlZmF1bHQuXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBzZWNvbmQgYXJndW1lbnQsIDxjb2RlPmRhdGE8L2NvZGU+LCBpcyBhIHtAbGluayBWZW5tb350b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfS4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIHRoZSBtZXRob2Qgd2lsbCByZXR1cm4gYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIHtAbGluayBWZW5tb350b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfS5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKiBAZXhhbXBsZVxuICogYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICogICAvLyBEaXNhYmxlIHRoZSBidXR0b24gc28gdGhhdCB3ZSBkb24ndCBhdHRlbXB0IHRvIG9wZW4gbXVsdGlwbGUgcG9wdXBzLlxuICogICBidXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICpcbiAqICAgLy8gQmVjYXVzZSB0b2tlbml6ZSBvcGVucyBhIG5ldyB3aW5kb3csIHRoaXMgbXVzdCBiZSBjYWxsZWRcbiAqICAgLy8gYXMgYSByZXN1bHQgb2YgYSB1c2VyIGFjdGlvbiwgc3VjaCBhcyBhIGJ1dHRvbiBjbGljay5cbiAqICAgdmVubW9JbnN0YW5jZS50b2tlbml6ZSgpLnRoZW4oZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAqICAgICAvLyBTdWJtaXQgcGF5bG9hZC5ub25jZSB0byB5b3VyIHNlcnZlclxuICogICAgIC8vIFVzZSBwYXlsb2FkLnVzZXJuYW1lIHRvIGdldCB0aGUgVmVubW8gdXNlcm5hbWUgYW5kIGRpc3BsYXkgYW55IFVJXG4gKiAgIH0pLmNhdGNoKGZ1bmN0aW9uICh0b2tlbml6ZUVycm9yKSB7XG4gKiAgICAgLy8gSGFuZGxlIGZsb3cgZXJyb3JzIG9yIHByZW1hdHVyZSBmbG93IGNsb3N1cmVcbiAqICAgICBzd2l0Y2ggKHRva2VuaXplRXJyLmNvZGUpIHtcbiAqICAgICAgIGNhc2UgJ1ZFTk1PX0FQUF9DQU5DRUxFRCc6XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKCdVc2VyIGNhbmNlbGVkIFZlbm1vIGZsb3cuJyk7XG4gKiAgICAgICAgIGJyZWFrO1xuICogICAgICAgY2FzZSAnVkVOTU9fQ0FOQ0VMRUQnOlxuICogICAgICAgICBjb25zb2xlLmxvZygnVXNlciBjYW5jZWxlZCBWZW5tbywgb3IgVmVubW8gYXBwIGlzIG5vdCBhdmFpbGFibGUuJyk7XG4gKiAgICAgICAgIGJyZWFrO1xuICogICAgICAgZGVmYXVsdDpcbiAqICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IhJywgdG9rZW5pemVFcnIpO1xuICogICAgIH1cbiAqICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gKiAgICAgYnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAqICAgfSk7XG4gKiB9KTtcbiAqL1xuVmVubW8ucHJvdG90eXBlLnRva2VuaXplID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgdG9rZW5pemF0aW9uUHJvbWlzZTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAodGhpcy5fdG9rZW5pemF0aW9uSW5Qcm9ncmVzcyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVkVOTU9fVE9LRU5JWkFUSU9OX1JFUVVFU1RfQUNUSVZFKVxuICAgICk7XG4gIH1cblxuICB0aGlzLl90b2tlbml6YXRpb25JblByb2dyZXNzID0gdHJ1ZTtcbiAgaWYgKHRoaXMuX3VzZURlc2t0b3BRUkZsb3cpIHtcbiAgICAvLyBmb3IgdGhlIGRlc2t0b3AgZmxvdywgd2UgY3JlYXRlIGEgdmVubW8gcGF5bWVudFxuICAgIC8vIGNvbnRleHQgYW5kIHRoZW4gcHJlc2VudCBhIHFyIGNvZGUgbW9kYWwgdG8gdGhlXG4gICAgLy8gY3VzdG9tZXIgYW5kIHRoZXkgd2lsbCBvcGVuIHVwIHRoZWlyIHZlbm1vIGFwcFxuICAgIC8vIGFuZCBzY2FuIGl0IGFuZCBhcHByb3ZlIHRoZSBwdXJjaGFzZSBvbiB0aGVpclxuICAgIC8vIG1vYmlsZSBkZXZpY2UuIFRoZSBzZGsgd2lsbCBzdGFydCBwb2xsaW5nXG4gICAgLy8gaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIHdoZW4gdGhlIHN0YXR1cyBvZiB0aGVcbiAgICAvLyBwYXltZW50IGNvbnRleHQgaGFzIHVwZGF0ZWQgYW5kIHRoZW4gcGFzcyB0aGVcbiAgICAvLyByZXN1bHRpbmcgbm9uY2UgYmFjayB0byB0aGUgbWVyY2hhbnQuXG4gICAgdG9rZW5pemF0aW9uUHJvbWlzZSA9IHRoaXMuX3Rva2VuaXplRm9yRGVza3RvcFFSRmxvdyhvcHRpb25zKTtcbiAgfSBlbHNlIGlmICh0aGlzLl91c2VBbGxvd0Rlc2t0b3BXZWJMb2dpbikge1xuICAgIC8qKlxuICAgICAqIEZvciBEZXNrdG9wIFdlYiBMb2dpbiwgd2Ugb3BlbiBhIGJyb3dzZXIgcG9wdXAgdG8gYWxsb3cgZm9yIGF1dGhvcml6YXRpb24uIE9uY2UgYXV0aG9yaXplZCwgdGhlIHJlZGlyZWN0IHVybHMgYXJlIHVzZWQgYnkgVmVubW8sIGFuZCB3ZSBxdWVyeSB0aGUgQVBJIGZvciBhIHBheW1lbnQgY29udGV4dCBzdGF0dXMgdXBkYXRlLlxuICAgICAqXG4gICAgICogLSBQYXltZW50IGNvbnRleHQgaXMgY3JlYXRlZCBvbiBpbml0aWFsaXphdGlvblxuICAgICAqIC0gUG9wdXAgaXMgb3BlbmVkIHRvIFZlbm1vIGxvZ2luIHVybC5cbiAgICAgKiAgLSBUaGUgcGF5bWVudCBpcyBhdXRob3JpemVkIG9yIGNhbmNlbGVkLCBhbmQgdGhlIHBvcHVwIGlzIGNsb3NlZFxuICAgICAqIC0gT25jZSB0aGUgcG9wdXAgaXMgY2xvc2VkLCB3ZSBxdWVyeSB0aGUgQVBJIGZvciBhIHBheW1lbnQgY29udGV4dCBzdGF0dXMgdXBkYXRlXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIGFuIGFsdGVybmF0ZSwgb3B0LWluIGZsb3cgdG8gYmUgdXNlZCB0aGUgRGVza3RvcCBRUiBGbG93IGlzIG5vdCBkZXNpcmVkIGZvciBQYXkgd2l0aCBWZW5tbyBkZXNrdG9wIGV4cGVyaWVuY2VzLlxuICAgICAqL1xuICAgIHRva2VuaXphdGlvblByb21pc2UgPSB0aGlzLl90b2tlbml6ZVdlYkxvZ2luV2l0aFJlZGlyZWN0KCk7XG4gIH0gZWxzZSBpZiAodGhpcy5fY2Fubm90SGF2ZVJldHVyblVybHMpIHtcbiAgICAvLyBpbiB0aGUgbWFudWFsIHJldHVybiBzdHJhdGVneSwgd2UgY3JlYXRlIHRoZSBwYXltZW50XG4gICAgLy8gY29udGV4dCBvbiBpbml0aWFsaXphdGlvbiwgdGhlbiBjb250aW51YWxseSBwb2xsIG9uY2VcbiAgICAvLyB0aGUgYXBwIHN3aXRjaCBiZWdpbnMgdW50aWwgd2UgZ2V0IGEgcmVzcG9uc2UgaW5kaWNpYXRpbmdcbiAgICAvLyB0aGUgcGF5bWVudCBjb250ZXh0IHdhcyBhcHByb3ZlZCBieSB0aGUgY3VzdG9tZXIgb24gdGhlXG4gICAgLy8gVmVubW8gYXBwLiBUaGUgcGF5bWVudCBjb250ZXh0IHJlc3BvbnNlIGFsc28gaW5jbHVkZXMgYVxuICAgIC8vIG5vbmNlLiBUaGVyZSBhcmUgMiBjYXNlcyB3aGVyZSB3ZSB1c2UgdGhlIG1hbnVhbCByZXR1cm5cbiAgICAvLyBzdHJhdGVneTpcbiAgICAvLyAxLiB0aGUgc2RrIGlzIGluc3RhbnRpYXRlZCBpbiBhbiBpZnJhbWUsIGJlY2F1c2VcbiAgICAvLyAgICB0aGUgdmVubW8gYXBwIGlzIHVuYWJsZSB0byByZWRpcmVjdCBhdXRvbWF0aWNhbGx5XG4gICAgLy8gICAgd2hlbiB0aGF0IGlzIHRoZSBjYXNlIHNvIHdlIHJlbHkgb24gdGhlIGN1c3RvbWVyXG4gICAgLy8gICAgdG8gZG8gYSBtYW51YWwgcmVkaXJlY3QgYW5kIGNvbnRpbnVuYWxseSBwb2xsIGZvclxuICAgIC8vICAgIHVwZGF0ZXMgb24gdGhlIHBheW1lbnQgY29udGV4dCB0byBnZXQgdGhlIG5vbmNlXG4gICAgLy8gMi4gc2FtZSBkZWFsIGZvciB3aGVuIGByZXF1aXJlTWFudWFsUmV0dXJuYCBpcyBjb25maWd1cmVkXG4gICAgdG9rZW5pemF0aW9uUHJvbWlzZSA9IHRoaXMuX3Rva2VuaXplRm9yTW9iaWxlV2l0aE1hbnVhbFJldHVybigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBkZWZhdWx0IG1vYmlsZSBmbG93IGlzIHRvIGFwcCBzd2l0Y2ggdG8gdGhlXG4gICAgLy8gdmVubW8gYXBwLCBhbmQgdGhlbiBoYXZlIHRoZSB2ZW5tbyBhcHAgc3dpdGNoXG4gICAgLy8gYmFjayB0byB0aGUgcGFnZSB3aXRoIHRoZSB2ZW5tbyBub25jZSBkZXRhaWxzXG4gICAgLy8gZW5jb2RlZCBpbnRvIHRoZSBoYXNoIHBvcnRpb24gb2YgdGhlIHVybC4gSWZcbiAgICAvLyBgcGF5bWVudE1ldGhvZFVzYWdlYCBpcyBwcm92aWRlZCB3aGVuIGluc3RhbnRpYXRpbmdcbiAgICAvLyB0aGUgc2RrLCB3ZSBhbHNvIGNyZWF0ZSBhIHBheW1lbnQgY29udGV4dCBhbmQgcGFzc1xuICAgIC8vIHRoZSByZXNvdXJjZSBpZCB0byB0aGUgVmVubW8gYXBwIGR1cmluZyB0aGUgYXBwIHN3aXRjaC5cbiAgICAvLyBPbmNlIHdlIGdldCBhIHN1Y2Nlc2Z1bCByZXR1cm4sIHdlIHBpbmcgdGhlIHBheW1lbnRcbiAgICAvLyBjb250ZXh0IHF1ZXJ5IHRvIGdldCBhbnkgYWRkaXRpb25hbCBkYXRhIG5lZWRlZFxuICAgIC8vIHRvIHNlbmQgYmFjayB0byB0aGUgbWVyY2hhbnQuXG4gICAgdG9rZW5pemF0aW9uUHJvbWlzZSA9XG4gICAgICB0aGlzLl90b2tlbml6ZUZvck1vYmlsZVdpdGhIYXNoQ2hhbmdlTGlzdGVuZXJzKG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHRva2VuaXphdGlvblByb21pc2VcbiAgICAudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZVByb21pc2VcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVWZW5tb1BheW1lbnRDb250ZXh0KGNsaWVudCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl90b2tlbml6YXRpb25JblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICAgICAgICByZXR1cm4gZm9ybWF0VG9rZW5pemVQYXlsb2FkKHBheWxvYWQpO1xuICAgICAgICB9KTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICByZXR1cm4gc2VsZi5fY3JlYXRlUHJvbWlzZVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgICAgLy8gV2UgY3JlYXRlIGEgbmV3IFBheW1lbnQgQ29udGV4dCBiZWNhdXNlIGlmIHRoZSBsYXN0IG9uZSBmYWlsZWQsIHRoZW4gcHJlc3VtYWJseSB3ZSBkb24ndCB3YW50IHRvIHVzZSBpdCBhZ2Fpbi5cbiAgICAgICAgICAvLyBPbiB0aGUgZmlyc3QgcGFzcywgd2UgY3JlYXRlIHRoZSBwYXltZW50IGNvbnRleHQgYXQgaW5pdGlhbGl6YXRpb24sIGFuZCBzaW5jZSB3ZSB1c2VkIHRoYXQgZmlyc3Qgb25lIHdlIG5vdyBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgICAgICAvLyBmb3IgdGhlIG5leHQgdGltZSBzb21lb25lIHRyaWVzIHRvIHRva2VuaXplLlxuICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVWZW5tb1BheW1lbnRDb250ZXh0KGNsaWVudCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl90b2tlbml6YXRpb25JblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIENhbmNlbHMgdGhlIHZlbm1vIHRva2VuaXphdGlvbiBwcm9jZXNzXG4gKlxuICogQHB1YmxpY1xuICogQGZ1bmN0aW9uIFZlbm1vfmNhbmNlbFRva2VuaXphdGlvblxuICogQHJldHVybnMgeyhQcm9taXNlfHZvaWQpfSBSZXR1cm5zIGEgcHJvbWlzZSBpZiBubyBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiAqIEBleGFtcGxlXG4gKiB2ZW5tb1Rva2VuaXplQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICogICB2ZW5tb0luc3RhbmNlLnRva2VuaXplKCkudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICogICAgIC8vIGhhbmRsZSBwYXlsb2FkXG4gKiAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgICBpZiAoZXJyLmNvZGUgPT09ICdWRU5NT19UT0tFTklaQVRJT05fQ0FOQ0VMRURfQllfTUVSQ0hBTlQnKSB7XG4gKiAgICAgICAvLyB0b2tlbml6YXRpb24gd2FzIGNhbmNlbGVkIGJ5IGNhbGxpbmcgY2FuY2VsVG9rZW5pemF0aW9uXG4gKiAgICAgfVxuICogICB9KTtcbiAqIH0pO1xuICpcbiAqIHZlbm1vQ2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICogICAvLyBIaWRlIHRoZSBidXR0b24gd2hlbiB0aGUgdmVubW8gZmxvdyBpcyBub3QgaW4gcHJvZ3Jlc3NcbiAqICAgdmVubW9DYW5jZWxCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICpcbiAqICAgdmVubW9JbnN0YW5jZS5jYW5jZWxUb2tlbml6YXRpb24oKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAqICAgICAvLyBkb25lIGNhbmNlbGluZyB0aGUgZmxvd1xuICogICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gKiAgICAgLy8gc2hvdWxkIG9ubHkgZ2V0IGhlcmUgaWYgdGhlcmUgaXMgbm8gdG9rZW5pemF0aW9uIGluIHByb2dyZXNzXG4gKiAgIH0pO1xuICogfSk7XG4gKi9cblZlbm1vLnByb3RvdHlwZS5jYW5jZWxUb2tlbml6YXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5fdG9rZW5pemF0aW9uSW5Qcm9ncmVzcykge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVkVOTU9fVE9LRU5JWkFUSU9OX1JFUVVFU1RfTk9UX0FDVElWRSlcbiAgICApO1xuICB9XG5cbiAgdGhpcy5fcmVtb3ZlVmlzaWJpbGl0eUV2ZW50TGlzdGVuZXIoKTtcblxuICAvLyBpbXBvcnRhbnQgdG8gcmVqZWN0IHRoZSB0b2tlbml6YXRpb24gcHJvbWlzZSBmaXJzdFxuICAvLyBzbyB0aGUgdG9rZW5pemUgbWV0aG9kIHJlamVjdHMgd2l0aCB0aGlzIGVycm9yXG4gIC8vIHJhdGhlciB0aGFuIGEgY3VzdG9tZXIgY2FuY2VsZWQgZXJyb3IgaW4gdGhlIG1vYmlsZVxuICAvLyBwb2xsaW5nIGFuZCBkZXNrdG9wIGZsb3dzXG4gIGlmICh0aGlzLl90b2tlbml6ZVByb21pc2UpIHtcbiAgICB0aGlzLl90b2tlbml6ZVByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5WRU5NT19UT0tFTklaQVRJT05fQ0FOQ0VMRURfQllfTUVSQ0hBTlQpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgdGhpcy5fY2FuY2VsTW9iaWxlUGF5bWVudENvbnRleHQoKSxcbiAgICB0aGlzLl9jYW5jZWxWZW5tb0Rlc2t0b3BDb250ZXh0KCksXG4gIF0pO1xufTtcblxuVmVubW8ucHJvdG90eXBlLl90b2tlbml6ZVdlYkxvZ2luV2l0aFJlZGlyZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jcmVhdGVQcm9taXNlLCBcInZlbm1vLnRva2VuaXplLndlYi1sb2dpbi5zdGFydFwiKTtcbiAgdGhpcy5fdG9rZW5pemVQcm9taXNlID0gbmV3IEV4dGVuZGVkUHJvbWlzZSgpO1xuXG4gIHJldHVybiB0aGlzLmdldFVybCgpLnRoZW4oZnVuY3Rpb24gKHVybCkge1xuICAgIGRlc2t0b3BXZWJMb2dpblxuICAgICAgLnJ1bldlYkxvZ2luKHtcbiAgICAgICAgY2hlY2tGb3JTdGF0dXNDaGFuZ2U6XG4gICAgICAgICAgc2VsZi5fY2hlY2tQYXltZW50Q29udGV4dFN0YXR1c0FuZFByb2Nlc3NSZXN1bHQuYmluZChzZWxmKSxcbiAgICAgICAgY2FuY2VsVG9rZW5pemF0aW9uOiBzZWxmLmNhbmNlbFRva2VuaXphdGlvbi5iaW5kKHNlbGYpLFxuICAgICAgICBmcmFtZVNlcnZpY2VJbnN0YW5jZTogc2VsZi5fZnJhbWVTZXJ2aWNlSW5zdGFuY2UsXG4gICAgICAgIHZlbm1vVXJsOiB1cmwsXG4gICAgICAgIGRlYnVnOiBzZWxmLl9pc0RlYnVnLFxuICAgICAgICBjaGVja1BheW1lbnRDb250ZXh0U3RhdHVzOiBzZWxmLl9jaGVja1BheW1lbnRDb250ZXh0U3RhdHVzLmJpbmQoc2VsZiksXG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgICBzZWxmLl9jcmVhdGVQcm9taXNlLFxuICAgICAgICAgIFwidmVubW8udG9rZW5pemUud2ViLWxvZ2luLnN1Y2Nlc3NcIlxuICAgICAgICApO1xuXG4gICAgICAgIHNlbGYuX3Rva2VuaXplUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBwYXltZW50TWV0aG9kTm9uY2U6IHBheWxvYWQucGF5bWVudE1ldGhvZElkLFxuICAgICAgICAgIHVzZXJuYW1lOiBwYXlsb2FkLnVzZXJOYW1lLFxuICAgICAgICAgIHBheWVySW5mbzogcGF5bG9hZC5wYXllckluZm8sXG4gICAgICAgICAgaWQ6IHNlbGYuX3Zlbm1vUGF5bWVudENvbnRleHRJZCxcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgICBzZWxmLl9jcmVhdGVQcm9taXNlLFxuICAgICAgICAgIFwidmVubW8udG9rZW5pemUud2ViLWxvZ2luLmZhaWx1cmVcIlxuICAgICAgICApO1xuXG4gICAgICAgIHNlbGYuX3Rva2VuaXplUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHNlbGYuX3Rva2VuaXplUHJvbWlzZTtcbiAgfSk7XG59O1xuXG5WZW5tby5wcm90b3R5cGUuX3F1ZXJ5UGF5bWVudENvbnRleHRTdGF0dXMgPSBmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVQcm9taXNlXG4gICAgLnRoZW4oZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgdmFyIHF1ZXJ5ID0gc2VsZi5fc2hvdWxkVXNlTGVnYWN5Rmxvd1xuICAgICAgICA/IGdyYXBocWxRdWVyaWVzLkxFR0FDWV9WRU5NT19QQVlNRU5UX0NPTlRFWFRfU1RBVFVTX1FVRVJZXG4gICAgICAgIDogZ3JhcGhxbFF1ZXJpZXMuVkVOTU9fUEFZTUVOVF9DT05URVhUX1NUQVRVU19RVUVSWTtcblxuICAgICAgcmV0dXJuIGNsaWVudC5yZXF1ZXN0KHtcbiAgICAgICAgYXBpOiBcImdyYXBoUUxBcGlcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLm5vZGU7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFF1ZXJpZXMgdGhlIEdyYXBoUUwgQVBJIHRvIGdldCB0aGUgcGF5bWVudCBjb250ZXh0IGFuZCBwcm9jZXNzIHRoZSBzdGF0dXMuIFJldHJpZXMgdW50aWwgdGhlcmUgaXMgYW4gdXBkYXRlIHRvIHRoZSBwYXltZW50IGNvbnRleHQgc3RhdHVzLlxuICogQG5hbWUgVmVubW9+Y2hlY2tQYXltZW50Q29udGV4dFN0YXR1c0FuZFByb2Nlc3NSZXN1bHRcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7bnVtYmVyfSByZXRyeUNvdW50IFRoZSBjb3VudGVyIGZvciB0cmFja2luZyBudW1iZXIgb2YgcmV0cmllcyBtYWRlIGFnYWluc3QgdGhlIEFQSS5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZVxuICovXG5WZW5tby5wcm90b3R5cGUuX2NoZWNrUGF5bWVudENvbnRleHRTdGF0dXNBbmRQcm9jZXNzUmVzdWx0ID0gZnVuY3Rpb24gKFxuICByZXRyeUNvdW50XG4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHJldHVybiBzZWxmLl9jaGVja1BheW1lbnRDb250ZXh0U3RhdHVzKCkudGhlbihmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciByZXN1bHRTdGF0dXMgPSBub2RlLnN0YXR1cztcblxuICAgIGlmIChyZXN1bHRTdGF0dXMgIT09IHNlbGYuX3Zlbm1vUGF5bWVudENvbnRleHRTdGF0dXMpIHtcbiAgICAgIHNlbGYuX3Zlbm1vUGF5bWVudENvbnRleHRTdGF0dXMgPSByZXN1bHRTdGF0dXM7XG5cbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICAgIFwidmVubW8udG9rZW5pemUud2ViLWxvZ2luLnN0YXR1cy1jaGFuZ2VcIlxuICAgICAgKTtcblxuICAgICAgc3dpdGNoIChyZXN1bHRTdGF0dXMpIHtcbiAgICAgICAgY2FzZSBcIkFQUFJPVkVEXCI6XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKTtcbiAgICAgICAgY2FzZSBcIkNBTkNFTEVEXCI6XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5WRU5NT19DVVNUT01FUl9DQU5DRUxFRClcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIFwiRkFJTEVEXCI6XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5WRU5NT19UT0tFTklaQVRJT05fRkFJTEVEKVxuICAgICAgICAgICk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmIChyZXRyeUNvdW50IDwgc2VsZi5fbWF4UmV0cnlDb3VudCkge1xuICAgICAgICByZXRyeUNvdW50Kys7XG5cbiAgICAgICAgcmV0dXJuIHNlbGZcbiAgICAgICAgICAuX2NoZWNrUGF5bWVudENvbnRleHRTdGF0dXNBbmRQcm9jZXNzUmVzdWx0KHJldHJ5Q291bnQpXG4gICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlamVjdChuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlZFTk1PX1RPS0VOSVpBVElPTl9GQUlMRUQpKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5WZW5tby5wcm90b3R5cGUuX2NoZWNrUGF5bWVudENvbnRleHRTdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICByZXR1cm4gc2VsZlxuICAgIC5fcXVlcnlQYXltZW50Q29udGV4dFN0YXR1cyhzZWxmLl92ZW5tb1BheW1lbnRDb250ZXh0SWQpXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChuZXR3b3JrRXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICB0eXBlOiBlcnJvcnMuVkVOTU9fTkVUV09SS19FUlJPUi50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5WRU5NT19ORVRXT1JLX0VSUk9SLmNvZGUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JzLlZFTk1PX05FVFdPUktfRVJST1IubWVzc2FnZSxcbiAgICAgICAgICBkZXRhaWxzOiBuZXR3b3JrRXJyb3IsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobm9kZSk7XG4gICAgfSk7XG59O1xuXG5WZW5tby5wcm90b3R5cGUuX3BvbGxGb3JTdGF0dXNDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoRGF0ZS5ub3coKSA+IHNlbGYuX21vYmlsZVBvbGxpbmdDb250ZXh0RXhwaXJlc0luKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5WRU5NT19NT0JJTEVfUE9MTElOR19UT0tFTklaQVRJT05fVElNRU9VVClcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX3F1ZXJ5UGF5bWVudENvbnRleHRTdGF0dXModGhpcy5fdmVubW9QYXltZW50Q29udGV4dElkKVxuICAgIC5jYXRjaChmdW5jdGlvbiAobmV0d29ya0Vycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgdHlwZTogZXJyb3JzLlZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9ORVRXT1JLX0VSUk9SLnR5cGUsXG4gICAgICAgICAgY29kZTogZXJyb3JzLlZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9ORVRXT1JLX0VSUk9SLmNvZGUsXG4gICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgIGVycm9ycy5WRU5NT19NT0JJTEVfUE9MTElOR19UT0tFTklaQVRJT05fTkVUV09SS19FUlJPUi5tZXNzYWdlLFxuICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IG5ldHdvcmtFcnJvcixcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgbmV3U3RhdHVzID0gbm9kZS5zdGF0dXM7XG5cbiAgICAgIGlmIChuZXdTdGF0dXMgIT09IHNlbGYuX3Zlbm1vUGF5bWVudENvbnRleHRTdGF0dXMpIHtcbiAgICAgICAgc2VsZi5fdmVubW9QYXltZW50Q29udGV4dFN0YXR1cyA9IG5ld1N0YXR1cztcblxuICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICAgICAgXCJ2ZW5tby50b2tlbml6ZS5tYW51YWwtcmV0dXJuLnN0YXR1cy1jaGFuZ2UuXCIgK1xuICAgICAgICAgICAgbmV3U3RhdHVzLnRvTG93ZXJDYXNlKClcbiAgICAgICAgKTtcblxuICAgICAgICBzd2l0Y2ggKG5ld1N0YXR1cykge1xuICAgICAgICAgIGNhc2UgXCJFWFBJUkVEXCI6XG4gICAgICAgICAgY2FzZSBcIkZBSUxFRFwiOlxuICAgICAgICAgIGNhc2UgXCJDQU5DRUxFRFwiOlxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3IoXG4gICAgICAgICAgICAgICAgZXJyb3JzW1wiVkVOTU9fTU9CSUxFX1BPTExJTkdfVE9LRU5JWkFUSU9OX1wiICsgbmV3U3RhdHVzXVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNhc2UgXCJBUFBST1ZFRFwiOlxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKTtcbiAgICAgICAgICBjYXNlIFwiQ1JFQVRFRFwiOlxuICAgICAgICAgIGNhc2UgXCJTQ0FOTkVEXCI6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBhbnkgb3RoZXIgc3RhdHVzZXMgYXJlIGlycmVsZXZhbnQgdG8gdGhlIHBvbGxpbmdcbiAgICAgICAgICAvLyBhbmQgY2FuIGp1c3QgYmUgaWdub3JlZFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYuX3BvbGxGb3JTdGF0dXNDaGFuZ2UoKS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCk7XG4gICAgICAgIH0sIHNlbGYuX21vYmlsZVBvbGxpbmdJbnRlcnZhbCk7XG4gICAgICB9KTtcbiAgICB9KTtcbn07XG5cblZlbm1vLnByb3RvdHlwZS5fdG9rZW5pemVGb3JNb2JpbGVXaXRoTWFudWFsUmV0dXJuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICB0aGlzLl9jcmVhdGVQcm9taXNlLFxuICAgIFwidmVubW8udG9rZW5pemUubWFudWFsLXJldHVybi5zdGFydFwiXG4gICk7XG5cbiAgdGhpcy5fbW9iaWxlUG9sbGluZ0NvbnRleHRFeHBpcmVzSW4gPVxuICAgIERhdGUubm93KCkgKyB0aGlzLl9tb2JpbGVQb2xsaW5nRXhwaXJlc1RocmVzaG9sZDtcbiAgdGhpcy5fdG9rZW5pemVQcm9taXNlID0gbmV3IEV4dGVuZGVkUHJvbWlzZSgpO1xuXG4gIHRoaXMuX3BvbGxGb3JTdGF0dXNDaGFuZ2UoKVxuICAgIC50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICBzZWxmLl9jcmVhdGVQcm9taXNlLFxuICAgICAgICBcInZlbm1vLnRva2VuaXplLm1hbnVhbC1yZXR1cm4uc3VjY2Vzc1wiXG4gICAgICApO1xuXG4gICAgICBzZWxmLl90b2tlbml6ZVByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIHBheW1lbnRNZXRob2ROb25jZTogcGF5bG9hZC5wYXltZW50TWV0aG9kSWQsXG4gICAgICAgIHVzZXJuYW1lOiBwYXlsb2FkLnVzZXJOYW1lLFxuICAgICAgICBwYXllckluZm86IHBheWxvYWQucGF5ZXJJbmZvLFxuICAgICAgICBpZDogc2VsZi5fdmVubW9QYXltZW50Q29udGV4dElkLFxuICAgICAgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgXCJ2ZW5tby50b2tlbml6ZS5tYW51YWwtcmV0dXJuLmZhaWx1cmVcIlxuICAgICAgKTtcblxuICAgICAgc2VsZi5fdG9rZW5pemVQcm9taXNlLnJlamVjdChlcnIpO1xuICAgIH0pO1xuXG4gIHJldHVybiB0aGlzLmdldFVybCgpLnRoZW4oZnVuY3Rpb24gKHVybCkge1xuICAgIHNlbGYuYXBwU3dpdGNoKHVybCk7XG5cbiAgICByZXR1cm4gc2VsZi5fdG9rZW5pemVQcm9taXNlO1xuICB9KTtcbn07XG5cblZlbm1vLnByb3RvdHlwZS5fc2hvdWxkVXNlUmVkaXJlY3RTdHJhdGVneSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFicm93c2VyRGV0ZWN0aW9uLmlzSW9zKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fbW9iaWxlV2ViRmFsbEJhY2sgPT09IHRydWUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl91c2VSZWRpcmVjdEZvcklPUztcbn07XG5cblZlbm1vLnByb3RvdHlwZS5fdG9rZW5pemVGb3JNb2JpbGVXaXRoSGFzaENoYW5nZUxpc3RlbmVycyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHJlc3VsdFByb2Nlc3NpbmdJblByb2dyZXNzLCB2aXNpYmlsaXR5Q2hhbmdlTGlzdGVuZXJUaW1lb3V0O1xuXG4gIGlmICh0aGlzLmhhc1Rva2VuaXphdGlvblJlc3VsdCgpKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc0hhc2hDaGFuZ2VGbG93UmVzdWx0cygpO1xuICB9XG5cbiAgYW5hbHl0aWNzLnNlbmRFdmVudCh0aGlzLl9jcmVhdGVQcm9taXNlLCBcInZlbm1vLnRva2VuaXplLm1vYmlsZS5zdGFydFwiKTtcbiAgdGhpcy5fdG9rZW5pemVQcm9taXNlID0gbmV3IEV4dGVuZGVkUHJvbWlzZSgpO1xuXG4gIHRoaXMuX3ByZXZpb3VzSGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlRmxvdyhoYXNoKSB7XG4gICAgdmFyIGVycm9yO1xuXG4gICAgc2VsZlxuICAgICAgLnByb2Nlc3NIYXNoQ2hhbmdlRmxvd1Jlc3VsdHMoaGFzaClcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFzZWxmLl9pZ25vcmVIaXN0b3J5Q2hhbmdlcyAmJlxuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoICE9PSBzZWxmLl9wcmV2aW91c0hhc2hcbiAgICAgICAgKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBzZWxmLl9wcmV2aW91c0hhc2g7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5fcmVtb3ZlVmlzaWJpbGl0eUV2ZW50TGlzdGVuZXIoKTtcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBzZWxmLl90b2tlbml6ZVByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLl90b2tlbml6ZVByb21pc2UucmVzb2x2ZShyZXMpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBzZWxmLl90b2tlbml6ZVByb21pc2U7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIFRoZSBWZW5tbyBTREsgYXBwIHN3aXRjaGVzIGJhY2sgd2l0aCB0aGUgcmVzdWx0cyBvZiB0aGVcbiAgLy8gdG9rZW5pemF0aW9uIGVuY29kZWQgaW4gdGhlIGhhc2hcbiAgdGhpcy5fb25IYXNoQ2hhbmdlTGlzdGVuZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBoYXNoID0gZS5uZXdVUkwuc3BsaXQoXCIjXCIpWzFdO1xuXG4gICAgaWYgKCFzZWxmLl9oYXNUb2tlbml6YXRpb25SZXN1bHQoaGFzaCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXN1bHRQcm9jZXNzaW5nSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgY2xlYXJUaW1lb3V0KHZpc2liaWxpdHlDaGFuZ2VMaXN0ZW5lclRpbWVvdXQpO1xuICAgIGNvbXBsZXRlRmxvdyhoYXNoKTtcbiAgfTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgdGhpcy5fb25IYXNoQ2hhbmdlTGlzdGVuZXIsIGZhbHNlKTtcblxuICAvLyBTdWJzY3JpYmUgdG8gZG9jdW1lbnQgdmlzaWJpbGl0eSBjaGFuZ2UgZXZlbnRzIHRvIGRldGVjdCB3aGVuIGFwcCBzd2l0Y2hcbiAgLy8gaGFzIHJldHVybmVkLiBBY3RzIGFzIGEgZmFsbGJhY2sgZm9yIHRoZSBoYXNoY2hhbmdlIGxpc3RlbmVyIGFuZCBjYXRjaGVzXG4gIC8vIHRoZSBjYW5jZWwgY2FzZSB2aWEgbWFudWFsIGFwcCBzd2l0Y2ggYmFja1xuICB0aGlzLl92aXNpYmlsaXR5Q2hhbmdlTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlbGF5ID1cbiAgICAgIG9wdGlvbnMucHJvY2Vzc1Jlc3VsdHNEZWxheSB8fCBjb25zdGFudHMuREVGQVVMVF9QUk9DRVNTX1JFU1VMVFNfREVMQVk7XG5cbiAgICBpZiAoIXdpbmRvdy5kb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgIGlmICghcmVzdWx0UHJvY2Vzc2luZ0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgdmlzaWJpbGl0eUNoYW5nZUxpc3RlbmVyVGltZW91dCA9IHNldFRpbWVvdXQoY29tcGxldGVGbG93LCBkZWxheSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzLmdldFVybCgpLnRoZW4oZnVuY3Rpb24gKHVybCkge1xuICAgIHNlbGYuYXBwU3dpdGNoKHVybCk7XG5cbiAgICAvLyBBZGQgYSBicmllZiBkZWxheSB0byBpZ25vcmUgdmlzaWJpbGl0eSBjaGFuZ2UgZXZlbnRzIHRoYXQgb2NjdXIgcmlnaHQgYmVmb3JlIGFwcCBzd2l0Y2hcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBkb2N1bWVudFZpc2liaWxpdHlDaGFuZ2VFdmVudE5hbWUoKSxcbiAgICAgICAgc2VsZi5fdmlzaWJpbGl0eUNoYW5nZUxpc3RlbmVyXG4gICAgICApO1xuICAgIH0sIGNvbnN0YW50cy5ET0NVTUVOVF9WSVNJQklMSVRZX0NIQU5HRV9FVkVOVF9ERUxBWSk7XG5cbiAgICByZXR1cm4gc2VsZi5fdG9rZW5pemVQcm9taXNlO1xuICB9KTtcbn07XG5cblZlbm1vLnByb3RvdHlwZS5fdG9rZW5pemVGb3JEZXNrdG9wUVJGbG93ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgYW5hbHl0aWNzLnNlbmRFdmVudCh0aGlzLl9jcmVhdGVQcm9taXNlLCBcInZlbm1vLnRva2VuaXplLmRlc2t0b3Auc3RhcnRcIik7XG5cbiAgdGhpcy5fdG9rZW5pemVQcm9taXNlID0gbmV3IEV4dGVuZGVkUHJvbWlzZSgpO1xuXG4gIHRoaXMuX2NyZWF0ZVByb21pc2VcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc2VsZi5fdmVubW9EZXNrdG9wSW5zdGFuY2UubGF1bmNoRGVza3RvcEZsb3coKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICBzZWxmLl92ZW5tb0Rlc2t0b3BJbnN0YW5jZS5oaWRlRGVza3RvcEZsb3coKTtcblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgXCJ2ZW5tby50b2tlbml6ZS5kZXNrdG9wLnN1Y2Nlc3NcIlxuICAgICAgKTtcblxuICAgICAgc2VsZi5fdG9rZW5pemVQcm9taXNlLnJlc29sdmUocGF5bG9hZCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgXCJ2ZW5tby50b2tlbml6ZS5kZXNrdG9wLmZhaWx1cmVcIlxuICAgICAgKTtcblxuICAgICAgaWYgKHNlbGYuX3Zlbm1vRGVza3RvcEluc3RhbmNlKSB7XG4gICAgICAgIHNlbGYuX3Zlbm1vRGVza3RvcEluc3RhbmNlLmhpZGVEZXNrdG9wRmxvdygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXJyICYmIGVyci5yZWFzb24gPT09IFwiQ1VTVE9NRVJfQ0FOQ0VMRURcIikge1xuICAgICAgICBzZWxmLl90b2tlbml6ZVByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVkVOTU9fREVTS1RPUF9DQU5DRUxFRClcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX3Rva2VuaXplUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcih7XG4gICAgICAgICAgdHlwZTogZXJyb3JzLlZFTk1PX0RFU0tUT1BfVU5LTk9XTl9FUlJPUi50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5WRU5NT19ERVNLVE9QX1VOS05PV05fRVJST1IuY29kZSxcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvcnMuVkVOTU9fREVTS1RPUF9VTktOT1dOX0VSUk9SLm1lc3NhZ2UsXG4gICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gIHJldHVybiB0aGlzLl90b2tlbml6ZVByb21pc2U7XG59O1xuXG5WZW5tby5wcm90b3R5cGUuX2NhbmNlbE1vYmlsZVBheW1lbnRDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZVByb21pc2UudGhlbihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgdmFyIHF1ZXJ5O1xuXG4gICAgaWYgKHNlbGYuX3Zlbm1vUGF5bWVudENvbnRleHRJZCkge1xuICAgICAgcXVlcnkgPSBzZWxmLl9zaG91bGRVc2VMZWdhY3lGbG93XG4gICAgICAgID8gZ3JhcGhxbFF1ZXJpZXMuTEVHQUNZX1VQREFURV9QQVlNRU5UX0NPTlRFWFRfUVVFUllcbiAgICAgICAgOiBncmFwaHFsUXVlcmllcy5VUERBVEVfUEFZTUVOVF9DT05URVhUX1FVRVJZO1xuXG4gICAgICByZXR1cm4gY2xpZW50LnJlcXVlc3Qoe1xuICAgICAgICBhcGk6IFwiZ3JhcGhRTEFwaVwiLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgICAgaWQ6IHNlbGYuX3Zlbm1vUGF5bWVudENvbnRleHRJZCxcbiAgICAgICAgICAgICAgc3RhdHVzOiBcIkNBTkNFTEVEXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH0pO1xufTtcblxuVmVubW8ucHJvdG90eXBlLl9jYW5jZWxWZW5tb0Rlc2t0b3BDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZVByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNlbGYuX3Zlbm1vRGVza3RvcEluc3RhbmNlKSB7XG4gICAgICBzZWxmLl92ZW5tb0Rlc2t0b3BJbnN0YW5jZS51cGRhdGVWZW5tb0Rlc2t0b3BQYXltZW50Q29udGV4dChcIkNBTkNFTEVEXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIENsZWFubHkgdGVhciBkb3duIGFueXRoaW5nIHNldCB1cCBieSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvdmVubW8uY3JlYXRlfGNyZWF0ZX0uXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxlZCBvbmNlIHRlYXJkb3duIGlzIGNvbXBsZXRlLiBObyBkYXRhIGlzIHJldHVybmVkIGlmIHRlYXJkb3duIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuXG4gKiBAZXhhbXBsZVxuICogdmVubW9JbnN0YW5jZS50ZWFyZG93bigpO1xuICogQGV4YW1wbGUgPGNhcHRpb24+V2l0aCBjYWxsYmFjazwvY2FwdGlvbj5cbiAqIHZlbm1vSW5zdGFuY2UudGVhcmRvd24oZnVuY3Rpb24gKCkge1xuICogICAvLyB0ZWFyZG93biBpcyBjb21wbGV0ZVxuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5WZW5tby5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLl9yZW1vdmVWaXNpYmlsaXR5RXZlbnRMaXN0ZW5lcigpO1xuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVQcm9taXNlLnRoZW4oXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuX3Zlbm1vRGVza3RvcEluc3RhbmNlKSB7XG4gICAgICAgIHNlbGYuX3Zlbm1vRGVza3RvcEluc3RhbmNlLnRlYXJkb3duKCk7XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dChzZWxmLl9yZWZyZXNoUGF5bWVudENvbnRleHRUaW1lb3V0KTtcbiAgICAgIHNlbGYuX2NhbmNlbE1vYmlsZVBheW1lbnRDb250ZXh0KCk7XG5cbiAgICAgIGNvbnZlcnRNZXRob2RzVG9FcnJvcih0aGlzLCBtZXRob2RzKFZlbm1vLnByb3RvdHlwZSkpO1xuICAgIH0uYmluZCh0aGlzKVxuICApO1xufTtcblxuVmVubW8ucHJvdG90eXBlLl9yZW1vdmVWaXNpYmlsaXR5RXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJoYXNoY2hhbmdlXCIsIHRoaXMuX29uSGFzaENoYW5nZUxpc3RlbmVyKTtcbiAgd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgZG9jdW1lbnRWaXNpYmlsaXR5Q2hhbmdlRXZlbnROYW1lKCksXG4gICAgdGhpcy5fdmlzaWJpbGl0eUNoYW5nZUxpc3RlbmVyXG4gICk7XG5cbiAgZGVsZXRlIHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VMaXN0ZW5lcjtcbiAgZGVsZXRlIHRoaXMuX29uSGFzaENoYW5nZUxpc3RlbmVyO1xufTtcblxuLyoqXG4gKiBUaGUgaGFzaCBwYXJhbWV0ZXIgaW4gdGhpcyBmdW5jdGlvbiBpcyBvcHRpb25hbC4gSWYgbm8gaGFzaCBwYXJhbWV0ZXIgaXMgcGFzc2VkLCB0aGUgYGdldEZyYWdtZW50UGFyYW1ldGVyc2AgZnVuY3Rpb24gd2lsbCBkZWZhdWx0IHRvIHRoZSBoYXNoIHByZXNlbnQgaW4gdGhlIHdlYnNpdGUncyBVUkwgaW5zdGVhZC5cbiAqXG4gKiBUaGVyZSBhcmUgdHdvIHNjZW5hcmlvcyB3aGVyZSB0aGlzIG1ldGhvZCBpcyBjYWxsZWQ6XG4gKlxuICogMS4gV2hlbiBjYWxsZWQgd2l0aGluIGEgYnJvd3NlciB0aGF0IGlzIGNhcGFibGUgb2YgcmV0dXJuaW5nIHRvIHRoZSBzYW1lIHRhYiB0aGF0IHN0YXJ0ZWQgdGhlIFZlbm1vIGZsb3csIHdlIHNldCB1cCBhIGxpc3RlbmVyIHRvIGRldGVjdCBoYXNoIGNoYW5nZXMgaW4gdGhlIHVybC4gUGFydCBvZiB0aGUgcmV0dXJuIHRvIHRoZSBtZXJjaGFudCdzIHdlYnNpdGUgZnJvbSB0aGUgVmVubW8gYXBwIGluY2x1ZGVzIGVuY29kaW5nIHRoZSBkZXRhaWxzIG9mIHRoZSBwdXJjaGFzZSBpbiB0aGUgaGFzaCBvZiB0aGUgdXJsLiBUaGUgY2FsbGJhY2sgaXMgaW52b2tlZCBhbmQgdGhlIGhhc2ggaXMgcHVsbGVkIG9mZiBmcm9tIHRoZSBldmVudCBwYXlsb2FkLiBUaGUgcmVhc29uIHdlIHB1bGwgdGhlIGhhc2ggb2ZmIG9mIHRoZSBldmVudCBwYXlsb2FkIGluc3RlYWQgb2YgcHVsbGluZyBpdCBkaXJlY3RseSBmcm9tIHRoZSBVUkwgaXMgYmVjYXVzZSBzb21ldGltZXMgYSBzaW5nbGUgcGFnZSBhcHAgd2lsbCB1c2UgdGhlIGhhc2ggcGFyYW1ldGVyIGZvciBpdCdzIHJvdXRpbmcgc3lzdGVtLCBhbmQgaXQncyBwb3NzaWJsZSB0byBoaXQgYSByYWNlIGNvbmRpdGlvbiB3aGVyZSB0aGUgcm91dGluZyBjb2RlIGhhcyBhbHJlYWR5IHJlbW92ZWQgdGhlIFZlbm1vIHNwZWNpZmljIGF0dHJpYnV0ZXMgZnJvbSB0aGUgaGFzaCBiZWZvcmUgd2UgYXJlIGFibGUgdG8gcHVsbCBpdCBvZmYgdGhlIHVybC4gR3JhYmJpbmcgdGhlIGhhc2ggZnJvbSB0aGUgZXZlbnQgaGFuZGxlciBpbnN0ZWFkIGVuc3VyZXMgd2UgZ2V0IHRoZSBWZW5tbyBkZXRhaWxzLCBubyBtYXR0ZXIgd2hhdCB0aGUgdXJsIGlzIGNvbnZlcnRlZCB0by5cbiAqIDIuIFRoZSBvdGhlciBzY2VuYXJpbyBpcyBmb3IgYnJvd3NlcnMgdGhhdCBjYW5ub3QgcmV0dXJuIHRvIHRoZSBzYW1lIHRhYiwgYW5kIGluc3RlYWQgdGhlIFZlbm1vIGFwcCBtdXN0IG9wZW4gYSBuZXcgdGFiLiBTaW5jZSB0aGVyZSBpcyBubyBoYXNoIGxpc3RlbmVyIHRvIHB1bGwgdGhlIGhhc2ggZnJvbSwgd2UgcHVsbCB0aGUgaGFzaCBkZXRhaWxzIGRpcmVjdGx5IGZyb20gdGhlIHVybCB1c2luZyB0aGUgYGdldEZyYWdtZW50UGFyYW1ldGVyc2AgbWV0aG9kLlxuICpcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbaGFzaF0gT3B0aW9uYWxseSBwcm92aWRlZCBicm93c2VyIHVybCBoYXNoLlxuICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlXG4gKi9cblZlbm1vLnByb3RvdHlwZS5wcm9jZXNzSGFzaENoYW5nZUZsb3dSZXN1bHRzID0gZnVuY3Rpb24gKGhhc2gpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gZ2V0RnJhZ21lbnRQYXJhbWV0ZXJzKGhhc2gpO1xuXG4gIC8vIE5FWFRfTUFKT1JfVkVSU0lPTiBvbmx5IHJlbHkgb24gcGF5bWVudCBjb250ZXh0IHN0YXR1cyBjYWxsIGFuZCBzdG9wIHJlbHlpbmcgb24gdGhlXG4gIC8vIGNvbnRlbnQgb2YgdGhlIGhhc2hcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmICghc2VsZi5fc2hvdWxkVXNlTGVnYWN5Rmxvdykge1xuICAgICAgc2VsZlxuICAgICAgICAuX3BvbGxGb3JTdGF0dXNDaGFuZ2UoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgICAgICBzZWxmLl9jcmVhdGVQcm9taXNlLFxuICAgICAgICAgICAgXCJ2ZW5tby5hcHBzd2l0Y2guaGFuZGxlLnBheW1lbnQtY29udGV4dC1zdGF0dXMtcXVlcnkuc3VjY2Vzc1wiXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHJldHVybiByZXNvbHZlKHtcbiAgICAgICAgICAgIHBheW1lbnRNZXRob2ROb25jZTogcGF5bG9hZC5wYXltZW50TWV0aG9kSWQsXG4gICAgICAgICAgICB1c2VybmFtZTogcGF5bG9hZC51c2VyTmFtZSxcbiAgICAgICAgICAgIHBheWVySW5mbzogcGF5bG9hZC5wYXllckluZm8sXG4gICAgICAgICAgICBpZDogc2VsZi5fdmVubW9QYXltZW50Q29udGV4dElkLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGVyci50eXBlID09PSBlcnJvcnMuVkVOTU9fTU9CSUxFX1BPTExJTkdfVE9LRU5JWkFUSU9OX0NBTkNFTEVELnR5cGVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gcmVqZWN0IGluIHRoaXMgY2FzZSBiZWNhdXNlIGlmIGl0IHRoZSBwcm9jZXNzIHdhcyBjYW5jZWxlZCwgd2UgZG9uJ3Qgd2FudCB0byB0YWtlIHRoZSBoYXBweSBwYXRoXG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KFxuICAgICAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgICAgIFwidmVubW8ucHJvY2Vzcy1yZXN1bHRzLnBheW1lbnQtY29udGV4dC1zdGF0dXMtcXVlcnktZmFpbGVkXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIElmIHRoZSBwb2xsaW5nIHJlcXVlc3QgZmFpbHMsIGJ1dCBub3QgYmVjYXVzZSBvZiBjYW5jZWxpemF0aW9uLCB3ZSB3aWxsIHJlbHkgb24gdGhlIHBhcmFtcyBwcm92aWRlZCBmcm9tIHRoZSBoYXNoXG4gICAgICAgICAgcmVzb2x2ZShwYXJhbXMpO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy52ZW5tb1N1Y2Nlc3MpIHtcbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoXG4gICAgICAgIHNlbGYuX2NyZWF0ZVByb21pc2UsXG4gICAgICAgIFwidmVubW8uYXBwc3dpdGNoLmhhbmRsZS5zdWNjZXNzXCJcbiAgICAgICk7XG5cbiAgICAgIHJlc29sdmUocGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy52ZW5tb0Vycm9yKSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHNlbGYuX2NyZWF0ZVByb21pc2UsIFwidmVubW8uYXBwc3dpdGNoLmhhbmRsZS5lcnJvclwiKTtcbiAgICAgIHJlamVjdChcbiAgICAgICAgbmV3IEJyYWludHJlZUVycm9yKHtcbiAgICAgICAgICB0eXBlOiBlcnJvcnMuVkVOTU9fQVBQX0ZBSUxFRC50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5WRU5NT19BUFBfRkFJTEVELmNvZGUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JzLlZFTk1PX0FQUF9GQUlMRUQubWVzc2FnZSxcbiAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICBvcmlnaW5hbEVycm9yOiB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbXMuZXJyb3JNZXNzYWdlKSxcbiAgICAgICAgICAgICAgY29kZTogcGFyYW1zLmVycm9yQ29kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMudmVubW9DYW5jZWwpIHtcbiAgICAgIGFuYWx5dGljcy5zZW5kRXZlbnQoc2VsZi5fY3JlYXRlUHJvbWlzZSwgXCJ2ZW5tby5hcHBzd2l0Y2guaGFuZGxlLmNhbmNlbFwiKTtcbiAgICAgIHJlamVjdChuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlZFTk1PX0FQUF9DQU5DRUxFRCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVc2VyIGhhcyBlaXRoZXIgbWFudWFsbHkgc3dpdGNoZWQgYmFjayB0byBicm93c2VyLCBvciBhcHAgaXMgbm90IGF2YWlsYWJsZSBmb3IgYXBwIHN3aXRjaFxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChcbiAgICAgICAgc2VsZi5fY3JlYXRlUHJvbWlzZSxcbiAgICAgICAgXCJ2ZW5tby5hcHBzd2l0Y2guY2FuY2VsLW9yLXVuYXZhaWxhYmxlXCJcbiAgICAgICk7XG4gICAgICByZWplY3QobmV3IEJyYWludHJlZUVycm9yKGVycm9ycy5WRU5NT19DQU5DRUxFRCkpO1xuICAgIH1cblxuICAgIHNlbGYuX2NsZWFyRnJhZ21lbnRQYXJhbWV0ZXJzKCk7XG4gIH0pO1xufTtcblxuVmVubW8ucHJvdG90eXBlLl9jbGVhckZyYWdtZW50UGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2lnbm9yZUhpc3RvcnlDaGFuZ2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKFxuICAgIHR5cGVvZiB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoXG4gICkge1xuICAgIGhpc3RvcnkucHVzaFN0YXRlKFxuICAgICAge30sXG4gICAgICBcIlwiLFxuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZihcIiNcIikpXG4gICAgKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0RnJhZ21lbnRQYXJhbWV0ZXJzKGhhc2gpIHtcbiAgdmFyIGtleVZhbHVlc0FycmF5ID0gKGhhc2ggfHwgd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpKS5zcGxpdChcIiZcIik7XG5cbiAgdmFyIHBhcnNlZFBhcmFtcyA9IGtleVZhbHVlc0FycmF5LnJlZHVjZShmdW5jdGlvbiAodG9SZXR1cm4sIGtleVZhbHVlKSB7XG4gICAgdmFyIHBhcnRzID0ga2V5VmFsdWUuc3BsaXQoXCI9XCIpO1xuICAgIC8vIHNvbWUgU2luZ2xlIFBhZ2UgQXBwcyBtYXkgcHJlLXBlbmQgYSAvIHRvIHRoZSBmaXJzdCB2YWx1ZVxuICAgIC8vIGluIHRoZSBoYXNoLCBhc3N1bWluZyBpdCdzIGEgcm91dGUgaW4gdGhlaXIgYXBwXG4gICAgLy8gaW5zdGVhZCBvZiBpbmZvcm1hdGlvbiBmcm9tIFZlbm1vLCB0aGlzIHJlbW92ZXMgYWxsXG4gICAgLy8gbm9uLWFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGZyb20gdGhlIGtleXMgaW4gdGhlIHBhcmFtc1xuICAgIHZhciBkZWNvZGVkS2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRzWzBdKS5yZXBsYWNlKC9cXFcvZywgXCJcIik7XG4gICAgdmFyIGtleSA9IHNuYWtlQ2FzZVRvQ2FtZWxDYXNlKGRlY29kZWRLZXkpO1xuICAgIHZhciB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJ0c1sxXSk7XG5cbiAgICB0b1JldHVybltrZXldID0gdmFsdWU7XG5cbiAgICByZXR1cm4gdG9SZXR1cm47XG4gIH0sIHt9KTtcblxuICBpZiAocGFyc2VkUGFyYW1zLnJlc291cmNlSWQpIHtcbiAgICBwYXJzZWRQYXJhbXMuaWQgPSBwYXJzZWRQYXJhbXMucmVzb3VyY2VJZDtcbiAgfVxuXG4gIHJldHVybiBwYXJzZWRQYXJhbXM7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVzZXJOYW1lKHVzZXJuYW1lKSB7XG4gIHVzZXJuYW1lID0gdXNlcm5hbWUgfHwgXCJcIjtcblxuICAvLyBORVhUX01BSk9SX1ZFUlNJT04gdGhlIHdlYiBzZGtzIGhhdmUgYSBwcmVwZW5kZWQgQCBzaWduXG4gIC8vIGJ1dCB0aGUgaW9zIGFuZCBhbmRyb2lkIG9uZXMgZG8gbm90LiBUaGlzIHNob3VsZCBiZSBzdGFuZGFyZGl6ZWRcbiAgcmV0dXJuIFwiQFwiICsgdXNlcm5hbWUucmVwbGFjZShcIkBcIiwgXCJcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRva2VuaXplUGF5bG9hZChwYXlsb2FkKSB7XG4gIHZhciBmb3JtYXR0ZWRQYXlsb2FkID0ge1xuICAgIG5vbmNlOiBwYXlsb2FkLnBheW1lbnRNZXRob2ROb25jZSxcbiAgICB0eXBlOiBcIlZlbm1vQWNjb3VudFwiLFxuICAgIGRldGFpbHM6IHtcbiAgICAgIHVzZXJuYW1lOiBmb3JtYXRVc2VyTmFtZShwYXlsb2FkLnVzZXJuYW1lKSxcbiAgICAgIHBheW1lbnRDb250ZXh0SWQ6IHBheWxvYWQuaWQsXG4gICAgfSxcbiAgfTtcblxuICBpZiAocGF5bG9hZC5wYXllckluZm8pIHtcbiAgICBmb3JtYXR0ZWRQYXlsb2FkLmRldGFpbHMucGF5ZXJJbmZvID0gcGF5bG9hZC5wYXllckluZm87XG4gICAgZm9ybWF0dGVkUGF5bG9hZC5kZXRhaWxzLnBheWVySW5mby51c2VyTmFtZSA9IGZvcm1hdFVzZXJOYW1lKFxuICAgICAgcGF5bG9hZC5wYXllckluZm8udXNlck5hbWVcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZFBheWxvYWQ7XG59XG5cbi8vIEZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1BhZ2VfVmlzaWJpbGl0eV9BUElcbmZ1bmN0aW9uIGRvY3VtZW50VmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZSgpIHtcbiAgdmFyIHZpc2liaWxpdHlDaGFuZ2U7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuaGlkZGVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gT3BlcmEgMTIuMTAgYW5kIEZpcmVmb3ggMTggYW5kIGxhdGVyIHN1cHBvcnRcbiAgICB2aXNpYmlsaXR5Q2hhbmdlID0gXCJ2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdy5kb2N1bWVudC5tc0hpZGRlbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZpc2liaWxpdHlDaGFuZ2UgPSBcIm1zdmlzaWJpbGl0eWNoYW5nZVwiO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQud2Via2l0SGlkZGVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmlzaWJpbGl0eUNoYW5nZSA9IFwid2Via2l0dmlzaWJpbGl0eWNoYW5nZVwiO1xuICB9XG5cbiAgcmV0dXJuIHZpc2liaWxpdHlDaGFuZ2U7XG59XG5cbmZ1bmN0aW9uIGlzSW9zV2Vidmlld0luRGVlcExpbmtSZXR1cm5VcmxGbG93KCkge1xuICAvLyB3ZSBrbm93IGl0J3MgYSB3ZWJ2aWV3IGJlY2F1c2UgdGhpcyBmbG93IG9ubHkgZ2V0c1xuICAvLyB1c2VkIHdoZW4gY2hlY2tpbmcgdGhlIGRlZXAgbGluayBmbG93XG4gIC8vIHRlc3QgdGhlIHBsYXRmb3JtIGhlcmUgdG8gZ2V0IGFyb3VuZCBjdXN0b20gdXNlcmFnZW50c1xuICByZXR1cm4gKFxuICAgIHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm0gJiZcbiAgICAvaVBob25lfGlQYWR8aVBvZC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtKVxuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBQcm9taXNlLndyYXBQcm90b3R5cGUoVmVubW8pO1xuXG59LHtcIi4uL2xpYi9hbmFseXRpY3NcIjoxMTksXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0LFwiLi4vbGliL2NvbnZlcnQtbWV0aG9kcy10by1lcnJvclwiOjEyNyxcIi4uL2xpYi9pbi1pZnJhbWVcIjoxNTAsXCIuLi9saWIvaXMtdmVyaWZpZWQtZG9tYWluXCI6MTUzLFwiLi4vbGliL21ldGhvZHNcIjoxNTUsXCIuLi9saWIvcXVlcnlzdHJpbmdcIjoxNTcsXCIuLi9saWIvc25ha2UtY2FzZS10by1jYW1lbC1jYXNlXCI6MTU5LFwiLi9leHRlcm5hbC9cIjoyMTMsXCIuL2V4dGVybmFsL3F1ZXJpZXNcIjoyMTQsXCIuL3NoYXJlZC9icm93c2VyLWRldGVjdGlvblwiOjIxNyxcIi4vc2hhcmVkL2NvbnN0YW50c1wiOjIxOCxcIi4vc2hhcmVkL2Vycm9yc1wiOjIxOSxcIi4vc2hhcmVkL2dldC12ZW5tby11cmxcIjoyMjEsXCIuL3NoYXJlZC9zdXBwb3J0cy12ZW5tb1wiOjIyMixcIi4vc2hhcmVkL3dlYi1sb2dpbi1iYWNrZHJvcFwiOjIyMyxcIkBicmFpbnRyZWUvZXh0ZW5kZWQtcHJvbWlzZVwiOjM0LFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0M31dLDIyNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5WaXNhIENoZWNrb3V0IC0gQ3JlYXRpb24gRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIFtjcmVhdGluZyB0aGUgVmlzYSBDaGVja291dCBjb21wb25lbnRdKC4vbW9kdWxlLWJyYWludHJlZS13ZWJfdmVubW8uaHRtbCMuY3JlYXRlKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFZJU0FfQ0hFQ0tPVVRfTk9UX0VOQUJMRUQgT2NjdXJzIHdoZW4gVmlzYSBDaGVja291dCBpcyBub3QgZW5hYmxlZCBpbiB0aGUgQnJhaW50cmVlIGNvbnRyb2wgcGFuZWwuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVFcnJvci5WaXNhIENoZWNrb3V0IC0gY3JlYXRlSW5pdE9wdGlvbnMgRXJyb3IgQ29kZXNcbiAqIEBkZXNjcmlwdGlvbiBFcnJvcnMgdGhhdCBvY2N1ciB3aGVuIHVzaW5nIHRoZSBbYGNyZWF0ZUluaXRPcHRpb25zYCBtZXRob2RdKC4vVmlzYUNoZWNrb3V0Lmh0bWwjY3JlYXRlSW5pdE9wdGlvbnMpLlxuICogQHByb3BlcnR5IHtNRVJDSEFOVH0gVklTQV9DSEVDS09VVF9JTklUX09QVElPTlNfUkVRVUlSRUQgT2NjdXJzIHdoZW4gbm8gb3B0aW9ucyBhcmUgcHJvdmlkZWQgdG8gbWV0aG9kLlxuICovXG5cbi8qKlxuICogQG5hbWUgQnJhaW50cmVlRXJyb3IuVmlzYSBDaGVja291dCAtIHRva2VuaXplIEVycm9yIENvZGVzXG4gKiBAZGVzY3JpcHRpb24gRXJyb3JzIHRoYXQgb2NjdXIgd2hlbiB1c2luZyB0aGUgW2B0b2tlbml6ZWAgbWV0aG9kXSguL1Zpc2FDaGVja291dC5odG1sI3Rva2VuaXplKS5cbiAqIEBwcm9wZXJ0eSB7TUVSQ0hBTlR9IFZJU0FfQ0hFQ0tPVVRfUEFZTUVOVF9SRVFVSVJFRCBPY2N1cnMgd2hlbiBubyBwYXltZW50IGRhdGEgaXMgbm90IHByb3ZpZGVkLlxuICogQHByb3BlcnR5IHtORVRXT1JLfSBWSVNBX0NIRUNLT1VUX1RPS0VOSVpBVElPTiBPY2N1cnMgd2hlbiB0b2tlbml6YXRpb24gZmFpbHMuXG4gKi9cblxudmFyIEJyYWludHJlZUVycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBWSVNBX0NIRUNLT1VUX05PVF9FTkFCTEVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJWSVNBX0NIRUNLT1VUX05PVF9FTkFCTEVEXCIsXG4gICAgbWVzc2FnZTogXCJWaXNhIENoZWNrb3V0IGlzIG5vdCBlbmFibGVkIGZvciB0aGlzIG1lcmNoYW50LlwiLFxuICB9LFxuICBWSVNBX0NIRUNLT1VUX0lOSVRfT1BUSU9OU19SRVFVSVJFRDoge1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yLnR5cGVzLk1FUkNIQU5ULFxuICAgIGNvZGU6IFwiVklTQV9DSEVDS09VVF9JTklUX09QVElPTlNfUkVRVUlSRURcIixcbiAgICBtZXNzYWdlOiBcImluaXRPcHRpb25zIHJlcXVpcmVzIGFuIG9iamVjdC5cIixcbiAgfSxcbiAgVklTQV9DSEVDS09VVF9QQVlNRU5UX1JFUVVJUkVEOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTUVSQ0hBTlQsXG4gICAgY29kZTogXCJWSVNBX0NIRUNLT1VUX1BBWU1FTlRfUkVRVUlSRURcIixcbiAgICBtZXNzYWdlOiBcInRva2VuaXplIHJlcXVpcmVzIGNhbGxpZCwgZW5jS2V5LCBhbmQgZW5jUGF5bWVudERhdGEuXCIsXG4gIH0sXG4gIFZJU0FfQ0hFQ0tPVVRfVE9LRU5JWkFUSU9OOiB7XG4gICAgdHlwZTogQnJhaW50cmVlRXJyb3IudHlwZXMuTkVUV09SSyxcbiAgICBjb2RlOiBcIlZJU0FfQ0hFQ0tPVVRfVE9LRU5JWkFUSU9OXCIsXG4gICAgbWVzc2FnZTpcbiAgICAgIFwiQSBuZXR3b3JrIGVycm9yIG9jY3VycmVkIHdoZW4gcHJvY2Vzc2luZyB0aGUgVmlzYSBDaGVja291dCBwYXltZW50LlwiLFxuICB9LFxufTtcblxufSx7XCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCI6MTI0fV0sMjI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBtb2R1bGUgYnJhaW50cmVlLXdlYi92aXNhLWNoZWNrb3V0XG4gKiBAZGVzY3JpcHRpb24gUHJvY2Vzc2VzIFZpc2EgQ2hlY2tvdXQuICpUaGlzIGNvbXBvbmVudCBpcyBjdXJyZW50bHkgaW4gYmV0YSBhbmQgaXMgc3ViamVjdCB0byBjaGFuZ2UuKlxuICovXG5cbnZhciBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvbiA9IF9kZXJlcV8oXCIuLi9saWIvYmFzaWMtY29tcG9uZW50LXZlcmlmaWNhdGlvblwiKTtcbnZhciBCcmFpbnRyZWVFcnJvciA9IF9kZXJlcV8oXCIuLi9saWIvYnJhaW50cmVlLWVycm9yXCIpO1xudmFyIGNyZWF0ZURlZmVycmVkQ2xpZW50ID0gX2RlcmVxXyhcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCIpO1xudmFyIGNyZWF0ZUFzc2V0c1VybCA9IF9kZXJlcV8oXCIuLi9saWIvY3JlYXRlLWFzc2V0cy11cmxcIik7XG52YXIgVmlzYUNoZWNrb3V0ID0gX2RlcmVxXyhcIi4vdmlzYS1jaGVja291dFwiKTtcbnZhciBhbmFseXRpY3MgPSBfZGVyZXFfKFwiLi4vbGliL2FuYWx5dGljc1wiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG52YXIgVkVSU0lPTiA9IFwiMy4xMDAuMFwiO1xudmFyIHdyYXBQcm9taXNlID0gX2RlcmVxXyhcIkBicmFpbnRyZWUvd3JhcC1wcm9taXNlXCIpO1xuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBmdW5jdGlvbiBjcmVhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIENyZWF0aW9uIG9wdGlvbnM6XG4gKiBAcGFyYW0ge0NsaWVudH0gW29wdGlvbnMuY2xpZW50XSBBIHtAbGluayBDbGllbnR9IGluc3RhbmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmF1dGhvcml6YXRpb25dIEEgdG9rZW5pemF0aW9uS2V5IG9yIGNsaWVudFRva2VuLiBDYW4gYmUgdXNlZCBpbiBwbGFjZSBvZiBgb3B0aW9ucy5jbGllbnRgLlxuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgc2Vjb25kIGFyZ3VtZW50LCBgZGF0YWAsIGlzIHRoZSB7QGxpbmsgVmlzYUNoZWNrb3V0fSBpbnN0YW5jZS4gSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGBjcmVhdGVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUge0BsaW5rIFZpc2FDaGVja291dH0gaW5zdGFuY2UuXG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IFwiVmlzYSBDaGVja291dFwiO1xuXG4gIHJldHVybiBiYXNpY0NvbXBvbmVudFZlcmlmaWNhdGlvblxuICAgIC52ZXJpZnkoe1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRGVmZXJyZWRDbGllbnQuY3JlYXRlKHtcbiAgICAgICAgYXV0aG9yaXphdGlvbjogb3B0aW9ucy5hdXRob3JpemF0aW9uLFxuICAgICAgICBjbGllbnQ6IG9wdGlvbnMuY2xpZW50LFxuICAgICAgICBkZWJ1Zzogb3B0aW9ucy5kZWJ1ZyxcbiAgICAgICAgYXNzZXRzVXJsOiBjcmVhdGVBc3NldHNVcmwuY3JlYXRlKG9wdGlvbnMuYXV0aG9yaXphdGlvbiksXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB9KTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIG9wdGlvbnMuY2xpZW50ID0gY2xpZW50O1xuXG4gICAgICBpZiAoXG4gICAgICAgICFvcHRpb25zLmNsaWVudC5nZXRDb25maWd1cmF0aW9uKCkuZ2F0ZXdheUNvbmZpZ3VyYXRpb24udmlzYUNoZWNrb3V0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVklTQV9DSEVDS09VVF9OT1RfRU5BQkxFRClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChvcHRpb25zLmNsaWVudCwgXCJ2aXNhY2hlY2tvdXQuaW5pdGlhbGl6ZWRcIik7XG5cbiAgICAgIHJldHVybiBuZXcgVmlzYUNoZWNrb3V0KG9wdGlvbnMpO1xuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiB3cmFwUHJvbWlzZShjcmVhdGUpLFxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIFNESywgaS5lLiBge0Bwa2cgdmVyc2lvbn1gLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgVkVSU0lPTjogVkVSU0lPTixcbn07XG5cbn0se1wiLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uL2xpYi9iYXNpYy1jb21wb25lbnQtdmVyaWZpY2F0aW9uXCI6MTIyLFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiOjEyNCxcIi4uL2xpYi9jcmVhdGUtYXNzZXRzLXVybFwiOjEyOSxcIi4uL2xpYi9jcmVhdGUtZGVmZXJyZWQtY2xpZW50XCI6MTMxLFwiLi9lcnJvcnNcIjoyMjUsXCIuL3Zpc2EtY2hlY2tvdXRcIjoyMjcsXCJAYnJhaW50cmVlL3dyYXAtcHJvbWlzZVwiOjQzfV0sMjI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgQnJhaW50cmVlRXJyb3IgPSBfZGVyZXFfKFwiLi4vbGliL2JyYWludHJlZS1lcnJvclwiKTtcbnZhciBhbmFseXRpY3MgPSBfZGVyZXFfKFwiLi4vbGliL2FuYWx5dGljc1wiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG52YXIganNvbkNsb25lID0gX2RlcmVxXyhcIi4uL2xpYi9qc29uLWNsb25lXCIpO1xudmFyIG1ldGhvZHMgPSBfZGVyZXFfKFwiLi4vbGliL21ldGhvZHNcIik7XG52YXIgY29udmVydE1ldGhvZHNUb0Vycm9yID0gX2RlcmVxXyhcIi4uL2xpYi9jb252ZXJ0LW1ldGhvZHMtdG8tZXJyb3JcIik7XG52YXIgd3JhcFByb21pc2UgPSBfZGVyZXFfKFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIik7XG52YXIgY2FyZFR5cGVUcmFuc2Zvcm1NYXAgPSB7XG4gIFZpc2E6IFwiVklTQVwiLFxuICBNYXN0ZXJDYXJkOiBcIk1BU1RFUkNBUkRcIixcbiAgRGlzY292ZXI6IFwiRElTQ09WRVJcIixcbiAgXCJBbWVyaWNhbiBFeHByZXNzXCI6IFwiQU1FWFwiLFxufTtcblxuLyoqXG4gKiBWaXNhIENoZWNrb3V0IEFkZHJlc3Mgb2JqZWN0LlxuICogQHR5cGVkZWYge29iamVjdH0gVmlzYUNoZWNrb3V0fkFkZHJlc3NcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb3VudHJ5Q29kZSBUaGUgY3VzdG9tZXIncyBjb3VudHJ5IGNvZGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZXh0ZW5kZWRBZGRyZXNzIFRoZSBjdXN0b21lcidzIGV4dGVuZGVkIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZmlyc3ROYW1lIFRoZSBjdXN0b21lcidzIGZpcnN0IG5hbWUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbGFzdE5hbWUgVGhlIGN1c3RvbWVyJ3MgbGFzdCBuYW1lLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGxvY2FsaXR5IFRoZSBjdXN0b21lcidzIGxvY2FsaXR5LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBvc3RhbENvZGUgVGhlIGN1c3RvbWVyJ3MgcG9zdGFsIGNvZGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVnaW9uIFRoZSBjdXN0b21lcidzIHJlZ2lvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdHJlZXRBZGRyZXNzIFRoZSBjdXN0b21lcidzIHN0cmVldCBhZGRyZXNzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBob25lTnVtYmVyIFRoZSBjdXN0b21lcidzIHBob25lIG51bWJlci5cbiAqL1xuXG4vKipcbiAqIFZpc2EgQ2hlY2tvdXQgVXNlckRhdGEgb2JqZWN0LlxuICogQHR5cGVkZWYge29iamVjdH0gVmlzYUNoZWNrb3V0flVzZXJEYXRhXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdXNlckVtYWlsIFRoZSBjdXN0b21lcidzIGVtYWlsIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdXNlckZpcnN0TmFtZSBUaGUgY3VzdG9tZXIncyBmaXJzdCBuYW1lLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHVzZXJMYXN0TmFtZSBUaGUgY3VzdG9tZXIncyBsYXN0IG5hbWUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdXNlckZ1bGxOYW1lIFRoZSBjdXN0b21lcidzIGZ1bGwgbmFtZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1c2VyTmFtZSBUaGUgY3VzdG9tZXIncyB1c2VybmFtZS5cbiAqL1xuXG4vKipcbiAqIFZpc2EgQ2hlY2tvdXQgdG9rZW5pemUgcGF5bG9hZC5cbiAqIEB0eXBlZGVmIHtvYmplY3R9IFZpc2FDaGVja291dH50b2tlbml6ZVBheWxvYWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBub25jZSBUaGUgcGF5bWVudCBtZXRob2Qgbm9uY2UuXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGV0YWlscyBBZGRpdGlvbmFsIGFjY291bnQgZGV0YWlscy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZXRhaWxzLmNhcmRUeXBlIFR5cGUgb2YgY2FyZCwgZXg6IFZpc2EsIE1hc3RlckNhcmQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV0YWlscy5sYXN0Rm91ciBMYXN0IGZvdXIgZGlnaXRzIG9mIGNhcmQgbnVtYmVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRldGFpbHMubGFzdFR3byBMYXN0IHR3byBkaWdpdHMgb2YgY2FyZCBudW1iZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGVzY3JpcHRpb24gQSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSBwYXltZW50IG1ldGhvZCB0eXBlLCBhbHdheXMgYFZpc2FDaGVja291dENhcmRgLlxuICogQHByb3BlcnR5IHtWaXNhQ2hlY2tvdXR+QWRkcmVzc30gYmlsbGluZ0FkZHJlc3MgVGhlIGN1c3RvbWVyJ3MgYmlsbGluZyBhZGRyZXNzLlxuICogQHByb3BlcnR5IHtWaXNhQ2hlY2tvdXR+QWRkcmVzc30gc2hpcHBpbmdBZGRyZXNzIFRoZSBjdXN0b21lcidzIHNoaXBwaW5nIGFkZHJlc3MuXG4gKiBAcHJvcGVydHkge1Zpc2FDaGVja291dH5Vc2VyRGF0YX0gdXNlckRhdGEgSW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1c3RvbWVyLlxuICogQHByb3BlcnR5IHtvYmplY3R9IGJpbkRhdGEgSW5mb3JtYXRpb24gYWJvdXQgdGhlIGNhcmQgYmFzZWQgb24gdGhlIGJpbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLmNvbW1lcmNpYWwgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuY291bnRyeU9mSXNzdWFuY2UgVGhlIGNvdW50cnkgb2YgaXNzdWFuY2UuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5kZWJpdCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5kdXJiaW5SZWd1bGF0ZWQgUG9zc2libGUgdmFsdWVzOiAnWWVzJywgJ05vJywgJ1Vua25vd24nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEuaGVhbHRoY2FyZSBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5pc3N1aW5nQmFuayBUaGUgaXNzdWluZyBiYW5rLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbkRhdGEucGF5cm9sbCBQb3NzaWJsZSB2YWx1ZXM6ICdZZXMnLCAnTm8nLCAnVW5rbm93bicuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmluRGF0YS5wcmVwYWlkIFBvc3NpYmxlIHZhbHVlczogJ1llcycsICdObycsICdVbmtub3duJy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5EYXRhLnByb2R1Y3RJZCBUaGUgcHJvZHVjdCBpZC5cbiAqL1xuXG4vKipcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgVGhlIFZpc2EgQ2hlY2tvdXQge0BsaW5rIG1vZHVsZTpicmFpbnRyZWUtd2ViL3Zpc2EtY2hlY2tvdXQuY3JlYXRlIGNyZWF0ZX0gb3B0aW9ucy5cbiAqIEBkZXNjcmlwdGlvbiA8c3Ryb25nPkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gVXNlIHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi92aXNhLWNoZWNrb3V0LmNyZWF0ZXxicmFpbnRyZWUtd2ViLnZpc2EtY2hlY2tvdXQuY3JlYXRlfSBpbnN0ZWFkLjwvc3Ryb25nPlxuICogQGNsYXNzZGVzYyBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBWaXNhIENoZWNrb3V0IGNvbXBvbmVudCBwcm9kdWNlZCBieSB7QGxpbmsgbW9kdWxlOmJyYWludHJlZS13ZWIvdmlzYS1jaGVja291dC5jcmVhdGV8YnJhaW50cmVlLXdlYi92aXNhLWNoZWNrb3V0LmNyZWF0ZX0uIEluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIGhhdmUgbWV0aG9kcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBWaXNhIENoZWNrb3V0J3MgSmF2YVNjcmlwdCBsaWJyYXJ5LlxuICovXG5mdW5jdGlvbiBWaXNhQ2hlY2tvdXQob3B0aW9ucykge1xuICB0aGlzLl9jbGllbnQgPSBvcHRpb25zLmNsaWVudDtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtQ2FyZFR5cGVzKGNhcmRUeXBlcykge1xuICByZXR1cm4gY2FyZFR5cGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCB0eXBlKSB7XG4gICAgaWYgKGNhcmRUeXBlVHJhbnNmb3JtTWFwLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICByZXR1cm4gYWNjLmNvbmNhdChjYXJkVHlwZVRyYW5zZm9ybU1hcFt0eXBlXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgW10pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYGluaXRPcHRpb25zYCBvYmplY3QgZnJvbSB0aGUgcGFzc2VkIGBvcHRpb25zYCwgYXBwbHlpbmcgcHJvcGVydGllcyB0aGF0IEJyYWludHJlZSBuZWVkcyB0byB0cmFuc2FjdCBWaXNhIENoZWNrb3V0LlxuICpcbiAqIEJyYWludHJlZSB3aWxsIGFwcGx5IHRoZXNlIHByb3BlcnRpZXMgaWYgdGhleSBkbyBub3QgZXhpc3Qgb24gdGhlIGdpdmVuIGBvcHRpb25zYDpcbiAqICAtIGBhcGlrZXlgXG4gKiAgLSBgZXh0ZXJuYWxDbGllbnRJZGBcbiAqICAtIGBzZXR0aW5ncy5wYXltZW50LmNhcmRCcmFuZHNgXG4gKlxuICogQnJhaW50cmVlIHdpbGwgb3ZlcndyaXRlIGBzZXR0aW5ncy5kYXRhTGV2ZWwgPSAnRlVMTCdgIHRvIGFjY2VzcyB0aGUgZnVsbCBwYXltZW50IG1ldGhvZC5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFRoZSBiYXNlIGBpbml0T3B0aW9uc2AgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaW5pdCBWaXNhIENoZWNrb3V0LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFwaWtleV0gVGhlIEFQSSBrZXkgdXNlZCB0byBpbml0aWFsaXplIFZpc2EgQ2hlY2tvdXQuIFdoZW4gbm90IHN1cHBsaWVkLCBCcmFpbnRyZWUgd2lsbCBzZXQgdGhpcyBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5leHRlcm5hbENsaWVudElkXSBUaGUgZXh0ZXJuYWwgY2xpZW50IElEIGtleSB1c2VkIHRvIGluaXRpYWxpemUgVmlzYSBDaGVja291dC4gV2hlbiBub3Qgc3VwcGxpZWQsIEJyYWludHJlZSB3aWxsIHNldCB0aGlzIHByb3BlcnR5LlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnNldHRpbmdzXSBUaGUgc2V0dGluZ3Mgb2JqZWN0IHVzZWQgdG8gaW5pdGlhbGl6ZSBWaXNhIENoZWNrb3V0LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNldHRpbmdzLmRhdGFMZXZlbF0gVGhlIGRhdGEgbGV2ZWwgdXNlZCB0byBpbml0aWFsaXplIFZpc2EgQ2hlY2tvdXQuIEJyYWludHJlZSB3aWxsIG92ZXJ3cml0ZSB0aGlzIHByb3BlcnR5IHRvICdGVUxMJy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5zZXR0aW5ncy5wYXltZW50XSBUaGUgcGF5bWVudCBvYmplY3QgdXNlZCB0byBpbml0aWFsaXplIFZpc2EgQ2hlY2tvdXQuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3B0aW9ucy5zZXR0aW5ncy5wYXltZW50LmNhcmRCcmFuZHNdIFRoZSBjYXJkIGJyYW5kcyB0aGF0IFZpc2EgQ2hlY2tvdXQgd2lsbCBhbGxvdyB0aGUgY3VzdG9tZXIgdG8gcGF5IHdpdGguIFdoZW4gbm90IHN1cHBsaWVkLCBCcmFpbnRyZWUgd2lsbCBzZXQgdGhpcyBwcm9wZXJ0eS5cbiAqIEByZXR1cm5zIHtvYmplY3R9IGBpbml0T3B0aW9uc2AgVGhlIGBpbml0T3B0aW9uc2AgdGhhdCBWaXNhIENoZWNrb3V0IHNob3VsZCBiZSBpbml0aWFsaXplZCB3aXRoLlxuICovXG5WaXNhQ2hlY2tvdXQucHJvdG90eXBlLmNyZWF0ZUluaXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIGluaXRPcHRpb25zO1xuICB2YXIgZ2F0ZXdheUNvbmZpZ3VyYXRpb24gPVxuICAgIHRoaXMuX2NsaWVudC5nZXRDb25maWd1cmF0aW9uKCkuZ2F0ZXdheUNvbmZpZ3VyYXRpb247XG4gIHZhciB2aXNhQ2hlY2tvdXRDb25maWd1cmF0aW9uID0gZ2F0ZXdheUNvbmZpZ3VyYXRpb24udmlzYUNoZWNrb3V0O1xuXG4gIGlmICghb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBCcmFpbnRyZWVFcnJvcihlcnJvcnMuVklTQV9DSEVDS09VVF9JTklUX09QVElPTlNfUkVRVUlSRUQpO1xuICB9XG5cbiAgaW5pdE9wdGlvbnMgPSBqc29uQ2xvbmUob3B0aW9ucyk7XG4gIGluaXRPcHRpb25zLmFwaWtleSA9IGluaXRPcHRpb25zLmFwaWtleSB8fCB2aXNhQ2hlY2tvdXRDb25maWd1cmF0aW9uLmFwaWtleTtcbiAgaW5pdE9wdGlvbnMuZW5jcnlwdGlvbktleSA9IHZpc2FDaGVja291dENvbmZpZ3VyYXRpb24uZW5jcnlwdGlvbktleTtcbiAgaW5pdE9wdGlvbnMuZXh0ZXJuYWxDbGllbnRJZCA9XG4gICAgaW5pdE9wdGlvbnMuZXh0ZXJuYWxDbGllbnRJZCB8fCB2aXNhQ2hlY2tvdXRDb25maWd1cmF0aW9uLmV4dGVybmFsQ2xpZW50SWQ7XG4gIGluaXRPcHRpb25zLnNldHRpbmdzID0gaW5pdE9wdGlvbnMuc2V0dGluZ3MgfHwge307XG4gIGluaXRPcHRpb25zLnNldHRpbmdzLmRhdGFMZXZlbCA9IFwiRlVMTFwiO1xuICBpbml0T3B0aW9ucy5zZXR0aW5ncy5wYXltZW50ID0gaW5pdE9wdGlvbnMuc2V0dGluZ3MucGF5bWVudCB8fCB7fTtcblxuICBpZiAoIWluaXRPcHRpb25zLnNldHRpbmdzLnBheW1lbnQuY2FyZEJyYW5kcykge1xuICAgIGluaXRPcHRpb25zLnNldHRpbmdzLnBheW1lbnQuY2FyZEJyYW5kcyA9IHRyYW5zZm9ybUNhcmRUeXBlcyhcbiAgICAgIGdhdGV3YXlDb25maWd1cmF0aW9uLnZpc2FDaGVja291dC5zdXBwb3J0ZWRDYXJkVHlwZXNcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGluaXRPcHRpb25zO1xufTtcblxuLyoqXG4gKiBUb2tlbml6ZXMgdGhlIFZpc2EgQ2hlY2tvdXQgcGF5bG9hZCwgcmV0dXJuaW5nIGEgcGF5bWVudCBtZXRob2Qgbm9uY2UuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gcGF5bWVudCBUaGUgb2JqZWN0IHRoYXQgVmlzYSBDaGVja291dCBzdXBwbGllcyBvbiBgcGF5bWVudC5zdWNjZXNzYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXltZW50LmNhbGxpZCBWaXNhIENoZWNrb3V0IHRyYW5zYWN0aW9uIElEIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHBheW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF5bWVudC5lbmNLZXkgVGhlIGVuY3J5cHRlZCBrZXkgdXNlZCB0byBkZWNyeXB0IHRoZSBwYXltZW50IGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF5bWVudC5lbmNQYXltZW50RGF0YSBUaGUgZW5jcnlwdGVkIHBheW1lbnQgZGF0YS5cbiAqIEBwYXJhbSB7Y2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIHNlY29uZCBhcmd1bWVudCwgPGNvZGU+dG9rZW5pemVQYXlsb2FkPC9jb2RlPiBpcyBhIHtAbGluayBWaXNhQ2hlY2tvdXR+dG9rZW5pemVQYXlsb2FkfHRva2VuaXplUGF5bG9hZH0uIElmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBgdG9rZW5pemVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUge0BsaW5rIFZpc2FDaGVja291dH50b2tlbml6ZVBheWxvYWR8dG9rZW5pemVQYXlsb2FkfS5cbiAqIEByZXR1cm5zIHsoUHJvbWlzZXx2b2lkKX0gUmV0dXJucyBhIHByb21pc2UgaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQuXG4gKi9cblZpc2FDaGVja291dC5wcm90b3R5cGUudG9rZW5pemUgPSBmdW5jdGlvbiAocGF5bWVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKCFwYXltZW50LmNhbGxpZCB8fCAhcGF5bWVudC5lbmNLZXkgfHwgIXBheW1lbnQuZW5jUGF5bWVudERhdGEpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgQnJhaW50cmVlRXJyb3IoZXJyb3JzLlZJU0FfQ0hFQ0tPVVRfUEFZTUVOVF9SRVFVSVJFRClcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2NsaWVudFxuICAgIC5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICBlbmRwb2ludDogXCJwYXltZW50X21ldGhvZHMvdmlzYV9jaGVja291dF9jYXJkc1wiLFxuICAgICAgZGF0YToge1xuICAgICAgICBfbWV0YToge1xuICAgICAgICAgIHNvdXJjZTogXCJ2aXNhLWNoZWNrb3V0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHZpc2FDaGVja291dENhcmQ6IHtcbiAgICAgICAgICBjYWxsSWQ6IHBheW1lbnQuY2FsbGlkLFxuICAgICAgICAgIGVuY3J5cHRlZFBheW1lbnREYXRhOiBwYXltZW50LmVuY1BheW1lbnREYXRhLFxuICAgICAgICAgIGVuY3J5cHRlZEtleTogcGF5bWVudC5lbmNLZXksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBhbmFseXRpY3Muc2VuZEV2ZW50KHNlbGYuX2NsaWVudCwgXCJ2aXNhY2hlY2tvdXQudG9rZW5pemUuc3VjY2VlZGVkXCIpO1xuXG4gICAgICByZXR1cm4gcmVzcG9uc2UudmlzYUNoZWNrb3V0Q2FyZHNbMF07XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgYW5hbHl0aWNzLnNlbmRFdmVudChzZWxmLl9jbGllbnQsIFwidmlzYWNoZWNrb3V0LnRva2VuaXplLmZhaWxlZFwiKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBuZXcgQnJhaW50cmVlRXJyb3Ioe1xuICAgICAgICAgIHR5cGU6IGVycm9ycy5WSVNBX0NIRUNLT1VUX1RPS0VOSVpBVElPTi50eXBlLFxuICAgICAgICAgIGNvZGU6IGVycm9ycy5WSVNBX0NIRUNLT1VUX1RPS0VOSVpBVElPTi5jb2RlLFxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9ycy5WSVNBX0NIRUNLT1VUX1RPS0VOSVpBVElPTi5tZXNzYWdlLFxuICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycixcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogQ2xlYW5seSB0ZWFyIGRvd24gYW55dGhpbmcgc2V0IHVwIGJ5IHtAbGluayBtb2R1bGU6YnJhaW50cmVlLXdlYi92aXNhLWNoZWNrb3V0LmNyZWF0ZXxjcmVhdGV9LlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtjYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsZWQgb25jZSB0ZWFyZG93biBpcyBjb21wbGV0ZS4gTm8gZGF0YSBpcyByZXR1cm5lZCBpZiB0ZWFyZG93biBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5LlxuICogQGV4YW1wbGVcbiAqIHZpc2FDaGVja291dEluc3RhbmNlLnRlYXJkb3duKCk7XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5XaXRoIGNhbGxiYWNrPC9jYXB0aW9uPlxuICogdmlzYUNoZWNrb3V0SW5zdGFuY2UudGVhcmRvd24oZnVuY3Rpb24gKCkge1xuICogICAvLyB0ZWFyZG93biBpcyBjb21wbGV0ZVxuICogfSk7XG4gKiBAcmV0dXJucyB7KFByb21pc2V8dm9pZCl9IFJldHVybnMgYSBwcm9taXNlIGlmIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuICovXG5WaXNhQ2hlY2tvdXQucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gKCkge1xuICBjb252ZXJ0TWV0aG9kc1RvRXJyb3IodGhpcywgbWV0aG9kcyhWaXNhQ2hlY2tvdXQucHJvdG90eXBlKSk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB3cmFwUHJvbWlzZS53cmFwUHJvdG90eXBlKFZpc2FDaGVja291dCk7XG5cbn0se1wiLi4vbGliL2FuYWx5dGljc1wiOjExOSxcIi4uL2xpYi9icmFpbnRyZWUtZXJyb3JcIjoxMjQsXCIuLi9saWIvY29udmVydC1tZXRob2RzLXRvLWVycm9yXCI6MTI3LFwiLi4vbGliL2pzb24tY2xvbmVcIjoxNTQsXCIuLi9saWIvbWV0aG9kc1wiOjE1NSxcIi4vZXJyb3JzXCI6MjI1LFwiQGJyYWludHJlZS93cmFwLXByb21pc2VcIjo0M31dfSx7fSxbMTE3XSkoMTE3KVxufSk7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBMZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgTWc9VWYobnVsbCksTmc9bnVsbCxPZz1udWxsLFBnPW51bGw7ZnVuY3Rpb24gUWcoKXtQZz1PZz1OZz1udWxsfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPU1nLmN1cnJlbnQ7RShNZyk7YS5fY3VycmVudFZhbHVlPWJ9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIFRnKGEsYil7Tmc9YTtQZz1PZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKFVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIFZnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihQZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1PZyl7aWYobnVsbD09PU5nKXRocm93IEVycm9yKHAoMzA4KSk7T2c9YTtOZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgT2c9T2cubmV4dD1hO3JldHVybiBifXZhciBXZz1udWxsO2Z1bmN0aW9uIFhnKGEpe251bGw9PT1XZz9XZz1bYV06V2cucHVzaChhKX1mdW5jdGlvbiBZZyhhLGIsYyxkKXt2YXIgZT1iLmludGVybGVhdmVkO251bGw9PT1lPyhjLm5leHQ9YyxYZyhiKSk6KGMubmV4dD1lLm5leHQsZS5uZXh0PWMpO2IuaW50ZXJsZWF2ZWQ9YztyZXR1cm4gWmcoYSxkKX1cbmZ1bmN0aW9uIFpnKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgJGc9ITE7ZnVuY3Rpb24gYWgoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGJoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIGNoKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gZGgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIFpnKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixYZyhkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gWmcoYSxjKX1mdW5jdGlvbiBlaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7JGc9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6JGc9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO2hofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBpaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBqaD0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBraChhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgbmg9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1MKCksZD1cbmxoKGEpLGU9Y2goYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPWRoKGEsZSxkKTtudWxsIT09YiYmKG1oKGIsYSxkLGMpLGVoKGIsYSxkKSl9fTtmdW5jdGlvbiBvaChhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIHBoKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPVZnKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1uaDthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHJoKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amg7YWgoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1WZyhmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihraChhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxnaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztiPT09amgmJihiPWUucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIHVoKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiB2aChhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT13aChhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXhoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJnVoKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9c2goYSxiLGMpLGQucmV0dXJuPWEsZDtkPXloKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPXNoKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9emgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPUFoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXhoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPXloKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9c2goYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPXpoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1BaChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjt0aChhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO3RoKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO3RoKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJnVoKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1zaChhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9QWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPXloKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPXNoKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXpoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO3RoKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9eGgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgQmg9dmgoITApLENoPXZoKCExKSxEaD17fSxFaD1VZihEaCksRmg9VWYoRGgpLEdoPVVmKERoKTtmdW5jdGlvbiBIaChhKXtpZihhPT09RGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBJaChhLGIpe0coR2gsYik7RyhGaCxhKTtHKEVoLERoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1sYihiLGEpfUUoRWgpO0coRWgsYil9ZnVuY3Rpb24gSmgoKXtFKEVoKTtFKEZoKTtFKEdoKX1cbmZ1bmN0aW9uIEtoKGEpe0hoKEdoLmN1cnJlbnQpO3ZhciBiPUhoKEVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcoRmgsYSksRyhFaCxjKSl9ZnVuY3Rpb24gTGgoYSl7RmguY3VycmVudD09PWEmJihFKEVoKSxFKEZoKSl9dmFyIE09VWYoMCk7XG5mdW5jdGlvbiBNaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgTmg9W107XG5mdW5jdGlvbiBPaCgpe2Zvcih2YXIgYT0wO2E8TmgubGVuZ3RoO2ErKylOaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO05oLmxlbmd0aD0wfXZhciBQaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFFoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFJoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsU2g9ITEsVGg9ITEsVWg9MCxWaD0wO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBXaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoYSxiLGMsZCxlLGYpe1JoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7UGguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9ZaDpaaDthPWMoZCxlKTtpZihUaCl7Zj0wO2Rve1RoPSExO1VoPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtQaC5jdXJyZW50PSRoO2E9YyhkLGUpfXdoaWxlKFRoKX1QaC5jdXJyZW50PWFpO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7Umg9MDtQPU89Tj1udWxsO1NoPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBiaSgpe3ZhciBhPTAhPT1VaDtVaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gY2koKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gZGkoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIGVpKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gZmkoYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChSaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO04ubGFuZXN8PW07aGh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTi5sYW5lc3w9ZixoaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIGdpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIGhpKCl7fVxuZnVuY3Rpb24gaWkoYSxiKXt2YXIgYz1OLGQ9ZGkoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLFVnPSEwKTtkPWQucXVldWU7amkoa2kuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09UCYmUC5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gbmkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gbWkoYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtvaShiKSYmcGkoYSl9ZnVuY3Rpb24ga2koYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7b2koYikmJnBpKGEpfSl9ZnVuY3Rpb24gb2koYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gcGkoYSl7dmFyIGI9WmcoYSwxKTtudWxsIT09YiYmbWgoYixhLDEsLTEpfVxuZnVuY3Rpb24gcWkoYSl7dmFyIGI9Y2koKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjplaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXJpLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBsaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2koKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHRpKGEsYixjLGQpe3ZhciBlPWNpKCk7Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWRpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmV2goZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9bGkoYixjLGYsZCk7cmV0dXJufX1OLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHZpKGEsYil7cmV0dXJuIHRpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGppKGEsYil7cmV0dXJuIHVpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHdpKGEsYil7cmV0dXJuIHVpKDQsMixhLGIpfWZ1bmN0aW9uIHhpKGEsYil7cmV0dXJuIHVpKDQsNCxhLGIpfVxuZnVuY3Rpb24geWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB6aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHVpKDQsNCx5aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBBaSgpe31mdW5jdGlvbiBCaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIENpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIERpKGEsYixjKXtpZigwPT09KFJoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxVZz0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxOLmxhbmVzfD1jLGhofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBFaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1RaC50cmFuc2l0aW9uO1FoLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxRaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEZpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1saChhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGMpO2Vsc2UgaWYoYz1ZZyhhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9TCgpO21oKGMsYSxkLGUpO0ppKGMsYixkKX19XG5mdW5jdGlvbiByaShhLGIsYyl7dmFyIGQ9bGgoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsWGcoYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1ZZyhhLGIsZSxkKTtudWxsIT09YyYmKGU9TCgpLG1oKGMsYSxkLGUpLEppKGMsYixkKSl9fVxuZnVuY3Rpb24gSGkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1OfHxudWxsIT09YiYmYj09PU59ZnVuY3Rpb24gSWkoYSxiKXtUaD1TaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEppKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgYWk9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VJbnNlcnRpb25FZmZlY3Q6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlEsdXNlTXV0YWJsZVNvdXJjZTpRLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlEsdXNlSWQ6USx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFloPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe2NpKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OnZpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0aSg0MTk0MzA4LFxuNCx5aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1jaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jaSgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUdpLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbmNpKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnFpLHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gY2koKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1xaSghMSksYj1hWzBdO2E9RWkuYmluZChudWxsLGFbMV0pO2NpKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TixlPWNpKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9Zjt2aShraS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1jaSgpLGI9Ui5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1VaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9VmgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFpoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmZpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBmaShlaSl9LFxudXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIERpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9ZmkoZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sJGg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6Z2ksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGdpKGVpKX0sdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIG51bGw9PT1cbk8/Yi5tZW1vaXplZFN0YXRlPWE6RGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1naShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBLaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19ZnVuY3Rpb24gTGkoYSxiLGMpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpudWxsLHN0YWNrOm51bGwhPWM/YzpudWxsLGRpZ2VzdDpudWxsIT1iP2I6bnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gT2koYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UGl8fChQaT0hMCxRaT1kKTtNaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFJpKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVNpP1NpPW5ldyBTZXQoW3RoaXNdKTpTaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBOaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVVpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFZpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9Y2goLTEsMSksYi50YWc9MixkaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgWGk9dWEuUmVhY3RDdXJyZW50T3duZXIsVWc9ITE7ZnVuY3Rpb24gWWkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9DaChiLG51bGwsYyxkKTpCaChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFppKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtUZyhiLGUpO2Q9WGgoYSxiLGMsZCxmLGUpO2M9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFiaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixjaihhLGIsZixkLGUpO2E9eWgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuICRpKGEsYixlKX1iLmZsYWdzfD0xO2E9d2goZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihVZz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoVWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcywkaShhLGIsZSl9cmV0dXJuIGRqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBlaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZmosZ2opLGdqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZmosZ2opLGdqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhmaixnaik7Z2p8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGZqLGdqKSxnanw9ZDtZaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBkaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7VGcoYixlKTtjPVhoKGEsYixjLGQsZixlKTtkPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO1RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWpqKGEsYikscGgoYixjLGQpLHJoKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPVZnKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZxaChiLGcsZCxsKTskZz0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2goYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPSRnfHxvaChiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtiaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkxnKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPVZnKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZxaChiLGcsZCxrKTskZz0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoa2goYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPSRnfHxvaChiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4ga2ooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24ga2ooYSxiLGMsZCxlLGYpe2hqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLCRpKGEsYixmKTtkPWIuc3RhdGVOb2RlO1hpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9QmgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1CaChiLG51bGwsaCxmKSk6WWkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBsaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTtJaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBtaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1lpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBuaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG9qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIHBqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPU0uY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhNLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1xaihnLGQsMCxudWxsKSxhPUFoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGMpLGIubWVtb2l6ZWRTdGF0ZT1uaixhKTpyaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiBzaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9d2goZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj13aChoLGYpOihmPUFoKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/b2ooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPXdoKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHJqKGEsYil7Yj1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gdGooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO0JoKGIsYS5jaGlsZCxudWxsLGMpO2E9cmooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHNqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9TGkoRXJyb3IocCg0MjIpKSksdGooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPUFoKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmQmgoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGcpO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gdGooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1MaShmLGQsdm9pZCAwKTtyZXR1cm4gdGooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihVZ3x8aCl7ZD1SO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsWmcoYSxlKSxtaChkLGEsZSwtMSkpfXVqKCk7ZD1MaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gdGooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dmouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXJqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB3aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO1NnKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB4aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtZaShhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ3aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXdqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhNLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1NaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3hqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09TWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXhqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnhqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGpqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uICRpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtoaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9d2goYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXdoKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB6aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6bGooYik7SWcoKTticmVhaztjYXNlIDU6S2goYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDpJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKE0sTS5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBwaihhLGIsYyk7RyhNLE0uY3VycmVudCYxKTthPSRpKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geWooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTSxNLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxlaihhLGIsYyl9cmV0dXJuICRpKGEsYixjKX12YXIgQWosQmosQ2osRGo7XG5Baj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Qmo9ZnVuY3Rpb24oKXt9O1xuQ2o9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO0hoKEVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtEaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIEVqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBGaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7SmgoKTtFKFdmKTtFKEgpO09oKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihHaih6Zyksemc9bnVsbCkpO0JqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6TGgoYik7dmFyIGU9SGgoR2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQ2ooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT1IaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7QWooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlEaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPUhoKEdoLmN1cnJlbnQpO0hoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShNLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnVqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLFxuQmooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShNKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKUVqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1NaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0VqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkhqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9TWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxFaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+SGomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPU0uY3VycmVudCxHKE0sZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZ2omMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIEpqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiBKaCgpLEUoV2YpLEUoSCksT2goKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBMaChiKSxudWxsO2Nhc2UgMTM6RShNKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShNKSxudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEtqPSExLFU9ITEsTGo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIE1qKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBOaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE9qPSExO1xuZnVuY3Rpb24gUGooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpMZyhiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU9qO09qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUWooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTmooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUmooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBUaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsVGooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBVaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFZqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFVqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBYaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspWGooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWWo9ITE7ZnVuY3Rpb24gWmooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KWFrKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIGFrKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TWooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVlqO1g9bnVsbDtaaihhLGIsYyk7WD1kO1lqPWU7bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1ZajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7XG5aaihhLGIsYyk7WD1kO1lqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9OaihjLGIsZyk6MCE9PShmJjQpJiZOaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTWooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVpqKGEsYixjKTticmVhaztjYXNlIDIxOlpqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWmooYSxiLGMpLFU9ZCk6WmooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WmooYSxiLGMpfX1mdW5jdGlvbiBiayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBMaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWNrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WWo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTthayhmLGcsZSk7WD1udWxsO1lqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZWsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGVrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXt0cnl7UWooMyxhLGEucmV0dXJuKSxSaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UWooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpkayhiLGEpO2ZrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpkayhiLGEpO2ZrKGEpO2JyZWFrO2Nhc2UgMTM6ZGsoYixhKTtmayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGdrPUIoKSkpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGRrKGIsYSksVT1sKTpkayhiLGEpO2ZrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpRaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpNaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1Ok1qKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7aGsocSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6aGsocSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpkayhiLGEpO2ZrKGEpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmRrKGIsXG5hKSxmayhhKX19ZnVuY3Rpb24gZmsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihVaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1WaihhKTtYaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VmooYSk7V2ooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaWsoYSxiLGMpe1Y9YTtqayhhLGIsYyl9XG5mdW5jdGlvbiBqayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8S2o7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Lajt2YXIgbD1VO0tqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9rayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmtrKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixqayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0tqPWg7VT1sfWxrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6bGsoYSxiLGMpfX1cbmZ1bmN0aW9uIGxrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UmooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpMZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZpaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9aWgoYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlNqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGhrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBrayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtSaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBtaz1NYXRoLmNlaWwsbms9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixvaz11YS5SZWFjdEN1cnJlbnRPd25lcixwaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUj1udWxsLFk9bnVsbCxaPTAsZ2o9MCxmaj1VZigwKSxUPTAscWs9bnVsbCxoaD0wLHJrPTAsc2s9MCx0az1udWxsLHVrPW51bGwsZ2s9MCxIaj1JbmZpbml0eSx2az1udWxsLFBpPSExLFFpPW51bGwsU2k9bnVsbCx3az0hMSx4az1udWxsLHlrPTAsems9MCxBaz1udWxsLEJrPS0xLENrPTA7ZnVuY3Rpb24gTCgpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09Qms/Qms6Qms9QigpfVxuZnVuY3Rpb24gbGgoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUNrJiYoQ2s9eWMoKSksQ2s7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIG1oKGEsYixjLGQpe2lmKDUwPHprKXRocm93IHprPTAsQWs9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1SKWE9PT1SJiYoMD09PShLJjIpJiYocmt8PWMpLDQ9PT1UJiZEayhhLFopKSxFayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihIaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIEVrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEZrLmJpbmQobnVsbCxhKSk6aGcoRmsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9R2soYyxIay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gSGsoYSxiKXtCaz0tMTtDaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKElrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUprKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsSGo9QigpKzUwMCxMayhhLGIpO2RvIHRyeXtNaygpO2JyZWFrfWNhdGNoKGgpe05rKGEsaCl9d2hpbGUoMSk7UWcoKTtuay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUj1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1PayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7aWYoNj09PWIpRGsoYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFQayhlKSYmKGI9SmsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1PayhhLGYpKSksMT09PWIpKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSAzOkRrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWdrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe0woKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxiKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDQ6RGsoYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCptayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksZCk7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA1OlFrKGEsdWssdmspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1FayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Iay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE9rKGEsYil7dmFyIGM9dGs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoTGsoYSxiKS5mbGFnc3w9MjU2KTthPUprKGEsYik7MiE9PWEmJihiPXVrLHVrPWMsbnVsbCE9PWImJkdqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBHaihhKXtudWxsPT09dWs/dWs9YTp1ay5wdXNoLmFwcGx5KHVrLGEpfVxuZnVuY3Rpb24gUGsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIERrKGEsYil7YiY9fnNrO2ImPX5yazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBGayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtJaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBFayhhLEIoKSksbnVsbDt2YXIgYz1KayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9T2soYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1xayxMayhhLDApLERrKGEsYiksRWsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1FrKGEsdWssdmspO0VrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBTayhhKXtudWxsIT09eGsmJjA9PT14ay50YWcmJjA9PT0oSyY2KSYmSWsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9cGsudHJhbnNpdGlvbixkPUM7dHJ5e2lmKHBrLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLHBrLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBJaigpe2dqPWZqLmN1cnJlbnQ7RShmail9XG5mdW5jdGlvbiBMayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzpKaCgpO0UoV2YpO0UoSCk7T2goKTticmVhaztjYXNlIDU6TGgoZCk7YnJlYWs7Y2FzZSA0OkpoKCk7YnJlYWs7Y2FzZSAxMzpFKE0pO2JyZWFrO2Nhc2UgMTk6RShNKTticmVhaztjYXNlIDEwOlJnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOklqKCl9Yz1jLnJldHVybn1SPWE7WT1hPXdoKGEuY3VycmVudCxudWxsKTtaPWdqPWI7VD0wO3FrPW51bGw7c2s9cms9aGg9MDt1az10az1udWxsO2lmKG51bGwhPT1XZyl7Zm9yKGI9XG4wO2I8V2cubGVuZ3RoO2IrKylpZihjPVdnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfVdnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBOayhhLGIpe2Rve3ZhciBjPVk7dHJ5e1FnKCk7UGguY3VycmVudD1haTtpZihTaCl7Zm9yKHZhciBkPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9U2g9ITF9Umg9MDtQPU89Tj1udWxsO1RoPSExO1VoPTA7b2suY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtxaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1WaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztXaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZUaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1RpKGYsbCxiKTt1aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1WaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7V2koSixnLGgsZixiKTtKZyhLaShrLGgpKTticmVhayBhfX1mPWs9S2koayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXRrP3RrPVtmXTp0ay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9T2koZixrLGIpO2ZoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1SaShmLGgsYik7ZmgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1UayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEtrKCl7dmFyIGE9bmsuY3VycmVudDtuay5jdXJyZW50PWFpO3JldHVybiBudWxsPT09YT9haTphfVxuZnVuY3Rpb24gdWooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09Unx8MD09PShoaCYyNjg0MzU0NTUpJiYwPT09KHJrJjI2ODQzNTQ1NSl8fERrKFIsWil9ZnVuY3Rpb24gSmsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxMayhhLGIpO2RvIHRyeXtVaygpO2JyZWFrfWNhdGNoKGUpe05rKGEsZSl9d2hpbGUoMSk7UWcoKTtLPWM7bmsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7Uj1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBVaygpe2Zvcig7bnVsbCE9PVk7KVZrKFkpfWZ1bmN0aW9uIE1rKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVZrKFkpfWZ1bmN0aW9uIFZrKGEpe3ZhciBiPVdrKGEuYWx0ZXJuYXRlLGEsZ2opO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9UayhhKTpZPWI7b2suY3VycmVudD1udWxsfVxuZnVuY3Rpb24gVGsoYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RmooYyxiLGdqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUpqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUWsoYSxiLGMpe3ZhciBkPUMsZT1way50cmFuc2l0aW9uO3RyeXtway50cmFuc2l0aW9uPW51bGwsQz0xLFhrKGEsYixjLGQpfWZpbmFsbHl7cGsudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFhrKGEsYixjLGQpe2RvIElrKCk7d2hpbGUobnVsbCE9PXhrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVImJihZPVI9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8d2t8fCh3az0hMCxHayhoYyxmdW5jdGlvbigpe0lrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPXBrLnRyYW5zaXRpb247cGsudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O29rLmN1cnJlbnQ9bnVsbDtQaihhLGMpO2VrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztpayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO3BrLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3drJiYod2s9ITEseGs9YSx5az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoU2k9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RWsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKFBpKXRocm93IFBpPSExLGE9UWksUWk9bnVsbCxhOzAhPT0oeWsmMSkmJjAhPT1hLnRhZyYmSWsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09QWs/emsrKzooems9MCxBaz1hKTp6az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBJaygpe2lmKG51bGwhPT14ayl7dmFyIGE9RGMoeWspLGI9cGsudHJhbnNpdGlvbixjPUM7dHJ5e3BrLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09eGspdmFyIGQ9ITE7ZWxzZXthPXhrO3hrPW51bGw7eWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47VGoobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpSaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxway50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFlrKGEsYixjKXtiPUtpKGMsYik7Yj1PaShhLGIsMSk7YT1kaChhLGIsMSk7Yj1MKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRWsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWWsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WWsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXMoZCkpKXthPUtpKGMsYSk7YT1SaShiLGEsMSk7Yj1kaChiLGEsMSk7YT1MKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRWsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUwoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7Uj09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZ2s/TGsoYSwwKTpza3w9Yyk7RWsoYSxiKX1mdW5jdGlvbiBaayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPUwoKTthPVpnKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRWsoYSxjKSl9ZnVuY3Rpb24gdmooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1prKGEsYyl9XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtaayhhLGMpfXZhciBXaztcbldrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClVZz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIFVnPSExLHpqKGEsYixjKTtVZz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIFVnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7VGcoYixjKTtlPVhoKG51bGwsYixkLGEsZSxjKTt2YXIgZj1iaSgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsYWgoYiksZS51cGRhdGVyPW5oLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixyaChiLGQsYSxjKSxiPWtqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFlpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz0kayhkKTthPUxnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWRqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1paihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVppKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWoobnVsbCxiLGQsTGcoZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGRqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGlqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2xqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtiaChhLGIpO2doKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUtpKEVycm9yKHAoNDIzKSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1LaShFcnJvcihwKDQyNCkpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1DaChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPSRpKGEsYixjKTticmVhayBhfVlpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEtoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuaGooYSxiKSxZaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gcGooYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9QmgoYixudWxsLGQsYyk6WWkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLFppKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPSRpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPWNoKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtTZyhmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtTZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WWkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixUZyhiLGMpLGU9VmcoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWWkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9TGcoZCxiLnBlbmRpbmdQcm9wcyksZT1MZyhkLnR5cGUsZSksYWooYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBjaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksamooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLFRnKGIsYykscGgoYixkLGUpLHJoKGIsZCxlLGMpLGtqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGVqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gR2soYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uIGFsKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgYWwoYSxiLGMsZCl9ZnVuY3Rpb24gYmooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uICRrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB3aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB5aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIEFoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBxaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHFqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24geGgoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gemgoYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBibChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBjbChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYmwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2FoKGYpO3JldHVybiBhfWZ1bmN0aW9uIGRsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBlbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGZsKGEsYixjLGQsZSxmLGcsaCxrKXthPWNsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWVsKG51bGwpO2M9YS5jdXJyZW50O2Q9TCgpO2U9bGgoYyk7Zj1jaChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO2RoKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RWsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBnbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1MKCksZz1saChlKTtjPWVsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9Y2goZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1kaChlLGIsZyk7bnVsbCE9PWEmJihtaChhLGUsZyxmKSxlaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gaGwoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBpbChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gamwoYSxiKXtpbChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaWwoYSxiKX1mdW5jdGlvbiBrbCgpe3JldHVybiBudWxsfXZhciBsbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbWwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUucmVuZGVyPW1sLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7Z2woYSxiLG51bGwsbnVsbCl9O25sLnByb3RvdHlwZS51bm1vdW50PW1sLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87U2soZnVuY3Rpb24oKXtnbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBubChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIHBsKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBxbCgpe31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2YuY2FsbChhKX19dmFyIGc9ZmwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGspO2guY2FsbChhKX19dmFyIGs9Y2woYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKGZ1bmN0aW9uKCl7Z2woYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHNsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2guY2FsbChhKX19Z2woYixnLGEsZSl9ZWxzZSBnPXJsKGMsYixhLGUsZCk7cmV0dXJuIGhsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLEVrKGIsQigpKSwwPT09KEsmNikmJihIaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlNrKGZ1bmN0aW9uKCl7dmFyIGI9WmcoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxLGMpfX0pLGpsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVpnKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxMzQyMTc3MjgsYyl9amwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9bGgoYSksYz1aZyhhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1MKCk7bWgoYyxhLGIsZCl9amwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9Ums7SGI9U2s7XG52YXIgdGw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFJrXX0sdWw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB2bD17YnVuZGxlVHlwZTp1bC5idW5kbGVUeXBlLHZlcnNpb246dWwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnVsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dWwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp1bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5rbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgd2w9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF3bC5pc0Rpc2FibGVkJiZ3bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz13bC5pbmplY3QodmwpLGxjPXdsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD10bDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGRsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1sbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9Y2woYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IG1sKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBTayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1sbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZmwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbmwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcGwoYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFNrKGZ1bmN0aW9uKCl7c2wobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9Ums7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFwbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gc2woYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImltcG9ydCB7XG4gIGNoZWNrb3V0T25GYWlsUmVxdWVzdCxcbiAgY2hlY2tvdXRPblN1Y2Nlc3NSZXF1ZXN0LFxuICBjcmVhdGVDbGllbnRTZXNzaW9uUmVxdWVzdCxcbiAgY3JlYXRlQ2xpZW50U2Vzc2lvblJlc3BvbnNlLFxuICBjcmVhdGVQYXltZW50UmVxdWVzdCxcbiAgY3JlYXRlUGF5bWVudFJlc3BvbnNlLFxuICBDdXN0b21lcixcbiAgQ3VzdG9tZXJJZCxcbiAgUGF5bWVudENsaWVudFNldHRpbmdzVHlwZSxcbiAgUHJpY2VQb2ludFJlcXVlc3QsXG4gIFByaWNlUG9pbnRSZXNwb25zZSxcbiAgcmVzdW1lUGF5bWVudFJlcXVlc3QsXG4gIHJlc3VtZVBheW1lbnRSZXNwb25zZSxcbiAgc3RhcnRDaGVja291dFJlcXVlc3RUeXBlLFxufSBmcm9tICcuLi90eXBlJztcblxuY29uc3QgY2hlY2tvdXROYW1lc3BhY2UgPSAnL2NoZWNrb3V0JztcblxuY29uc3QgcHJpbWVyTmFtZXNwYWNlID0gJy9wcmltZXInO1xuXG5leHBvcnQgY2xhc3MgQXBpIHtcbiAgY2xpZW50U2V0dGluZzogUGF5bWVudENsaWVudFNldHRpbmdzVHlwZTtcbiAgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNsaWVudFNldHRpbmc6IFBheW1lbnRDbGllbnRTZXR0aW5nc1R5cGUsXG4gICAgaGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbiAgKSB7XG4gICAgdGhpcy5jbGllbnRTZXR0aW5nID0gY2xpZW50U2V0dGluZztcbiAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzIHx8IHt9O1xuICB9XG5cbiAgc2V0SGVhZGVycyhoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSB7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcG9zdChcbiAgICB1cmw6IHN0cmluZyxcbiAgICBkYXRhOiBSZWNvcmQ8YW55LCBhbnk+LFxuICAgIGhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgcmVxdWVzdEhlYWRlcnMgPSBoZWFkZXJzIHx8IHRoaXMuaGVhZGVycztcbiAgICByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgcmVxdWVzdEhlYWRlcnNbJ3gtYXBpLWtleSddID0gdGhpcy5jbGllbnRTZXR0aW5nLmFwaUtleTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZldGNoKHRoaXMuY2xpZW50U2V0dGluZy5hcGlFbmRwb2ludCArIHVybCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiByZXF1ZXN0SGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdC5qc29uKCk7XG4gIH1cblxuICBhc3luYyBnZXRQcmljZVBvaW50cyhcbiAgICByZXF1ZXN0OiBQcmljZVBvaW50UmVxdWVzdFxuICApOiBQcm9taXNlPFByaWNlUG9pbnRSZXNwb25zZT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnBvc3QoJy9zaG93Y2FzZS9nZXQtcHJpY2UtcG9pbnRzJywgcmVxdWVzdCk7XG4gIH1cblxuICBjcmVhdGVDbGllbnRTZXNzaW9uKFxuICAgIGRhdGE6IGNyZWF0ZUNsaWVudFNlc3Npb25SZXF1ZXN0XG4gICk6IFByb21pc2U8Y3JlYXRlQ2xpZW50U2Vzc2lvblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMucG9zdChgJHtjaGVja291dE5hbWVzcGFjZX0vY3JlYXRlLWNsaWVudC1zZXNzaW9uYCwgZGF0YSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVDbGllbnRTZXNzaW9uKGRhdGE6IHtcbiAgICBtZXRhZGF0YTogeyBbcDogc3RyaW5nXTogbnVtYmVyIHwgc3RyaW5nIH07XG4gICAgb3JkZXJJZD86IHN0cmluZztcbiAgICBpZGVudDogc3RyaW5nO1xuICAgIGNvdW50cnlDb2RlPzogc3RyaW5nO1xuICAgIGNsaWVudFRva2VuOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgY3VzdG9tZXJJZD86IEN1c3RvbWVySWQ7XG4gICAgcGxhdGZvcm1Db2RlPzogc3RyaW5nO1xuICAgIGN1c3RvbWVyOiBDdXN0b21lcjtcbiAgfSk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3N0KGAke3ByaW1lck5hbWVzcGFjZX0vdXBkYXRlLWNsaWVudC1zZXNzaW9uYCwgZGF0YSk7XG4gIH1cblxuICBhc3luYyBzdGFydENoZWNrb3V0KGRhdGE6IHN0YXJ0Q2hlY2tvdXRSZXF1ZXN0VHlwZSk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3N0KGAke2NoZWNrb3V0TmFtZXNwYWNlfS9vbi1zdGFydGAsIGRhdGEpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlUGF5bWVudChcbiAgICBkYXRhOiBjcmVhdGVQYXltZW50UmVxdWVzdFxuICApOiBQcm9taXNlPGNyZWF0ZVBheW1lbnRSZXNwb25zZT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnBvc3QoYCR7Y2hlY2tvdXROYW1lc3BhY2V9L2NyZWF0ZS1wYXltZW50YCwgZGF0YSk7XG4gIH1cblxuICBhc3luYyByZXN1bWVQYXltZW50KFxuICAgIGRhdGE6IHJlc3VtZVBheW1lbnRSZXF1ZXN0XG4gICk6IFByb21pc2U8cmVzdW1lUGF5bWVudFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucG9zdChgJHtjaGVja291dE5hbWVzcGFjZX0vcmVzdW1lLXBheW1lbnRgLCBkYXRhKTtcbiAgfVxuXG4gIGFzeW5jIG9uU3VjY2Vzc0NoZWNrb3V0KGRhdGE6IGNoZWNrb3V0T25TdWNjZXNzUmVxdWVzdCk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3N0KGAke2NoZWNrb3V0TmFtZXNwYWNlfS9vbi1zdWNjZXNzYCwgZGF0YSk7XG4gIH1cblxuICBhc3luYyBvbkZhaWxDaGVja291dChkYXRhOiBjaGVja291dE9uRmFpbFJlcXVlc3QpOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucG9zdChgJHtjaGVja291dE5hbWVzcGFjZX0vb24tZmFpbGAsIGRhdGEpO1xuICB9XG5cbiAgYXN5bmMgbG9nRXZlbnQoXG4gICAgbGV2ZWw6IHN0cmluZyxcbiAgICBldmVudE5hbWU6IHN0cmluZyxcbiAgICBkYXRhOiBSZWNvcmQ8YW55LCBhbnk+LFxuICAgIGhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG4gICk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3N0KGAke3ByaW1lck5hbWVzcGFjZX0vbG9nLWV2ZW50YCwge1xuICAgICAgbGV2ZWwsXG4gICAgICBldmVudE5hbWUsXG4gICAgICBkYXRhLFxuICAgICAgaGVhZGVycyxcbiAgICB9KTtcbiAgfVxufVxuIiwiY29uc3QgcmFuZG9tVVVJRCA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEICYmIGNyeXB0by5yYW5kb21VVUlELmJpbmQoY3J5cHRvKTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmFuZG9tVVVJRFxufTsiLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbmxldCBnZXRSYW5kb21WYWx1ZXM7XG5jb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgLy8gbGF6eSBsb2FkIHNvIHRoYXQgZW52aXJvbm1lbnRzIHRoYXQgbmVlZCB0byBwb2x5ZmlsbCBoYXZlIGEgY2hhbmNlIHRvIGRvIHNvXG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLlxuICAgIGdldFJhbmRvbVZhbHVlcyA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0byk7XG5cbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG5jb25zdCBieXRlVG9IZXggPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgcmV0dXJuIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIGNvbnN0IHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyIsImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGlmIChuYXRpdmUucmFuZG9tVVVJRCAmJiAhYnVmICYmICFvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5hdGl2ZS5yYW5kb21VVUlEKCk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcblxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICBpZiAoYnVmKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuXG4gIHJldHVybiB1bnNhZmVTdHJpbmdpZnkocm5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHY0OyIsImltcG9ydCB7XG4gIFByaW1lckhlYWRsZXNzQ2hlY2tvdXQsXG4gIFByaW1lclZhdWx0TWFuYWdlcixcbiAgVW5pdmVyc2FsQ2hlY2tvdXRPcHRpb25zLFxufSBmcm9tICdAcHJpbWVyLWlvL2NoZWNrb3V0LXdlYic7XG5pbXBvcnQgeyBBdXRob3JpemF0aW9uUmVzcG9uc2VEZXRhaWxzIH0gZnJvbSAncGF5cGFsLWNoZWNrb3V0LWNvbXBvbmVudHMvbW9kdWxlcy9jYWxsYmFjay1kYXRhJztcblxuZXhwb3J0IHR5cGUgQ3VzdG9tZXJJZCA9IHtcbiAgdHlwZT86IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFVwZGF0ZUNsaWVudFNlc3Npb25SZXF1ZXN0ID1cbiAgfCBQYXltZW50Rm9ybVNldHRpbmdzXG4gIHwge1xuICAgICAgbWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICAgICAgY2xpZW50VG9rZW46IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gICAgfTtcblxuZXhwb3J0IGludGVyZmFjZSBQYXltZW50Q2xpZW50SSB7XG4gIGdldFByaWNlUG9pbnRzOiAocmVxdWVzdDogUHJpY2VQb2ludFJlcXVlc3QpID0+IFByb21pc2U8UHJpY2VQb2ludFtdPjtcbiAgc2hvd1BheW1lbnRGb3JtOiAoe1xuICAgIHNldHRpbmdzLFxuICAgIHByaW1lck9wdGlvbixcbiAgICBicmFpbnRyZWVPcHRpb24sXG4gICAgY2xpZW50VG9rZW4sXG4gICAgbWFudWFsUGF5bWVudHMsXG4gIH06IHtcbiAgICBzZXR0aW5nczogUGF5bWVudEZvcm1TZXR0aW5ncztcbiAgICBwcmltZXJPcHRpb246IFVuaXZlcnNhbENoZWNrb3V0T3B0aW9ucztcbiAgICBicmFpbnRyZWVPcHRpb246IGFueTtcbiAgICBjbGllbnRUb2tlbj86IHN0cmluZztcbiAgICBtYW51YWxQYXltZW50cz86IGJvb2xlYW47XG4gIH0pID0+IFByb21pc2U8UHJpbWVySGVhZGxlc3NDaGVja291dCB8IFByaW1lclZhdWx0TWFuYWdlciB8IG51bGw+O1xuICB1cGRhdGVQYXltZW50Rm9ybTogKHNldHRpbmdzOiBQYXltZW50Rm9ybVNldHRpbmdzKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBsb2FkUmVDYXB0Y2hhU2NyaXB0OiAoXG4gICAgb25SZUNhcHRjaGFSZWFkeT86ICgpID0+IHZvaWQsXG4gICAgb25FcnJvcj86ICgpID0+IHZvaWRcbiAgKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBjbGllbnRUb2tlblR5cGUgPSBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG5leHBvcnQgdHlwZSBjaGVja291dFRyYWNlSWQgPSBzdHJpbmcgfCBudWxsO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIG5hbWVzcGFjZSBncmVjYXB0Y2hhIHtcbiAgICBuYW1lc3BhY2UgZW50ZXJwcmlzZSB7XG4gICAgICBmdW5jdGlvbiBleGVjdXRlKFxuICAgICAgICBzaXRlS2V5OiBzdHJpbmcsXG4gICAgICAgIGNvbmZpZzogeyBhY3Rpb246IHN0cmluZyB9XG4gICAgICApOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAgIGZ1bmN0aW9uIHJlYWR5KGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogUHJvbWlzZTxzdHJpbmc+O1xuICAgIH1cbiAgfVxufVxuXG4vLyBwcmljZSBwb2ludHNcblxuZXhwb3J0IHR5cGUgRmVhdHVyZVR5cGUgPSAndGltZWJhc2VkJyB8ICdjb25zdW1hYmxlJztcblxuZXhwb3J0IHR5cGUgUHJvZHVjdEZlYXR1cmVJbmZvID0ge1xuICBpZGVudDogc3RyaW5nO1xuICBxdWFudGl0eTogbnVtYmVyO1xuICB0eXBlOiBGZWF0dXJlVHlwZTtcbn07XG5leHBvcnQgdHlwZSBTdWJzY3JpcHRpb25UeXBlcyA9ICdpbnRybycgfCAnaW50cm9fbmV4dCcgfCAnbGlmZXRpbWUnIHwgJ2ZyZWViaWUnO1xuZXhwb3J0IHR5cGUgU3RvcmVUeXBlID0gMSB8IDIgfCAzO1xuZXhwb3J0IHR5cGUgUGVyaW9kVHlwZXMgPVxuICB8ICdzZWNvbmQnXG4gIHwgJ21pbnV0ZSdcbiAgfCAnZGF5J1xuICB8ICd3ZWVrJ1xuICB8ICdtb250aCdcbiAgfCAneWVhcic7XG50eXBlIFByZXR0aWZ5PFQ+ID0ge1xuICBbSyBpbiBrZXlvZiBUXTogVFtLXTtcbn0gJiB1bmtub3duO1xuXG5leHBvcnQgdHlwZSBQcm9kdWN0SW5mbyA9IHtcbiAgc2t1OiBzdHJpbmc7XG4gIGZlYXR1cmVzOiBQcm9kdWN0RmVhdHVyZUluZm9bXTtcbn07XG5cbmV4cG9ydCB0eXBlIFByaWNlUG9pbnRSZXF1ZXN0ID0ge1xuICBjdXN0b21lcklkPzogQ3VzdG9tZXJJZCB8IG51bGw7XG4gIGF2YWlsYWJpbGl0eVJ1bGVzPzogYm9vbGVhbiB8IG51bGw7XG4gIGlkZW50Pzogc3RyaW5nW10gfCBudWxsO1xuICBzdGF0dXM/OiBzdHJpbmdbXSB8IG51bGw7XG4gIGNvdW50cnlDb2RlPzogc3RyaW5nIHwgbnVsbDtcbiAgcGxhdGZvcm1Db2RlPzogc3RyaW5nIHwgbnVsbDtcbiAgcmVxdWVzdENvbnRleHQ/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgbnVsbDtcbn07XG5cbmV4cG9ydCB0eXBlIFByaWNlUG9pbnRSZXNwb25zZSA9IHtcbiAgcHJpY2VQb2ludHM6IGFueVtdO1xuICBwcm9kdWN0czoge1xuICAgIFtrZXk6IHN0cmluZ106IG9iamVjdDtcbiAgfTtcbn07XG5cbnR5cGUgUHJpY2VQb2ludEJhc2UgPSB7XG4gIGlkZW50OiBzdHJpbmc7XG4gIHN0b3JlVHlwZTogU3RvcmVUeXBlO1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IFN1YnNjcmlwdGlvblR5cGVzO1xuICBwcmlvcml0eTogbnVtYmVyO1xuICBjdXJyZW5jeUNvZGU6IHN0cmluZztcbiAgcGFyYW1ldGVyczogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgcHJvZHVjdFNrdTogc3RyaW5nO1xuICBwcm9kdWN0OiBQcm9kdWN0SW5mbztcbiAgaW50cm9CYXNlUHJpY2U6IHN0cmluZyB8IG51bGw7XG4gIGludHJvUGVyaW9kVmFsdWU6IG51bWJlciB8IG51bGw7XG4gIGludHJvUGVyaW9kVHlwZTogUGVyaW9kVHlwZXMgfCBudWxsO1xuICBpbnRyb1RvdGFsUHJpY2U6IHN0cmluZyB8IG51bGw7XG4gIG5leHRCYXNlUHJpY2U6IHN0cmluZyB8IG51bGw7XG4gIG5leHRUb3RhbFByaWNlOiBzdHJpbmcgfCBudWxsO1xuICBuZXh0UGVyaW9kVmFsdWU6IG51bWJlciB8IG51bGw7XG4gIG5leHRQZXJpb2RUeXBlOiBQZXJpb2RUeXBlcyB8IG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBQcmljZVBvaW50ID0gUHJldHRpZnk8XG4gIFByaWNlUG9pbnRCYXNlICZcbiAgICAoXG4gICAgICB8IHtcbiAgICAgICAgICB0eXBlOiAnaW50cm8nO1xuICAgICAgICAgIGludHJvQmFzZVByaWNlOiBzdHJpbmc7XG4gICAgICAgICAgaW50cm9QZXJpb2RWYWx1ZTogbnVtYmVyO1xuICAgICAgICAgIGludHJvUGVyaW9kVHlwZTogUGVyaW9kVHlwZXM7XG4gICAgICAgICAgaW50cm9Ub3RhbFByaWNlOiBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIHwge1xuICAgICAgICAgIHR5cGU6ICdpbnRyb19uZXh0JztcbiAgICAgICAgICBpbnRyb0Jhc2VQcmljZTogc3RyaW5nO1xuICAgICAgICAgIGludHJvUGVyaW9kVmFsdWU6IG51bWJlcjtcbiAgICAgICAgICBpbnRyb1BlcmlvZFR5cGU6IFBlcmlvZFR5cGVzO1xuICAgICAgICAgIGludHJvVG90YWxQcmljZTogc3RyaW5nO1xuICAgICAgICAgIG5leHRCYXNlUHJpY2U6IHN0cmluZztcbiAgICAgICAgICBuZXh0UGVyaW9kVmFsdWU6IG51bWJlcjtcbiAgICAgICAgICBuZXh0UGVyaW9kVHlwZTogUGVyaW9kVHlwZXM7XG4gICAgICAgICAgbmV4dFRvdGFsUHJpY2U6IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfCB7XG4gICAgICAgICAgdHlwZTogJ2xpZmV0aW1lJztcbiAgICAgICAgICBpbnRyb0Jhc2VQcmljZTogc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB8IHtcbiAgICAgICAgICB0eXBlOiAnZnJlZWJpZSc7XG4gICAgICAgICAgaW50cm9QZXJpb2RWYWx1ZTogbnVtYmVyO1xuICAgICAgICAgIGludHJvUGVyaW9kVHlwZTogUGVyaW9kVHlwZXM7XG4gICAgICAgIH1cbiAgICApXG4+O1xuXG5leHBvcnQgZW51bSBQYXltZW50TWV0aG9kVHlwZSB7XG4gIGNhcmQgPSAnY2FyZCcsXG4gIHBheXBhbCA9ICdwYXlwYWwnLFxuICBhcHBsZV9wYXkgPSAnYXBwbGVfcGF5JyxcbiAgZ29vZ2xlX3BheSA9ICdnb29nbGVfcGF5Jyxcbn1cblxuZXhwb3J0IHR5cGUgUFNQU2Vzc2lvbiA9IHtcbiAgY2xpZW50VG9rZW46IHN0cmluZztcbiAgcGF5bWVudE1ldGhvZHM6IFBheW1lbnRNZXRob2RUeXBlW107XG59O1xuXG5leHBvcnQgdHlwZSBjcmVhdGVDbGllbnRTZXNzaW9uUmVzcG9uc2UgPSB7XG4gIG9yZGVySWQ6IHN0cmluZztcbiAgcHJpbWVyPzogUFNQU2Vzc2lvbjtcbiAgYnJhaW50cmVlPzogUFNQU2Vzc2lvbjtcbiAgc3RhdHVzOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBCaWxsaW5nQWRkcmVzc1R5cGUgPSB7XG4gIGZpcnN0TmFtZT86IHN0cmluZztcbiAgbGFzdE5hbWU/OiBzdHJpbmc7XG4gIGFkZHJlc3NMaW5lMT86IHN0cmluZztcbiAgYWRkcmVzc0xpbmUyPzogc3RyaW5nO1xuICBjaXR5Pzogc3RyaW5nO1xuICBzdGF0ZT86IHN0cmluZztcbiAgY291bnRyeUNvZGU/OiBzdHJpbmc7XG4gIHBvc3RhbENvZGU/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBDdXN0b21lciA9IHtcbiAgaWQ6IEN1c3RvbWVySWQ7XG4gIGJpbGxpbmdfYWRkcmVzcz86IEJpbGxpbmdBZGRyZXNzVHlwZTtcbiAgZW1haWxBZGRyZXNzPzogc3RyaW5nO1xuICBtb2JpbGVOdW1iZXI/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBQYXltZW50Q2xpZW50U2V0dGluZ3NUeXBlID0ge1xuICBhcGlFbmRwb2ludDogc3RyaW5nO1xuICBhcGlLZXk6IHN0cmluZztcbiAgcmVDYXB0Y2hhRW5hYmxlZD86IGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkO1xuICByZUNhcHRjaGFTaXRlS2V5Pzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgbWV0YWRhdGE6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIHwgc3RyaW5nIH07XG4gIG9uRXJyb3I6IChlcnJvcjogYW55LCBkZXNjcmlwdGlvbjogc3RyaW5nKSA9PiB2b2lkO1xuICBvblBheW1lbnRTdGF0dXNDaGFuZ2U6IChzdGF0dXM6IHN0cmluZywgcGF5bWVudE1ldGhvZFR5cGU6IHN0cmluZykgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCB0eXBlIFBheW1lbnRGb3JtU2V0dGluZ3MgPSB7XG4gIGlkZW50OiBzdHJpbmc7XG4gIGNvdW50cnlDb2RlPzogc3RyaW5nO1xuICBvcmRlcklkPzogc3RyaW5nO1xuICBwbGF0Zm9ybUNvZGU/OiBzdHJpbmc7XG4gIGN1c3RvbWVySWQ/OiBDdXN0b21lcklkO1xuICBjdXN0b21lcjogQ3VzdG9tZXI7XG4gIG1ldGFkYXRhPzogb2JqZWN0O1xufTtcblxuZXhwb3J0IHR5cGUgY3JlYXRlQ2xpZW50U2Vzc2lvblJlcXVlc3QgPSB7XG4gIHJlY2FwdGNoYVRva2VuPzogc3RyaW5nIHwgbnVsbDtcbiAgY3VzdG9tZXI6IEN1c3RvbWVyO1xuICBwcmljZVBvaW50SWRlbnQ6IHN0cmluZztcbiAgY291bnRyeUNvZGU/OiBzdHJpbmc7XG4gIHBsYXRmb3JtQ29kZT86IHN0cmluZztcbiAgb3JkZXJJZD86IHN0cmluZztcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8YW55LCBhbnk+O1xufTtcblxuZXhwb3J0IHR5cGUgc3RhcnRDaGVja291dFJlcXVlc3RUeXBlID0ge1xuICBvcmRlcklkOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBjaGVja291dE9uRmFpbFJlcXVlc3QgPSB7XG4gIG9yZGVySWQ6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIGNoZWNrb3V0T25TdWNjZXNzUmVxdWVzdCA9IHtcbiAgb3JkZXJJZDogc3RyaW5nO1xufTtcblxuZXhwb3J0IGVudW0gSW50ZWdyYXRpb25UeXBlRW51bSB7XG4gIFByaW1lciA9ICdwcmltZXInLFxuICBCcmFpbnRyZWUgPSAnYnJhaW50cmVlJyxcbn1cblxuZXhwb3J0IHR5cGUgcmVzdW1lUGF5bWVudFJlcXVlc3QgPSB7XG4gIGludGVncmF0aW9uVHlwZTogSW50ZWdyYXRpb25UeXBlRW51bTtcbiAgb3JkZXJJZDogc3RyaW5nO1xuICBwYXltZW50VG9rZW46IHN0cmluZztcbiAgaW50ZWdyYXRpb25QYXltZW50SWQ6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIGNyZWF0ZVBheW1lbnRSZXF1ZXN0ID0ge1xuICBpbnRlZ3JhdGlvblR5cGU6IEludGVncmF0aW9uVHlwZUVudW07XG4gIHBheW1lbnRUb2tlbjogc3RyaW5nO1xuICBvcmRlcklkOiBzdHJpbmc7XG4gIGRldmljZURhdGE/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgZW51bSBDaGVja291dFN0YXRlRW51bSB7XG4gIHByb2Nlc3NpbmcgPSAncHJvY2Vzc2luZycsXG4gIGNvbXBsZXRlZCA9ICdjb21wbGV0ZWQnLFxuICBmYWlsZWQgPSAnZmFpbGVkJyxcbiAgY2FuY2VsbGVkID0gJ2NhbmNlbGxlZCcsXG59XG5cbmV4cG9ydCBlbnVtIEludGVudCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuXG4gIC8qKlxuICAgKiBTdWJtaXRzIHRoZSB0cmFuc2FjdGlvbiBmb3IgYXV0aG9yaXphdGlvbiBidXQgbm90IHNldHRsZW1lbnQuXG4gICAqL1xuXG4gIEF1dGhvcml6ZSA9ICdhdXRob3JpemUnLFxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgdGhlIHRyYW5zYWN0aW9uIHdpdGhvdXQgYW4gYXV0aG9yaXphdGlvbiAoaS5lLiB3aXRob3V0IGhvbGRpbmcgZnVuZHMpLlxuICAgKiBVc2VmdWwgZm9yIGF1dGhvcml6aW5nIGFuZCBjYXB0dXJpbmcgZnVuZHMgdXAgdG8gOTAgZGF5cyBhZnRlciB0aGUgb3JkZXIgaGFzIGJlZW4gcGxhY2VkLlxuICAgKiBPbmx5IGF2YWlsYWJsZSBmb3IgQ2hlY2tvdXQgZmxvdy5cbiAgICovXG5cbiAgT3JkZXIgPSAnb3JkZXInLFxuXG4gIC8qKlxuICAgKiBQYXltZW50IHdpbGwgYmUgaW1tZWRpYXRlbHkgc3VibWl0dGVkIGZvciBzZXR0bGVtZW50IHVwb24gY3JlYXRpbmcgYSB0cmFuc2FjdGlvbi5cbiAgICogYHNhbGVgIGNhbiBiZSB1c2VkIGFzIGFuIGFsaWFzIGZvciB0aGlzIHZhbHVlLlxuICAgKi9cblxuICBDYXB0dXJlID0gJ2NhcHR1cmUnLFxufVxuXG5leHBvcnQgZW51bSBGbG93VHlwZSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHN0b3JlIHRoZSBwYXltZW50IG1ldGhvZCBmb3IgZnV0dXJlIHVzZSwgaWUgc3Vic2NyaXB0aW9uc1xuICAgKi9cblxuICBWYXVsdCA9ICd2YXVsdCcsXG5cbiAgLyoqXG4gICAqIFVzZWQgZm9yIG9uZS10aW1lIGNoZWNrb3V0XG4gICAqL1xuXG4gIENoZWNrb3V0ID0gJ2NoZWNrb3V0Jyxcbn1cblxuZXhwb3J0IGVudW0gQnV0dG9uU2l6ZU9wdGlvbiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuXG4gIC8qKlxuICAgKiBSZWNvbW1lbmRlZC4gRGVmYXVsdC5cbiAgICogMTUwIHBpeGVscyBieSAyNSBwaXhlbHNcbiAgICovXG5cbiAgU21hbGwgPSAnc21hbGwnLFxuXG4gIC8qKlxuICAgKiAyNTAgcGl4ZWxzIGJ5IDM1IHBpeGVsc1xuICAgKi9cblxuICBNZWRpdW0gPSAnbWVkaXVtJyxcblxuICAvKipcbiAgICogMzUwIHBpeGVscyBieSA0MCBwaXhlbHNcbiAgICovXG5cbiAgTGFyZ2UgPSAnbGFyZ2UnLFxuXG4gIC8qKlxuICAgKiBEeW5hbWljXG4gICAqIE1hdGNoZXMgdGhlIHdpZHRoIG9mIHRoZSBjb250YWluZXIgZWxlbWVudCwgaGVpZ2h0IGlzIGRlY2lkZWQgZHluYW1pY2FsbHkgYmFzZWQgb24gd2lkdGguXG4gICAqIE1pbmltdW0gd2lkdGggaXMgMTUwcHgsIG1heGltdW0gd2lkdGggaXMgNTAwcHguXG4gICAqL1xuXG4gIFJlc3BvbnNpdmUgPSAncmVzcG9uc2l2ZScsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aG9yaXphdGlvblJlc3BvbnNlIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZXR0aWVyL3ByZXR0aWVyXG5cbiAgLyoqXG4gICAqIFRoZSBwYXltZW50IG1ldGhvZCBub25jZS5cbiAgICovXG5cbiAgbm9uY2U6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHBheW1lbnQgbWV0aG9kIHR5cGUsIGFsd2F5cyBgUGF5UGFsQWNjb3VudGAuXG4gICAqL1xuXG4gIHR5cGU6IHN0cmluZztcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBQYXlQYWwgYWNjb3VudCBkZXRhaWxzLlxuICAgKi9cblxuICBkZXRhaWxzOiBBdXRob3JpemF0aW9uUmVzcG9uc2VEZXRhaWxzO1xufVxuZXhwb3J0IGVudW0gUGF5bWVudFN0YXR1cyB7XG4gIHN1Y2Nlc3MgPSAnc3VjY2VzcycsXG4gIGVycm9yID0gJ2Vycm9yJyxcbn1cblxuZXhwb3J0IHR5cGUgY3JlYXRlUGF5bWVudFJlc3BvbnNlID0ge1xuICBzdGF0dXM6IFBheW1lbnRTdGF0dXM7XG4gIGludGVncmF0aW9uUGF5bWVudElkOiBzdHJpbmc7XG4gIGNoZWNrb3V0U3RhdGU6IENoZWNrb3V0U3RhdGVFbnVtO1xuICByZXF1aXJlZEFjdGlvbj86IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgY2xpZW50VG9rZW46IHN0cmluZztcbiAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIHJlc3VtZVBheW1lbnRSZXNwb25zZSA9IHtcbiAgaW50ZWdyYXRpb25QYXltZW50SWQ6IHN0cmluZztcbiAgY2hlY2tvdXRTdGF0ZTogQ2hlY2tvdXRTdGF0ZUVudW07XG4gIHJlcXVpcmVkQWN0aW9uPzoge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjbGllbnRUb2tlbjogc3RyaW5nO1xuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgQnJhaW50cmVlQ2hlY2tvdXQgPSBhbnk7XG4iLCJleHBvcnQgY2xhc3MgUmVzcG9uc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgZGF0YT86IFJlY29yZDxhbnksIGFueT47XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFJlY29yZDxhbnksIGFueT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIE9uQ2hlY2tvdXRGYWlsSGFuZGxlcixcbiAgUGF5bWVudCxcbiAgUGF5bWVudE1ldGhvZFR5cGUsXG59IGZyb20gJ0BwcmltZXItaW8vY2hlY2tvdXQtd2ViJztcbmltcG9ydCB7XG4gIGNoZWNrb3V0T25GYWlsUmVxdWVzdCxcbiAgY2hlY2tvdXRPblN1Y2Nlc3NSZXF1ZXN0LFxuICBQYXltZW50Q2xpZW50U2V0dGluZ3NUeXBlLFxuICBQYXltZW50Rm9ybVNldHRpbmdzLFxuICBzdGFydENoZWNrb3V0UmVxdWVzdFR5cGUsXG59IGZyb20gJy4uL3R5cGUnO1xuaW1wb3J0IHsgQXBpIH0gZnJvbSAnLi4vc2VydmljZXMvYXBpJztcbmltcG9ydCB7IFJlc3BvbnNlRXJyb3IgfSBmcm9tICcuLi9FcnJvckhhbmRsZXJzL1Jlc3BvbnNlRXJyb3InO1xuXG5leHBvcnQgY2xhc3MgUGF5bWVudFNlc3Npb24ge1xuICBjbGllbnRTZXR0aW5nOiBQYXltZW50Q2xpZW50U2V0dGluZ3NUeXBlO1xuICBmb3JtU2V0dGluZ3M6IFBheW1lbnRGb3JtU2V0dGluZ3M7XG4gIGFwaTogQXBpO1xuICBjaGVja291dFRyYWNlSWQ6IHN0cmluZyB8IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY2xpZW50U2V0dGluZzogUGF5bWVudENsaWVudFNldHRpbmdzVHlwZSxcbiAgICBmb3JtU2V0dGluZ3M6IFBheW1lbnRGb3JtU2V0dGluZ3MsXG4gICAgYXBpOiBBcGksXG4gICAgY2hlY2tvdXRUcmFjZUlkPzogc3RyaW5nIHwgbnVsbFxuICApIHtcbiAgICB0aGlzLmNsaWVudFNldHRpbmcgPSBjbGllbnRTZXR0aW5nO1xuICAgIHRoaXMuZm9ybVNldHRpbmdzID0gZm9ybVNldHRpbmdzO1xuICAgIHRoaXMuYXBpID0gYXBpO1xuICAgIHRoaXMuY2hlY2tvdXRUcmFjZUlkID0gY2hlY2tvdXRUcmFjZUlkIHx8IG51bGw7XG4gIH1cblxuICBwcml2YXRlIHByZXBhcmVFcnJvcihlcnI6IHVua25vd24sIGRhdGE/OiBSZWNvcmQ8YW55LCBhbnk+KTogb2JqZWN0IHtcbiAgICBpZiAoZXJyICYmIGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlcnIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGVycikpKSxcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7IGVycm9yOiBcIkNhbid0IHNlcmlhbGl6ZSBlcnJvclwiLCBkYXRhOiBkYXRhIH07XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRUcmFjZShoZWFkZXJzOiBSZWNvcmQ8YW55LCBhbnk+KTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXG4gICAgICBoZWFkZXJzLmdldCgneC1wYWx0YWJyYWluLXRyYWNlLWlkJyksXG4gICAgICBoZWFkZXJzLmdldCgneC1wYWx0YWJyYWluLXJlcXVlc3QtaWQnKSxcbiAgICBdO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsb2dFcnJvckV2ZW50KFxuICAgIGV2ZW50TmFtZTogc3RyaW5nLFxuICAgIGRhdGE6IFJlY29yZDxhbnksIGFueT4sXG4gICAgaGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbiAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICBhd2FpdCB0aGlzLmFwaS5sb2dFdmVudCgnZXJyb3InLCBldmVudE5hbWUsIGRhdGEsIGhlYWRlcnMpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBub3RpZnlQYXltZW50U3RhdHVzQ2hhbmdlKFxuICAgIHN0YXR1czogc3RyaW5nLFxuICAgIHBheW1lbnRNZXRob2RUeXBlOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuY2xpZW50U2V0dGluZy5vblBheW1lbnRTdGF0dXNDaGFuZ2UpXG4gICAgICAgIGF3YWl0IHRoaXMuY2xpZW50U2V0dGluZy5vblBheW1lbnRTdGF0dXNDaGFuZ2UoXG4gICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgIHBheW1lbnRNZXRob2RUeXBlXG4gICAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBhd2FpdCB0aGlzLmxvZ0Vycm9yRXZlbnQoXG4gICAgICAgICdvbl9wYXltZW50X3N0YXR1c19jaGFuZ2VfZXJyb3InLFxuICAgICAgICB0aGlzLnByZXBhcmVFcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbm90aWZ5RXJyb3IoZXJyb3I6IGFueSwgZGVzY3JpcHRpb246IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLmNsaWVudFNldHRpbmcub25FcnJvcilcbiAgICAgICAgYXdhaXQgdGhpcy5jbGllbnRTZXR0aW5nLm9uRXJyb3IoZXJyb3IsIGRlc2NyaXB0aW9uKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGF3YWl0IHRoaXMubG9nRXJyb3JFdmVudCgnb25fZXJyb3InLCB0aGlzLnByZXBhcmVFcnJvcihlcnIpKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgb25CZWZvcmVQYXltZW50Q3JlYXRlKFxuICAgIGRhdGE6IHsgcGF5bWVudE1ldGhvZFR5cGU/OiBQYXltZW50TWV0aG9kVHlwZSB9LFxuICAgIGhhbmRsZXI6IGFueVxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHBheW1lbnRNZXRob2RUeXBlID0gZGF0YS5wYXltZW50TWV0aG9kVHlwZSBhcyBzdHJpbmc7XG5cbiAgICBhd2FpdCB0aGlzLm5vdGlmeVBheW1lbnRTdGF0dXNDaGFuZ2UoJ1BFTkRJTkcnLCBwYXltZW50TWV0aG9kVHlwZSk7XG5cbiAgICBjb25zdCBzdGFydENoZWNrb3V0UmVxdWVzdCA9IHtcbiAgICAgIG9yZGVySWQ6IHRoaXMuZm9ybVNldHRpbmdzLm9yZGVySWQsXG4gICAgfSBhcyBzdGFydENoZWNrb3V0UmVxdWVzdFR5cGU7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwaS5zdGFydENoZWNrb3V0KHN0YXJ0Q2hlY2tvdXRSZXF1ZXN0KTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBjb25zdCBbdHJhY2VJZCwgcmVxdWVzdElkXSA9IHRoaXMuZ2V0VHJhY2UocmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICBjb25zdCBzdGF0dXNDb2RlID0gZGF0YT8uc3RhdHVzO1xuICAgICAgaWYgKHN0YXR1c0NvZGUgPT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmNvbnRpbnVlUGF5bWVudENyZWF0aW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCB0aGlzLmxvZ0Vycm9yRXZlbnQoXG4gICAgICAgICAgJ2NhbnRfc3RhcnRfY2hlY2tvdXQnLFxuICAgICAgICAgIHRoaXMucHJlcGFyZUVycm9yKEVycm9yKCdjYW50X3N0YXJ0X2NoZWNrb3V0JyksIHtcbiAgICAgICAgICAgIHBhbHRhYnJhaW5fdHJhY2VfaWQ6IHRyYWNlSWQsXG4gICAgICAgICAgICBwYWx0YWJyYWluX3JlcXVlc3RfaWQ6IHJlcXVlc3RJZCxcbiAgICAgICAgICAgIHJlcXVlc3Q6IHN0YXJ0Q2hlY2tvdXRSZXF1ZXN0LFxuICAgICAgICAgICAgcmVzcG9uc2U6IGRhdGEsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgICBhd2FpdCB0aGlzLm5vdGlmeVBheW1lbnRTdGF0dXNDaGFuZ2UoJ0VSUk9SJywgcGF5bWVudE1ldGhvZFR5cGUpO1xuICAgICAgICBhd2FpdCB0aGlzLm5vdGlmeUVycm9yKFxuICAgICAgICAgIG5ldyBSZXNwb25zZUVycm9yKGRhdGEpLFxuICAgICAgICAgICdDYW4gbm90IHN0YXJ0IGNoZWNrb3V0J1xuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBoYW5kbGVyLmFib3J0UGF5bWVudENyZWF0aW9uKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBhd2FpdCB0aGlzLmxvZ0Vycm9yRXZlbnQoXG4gICAgICAgICdjYW50X3N0YXJ0X2NoZWNrb3V0JyxcbiAgICAgICAgdGhpcy5wcmVwYXJlRXJyb3IoZXJyLCB7IHJlcXVlc3Q6IHN0YXJ0Q2hlY2tvdXRSZXF1ZXN0IH0pXG4gICAgICApO1xuXG4gICAgICBhd2FpdCB0aGlzLm5vdGlmeVBheW1lbnRTdGF0dXNDaGFuZ2UoJ0VSUk9SJywgcGF5bWVudE1ldGhvZFR5cGUpO1xuICAgICAgYXdhaXQgdGhpcy5ub3RpZnlFcnJvcihlcnIsICdDYW4gbm90IHN0YXJ0IGNoZWNrb3V0Jyk7XG5cbiAgICAgIHJldHVybiBoYW5kbGVyLmFib3J0UGF5bWVudENyZWF0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIG9uQ2hlY2tvdXRDb21wbGV0ZShkYXRhOiB7IHBheW1lbnQ6IFBheW1lbnQgfSk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgY29tcGxldGVDaGVja291dFJlcXVlc3QgPSB7XG4gICAgICBvcmRlcklkOiB0aGlzLmZvcm1TZXR0aW5ncy5vcmRlcklkLFxuICAgIH0gYXMgY2hlY2tvdXRPblN1Y2Nlc3NSZXF1ZXN0O1xuICAgIGNvbnN0IHBheW1lbnRNZXRob2RUeXBlID0gZGF0YS5wYXltZW50LnBheW1lbnRNZXRob2REYXRhXG4gICAgICA/LnBheW1lbnRNZXRob2RUeXBlIGFzIHN0cmluZztcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByYXdSZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpLm9uU3VjY2Vzc0NoZWNrb3V0KFxuICAgICAgICBjb21wbGV0ZUNoZWNrb3V0UmVxdWVzdFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmF3UmVzcG9uc2UuanNvbigpO1xuICAgICAgY29uc3Qgc3RhdHVzID0gcmVzcG9uc2U/LnN0YXR1cztcbiAgICAgIGNvbnN0IFt0cmFjZUlkLCByZXF1ZXN0SWRdID0gdGhpcy5nZXRUcmFjZShyYXdSZXNwb25zZS5oZWFkZXJzKTtcblxuICAgICAgaWYgKHN0YXR1cyA9PSAnc3VjY2VzcycpIHtcbiAgICAgICAgLy8gc2VuZCBDT01QTEVURSBldmVudCB0byBvblBheW1lbnRTdGF0dXNDaGFuZ2VcblxuICAgICAgICBhd2FpdCB0aGlzLm5vdGlmeVBheW1lbnRTdGF0dXNDaGFuZ2UoJ0NPTVBMRVRFJywgcGF5bWVudE1ldGhvZFR5cGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc2VuZCBFUlJPUiBldmVudCB0byBvblBheW1lbnRTdGF0dXNDaGFuZ2VcblxuICAgICAgICBhd2FpdCB0aGlzLm5vdGlmeVBheW1lbnRTdGF0dXNDaGFuZ2UoJ0VSUk9SJywgcGF5bWVudE1ldGhvZFR5cGUpO1xuICAgICAgICBhd2FpdCB0aGlzLm5vdGlmeUVycm9yKFxuICAgICAgICAgIG5ldyBSZXNwb25zZUVycm9yKHJlc3BvbnNlKSxcbiAgICAgICAgICAnQ2FuIG5vdCBjb21wbGV0ZSBjaGVja291dCdcbiAgICAgICAgKTtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2dFcnJvckV2ZW50KFxuICAgICAgICAgICdvbl9jaGVja291dF9jb21wbGV0ZV9lcnJvcicsXG4gICAgICAgICAgdGhpcy5wcmVwYXJlRXJyb3IoRXJyb3IoJ29uX2NoZWNrb3V0X2NvbXBsZXRlX2Vycm9yJyksIHtcbiAgICAgICAgICAgIHBhbHRhYnJhaW5fdHJhY2VfaWQ6IHRyYWNlSWQsXG4gICAgICAgICAgICBwYWx0YWJyYWluX3JlcXVlc3RfaWQ6IHJlcXVlc3RJZCxcbiAgICAgICAgICAgIHJlcXVlc3Q6IGNvbXBsZXRlQ2hlY2tvdXRSZXF1ZXN0LFxuICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBhd2FpdCB0aGlzLm5vdGlmeVBheW1lbnRTdGF0dXNDaGFuZ2UoJ0VSUk9SJywgcGF5bWVudE1ldGhvZFR5cGUpO1xuICAgICAgYXdhaXQgdGhpcy5ub3RpZnlFcnJvcihlcnIsICdDYW4gbm90IGNvbXBsZXRlIGNoZWNrb3V0Jyk7XG4gICAgICBhd2FpdCB0aGlzLmxvZ0Vycm9yRXZlbnQoXG4gICAgICAgICdvbl9jaGVja291dF9jb21wbGV0ZV9lcnJvcicsXG4gICAgICAgIHRoaXMucHJlcGFyZUVycm9yKGVyciwge1xuICAgICAgICAgIHJlcXVlc3Q6IGNvbXBsZXRlQ2hlY2tvdXRSZXF1ZXN0LFxuICAgICAgICAgIHJlc3BvbnNlOiBkYXRhLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgb25DaGVja291dEZhaWwoXG4gICAgZXJyb3I6IGFueSxcbiAgICBkYXRhOiB7IHBheW1lbnQ/OiBQYXltZW50IHwgdW5kZWZpbmVkIH0sXG4gICAgaGFuZGxlcjogT25DaGVja291dEZhaWxIYW5kbGVyIHwgdW5kZWZpbmVkXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgZmFpbENoZWNrb3V0UmVxdWVzdCA9IHtcbiAgICAgIG9yZGVySWQ6IHRoaXMuZm9ybVNldHRpbmdzLm9yZGVySWQsXG4gICAgfSBhcyBjaGVja291dE9uRmFpbFJlcXVlc3Q7XG4gICAgY29uc3QgcGF5bWVudE1ldGhvZFR5cGUgPSBkYXRhLnBheW1lbnQ/LnBheW1lbnRNZXRob2REYXRhXG4gICAgICA/LnBheW1lbnRNZXRob2RUeXBlIGFzIHN0cmluZztcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmFwaS5vbkZhaWxDaGVja291dChmYWlsQ2hlY2tvdXRSZXF1ZXN0KTtcblxuICAgICAgYXdhaXQgdGhpcy5ub3RpZnlQYXltZW50U3RhdHVzQ2hhbmdlKCdGQUlMJywgcGF5bWVudE1ldGhvZFR5cGUpO1xuICAgICAgYXdhaXQgdGhpcy5ub3RpZnlFcnJvcihlcnJvciwgJ0NoZWNrb3V0IGZhaWxlZCcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgYXdhaXQgdGhpcy5sb2dFcnJvckV2ZW50KFxuICAgICAgICAnb25fY2hlY2tvdXRfZmFpbF9lcnJvcicsXG4gICAgICAgIHRoaXMucHJlcGFyZUVycm9yKGVyciwgeyAuLi5mYWlsQ2hlY2tvdXRSZXF1ZXN0IH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaGFuZGxlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBoYW5kbGVyLnNob3dFcnJvck1lc3NhZ2UoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQnJhaW50cmVlQ2hlY2tvdXQsXG4gIEJ1dHRvblNpemVPcHRpb24sXG4gIGNyZWF0ZVBheW1lbnRSZXF1ZXN0LFxuICBGbG93VHlwZSxcbiAgSW50ZWdyYXRpb25UeXBlRW51bSxcbiAgSW50ZW50LFxuICBQYXltZW50TWV0aG9kVHlwZSxcbiAgUGF5bWVudFN0YXR1cyxcbn0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgYnJhaW50cmVlLCB7IENsaWVudCB9IGZyb20gJ2JyYWludHJlZS13ZWInO1xuaW1wb3J0IHsgQXBpIH0gZnJvbSAnLi4vc2VydmljZXMvYXBpJztcbmNvbnN0IGZldGNoRGF0YUNvbGxlY3Rvckluc3RhbmNlID0gKGNsaWVudEluc3RhbmNlOiBDbGllbnQpID0+XG4gIGJyYWludHJlZS5kYXRhQ29sbGVjdG9yLmNyZWF0ZSh7XG4gICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAgICBrb3VudDogdHJ1ZSxcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVQYXlQYWxDaGVja291dEluc3RhbmNlID0gYXN5bmMgKGNsaWVudEluc3RhbmNlOiBDbGllbnQpID0+XG4gIGJyYWludHJlZS5wYXlwYWxDaGVja291dC5jcmVhdGUoeyBjbGllbnQ6IGNsaWVudEluc3RhbmNlIH0pO1xuXG5leHBvcnQgY29uc3Qgc2V0dXBQYXlQYWxCdXR0b24gPSBhc3luYyAoXG4gIHBheXBhbENoZWNrb3V0SW5zdGFuY2U6IGJyYWludHJlZS5QYXlQYWxDaGVja291dCxcbiAgZGV2aWNlRGF0YTogc3RyaW5nLFxuICBhcGk6IEFwaSxcbiAgb3JkZXJJZDogc3RyaW5nXG4pID0+IHtcbiAgY29uc3QgcGF5bWVudFN0YXR1cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICdwYXltZW50LXN0YXR1cydcbiAgKSBhcyBIVE1MRWxlbWVudDtcbiAgY29uc3QgY3VycmVuY3kgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY3VycmVuY3knKSB8fCB1bmRlZmluZWQ7XG4gIGNvbnN0IGl0ZW0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYW1vdW50Jyk7XG4gIGNvbnN0IGFtb3VudCA9IGl0ZW0gPyBKU09OLnBhcnNlKGl0ZW0pIDogdW5kZWZpbmVkO1xuXG4gIGF3YWl0IHBheXBhbENoZWNrb3V0SW5zdGFuY2UubG9hZFBheVBhbFNESyhcbiAgICB7XG4gICAgICBjdXJyZW5jeTogY3VycmVuY3ksXG4gICAgICBpbnRlbnQ6ICdjYXB0dXJlJyxcbiAgICB9LFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcblxuICAgICAgcGF5cGFsXG4gICAgICAgIC5CdXR0b25zKHtcbiAgICAgICAgICBmdW5kaW5nU291cmNlOiAncGF5cGFsJyxcbiAgICAgICAgICBlbnY6ICdzYW5kYm94JyxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgc2l6ZTogQnV0dG9uU2l6ZU9wdGlvbi5SZXNwb25zaXZlLFxuICAgICAgICAgICAgaGVpZ2h0OiA0MCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcGF5cGFsQ2hlY2tvdXRJbnN0YW5jZS5jcmVhdGVQYXltZW50KHtcbiAgICAgICAgICAgICAgZmxvdzogRmxvd1R5cGUuQ2hlY2tvdXQsXG4gICAgICAgICAgICAgIGFtb3VudDogYW1vdW50LFxuICAgICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3ksXG4gICAgICAgICAgICAgIGludGVudDogSW50ZW50LkNhcHR1cmUsXG4gICAgICAgICAgICAgIHJlcXVlc3RCaWxsaW5nQWdyZWVtZW50OiB0cnVlLFxuICAgICAgICAgICAgICBiaWxsaW5nQWdyZWVtZW50RGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgJ0Rlc2NyaXB0aW9uIG9mIHRoZSBiaWxsaW5nIGFncmVlbWVudCB0byBkaXNwbGF5IHRvIHRoZSBjdXN0b21lcicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZTtcblxuICAgICAgICAgIG9uQXBwcm92ZTogYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCBwYXlwYWxDaGVja291dEluc3RhbmNlLnRva2VuaXplUGF5bWVudChcbiAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHb3QgYSBub25jZTonLCBwYXlsb2FkLm5vbmNlKTtcblxuICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5jcmVhdGVQYXltZW50KHtcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdGlvblR5cGU6IEludGVncmF0aW9uVHlwZUVudW0uQnJhaW50cmVlLFxuICAgICAgICAgICAgICAgIHBheW1lbnRUb2tlbjogcGF5bG9hZC5ub25jZSxcbiAgICAgICAgICAgICAgICBvcmRlcklkLFxuICAgICAgICAgICAgICAgIGRldmljZURhdGEsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSBQYXltZW50U3RhdHVzLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICAgICAgICAgICAgICAgICdicmFpbnRyZWUtY2hlY2tvdXQtY29udGFpbmVyJ1xuICAgICAgICAgICAgICAgICkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgICAgICAgICAgICBwYXltZW50U3RhdHVzLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgICAgICAgICAgICAgICAnYnJhaW50cmVlLWNoZWNrb3V0LWNvbnRhaW5lcidcbiAgICAgICAgICAgICAgICApIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgICAgICAgICAgcGF5bWVudFN0YXR1cy5pbm5lckhUTUwgPVxuICAgICAgICAgICAgICAgICAgJzxkaXY+UGF5bWVudCBmYWlsZWQuIFBsZWFzZSB0cnkgYWdhaW4uPC9kaXY+JztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICAgICAgICAgICdicmFpbnRyZWUtY2hlY2tvdXQtY29udGFpbmVyJ1xuICAgICAgICAgICAgICApIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICAgICAgICBwYXltZW50U3RhdHVzLmlubmVySFRNTCA9XG4gICAgICAgICAgICAgICAgJzxkaXYgPlBheW1lbnQgZmFpbGVkLiBQbGVhc2UgdHJ5IGFnYWluLjwvZGl2Pic7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbkNhbmNlbDogKGRhdGEpID0+IHtcbiAgICAgICAgICAgIC8vIFRPRE86IGhlcmUgc2hvdWxkIGFkZCBzdGFydHVwIGV2ZW50IGZvciB0aGVtIHRvIGZpbmlzaCBsb2FkaW5nXG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDaGVja291dCBjYW5jZWxsZWQnLCBkYXRhKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uRXJyb3I6IChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICAgICAgICAnYnJhaW50cmVlLWNoZWNrb3V0LWNvbnRhaW5lcidcbiAgICAgICAgICAgICkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICAgICAgcGF5bWVudFN0YXR1cy5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgcGF5bWVudFN0YXR1cy5pbm5lckhUTUwgPVxuICAgICAgICAgICAgICAnPGRpdiA+UGF5bWVudCBmYWlsZWQuIFBsZWFzZSB0cnkgYWdhaW4uPC9kaXY+JztcblxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgICAucmVuZGVyKCcjcGF5cGFsLWJ1dHRvbicpO1xuICAgIH1cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVIb3N0ZWRGaWVsZHNJbnN0YW5jZSA9IGFzeW5jIChjbGllbnRJbnN0YW5jZTogQ2xpZW50KSA9PiB7XG4gIHJldHVybiBicmFpbnRyZWUuaG9zdGVkRmllbGRzLmNyZWF0ZSh7XG4gICAgY2xpZW50OiBjbGllbnRJbnN0YW5jZSxcbiAgICBzdHlsZXM6IHtcbiAgICAgIGlucHV0OiB7XG4gICAgICAgICdmb250LXNpemUnOiAnMTRweCcsXG4gICAgICAgICdmb250LWZhbWlseSc6ICdBcmlhbCwgc2Fucy1zZXJpZicsXG4gICAgICB9LFxuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgY29sb3I6ICdibGFjaycsXG4gICAgICB9LFxuICAgIH0sXG4gICAgZmllbGRzOiB7XG4gICAgICBudW1iZXI6IHtcbiAgICAgICAgc2VsZWN0b3I6ICcjY2FyZC1udW1iZXInLFxuICAgICAgICBwbGFjZWhvbGRlcjogJzQxMTEgMTExMSAxMTExIDExMTEnLFxuICAgICAgfSxcbiAgICAgIGN2djoge1xuICAgICAgICBzZWxlY3RvcjogJyNjdnYnLFxuICAgICAgICBwbGFjZWhvbGRlcjogJzEyMycsXG4gICAgICB9LFxuICAgICAgZXhwaXJhdGlvbkRhdGU6IHtcbiAgICAgICAgc2VsZWN0b3I6ICcjZXhwaXJhdGlvbi1kYXRlJyxcbiAgICAgICAgcGxhY2Vob2xkZXI6ICdNTS9ZWVlZJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0dXBDYXJkQnV0dG9uID0gYXN5bmMgKHtcbiAgaG9zdGVkRmllbGRzSW5zdGFuY2UsXG4gIGRldmljZURhdGEsXG4gIGFwaSxcbiAgb3JkZXJJZCxcbn06IHtcbiAgaG9zdGVkRmllbGRzSW5zdGFuY2U6IGFueTtcbiAgZGV2aWNlRGF0YTogc3RyaW5nO1xuICBhcGk6IEFwaTtcbiAgb3JkZXJJZDogc3RyaW5nO1xufSkgPT4ge1xuICBjb25zdCBjYXJkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgJ2NhcmQtYnV0dG9uJ1xuICApIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICBjb25zdCBwYXltZW50U3RhdHVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgJ3BheW1lbnQtc3RhdHVzJ1xuICApIGFzIEhUTUxFbGVtZW50O1xuXG4gIGNhcmRCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgIGNhcmRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIGNhcmRCdXR0b24uaW5uZXJUZXh0ID0gJ0xvYWRpbmcuLi4nO1xuICAgIGNhcmRCdXR0b24uc3R5bGUuY3Vyc29yID0gJ2RlZmF1bHQnO1xuICAgIGNhcmRCdXR0b24uc3R5bGUub3BhY2l0eSA9ICcwLjUnO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgbm9uY2UsIGRldGFpbHMgfSA9IGF3YWl0IGhvc3RlZEZpZWxkc0luc3RhbmNlLnRva2VuaXplKCk7XG4gICAgICBjb25zb2xlLmxvZygnRGV0YWlscycsIGRldGFpbHMpO1xuXG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBpbnRlZ3JhdGlvblR5cGU6IEludGVncmF0aW9uVHlwZUVudW0uQnJhaW50cmVlLFxuICAgICAgICBwYXltZW50VG9rZW46IG5vbmNlLFxuICAgICAgICBvcmRlcklkLFxuICAgICAgfSBhcyBjcmVhdGVQYXltZW50UmVxdWVzdDtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuY3JlYXRlUGF5bWVudChkYXRhKTtcblxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gUGF5bWVudFN0YXR1cy5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICAgICdicmFpbnRyZWUtY2hlY2tvdXQtY29udGFpbmVyJ1xuICAgICAgICApIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICBjb25zdCBwYXltZW50U3RhdHVzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICAgICdwYXltZW50LXN0YXR1cydcbiAgICAgICAgKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgcGF5bWVudFN0YXR1c0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBheW1lbnRTdGF0dXMuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgcGF5bWVudFN0YXR1cy5pbm5lckhUTUwgPVxuICAgICAgICAgICc8ZGl2PlBheW1lbnQgZmFpbGVkLiBQbGVhc2UgdHJ5IGFnYWluLjwvZGl2Pic7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB0b2tlbml6aW5nIGNhcmQ6JywgZXJyKTtcbiAgICAgIHBheW1lbnRTdGF0dXMuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgIHBheW1lbnRTdGF0dXMuaW5uZXJIVE1MID0gJzxkaXY+UGF5bWVudCBmYWlsZWQuIFBsZWFzZSB0cnkgYWdhaW4uPC9kaXY+JztcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY2FyZEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgY2FyZEJ1dHRvbi5pbm5lclRleHQgPSAnUGF5IHdpdGggQ2FyZCc7XG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBCcmFpbnRyZWVDaGVja291dEluaXQgPSBhc3luYyAoe1xuICBicmFpbnRyZWVDbGllbnRUb2tlbixcbiAgcGF5bWVudE1ldGhvZHMsXG4gIG9yZGVySWQsXG4gIGFwaSxcbn06IHtcbiAgYnJhaW50cmVlQ2xpZW50VG9rZW46IHN0cmluZztcbiAgcGF5bWVudE1ldGhvZHM/OiBQYXltZW50TWV0aG9kVHlwZVtdO1xuICBvcmRlcklkOiBzdHJpbmc7XG4gIGFwaTogQXBpO1xufSk6IFByb21pc2U8QnJhaW50cmVlQ2hlY2tvdXQ+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjbGllbnRJbnN0YW5jZTogQ2xpZW50ID0gYXdhaXQgYnJhaW50cmVlLmNsaWVudC5jcmVhdGUoe1xuICAgICAgYXV0aG9yaXphdGlvbjogYnJhaW50cmVlQ2xpZW50VG9rZW4sXG4gICAgfSk7XG5cbiAgICBjb25zdCBkYXRhQ29sbGVjdG9ySW5zdGFuY2UgPSBhd2FpdCBmZXRjaERhdGFDb2xsZWN0b3JJbnN0YW5jZShcbiAgICAgIGNsaWVudEluc3RhbmNlXG4gICAgKTtcblxuICAgIGNvbnN0IGRldmljZURhdGEgPSBkYXRhQ29sbGVjdG9ySW5zdGFuY2UuZGV2aWNlRGF0YTtcblxuICAgIGNvbnN0IHBheW1lbnRNZXRob2RzQXJyYXkgPSBPYmplY3QudmFsdWVzKFBheW1lbnRNZXRob2RUeXBlKTtcblxuICAgIGlmIChwYXltZW50TWV0aG9kc0FycmF5LmluY2x1ZGVzKFBheW1lbnRNZXRob2RUeXBlLnBheXBhbCkpIHtcbiAgICAgIGNvbnN0IHBheVBhbEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICAncGF5cGFsLWJ1dHRvbidcbiAgICAgICkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBwYXlQYWxCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICBjb25zdCBwYXlwYWxDaGVja291dEluc3RhbmNlID0gYXdhaXQgY3JlYXRlUGF5UGFsQ2hlY2tvdXRJbnN0YW5jZShcbiAgICAgICAgY2xpZW50SW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBhd2FpdCBzZXR1cFBheVBhbEJ1dHRvbihwYXlwYWxDaGVja291dEluc3RhbmNlLCBkZXZpY2VEYXRhLCBhcGksIG9yZGVySWQpO1xuICAgIH1cblxuICAgIGlmIChwYXltZW50TWV0aG9kc0FycmF5LmluY2x1ZGVzKFBheW1lbnRNZXRob2RUeXBlLmNhcmQpKSB7XG4gICAgICBjb25zdCBjYXJkQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgICAgICdjYXJkLWNvbnRhaW5lcidcbiAgICAgICkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBjYXJkQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgY29uc3QgaG9zdGVkRmllbGRzSW5zdGFuY2UgPSBhd2FpdCBjcmVhdGVIb3N0ZWRGaWVsZHNJbnN0YW5jZShcbiAgICAgICAgY2xpZW50SW5zdGFuY2VcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IHNldHVwQ2FyZEJ1dHRvbih7IGhvc3RlZEZpZWxkc0luc3RhbmNlLCBkZXZpY2VEYXRhLCBhcGksIG9yZGVySWQgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluaXRpYWxpemluZyBCcmFpbnRyZWU6JywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwiaW1wb3J0IHtcbiAgY2hlY2tvdXRUcmFjZUlkLFxuICBjcmVhdGVDbGllbnRTZXNzaW9uUmVzcG9uc2UsXG4gIEN1c3RvbWVySWQsXG4gIFBheW1lbnRDbGllbnRJLFxuICBQYXltZW50Q2xpZW50U2V0dGluZ3NUeXBlLFxuICBQYXltZW50Rm9ybVNldHRpbmdzLFxuICBQcmljZVBvaW50LFxuICBQcmljZVBvaW50UmVxdWVzdCxcbn0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQge1xuICBVbml2ZXJzYWxDaGVja291dE9wdGlvbnMsXG4gIFByaW1lckNoZWNrb3V0LFxuICBQcmltZXJIZWFkbGVzc0NoZWNrb3V0LFxuICBQcmltZXJWYXVsdE1hbmFnZXIsXG59IGZyb20gJ0BwcmltZXItaW8vY2hlY2tvdXQtd2ViJztcbmltcG9ydCB7IEFwaSB9IGZyb20gJy4uL3NlcnZpY2VzL2FwaSc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IFBheW1lbnRTZXNzaW9uIH0gZnJvbSAnLi4vUGF5bWVudFNlc3Npb24nO1xuaW1wb3J0IHsgcHJpbWVySW5pdENoZWNrb3V0IH0gZnJvbSAnLi4vUHJpbWVyQ2xpZW50JztcbmltcG9ydCB7IEJyYWludHJlZUNoZWNrb3V0SW5pdCB9IGZyb20gJy4uL0JyYWluVHJlZUNsaWVudCc7XG5cbmV4cG9ydCBjbGFzcyBQYXltZW50Q2xpZW50SW1wbCBpbXBsZW1lbnRzIFBheW1lbnRDbGllbnRJIHtcbiAgY2xpZW50U2V0dGluZ3M6IFBheW1lbnRDbGllbnRTZXR0aW5nc1R5cGU7XG4gIGN1c3RvbWVySWQ6IEN1c3RvbWVySWQgfCBudWxsO1xuICBhcGk6IEFwaTtcbiAgY2xpZW50VG9rZW46IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgY2hlY2tvdXQ6IFByaW1lckNoZWNrb3V0IHwgbnVsbDtcbiAgcmVDYXB0Y2hhUmVhZHk6IGJvb2xlYW47XG4gIGNoZWNrb3V0VHJhY2VJZDogY2hlY2tvdXRUcmFjZUlkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHNldHRpbmdzOiBQYXltZW50Q2xpZW50U2V0dGluZ3NUeXBlLFxuICAgIGN1c3RvbWVySWQ6IEN1c3RvbWVySWQgfCBudWxsXG4gICkge1xuICAgIHRoaXMuY2xpZW50U2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICB0aGlzLmN1c3RvbWVySWQgPSBjdXN0b21lcklkO1xuICAgIHRoaXMuYXBpID0gbmV3IEFwaShzZXR0aW5ncyk7XG4gICAgdGhpcy5jbGllbnRUb2tlbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNoZWNrb3V0ID0gbnVsbDtcbiAgICB0aGlzLnJlQ2FwdGNoYVJlYWR5ID0gZmFsc2U7XG4gICAgdGhpcy5jaGVja291dFRyYWNlSWQgPSBudWxsO1xuICB9XG5cbiAgZ2VuZXJhdGVDaGVja291dFRyYWNlSWQoKSB7XG4gICAgdGhpcy5jaGVja291dFRyYWNlSWQgPSB1dWlkdjQoKTtcbiAgfVxuXG4gIGxvYWRSZUNhcHRjaGFTY3JpcHQob25SZUNhcHRjaGFSZWFkeT86ICgpID0+IHZvaWQsIG9uRXJyb3I/OiAoKSA9PiB2b2lkKSB7XG4gICAgLy8gQ2hlY2sgaWYgcmVDQVBUQ0hBIGlzIGFscmVhZHkgbG9hZGVkXG5cbiAgICBpZiAod2luZG93LmdyZWNhcHRjaGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZUNBUFRDSEEgYWxyZWFkeSBsb2FkZWQnKTtcbiAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgIG9uRXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzaXRlS2V5ID0gdGhpcy5jbGllbnRTZXR0aW5ncy5yZUNhcHRjaGFTaXRlS2V5O1xuICAgIGlmICghc2l0ZUtleSkge1xuICAgICAgY29uc29sZS53YXJuKCdyZUNhcGNoYVNpdGVLZXkgaXMgbm90IHNldCcpO1xuICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgb25FcnJvcigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHNjcmlwdC5zcmMgPSBgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvZW50ZXJwcmlzZS5qcz9yZW5kZXI9JHtzaXRlS2V5fWA7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIHNjcmlwdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gbG9hZCByZUNBUFRDSEEgc2NyaXB0Jyk7XG4gICAgICBpZiAob25FcnJvcikge1xuICAgICAgICBvbkVycm9yKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBpZiAoIWdyZWNhcHRjaGEpIHtcbiAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICBvbkVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBncmVjYXB0Y2hhLmVudGVycHJpc2UucmVhZHkoKCkgPT4ge1xuICAgICAgICB0aGlzLnJlQ2FwdGNoYVJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgaWYgKG9uUmVDYXB0Y2hhUmVhZHkpIHtcbiAgICAgICAgICBvblJlQ2FwdGNoYVJlYWR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gIH1cblxuICBhc3luYyBnZW5lcmF0ZVJlQ2FwdGNoYVRva2VuKHNpdGVLZXk6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgZ3JlY2FwdGNoYS5lbnRlcnByaXNlLmV4ZWN1dGUoc2l0ZUtleSwge1xuICAgICAgICBhY3Rpb246ICdjcmVhdGVfY2xpZW50X3Nlc3Npb24nLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZW5lcmF0ZSByZUNBUFRDSEEgdG9rZW46JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0UHJpY2VQb2ludHMocmVxdWVzdDogUHJpY2VQb2ludFJlcXVlc3QpOiBQcm9taXNlPFByaWNlUG9pbnRbXT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuYXBpLmdldFByaWNlUG9pbnRzKHJlcXVlc3QpO1xuXG4gICAgY29uc3QgcHJpY2VQb2ludHMgPSByZXN1bHRbJ3ByaWNlUG9pbnRzJ107XG5cbiAgICBmb3IgKGNvbnN0IHByaWNlUG9pbnQgb2YgcHJpY2VQb2ludHMpIHtcbiAgICAgIHByaWNlUG9pbnRbJ3Byb2R1Y3QnXSA9IHJlc3VsdFsncHJvZHVjdHMnXVtwcmljZVBvaW50LnByb2R1Y3RTa3VdO1xuICAgIH1cblxuICAgIHJldHVybiBwcmljZVBvaW50cztcbiAgfVxuXG4gIGFzeW5jIHNob3dQYXltZW50Rm9ybSh7XG4gICAgc2V0dGluZ3MsXG4gICAgcHJpbWVyT3B0aW9uLFxuICAgIGJyYWludHJlZU9wdGlvbixcbiAgICBjbGllbnRUb2tlbixcbiAgICBtYW51YWxQYXltZW50cyxcbiAgfToge1xuICAgIHNldHRpbmdzOiBQYXltZW50Rm9ybVNldHRpbmdzO1xuICAgIHByaW1lck9wdGlvbjogVW5pdmVyc2FsQ2hlY2tvdXRPcHRpb25zO1xuICAgIGJyYWludHJlZU9wdGlvbjogYW55O1xuICAgIGNsaWVudFRva2VuPzogc3RyaW5nO1xuICAgIG1hbnVhbFBheW1lbnRzPzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8UHJpbWVySGVhZGxlc3NDaGVja291dCB8IFByaW1lclZhdWx0TWFuYWdlciB8IG51bGw+IHtcbiAgICB0aGlzLmdlbmVyYXRlQ2hlY2tvdXRUcmFjZUlkKCk7XG4gICAgdGhpcy5hcGkuc2V0SGVhZGVycyh7ICd4LWNoZWNrb3V0LXRyYWNlLWlkJzogdGhpcy5jaGVja291dFRyYWNlSWQgfHwgJycgfSk7XG5cbiAgICBsZXQgcmVjYXB0Y2hhVG9rZW47XG4gICAgY29uc3QgZm9ybVNldHRpbmdzID0geyAuLi5zZXR0aW5ncyB9O1xuXG4gICAgLy8gY2xpZW50VG9rZW4gY291bGQgYmUgcHJvdmlkZWQgaW4gdGhlIGNhc2Ugd2l0aCByZXF1aXJlZEFjdGlvbiAzRFNcbiAgICAvLyBCcmFpbnRyZWUgZG9lc24ndCBoYXZlIGEgM2RzXG5cbiAgICBsZXQgcHJpbWVyQ2xpZW50VG9rZW4gPSBjbGllbnRUb2tlbjtcblxuICAgIGlmIChcbiAgICAgIHRoaXMuY2xpZW50U2V0dGluZ3MucmVDYXB0Y2hhRW5hYmxlZCAmJlxuICAgICAgdGhpcy5jbGllbnRTZXR0aW5ncy5yZUNhcHRjaGFTaXRlS2V5ICYmXG4gICAgICB0aGlzLnJlQ2FwdGNoYVJlYWR5XG4gICAgKSB7XG4gICAgICByZWNhcHRjaGFUb2tlbiA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVSZUNhcHRjaGFUb2tlbihcbiAgICAgICAgdGhpcy5jbGllbnRTZXR0aW5ncy5yZUNhcHRjaGFTaXRlS2V5XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGNsaWVudFNlc3Npb25EYXRhID0ge1xuICAgICAgY3VzdG9tZXI6IGZvcm1TZXR0aW5ncy5jdXN0b21lcixcbiAgICAgIHByaWNlUG9pbnRJZGVudDogZm9ybVNldHRpbmdzLmlkZW50LFxuICAgICAgLi4uKGZvcm1TZXR0aW5ncy5jb3VudHJ5Q29kZVxuICAgICAgICA/IHsgY291bnRyeUNvZGU6IGZvcm1TZXR0aW5ncy5jb3VudHJ5Q29kZSB9XG4gICAgICAgIDoge30pLFxuICAgICAgLi4uKGZvcm1TZXR0aW5ncy5wbGF0Zm9ybUNvZGVcbiAgICAgICAgPyB7IHBsYXRmb3JtQ29kZTogZm9ybVNldHRpbmdzLnBsYXRmb3JtQ29kZSB9XG4gICAgICAgIDoge30pLFxuICAgICAgLi4uKGZvcm1TZXR0aW5ncy5tZXRhZGF0YSA/IHsgbWV0YWRhdGE6IGZvcm1TZXR0aW5ncy5tZXRhZGF0YSB9IDoge30pLFxuICAgICAgLi4uKGZvcm1TZXR0aW5ncy5vcmRlcklkID8geyBvcmRlcklkOiBmb3JtU2V0dGluZ3Mub3JkZXJJZCB9IDoge30pLFxuICAgICAgLi4uKHJlY2FwdGNoYVRva2VuID8geyByZWNhcHRjaGFUb2tlbjogcmVjYXB0Y2hhVG9rZW4gfSA6IHt9KSxcbiAgICB9O1xuXG4gICAgY29uc3QgY2xpZW50U2Vzc2lvblJlc3VsdDogY3JlYXRlQ2xpZW50U2Vzc2lvblJlc3BvbnNlID1cbiAgICAgIGF3YWl0IHRoaXMuYXBpLmNyZWF0ZUNsaWVudFNlc3Npb24oY2xpZW50U2Vzc2lvbkRhdGEpO1xuXG4gICAgaWYgKCFwcmltZXJDbGllbnRUb2tlbikge1xuICAgICAgcHJpbWVyQ2xpZW50VG9rZW4gPSBjbGllbnRTZXNzaW9uUmVzdWx0LnByaW1lcj8uY2xpZW50VG9rZW47XG4gICAgfVxuXG4gICAgY29uc3QgYnJhaW50cmVlQ2xpZW50VG9rZW4gPSBjbGllbnRTZXNzaW9uUmVzdWx0LmJyYWludHJlZT8uY2xpZW50VG9rZW47XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgIC8vIFRPRE86IG1ha2UgYSBjb25kaXRpb24gd2hlbiB0byB1c2UgYnJhaW50cmVlIHRva2VuIG9yIHByaW1lciBpbiBjYXNlIG9mIHNpbWlsYXIgcGF5bWVudCBtZXRob2RzXG5cbiAgICBmb3JtU2V0dGluZ3Mub3JkZXJJZCA9IGZvcm1TZXR0aW5ncy5vcmRlcklkXG4gICAgICA/IGZvcm1TZXR0aW5ncy5vcmRlcklkXG4gICAgICA6IGNsaWVudFNlc3Npb25SZXN1bHQub3JkZXJJZDtcblxuICAgIGNvbnN0IHNlc3Npb24gPSBuZXcgUGF5bWVudFNlc3Npb24oXG4gICAgICB0aGlzLmNsaWVudFNldHRpbmdzLFxuICAgICAgZm9ybVNldHRpbmdzLFxuICAgICAgdGhpcy5hcGlcbiAgICApO1xuXG4gICAgY29uc3QgY2hlY2tvdXRPcHRpb25zID0ge1xuICAgICAgLi4ucHJpbWVyT3B0aW9uLFxuICAgICAgb25CZWZvcmVQYXltZW50Q3JlYXRlOiBzZXNzaW9uLm9uQmVmb3JlUGF5bWVudENyZWF0ZS5iaW5kKHNlc3Npb24pLFxuICAgICAgb25DaGVja291dENvbXBsZXRlOiBzZXNzaW9uLm9uQ2hlY2tvdXRDb21wbGV0ZS5iaW5kKHNlc3Npb24pLFxuICAgICAgb25DaGVja291dEZhaWw6IHNlc3Npb24ub25DaGVja291dEZhaWwuYmluZChzZXNzaW9uKSxcbiAgICB9O1xuXG4gICAgY29uc3QgcHJpbWVyUHJvbWlzZSA9IHByaW1lckNsaWVudFRva2VuXG4gICAgICA/IHByaW1lckluaXRDaGVja291dCh7XG4gICAgICAgICAgcHJpbWVyQ2xpZW50VG9rZW4sXG4gICAgICAgICAgY2hlY2tvdXRPcHRpb25zLFxuICAgICAgICAgIG1hbnVhbFBheW1lbnRzLFxuICAgICAgICAgIGFwaTogdGhpcy5hcGksXG4gICAgICAgICAgb3JkZXJJZDogZm9ybVNldHRpbmdzLm9yZGVySWQsXG4gICAgICAgIH0pXG4gICAgICA6IG51bGw7XG5cbiAgICBjb25zdCBicmFpbnRyZWVQcm9taXNlID0gYnJhaW50cmVlQ2xpZW50VG9rZW5cbiAgICAgID8gQnJhaW50cmVlQ2hlY2tvdXRJbml0KHtcbiAgICAgICAgICBicmFpbnRyZWVDbGllbnRUb2tlbixcbiAgICAgICAgICBwYXltZW50TWV0aG9kczogY2xpZW50U2Vzc2lvblJlc3VsdC5icmFpbnRyZWU/LnBheW1lbnRNZXRob2RzLFxuICAgICAgICAgIG9yZGVySWQ6IGZvcm1TZXR0aW5ncy5vcmRlcklkLFxuICAgICAgICAgIGFwaTogdGhpcy5hcGksXG4gICAgICAgIH0pXG4gICAgICA6IG51bGw7XG5cbiAgICBpZiAocHJpbWVyUHJvbWlzZSB8fCBicmFpbnRyZWVQcm9taXNlKSB7XG4gICAgICAvLyBJbml0aWFsaXplIGJvdGggUFNQcyBpbiBwYXJhbGxlbFxuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbYnJhaW50cmVlUHJvbWlzZSwgcHJpbWVyUHJvbWlzZV0uZmlsdGVyKEJvb2xlYW4pKTtcblxuICAgICAgLy8gQHRzLWlnbm9yZVxuXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJlcGFyYXRpb24tZm9ybScpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcblxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BheW1lbnQtY29udGFpbmVyJykuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhc3luYyB1cGRhdGVQYXltZW50Rm9ybShzZXR0aW5nczogUGF5bWVudEZvcm1TZXR0aW5ncyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuYXBpLnVwZGF0ZUNsaWVudFNlc3Npb24oe1xuICAgICAgY3VzdG9tZXJJZDogc2V0dGluZ3MuY3VzdG9tZXJJZCxcbiAgICAgIG9yZGVySWQ6IHNldHRpbmdzLm9yZGVySWQsXG4gICAgICBpZGVudDogc2V0dGluZ3MuaWRlbnQsXG4gICAgICBjb3VudHJ5Q29kZTogc2V0dGluZ3MuY291bnRyeUNvZGUsXG4gICAgICBwbGF0Zm9ybUNvZGU6IHNldHRpbmdzLnBsYXRmb3JtQ29kZSxcbiAgICAgIG1ldGFkYXRhOiB0aGlzLmNsaWVudFNldHRpbmdzLm1ldGFkYXRhLFxuICAgICAgY3VzdG9tZXI6IHNldHRpbmdzLmN1c3RvbWVyLFxuICAgICAgY2xpZW50VG9rZW46IHRoaXMuY2xpZW50VG9rZW4sXG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy5jaGVja291dD8ucmVmcmVzaENsaWVudFNlc3Npb24oKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUHJpbWVyLCBQcmltZXJDaGVja291dCB9IGZyb20gJ0BwcmltZXItaW8vY2hlY2tvdXQtd2ViJztcbmltcG9ydCB7XG4gIGNyZWF0ZVBheW1lbnRSZXF1ZXN0LFxuICBJbnRlZ3JhdGlvblR5cGVFbnVtLFxuICByZXN1bWVQYXltZW50UmVxdWVzdCxcbn0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBBcGkgfSBmcm9tICcuLi9zZXJ2aWNlcy9hcGknO1xuXG50eXBlIHByaW1lckluaXRQcm9wc1R5cGUgPSB7XG4gIHByaW1lckNsaWVudFRva2VuOiBzdHJpbmc7XG4gIGNoZWNrb3V0T3B0aW9uczogYW55O1xuICBtYW51YWxQYXltZW50cz86IGJvb2xlYW47XG4gIGFwaTogQXBpO1xuICBvcmRlcklkOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgcHJpbWVySW5pdENoZWNrb3V0ID0gYXN5bmMgKHtcbiAgcHJpbWVyQ2xpZW50VG9rZW4sXG4gIGNoZWNrb3V0T3B0aW9ucyxcbiAgbWFudWFsUGF5bWVudHMsXG4gIGFwaSxcbiAgb3JkZXJJZCxcbn06IHByaW1lckluaXRQcm9wc1R5cGUpOiBQcm9taXNlPFByaW1lckNoZWNrb3V0PiA9PiB7XG4gIGxldCBjdXJyZW50UGF5bWVudElkID0gJyc7XG5cbiAgY29uc3QgY2hlY2tvdXQgPSBQcmltZXIuc2hvd1VuaXZlcnNhbENoZWNrb3V0KHByaW1lckNsaWVudFRva2VuLCB7XG4gICAgLi4uY2hlY2tvdXRPcHRpb25zLFxuICAgIGNvbnRhaW5lcjogJyNwcmltZXItY2hlY2tvdXQtY29udGFpbmVyJyxcbiAgICBwYXltZW50SGFuZGxpbmc6IG1hbnVhbFBheW1lbnRzID8gJ01BTlVBTCcgOiBudWxsLFxuICAgIHZhdWx0OiB7IHZpc2libGU6IGZhbHNlIH0sXG5cbiAgICBvblRva2VuaXplU3VjY2VzczogYXN5bmMgKHBheW1lbnRNZXRob2RUb2tlbkRhdGEsIGhhbmRsZXIpID0+IHtcbiAgICAgIC8vIFNlbmQgdGhlIFBheW1lbnQgTWV0aG9kIFRva2VuIHRvIHlvdXIgc2VydmVyXG4gICAgICAvLyB0byBjcmVhdGUgYSBwYXltZW50IHVzaW5nIFBheW1lbnRzIEFQSVxuXG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBpbnRlZ3JhdGlvblR5cGU6IEludGVncmF0aW9uVHlwZUVudW0uUHJpbWVyLFxuICAgICAgICBwYXltZW50VG9rZW46IHBheW1lbnRNZXRob2RUb2tlbkRhdGEudG9rZW4sXG4gICAgICAgIG9yZGVySWQsXG4gICAgICB9IGFzIGNyZWF0ZVBheW1lbnRSZXF1ZXN0O1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5jcmVhdGVQYXltZW50KGRhdGEpO1xuXG4gICAgICBjdXJyZW50UGF5bWVudElkID0gcmVzcG9uc2UuaW50ZWdyYXRpb25QYXltZW50SWQ7XG5cbiAgICAgIC8vIENhbGwgYGhhbmRsZXIuaGFuZGxlRmFpbHVyZWAgdG8gY2FuY2VsIHRoZSBmbG93IGFuZCBkaXNwbGF5IGFuIGVycm9yIG1lc3NhZ2VcblxuICAgICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlci5oYW5kbGVGYWlsdXJlKFxuICAgICAgICAgICdUaGUgcGF5bWVudCBmYWlsZWQuIFBsZWFzZSB0cnkgd2l0aCBhbm90aGVyIHBheW1lbnQgbWV0aG9kLidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSBuZXcgY2xpZW50VG9rZW4gaXMgYXZhaWxhYmxlLCBjYWxsIGBoYW5kbGVyLmNvbnRpbnVlV2l0aE5ld0NsaWVudFRva2VuYCB0byByZWZyZXNoIHRoZSBjbGllbnQgc2Vzc2lvbi5cbiAgICAgIC8vIFRoZSBjaGVja291dCB3aWxsIGF1dG9tYXRpY2FsbHkgcGVyZm9ybSB0aGUgYWN0aW9uIHJlcXVpcmVkIGJ5IHRoZSBXb3JrZmxvdy5cblxuICAgICAgaWYgKHJlc3BvbnNlLnJlcXVpcmVkQWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmNvbnRpbnVlV2l0aE5ld0NsaWVudFRva2VuKFxuICAgICAgICAgIHJlc3BvbnNlLnJlcXVpcmVkQWN0aW9uLmNsaWVudFRva2VuXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIERpc3BsYXkgdGhlIHN1Y2Nlc3Mgc2NyZWVuXG5cbiAgICAgIHJldHVybiBoYW5kbGVyLmhhbmRsZVN1Y2Nlc3MoKTtcbiAgICB9LFxuICAgIG9uUmVzdW1lU3VjY2VzczogYXN5bmMgKHJlc3VtZVRva2VuRGF0YSwgaGFuZGxlcikgPT4ge1xuICAgICAgLy8gU2VuZCB0aGUgcmVzdW1lIHRva2VuIHRvIHlvdXIgc2VydmVyIHRvIHJlc3VtZSB0aGUgcGF5bWVudFxuXG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBpbnRlZ3JhdGlvblR5cGU6IEludGVncmF0aW9uVHlwZUVudW0uUHJpbWVyLFxuICAgICAgICBwYXltZW50VG9rZW46IHJlc3VtZVRva2VuRGF0YS5yZXN1bWVUb2tlbixcbiAgICAgICAgb3JkZXJJZDogY3VycmVudFBheW1lbnRJZCxcbiAgICAgIH0gYXMgcmVzdW1lUGF5bWVudFJlcXVlc3Q7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnJlc3VtZVBheW1lbnQoZGF0YSk7XG5cbiAgICAgIC8vIENhbGwgYGhhbmRsZXIuaGFuZGxlRmFpbHVyZWAgdG8gY2FuY2VsIHRoZSBmbG93IGFuZCBkaXNwbGF5IGFuIGVycm9yIG1lc3NhZ2VcblxuICAgICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlci5oYW5kbGVGYWlsdXJlKFxuICAgICAgICAgICdUaGUgcGF5bWVudCBmYWlsZWQuIFBsZWFzZSB0cnkgd2l0aCBhbm90aGVyIHBheW1lbnQgbWV0aG9kLidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSBuZXcgY2xpZW50VG9rZW4gaXMgYXZhaWxhYmxlLCBjYWxsIGBoYW5kbGVyLmNvbnRpbnVlV2l0aE5ld0NsaWVudFRva2VuYFxuICAgICAgLy8gdG8gcmVmcmVzaCB0aGUgY2xpZW50IHNlc3Npb24uXG4gICAgICAvLyBUaGUgY2hlY2tvdXQgd2lsbCBhdXRvbWF0aWNhbGx5IHBlcmZvcm0gdGhlIGFjdGlvbiByZXF1aXJlZCBieSB0aGUgV29ya2Zsb3dcblxuICAgICAgaWYgKHJlc3BvbnNlLnJlcXVpcmVkQWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmNvbnRpbnVlV2l0aE5ld0NsaWVudFRva2VuKFxuICAgICAgICAgIHJlc3BvbnNlLnJlcXVpcmVkQWN0aW9uLmNsaWVudFRva2VuXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIERpc3BsYXkgdGhlIHN1Y2Nlc3Mgc2NyZWVuXG5cbiAgICAgIHJldHVybiBoYW5kbGVyLmhhbmRsZVN1Y2Nlc3MoKTtcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBjaGVja291dFByaW1lclJlc3BvbnNlID0gYXdhaXQgY2hlY2tvdXQ7XG5cbiAgcmV0dXJuIGNoZWNrb3V0UHJpbWVyUmVzcG9uc2U7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IEJyYWluVHJlZUNoZWNrb3V0Rm9ybSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGlkPVwiYnJhaW50cmVlLWNoZWNrb3V0LWNvbnRhaW5lclwiPlxuICAgICAgPHBcbiAgICAgICAgY2xhc3NOYW1lPVwibGVhZFwiXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgZm9udEZhbWlseTogJ0FyaWFsJyxcbiAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgIGZvbnRTaXplOiAnMS4yNXJlbScsXG4gICAgICAgICAgZm9udFdlaWdodDogJzMwMCcsXG4gICAgICAgICAgY29sb3I6ICcjMjEyNTI5JyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgQnJhaW50cmVlXG4gICAgICA8L3A+XG4gICAgICA8ZGl2IGlkPVwicGF5cGFsLWJ1dHRvblwiIHN0eWxlPXt7IGRpc3BsYXk6ICdub25lJyB9fT48L2Rpdj5cblxuICAgICAgPGRpdiBpZD1cImNhcmQtY29udGFpbmVyXCIgc3R5bGU9e3sgZGlzcGxheTogJ25vbmUnIH19PlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzFyZW0nIH19PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnN3B4JyB9fT5DYXJkIE51bWJlcjwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGhlaWdodDogJzMwcHgnLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMC4zNzVyZW0gMC43NXJlbScsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnMXJlbScsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc0MDAnLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAnMS41JyxcbiAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNkZWUyZTYnLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1cHgnLFxuICAgICAgICAgICAgICB0cmFuc2l0aW9uOlxuICAgICAgICAgICAgICAgICdib3JkZXItY29sb3IgLjE1cyBlYXNlLWluLW91dCxib3gtc2hhZG93IC4xNXMgZWFzZS1pbi1vdXQnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGlkPVwiY2FyZC1udW1iZXJcIlxuICAgICAgICAgID48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnMXJlbScgfX0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Cb3R0b206ICc3cHgnIH19PkV4cGlyYXRpb24gRGF0ZTwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGhlaWdodDogJzMwcHgnLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMC4zNzVyZW0gMC43NXJlbScsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnMXJlbScsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc0MDAnLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAnMS41JyxcbiAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNkZWUyZTYnLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1cHgnLFxuICAgICAgICAgICAgICB0cmFuc2l0aW9uOlxuICAgICAgICAgICAgICAgICdib3JkZXItY29sb3IgLjE1cyBlYXNlLWluLW91dCxib3gtc2hhZG93IC4xNXMgZWFzZS1pbi1vdXQnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGlkPVwiZXhwaXJhdGlvbi1kYXRlXCJcbiAgICAgICAgICA+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzFyZW0nIH19PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnN3B4JyB9fT5DVlY8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBoZWlnaHQ6ICczMHB4JyxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzAuMzc1cmVtIDAuNzVyZW0nLFxuICAgICAgICAgICAgICBmb250U2l6ZTogJzFyZW0nLFxuICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnNDAwJyxcbiAgICAgICAgICAgICAgbGluZUhlaWdodDogJzEuNScsXG4gICAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjZGVlMmU2JyxcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbjpcbiAgICAgICAgICAgICAgICAnYm9yZGVyLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm94LXNoYWRvdyAuMTVzIGVhc2UtaW4tb3V0JyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBpZD1cImN2dlwiXG4gICAgICAgICAgPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGlkPVwiY2FyZC1idXR0b25cIlxuICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBoZWlnaHQ6ICc1MHB4JyxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcwcHggMTJweCcsXG4gICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICB0cmFuc2l0aW9uOlxuICAgICAgICAgICAgICAnb3BhY2l0eSAzMDBtcyAnICtcbiAgICAgICAgICAgICAgJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgMHMsICcgK1xuICAgICAgICAgICAgICAnYm94LXNoYWRvdyAzMDBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpIDBzLCBiYWNrZ3JvdW5kLWNvbG9yIDMwMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgMHMnLFxuICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICBmb250U2l6ZTogJzEuMXJlbScsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAncmdiKDM2LCA0MiwgNDcpJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzVweCcsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdzZXJpZicsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIFBheSB3aXRoIENhcmRcbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtbm9jaGVja1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGNvbnN0IFN1Y2Nlc3NQYXltZW50SWNvbiA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB3aWR0aD1cIjUwXCJcbiAgICAgIGhlaWdodD1cIjUwXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgNTAgNTBcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgZD1cIk0yNSAwLjExMTMyOEMyMC4wNzc0IDAuMTExMzI4IDE1LjI2NTQgMS41NzEwNCAxMS4xNzI1IDQuMzA1ODZDNy4wNzk1MiA3LjA0MDY5IDMuODg5NDUgMTAuOTI3OCAyLjAwNTY2IDE1LjQ3NTdDMC4xMjE4ODMgMjAuMDIzNSAtMC4zNzEgMjUuMDI3OCAwLjU4OTM0MyAyOS44NTU4QzEuNTQ5NjkgMzQuNjgzOCAzLjkyMDEyIDM5LjExODUgNy40MDA5IDQyLjU5OTNDMTAuODgxNyA0Ni4wODAxIDE1LjMxNjQgNDguNDUwNSAyMC4xNDQ0IDQ5LjQxMDlDMjQuOTcyNCA1MC4zNzEyIDI5Ljk3NjcgNDkuODc4MyAzNC41MjQ2IDQ3Ljk5NDZDMzkuMDcyNCA0Ni4xMTA4IDQyLjk1OTUgNDIuOTIwNyA0NS42OTQ0IDM4LjgyNzdDNDguNDI5MiAzNC43MzQ4IDQ5Ljg4ODkgMjkuOTIyOCA0OS44ODg5IDI1LjAwMDJDNDkuODg4OSAxOC4zOTkzIDQ3LjI2NjcgMTIuMDY4NyA0Mi41OTkxIDcuNDAxMTJDMzcuOTMxNSAyLjczMzU0IDMxLjYwMDkgMC4xMTEzMjggMjUgMC4xMTEzMjhaTTQxLjI1NTYgMTYuNjQ2OUwyMC44MTU2IDM3LjA3MTNMOC43NDQ0NCAyNS4wMDAyQzguMzMxODggMjQuNTg3NyA4LjEwMDExIDI0LjAyODEgOC4xMDAxMSAyMy40NDQ3QzguMTAwMTEgMjIuODYxMiA4LjMzMTg4IDIyLjMwMTcgOC43NDQ0NCAyMS44ODkxQzkuMTU3IDIxLjQ3NjUgOS43MTY1NSAyMS4yNDQ4IDEwLjMgMjEuMjQ0OEMxMC44ODM0IDIxLjI0NDggMTEuNDQzIDIxLjQ3NjUgMTEuODU1NiAyMS44ODkxTDIwLjg0NjcgMzAuODgwMkwzOC4xNzU2IDEzLjU2NjlDMzguMzc5OCAxMy4zNjI2IDM4LjYyMjMgMTMuMjAwNiAzOC44ODkyIDEzLjA5QzM5LjE1NjIgMTIuOTc5NSAzOS40NDIyIDEyLjkyMjYgMzkuNzMxMSAxMi45MjI2QzQwLjAyIDEyLjkyMjYgNDAuMzA2MSAxMi45Nzk1IDQwLjU3MyAxMy4wOUM0MC44Mzk5IDEzLjIwMDYgNDEuMDgyNCAxMy4zNjI2IDQxLjI4NjcgMTMuNTY2OUM0MS40OTA5IDEzLjc3MTIgNDEuNjUzIDE0LjAxMzcgNDEuNzYzNSAxNC4yODA2QzQxLjg3NDEgMTQuNTQ3NSA0MS45MzEgMTQuODMzNSA0MS45MzEgMTUuMTIyNEM0MS45MzEgMTUuNDExMyA0MS44NzQxIDE1LjY5NzQgNDEuNzYzNSAxNS45NjQzQzQxLjY1MyAxNi4yMzEyIDQxLjQ5MDkgMTYuNDczNyA0MS4yODY3IDE2LjY3OEw0MS4yNTU2IDE2LjY0NjlaXCJcbiAgICAgICAgZmlsbD1cIiM4RURGQzJcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBTdWNjZXNzUGF5bWVudEljb24gfSBmcm9tICcuLi9JY29ucy9TdWNjZXNzUGF5bWVudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgY29uc3QgUGF5bWVudFN0YXR1cyA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBpZD1cInBheW1lbnQtc3RhdHVzXCJcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1ldmVubHknLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgIGhlaWdodDogJzIwMHB4JyxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPFN1Y2Nlc3NQYXltZW50SWNvbiAvPlxuICAgICAgPGRpdj5Zb3VyIHBheW1lbnQgd2FzIHN1Y2Nlc3NmdWwhPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IFByaW1lckNoZWNrb3V0Rm9ybSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHBcbiAgICAgICAgY2xhc3NOYW1lPVwibGVhZFwiXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgZm9udEZhbWlseTogJ0FyaWFsJyxcbiAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgIGZvbnRTaXplOiAnMS4yNXJlbScsXG4gICAgICAgICAgZm9udFdlaWdodDogJzMwMCcsXG4gICAgICAgICAgY29sb3I6ICcjMjEyNTI5JyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgUHJpbWVyXG4gICAgICA8L3A+XG4gICAgICA8ZGl2XG4gICAgICAgIGlkPVwicHJpbWVyLWNoZWNrb3V0LWNvbnRhaW5lclwiXG4gICAgICAgIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzEwcHgnIH19XG4gICAgICA+PC9kaXY+XG4gICAgPC8+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUGF5bWVudENsaWVudCB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHsgVW5pdmVyc2FsQ2hlY2tvdXRPcHRpb25zIH0gZnJvbSAnQHByaW1lci1pby9jaGVja291dC13ZWInO1xuaW1wb3J0IHsgQnJhaW5UcmVlQ2hlY2tvdXRGb3JtIH0gZnJvbSAnLi9CcmFpblRyZWVDbGllbnQvQnJhaW5UcmVlQ2hlY2tvdXRGb3JtJztcbmltcG9ydCB7IFBheW1lbnRTdGF0dXMgfSBmcm9tICcuL1BheW1lbnRTdGF0dXMvUGF5bWVudFN0YXR1cyc7XG5pbXBvcnQgeyBQcmltZXJDaGVja291dEZvcm0gfSBmcm9tICcuL1ByaW1lckNsaWVudC9QcmltZXJDaGVja291dEZvcm0nO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGN1c3RvbWVySWQ6ICdmNDJhOWIyNzE0MTA0MTY3YTA3YzE1YjYyMGM1YjM0YycsXG4gIGFwaUVuZHBvaW50OiAnaHR0cHM6Ly9hcGkucGF5bWVudHMuZGV2LnBhbHRhYnJhaW4uY29tJyxcbiAgcHJpY2VQb2ludElkZW50OiAncHBfZXVybycsXG4gIGFwaUtleTogJ2M1ZThjOWZkYWE4NzQ4NjQ5ODM3MzcxZjk1NDdlODRmJyxcbiAgbWV0YWRhdGE6IHt9LFxuICBtYW51YWxQYXltZW50czogdHJ1ZSxcbn07XG5mdW5jdGlvbiBBcHAoKSB7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoaW5pdGlhbFN0YXRlKTtcbiAgY29uc3Qgb25FcnJvciA9IChlcnJvcjogYW55KSA9PiB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIGluaXRpYWxpemF0aW9uOicsIGVycm9yKTtcbiAgfTtcbiAgY29uc3Qgb25QYXltZW50U3RhdHVzQ2hhbmdlID0gKCkgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoJ29uUGF5bWVudFN0YXR1c0NoYW5nZTogRXJyb3IgZHVyaW5nIGluaXRpYWxpemF0aW9uOicpO1xuICB9O1xuICBjb25zdCBpbml0UGF5bWVudCA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBhcGlFbmRwb2ludCxcbiAgICAgIGFwaUtleSxcbiAgICAgIHByaWNlUG9pbnRJZGVudCxcbiAgICAgIGN1c3RvbWVySWQsXG4gICAgICBtZXRhZGF0YSxcbiAgICAgIG1hbnVhbFBheW1lbnRzLFxuICAgIH0gPSBzdGF0ZTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZmlyc3RQYXltZW50QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgICAgICdmaXJzdC1wYXltZW50J1xuICAgICAgKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcblxuICAgICAgaWYgKGZpcnN0UGF5bWVudEJ0bikge1xuICAgICAgICBmaXJzdFBheW1lbnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICBmaXJzdFBheW1lbnRCdG4uaW5uZXJUZXh0ID0gJ0xvYWRpbmcuLi4nO1xuICAgICAgICBmaXJzdFBheW1lbnRCdG4uc3R5bGUub3BhY2l0eSA9ICcwLjUnO1xuICAgICAgICBmaXJzdFBheW1lbnRCdG4uc3R5bGUuY3Vyc29yID0gJ2RlZmF1bHQnO1xuICAgICAgfVxuICAgICAgY29uc3QgY2xpZW50ID0gY3JlYXRlUGF5bWVudENsaWVudChcbiAgICAgICAge1xuICAgICAgICAgIGFwaUVuZHBvaW50LFxuICAgICAgICAgIGFwaUtleSxcbiAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgIG9uUGF5bWVudFN0YXR1c0NoYW5nZSxcbiAgICAgICAgfSxcbiAgICAgICAgeyB2YWx1ZTogY3VzdG9tZXJJZCB9XG4gICAgICApO1xuXG4gICAgICAvLyBUT0RPOiBzeW5jIHdoYXQgc3RhcnR1cHMgY2FuIHBhc3NcblxuICAgICAgY29uc3QgcHJpY2VQb2ludERhdGEgPSBhd2FpdCBjbGllbnQuZ2V0UHJpY2VQb2ludHMoe1xuICAgICAgICBjdXN0b21lcklkOiB7XG4gICAgICAgICAgdmFsdWU6IGN1c3RvbWVySWQsXG4gICAgICAgIH0sXG4gICAgICAgIGlkZW50OiBbcHJpY2VQb2ludElkZW50XSxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcHJpY2VQb2ludCA9IHByaWNlUG9pbnREYXRhWzBdO1xuXG4gICAgICBjb25zdCBhbW91bnQgPVxuICAgICAgICBwcmljZVBvaW50LmludHJvQmFzZVByaWNlID09PSAnMCcgPyAnMS4wMCcgOiBwcmljZVBvaW50LmludHJvQmFzZVByaWNlO1xuICAgICAgY29uc3QgY3VycmVuY3kgPSBwcmljZVBvaW50LmN1cnJlbmN5Q29kZTtcblxuICAgICAgY29uc3QgZm9ybVNldHRpbmdzID0ge1xuICAgICAgICBpZGVudDogcHJpY2VQb2ludElkZW50LFxuICAgICAgICBjdXN0b21lcjoge1xuICAgICAgICAgIGlkOiB7IHZhbHVlOiBjdXN0b21lcklkIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBwcmltZXJPcHRpb24gPSB7fSBhcyBVbml2ZXJzYWxDaGVja291dE9wdGlvbnM7XG4gICAgICBjb25zdCBicmFpbnRyZWVPcHRpb24gPSB7fTtcblxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Ftb3VudCcsIEpTT04uc3RyaW5naWZ5KGFtb3VudCkpO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2N1cnJlbmN5JywgY3VycmVuY3kpO1xuXG4gICAgICBhd2FpdCBjbGllbnQuc2hvd1BheW1lbnRGb3JtKHtcbiAgICAgICAgc2V0dGluZ3M6IGZvcm1TZXR0aW5ncyxcbiAgICAgICAgcHJpbWVyT3B0aW9uLFxuICAgICAgICBicmFpbnRyZWVPcHRpb24sXG4gICAgICAgIG1hbnVhbFBheW1lbnRzLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGR1cmluZyBpbml0aWFsaXphdGlvbjonLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uQ2hhbmdlVmFsdWUgPSAoXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+IHwgYm9vbGVhblxuICApID0+IHtcbiAgICBzZXRTdGF0ZSgoc3RhdGUpID0+ICh7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIFtrZXldOiB2YWx1ZSxcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBzdHlsZT17e1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIGhlaWdodDogJzEwMHZoJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2Y4ZjlmYScsXG4gICAgICAgIGZvbnRGYW1pbHk6ICdzZXJpZicsXG4gICAgICAgIHBhZGRpbmc6ICc4MHB4JyxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBpZD1cInByZXBhcmF0aW9uLWZvcm1cIlxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIHdpZHRoOiAnNTAwcHgnLFxuICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjY2VkNGRhJyxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6ICcxMHB4JyxcbiAgICAgICAgICBwYWRkaW5nOiAnMjBweCcsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxoMlxuICAgICAgICAgIHN0eWxlPXt7IGNvbG9yOiAnIzM0M2E0MCcsIGZvbnRXZWlnaHQ6ICdib2xkJywgbWFyZ2luQm90dG9tOiAnMjBweCcgfX1cbiAgICAgICAgPlxuICAgICAgICAgIFByZXBhcmF0aW9uXG4gICAgICAgIDwvaDI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJzE1cHgnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8bGFiZWwgc3R5bGU9e3sgY29sb3I6ICcjNDk1MDU3JywgZm9udFdlaWdodDogJ2JvbGQnIH19PkRvbWFpbjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBpZD1cImFwaUVuZHBvaW50XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICB2YWx1ZT17c3RhdGUuYXBpRW5kcG9pbnR9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICB3aWR0aDogJzYwJScsXG4gICAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjY2VkNGRhJyxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzVweCcsXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzVweCcsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25DaGFuZ2U9eyh2YWx1ZSkgPT4gb25DaGFuZ2VWYWx1ZSgnYXBpRW5kcG9pbnQnLCB2YWx1ZSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJzE1cHgnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8bGFiZWw+QXBpIGtleTwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBpZD1cImFwaV9rZXlcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHZhbHVlPXtzdGF0ZS5hcGlLZXl9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICB3aWR0aDogJzYwJScsXG4gICAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjY2VkNGRhJyxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzVweCcsXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzVweCcsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25DaGFuZ2U9eyh2YWx1ZSkgPT4gb25DaGFuZ2VWYWx1ZSgnYXBpS2V5JywgdmFsdWUpfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206ICcxNXB4JyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGxhYmVsPkN1c3RvbWVyIElEPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIGlkPVwiY3VzdG9tZXJfaWRcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHZhbHVlPXtzdGF0ZS5jdXN0b21lcklkfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgd2lkdGg6ICc2MCUnLFxuICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgI2NlZDRkYScsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICc1cHgnLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1cHgnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWUpID0+IG9uQ2hhbmdlVmFsdWUoJ2N1c3RvbWVySWQnLCB2YWx1ZSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJzE1cHgnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8bGFiZWw+UHJpY2UgUG9pbnQgSWRlbnQ8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgaWQ9XCJwcmljZV9wb2ludF9pZGVudFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgdmFsdWU9e3N0YXRlLnByaWNlUG9pbnRJZGVudH1cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiAnNjAlJyxcbiAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNjZWQ0ZGEnLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnNXB4JyxcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbkNoYW5nZT17KHZhbHVlKSA9PiBvbkNoYW5nZVZhbHVlKCdwcmljZVBvaW50SWRlbnQnLCB2YWx1ZSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnMTBweCcgfX0+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWlucHV0XCJcbiAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICByb2xlPVwic3dpdGNoXCJcbiAgICAgICAgICAgIGlkPVwibWV0YWRhdGFcIlxuICAgICAgICAgICAgb25DaGFuZ2U9eyh2YWx1ZSkgPT4gb25DaGFuZ2VWYWx1ZSgnbWV0YWRhdGEnLCB2YWx1ZSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1sYWJlbFwiPkZvcmNlIDNkczwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzE1cHgnIH19PlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1pbnB1dFwiXG4gICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgY2hlY2tlZD17c3RhdGUubWFudWFsUGF5bWVudHN9XG4gICAgICAgICAgICByb2xlPVwic3dpdGNoXCJcbiAgICAgICAgICAgIGlkPVwibWFudWFsUGF5bWVudHNcIlxuICAgICAgICAgICAgb25DaGFuZ2U9eyh2YWx1ZSkgPT5cbiAgICAgICAgICAgICAgb25DaGFuZ2VWYWx1ZSgnbWFudWFsUGF5bWVudHMnLCB2YWx1ZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1sYWJlbFwiPk1hbnVhbCBQYXltZW50czwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgaWQ9XCJmaXJzdC1wYXltZW50XCJcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzAwN2JmZicsXG4gICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4ICAyMHB4JyxcbiAgICAgICAgICAgIG1hcmdpblRvcDogJzEwcHgnLFxuICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1cHgnLFxuICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgICBvbkNsaWNrPXtpbml0UGF5bWVudH1cbiAgICAgICAgPlxuICAgICAgICAgIEZpcnN0IHBheW1lbnRcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBpZD1cIm9uZS1jbGljay1idXR0b25cIlxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjNmM3NTdkJyxcbiAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgcGFkZGluZzogJzEwcHggIDIwcHgnLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAnMTBweCcsXG4gICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzVweCcsXG4gICAgICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6ICcxMHB4JyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgT25lIGNsaWNrXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9XCJwYXltZW50LWNvbnRhaW5lclwiXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICAgIHdpZHRoOiAnNzAwcHgnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8UHJpbWVyQ2hlY2tvdXRGb3JtIC8+XG4gICAgICAgIDxCcmFpblRyZWVDaGVja291dEZvcm0gLz5cbiAgICAgICAgPFBheW1lbnRTdGF0dXMgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGF5bWVudENsaWVudEltcGwgfSBmcm9tICcuL1BheW1lbnRDbGllbnQvUGF5bWVudENsaWVudEltcGwnO1xuaW1wb3J0IHsgQ3VzdG9tZXJJZCwgUGF5bWVudENsaWVudEksIFBheW1lbnRDbGllbnRTZXR0aW5nc1R5cGUgfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQYXltZW50Q2xpZW50KFxuICBjbGllbnRTZXR0aW5nczogUGF5bWVudENsaWVudFNldHRpbmdzVHlwZSxcbiAgY3VzdG9tZXJJZDogQ3VzdG9tZXJJZCB8IG51bGwgPSBudWxsXG4pOiBQYXltZW50Q2xpZW50SSB7XG4gIHJldHVybiBuZXcgUGF5bWVudENsaWVudEltcGwoY2xpZW50U2V0dGluZ3MsIGN1c3RvbWVySWQpO1xufVxuXG5jb25zdCByb290ID0gY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykgYXMgSFRNTEVsZW1lbnQpO1xuXG5yb290LnJlbmRlcihcbiAgPFJlYWN0LlN0cmljdE1vZGU+XG4gICAgPEFwcCAvPlxuICA8L1JlYWN0LlN0cmljdE1vZGU+XG4pO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJlIiwidCIsInIiLCJuIiwidGhpcyIsIl9fYXNzaWduIiwiT2JqZWN0IiwiYXNzaWduIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwibyIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiaSIsImMiLCJhIiwidSIsInMiLCJFIiwiVklTQSIsIk1BU1RFUkNBUkQiLCJBTUVSSUNBTl9FWFBSRVNTIiwiRElORVJTX0NMVUIiLCJESVNDT1ZFUiIsIkpDQiIsIlVOSU9OUEFZIiwiTUFFU1RSTyIsIkVMTyIsIk1JUiIsIkhJUEVSIiwiSElQRVJDQVJEIiwiQSIsIl8iLCJjbG9uZSIsImYiLCJsIiwiaW5kZXhPZiIsIkVycm9yIiwicCIsImlzVmFsaWRJbnB1dFR5cGUiLCJtYXAiLCJmb3JFYWNoIiwiYWRkTWF0Y2hpbmdDYXJkc1RvUmVzdWx0cyIsImZpbmRCZXN0TWF0Y2giLCJnZXRUeXBlSW5mbyIsInJlbW92ZUNhcmQiLCJzcGxpY2UiLCJhZGRDYXJkIiwidHlwZSIsInB1c2giLCJ1cGRhdGVDYXJkIiwiY2hhbmdlT3JkZXIiLCJyZXNldE1vZGlmaWNhdGlvbnMiLCJ0eXBlcyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJwYXR0ZXJucyIsIm1hdGNoZXMiLCJBcnJheSIsImlzQXJyYXkiLCJTdHJpbmciLCJtYXRjaFN0cmVuZ3RoIiwidmlzYSIsIm5pY2VUeXBlIiwiZ2FwcyIsImxlbmd0aHMiLCJjb2RlIiwibmFtZSIsInNpemUiLCJtYXN0ZXJjYXJkIiwiZGlzY292ZXIiLCJqY2IiLCJ1bmlvbnBheSIsIm1hZXN0cm8iLCJlbG8iLCJtaXIiLCJoaXBlciIsImhpcGVyY2FyZCIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImZpbHRlciIsInJlZHVjZSIsIk51bWJlciIsInN1YnN0ciIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWciLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPIiwiY3JlYXRlIiwiQyIsIl9pbnZva2UiLCJMIiwibWV0aG9kIiwiYXJnIiwiZGVsZWdhdGUiLCJJIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJkb25lIiwid3JhcCIsIlAiLCJUIiwiaCIsImQiLCJnZXRQcm90b3R5cGVPZiIsIlIiLCJTIiwiTiIsInkiLCJEIiwicmVzb2x2ZSIsIl9fYXdhaXQiLCJ0aGVuIiwicmV0dXJuIiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwidiIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsIm0iLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImNvbnN0cnVjdG9yIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJBc3luY0l0ZXJhdG9yIiwiYXN5bmMiLCJQcm9taXNlIiwidG9TdHJpbmciLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInZhbHVlcyIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiY29tcGxldGUiLCJmaW5pc2giLCJjYXRjaCIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJGdW5jdGlvbiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZ2V0IiwiQ2hlY2tvdXRVWEZsb3ciLCJSdCIsIkN2dklucHV0IiwiRXJyb3JDb2RlIiwiTHQiLCJFdmVudFR5cGVzIiwianQiLCJIZWFkbGVzc01hbmFnZXJUeXBlIiwiSHQiLCJQYXltZW50RmxvdyIsIk50IiwiUGF5bWVudEluc3RydW1lbnRUeXBlIiwiSXQiLCJQYXltZW50TWV0aG9kRGF0YSIsIkJ0IiwiUGF5bWVudE1ldGhvZFR5cGUiLCJ2dCIsIlByaW1lciIsInh0IiwiU3VjY2Vzc1NjcmVlblR5cGUiLCJrdCIsIlRocmVlRFNlY3VyZVN0YXR1cyIsIkR0IiwiVG9rZW5UeXBlIiwiQ3QiLCJwcmVsb2FkUHJpbWVyIiwiU3QiLCJmcm9tIiwidGVzdCIsIlJFUVVFU1RfU1RBUlQiLCJSRVFVRVNUX0VORCIsIlNUQVJUIiwiRU5EIiwiTkVUV09SS19DQUxMX0VWRU5UIiwiQ1JBU0hfRVZFTlQiLCJUSU1FUl9FVkVOVCIsIk1FU1NBR0VfRVZFTlQiLCJWMV9FVkVOVCIsIlNES19GVU5DVElPTl9FVkVOVCIsIm5hdmlnYXRvciIsImdldEJhdHRlcnkiLCJtZW1vcnlGb290cHJpbnQiLCJwZXJmb3JtYW5jZSIsIm1lbW9yeSIsInVzZWRKU0hlYXBTaXplIiwic2NyZWVuIiwiaGVpZ2h0Iiwid2lkdGgiLCJwbGF0Zm9ybVZlcnNpb24iLCJwbGF0Zm9ybSIsInVzZXJBZ2VudCIsImxvY2FsZSIsImxhbmd1YWdlIiwiYmF0dGVyeUxldmVsIiwibGV2ZWwiLCJiYXR0ZXJ5U3RhdHVzIiwiY2hhcmdpbmciLCJDSEFSR0lORyIsIk5PVF9DSEFSR0lORyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvY2VzcyIsImVudiIsIlBSSU1FUl9BU1NFVFNfVVJMIiwiUFJJTUVSX0NPUkVfQVBJX1VSTCIsIlBSSU1FUl9QQ0lfQVBJX1VSTCIsIlBSSU1FUl9NT0RVTEVTX1VSTCIsIlBSSU1FUl9CVUlMRF9JTlRFR1JBVElPTl9CVUlMREVSIiwiU0VOVFJZX0RTTiIsInQwIiwidDEiLCJ0MiIsInQzIiwiRGF0ZSIsIm5vdyIsInQ0IiwidDUiLCJ0NiIsInQ3IiwidDgiLCJ0OSIsImNyZWF0ZWRBdCIsImRldmljZSIsImV2ZW50VHlwZSIsInByb3BlcnRpZXMiLCJzZGtWZXJzaW9uIiwic2RrVHlwZSIsImNvbmNhdCIsInVybCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwidmlzaWJpbGl0eVN0YXRlIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsInNlbmRCZWFjb24iLCJZIiwiZyIsIk0iLCJjcmFzaEV2ZW50IiwibWVzc2FnZUV2ZW50IiwibmV0d29ya0NhbGxFdmVudCIsInNka0Z1bmN0aW9uRXZlbnQiLCJ0aW1lckV2ZW50IiwidjFFdmVudCIsInNldEl0ZW0iLCJCb29sZWFuIiwiam9pbiIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsImIiLCJ3Iiwia2V5IiwiVSIsIkIiLCJSZWZlcmVuY2VFcnJvciIsImsiLCJ4IiwiRyIsInNwZWNzIiwib3B0aW9ucyIsInZhbGlkIiwidmFsaWRhdGlvbkVycm9ycyIsIkYiLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiSCIsImNhblZhdWx0IiwiYnV0dG9uTWFuYWdlZEJ5UGF5bWVudE1ldGhvZCIsImhhc0V4cG9ydGVkQnV0dG9uT3B0aW9ucyIsImoiLCJNYXAiLCJTZXQiLCJLIiwiWCIsInJhbmRvbVVVSUQiLCJXIiwicmVwbGFjZSIsInoiLCJnZXRSYW5kb21WYWx1ZXMiLCJVaW50OEFycmF5IiwiTWF0aCIsInJhbmRvbSIsImNyeXB0byIsIlEiLCJjYWxsVHlwZSIsImlkIiwiZXJyb3JCb2R5IiwiZXJyb3IiLCJyZXNwb25zZUNvZGUiLCJzdGF0dXMiLCJKIiwiYXRvYiIsIiQiLCJidG9hIiwicSIsIkJ1ZmZlciIsImVlIiwiVGV4dERlY29kZXIiLCJ0ZSIsIlRleHRFbmNvZGVyIiwicmUiLCJuZSIsIm9lIiwiaWUiLCJmcm9tQ2hhckNvZGUiLCJiaW5kIiwiY2UiLCJhZSIsInVlIiwic2UiLCJjaGFyQ29kZUF0IiwiRWUiLCJBZSIsInN1YmFycmF5IiwiX2UiLCJmZSIsImxlIiwicGUiLCJPZSIsImVuY29kZSIsIlBlIiwiVGUiLCJoZSIsImRlIiwiUmUiLCJOZSIsInllIiwiRGUiLCJJZSIsIm1lIiwidmUiLCJkZWNvZGUiLCJDZSIsIlNlIiwiTGUiLCJZZSIsImdlIiwidmVyc2lvbiIsIlZFUlNJT04iLCJhdG9iUG9seWZpbGwiLCJidG9hUG9seWZpbGwiLCJmcm9tQmFzZTY0IiwidG9CYXNlNjQiLCJlbmNvZGVVUkkiLCJlbmNvZGVVUkwiLCJ1dG9iIiwiYnRvdSIsImlzVmFsaWQiLCJmcm9tVWludDhBcnJheSIsInRvVWludDhBcnJheSIsImV4dGVuZFN0cmluZyIsImV4dGVuZFVpbnQ4QXJyYXkiLCJleHRlbmRCdWlsdGlucyIsIk1lIiwidXJsU2FmZSIsImJlIiwic3BsaXQiLCJCZSIsImV4cCIsIlVlIiwidG9JU09TdHJpbmciLCJ3ZSIsImtlIiwiamUiLCJIZSIsIkdlIiwieGUiLCJmZXRjaCIsImJvZHkiLCJoZWFkZXJzIiwianNvbiIsIkZlIiwiVmUiLCJLZSIsIldlIiwiemUiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiWGUiLCJRZSIsIlplIiwicWUiLCJKZSIsIiRlIiwiZXQiLCJ0dCIsInJlbW92ZSIsInF1ZXJ5U2VsZWN0b3IiLCJydCIsIm50IiwiYWxsIiwiYXQiLCJjdCIsIm90IiwiaXQiLCJzdHlsZVNoZWV0cyIsImZpbmQiLCJocmVmIiwicmVsIiwid2luZG93IiwiX19QcmltZXIiLCJjcm9zc29yaWdpbiIsInV0IiwicHQiLCJzdCIsIkV0IiwiQXQiLCJfdCIsImZ0IiwibHQiLCJjaGVja291dFNlc3Npb25JZCIsInBhcmFtcyIsIm1lc3NhZ2UiLCJtZXNzYWdlVHlwZSIsIk90IiwiUHQiLCJhY2Nlc3NUb2tlbiIsImNvbmZpZ3VyYXRpb25VcmwiLCJhbmFseXRpY3NVcmxWMiIsInByaW1lckFjY291bnRJZCIsImNsaWVudFNlc3Npb24iLCJjbGllbnRTZXNzaW9uSWQiLCJkYXRhIiwiVHQiLCJodCIsImR0IiwieXQiLCJtdCIsIkxPQURJTkciLCJUSFJFRV9EUyIsIkNIT09TRV9QQVlNRU5UX01FVEhPRCIsIk1BTkFHRV9QQVlNRU5UX01FVEhPRFMiLCJESVJFQ1RfREVCSVRfRk9STSIsIkRJUkVDVF9ERUJJVF9NQU5EQVRFIiwiQ1JFRElUX0NBUkRfRk9STSIsIlNVQ0NFU1NfUEFZTUVOVF9NRVRIT0QiLCJTVUNDRVNTX0NIRUNLIiwiUk9PVCIsIlJPT1RfQ09OVEVOVCIsIlNVQk1JVF9CVVRUT04iLCJUSFJFRV9EU19NT0RBTCIsIlZBVUxUIiwiVkFVTFRfSU5MSU5FIiwiTkFWSUdBVEVfUEFZTUVOVF9NRVRIT0RTIiwiRElWSURFUiIsIkFQTV9CVVRUT05TIiwiQ0FSREhPTERFUl9OQU1FIiwiQ0FSREhPTERFUl9OQU1FX0lOUFVUIiwiQUNUSU9OUyIsIkFDVElPTlNfTUVOVSIsIlNBVkVfUEFZTUVOVF9NRVRIT0RfQ0hFQ0tCT1giLCJTQVZFX1BBWU1FTlRfTUVUSE9EX0ZJRUxEIiwiU0FWRURfUEFZTUVOVF9NRVRIT0RTX0VNUFRZIiwiQ0FSRF9GT1JNIiwiRERfU1dJVENIIiwiRERfSUJBTl9GSUVMRCIsIkREX0xPQ0FMX0ZJRUxEIiwiRERfQ1VTVE9NRVJfTkFNRV9JTlBVVCIsIkREX0NVU1RPTUVSX0VNQUlMX0lOUFVUIiwiRERfQ1VTVE9NRVJfQUREUkVTU19MSU5FMSIsIkREX0NVU1RPTUVSX0FERFJFU1NfTElORTIiLCJERF9DVVNUT01FUl9BRERSRVNTX0NJVFkiLCJERF9DVVNUT01FUl9BRERSRVNTX1BPU1RBTF9DT0RFIiwiRERfSUJBTl9JTlBVVCIsIkREX0FDQ09VTlRfTlVNQkVSX0lOUFVUIiwiRERfQkFOS19DT0RFX0lOUFVUIiwiRERfQlJBTkNIX0NPREVfSU5QVVQiLCJERF9NQU5EQVRFX1NNQUxMX1BSSU5UIiwiRVJST1JfTUVTU0FHRSIsIlRPS0VOIiwiSElEREVOIiwiRk9DVVNFRCIsIlNFTEVDVEVEIiwiRVJST1IiLCJDQVJEX1RZUEUiLCJTQVZFRF9QQVlNRU5UX01FVEhPRCIsIlNBVkVEX1BBWU1FTlRfTUVUSE9EX0NPTlRBSU5FUiIsIkFQTV9CVVRUT04iLCJFRElUX0JVVFRPTiIsIk1FTlUiLCJNRU5VX0lURU0iLCJQQVlNRU5UX01FVEhPRF9NRU5VX0lURU0iLCJERUxFVEVfUEFZTUVOVF9NRVRIT0RfQlVUVE9OIiwiRU5URVIiLCJFTlRFUklORyIsIkVOVEVSRUQiLCJFWElUIiwiRVhJVElORyIsIkVYSVRFRCIsIkNIRUNLT1VUIiwiRVhQUkVTU19DSEVDS09VVCIsIkhFQURMRVNTX0NIRUNLT1VUIiwiU0lOR0xFX1BBWU1FTlRfTUVUSE9EX0NIRUNLT1VUIiwiREVGQVVMVCIsIlBSRUZFUl9WQVVMVCIsIlRPS0VOSVpFX1NUQVJURUQiLCJUT0tFTklaRV9FUlJPUiIsIlRPS0VOSVpFX1NVQ0NFU1MiLCJUT0tFTklaRV9ESURfTk9UX1NUQVJUIiwiU1VDQ0VTUyIsIkZBSUxFRCIsIlNLSVBQRUQiLCJDSEFMTEVOR0UiLCJXT1JMRFBBWV9JREVBTCIsIkFEWUVOX0tMQVJOQSIsIkFEWUVOX0JBTkNPTlRBQ1RfQ0FSRCIsIlBBWV9OTF9LQUFSVERJUkVDVCIsIkFEWUVOX0VQUyIsIkFEWUVOX0JBTkNPTlRBQ1RfUEFZQ09OSVEiLCJPTUlTRV9QUk9NUFRQQVkiLCJPTUlTRV9UUlVFTU9ORVkiLCJBRFlFTl9NVUxUSUJBTkNPIiwiUEFDWVBBWV9XRUNIQVQiLCJQQUNZUEFZX0FMSVBBWSIsIkFEWUVOX01CV0FZIiwiWEVORElUX0RBTkEiLCJYRU5ESVRfU0hPUEVFUEFZIiwiQURZRU5fUEFZU0hPUCIsIkFEWUVOX1BBWVRSQUlMIiwiQ0xFQVJQQVkiLCJSQVBZRF9GQVNUIiwiUkFQWURfUFJPTVBUUEFZIiwiUkFQWURfR0NBU0giLCJSQVBZRF9QT0xJIiwiUkFQWURfR1JBQlBBWSIsIlBSSU1FUl9QQVlQQUwiLCJUV09DMlAiLCJORVRTIiwiU1RSSVBFX0dJUk9QQVkiLCJNT0xMSUVfR0lST1BBWSIsIk1PTExJRV9FUFMiLCJQQVlfTkxfRVBTIiwiUEFZX05MX1AyNCIsIk1PTExJRV9QMjQiLCJNT0xMSUVfU09GT1JUIiwiQ09JTkJBU0UiLCJPUEVOTk9ERSIsIk1PTExJRV9HSUZUX0NBUkQiLCJYRkVSU19QQVlOT1ciLCJDQVJEIiwiQVBQTEVfUEFZIiwiR09PR0xFX1BBWSIsIlBBWVBBTCIsIlBBWVBBTF9WQVVMVEVEIiwiR09fQ0FSRExFU1MiLCJQQVlfTkxfSURFQUwiLCJQQVlfTkxfU09GT1JUX0JBTktJTkciLCJQQVlfTkxfQkFOQ09OVEFDVCIsIlBBWV9OTF9QQVlQQUwiLCJQQVlfTkxfQ1JFRElUX1RSQU5TRkVSIiwiUEFZX05MX0RJUkVDVF9ERUJJVCIsIlBBWV9OTF9HSVJPUEFZIiwiUEFZX05MX1BBWUNPTklRIiwiSE9PTEFIIiwiQURZRU5fQkxJSyIsIkFEWUVOX1ZJUFBTIiwiQURZRU5fR0lST1BBWSIsIkFEWUVOX1NPRk9SVCIsIkFEWUVOX1RSVVNUTFkiLCJBRFlFTl9BTElQQVkiLCJBRFlFTl9UV0lOVCIsIkFEWUVOX01PQklMRVBBWSIsIk1PTExJRV9CQU5DT05UQUNUIiwiTU9MTElFX0lERUFMIiwiQlVDS0FST09fR0lST1BBWSIsIkJVQ0tBUk9PX0VQUyIsIkJVQ0tBUk9PX1NPRk9SVCIsIkJVQ0tBUk9PX0JBTkNPTlRBQ1QiLCJCVUNLQVJPT19JREVBTCIsIkFUT01FIiwiUEFZTUVOVF9DQVJEIiwiS0xBUk5BIiwiQURZRU5fQkFOS19UUkFOU0ZFUiIsIlNJTkdMRV9VU0UiLCJNVUxUSV9VU0UiLCJJTklUSUFMSVpBVElPTl9FUlJPUiIsIk5PX1BBWU1FTlRfTUVUSE9EUyIsIlBSSU1FUl9URUFSRE9XTiIsIlBSSU1FUl9TRVJWRVJfRVJST1IiLCJUSFJFRV9EU19TRVRVUF9FUlJPUiIsIlRIUkVFX0RTX0FVVEhfRkFJTEVEIiwiVEhSRUVfRFNfTkVHT1RJQVRJT05fRVJST1IiLCJUT0tFTklaQVRJT05fRVJST1IiLCJEVVBMSUNBVEVfUEFZTUVOVF9NRVRIT0RfRVJST1IiLCJDQVJEX05VTUJFUl9FUlJPUiIsIlBBWU1FTlRfTUVUSE9EX05PVF9TRVRVUCIsIlBBWU1FTlRfTUVUSE9EX05PVF9QUk9WSURFRCIsIlBBWU1FTlRfTUVUSE9EX05PVF9DT01QQVRJQkxFIiwiUkVTVU1FX0VSUk9SIiwiVEFYX0VSUk9SIiwiVkFMSURBVElPTl9FUlJPUiIsIlBBWU1FTlRfRkFJTEVEIiwiUEFZTUVOVF9DUkVBVElPTl9BQk9SVEVEIiwiUEFZTUVOVF9DUkVBVElPTl9ESVNBQkxFRCIsIkNMSUVOVF9TRVNTSU9OX1VQREFURV9FUlJPUiIsIklOVkFMSURfQVJHVU1FTlQiLCJWQVVMVF9GRVRDSCIsIlZBVUxUX0RFTEVURSIsIkhFQURMRVNTX1ZBVUxUX01BTkFHRVJfVkFMSURBVElPTiIsIkNBUkRfRk9STV9WQUxJREFUSU9OX1VORVhQRUNURURfRklFTEQiLCJQQVlNRU5UX01FVEhPRCIsIkNIRUNLIiwiQ0hBTkdFIiwiRk9DVVMiLCJCTFVSIiwiQ0xJQ0siLCJDTE9TRSIsIk5BVElWRSIsIlJFRElSRUNUIiwiU0RLX1ZFUlNJT04iLCJjcmVhdGVIZWFkbGVzcyIsInNob3dFeHByZXNzQ2hlY2tvdXQiLCJzaG93VW5pdmVyc2FsQ2hlY2tvdXQiLCJzaG93VmF1bHRNYW5hZ2VyIiwiX2RlcmVxXyIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIlByb21pc2VHbG9iYWwiLCJwcm9taXNlX3BvbHlmaWxsXzEiLCJwcm9taXNlXzEiLCJzY3JpcHRQcm9taXNlQ2FjaGUiLCJsb2FkU2NyaXB0Iiwic2NyaXB0TG9hZFByb21pc2UiLCJzdHJpbmdpZmllZE9wdGlvbnMiLCJmb3JjZVNjcmlwdFJlbG9hZCIsInNjcmlwdCIsImF0dHJzIiwiZGF0YUF0dHJpYnV0ZXMiLCJjb250YWluZXIiLCJzcmMiLCJyZWplY3QiLCJjbGVhckNhY2hlIiwidWEiLCJpc0VkZ2UiLCJpc1NhbXN1bmciLCJpc0R1Y2tEdWNrR28iLCJpc09wZXJhIiwiaXNTaWxrIiwiaXNJb3MiLCJpc0dvb2dsZVNlYXJjaEFwcCIsImlzSW9zRmlyZWZveCIsIndlYmtpdFJlZ2V4cCIsImlzV2Via2l0IiwiaXNJb3NDaHJvbWUiLCJpc0ZhY2Vib29rIiwiaXNJb3NHb29nbGVTZWFyY2hBcHAiLCJpc0lvc1dlYnZpZXciLCJzdGF0dXNCYXJWaXNpYmxlIiwic3RhdHVzYmFyIiwidmlzaWJsZSIsImlzSXBhZE9TIiwiY2hlY2tJcGFkT1MiLCJpT3NUZXN0IiwiaXNBbmRyb2lkIiwiaXNDaHJvbWUiLCJpc1NhbXN1bmdCcm93c2VyIiwiaXNPcGVyYU1pbmkiLCJpc0FuZHJvaWRXZWJ2aWV3IiwibWF0Y2giLCJpc1Vuc3VwcG9ydGVkSW9zQ2hyb21lIiwiaXNPbGRTYW1zdW5nQnJvd3Nlck9yU2Ftc3VuZ1dlYnZpZXciLCJFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwib24iLCJldmVudCIsImNhbGxiYWNrIiwib2ZmIiwiZXZlbnRDYWxsYmFja3MiLCJpbmRleE9mQ2FsbGJhY2siLCJfZW1pdCIsImFyZ3MiLCJfaSIsImhhc0xpc3RlbmVyIiwiY3JlYXRlQ2hpbGQiLCJDaGlsZE9iamVjdCIsIkdsb2JhbFByb21pc2UiLCJFeHRlbmRlZFByb21pc2UiLCJfdGhpcyIsIl9wcm9taXNlIiwiX3Jlc29sdmVGdW5jdGlvbiIsIl9yZWplY3RGdW5jdGlvbiIsIl9vblJlc29sdmUiLCJvblJlc29sdmUiLCJkZWZhdWx0T25SZXNvbHZlIiwiX29uUmVqZWN0Iiwib25SZWplY3QiLCJkZWZhdWx0T25SZWplY3QiLCJzaG91bGRDYXRjaEV4Y2VwdGlvbnMiLCJfcmVzZXRTdGF0ZSIsInJlc3VsdCIsImVyciIsInNldFByb21pc2UiLCJQcm9taXNlQ2xhc3MiLCJzdXBwcmVzc1VuaGFuZGxlZFByb21pc2VNZXNzYWdlIiwiYWxsU2V0dGxlZCIsInJhY2UiLCJfYSIsImlzRnVsZmlsbGVkIiwiX3NldFJlc29sdmVkIiwiYXJnRm9yUmVzb2x2ZUZ1bmN0aW9uIiwiX3NldFJlamVjdGVkIiwiaXNSZXNvbHZlZCIsImlzUmVqZWN0ZWQiLCJzZXRfYXR0cmlidXRlc18xIiwiZGVmYXVsdF9hdHRyaWJ1dGVzXzEiLCJhc3NpZ25fMSIsImlmcmFtZSIsImNvbmZpZyIsImRlZmF1bHRBdHRyaWJ1dGVzIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlIiwidGFyZ2V0Iiwib2JqcyIsIm9iaiIsImZyYW1lQm9yZGVyIiwiYWxsb3d0cmFuc3BhcmVuY3kiLCJzY3JvbGxpbmciLCJlbGVtZW50IiwiYXR0cmlidXRlcyIsInJlbW92ZUF0dHJpYnV0ZSIsImRlZmVycmVkIiwiZm4iLCJzZXRUaW1lb3V0IiwiY29uc29sZSIsImxvZyIsIm9uY2UiLCJjYWxsZWQiLCJwcm9taXNlT3JDYWxsYmFjayIsInByb21pc2UiLCJkZWZlcnJlZF8xIiwib25jZV8xIiwicHJvbWlzZV9vcl9jYWxsYmFja18xIiwid3JhcFByb21pc2UiLCJ3cmFwUHJvdG90eXBlIiwiaWdub3JlTWV0aG9kcyIsImluY2x1ZGVQcml2YXRlTWV0aG9kcyIsInRyYW5zZm9ybVByaXZhdGVNZXRob2RzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImlzTm90UHJpdmF0ZU1ldGhvZCIsImlzTm9uQ29uc3RydWN0b3JGdW5jdGlvbiIsImlzTm90QW5JZ25vcmVkTWV0aG9kIiwib3JpZ2luYWwiLCJjYXJkVHlwZXMiLCJhZGRfbWF0Y2hpbmdfY2FyZHNfdG9fcmVzdWx0c18xIiwiaXNfdmFsaWRfaW5wdXRfdHlwZV8xIiwiZmluZF9iZXN0X21hdGNoXzEiLCJjbG9uZV8xIiwiY3VzdG9tQ2FyZHMiLCJjYXJkTmFtZXMiLCJPUklHSU5BTF9URVNUX09SREVSIiwidGVzdE9yZGVyIiwiZmluZFR5cGUiLCJjYXJkVHlwZSIsImdldENhcmRQb3NpdGlvbiIsImlnbm9yZUVycm9yRm9yTm90RXhpc3RpbmciLCJwb3NpdGlvbiIsImNyZWRpdENhcmRUeXBlIiwiY2FyZE51bWJlciIsInJlc3VsdHMiLCJjYXJkQ29uZmlndXJhdGlvbiIsImJlc3RNYXRjaCIsImV4aXN0aW5nQ2FyZFBvc2l0aW9uIiwidXBkYXRlcyIsIm9yaWdpbmFsT2JqZWN0IiwiY2xvbmVkQ2FyZCIsImN1cnJlbnRQb3NpdGlvbiIsIm1hdGNoZXNfMSIsInBhdHRlcm5MZW5ndGgiLCJwYXR0ZXJuIiwiY2xvbmVkQ2FyZENvbmZpZ3VyYXRpb24iLCJudW1iZXJPZlJlc3VsdHNXaXRoTWF4U3RyZW5ndGhQcm9wZXJ0eSIsImhhc0Vub3VnaFJlc3VsdHNUb0RldGVybWluZUJlc3RNYXRjaCIsIm1pbiIsIm1heCIsIm1heExlbmd0aFRvQ2hlY2siLCJpbnRlZ2VyUmVwcmVzZW50YXRpb25PZkNhcmROdW1iZXIiLCJtYXRjaGVzUmFuZ2UiLCJtYXRjaGVzUGF0dGVybiIsIkZyYW1lYnVzIiwibGliXzEiLCJEZWZhdWx0UHJvbWlzZSIsIm9yaWdpbiIsImNoYW5uZWwiLCJ2ZXJpZnlEb21haW4iLCJ0YXJnZXRGcmFtZXMiLCJsaW1pdEJyb2FkY2FzdFRvRnJhbWVzQXJyYXkiLCJpc0Rlc3Ryb3llZCIsImxpc3RlbmVycyIsImhhc0FkZGl0aW9uYWxDaGVja3NGb3JPbkxpc3RlbmVycyIsImFkZFRhcmdldEZyYW1lIiwiZnJhbWUiLCJpbmNsdWRlIiwiY2hpbGRXaW5kb3ciLCJXaW5kb3ciLCJjaGlsZFdpbmRvd3MiLCJlbWl0IiwiZXZlbnROYW1lIiwicmVwbHkiLCJuYW1lc3BhY2VFdmVudCIsImlzbnRTdHJpbmciLCJ1bmRlZmluZWQiLCJwYXlsb2FkIiwicGFja2FnZVBheWxvYWQiLCJ0YXJnZXRGcmFtZXNBc1dpbmRvd3MiLCJzZW5kTWVzc2FnZSIsImJyb2FkY2FzdCIsInRvcCIsInNlbGYiLCJlbWl0QXNQcm9taXNlIiwib3JpZ2luYWxIYW5kbGVyIiwiaGFuZGxlciIsInN1YnNjcmlwdGlvbkFyZ3NJbnZhbGlkIiwicGFzc2VzVmVyaWZ5RG9tYWluQ2hlY2siLCJoYXNNYXRjaGluZ1RhcmdldEZyYW1lIiwic291cmNlIiwic3Vic2NyaWJlcnMiLCJsaXN0ZW5lciIsInN1YnNjcmliZXJMaXN0IiwidGVhcmRvd24iLCJjaGVja09yaWdpbiIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsIndpbiIsIm1hdGNoaW5nRnJhbWUiLCJwb3N0TWVzc2FnZU9yaWdpbiIsIm1lcmNoYW50SG9zdCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0IiwiZnJhbWVidXNfMSIsImF0dGFjaCIsImRldGFjaCIsIl8xIiwiaXNBdHRhY2hlZCIsIm9uTWVzc2FnZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJicm9hZGNhc3RUb0NoaWxkV2luZG93cyIsImNsb3NlZCIsImZyYW1lVG9Ccm9hZGNhc3RUbyIsInBvc3RNZXNzYWdlIiwiaGFzT3BlbmVyIiwib3BlbmVyIiwiZnJhbWVzIiwicHJlZml4IiwiZGlzcGF0Y2giLCJfX2NyZWF0ZUJpbmRpbmciLCJrMiIsImRlc2MiLCJfX2V4cG9ydFN0YXIiLCJzdHIiLCJ1bnBhY2tQYXlsb2FkIiwiZXZlbnREYXRhIiwicGFja2FnZWQiLCJzdWJzY3JpYmVSZXBsaWVyIiwidXVpZF8xIiwidXVpZCIsInJlcGxpZXIiLCJyZXBseU9yaWdpbkhhbmRsZXIiLCJyZXBseU9yaWdpbl8xIiwicmVwbHlTb3VyY2VfMSIsInJlcGx5RXZlbnRfMSIsInJlcGx5RGF0YSIsInJlcGx5UGF5bG9hZCIsInNldFRpbWVvdXRGdW5jIiwibm9vcCIsIl9zdGF0ZSIsIl9oYW5kbGVkIiwiX3ZhbHVlIiwiX2RlZmVycmVkcyIsImRvUmVzb2x2ZSIsImhhbmRsZSIsIl9pbW1lZGlhdGVGbiIsImNiIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwicmV0IiwibmV3VmFsdWUiLCJmaW5hbGUiLCJ0aGlzQXJnIiwiX3VuaGFuZGxlZFJlamVjdGlvbkZuIiwibGVuIiwiSGFuZGxlciIsInJlYXNvbiIsImV4IiwicHJvbSIsImFyciIsInJlbWFpbmluZyIsInJlcyIsInZhbCIsInNldEltbWVkaWF0ZSIsIndhcm4iLCJpc0lFOSIsImlzQW5kcm9pZENocm9tZSIsImlzS2l0S2F0V2VidmlldyIsIlVBIiwiaXNDaHJvbWVPcyIsIktJVEtBVF9XRUJWSUVXX1JFR0VYIiwiZGV2aWNlXzEiLCJCcmFpbnRyZWVFcnJvciIsImVycm9ycyIsIm1ldGhvZHMiLCJjb252ZXJ0TWV0aG9kc1RvRXJyb3IiLCJBbWVyaWNhbkV4cHJlc3MiLCJfY2xpZW50IiwiY2xpZW50IiwiZ2V0UmV3YXJkc0JhbGFuY2UiLCJub25jZSIsIl9tZXRhIiwicGF5bWVudE1ldGhvZE5vbmNlIiwicmVxdWVzdCIsImVuZHBvaW50IiwiQU1FWF9ORVRXT1JLX0VSUk9SIiwiZGV0YWlscyIsIm9yaWdpbmFsRXJyb3IiLCJBTUVYX05PTkNFX1JFUVVJUkVEIiwiZ2V0RXhwcmVzc0NoZWNrb3V0UHJvZmlsZSIsIk1FUkNIQU5UIiwiTkVUV09SSyIsImJhc2ljQ29tcG9uZW50VmVyaWZpY2F0aW9uIiwiY3JlYXRlRGVmZXJyZWRDbGllbnQiLCJjcmVhdGVBc3NldHNVcmwiLCJ2ZXJpZnkiLCJhdXRob3JpemF0aW9uIiwiZGVidWciLCJhc3NldHNVcmwiLCJhbmFseXRpY3MiLCJBcHBsZVBheSIsIl9pbnN0YW50aWF0ZWRXaXRoQ2xpZW50IiwidXNlRGVmZXJyZWRDbGllbnQiLCJfY3JlYXRlUHJvbWlzZSIsImNyZWF0ZVByb21pc2UiLCJfc2V0TWVyY2hhbnRJZGVudGlmaWVyIiwiX3dhaXRGb3JDbGllbnQiLCJhcHBsZVBheUNvbmZpZyIsImdldENvbmZpZ3VyYXRpb24iLCJnYXRld2F5Q29uZmlndXJhdGlvbiIsImFwcGxlUGF5V2ViIiwibWVyY2hhbnRJZGVudGlmaWVyIiwiY3JlYXRlUGF5bWVudFJlcXVlc3QiLCJwYXltZW50UmVxdWVzdCIsIl9jcmVhdGVQYXltZW50UmVxdWVzdFN5bmNocm9ub3VzbHkiLCJhcHBsZVBheSIsImRlZmF1bHRzIiwiY291bnRyeUNvZGUiLCJjdXJyZW5jeUNvZGUiLCJtZXJjaGFudENhcGFiaWxpdGllcyIsInN1cHBvcnRlZE5ldHdvcmtzIiwibmV0d29yayIsInBlcmZvcm1WYWxpZGF0aW9uIiwidmFsaWRhdGlvblVSTCIsImFwcGxlUGF5V2ViU2Vzc2lvbiIsInZhbGlkYXRpb25VcmwiLCJkb21haW5OYW1lIiwiaG9zdG5hbWUiLCJyZXNwb25zZSIsInNlbmRFdmVudCIsIkFQUExFX1BBWV9NRVJDSEFOVF9WQUxJREFUSU9OX0ZBSUxFRCIsIkFQUExFX1BBWV9NRVJDSEFOVF9WQUxJREFUSU9OX05FVFdPUksiLCJBUFBMRV9QQVlfVkFMSURBVElPTl9VUkxfUkVRVUlSRUQiLCJ0b2tlbml6ZSIsInRva2VuIiwiYXBwbGVQYXltZW50VG9rZW4iLCJwYXltZW50RGF0YSIsImFwcGxlUGF5Q2FyZHMiLCJBUFBMRV9QQVlfVE9LRU5JWkFUSU9OIiwiQVBQTEVfUEFZX1BBWU1FTlRfVE9LRU5fUkVRVUlSRUQiLCJBUFBMRV9QQVlfTk9UX0VOQUJMRUQiLCJhcHBsZVBheUluc3RhbmNlIiwiQlJBSU5UUkVFX1ZFUlNJT04iLCJHcmFwaFFMIiwiaXNWZXJpZmllZERvbWFpbiIsImNvbnZlcnRUb0JyYWludHJlZUVycm9yIiwiZ2V0R2F0ZXdheUNvbmZpZ3VyYXRpb24iLCJjcmVhdGVBdXRob3JpemF0aW9uRGF0YSIsImFkZE1ldGFkYXRhIiwiR1JBUEhRTF9VUkxTIiwiYXNzZXRzIiwiRlJBVURORVRfRk5DTFMiLCJGUkFVRE5FVF9TT1VSQ0UiLCJGUkFVRE5FVF9VUkwiLCJjYWNoZWRDbGllbnRzIiwiQ2xpZW50IiwiY29uZmlndXJhdGlvbiIsImNvbmZpZ3VyYXRpb25KU09OIiwiQ0xJRU5UX01JU1NJTkdfR0FURVdBWV9DT05GSUdVUkFUSU9OIiwicHJvcGVydHkiLCJDTElFTlRfR0FURVdBWV9DT05GSUdVUkFUSU9OX0lOVkFMSURfRE9NQUlOIiwiX3JlcXVlc3QiLCJfY29uZmlndXJhdGlvbiIsIl9jbGllbnRBcGlCYXNlVXJsIiwiY2xpZW50QXBpVXJsIiwiZ3JhcGhRTCIsIl9ncmFwaFFMIiwiaW5pdGlhbGl6ZSIsImNsaWVudEluc3RhbmNlIiwiYXV0aERhdGEiLCJDTElFTlRfSU5WQUxJRF9BVVRIT1JJWkFUSU9OIiwiaXNEZWJ1ZyIsIl9maW5kT3JDcmVhdGVGcmF1ZG5ldEpTT04iLCJjbGllbnRNZXRhZGF0YUlkIiwiYWRkaXRpb25hbERhdGEiLCJhdXRob3JpemF0aW9uRmluZ2VycHJpbnQiLCJwYXJhbWV0ZXJzIiwiZWwiLCJyZGFfdGVuYW50IiwibWlkIiwibWVyY2hhbnRJZCIsInBpZWNlcyIsImNvbXBvbmVudCIsImNpZCIsImZwIiwiYnUiLCJ0ZXh0IiwicmVxdWVzdFByb21pc2UiLCJvcHRpb25OYW1lIiwiYXBpIiwiYmFzZVVybCIsInJlcXVlc3RPcHRpb25zIiwic2hvdWxkQ29sbGVjdERhdGEiLCJjcmVkaXRDYXJkcyIsImNvbGxlY3REZXZpY2VEYXRhIiwiQ0xJRU5UX09QVElPTl9SRVFVSVJFRCIsInRpbWVvdXQiLCJtZXRhZGF0YSIsImFuYWx5dGljc01ldGFkYXRhIiwiQ0xJRU5UX09QVElPTl9JTlZBTElEIiwiZW52aXJvbm1lbnQiLCJjbGllbnRTZGtNZXRhZGF0YSIsImludGVncmF0aW9uIiwic2Vzc2lvbklkIiwiQXV0aG9yaXphdGlvbiIsInNlbmRBbmFseXRpY3NFdmVudCIsImtpbmQiLCJyZXNvbHZlZERhdGEiLCJyZXF1ZXN0RXJyb3IiLCJDTElFTlRfUkVRVUVTVF9USU1FT1VUIiwiQ0xJRU5UX0FVVEhPUklaQVRJT05fSU5WQUxJRCIsIkNMSUVOVF9BVVRIT1JJWkFUSU9OX0lOU1VGRklDSUVOVCIsIkNMSUVOVF9SQVRFX0xJTUlURUQiLCJDTElFTlRfR0FURVdBWV9ORVRXT1JLIiwiQ0xJRU5UX1JFUVVFU1RfRVJST1IiLCJodHRwU3RhdHVzIiwiZm9ybWF0UmVxdWVzdEVycm9yIiwiQ0xJRU5UX0dSQVBIUUxfUkVRVUVTVF9FUlJPUiIsIl9odHRwU3RhdHVzIiwidG9KU09OIiwiZ2V0VmVyc2lvbiIsIklOVEVSTkFMIiwiY29uc3RhbnRzIiwiaXNEYXRlU3RyaW5nQmVmb3JlT3JPbiIsImNvbmZpZ1VybCIsInJlcU9wdGlvbnMiLCJtZXJjaGFudEFwcElkIiwiUExBVEZPUk0iLCJTT1VSQ0UiLCJJTlRFR1JBVElPTiIsImludGVncmF0aW9uVHlwZSIsImJyYWludHJlZUxpYnJhcnlWZXJzaW9uIiwiQlJBSU5UUkVFX0xJQlJBUllfVkVSU0lPTiIsImNvbmZpZ1ZlcnNpb24iLCJkYXRlIiwiZmVhdHVyZXMiLCJ0b2tlbml6YXRpb25LZXkiLCJlcnJvclRlbXBsYXRlIiwiYXV0aG9yaXphdGlvblR5cGUiLCJzaGFyZWRFcnJvcnMiLCJJTlNUQU5USUFUSU9OX09QVElPTl9SRVFVSVJFRCIsInF1ZXJ5c3RyaW5nIiwicHJlcEJvZHkiLCJwYXJzZUJvZHkiLCJ4aHIiLCJpc1hIUkF2YWlsYWJsZSIsImlzQXZhaWxhYmxlIiwiR3JhcGhRTFJlcXVlc3QiLCJEZWZhdWx0UmVxdWVzdCIsIk1BWF9UQ1BfUkVUUllDT1VOVCIsIlRDUF9QUkVDT05ORUNUX0JVR19TVEFUVVNfQ09ERSIsIl9yZXF1ZXN0V2l0aFJldHJ5IiwidGNwUmV0cnlDb3VudCIsInJlc0JvZHkiLCJhamF4UmVxdWVzdCIsInBhcnNlZEJvZHkiLCJyZXEiLCJnZXRSZXF1ZXN0T2JqZWN0IiwiaXNHcmFwaFFMUmVxdWVzdCIsImdldFVybCIsImdldEJvZHkiLCJnZXRNZXRob2QiLCJnZXRIZWFkZXJzIiwicXVlcnlpZnkiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VUZXh0IiwiYWRhcHRSZXNwb25zZUJvZHkiLCJkZXRlcm1pbmVTdGF0dXMiLCJlcnJvckNsYXNzIiwiZXh0ZW5zaW9ucyIsImdyYXBoUUxSZXF1ZXN0U2hvdWxkUmV0cnlXaXRoQ2xpZW50QXBpIiwicmVxdWVzdFNob3VsZFJldHJ5Iiwib25sb2FkIiwib25lcnJvciIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiLCJvcGVuIiwicmVxdWVzdE9wZW5FcnJvciIsImhlYWRlcktleSIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiX3VybCIsIl9kYXRhIiwiX21ldGhvZCIsIl9oZWFkZXJzIiwiZXJyb3JSZXNwb25zZUFkYXB0ZXIiLCJjYXJkVHlwZVRyYW5zZm9ybXMiLCJjcmVkaXRDYXJkIiwiSU5URVJOQVRJT05BTF9NQUVTVFJPIiwiU09MTyIsIlVLX01BRVNUUk8iLCJVTklPTl9QQVkiLCJ2aXNhQ2hlY2tvdXQiLCJnb29nbGVQYXkiLCJtYXN0ZXJwYXNzIiwiRElORVJTIiwibWFwQ2FyZFR5cGVzIiwiY2FyZFR5cGVUcmFuc2Zvcm1NYXAiLCJhY2MiLCJyZXNwb25zZUJvZHkiLCJjdHgiLCJjbGllbnRDb25maWd1cmF0aW9uIiwidG9Mb3dlckNhc2UiLCJhbmFseXRpY3NVcmwiLCJ2ZW5tbyIsInN1cHBvcnRlZEZlYXR1cmVzIiwiX2NvbmZpZyIsImZlYXR1cmUiLCJicmFpbnRyZWVBcGkiLCJzdXBwb3J0ZWRDYXJkQnJhbmRzIiwiaWRlYWwiLCJrb3VudCIsImtvdW50TWVyY2hhbnRJZCIsImNoYWxsZW5nZXMiLCJjaGFsbGVuZ2UiLCJzdXBwb3J0ZWRDYXJkVHlwZXMiLCJ0aHJlZURTZWN1cmVFbmFibGVkIiwidGhyZWVEU2VjdXJlIiwiYW5kcm9pZFBheSIsImVuYWJsZWQiLCJnb29nbGVBdXRob3JpemF0aW9uRmluZ2VycHJpbnQiLCJnb29nbGVBdXRob3JpemF0aW9uIiwicGF5cGFsQ2xpZW50SWQiLCJwYXlXaXRoVmVubW8iLCJlbnJpY2hlZEN1c3RvbWVyRGF0YUVuYWJsZWQiLCJwYXlwYWwiLCJwYXlwYWxFbmFibGVkIiwiY3VycmVuY3lJc29Db2RlIiwidW5pb25QYXkiLCJtZXJjaGFudEFjY291bnRJZCIsImFwaWtleSIsImFwaUtleSIsImVuY3J5cHRpb25LZXkiLCJleHRlcm5hbENsaWVudElkIiwibWVyY2hhbnRDaGVja291dElkIiwidXNCYW5rQWNjb3VudCIsInJvdXRlSWQiLCJwbGFpZCIsInB1YmxpY0tleSIsInBsYWlkUHVibGljS2V5IiwiYWRhcHRDb25maWd1cmF0aW9uUmVzcG9uc2VCb2R5IiwiQ0FSRF9CUkFORF9NQVAiLCJCSU5fREFUQV9NQVAiLCJZRVMiLCJOTyIsIlVOS05PV04iLCJBVVRIRU5USUNBVElPTl9JTlNJR0hUX01BUCIsIlBTRFRXTyIsInRva2VuaXplQ3JlZGl0Q2FyZCIsImxhc3RUd28iLCJsYXN0NCIsImJpbkRhdGEiLCJjb25zdW1lZCIsImRlc2NyaXB0aW9uIiwiY2FyZGhvbGRlck5hbWUiLCJleHBpcmF0aW9uTW9udGgiLCJleHBpcmF0aW9uWWVhciIsImJpbiIsImJyYW5kQ29kZSIsImxhc3RGb3VyIiwidGhyZWVEU2VjdXJlSW5mbyIsImF1dGhlbnRpY2F0aW9uSW5zaWdodCIsInJlZ3VsYXRpb25FbnZpcm9ubWVudCIsImN1c3RvbWVyQXV0aGVudGljYXRpb25SZWd1bGF0aW9uRW52aXJvbm1lbnQiLCJhZGRGaWVsZEVycm9yIiwiaW5wdXRQYXRoIiwiZXJyb3JEZXRhaWwiLCJmaWVsZEVycm9ycyIsImZpZWxkRXJyb3IiLCJsZWdhY3lDb2RlIiwiaW5wdXRGaWVsZCIsImNhbmRpZGF0ZSIsImZpZWxkIiwiZ2V0TGVnYWN5TWVzc2FnZSIsImJ1aWxkRmllbGRFcnJvcnMiLCJ1c2VyRXJyb3JSZXNwb25zZUFkYXB0ZXIiLCJlcnJvcldpdGhDbGFzc1Jlc3BvbnNlQWRhcHRlciIsInF1ZXJ5Iiwib3BlcmF0aW9uTmFtZSIsImNyZWF0ZUNyZWRpdENhcmRUb2tlbml6YXRpb25Cb2R5IiwiY2MiLCJiaWxsaW5nQWRkcmVzcyIsImV4cERhdGUiLCJleHBpcmF0aW9uRGF0ZSIsInRyaW0iLCJ2YXJpYWJsZXMiLCJpbnB1dCIsIm51bWJlciIsImN2diIsImhhc0F1dGhlbnRpY2F0aW9uSW5zaWdodCIsImF1dGhlbnRpY2F0aW9uSW5zaWdodElucHV0IiwidmFsaWRhdGUiLCJhZGRWYWxpZGF0aW9uUnVsZSIsIm11dGF0aW9uIiwidG9rZW5pemVfY3JlZGl0X2NhcmRzIiwiZGlzYWxsb3dlZElucHV0UGF0aHMiLCJnZXRHcmFwaFFMRW5kcG9pbnQiLCJmZWF0dXJlRW5hYmxlZCIsInBhdGgiLCJnZXRDbGllbnRBcGlQYXRoIiwiX2lzR3JhcGhRTEVuYWJsZWQiLCJzb21lIiwiYWNjdW11bGF0b3IiLCJjb250YWluc0Rpc2FsbG93ZWRsaXN0ZWRLZXlzIiwicGF0aFBhcnRzIiwic25ha2VDYXNlVG9DYW1lbENhc2UiLCJjcmVkaXRDYXJkVG9rZW5pemF0aW9uQm9keUdlbmVyYXRvciIsImNyZWRpdENhcmRUb2tlbml6YXRpb25SZXNwb25zZUFkYXB0ZXIiLCJjb25maWd1cmF0aW9uQm9keUdlbmVyYXRvciIsImNvbmZpZ3VyYXRpb25SZXNwb25zZUFkYXB0ZXIiLCJnZW5lcmF0b3JzIiwiYWRhcHRlcnMiLCJjbGllbnRBcGlQYXRoIiwiX2NsaWVudFNka01ldGFkYXRhIiwiX3NlbmRBbmFseXRpY3NFdmVudCIsIl9nZW5lcmF0b3IiLCJfYWRhcHRlciIsImZvcm1hdEJvZHlLZXlzIiwib3JpZ2luYWxCb2R5IiwiY2FtZWxDYXNlS2V5IiwiZm9ybWF0dGVkQm9keSIsImdlbmVyYXRlZEJvZHkiLCJwYXJzZWRSZXNwb25zZSIsImlzR3JhcGhRTEVycm9yIiwiQUpBWERyaXZlciIsInRvVXBwZXJDYXNlIiwiWE1MSHR0cFJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsIkRBVEFfQ09MTEVDVE9SX0tPVU5UX05PVF9FTkFCTEVEIiwiREFUQV9DT0xMRUNUT1JfS09VTlRfRVJST1IiLCJEQVRBX0NPTExFQ1RPUl9SRVFVSVJFU19DUkVBVEVfT1BUSU9OUyIsImNhY2hlZFNlc3Npb25JZCIsIkZyYXVkbmV0IiwicmVtb3ZlRWxlbWVudElmT25QYWdlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZmxvb3IiLCJfZ2VuZXJhdGVTZXNzaW9uSWQiLCJfYmVhY29uSWQiLCJnZXRUaW1lIiwiX3BhcmFtZXRlckJsb2NrIiwiYmVhY29uSWQiLCJzYW5kYm94IiwiX2NyZWF0ZVBhcmFtZXRlckJsb2NrIiwiYmxvY2siLCJfdGhpcmRQYXJ0eUJsb2NrIiwic2V0dXAiLCJmcmF1ZE5ldCIsImNsZWFyU2Vzc2lvbklkQ2FjaGUiLCJmcmF1ZG5ldCIsIl9pbnN0YW5jZXMiLCJfaW5zdGFudGlhdGVkV2l0aEFDbGllbnQiLCJrb3VudEluc3RhbmNlIiwiZGV2aWNlRGF0YSIsInJpc2tDb3JyZWxhdGlvbklkIiwiY29ycmVsYXRpb25JZCIsImZyYXVkbmV0SW5zdGFuY2UiLCJjb3JyZWxhdGlvbl9pZCIsInJhd0RldmljZURhdGEiLCJpbnN0YW5jZSIsImNyZWF0ZVRlYXJkb3duTWV0aG9kIiwiZ2V0RGV2aWNlRGF0YSIsInJhdyIsImNyZWF0ZUdldERldmljZURhdGFNZXRob2QiLCJzamNsIiwiY2FtZWxDYXNlVG9TbmFrZUNhc2UiLCJRQV9VUkwiLCJlbnZpcm9ubWVudFVybHMiLCJkZXZlbG9wbWVudCIsInFhIiwicHJvZHVjdGlvbiIsImNhY2hlZERldmljZURhdGEiLCJLb3VudCIsInByZXZpb3VzbHlJbml0aWFsaXplZERldmljZURhdGEiLCJnZXRDYWNoZWREZXZpY2VEYXRhIiwiX2lzQ2FjaGVkIiwiX2N1cnJlbnRFbnZpcm9ubWVudCIsIl9pbml0aWFsaXplRW52aXJvbm1lbnQiLCJzdGFydENvbGxlY3RvcnMiLCJfZGV2aWNlU2Vzc2lvbklkIiwiX2dlbmVyYXRlRGV2aWNlU2Vzc2lvbklkIiwiX2dldERldmljZURhdGEiLCJzZXRDYWNoZWREZXZpY2VEYXRhIiwiX2lmcmFtZSIsIl9zZXR1cElGcmFtZSIsInN0b3BDb2xsZWN0b3JzIiwiX3JlbW92ZUlmcmFtZSIsImRldmljZVNlc3Npb25JZCIsImZyYXVkTWVyY2hhbnRJZCIsImJpdHMiLCJyYW5kb21Xb3JkcyIsImNvZGVjIiwiaGV4IiwiZnJvbUJpdHMiLCJsZWZ0IiwidGl0bGUiLCJpbm5lckhUTUwiLCJjaXBoZXIiLCJoYXNoIiwia2V5ZXhjaGFuZ2UiLCJtb2RlIiwibWlzYyIsImV4Y2VwdGlvbiIsImNvcnJ1cHQiLCJpbnZhbGlkIiwiYnVnIiwibm90UmVhZHkiLCJhZGRFbnRyb3B5IiwidmFsdWVPZiIsImFlcyIsImVuY3J5cHQiLCJkZWNyeXB0IiwiYml0QXJyYXkiLCJiaXRTbGljZSIsImNsYW1wIiwiZXh0cmFjdCIsImdldFBhcnRpYWwiLCJiaXRMZW5ndGgiLCJjZWlsIiwicGFydGlhbCIsInJvdW5kIiwiZXF1YWwiLCJieXRlc3dhcE0iLCJ1dGY4U3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwidG9CaXRzIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzaGEyNTYiLCJ1cGRhdGUiLCJmaW5hbGl6ZSIsImJsb2NrU2l6ZSIsIlVpbnQzMkFycmF5IiwicG93IiwicHJuZyIsInByb2dyZXNzIiwic2VlZGVkIiwiaXNSZWFkeSIsInNldERlZmF1bHRQYXJhbm9pYSIsImdldFByb2dyZXNzIiwibG9hZFRpbWVDb2xsZWN0b3IiLCJWIiwibW91c2VDb2xsZWN0b3IiLCJrZXlib2FyZENvbGxlY3RvciIsImFjY2VsZXJvbWV0ZXJDb2xsZWN0b3IiLCJ0b3VjaENvbGxlY3RvciIsImF0dGFjaEV2ZW50IiwiZGV0YWNoRXZlbnQiLCJjbGllbnRYIiwib2Zmc2V0WCIsImNsaWVudFkiLCJvZmZzZXRZIiwidG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsImFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkiLCJvcmllbnRhdGlvbiIsInJhbmRvbUJ5dGVzIiwiYnVmZmVyIiwibXNDcnlwdG8iLCJHT09HTEVfUEFZTUVOVF9OT1RfRU5BQkxFRCIsIkdPT0dMRV9QQVlNRU5UX0dBVEVXQVlfRVJST1IiLCJHT09HTEVfUEFZTUVOVF9VTlNVUFBPUlRFRF9WRVJTSU9OIiwiZ2VuZXJhdGVHb29nbGVQYXlDb25maWd1cmF0aW9uIiwiQ1JFQVRFX1BBWU1FTlRfREFUQV9SRVFVRVNUX01FVEhPRFMiLCJHb29nbGVQYXltZW50IiwiX3VzZURlZmVycmVkQ2xpZW50IiwiX2dvb2dsZVBheVZlcnNpb24iLCJnb29nbGVQYXlWZXJzaW9uIiwiX2dvb2dsZU1lcmNoYW50SWQiLCJnb29nbGVNZXJjaGFudElkIiwiX2lzVW5zdXBwb3J0ZWRHb29nbGVQYXlBUElWZXJzaW9uIiwiX2dldERlZmF1bHRDb25maWciLCJfZGVmYXVsdENvbmZpZyIsIl9jcmVhdGVWMVBheW1lbnREYXRhUmVxdWVzdCIsInBheW1lbnREYXRhUmVxdWVzdCIsImRlZmF1bHRDb25maWciLCJvdmVycmlkZUNhcmROZXR3b3JrcyIsImNhcmRSZXF1aXJlbWVudHMiLCJhbGxvd2VkQ2FyZE5ldHdvcmtzIiwiZGVmYXVsdENvbmZpZ0NhcmROZXR3b3JrcyIsIl9jcmVhdGVWMlBheW1lbnREYXRhUmVxdWVzdCIsImFsbG93ZWRQYXltZW50TWV0aG9kcyIsInBheW1lbnRNZXRob2QiLCJkZWZhdWx0UGF5bWVudE1ldGhvZCIsIm1lcmNoYW50U3VibWl0dGVkUGF5bWVudE1ldGhvZCIsInBhcmFtZXRlciIsImFwcGx5RGVmYXVsdHNUb1BheW1lbnRNZXRob2RDb25maWd1cmF0aW9uIiwiY3JlYXRlUGF5bWVudERhdGFSZXF1ZXN0Iiwib3ZlcnJpZGVzIiwiX2NyZWF0ZVBheW1lbnREYXRhUmVxdWVzdFN5bmNyb25vdXNseSIsImNyZWF0ZVBheW1lbnREYXRhUmVxdWVzdE1ldGhvZCIsInBhcnNlUmVzcG9uc2UiLCJyYXdSZXNwb25zZSIsImFwaVZlcnNpb24iLCJwYXltZW50TWV0aG9kRGF0YSIsInRva2VuaXphdGlvbkRhdGEiLCJwYXltZW50TWV0aG9kVG9rZW4iLCJwYXlwYWxBY2NvdW50cyIsImFuZHJvaWRQYXlDYXJkcyIsImlzTmV0d29ya1Rva2VuaXplZCIsImFsbG93ZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlIiwiX2lzVmFsaWQiLCJIT1NURURfRklFTERTX0FUVFJJQlVURV9WQUxVRV9OT1RfQUxMT1dFRCIsIkhPU1RFRF9GSUVMRFNfQVRUUklCVVRFX05PVF9TVVBQT1JURUQiLCJ1c2VNaW4iLCJjb21wb25lbnRJZCIsImRpcmVjdGlvbnMiLCJuYXZpZ2F0aW9uRGlyZWN0aW9ucyIsImJyb3dzZXJEZXRlY3Rpb24iLCJmb2N1c0ludGVyY2VwdCIsImZpbmRQYXJlbnRUYWdzIiwidXNlckZvY3VzYWJsZVRhZ05hbWVzIiwidW5mb2N1c2VkSW5wdXRUeXBlcyIsIl9pc1VzZXJGb2N1c2FibGVFbGVtZW50IiwiaGFzU29mdHdhcmVLZXlib2FyZCIsInRhZ05hbWUiLCJfZmluZEZpcnN0Rm9jdXNhYmxlRWxlbWVudCIsImVsZW1lbnRzSW5Gb3JtIiwiZWxlbWVudHNJbmRleCIsInJlbW92ZUV4dHJhRm9jdXNFbGVtZW50cyIsImNoZWNrb3V0Rm9ybSIsIm9uUmVtb3ZlRm9jdXNJbnRlcmNlcHRzIiwiZWxlbWVudHMiLCJtYXRjaEZvY3VzRWxlbWVudCIsImNyZWF0ZUZvY3VzQ2hhbmdlSGFuZGxlciIsImhvc3RlZEZpZWxkc0lkIiwiY2FsbGJhY2tzIiwiY3VycmVudEluZGV4IiwidGFyZ2V0RWxlbWVudCIsIm5hdkhlbHBlciIsInNvdXJjZUVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImRpcmVjdGlvbiIsImZvcm1zIiwibnVtYmVyT2ZFbGVtZW50c0luRm9ybSIsIkJBQ0siLCJjaGVja0luZGV4Qm91bmRzIiwiaW5kZXgiLCJpbmRleENoYW5nZSIsIkZPUldBUkQiLCJfY3JlYXRlTmF2aWdhdGlvbkhlbHBlciIsIm9uVHJpZ2dlcklucHV0Rm9jdXMiLCJmb2N1cyIsImFsbG93ZWRTdHlsZXMiLCJjc3NDbGFzcyIsImNvbXB1dGVkU3R5bGVzIiwic3R5bGVzIiwiY2xhc3NOYW1lIiwiZGlzcGxheSIsImdldENvbXB1dGVkU3R5bGUiLCJEZXN0cnVjdG9yIiwiaUZyYW1lciIsIkJ1cyIsImNvbXBvc2VVcmwiLCJnZXRTdHlsZXNGcm9tQ2xhc3MiLCJJTlRFR1JBVElPTl9USU1FT1VUX01TIiwiZXZlbnRzIiwiaW5qZWN0RnJhbWUiLCJhbGxvd2VkRmllbGRzIiwic2hhZG93IiwiZmluZFJvb3ROb2RlIiwiZ2V0Q2FyZFR5cGVzIiwiYXR0cmlidXRlVmFsaWRhdGlvbkVycm9yIiwiZm9jdXNDaGFuZ2UiLCJkZXN0cm95Rm9jdXNJbnRlcmNlcHQiLCJkZXN0cm95IiwiSG9zdGVkRmllbGRzIiwiZmFpbHVyZVRpbWVvdXQiLCJjbGllbnRDb25maWciLCJob3N0ZWRGaWVsZHNVcmwiLCJmaWVsZHMiLCJmcmFtZVJlYWR5UHJvbWlzZVJlc29sdmVGdW5jdGlvbnMiLCJmcmFtZVJlYWR5UHJvbWlzZXMiLCJfbWVyY2hhbnRDb25maWd1cmF0aW9uT3B0aW9ucyIsIl9jbGllbnRQcm9taXNlIiwiX2luamVjdGVkTm9kZXMiLCJfZGVzdHJ1Y3RvciIsIl9maWVsZHMiLCJjYXJkcyIsIl9idXMiLCJyZWdpc3RlckZ1bmN0aW9uRm9yVGVhcmRvd24iLCJleHRlcm5hbENvbnRhaW5lciIsImludGVybmFsQ29udGFpbmVyIiwiZnJhbWVSZWFkeVByb21pc2UiLCJIT1NURURfRklFTERTX0lOVkFMSURfRklFTERfS0VZIiwic2VsZWN0b3IiLCJub2RlVHlwZSIsIkhPU1RFRF9GSUVMRFNfSU5WQUxJRF9GSUVMRF9TRUxFQ1RPUiIsImZpZWxkU2VsZWN0b3IiLCJmaWVsZENvbnRhaW5lciIsImZpZWxkS2V5IiwiSE9TVEVEX0ZJRUxEU19GSUVMRF9EVVBMSUNBVEVfSUZSQU1FIiwiaXNTaGFkb3dFbGVtZW50IiwidHJhbnNmb3JtVG9TbG90IiwibWF4bGVuZ3RoIiwiSE9TVEVEX0ZJRUxEU19GSUVMRF9QUk9QRVJUWV9JTlZBTElEIiwibWlubGVuZ3RoIiwiZGVmYXVsdElGcmFtZVN0eWxlIiwiaWZyYW1lVGl0bGUiLCJsYWJlbCIsIl9zZXR1cExhYmVsRm9jdXMiLCJmcmFtZUVsZW1lbnQiLCJjb250YWluZXJFbGVtZW50IiwiaXNFbXB0eSIsImlzUG90ZW50aWFsbHlWYWxpZCIsImlzRm9jdXNlZCIsIlJFTU9WRV9GT0NVU19JTlRFUkNFUFRTIiwiVFJJR0dFUl9GT0NVU19DSEFOR0UiLCJ0YXJnZXRUeXBlIiwiUkVBRFlfRk9SX0NMSUVOVCIsIkNBUkRfRk9STV9FTlRSWV9IQVNfQkVHVU4iLCJCSU5fQVZBSUxBQkxFIiwiZm9ybWF0dGVkQ29uZmlnIiwiY2xlYXJUaW1lb3V0IiwiX2NsZWFuVXBGb2N1c0ludGVyY2VwdHMiLCJGUkFNRV9SRUFEWSIsIklOUFVUX0VWRU5UIiwibWVyY2hhbnRQYXlsb2FkIiwiZW1pdHRlZEJ5IiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiZXh0ZXJuYWxDbGFzc2VzIiwiVkFMSUQiLCJJTlZBTElEIiwiY3JlYXRlSW5wdXRFdmVudEhhbmRsZXIiLCJub2RlIiwicGFyZW50IiwibWV0aG9kTmFtZXMiLCJsYWJlbHMiLCJyb290Tm9kZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0cmlnZ2VyRm9jdXMiLCJfZ2V0QW55RmllbGRDb250YWluZXIiLCJmb3VuZCIsImlmcmFtZUNvbnRhaW5lciIsIl9hdHRhY2hJbnZhbGlkRmllbGRDb250YWluZXJzVG9FcnJvciIsImludmFsaWRGaWVsZEtleXMiLCJpbnZhbGlkRmllbGRzIiwiZ2V0Q2hhbGxlbmdlcyIsImdldFN1cHBvcnRlZENhcmRUeXBlcyIsIlRPS0VOSVpBVElPTl9SRVFVRVNUIiwiYWRkQ2xhc3MiLCJjbGFzc25hbWUiLCJBRERfQ0xBU1MiLCJIT1NURURfRklFTERTX0ZJRUxEX05PVF9QUkVTRU5UIiwiSE9TVEVEX0ZJRUxEU19GSUVMRF9JTlZBTElEIiwicmVtb3ZlQ2xhc3MiLCJSRU1PVkVfQ0xBU1MiLCJhdHRyaWJ1dGVFcnIiLCJTRVRfQVRUUklCVVRFIiwic2V0TW9udGhPcHRpb25zIiwiZXJyb3JNZXNzYWdlIiwibWVyY2hhbnRPcHRpb25zIiwic2VsZWN0IiwiU0VUX01PTlRIX09QVElPTlMiLCJzZXRNZXNzYWdlIiwiU0VUX01FU1NBR0UiLCJSRU1PVkVfQVRUUklCVVRFIiwic2V0UGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlciIsImNsZWFyIiwiQ0xFQVJfRklFTEQiLCJmaWVsZENvbmZpZyIsIlRSSUdHRVJfSU5QVVRfRk9DVVMiLCJib3VuZGluZ0JveCIsInZlcnRpY2FsTWlkcG9pbnQiLCJob3Jpem9udGFsTWlkcG9pbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpbm5lckhlaWdodCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsInJpZ2h0IiwiYm90dG9tIiwiaW5uZXJXaWR0aCIsImNsaWVudFdpZHRoIiwic2Nyb2xsSW50b1ZpZXciLCJnZXRTdGF0ZSIsImZvY3VzSGFuZGxlciIsImZyYW1lVHlwZSIsImNsZWFyYm90aCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImZvY3VzSW50ZXJjZXB0QmVmb3JlIiwiZ2VuZXJhdGUiLCJmb2N1c0ludGVyY2VwdEFmdGVyIiwic3VwcG9ydHNJbnB1dEZvcm1hdHRpbmciLCJIT1NURURfRklFTERTX1RJTUVPVVQiLCJpc0Nocm9tZU9TIiwiaXNDaHJvbWVJb3MiLCJpc0ZpcmVmb3giLCJlbnVtZXJhdGUiLCJtYXhFeHBpcmF0aW9uWWVhckFnZSIsImV4dGVybmFsRXZlbnRzIiwiRU1QVFkiLCJOT1RfRU1QVFkiLCJWQUxJRElUWV9DSEFOR0UiLCJDQVJEX1RZUEVfQ0hBTkdFIiwiZGVmYXVsdE1heExlbmd0aHMiLCJwb3N0YWxDb2RlIiwiYm9yZGVyIiwiZmxvYXQiLCJ0b2tlbml6YXRpb25FcnJvckNvZGVzIiwiSE9TVEVEX0ZJRUxEU19UT0tFTklaQVRJT05fRkFJTF9PTl9EVVBMSUNBVEUiLCJIT1NURURfRklFTERTX1RPS0VOSVpBVElPTl9DVlZfVkVSSUZJQ0FUSU9OX0ZBSUxFRCIsImRpc2FibGVkIiwiYXV0b2NvbXBsZXRlTWFwcGluZ3MiLCJleHBpcmF0aW9uIiwiSE9TVEVEX0ZJRUxEU19UT0tFTklaQVRJT05fTkVUV09SS19FUlJPUiIsIkNVU1RPTUVSIiwiSE9TVEVEX0ZJRUxEU19GQUlMRURfVE9LRU5JWkFUSU9OIiwiSE9TVEVEX0ZJRUxEU19GSUVMRFNfRU1QVFkiLCJIT1NURURfRklFTERTX0ZJRUxEU19JTlZBTElEIiwidGFnIiwicGFyZW50cyIsIm9wYWNpdHkiLCJhZGQiLCJibHVyIiwiaWRTdHJpbmciLCJmb2N1c0lucHV0cyIsImlkQ29tcG9uZW50cyIsImhhc0JUUHJlZml4IiwiaXNBbGxvd2VkVHlwZSIsImlzVmFsaWREaXJlY3Rpb24iLCJjYXJkIiwiYW1lcmljYW5FeHByZXNzIiwiZGF0YUNvbGxlY3RvciIsImhvc3RlZEZpZWxkcyIsImxvY2FsUGF5bWVudCIsInBheXBhbENoZWNrb3V0IiwiZ29vZ2xlUGF5bWVudCIsInNlcGEiLCJ2YXVsdE1hbmFnZXIiLCJwcmVmZXJyZWRQYXltZW50TWV0aG9kcyIsImpzb25DbG9uZSIsImF1dGhBdHRycyIsImNsaWVudEluc3RhbmNlT3JQcm9taXNlIiwidGltZXN0YW1wIiwidGltZXN0YW1wSW5Qcm9taXNlIiwiQU5BTFlUSUNTX1BSRUZJWCIsImlzQXN5bmMiLCJBTkFMWVRJQ1NfUkVRVUVTVF9USU1FT1VUX01TIiwiYXNzaWduTm9ybWFsaXplZCIsImFzc2lnblBvbHlmaWxsIiwiZGVzdGluYXRpb24iLCJfYXNzaWduIiwiSU5DT01QQVRJQkxFX1ZFUlNJT05TIiwiSU5WQUxJRF9VU0VfT0ZfSU5URVJOQUxfRlVOQ1RJT04iLCJmdW5jdGlvbnMiLCJmaW5kUm9vdEVycm9yIiwibmV3T2JqIiwidHJhbnNmb3JtS2V5IiwiQVNTRVRTX1VSTFMiLCJDTElFTlRfQVBJX1VSTFMiLCJCVVNfQ09ORklHVVJBVElPTl9SRVFVRVNUX0VWRU5UIiwibWV0aG9kTmFtZSIsIk1FVEhPRF9DQUxMRURfQUZURVJfVEVBUkRPV04iLCJvcmlnaW5hbEVyciIsImJ0RXJyb3JPYmplY3QiLCJwYXJzZWRDbGllbnRUb2tlbiIsInBhcnNlZFRva2VuaXphdGlvbktleSIsInRva2VucyIsImJyYWludHJlZSIsIkNMSUVOVF9TQ1JJUFRfRkFJTEVEX1RPX0xPQUQiLCJiYXRjaEV4ZWN1dGVGdW5jdGlvbnMiLCJfdGVhcmRvd25SZWdpc3RyeSIsIl9pc1RlYXJpbmdEb3duIiwiZW51bWVyYXRpb24iLCJhcnJheSIsIlBvcHVwIiwiUG9wdXBCcmlkZ2UiLCJNb2RhbCIsIlJFUVVJUkVEX0NPTkZJR19LRVlTIiwiRnJhbWVTZXJ2aWNlIiwiX3ZhbGlkYXRlRnJhbWVDb25maWd1cmF0aW9uIiwiX3NlcnZpY2VJZCIsIl9vcHRpb25zIiwiZGlzcGF0Y2hGcmFtZVVybCIsIm9wZW5GcmFtZVVybCIsInN0YXRlIiwiX3NldEJ1c0V2ZW50cyIsImRpc3BhdGNoRnJhbWVSZWFkeUhhbmRsZXIiLCJESVNQQVRDSF9GUkFNRV9SRUFEWSIsIl93cml0ZURpc3BhdGNoRnJhbWUiLCJmcmFtZU5hbWUiLCJESVNQQVRDSF9GUkFNRV9OQU1FIiwiZnJhbWVTcmMiLCJfZGlzcGF0Y2hGcmFtZSIsImNsYXNzIiwiRElTUEFUQ0hfRlJBTUVfQ0xBU1MiLCJESVNQQVRDSF9GUkFNRV9SRVBPUlQiLCJfb25Db21wbGV0ZUNhbGxiYWNrIiwiX2ZyYW1lIiwiY2xvc2UiLCJfZ2V0RnJhbWVGb3JFbnZpcm9ubWVudCIsImlzRnJhbWVDbG9zZWQiLCJfY2xlYW51cEZyYW1lIiwiRlJBTUVfU0VSVklDRV9GUkFNRV9PUEVOX0ZBSUxFRCIsIl9wb2xsRm9yUG9wdXBDbG9zZSIsInJlZGlyZWN0IiwiY3JlYXRlSGFuZGxlciIsImJlZm9yZUNsb3NlIiwiYmVmb3JlRm9jdXMiLCJjcmVhdGVOb29wSGFuZGxlciIsImlzQ2xvc2VkIiwiY2xlYXJJbnRlcnZhbCIsIl9wb3B1cEludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJGUkFNRV9TRVJWSUNFX0ZSQU1FX0NMT1NFRCIsIlBPUFVQX1BPTExfSU5URVJWQUwiLCJ1c2VQb3B1cCIsInN1cHBvcnRzUG9wdXBzIiwicG9wdXBCcmlkZ2VFeGlzdHMiLCJwb3B1cEJyaWRnZSIsImluaXRPcHRpb25zIiwiZnJhbWVTZXJ2aWNlIiwiRUxFTUVOVF9TVFlMRVMiLCJwYWRkaW5nIiwibWFyZ2luIiwib3V0bGluZSIsInpJbmRleCIsImJhY2tncm91bmQiLCJfY2xvc2VkIiwiX2NvbnRhaW5lciIsImlmcmFtZXJDb25maWciLCJpc0lvc1dLV2VidmlldyIsIl9sb2NrU2Nyb2xsaW5nIiwiX2VsIiwib3ZlcmZsb3ciLCJfdW5sb2NrU2Nyb2xsaW5nIiwicmVkaXJlY3RVcmwiLCJfc2F2ZWRCb2R5UHJvcGVydGllcyIsIm92ZXJmbG93U3R5bGUiLCJwb3NpdGlvblN0eWxlIiwic2Nyb2xsVG8iLCJkb2MiLCJwYWdlWE9mZnNldCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJvbkNvbXBsZXRlIiwicG9wdXBEaXNtaXNzZWQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsInVzZXJEZWZpbmVkUG9zaXRpb24iLCJERUZBVUxUX1BPUFVQX0hFSUdIVCIsIkRFRkFVTFRfUE9QVVBfV0lEVEgiLCJQT1BVUF9CQVNFX09QVElPTlMiLCJjb21wb3NlT3B0aW9ucyIsImNlbnRlciIsIndpbmRvd01ldHJpYyIsInBvcHVwTWV0cmljIiwib2Zmc2V0Iiwib3V0ZXJIZWlnaHQiLCJzY3JlZW5ZIiwic2NyZWVuVG9wIiwib3V0ZXJXaWR0aCIsInNjcmVlblgiLCJzY3JlZW5MZWZ0IiwiUE9QVVBfQ0xPU0VfVElNRU9VVCIsImdlbmVyYXRlVG9rZW5pemF0aW9uUGFyYW1ldGVycyIsImJhc2ljVG9rZW5pemF0aW9uUGFyYW1ldGVycyIsImdhdGV3YXkiLCJwYXlwYWxQYXltZW50TWV0aG9kIiwiYW5kcm9pZFBheUNvbmZpZ3VyYXRpb24iLCJhcGlWZXJzaW9uTWlub3IiLCJhbGxvd2VkQXV0aE1ldGhvZHMiLCJ0b2tlbml6YXRpb25TcGVjaWZpY2F0aW9uIiwibWVyY2hhbnRJbmZvIiwicHVyY2hhc2VfY29udGV4dCIsInB1cmNoYXNlX3VuaXRzIiwicGF5ZWUiLCJjbGllbnRfaWQiLCJyZWN1cnJpbmdfcGF5bWVudCIsInBheW1lbnRNZXRob2RUb2tlbml6YXRpb25QYXJhbWV0ZXJzIiwidG9rZW5pemF0aW9uVHlwZSIsImNvbnZlcnREYXRlU3RyaW5nVG9EYXRlIiwiZGF0ZVN0cmluZyIsInNwbGl0RGF0ZSIsImZpcnN0RGF0ZSIsInNlY29uZERhdGUiLCJpc0hUVFBTIiwicGFyc2VyIiwibGVnYWxIb3N0cyIsIm1haW5Eb21haW4iLCJoYXNRdWVyeVBhcmFtcyIsIm5hbWVzcGFjZSIsInRvUmV0dXJuIiwia2V5VmFsdWUiLCJwYXJ0cyIsIl9ub3RFbXB0eSIsImdldFNoYWRvd0hvc3QiLCJzdHlsZU5vZGUiLCJzaGFkb3dIb3N0Iiwic2xvdE5hbWUiLCJzbG90Iiwic2xvdFByb3ZpZGVyIiwic2hlZXQiLCJpbnNlcnRSdWxlIiwic25ha2VTdHJpbmciLCJhdG9iTm9ybWFsaXplZCIsImJhc2U2NFN0cmluZyIsImIyIiwiYjMiLCJjaGFyYWN0ZXJzIiwiUmVnRXhwIiwiX2F0b2IiLCJSRVFVSVJFRF9PUFRJT05TX0ZPUl9TVEFSVF9QQVlNRU5UIiwiUkVRVUlSRURfT1BUSU9OU19GT1JfUEFZX1VQT05fSU5WT0lDRV9QQVlNRU5UX1RZUEUiLCJSRVFVSVJFRF9PUFRJT05TX0ZPUl9BRERSRVNTIiwiUkVRVUlSRURfT1BUSU9OU19GT1JfTElORV9JVEVNUyIsIlJFUVVJUkVEX09QVElPTlNfRk9SX0JMSUtfU0VBTUxFU1NfUEFZTUVOVF9UWVBFIiwiUkVRVUlSRURfT1BUSU9OU19GT1JfQkxJS19PUFRJT05TX0xFVkVMXzAiLCJSRVFVSVJFRF9PUFRJT05TX0ZPUl9CTElLX09QVElPTlNfT05FX0NMSUNLX0ZJUlNUIiwiUkVRVUlSRURfT1BUSU9OU19GT1JfQkxJS19PUFRJT05TX09ORV9DTElDS19TVUJTRVFVRU5UIiwiTG9jYWxQYXltZW50IiwiX2Fzc2V0c1VybCIsIl9pc0RlYnVnIiwiX2xvYWRpbmdGcmFtZVVybCIsIl9hdXRob3JpemF0aW9uSW5Qcm9ncmVzcyIsIl9wYXltZW50VHlwZSIsIl9tZXJjaGFudEFjY291bnRJZCIsImlzRGVmZXJyZWRQYXltZW50VHlwZU9wdGlvbnMiLCJibGlrT3B0aW9ucyIsInBheW1lbnRUeXBlIiwiaGFzTWlzc2luZ0FkZHJlc3NPcHRpb24iLCJvcHRpb24iLCJoYXNNaXNzaW5nTGluZUl0ZW1zT3B0aW9uIiwiaXRlbXMiLCJpdGVtIiwiaGFzTWlzc2luZ09wdGlvbiIsIm1pc3NpbmdBZGRyZXNzT3B0aW9uIiwibWlzc2luZ0xpbmVJdGVtT3B0aW9uIiwib25lQ2xpY2siLCJsZXZlbF8wIiwiaGFzTWlzc2luZ0JsaWtPcHRpb25zIiwiZmFsbGJhY2siLCJidXR0b25UZXh0IiwicmVjdXJyZW50IiwiY3VzdG9tZXJJZCIsIl9pbml0aWFsaXplIiwic2VydmljZSIsIl9mcmFtZVNlcnZpY2UiLCJzdGFydFBheW1lbnQiLCJtaXNzaW5nT3B0aW9uIiwibWlzc2luZ0Vycm9yIiwiYWRkcmVzcyIsIndpbmRvd09wdGlvbnMiLCJvblBheW1lbnRTdGFydFByb21pc2UiLCJzZXJ2aWNlSWQiLCJMT0NBTF9QQVlNRU5UX1NUQVJUX1BBWU1FTlRfTUlTU0lOR19SRVFVSVJFRF9PUFRJT04iLCJhbW91bnQiLCJiaWMiLCJsaW5lMSIsInN0cmVldEFkZHJlc3MiLCJsaW5lMiIsImV4dGVuZGVkQWRkcmVzcyIsImNpdHkiLCJsb2NhbGl0eSIsInJlZ2lvbiIsImJpcnRoRGF0ZSIsImNhbmNlbFVybCIsImNhbmNlbEJ1dHRvblRleHQiLCJkaXNjb3VudEFtb3VudCIsImV4cGVyaWVuY2VQcm9maWxlIiwiYnJhbmROYW1lIiwiY3VzdG9tZXJTZXJ2aWNlSW5zdHJ1Y3Rpb25zIiwibm9TaGlwcGluZyIsInNoaXBwaW5nQWRkcmVzc1JlcXVpcmVkIiwiZmlyc3ROYW1lIiwiZ2l2ZW5OYW1lIiwiZnVuZGluZ1NvdXJjZSIsImludGVudCIsImxhc3ROYW1lIiwic3VybmFtZSIsImxpbmVJdGVtcyIsIm1lcmNoYW50T3JQYXJ0bmVyQ3VzdG9tZXJJZCIsInBheWVyRW1haWwiLCJlbWFpbCIsInBheW1lbnRUeXBlQ291bnRyeUNvZGUiLCJwaG9uZSIsInBob25lQ291bnRyeUNvZGUiLCJyZXR1cm5VcmwiLCJzaGlwcGluZ0Ftb3VudCIsIkxPQ0FMX1BBWU1FTlRfQUxSRUFEWV9JTl9QUk9HUkVTUyIsIl9zdGFydFBheW1lbnRDYWxsYmFjayIsIl9jcmVhdGVTdGFydFBheW1lbnRDYWxsYmFjayIsInBheW1lbnRSZXNvdXJjZSIsIl9zdGFydFBheW1lbnRPcHRpb25zIiwiTE9DQUxfUEFZTUVOVF9TVEFSVF9QQVlNRU5UX0RFRkVSUkVEX1BBWU1FTlRfRkFJTEVEIiwib25QYXltZW50U3RhcnQiLCJwYXltZW50SWQiLCJwYXltZW50VG9rZW4iLCJMT0NBTF9QQVlNRU5UX1NUQVJUX1BBWU1FTlRfRkFJTEVEIiwiTE9DQUxfUEFZTUVOVF9JTlZBTElEX1BBWU1FTlRfT1BUSU9OIiwicXVlcnlJdGVtcyIsIndhc0NhbmNlbGVkIiwiTE9DQUxfUEFZTUVOVF9DQU5DRUxFRCIsImVycm9yY29kZSIsImJ0THBUb2tlbiIsIl9mb3JtYXRUb2tlbml6ZURhdGEiLCJfZm9ybWF0VG9rZW5pemVQYXlsb2FkIiwiTE9DQUxfUEFZTUVOVF9UT0tFTklaQVRJT05fRkFJTEVEIiwiY2xvc2VXaW5kb3ciLCJfYXV0aG9yaXp0aW9uSW5Qcm9ncmVzcyIsImZvY3VzV2luZG93IiwiTE9DQUxfUEFZTUVOVF9XSU5ET1dfQ0xPU0VEIiwiTE9DQUxfUEFZTUVOVF9XSU5ET1dfT1BFTl9GQUlMRUQiLCJhY2NvdW50IiwicGF5ZXJJbmZvIiwiaGFzVG9rZW5pemF0aW9uUGFyYW1zIiwiYnRMcFBheW1lbnRJZCIsImJ0THBQYXllcklkIiwicGF5cGFsQWNjb3VudCIsInBheWVySWQiLCJQYXllcklEIiwidW5pbGF0ZXJhbCIsInVudmV0dGVkTWVyY2hhbnQiLCJMT0NBTF9QQVlNRU5UX05PVF9FTkFCTEVEIiwiTWFzdGVycGFzcyIsIl9hdXRoSW5Qcm9ncmVzcyIsImdldFJldHVyblVybFByZWZpeCIsIl9jYWxsYmFja1VybCIsIkxBTkRJTkdfRlJBTUVfTkFNRSIsIlBPUFVQX0hFSUdIVCIsIlBPUFVQX1dJRFRIIiwiUkVRVUlSRURfT1BUSU9OU19GT1JfVE9LRU5JWkUiLCJNQVNURVJQQVNTX1RPS0VOSVpFX01JU1NJTkdfUkVRVUlSRURfT1BUSU9OIiwiTUFTVEVSUEFTU19UT0tFTklaQVRJT05fQUxSRUFEWV9JTl9QUk9HUkVTUyIsIl9uYXZpZ2F0ZUZyYW1lVG9Mb2FkaW5nUGFnZSIsImZyYW1lT3B0aW9ucyIsIl9jcmVhdGVGcmFtZU9wZW5IYW5kbGVyIiwicmVxdWVzdFRva2VuIiwib3JpZ2luVXJsIiwic3VidG90YWwiLCJjYWxsYmFja1VybCIsInF1ZXJ5UGFyYW1zIiwiYWxsb3dlZENhcmRUeXBlcyIsIk1BU1RFUlBBU1NfVkVSU0lPTiIsIl9jbG9zZVdpbmRvdyIsIk1BU1RFUlBBU1NfSU5WQUxJRF9QQVlNRU5UX09QVElPTiIsIk1BU1RFUlBBU1NfRkxPV19GQUlMRUQiLCJwb3B1cEJyaWRnZUVyciIsIk1BU1RFUlBBU1NfUE9QVVBfQ0xPU0VEIiwiX3Rva2VuaXplTWFzdGVycGFzcyIsImZyYW1lU2VydmljZUVyciIsIk1BU1RFUlBBU1NfUE9QVVBfT1BFTl9GQUlMRUQiLCJtcHN0YXR1cyIsIm9hdXRoX3ZlcmlmaWVyIiwib2F1dGhfdG9rZW4iLCJjaGVja291dF9yZXNvdXJjZV91cmwiLCJpc01pc3NpbmdSZXF1aXJlZFBheWxvYWQiLCJNQVNURVJQQVNTX1BPUFVQX01JU1NJTkdfUkVRVUlSRURfUEFSQU1FVEVSUyIsIm1hc3RlcnBhc3NDYXJkIiwiY2hlY2tvdXRSZXNvdXJjZVVybCIsInZlcmlmaWVyVG9rZW4iLCJtYXN0ZXJwYXNzQ2FyZHMiLCJ0b2tlbml6ZUVyciIsIk1BU1RFUlBBU1NfQUNDT1VOVF9UT0tFTklaQVRJT05fRkFJTEVEIiwiaXNTdXBwb3J0ZWQiLCJNQVNURVJQQVNTX0JST1dTRVJfTk9UX1NVUFBPUlRFRCIsIk1BU1RFUlBBU1NfTk9UX0VOQUJMRUQiLCJDQVJEX1RZUEVfTUFQUElOR1MiLCJWaXNhIiwiTWFzdGVyQ2FyZCIsIkRpc2NvdmVyIiwiVW5pb25QYXkiLCJNYWVzdHJvIiwiUGF5bWVudFJlcXVlc3RDb21wb25lbnQiLCJlbmFibGVkUGF5bWVudE1ldGhvZHMiLCJfY29tcG9uZW50SWQiLCJfZW5hYmxlZFBheW1lbnRNZXRob2RzIiwiYmFzaWNDYXJkIiwiX3N1cHBvcnRlZFBheW1lbnRNZXRob2RzIiwiX2NvbnN0cnVjdERlZmF1bHRTdXBwb3J0ZWRQYXltZW50TWV0aG9kcyIsIl9kZWZhdWx0U3VwcG9ydGVkUGF5bWVudE1ldGhvZHMiLCJzdXBwb3J0ZWRQYXltZW50TWV0aG9kcyIsInN1cHBvcnRlZE1ldGhvZHMiLCJhbGxvd1BheW1lbnRSZXF1ZXN0IiwiUEFZTUVOVF9SRVFVRVNUX05PX1ZBTElEX1NVUFBPUlRFRF9QQVlNRU5UX01FVEhPRFMiLCJGUkFNRV9DQU5fTUFLRV9SRVFVRVNUUyIsIlNISVBQSU5HX0FERFJFU1NfQ0hBTkdFIiwic2hpcHBpbmdBZGRyZXNzIiwic2hpcHBpbmdBZGRyZXNzQ2hhbmdlRXZlbnQiLCJ1cGRhdGVXaXRoIiwicGF5bWVudERldGFpbHMiLCJVUERBVEVfU0hJUFBJTkdfQUREUkVTUyIsIlNISVBQSU5HX09QVElPTl9DSEFOR0UiLCJzaGlwcGluZ09wdGlvbiIsInNoaXBwaW5nT3B0aW9uQ2hhbmdlRXZlbnQiLCJVUERBVEVfU0hJUFBJTkdfT1BUSU9OIiwiY3JlYXRlU3VwcG9ydGVkUGF5bWVudE1ldGhvZHNDb25maWd1cmF0aW9uIiwiUEFZTUVOVF9SRVFVRVNUX0NSRUFURV9TVVBQT1JURURfUEFZTUVOVF9NRVRIT0RTX0NPTkZJR1VSQVRJT05fTVVTVF9JTkNMVURFX1RZUEUiLCJQQVlNRU5UX1JFUVVFU1RfQ1JFQVRFX1NVUFBPUlRFRF9QQVlNRU5UX01FVEhPRFNfQ09ORklHVVJBVElPTl9UWVBFX05PVF9FTkFCTEVEIiwiUEFZTUVOVF9SRVFVRVNUX0lOSVRJQUxJWkVEIiwicmF3RXJyb3IiLCJfZm9ybWF0VG9rZW5pemF0aW9uRXJyb3IiLCJyYXdQYXltZW50UmVzcG9uc2UiLCJjYW5NYWtlUGF5bWVudCIsInVuc3VwcG9ydGVkUGF5bWVudE1ldGhvZCIsIlBheW1lbnRSZXF1ZXN0IiwiU1VQUE9SVEVEX01FVEhPRFMiLCJQQVlNRU5UX1JFUVVFU1RfVU5TVVBQT1JURURfUEFZTUVOVF9NRVRIT0QiLCJDQU5fTUFLRV9QQVlNRU5UIiwiX2Zvcm1hdENhbk1ha2VQYXltZW50RXJyb3IiLCJmb3JtYXR0ZWRFcnJvciIsIlBBWU1FTlRfUkVRVUVTVF9DQU5DRUxFRCIsIlBBWU1FTlRfUkVRVUVTVF9JTklUSUFMSVpBVElPTl9NSVNDT05GSUdVUkVEIiwiUEFZTUVOVF9SRVFVRVNUX0dPT0dMRV9QQVlNRU5UX0ZBSUxFRF9UT19UT0tFTklaRSIsIlBBWU1FTlRfUkVRVUVTVF9HT09HTEVfUEFZTUVOVF9QQVJTSU5HX0VSUk9SIiwiUEFZTUVOVF9SRVFVRVNUX05PVF9DT01QTEVURUQiLCJQQVlNRU5UX1JFUVVFU1RfQ0FOX01BS0VfUEFZTUVOVF9OT1RfQUxMT1dFRCIsIlBBWU1FTlRfUkVRVUVTVF9DQU5fTUFLRV9QQVlNRU5UX0ZBSUxFRCIsIlBBWVBBTF9OT1RfRU5BQkxFRCIsIlBBWVBBTF9TQU5EQk9YX0FDQ09VTlRfTk9UX0xJTktFRCIsIlBBWVBBTF9BQ0NPVU5UX1RPS0VOSVpBVElPTl9GQUlMRUQiLCJQQVlQQUxfRkxPV19GQUlMRUQiLCJQQVlQQUxfRkxPV19PUFRJT05fUkVRVUlSRUQiLCJQQVlQQUxfU1RBUlRfVkFVTFRfSU5JVElBVEVEX0NIRUNLT1VUX1BBUkFNX1JFUVVJUkVEIiwiUEFZUEFMX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVF9TRVRVUF9GQUlMRUQiLCJQQVlQQUxfU1RBUlRfVkFVTFRfSU5JVElBVEVEX0NIRUNLT1VUX1BPUFVQX09QRU5fRkFJTEVEIiwiUEFZUEFMX1NUQVJUX1ZBVUxUX0lOSVRJQVRFRF9DSEVDS09VVF9DQU5DRUxFRCIsIlBBWVBBTF9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVRfSU5fUFJPR1JFU1MiLCJQQVlQQUxfSU5WQUxJRF9QQVlNRU5UX09QVElPTiIsIlBBWVBBTF9NSVNTSU5HX1JFUVVJUkVEX09QVElPTiIsIlBheVBhbENoZWNrb3V0IiwiUkVRVUlSRURfUEFSQU1TX0ZPUl9TVEFSVF9WQVVMVF9JTklUSUFURURfQ0hFQ0tPVVQiLCJfYXV0b1NldERhdGFVc2VySWRUb2tlbiIsImF1dG9TZXREYXRhVXNlcklkVG9rZW4iLCJfYXV0aG9yaXphdGlvbkluZm9ybWF0aW9uIiwiZmluZ2VycHJpbnQiLCJlbnZpcm9ubWVudE5vTmV0d29yayIsIl9zZXR1cEVycm9yIiwiX2ZyYW1lU2VydmljZVByb21pc2UiLCJfc2V0dXBGcmFtZVNlcnZpY2UiLCJmcmFtZVNlcnZpY2VQcm9taXNlIiwidGltZW91dFJlZiIsImNyZWF0ZVBheW1lbnQiLCJGTE9XX0VORFBPSU5UUyIsImZsb3ciLCJfY3JlYXRlUGF5bWVudFJlc291cmNlIiwiYWdyZWVtZW50U2V0dXAiLCJ0b2tlbklkIiwiaW50ZW50RnJvbUNyZWF0ZVBheW1lbnQiLCJvZmZlckNyZWRpdCIsIl9mb3JtYXRQYXltZW50UmVzb3VyY2VEYXRhIiwidXBkYXRlUGF5bWVudCIsIl9oYXNNaXNzaW5nT3B0aW9uIiwiUkVRVUlSRURfT1BUSU9OUyIsIl92ZXJpZnlDb25zaXN0ZW50Q3VycmVuY3kiLCJfZm9ybWF0VXBkYXRlUGF5bWVudERhdGEiLCJzdGFydFZhdWx0SW5pdGlhdGVkQ2hlY2tvdXQiLCJtaXNzaW5nUmVxdWlyZWRQYXJhbSIsIl92YXVsdEluaXRpYXRlZENoZWNrb3V0SW5Qcm9ncmVzcyIsInBhcmFtIiwiX2FkZE1vZGFsQmFja2Ryb3AiLCJfd2FpdEZvclZhdWx0SW5pdGlhdGVkQ2hlY2tvdXREZXBlbmRlbmNpZXMiLCJmcmFtZUNvbW11bmljYXRpb25Qcm9taXNlIiwic3RhcnRWYXVsdEluaXRpYXRlZENoZWNrb3V0UHJvbWlzZSIsIl9jb25zdHJ1Y3RWYXVsdENoZWNrdXRVcmwiLCJfY3JlYXRlRnJhbWVTZXJ2aWNlQ2FsbGJhY2siLCJfcmVtb3ZlTW9kYWxCYWNrZHJvcCIsIm9wdE91dE9mTW9kYWxCYWNrZHJvcCIsIl9tb2RhbEJhY2tkcm9wIiwiZm9jdXNWYXVsdEluaXRpYXRlZENoZWNrb3V0V2luZG93IiwiY2xvc2VWYXVsdEluaXRpYXRlZENoZWNrb3V0V2luZG93IiwidG9rZW5pemVQYXltZW50IiwicGF5ZXJJRCIsInBheW1lbnRJRCIsIm9yZGVySUQiLCJvcmRlcklkIiwidG9rZW5pemF0aW9uRXJyb3IiLCJ0b2tlbml6ZU9wdGlvbnMiLCJzaG91bGRWYXVsdCIsImJpbGxpbmdUb2tlbiIsImVjVG9rZW4iLCJzaGlwcGluZ09wdGlvbnNJZCIsInZhdWx0IiwiY3JlZGl0RmluYW5jaW5nT2ZmZXJlZCIsImdldENsaWVudElkIiwiY2xpZW50SWQiLCJsb2FkUGF5UGFsU0RLIiwibG9hZFByb21pc2UiLCJ1c2VySWRUb2tlbiIsIl9wYXlwYWxTY3JpcHQiLCJjb21wb25lbnRzIiwiY3VycmVuY3kiLCJfYXR0YWNoUHJlbG9hZFBpeGVsIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJzdWJkb21haW4iLCJwcmVsb2FkT3B0aW9ucyIsIm9mZmVyUGF5cGFsQ3JlZGl0IiwibG9jYWxlQ29kZSIsImVuYWJsZVNoaXBwaW5nQWRkcmVzcyIsImFkZHJlc3NPdmVycmlkZSIsInNoaXBwaW5nQWRkcmVzc0VkaXRhYmxlIiwibGFuZGluZ1BhZ2VUeXBlIiwic2hpcHBpbmdPcHRpb25zIiwicmVxdWVzdEJpbGxpbmdBZ3JlZW1lbnQiLCJ2YXVsdEluaXRpYXRlZENoZWNrb3V0UGF5bWVudE1ldGhvZFRva2VuIiwic2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUiLCJiaWxsaW5nQWdyZWVtZW50RGV0YWlscyIsImJpbGxpbmdBZ3JlZW1lbnREZXNjcmlwdGlvbiIsIl9yaXNrQ29ycmVsYXRpb25JZCIsImV2ZXJ5IiwicmVxdWlyZWQiLCJyZWNpcGllbnROYW1lIiwiaXNUb2tlbml6YXRpb25LZXkiLCJpc1ZhdWx0RmxvdyIsImJpbGxpbmdBZ3JlZW1lbnRUb2tlbiIsInNoaXBwaW5nT3B0aW9uSWQiLCJjb2JyYW5kZWRDYXJkTGFiZWwiLCJQYXlQYWwiLCJ0b2tlbml6ZVByb21pc2UiLCJvcHRpb25FcnJvciIsIlBBWVBBTF9UT0tFTklaQVRJT05fUkVRVUVTVF9BQ1RJVkUiLCJvZmZlclBheUxhdGVyIiwiX25hdmlnYXRlRnJhbWVUb0F1dGgiLCJjYW5jZWxlZCIsIlBBWVBBTF9QT1BVUF9DTE9TRUQiLCJfdG9rZW5pemVQYXlQYWwiLCJQQVlQQUxfUE9QVVBfT1BFTl9GQUlMRUQiLCJiYV90b2tlbiIsImFwcHJvdmFsVXJsIiwidXNlcmFjdGlvbiIsImNoZWNrb3V0IiwiUHJlZmVycmVkUGF5bWVudE1ldGhvZHMiLCJmZXRjaFByZWZlcnJlZFBheW1lbnRNZXRob2RzIiwicGF5cGFsUHJlZmVycmVkIiwidmVubW9QcmVmZXJyZWQiLCJzZXBhRXJyb3JzIiwiYmlsbGluZ0FkZHJlc3NPcHRpb25zIiwiQklMTElOR19BRERSRVNTX09QVElPTlMiLCJjcmVhdGVNYW5kYXRlIiwic2VwYV9kZWJpdCIsImFjY291bnRfaG9sZGVyX25hbWUiLCJhY2NvdW50SG9sZGVyTmFtZSIsImJpbGxpbmdfYWRkcmVzcyIsImNvdW50cnlfY29kZSIsImliYW4iLCJtZXJjaGFudF9vcl9wYXJ0bmVyX2N1c3RvbWVyX2lkIiwibWFuZGF0ZV90eXBlIiwibWFuZGF0ZVR5cGUiLCJjYW5jZWxfdXJsIiwicmV0dXJuX3VybCIsIm1lcmNoYW50X2FjY291bnRfaWQiLCJjY09wdGlvbiIsInNlcGFEZWJpdEFjY291bnQiLCJTRVBBX0NSRUFURV9NQU5EQVRFX0ZBSUxFRCIsImJhbmtSZWZlcmVuY2VUb2tlbiIsIm9wZW5Qb3B1cCIsImFzc2V0c0Jhc2VVcmwiLCJwb3B1cExvY2F0aW9uIiwiZnJhbWVTZXJ2aWNlSW5zdGFuY2UiLCJzdWNjZXNzIiwibWFuZGF0ZUFwcHJvdmVkIiwiY2FuY2VsIiwiY3VzdG9tZXJDYW5jZWxlZCIsIlNFUEFfQ1VTVE9NRVJfQ0FOQ0VMRUQiLCJTRVBBX1RPS0VOSVpBVElPTl9GQUlMRUQiLCJoYW5kbGVBcHByb3ZhbCIsInNlcGFfZGViaXRfYWNjb3VudCIsImxhc3RfNCIsImJhbmtfcmVmZXJlbmNlX3Rva2VuIiwiU0VQQV9UUkFOU0FDVElPTl9GQUlMRUQiLCJpYmFuTGFzdEZvdXIiLCJtYW5kYXRlcyIsIlNFUEEiLCJfcmV0dXJuVXJsIiwiX2NhbmNlbFVybCIsImNyZWF0ZU1hbmRhdGVPcHRpb25zIiwiU0VQQV9UT0tFTklaRV9NSVNTSU5HX1JFUVVJUkVEX09QVElPTiIsIk1BTkRBVEVfVFlQRV9FTlVNIiwiaW5jbHVkZXMiLCJtYW5kYXRlUmVzcG9uc2UiLCJhcHByb3ZhbCIsIlNFUEFfSU5WQUxJRF9NQU5EQVRFX1RZUEUiLCJCYXNlRnJhbWV3b3JrIiwiX2NyZWF0ZU9wdGlvbnMiLCJzZXRVcEV2ZW50TGlzdGVuZXJzIiwiVEhSRUVEU19GUkFNRVdPUktfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCIsInZlcmlmeUNhcmQiLCJwcml2YXRlT3B0aW9ucyIsImZvcm1hdHRlZE9wdGlvbnMiLCJfY2hlY2tGb3JWZXJpZnlDYXJkRXJyb3IiLCJfdmVyaWZ5Q2FyZEluUHJvZ3Jlc3MiLCJfZm9ybWF0VmVyaWZ5Q2FyZE9wdGlvbnMiLCJfZm9ybWF0TG9va3VwRGF0YSIsIl9wZXJmb3JtTG9va3VwIiwibG9va3VwIiwidGhyZWVEU2VjdXJlVmVyc2lvbiIsIl9vbkxvb2t1cENvbXBsZXRlIiwiaW5pdGlhbGl6ZUNoYWxsZW5nZVdpdGhMb29rdXBSZXNwb25zZSIsIl9yZXNldFZlcmlmaWNhdGlvblN0YXRlIiwiX2NoZWNrRm9yRnJhbWV3b3JrU3BlY2lmaWNWZXJpZnlDYXJkRXJyb3JzIiwiX3ByZXNlbnRDaGFsbGVuZ2UiLCJwcmVwYXJlTG9va3VwIiwiX3ZlcmlmeUNhcmRQcm9taXNlUGx1cyIsIl9yZWxvYWRUaHJlZURTZWN1cmUiLCJsb29rdXBFcnJvciIsImFuYWx5dGljc01lc3NhZ2UiLCJUSFJFRURTX0xPT0tVUF9UT0tFTklaRURfQ0FSRF9OT1RfRk9VTkRfRVJST1IiLCJUSFJFRURTX0xPT0tVUF9WQUxJREFUSU9OX0VSUk9SIiwiVEhSRUVEU19MT09LVVBfRVJST1IiLCJlcnJvck9wdGlvbiIsIlRIUkVFRFNfQVVUSEVOVElDQVRJT05fSU5fUFJPR1JFU1MiLCJUSFJFRURTX01JU1NJTkdfVkVSSUZZX0NBUkRfT1BUSU9OIiwibG9va3VwUmVzcG9uc2UiLCJfbG9va3VwUGF5bWVudE1ldGhvZCIsIl9oYW5kbGVMb29rdXBSZXNwb25zZSIsImxpYWJpbGl0eVNoaWZ0ZWQiLCJsaWFiaWxpdHlTaGlmdFBvc3NpYmxlIiwiY2hhbGxlbmdlU2hvdWxkQmVQcmVzZW50ZWQiLCJhY3NVcmwiLCJfZm9ybWF0QXV0aFJlc3BvbnNlIiwidmVyaWZpY2F0aW9uRGV0YWlscyIsImJyb3dzZXJDb2xvckRlcHRoIiwiY29sb3JEZXB0aCIsImJyb3dzZXJKYXZhRW5hYmxlZCIsImphdmFFbmFibGVkIiwiYnJvd3NlckphdmFzY3JpcHRFbmFibGVkIiwiYnJvd3Nlckxhbmd1YWdlIiwiYnJvd3NlclNjcmVlbkhlaWdodCIsImJyb3dzZXJTY3JlZW5XaWR0aCIsImJyb3dzZXJUaW1lWm9uZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZGV2aWNlQ2hhbm5lbCIsIl9oYW5kbGVWMUF1dGhSZXNwb25zZSIsImF1dGhSZXNwb25zZSIsImF1dGhfcmVzcG9uc2UiLCJjYW5jZWxWZXJpZnlDYXJkIiwiVEhSRUVEU19OT19WRVJJRklDQVRJT05fUEFZTE9BRCIsIl9zZXR1cFYxQnVzIiwicGFyZW50VVJMIiwiYnVzIiwiYXV0aGVudGljYXRpb25Db21wbGV0ZUJhc2VVcmwiLCJwYXJlcSIsInRlcm1VcmwiLCJtZCIsInBhcmVudFVybCIsIkFVVEhFTlRJQ0FUSU9OX0NPTVBMRVRFIiwiaGFuZGxlQXV0aFJlc3BvbnNlIiwiX3NldHVwVjFJZnJhbWUiLCJzaG93TG9hZGVyIiwiX3YxQnVzIiwiX3NldHVwVjFFbGVtZW50cyIsIl92MUlmcmFtZSIsIl90ZWFyZG93blYxRWxlbWVudHMiLCJfb25WMUtleXVwIiwiU29uZ2JpcmRGcmFtZXdvcmsiLCJCb290c3RyYXAzTW9kYWxGcmFtZXdvcmsiLCJfY3JlYXRlVjFJZnJhbWVNb2RhbEVsZW1lbnQiLCJtb2RhbCIsIl9jcmVhdGVDYXJkaW5hbENvbmZpZ3VyYXRpb25PcHRpb25zIiwic2V0dXBPcHRpb25zIiwicGF5bWVudCIsImZyYW1ld29yayIsIkNhcmRpbmFsTW9kYWxGcmFtZXdvcmsiLCJhZGRDbG9zZUJ1dHRvbiIsImNhcmRpbmFsU0RLQ29uZmlnIiwiZGlzcGxheUV4aXRCdXR0b24iLCJMZWdhY3lGcmFtZXdvcmsiLCJJbmxpbmVJZnJhbWVGcmFtZXdvcmsiLCJsZWdhY3kiLCJBVVRIRU5USUNBVElPTl9JRlJBTUVfQVZBSUxBQkxFIiwiX2FkZFYxSWZyYW1lVG9QYWdlIiwiX3YxTW9kYWwiLCJfc2V0dXBGcmFtZXdvcmtTcGVjaWZpY0xpc3RlbmVycyIsInNldENhcmRpbmFsTGlzdGVuZXIiLCJfb25JbmxpbmVTZXR1cCIsImh0bWxUZW1wbGF0ZSIsImhhc0Vycm9yIiwiVEhSRUVEU19JTkxJTkVfSUZSQU1FX0RFVEFJTFNfSU5DT1JSRUNUIiwidHJhbnNmb3JtVjFDdXN0b21lckJpbGxpbmdBZGRyZXNzIiwiY3VzdG9tZXIiLCJjb3VudHJ5Q29kZUFscGhhMiIsIl9jcmVhdGVJZnJhbWUiLCJfaGFuZGxlQXV0aFJlc3BvbnNlIiwicmVtb3ZlRnJhbWUiLCJhZGRGcmFtZSIsIm1vZGlmaWVkT3B0aW9ucyIsIlNPTkdCSVJEX1VJX0VWRU5UUyIsIlNDQV9FWEVNUFRJT05fVFlQRVMiLCJfc29uZ2JpcmRJbml0RmFpbGVkIiwiX2NsaWVudE1ldGFkYXRhIiwicmVxdWVzdGVkVGhyZWVEU2VjdXJlVmVyc2lvbiIsIm9yaWdpbmFsU2V0dXBPcHRpb25zIiwiX2dldERmUmVmZXJlbmNlSWRQcm9taXNlUGx1cyIsInNldHVwU29uZ2JpcmQiLCJfY2FyZGluYWxFdmVudHMiLCJleHRyYWN0QWRkcmVzc0RhdGEiLCJsaW5lMyIsIkxPT0tVUF9DT01QTEVURSIsIkNVU1RPTUVSX0NBTkNFTEVEIiwiZ2V0RGZSZWZlcmVuY2VJZCIsImRmUmVmZXJlbmNlSWQiLCJfdHJpZ2dlckNhcmRpbmFsQmluUHJvY2VzcyIsImNsaWVudE1ldGFkYXRhIiwiaGFuZGxlU29uZ2JpcmRFcnJvciIsImVycm9yVHlwZSIsIl9yZW1vdmVTb25nYmlyZExpc3RlbmVycyIsIl9zb25nYmlyZFByb21pc2UiLCJpc3N1ZXJTdGFydFRpbWUiLCJDYXJkaW5hbCIsInRyaWdnZXIiLCJiaW5SZXN1bHRzIiwiaXNzdWVyRGV2aWNlRGF0YUNvbGxlY3Rpb25UaW1lRWxhcHNlZCIsImlzc3VlckRldmljZURhdGFDb2xsZWN0aW9uUmVzdWx0IiwiU3RhdHVzIiwidHJhbnNmb3JtQmlsbGluZ0FkZHJlc3MiLCJhZGRpdGlvbmFsSW5mb3JtYXRpb24iLCJiaWxsaW5nUGhvbmVOdW1iZXIiLCJwaG9uZU51bWJlciIsImJpbGxpbmdHaXZlbk5hbWUiLCJiaWxsaW5nU3VybmFtZSIsInRyYW5zZm9ybVNoaXBwaW5nQWRkcmVzcyIsIl9jcmVhdGVWMUlmcmFtZU1vZGFsIiwiYnRuIiwiYmFja2Ryb3AiLCJjbG9zZUhhbmRsZXIiLCJUSFJFRURTX0NBUkRJTkFMX1NES19DQU5DRUxFRCIsInN0YXJ0VGltZSIsIl92MlNldHVwRmFpbHVyZVJlYXNvbiIsIl9sb2FkQ2FyZGluYWxTY3JpcHQiLCJfY29uZmlndXJlQ2FyZGluYWxTZGsiLCJzZXR1cFN0YXJ0VGltZSIsIlRIUkVFRFNfQ0FSRElOQUxfU0RLX1NFVFVQX0ZBSUxFRCIsIl9zb25nYmlyZFNldHVwVGltZW91dFJlZmVyZW5jZSIsInRocmVlRFNDb25maWciLCJqd3QiLCJjYXJkaW5hbEF1dGhlbnRpY2F0aW9uSldUIiwiY2FyZGluYWxDb25maWd1cmF0aW9uIiwiX2NyZWF0ZVBheW1lbnRzU2V0dXBDb21wbGV0ZUNhbGxiYWNrIiwiY29uZmlndXJlIiwiY2FyZGluYWxEZXZpY2VEYXRhQ29sbGVjdGlvblRpbWVFbGFwc2VkIiwiX2NyZWF0ZVBheW1lbnRzVmFsaWRhdGVkQ2FsbGJhY2siLCJwYXltZW50U2V0dGluZ3MiLCJsb2dnaW5nIiwibG9nZ2luZ0VuYWJsZWQiLCJkaXNwbGF5TG9hZGluZyIsInNjcmlwdFNvdXJjZSIsIl9nZXRDYXJkaW5hbFNjcmlwdFNvdXJjZSIsIlRIUkVFRFNfQ0FSRElOQUxfU0RLX1NDUklQVF9MT0FEX0ZBSUxFRCIsImdhdGV3YXlDb25maWciLCJDQVJESU5BTF9TQ1JJUFRfU09VUkNFIiwiX3BlcmZvcm1KV1RWYWxpZGF0aW9uIiwicmF3Q2FyZGluYWxTREtWZXJpZmljYXRpb25EYXRhIiwiY2FuY2VsQ29kZSIsIlBheW1lbnQiLCJFeHRlbmRlZERhdGEiLCJDaGFsbGVuZ2VDYW5jZWwiLCJmb3JtYXR0ZWRSZXNwb25zZSIsIlRIUkVFRFNfSldUX0FVVEhFTlRJQ0FUSU9OX0ZBSUxFRCIsInZhbGlkYXRlZEp3dCIsIkFjdGlvbkNvZGUiLCJFcnJvck51bWJlciIsIlRIUkVFRFNfQ0FSRElOQUxfU0RLX1NFVFVQX1RJTUVET1VUIiwiVEhSRUVEU19DQVJESU5BTF9TREtfUkVTUE9OU0VfVElNRURPVVQiLCJUSFJFRURTX0NBUkRJTkFMX1NES19CQURfQ09ORklHIiwiVEhSRUVEU19DQVJESU5BTF9TREtfQkFEX0pXVCIsIlRIUkVFRFNfQ0FSRElOQUxfU0RLX0VSUk9SIiwiRXJyb3JEZXNjcmlwdGlvbiIsIm9uTG9va3VwQ29tcGxldGUiLCJpZ25vcmVPbkxvb2t1cENvbXBsZXRlUmVxdWlyZW1lbnQiLCJtb2JpbGVQaG9uZU51bWJlciIsInJlcXVpcmVzVXNlckF1dGhlbnRpY2F0aW9uIiwidHJhbnNhY3Rpb25JZCIsImNvbnRpbnVlIiwiQWNzVXJsIiwiUGF5bG9hZCIsIk9yZGVyRGV0YWlscyIsIlRyYW5zYWN0aW9uSWQiLCJhZGRpdGlvbmFsSW5mbyIsImFjY291bnRUeXBlIiwiY2hhbGxlbmdlUmVxdWVzdGVkIiwicmVxdWVzdGVkRXhlbXB0aW9uVHlwZSIsIlRIUkVFRFNfUkVRVUVTVEVEX0VYRU1QVElPTl9UWVBFX0lOVkFMSUQiLCJjdXN0b21GaWVsZHMiLCJkYXRhT25seVJlcXVlc3RlZCIsImV4ZW1wdGlvblJlcXVlc3RlZCIsInJlcXVlc3RWaXNhREFGIiwiY2FyZEFkZCIsImNhcmRBZGRDaGFsbGVuZ2VSZXF1ZXN0ZWQiLCJtZXJjaGFudE5hbWUiLCJ2ZXJpZnlDYXJkRXJyb3IiLCJUSFJFRURTX1ZFUklGWV9DQVJEX0NBTkNFTEVEX0JZX01FUkNIQU5UIiwiRlJBTUVXT1JLUyIsIlRocmVlRFNlY3VyZSIsIkZyYW1ld29yayIsIl9mcmFtZXdvcmsiLCJUSFJFRURTX1VOU1VQUE9SVEVEX1ZFUlNJT04iLCJUSFJFRURTX1VOUkVDT0dOSVpFRF9WRVJTSU9OIiwiZ2V0RnJhbWV3b3JrIiwiZ3dDb25maWciLCJUSFJFRURTX05PVF9FTkFCTEVEIiwiVEhSRUVEU19DQU5fTk9UX1VTRV9UT0tFTklaQVRJT05fS0VZIiwiVEhSRUVEU19IVFRQU19SRVFVSVJFRCIsIlRIUkVFRFNfTk9UX0VOQUJMRURfRk9SX1YyIiwiVEhSRUVEU19URVJNX1VSTF9SRVFVSVJFU19CUkFJTlRSRUVfRE9NQUlOIiwiVU5JT05QQVlfTk9UX0VOQUJMRUQiLCJIT1NURURfRklFTERTX0ZSQU1FX05BTUUiLCJVTklPTlBBWV9IT1NURURfRklFTERTX0lOU1RBTkNFX0lOVkFMSUQiLCJVTklPTlBBWV9IT1NURURfRklFTERTX0lOU1RBTkNFX1JFUVVJUkVEIiwiVU5JT05QQVlfQ0FSRF9PUl9IT1NURURfRklFTERTX0lOU1RBTkNFX1JFUVVJUkVEIiwiVU5JT05QQVlfQ0FSRF9BTkRfSE9TVEVEX0ZJRUxEU19JTlNUQU5DRVMiLCJVTklPTlBBWV9FWFBJUkFUSU9OX0RBVEVfSU5DT01QTEVURSIsIlVOSU9OUEFZX0VOUk9MTE1FTlRfQ1VTVE9NRVJfSU5QVVRfSU5WQUxJRCIsIlVOSU9OUEFZX0VOUk9MTE1FTlRfTkVUV09SS19FUlJPUiIsIlVOSU9OUEFZX0ZFVENIX0NBUEFCSUxJVElFU19ORVRXT1JLX0VSUk9SIiwiVU5JT05QQVlfVE9LRU5JWkFUSU9OX05FVFdPUktfRVJST1IiLCJVTklPTlBBWV9NSVNTSU5HX01PQklMRV9QSE9ORV9EQVRBIiwiVU5JT05QQVlfRkFJTEVEX1RPS0VOSVpBVElPTiIsImZldGNoQ2FwYWJpbGl0aWVzIiwiX2luaXRpYWxpemVIb3N0ZWRGaWVsZHMiLCJIT1NURURfRklFTERTX0ZFVENIX0NBUEFCSUxJVElFUyIsImVucm9sbCIsIm1vYmlsZSIsIkhPU1RFRF9GSUVMRFNfRU5ST0xMIiwidW5pb25QYXlFbnJvbGxtZW50IiwibW9iaWxlQ291bnRyeUNvZGUiLCJtb2JpbGVOdW1iZXIiLCJlbnJvbGxtZW50SWQiLCJ1bmlvblBheUVucm9sbG1lbnRJZCIsInNtc0NvZGVSZXF1aXJlZCIsInNtc0NvZGUiLCJ0b2tlbml6ZWRDYXJkIiwiSE9TVEVEX0ZJRUxEU19UT0tFTklaRSIsIl9ob3N0ZWRGaWVsZHNGcmFtZSIsIl9ob3N0ZWRGaWVsZHNJbml0aWFsaXplUHJvbWlzZSIsIlBMQUlEX0xJTktfSlMiLCJVU19CQU5LX0FDQ09VTlRfT1BUSU9OX1JFUVVJUkVEIiwiVVNfQkFOS19BQ0NPVU5UX01VVFVBTExZX0VYQ0xVU0lWRV9PUFRJT05TIiwiVVNfQkFOS19BQ0NPVU5UX0xPR0lOX0xPQURfRkFJTEVEIiwiVVNfQkFOS19BQ0NPVU5UX0xPR0lOX0NMT1NFRCIsIlVTX0JBTktfQUNDT1VOVF9MT0dJTl9SRVFVRVNUX0FDVElWRSIsIlVTX0JBTktfQUNDT1VOVF9UT0tFTklaQVRJT05fTkVUV09SS19FUlJPUiIsIlVTX0JBTktfQUNDT1VOVF9GQUlMRURfVE9LRU5JWkFUSU9OIiwiVVNfQkFOS19BQ0NPVU5UX05PVF9FTkFCTEVEIiwiVVNfQkFOS19BQ0NPVU5UX0JBTktfTE9HSU5fTk9UX0VOQUJMRUQiLCJVU0JhbmtBY2NvdW50IiwiVE9LRU5JWkVfQkFOS19ERVRBSUxTX01VVEFUSU9OIiwiY3JlYXRlR3JhcGhRTE11dGF0aW9uIiwiVE9LRU5JWkVfQkFOS19MT0dJTl9NVVRBVElPTiIsIl9pc1Rva2VuaXppbmdCYW5rTG9naW4iLCJlcnJvckZyb20iLCJCUkFJTlRSRUVfQVBJX0FDQ0VTU19SRVNUUklDVEVEIiwiZm9ybWF0VG9rZW5pemVSZXNwb25zZUZyb21HcmFwaFFMIiwiYWRkTG9hZExpc3RlbmVycyIsImxvYWRIYW5kbGVyIiwiZXJyb3JIYW5kbGVyIiwiUGxhaWQiLCJmb3JtYXRCaWxsaW5nQWRkcmVzc0ZvckdyYXBoUUwiLCJ6aXBDb2RlIiwiZm9ybWF0RGF0YUZvck93bmVyc2hpcFR5cGUiLCJvd25lcnNoaXBUeXBlIiwiaW5kaXZpZHVhbE93bmVyIiwiYnVzaW5lc3NPd25lciIsImJ1c2luZXNzTmFtZSIsIm1hbmRhdGVUZXh0IiwiYmFua0RldGFpbHMiLCJiYW5rTG9naW4iLCJfdG9rZW5pemVCYW5rRGV0YWlscyIsIl90b2tlbml6ZUJhbmtMb2dpbiIsImFjaE1hbmRhdGUiLCJyb3V0aW5nTnVtYmVyIiwiYWNjb3VudE51bWJlciIsImlzUHJvZHVjdGlvbiIsInBsYWlkQ29uZmlnIiwiX2xvYWRQbGFpZCIsInBsYWlkTG9hZEVyciIsImNsaWVudE5hbWUiLCJwcm9kdWN0Iiwic2VsZWN0QWNjb3VudCIsIm9uRXhpdCIsIm9uU3VjY2VzcyIsInB1YmxpY1Rva2VuIiwiYWNjb3VudElkIiwiYWNjb3VudF9pZCIsInN1YnR5cGUiLCJ1c0JhbmtMb2dpbiIsImV4aXN0aW5nU2NyaXB0IiwiX3BsYWlkU2NyaXB0IiwiVkFVTFRfTUFOQUdFUl9ERUxFVEVfUEFZTUVOVF9NRVRIT0RfTk9OQ0VfUkVRVUlSRVNfQ0xJRU5UX1RPS0VOIiwiVkFVTFRfTUFOQUdFUl9QQVlNRU5UX01FVEhPRF9OT05DRV9OT1RfRk9VTkQiLCJWQVVMVF9NQU5BR0VSX0RFTEVURV9QQVlNRU5UX01FVEhPRF9VTktOT1dOX0VSUk9SIiwiVmF1bHRNYW5hZ2VyIiwiZm9ybWF0UGF5bWVudE1ldGhvZFBheWxvYWQiLCJmb3JtYXR0ZWRQYXltZW50TWV0aG9kIiwiaGFzU3Vic2NyaXB0aW9uIiwiZmV0Y2hQYXltZW50TWV0aG9kcyIsImRlZmF1bHRGaXJzdCIsInBheW1lbnRNZXRob2RzUGF5bG9hZCIsInBheW1lbnRNZXRob2RzIiwiZGVsZXRlUGF5bWVudE1ldGhvZCIsInNpbmdsZVVzZVRva2VuSWQiLCJ2ZW5tb19kZXNrdG9wXzEiLCJWRU5NT19QQVlNRU5UX0NPTlRFWFRfU1RBVFVTX1FVRVJZIiwiTEVHQUNZX1ZFTk1PX1BBWU1FTlRfQ09OVEVYVF9TVEFUVVNfUVVFUlkiLCJVUERBVEVfUEFZTUVOVF9DT05URVhUX1FVRVJZIiwiTEVHQUNZX1VQREFURV9QQVlNRU5UX0NPTlRFWFRfUVVFUlkiLCJDUkVBVEVfUEFZTUVOVF9DT05URVhUX1FVRVJZIiwiTEVHQUNZX0NSRUFURV9QQVlNRU5UX0NPTlRFWFRfUVVFUlkiLCJpZnJhbWVyXzEiLCJldmVudHNfMSIsInF1ZXJpZXNfMSIsIlZlbm1vRGVza3RvcCIsImlzSGlkZGVuIiwicHJvZmlsZUlkIiwicGF5bWVudE1ldGhvZFVzYWdlIiwic2hvdWxkVXNlTGVnYWN5UVJDb2RlTXV0YXRpb24iLCJmcmFtZVVybCIsImFwaVJlcXVlc3QiLCJhbGVydEJveCIsIlZFTk1PX0RFU0tUT1BfSUZSQU1FX1JFQURZIiwiVkVOTU9fREVTS1RPUF9SRVFVRVNUX05FV19RUl9DT0RFIiwic3RhcnRQb2xsaW5nIiwibGF1bmNoRGVza3RvcEZsb3ciLCJsYXVuY2hEZXNrdG9wUHJvbWlzZVJlamVjdEZ1bmN0aW9uIiwicmVtb3ZlTGlzdGVuZXJzIiwiVkVOTU9fREVTS1RPUF9DVVNUT01FUl9DQU5DRUxFRCIsImN1c3RvbWVyQ2FuY2VsbGVkSGFuZGxlciIsIlZFTk1PX0RFU0tUT1BfVU5LTk9XTl9FUlJPUiIsInVua25vd25FcnJvckhhbmRsZXIiLCJhbGxvd1VJVG9IYW5kbGVFcnJvciIsInVwZGF0ZVZlbm1vRGVza3RvcFBheW1lbnRDb250ZXh0IiwiY29tcGxldGVkSGFuZGxlciIsInNldEFsZXJ0IiwidmVubW9Db250ZXh0SWQiLCJ0cmlnZ2VyQ29tcGxldGVkIiwidHJpZ2dlclJlamVjdGVkIiwiaGlkZURlc2t0b3BGbG93IiwiVkVOTU9fREVTS1RPUF9DTE9TRURfRlJPTV9QQVJFTlQiLCJkaXNwbGF5RXJyb3IiLCJWRU5NT19ERVNLVE9QX0RJU1BMQVlfRVJST1IiLCJkaXNwbGF5UVJDb2RlIiwiVkVOTU9fREVTS1RPUF9ESVNQTEFZX1FSX0NPREUiLCJhdXRob3JpemUiLCJWRU5NT19ERVNLVE9QX0FVVEhPUklaRSIsImF1dGhvcml6aW5nIiwiVkVOTU9fREVTS1RPUF9BVVRIT1JJWklORyIsImNyZWF0ZVZlbm1vRGVza3RvcFBheW1lbnRDb250ZXh0IiwiZXhwaXJlc0luIiwiZXhwaXJlc0F0IiwiZXhwaXJlZFRpbWUiLCJwb2xsRm9yU3RhdHVzQ2hhbmdlIiwidXNlcm5hbWUiLCJ1c2VyTmFtZSIsInBheW1lbnRNZXRob2RJZCIsImxvb2t1cFZlbm1vRGVza3RvcFBheW1lbnRDb250ZXh0IiwibmV3U3RhdHVzIiwidGV4dENvbnRlbnQiLCJjcmVhdGVQYXltZW50Q29udGV4dEZyb21HcmFwaHFsTGVnYWN5UVJDb2RlTXV0YXRpb24iLCJjcmVhdGVWZW5tb1FSQ29kZVBheW1lbnRDb250ZXh0IiwidmVubW9RUkNvZGVQYXltZW50Q29udGV4dCIsImNyZWF0ZVBheW1lbnRDb250ZXh0RnJvbUdyYXBoUUwiLCJjdXN0b21lckNsaWVudCIsIm1lcmNoYW50UHJvZmlsZUlkIiwiY3JlYXRlVmVubW9QYXltZW50Q29udGV4dCIsInZlbm1vUGF5bWVudENvbnRleHQiLCJjb250ZXh0IiwiYWRkaXRpb25hbE9wdGlvbnMiLCJWZW5tbyIsInN1cHBvcnRzVmVubW8iLCJWRU5NT19JTlZBTElEX1BST0ZJTEVfSUQiLCJkZWVwTGlua1JldHVyblVybCIsIlZFTk1PX0lOVkFMSURfREVFUF9MSU5LX1JFVFVSTl9VUkwiLCJWRU5NT19OT1RfRU5BQkxFRCIsImlzQnJvd3NlclN1cHBvcnRlZCIsImlzSW9zU2FmYXJpIiwiaXNGYWNlYm9va093bmVkQnJvd3Nlck9uQW5kcm9pZCIsImRvZXNOb3RTdXBwb3J0V2luZG93T3BlbkluSW9zIiwiRE9DVU1FTlRfVklTSUJJTElUWV9DSEFOR0VfRVZFTlRfREVMQVkiLCJERUZBVUxUX1BST0NFU1NfUkVTVUxUU19ERUxBWSIsIlZFTk1PX0FQUF9PUl9NT0JJTEVfQVVUSF9VUkwiLCJWRU5NT19NT0JJTEVfQVBQX0FVVEhfT05MWV9VUkwiLCJWRU5NT19XRUJfTE9HSU5fVVJMIiwiVkVOTU9fVE9LRU5JWkFUSU9OX1JFUVVFU1RfQUNUSVZFIiwiVkVOTU9fVE9LRU5JWkFUSU9OX1JFUVVFU1RfTk9UX0FDVElWRSIsIlZFTk1PX0FQUF9GQUlMRUQiLCJWRU5NT19BUFBfQ0FOQ0VMRUQiLCJWRU5NT19DQU5DRUxFRCIsIlZFTk1PX0NVU1RPTUVSX0NBTkNFTEVEIiwiVkVOTU9fTkVUV09SS19FUlJPUiIsIlZFTk1PX0RFU0tUT1BfQ0FOQ0VMRUQiLCJWRU5NT19UT0tFTklaQVRJT05fQ0FOQ0VMRURfQllfTUVSQ0hBTlQiLCJWRU5NT19NT0JJTEVfUEFZTUVOVF9DT05URVhUX1NFVFVQX0ZBSUxFRCIsIlZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9ORVRXT1JLX0VSUk9SIiwiVkVOTU9fTU9CSUxFX1BPTExJTkdfVE9LRU5JWkFUSU9OX0VYUElSRUQiLCJWRU5NT19NT0JJTEVfUE9MTElOR19UT0tFTklaQVRJT05fQ0FOQ0VMRUQiLCJWRU5NT19NT0JJTEVfUE9MTElOR19UT0tFTklaQVRJT05fVElNRU9VVCIsIlZFTk1PX01PQklMRV9QT0xMSU5HX1RPS0VOSVpBVElPTl9GQUlMRUQiLCJWRU5NT19UT0tFTklaQVRJT05fRkFJTEVEIiwiVkVOTU9fRUNEX0RJU0FCTEVEIiwiVkVOTU9fREVTS1RPUF9BVVRIT1JJWkFUSU9OX1RJTUVEX09VVCIsInZlbm1vQ29uc3RhbnRzIiwidXNlQWxsb3dEZXNrdG9wV2ViTG9naW4iLCJtb2JpbGVXZWJGYWxsQmFjayIsImluSWZyYW1lIiwibWVyY2hhbnRBbGxvd3NEZXNrdG9wQnJvd3NlcnMiLCJtZXJjaGFudEFsbG93c1JldHVybmluZ1RvTmV3QnJvd3NlclRhYiIsIm1lcmNoYW50QWxsb3dzV2Vidmlld3MiLCJpc01vYmlsZURldmljZSIsImlzTW9iaWxlRGV2aWNlVGhhdFN1cHBvcnRzUmV0dXJuVG9TYW1lVGFiIiwiYWxsb3dEZXNrdG9wV2ViTG9naW4iLCJhbGxvd0Rlc2t0b3AiLCJhbGxvd05ld0Jyb3dzZXJUYWIiLCJhbGxvd1dlYnZpZXdzIiwiVkVOTU9fTE9HT19TVkciLCJDT05USU5VRV9PUl9DQU5DRUxfSU5TVFJVQ1RJT05TIiwiRUxFTUVOVF9JRFMiLCJiYWNrZHJvcEhpZGRlbiIsImJhY2tkcm9wQ29udGFpbmVyIiwiY2FuY2VsQnV0dG9uIiwiY29udGludWVCdXR0b24iLCJpbnN0cnVjdGlvbnMiLCJ2ZW5tb0xvZ28iLCJ2ZW5tb1VybCIsImNoZWNrRm9yU3RhdHVzQ2hhbmdlIiwiY2FuY2VsVG9rZW5pemF0aW9uIiwiY2hlY2tQYXltZW50Q29udGV4dFN0YXR1cyIsImV4dGVuZGVkUHJvbWlzZSIsImNsb3NlQmFja2Ryb3AiLCJzdGF0dXNDaGVja0Vycm9yIiwiYnVpbGRBbmRTdHlsZUVsZW1lbnRzIiwiYmFja2Ryb3BTdHlsZXNFbGVtZW50IiwiYmFja2Ryb3BEaXYiLCJiYWNrRHJvcENvbnRlbnRDb250YWluZXIiLCJ2ZW5tb0xvZ29EaXYiLCJ2ZW5tb01lc3NhZ2VEaXYiLCJpbnN0cnVjdGlvbnNEaXYiLCJiYWNrZHJvcFN0eWxlcyIsImJhY2tkcm9wQ29udGFpbmVyU3R5bGVzIiwiY2FuY2VsQnV0dG9uU3R5bGVzIiwiY29udGludWVCdXR0b25TdHlsZXMiLCJtZXNzYWdlU3R5bGVzIiwiaW5zdHJ1Y3Rpb25TdHlsZXMiLCJhbHJlYWR5UmVuZGVyZWRCYWNrZHJvcCIsImlubmVyVGV4dCIsInN0b3BQcm9wYWdhdGlvbiIsInJ1bldlYkxvZ2luIiwic2V0dXBEZXNrdG9wV2ViTG9naW4iLCJnZXRWZW5tb1VybCIsImRlc2t0b3BXZWJMb2dpbiIsImNyZWF0ZVZlbm1vRGVza3RvcCIsImdyYXBocWxRdWVyaWVzIiwiX2FsbG93RGVza3RvcFdlYkxvZ2luIiwiX21vYmlsZVdlYkZhbGxCYWNrIiwiX2FsbG93TmV3QnJvd3NlclRhYiIsIl9hbGxvd1dlYnZpZXdzIiwiX2FsbG93RGVza3RvcCIsIl91c2VSZWRpcmVjdEZvcklPUyIsInVzZVJlZGlyZWN0Rm9ySU9TIiwiX3Byb2ZpbGVJZCIsIl9kaXNwbGF5TmFtZSIsIl9kZWVwTGlua1JldHVyblVybCIsIl9pZ25vcmVIaXN0b3J5Q2hhbmdlcyIsImlnbm9yZUhpc3RvcnlDaGFuZ2VzIiwiX3BheW1lbnRNZXRob2RVc2FnZSIsIl9zaG91bGRVc2VMZWdhY3lGbG93IiwiX3JlcXVpcmVNYW51YWxSZXR1cm4iLCJyZXF1aXJlTWFudWFsUmV0dXJuIiwiX3VzZURlc2t0b3BRUkZsb3ciLCJfaXNEZXNrdG9wIiwiX3VzZUFsbG93RGVza3RvcFdlYkxvZ2luIiwiX2Nhbm5vdEhhdmVSZXR1cm5VcmxzIiwiX2FsbG93QW5kcm9pZFJlY3JlYXRpb24iLCJhbGxvd0FuZHJvaWRSZWNyZWF0aW9uIiwiX21heFJldHJ5Q291bnQiLCJfY29sbGVjdEN1c3RvbWVyQmlsbGluZ0FkZHJlc3MiLCJjb2xsZWN0Q3VzdG9tZXJCaWxsaW5nQWRkcmVzcyIsIl9jb2xsZWN0Q3VzdG9tZXJTaGlwcGluZ0FkZHJlc3MiLCJjb2xsZWN0Q3VzdG9tZXJTaGlwcGluZ0FkZHJlc3MiLCJfbGluZUl0ZW1zIiwiX3N1YlRvdGFsQW1vdW50Iiwic3ViVG90YWxBbW91bnQiLCJfZGlzY291bnRBbW91bnQiLCJfdGF4QW1vdW50IiwidGF4QW1vdW50IiwiX3NoaXBwaW5nQW1vdW50IiwiX3RvdGFsQW1vdW50IiwidG90YWxBbW91bnQiLCJfc2hvdWxkQ3JlYXRlVmVubW9QYXltZW50Q29udGV4dCIsImhhc1Rva2VuaXphdGlvblJlc3VsdCIsInZlbm1vRGVza3RvcEluc3RhbmNlIiwiX3Zlbm1vRGVza3RvcEluc3RhbmNlIiwiX21vYmlsZVBvbGxpbmdJbnRlcnZhbCIsIl9tb2JpbGVQb2xsaW5nRXhwaXJlc1RocmVzaG9sZCIsInBheW1lbnRDb250ZXh0UHJvbWlzZSIsIndlYkxvZ2luUHJvbWlzZSIsImFuYWx5dGljc0NhdGVnb3J5IiwiX2ZyYW1lU2VydmljZUluc3RhbmNlIiwiZGVza3RvcFdlYkVyciIsIl9tb2JpbGVQb2xsaW5nQ29udGV4dEVudmlyb25tZW50IiwiX2NyZWF0ZVZlbm1vUGF5bWVudENvbnRleHQiLCJpc1ZhbGlkYXRpb25FcnJvciIsInBheW1lbnRDb250ZXh0UmVzdWx0IiwicHJvbWlzZUVyciIsImdldEZyYWdtZW50UGFyYW1ldGVycyIsInBhcnNlZFBhcmFtcyIsImRlY29kZWRLZXkiLCJyZXNvdXJjZUlkIiwiZm9ybWF0VXNlck5hbWUiLCJkb2N1bWVudFZpc2liaWxpdHlDaGFuZ2VFdmVudE5hbWUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwiaGlkZGVuIiwibXNIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJjYW5jZWxJZlRva2VuaXphdGlvbkluUHJvZ3Jlc3MiLCJ0cmFuc2FjdGlvbkRldGFpbHMiLCJ2ZW5tb0NvbmZpZ3VyYXRpb24iLCJ0cmFuc2FjdGlvbkRldGFpbHNQcmVzZW50IiwidW5pdFRheEFtb3VudCIsImRldGFpbCIsInBheXNoZWV0RGV0YWlscyIsInJlZnJlc2hJbiIsIl9yZWZyZXNoUGF5bWVudENvbnRleHRUaW1lb3V0IiwiX3Rva2VuaXphdGlvbkluUHJvZ3Jlc3MiLCJfdmVubW9QYXltZW50Q29udGV4dFN0YXR1cyIsIl92ZW5tb1BheW1lbnRDb250ZXh0SWQiLCJhcHBTd2l0Y2giLCJfc2hvdWxkVXNlUmVkaXJlY3RTdHJhdGVneSIsImN1cnJlbnRVcmwiLCJicmFpbnRyZWVEYXRhIiwicmVzb3VyY2VfaWQiLCJfc2hvdWxkSW5jbHVkZVJldHVyblVybHMiLCJicmFpbnRyZWVfbWVyY2hhbnRfaWQiLCJicmFpbnRyZWVfYWNjZXNzX3Rva2VuIiwiYnJhaW50cmVlX2Vudmlyb25tZW50IiwiYnJhaW50cmVlX3Nka19kYXRhIiwiX2hhc1Rva2VuaXphdGlvblJlc3VsdCIsInZlbm1vU3VjY2VzcyIsInZlbm1vRXJyb3IiLCJ2ZW5tb0NhbmNlbCIsIl90b2tlbml6ZUZvckRlc2t0b3BRUkZsb3ciLCJfdG9rZW5pemVXZWJMb2dpbldpdGhSZWRpcmVjdCIsIl90b2tlbml6ZUZvck1vYmlsZVdpdGhNYW51YWxSZXR1cm4iLCJfdG9rZW5pemVGb3JNb2JpbGVXaXRoSGFzaENoYW5nZUxpc3RlbmVycyIsImZvcm1hdHRlZFBheWxvYWQiLCJwYXltZW50Q29udGV4dElkIiwiZm9ybWF0VG9rZW5pemVQYXlsb2FkIiwiX3JlbW92ZVZpc2liaWxpdHlFdmVudExpc3RlbmVyIiwiX3Rva2VuaXplUHJvbWlzZSIsIl9jYW5jZWxNb2JpbGVQYXltZW50Q29udGV4dCIsIl9jYW5jZWxWZW5tb0Rlc2t0b3BDb250ZXh0IiwiX2NoZWNrUGF5bWVudENvbnRleHRTdGF0dXNBbmRQcm9jZXNzUmVzdWx0IiwiX2NoZWNrUGF5bWVudENvbnRleHRTdGF0dXMiLCJfcXVlcnlQYXltZW50Q29udGV4dFN0YXR1cyIsInJldHJ5Q291bnQiLCJyZXN1bHRTdGF0dXMiLCJuZXR3b3JrRXJyb3IiLCJfcG9sbEZvclN0YXR1c0NoYW5nZSIsIl9tb2JpbGVQb2xsaW5nQ29udGV4dEV4cGlyZXNJbiIsInJlc3VsdFByb2Nlc3NpbmdJblByb2dyZXNzIiwidmlzaWJpbGl0eUNoYW5nZUxpc3RlbmVyVGltZW91dCIsInByb2Nlc3NIYXNoQ2hhbmdlRmxvd1Jlc3VsdHMiLCJjb21wbGV0ZUZsb3ciLCJfcHJldmlvdXNIYXNoIiwiX29uSGFzaENoYW5nZUxpc3RlbmVyIiwibmV3VVJMIiwiX3Zpc2liaWxpdHlDaGFuZ2VMaXN0ZW5lciIsImRlbGF5IiwicHJvY2Vzc1Jlc3VsdHNEZWxheSIsImVycm9yQ29kZSIsIl9jbGVhckZyYWdtZW50UGFyYW1ldGVycyIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJWSVNBX0NIRUNLT1VUX05PVF9FTkFCTEVEIiwiVklTQV9DSEVDS09VVF9JTklUX09QVElPTlNfUkVRVUlSRUQiLCJWSVNBX0NIRUNLT1VUX1BBWU1FTlRfUkVRVUlSRUQiLCJWSVNBX0NIRUNLT1VUX1RPS0VOSVpBVElPTiIsIlZpc2FDaGVja291dCIsImNyZWF0ZUluaXRPcHRpb25zIiwidmlzYUNoZWNrb3V0Q29uZmlndXJhdGlvbiIsInNldHRpbmdzIiwiZGF0YUxldmVsIiwiY2FyZEJyYW5kcyIsImNhbGxpZCIsImVuY0tleSIsImVuY1BheW1lbnREYXRhIiwidmlzYUNoZWNrb3V0Q2FyZCIsImNhbGxJZCIsImVuY3J5cHRlZFBheW1lbnREYXRhIiwiZW5jcnlwdGVkS2V5IiwidmlzYUNoZWNrb3V0Q2FyZHMiLCJhYSIsImNhIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJsYSIsIm1hIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJyYSIsInNhIiwidGEiLCJwYSIsIm9hIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwiZm9yIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJzdGFjayIsIk5hIiwiT2EiLCJwcmVwYXJlU3RhY2tUcmFjZSIsInNldCIsIlBhIiwicmVuZGVyIiwiUWEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsImFiIiwiYmIiLCJkYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImZiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2hpbGRyZW4iLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImZpcnN0Q2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwib2IiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJwYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInFiIiwicmIiLCJzYiIsInNldFByb3BlcnR5IiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJ0cmFjayIsIndiciIsInViIiwidmIiLCJpcyIsIndiIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIm9uRXJyb3IiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiVGIiLCJWYiIsImFsdGVybmF0ZSIsImZsYWdzIiwiV2IiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIlhiIiwiWmIiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiWWIiLCIkYiIsImFjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImJjIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsImRjIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwidW5zdGFibGVfbm93IiwiZWMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImZjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiaGMiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImljIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJqYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImtjIiwibGMiLCJvYyIsImNsejMyIiwicGMiLCJxYyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIlRjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlZjIiwiV2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJYYyIsIlljIiwiZGlzcGF0Y2hFdmVudCIsInNoaWZ0IiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiZGQiLCJlZCIsInRyYW5zaXRpb24iLCJmZCIsImdkIiwiaGQiLCJVYyIsImpkIiwia2QiLCJsZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwidmQiLCJBZCIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsInJlcGVhdCIsIndoaWNoIiwiUmQiLCJUZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRhcmdldFRvdWNoZXMiLCJYZCIsIllkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJaZCIsIiRkIiwiZG9jdW1lbnRNb2RlIiwiY29sb3IiLCJkYXRldGltZSIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRpbWUiLCJ3ZWVrIiwib25pbnB1dCIsIm5leHRTaWJsaW5nIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImNvbnRlbnRFZGl0YWJsZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiYW5pbWF0aW9uIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImxmIiwibWYiLCJuZiIsIlViIiwib2YiLCJoYXMiLCJwZiIsInFmIiwicmYiLCJzZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwidGYiLCJ1ZiIsInBhcmVudFdpbmRvdyIsInZmIiwid2YiLCJuYSIsInhhIiwiJGEiLCJiYSIsImNoYXIiLCJ1bnNoaWZ0IiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIl9faHRtbCIsIkZmIiwiR2YiLCJIZiIsIkpmIiwicXVldWVNaWNyb3Rhc2siLCJJZiIsIktmIiwiTGYiLCJNZiIsInByZXZpb3VzU2libGluZyIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlpmIiwiY2hpbGRDb250ZXh0VHlwZXMiLCIkZiIsImFnIiwiYmciLCJnZXRDaGlsZENvbnRleHQiLCJjZyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiemciLCJBZyIsIkJnIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJDZyIsInBlbmRpbmdQcm9wcyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsImRlZmF1bHRQcm9wcyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIl9jdXJyZW50VmFsdWUiLCJTZyIsImNoaWxkTGFuZXMiLCJUZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiVWciLCJWZyIsIm1lbW9pemVkVmFsdWUiLCJXZyIsIlhnIiwiWWciLCJpbnRlcmxlYXZlZCIsIlpnIiwiJGciLCJhaCIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsImJoIiwiY2giLCJldmVudFRpbWUiLCJsYW5lIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJDb21wb25lbnQiLCJyZWZzIiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsImxoIiwibWgiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwib2giLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInBoIiwiY29udGV4dFR5cGUiLCJ1cGRhdGVyIiwicWgiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyaCIsInByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJzaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJpbXBsZW1lbnRhdGlvbiIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJyZXZlYWxPcmRlciIsIk5oIiwiT2giLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIlBoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJiYXNlUXVldWUiLCJxdWV1ZSIsImRpIiwiZWkiLCJmaSIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImdldFNuYXBzaG90IiwibGkiLCJtaSIsIm5pIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsIm9pIiwicGkiLCJxaSIsInJpIiwiZGVwcyIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsIkhpIiwiSWkiLCJKaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJLaSIsImRpZ2VzdCIsIkxpIiwiTWkiLCJOaSIsIldlYWtNYXAiLCJPaSIsIlBpIiwiUWkiLCJSaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiU2kiLCJjb21wb25lbnRTdGFjayIsIlRpIiwicGluZ0NhY2hlIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJSZWFjdEN1cnJlbnRPd25lciIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJjb21wYXJlIiwiY2oiLCJkaiIsImVqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwidHJhbnNpdGlvbnMiLCJmaiIsImdqIiwiaGoiLCJpaiIsImpqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwia2oiLCJsaiIsInBlbmRpbmdDb250ZXh0IiwibWoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIm5qIiwib2oiLCJwaiIsInFqIiwicmoiLCJ0aiIsImRhdGFzZXQiLCJkZ3N0IiwidWoiLCJ2aiIsIl9yZWFjdFJldHJ5Iiwic2oiLCJzdWJ0cmVlRmxhZ3MiLCJ3aiIsInhqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwieWoiLCJFaiIsIkZqIiwiR2oiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJjcmVhdGVUZXh0Tm9kZSIsIkhqIiwiSWoiLCJKaiIsIktqIiwiTGoiLCJXZWFrU2V0IiwiTWoiLCJOaiIsIk9qIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiV2oiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiWGoiLCJZaiIsIlpqIiwiYWsiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsImdrIiwiaGsiLCJpayIsImprIiwia2siLCJsayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiV2siLCJtayIsIm5rIiwib2siLCJwayIsIloiLCJxayIsInJrIiwic2siLCJ0ayIsInVrIiwiSW5maW5pdHkiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiRGsiLCJFayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsIndjIiwiY2FsbGJhY2tQcmlvcml0eSIsImlnIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiT2siLCJQayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJRayIsInRpbWVvdXRIYW5kbGUiLCJSayIsIlNrIiwiVGsiLCJVayIsIlZrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiUGoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiWGsiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJZayIsIlprIiwiYWwiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYmwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiY2wiLCJjYWNoZSIsInBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMiLCJmbCIsImdsIiwiaGwiLCJpbCIsImpsIiwiemoiLCIkayIsImxsIiwicmVwb3J0RXJyb3IiLCJtbCIsIl9pbnRlcm5hbFJvb3QiLCJubCIsIm9sIiwicGwiLCJxbCIsInNsIiwicmwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJmb3JtIiwidGwiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJFdmVudHMiLCJ1bCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ2bCIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldEVycm9ySGFuZGxlciIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwicmVjb25jaWxlclZlcnNpb24iLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ3bCIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZGwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwiaHlkcmF0ZSIsImh5ZHJhdGVSb290IiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0Iiwic29ydEluZGV4IiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwic2NoZWR1bGluZyIsImlzSW5wdXRQZW5kaW5nIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsImRlZmluaXRpb24iLCJwcm9wIiwiY2hlY2tvdXROYW1lc3BhY2UiLCJwcmltZXJOYW1lc3BhY2UiLCJjbGllbnRTZXR0aW5nIiwic2V0SGVhZGVycyIsInBvc3QiLCJyZXF1ZXN0SGVhZGVycyIsImFwaUVuZHBvaW50IiwiZ2V0UHJpY2VQb2ludHMiLCJjcmVhdGVDbGllbnRTZXNzaW9uIiwidXBkYXRlQ2xpZW50U2Vzc2lvbiIsInN0YXJ0Q2hlY2tvdXQiLCJyZXN1bWVQYXltZW50Iiwib25TdWNjZXNzQ2hlY2tvdXQiLCJvbkZhaWxDaGVja291dCIsImxvZ0V2ZW50Iiwicm5kczgiLCJybmciLCJieXRlVG9IZXgiLCJidWYiLCJybmRzIiwidW5zYWZlU3RyaW5naWZ5IiwiSW50ZWdyYXRpb25UeXBlRW51bSIsIkNoZWNrb3V0U3RhdGVFbnVtIiwiSW50ZW50IiwiRmxvd1R5cGUiLCJCdXR0b25TaXplT3B0aW9uIiwiUGF5bWVudFN0YXR1cyIsImZvcm1TZXR0aW5ncyIsImNoZWNrb3V0VHJhY2VJZCIsInByZXBhcmVFcnJvciIsImdldFRyYWNlIiwibG9nRXJyb3JFdmVudCIsIm5vdGlmeVBheW1lbnRTdGF0dXNDaGFuZ2UiLCJwYXltZW50TWV0aG9kVHlwZSIsIm9uUGF5bWVudFN0YXR1c0NoYW5nZSIsIm5vdGlmeUVycm9yIiwib25CZWZvcmVQYXltZW50Q3JlYXRlIiwic3RhcnRDaGVja291dFJlcXVlc3QiLCJ0cmFjZUlkIiwicmVxdWVzdElkIiwiY29udGludWVQYXltZW50Q3JlYXRpb24iLCJwYWx0YWJyYWluX3RyYWNlX2lkIiwicGFsdGFicmFpbl9yZXF1ZXN0X2lkIiwiUmVzcG9uc2VFcnJvciIsImFib3J0UGF5bWVudENyZWF0aW9uIiwib25DaGVja291dENvbXBsZXRlIiwiY29tcGxldGVDaGVja291dFJlcXVlc3QiLCJvbkNoZWNrb3V0RmFpbCIsImZhaWxDaGVja291dFJlcXVlc3QiLCJzaG93RXJyb3JNZXNzYWdlIiwiZmV0Y2hEYXRhQ29sbGVjdG9ySW5zdGFuY2UiLCJjcmVhdGVQYXlQYWxDaGVja291dEluc3RhbmNlIiwic2V0dXBQYXlQYWxCdXR0b24iLCJwYXlwYWxDaGVja291dEluc3RhbmNlIiwicGF5bWVudFN0YXR1cyIsImxvY2FsU3RvcmFnZSIsIkJ1dHRvbnMiLCJSZXNwb25zaXZlIiwiY3JlYXRlT3JkZXIiLCJDaGVja291dCIsIkNhcHR1cmUiLCJvbkFwcHJvdmUiLCJCcmFpbnRyZWUiLCJvbkNhbmNlbCIsImNyZWF0ZUhvc3RlZEZpZWxkc0luc3RhbmNlIiwic2V0dXBDYXJkQnV0dG9uIiwiaG9zdGVkRmllbGRzSW5zdGFuY2UiLCJjYXJkQnV0dG9uIiwiY3Vyc29yIiwiY2xpZW50U2V0dGluZ3MiLCJBcGkiLCJjbGllbnRUb2tlbiIsInJlQ2FwdGNoYVJlYWR5IiwiZ2VuZXJhdGVDaGVja291dFRyYWNlSWQiLCJsb2FkUmVDYXB0Y2hhU2NyaXB0Iiwib25SZUNhcHRjaGFSZWFkeSIsImdyZWNhcHRjaGEiLCJzaXRlS2V5IiwicmVDYXB0Y2hhU2l0ZUtleSIsImVudGVycHJpc2UiLCJyZWFkeSIsImdlbmVyYXRlUmVDYXB0Y2hhVG9rZW4iLCJleGVjdXRlIiwicHJpY2VQb2ludHMiLCJwcmljZVBvaW50IiwicHJvZHVjdFNrdSIsInNob3dQYXltZW50Rm9ybSIsInByaW1lck9wdGlvbiIsIm1hbnVhbFBheW1lbnRzIiwicHJpbWVyQ2xpZW50VG9rZW4iLCJyZUNhcHRjaGFFbmFibGVkIiwicmVjYXB0Y2hhVG9rZW4iLCJjbGllbnRTZXNzaW9uRGF0YSIsInByaWNlUG9pbnRJZGVudCIsImlkZW50IiwicGxhdGZvcm1Db2RlIiwiY2xpZW50U2Vzc2lvblJlc3VsdCIsInByaW1lciIsImJyYWludHJlZUNsaWVudFRva2VuIiwic2Vzc2lvbiIsIlBheW1lbnRTZXNzaW9uIiwiY2hlY2tvdXRPcHRpb25zIiwicHJpbWVyUHJvbWlzZSIsImN1cnJlbnRQYXltZW50SWQiLCJwYXltZW50SGFuZGxpbmciLCJvblRva2VuaXplU3VjY2VzcyIsInBheW1lbnRNZXRob2RUb2tlbkRhdGEiLCJpbnRlZ3JhdGlvblBheW1lbnRJZCIsInJlcXVpcmVkQWN0aW9uIiwiY29udGludWVXaXRoTmV3Q2xpZW50VG9rZW4iLCJoYW5kbGVTdWNjZXNzIiwiaGFuZGxlRmFpbHVyZSIsIm9uUmVzdW1lU3VjY2VzcyIsInJlc3VtZVRva2VuRGF0YSIsInJlc3VtZVRva2VuIiwicHJpbWVySW5pdENoZWNrb3V0IiwiYnJhaW50cmVlUHJvbWlzZSIsImRhdGFDb2xsZWN0b3JJbnN0YW5jZSIsInBheW1lbnRNZXRob2RzQXJyYXkiLCJCcmFpbnRyZWVDaGVja291dEluaXQiLCJ1cGRhdGVQYXltZW50Rm9ybSIsInJlZnJlc2hDbGllbnRTZXNzaW9uIiwiQnJhaW5UcmVlQ2hlY2tvdXRGb3JtIiwiZm9udEZhbWlseSIsInRleHRBbGlnbiIsImZvbnRTaXplIiwibWFyZ2luQm90dG9tIiwiYm9yZGVyUmFkaXVzIiwiYm94U2hhZG93IiwiU3VjY2Vzc1BheW1lbnRJY29uIiwidmlld0JveCIsImZpbGwiLCJ4bWxucyIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImZsZXhEaXJlY3Rpb24iLCJQcmltZXJDaGVja291dEZvcm0iLCJpbml0aWFsU3RhdGUiLCJjcmVhdGVQYXltZW50Q2xpZW50IiwiUGF5bWVudENsaWVudEltcGwiLCJvbkNoYW5nZVZhbHVlIiwiYmFja2dyb3VuZENvbG9yIiwib25DaGFuZ2UiLCJyb2xlIiwibWFyZ2luVG9wIiwiZmlyc3RQYXltZW50QnRuIiwicHJpY2VQb2ludERhdGEiLCJpbnRyb0Jhc2VQcmljZSIsImJyYWludHJlZU9wdGlvbiIsIm1hcmdpbkxlZnQiXSwic291cmNlUm9vdCI6IiJ9